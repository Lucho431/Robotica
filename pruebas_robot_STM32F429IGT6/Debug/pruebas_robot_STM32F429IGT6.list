
pruebas_robot_STM32F429IGT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006364  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08006514  08006514  00016514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800654c  0800654c  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  0800654c  0800654c  0001654c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006554  08006554  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006554  08006554  00016554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006558  08006558  00016558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800655c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  20000014  08006570  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  08006570  00020278  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000129fd  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002a2e  00000000  00000000  00032a41  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010d8  00000000  00000000  00035470  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f88  00000000  00000000  00036548  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000252f4  00000000  00000000  000374d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ee8c  00000000  00000000  0005c7c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dd0a7  00000000  00000000  0006b650  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001486f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000472c  00000000  00000000  00148774  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000014 	.word	0x20000014
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080064fc 	.word	0x080064fc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000018 	.word	0x20000018
 80001ec:	080064fc 	.word	0x080064fc

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032e:	f1a4 0401 	sub.w	r4, r4, #1
 8000332:	d1e9      	bne.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__aeabi_d2f>:
 800098c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000990:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000994:	bf24      	itt	cs
 8000996:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800099a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800099e:	d90d      	bls.n	80009bc <__aeabi_d2f+0x30>
 80009a0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009a4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009a8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009ac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009b0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009b4:	bf08      	it	eq
 80009b6:	f020 0001 	biceq.w	r0, r0, #1
 80009ba:	4770      	bx	lr
 80009bc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009c0:	d121      	bne.n	8000a06 <__aeabi_d2f+0x7a>
 80009c2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009c6:	bfbc      	itt	lt
 80009c8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009cc:	4770      	bxlt	lr
 80009ce:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009d2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009d6:	f1c2 0218 	rsb	r2, r2, #24
 80009da:	f1c2 0c20 	rsb	ip, r2, #32
 80009de:	fa10 f30c 	lsls.w	r3, r0, ip
 80009e2:	fa20 f002 	lsr.w	r0, r0, r2
 80009e6:	bf18      	it	ne
 80009e8:	f040 0001 	orrne.w	r0, r0, #1
 80009ec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009f0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009f4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009f8:	ea40 000c 	orr.w	r0, r0, ip
 80009fc:	fa23 f302 	lsr.w	r3, r3, r2
 8000a00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a04:	e7cc      	b.n	80009a0 <__aeabi_d2f+0x14>
 8000a06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a0a:	d107      	bne.n	8000a1c <__aeabi_d2f+0x90>
 8000a0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a10:	bf1e      	ittt	ne
 8000a12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a1a:	4770      	bxne	lr
 8000a1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop

08000a2c <__aeabi_uldivmod>:
 8000a2c:	b953      	cbnz	r3, 8000a44 <__aeabi_uldivmod+0x18>
 8000a2e:	b94a      	cbnz	r2, 8000a44 <__aeabi_uldivmod+0x18>
 8000a30:	2900      	cmp	r1, #0
 8000a32:	bf08      	it	eq
 8000a34:	2800      	cmpeq	r0, #0
 8000a36:	bf1c      	itt	ne
 8000a38:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a3c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a40:	f000 b972 	b.w	8000d28 <__aeabi_idiv0>
 8000a44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a4c:	f000 f806 	bl	8000a5c <__udivmoddi4>
 8000a50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a58:	b004      	add	sp, #16
 8000a5a:	4770      	bx	lr

08000a5c <__udivmoddi4>:
 8000a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a60:	9e08      	ldr	r6, [sp, #32]
 8000a62:	4604      	mov	r4, r0
 8000a64:	4688      	mov	r8, r1
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d14b      	bne.n	8000b02 <__udivmoddi4+0xa6>
 8000a6a:	428a      	cmp	r2, r1
 8000a6c:	4615      	mov	r5, r2
 8000a6e:	d967      	bls.n	8000b40 <__udivmoddi4+0xe4>
 8000a70:	fab2 f282 	clz	r2, r2
 8000a74:	b14a      	cbz	r2, 8000a8a <__udivmoddi4+0x2e>
 8000a76:	f1c2 0720 	rsb	r7, r2, #32
 8000a7a:	fa01 f302 	lsl.w	r3, r1, r2
 8000a7e:	fa20 f707 	lsr.w	r7, r0, r7
 8000a82:	4095      	lsls	r5, r2
 8000a84:	ea47 0803 	orr.w	r8, r7, r3
 8000a88:	4094      	lsls	r4, r2
 8000a8a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a8e:	0c23      	lsrs	r3, r4, #16
 8000a90:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a94:	fa1f fc85 	uxth.w	ip, r5
 8000a98:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a9c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000aa0:	fb07 f10c 	mul.w	r1, r7, ip
 8000aa4:	4299      	cmp	r1, r3
 8000aa6:	d909      	bls.n	8000abc <__udivmoddi4+0x60>
 8000aa8:	18eb      	adds	r3, r5, r3
 8000aaa:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000aae:	f080 811b 	bcs.w	8000ce8 <__udivmoddi4+0x28c>
 8000ab2:	4299      	cmp	r1, r3
 8000ab4:	f240 8118 	bls.w	8000ce8 <__udivmoddi4+0x28c>
 8000ab8:	3f02      	subs	r7, #2
 8000aba:	442b      	add	r3, r5
 8000abc:	1a5b      	subs	r3, r3, r1
 8000abe:	b2a4      	uxth	r4, r4
 8000ac0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ac4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ac8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000acc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ad0:	45a4      	cmp	ip, r4
 8000ad2:	d909      	bls.n	8000ae8 <__udivmoddi4+0x8c>
 8000ad4:	192c      	adds	r4, r5, r4
 8000ad6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ada:	f080 8107 	bcs.w	8000cec <__udivmoddi4+0x290>
 8000ade:	45a4      	cmp	ip, r4
 8000ae0:	f240 8104 	bls.w	8000cec <__udivmoddi4+0x290>
 8000ae4:	3802      	subs	r0, #2
 8000ae6:	442c      	add	r4, r5
 8000ae8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000aec:	eba4 040c 	sub.w	r4, r4, ip
 8000af0:	2700      	movs	r7, #0
 8000af2:	b11e      	cbz	r6, 8000afc <__udivmoddi4+0xa0>
 8000af4:	40d4      	lsrs	r4, r2
 8000af6:	2300      	movs	r3, #0
 8000af8:	e9c6 4300 	strd	r4, r3, [r6]
 8000afc:	4639      	mov	r1, r7
 8000afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b02:	428b      	cmp	r3, r1
 8000b04:	d909      	bls.n	8000b1a <__udivmoddi4+0xbe>
 8000b06:	2e00      	cmp	r6, #0
 8000b08:	f000 80eb 	beq.w	8000ce2 <__udivmoddi4+0x286>
 8000b0c:	2700      	movs	r7, #0
 8000b0e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b12:	4638      	mov	r0, r7
 8000b14:	4639      	mov	r1, r7
 8000b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b1a:	fab3 f783 	clz	r7, r3
 8000b1e:	2f00      	cmp	r7, #0
 8000b20:	d147      	bne.n	8000bb2 <__udivmoddi4+0x156>
 8000b22:	428b      	cmp	r3, r1
 8000b24:	d302      	bcc.n	8000b2c <__udivmoddi4+0xd0>
 8000b26:	4282      	cmp	r2, r0
 8000b28:	f200 80fa 	bhi.w	8000d20 <__udivmoddi4+0x2c4>
 8000b2c:	1a84      	subs	r4, r0, r2
 8000b2e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b32:	2001      	movs	r0, #1
 8000b34:	4698      	mov	r8, r3
 8000b36:	2e00      	cmp	r6, #0
 8000b38:	d0e0      	beq.n	8000afc <__udivmoddi4+0xa0>
 8000b3a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b3e:	e7dd      	b.n	8000afc <__udivmoddi4+0xa0>
 8000b40:	b902      	cbnz	r2, 8000b44 <__udivmoddi4+0xe8>
 8000b42:	deff      	udf	#255	; 0xff
 8000b44:	fab2 f282 	clz	r2, r2
 8000b48:	2a00      	cmp	r2, #0
 8000b4a:	f040 808f 	bne.w	8000c6c <__udivmoddi4+0x210>
 8000b4e:	1b49      	subs	r1, r1, r5
 8000b50:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b54:	fa1f f885 	uxth.w	r8, r5
 8000b58:	2701      	movs	r7, #1
 8000b5a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b5e:	0c23      	lsrs	r3, r4, #16
 8000b60:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b68:	fb08 f10c 	mul.w	r1, r8, ip
 8000b6c:	4299      	cmp	r1, r3
 8000b6e:	d907      	bls.n	8000b80 <__udivmoddi4+0x124>
 8000b70:	18eb      	adds	r3, r5, r3
 8000b72:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000b76:	d202      	bcs.n	8000b7e <__udivmoddi4+0x122>
 8000b78:	4299      	cmp	r1, r3
 8000b7a:	f200 80cd 	bhi.w	8000d18 <__udivmoddi4+0x2bc>
 8000b7e:	4684      	mov	ip, r0
 8000b80:	1a59      	subs	r1, r3, r1
 8000b82:	b2a3      	uxth	r3, r4
 8000b84:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b88:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b8c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b90:	fb08 f800 	mul.w	r8, r8, r0
 8000b94:	45a0      	cmp	r8, r4
 8000b96:	d907      	bls.n	8000ba8 <__udivmoddi4+0x14c>
 8000b98:	192c      	adds	r4, r5, r4
 8000b9a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0x14a>
 8000ba0:	45a0      	cmp	r8, r4
 8000ba2:	f200 80b6 	bhi.w	8000d12 <__udivmoddi4+0x2b6>
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	eba4 0408 	sub.w	r4, r4, r8
 8000bac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bb0:	e79f      	b.n	8000af2 <__udivmoddi4+0x96>
 8000bb2:	f1c7 0c20 	rsb	ip, r7, #32
 8000bb6:	40bb      	lsls	r3, r7
 8000bb8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000bbc:	ea4e 0e03 	orr.w	lr, lr, r3
 8000bc0:	fa01 f407 	lsl.w	r4, r1, r7
 8000bc4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000bc8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000bcc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000bd0:	4325      	orrs	r5, r4
 8000bd2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000bd6:	0c2c      	lsrs	r4, r5, #16
 8000bd8:	fb08 3319 	mls	r3, r8, r9, r3
 8000bdc:	fa1f fa8e 	uxth.w	sl, lr
 8000be0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000be4:	fb09 f40a 	mul.w	r4, r9, sl
 8000be8:	429c      	cmp	r4, r3
 8000bea:	fa02 f207 	lsl.w	r2, r2, r7
 8000bee:	fa00 f107 	lsl.w	r1, r0, r7
 8000bf2:	d90b      	bls.n	8000c0c <__udivmoddi4+0x1b0>
 8000bf4:	eb1e 0303 	adds.w	r3, lr, r3
 8000bf8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000bfc:	f080 8087 	bcs.w	8000d0e <__udivmoddi4+0x2b2>
 8000c00:	429c      	cmp	r4, r3
 8000c02:	f240 8084 	bls.w	8000d0e <__udivmoddi4+0x2b2>
 8000c06:	f1a9 0902 	sub.w	r9, r9, #2
 8000c0a:	4473      	add	r3, lr
 8000c0c:	1b1b      	subs	r3, r3, r4
 8000c0e:	b2ad      	uxth	r5, r5
 8000c10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c14:	fb08 3310 	mls	r3, r8, r0, r3
 8000c18:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c1c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c20:	45a2      	cmp	sl, r4
 8000c22:	d908      	bls.n	8000c36 <__udivmoddi4+0x1da>
 8000c24:	eb1e 0404 	adds.w	r4, lr, r4
 8000c28:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c2c:	d26b      	bcs.n	8000d06 <__udivmoddi4+0x2aa>
 8000c2e:	45a2      	cmp	sl, r4
 8000c30:	d969      	bls.n	8000d06 <__udivmoddi4+0x2aa>
 8000c32:	3802      	subs	r0, #2
 8000c34:	4474      	add	r4, lr
 8000c36:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c3e:	eba4 040a 	sub.w	r4, r4, sl
 8000c42:	454c      	cmp	r4, r9
 8000c44:	46c2      	mov	sl, r8
 8000c46:	464b      	mov	r3, r9
 8000c48:	d354      	bcc.n	8000cf4 <__udivmoddi4+0x298>
 8000c4a:	d051      	beq.n	8000cf0 <__udivmoddi4+0x294>
 8000c4c:	2e00      	cmp	r6, #0
 8000c4e:	d069      	beq.n	8000d24 <__udivmoddi4+0x2c8>
 8000c50:	ebb1 050a 	subs.w	r5, r1, sl
 8000c54:	eb64 0403 	sbc.w	r4, r4, r3
 8000c58:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c5c:	40fd      	lsrs	r5, r7
 8000c5e:	40fc      	lsrs	r4, r7
 8000c60:	ea4c 0505 	orr.w	r5, ip, r5
 8000c64:	e9c6 5400 	strd	r5, r4, [r6]
 8000c68:	2700      	movs	r7, #0
 8000c6a:	e747      	b.n	8000afc <__udivmoddi4+0xa0>
 8000c6c:	f1c2 0320 	rsb	r3, r2, #32
 8000c70:	fa20 f703 	lsr.w	r7, r0, r3
 8000c74:	4095      	lsls	r5, r2
 8000c76:	fa01 f002 	lsl.w	r0, r1, r2
 8000c7a:	fa21 f303 	lsr.w	r3, r1, r3
 8000c7e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c82:	4338      	orrs	r0, r7
 8000c84:	0c01      	lsrs	r1, r0, #16
 8000c86:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c8a:	fa1f f885 	uxth.w	r8, r5
 8000c8e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c92:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c96:	fb07 f308 	mul.w	r3, r7, r8
 8000c9a:	428b      	cmp	r3, r1
 8000c9c:	fa04 f402 	lsl.w	r4, r4, r2
 8000ca0:	d907      	bls.n	8000cb2 <__udivmoddi4+0x256>
 8000ca2:	1869      	adds	r1, r5, r1
 8000ca4:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000ca8:	d22f      	bcs.n	8000d0a <__udivmoddi4+0x2ae>
 8000caa:	428b      	cmp	r3, r1
 8000cac:	d92d      	bls.n	8000d0a <__udivmoddi4+0x2ae>
 8000cae:	3f02      	subs	r7, #2
 8000cb0:	4429      	add	r1, r5
 8000cb2:	1acb      	subs	r3, r1, r3
 8000cb4:	b281      	uxth	r1, r0
 8000cb6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cba:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cbe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc2:	fb00 f308 	mul.w	r3, r0, r8
 8000cc6:	428b      	cmp	r3, r1
 8000cc8:	d907      	bls.n	8000cda <__udivmoddi4+0x27e>
 8000cca:	1869      	adds	r1, r5, r1
 8000ccc:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000cd0:	d217      	bcs.n	8000d02 <__udivmoddi4+0x2a6>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d915      	bls.n	8000d02 <__udivmoddi4+0x2a6>
 8000cd6:	3802      	subs	r0, #2
 8000cd8:	4429      	add	r1, r5
 8000cda:	1ac9      	subs	r1, r1, r3
 8000cdc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000ce0:	e73b      	b.n	8000b5a <__udivmoddi4+0xfe>
 8000ce2:	4637      	mov	r7, r6
 8000ce4:	4630      	mov	r0, r6
 8000ce6:	e709      	b.n	8000afc <__udivmoddi4+0xa0>
 8000ce8:	4607      	mov	r7, r0
 8000cea:	e6e7      	b.n	8000abc <__udivmoddi4+0x60>
 8000cec:	4618      	mov	r0, r3
 8000cee:	e6fb      	b.n	8000ae8 <__udivmoddi4+0x8c>
 8000cf0:	4541      	cmp	r1, r8
 8000cf2:	d2ab      	bcs.n	8000c4c <__udivmoddi4+0x1f0>
 8000cf4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000cf8:	eb69 020e 	sbc.w	r2, r9, lr
 8000cfc:	3801      	subs	r0, #1
 8000cfe:	4613      	mov	r3, r2
 8000d00:	e7a4      	b.n	8000c4c <__udivmoddi4+0x1f0>
 8000d02:	4660      	mov	r0, ip
 8000d04:	e7e9      	b.n	8000cda <__udivmoddi4+0x27e>
 8000d06:	4618      	mov	r0, r3
 8000d08:	e795      	b.n	8000c36 <__udivmoddi4+0x1da>
 8000d0a:	4667      	mov	r7, ip
 8000d0c:	e7d1      	b.n	8000cb2 <__udivmoddi4+0x256>
 8000d0e:	4681      	mov	r9, r0
 8000d10:	e77c      	b.n	8000c0c <__udivmoddi4+0x1b0>
 8000d12:	3802      	subs	r0, #2
 8000d14:	442c      	add	r4, r5
 8000d16:	e747      	b.n	8000ba8 <__udivmoddi4+0x14c>
 8000d18:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d1c:	442b      	add	r3, r5
 8000d1e:	e72f      	b.n	8000b80 <__udivmoddi4+0x124>
 8000d20:	4638      	mov	r0, r7
 8000d22:	e708      	b.n	8000b36 <__udivmoddi4+0xda>
 8000d24:	4637      	mov	r7, r6
 8000d26:	e6e9      	b.n	8000afc <__udivmoddi4+0xa0>

08000d28 <__aeabi_idiv0>:
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop

08000d2c <init_controlRxTx>:

////prototipos de funciones/////
void iniciaInstruccion(void);
void continuaInstruccion(void);

void init_controlRxTx (UART_HandleTypeDef* huart){
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
	uart_handler = huart;
 8000d34:	4a04      	ldr	r2, [pc, #16]	; (8000d48 <init_controlRxTx+0x1c>)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6013      	str	r3, [r2, #0]
} //end init_controlRxTx ()
 8000d3a:	bf00      	nop
 8000d3c:	370c      	adds	r7, #12
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	2000003c 	.word	0x2000003c

08000d4c <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8000d52:	463b      	mov	r3, r7
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000d5a:	4b14      	ldr	r3, [pc, #80]	; (8000dac <MX_DAC_Init+0x60>)
 8000d5c:	4a14      	ldr	r2, [pc, #80]	; (8000db0 <MX_DAC_Init+0x64>)
 8000d5e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000d60:	4812      	ldr	r0, [pc, #72]	; (8000dac <MX_DAC_Init+0x60>)
 8000d62:	f001 fb5a 	bl	800241a <HAL_DAC_Init>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000d6c:	f000 fb7c 	bl	8001468 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000d70:	2300      	movs	r3, #0
 8000d72:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000d74:	2300      	movs	r3, #0
 8000d76:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000d78:	463b      	mov	r3, r7
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	480b      	ldr	r0, [pc, #44]	; (8000dac <MX_DAC_Init+0x60>)
 8000d80:	f001 fb6d 	bl	800245e <HAL_DAC_ConfigChannel>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000d8a:	f000 fb6d 	bl	8001468 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000d8e:	463b      	mov	r3, r7
 8000d90:	2210      	movs	r2, #16
 8000d92:	4619      	mov	r1, r3
 8000d94:	4805      	ldr	r0, [pc, #20]	; (8000dac <MX_DAC_Init+0x60>)
 8000d96:	f001 fb62 	bl	800245e <HAL_DAC_ConfigChannel>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8000da0:	f000 fb62 	bl	8001468 <Error_Handler>
  }

}
 8000da4:	bf00      	nop
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20000040 	.word	0x20000040
 8000db0:	40007400 	.word	0x40007400

08000db4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b08a      	sub	sp, #40	; 0x28
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbc:	f107 0314 	add.w	r3, r7, #20
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	60da      	str	r2, [r3, #12]
 8000dca:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a17      	ldr	r2, [pc, #92]	; (8000e30 <HAL_DAC_MspInit+0x7c>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d127      	bne.n	8000e26 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	613b      	str	r3, [r7, #16]
 8000dda:	4b16      	ldr	r3, [pc, #88]	; (8000e34 <HAL_DAC_MspInit+0x80>)
 8000ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dde:	4a15      	ldr	r2, [pc, #84]	; (8000e34 <HAL_DAC_MspInit+0x80>)
 8000de0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000de4:	6413      	str	r3, [r2, #64]	; 0x40
 8000de6:	4b13      	ldr	r3, [pc, #76]	; (8000e34 <HAL_DAC_MspInit+0x80>)
 8000de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000dee:	613b      	str	r3, [r7, #16]
 8000df0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	60fb      	str	r3, [r7, #12]
 8000df6:	4b0f      	ldr	r3, [pc, #60]	; (8000e34 <HAL_DAC_MspInit+0x80>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	4a0e      	ldr	r2, [pc, #56]	; (8000e34 <HAL_DAC_MspInit+0x80>)
 8000dfc:	f043 0301 	orr.w	r3, r3, #1
 8000e00:	6313      	str	r3, [r2, #48]	; 0x30
 8000e02:	4b0c      	ldr	r3, [pc, #48]	; (8000e34 <HAL_DAC_MspInit+0x80>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	f003 0301 	and.w	r3, r3, #1
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000e0e:	2330      	movs	r3, #48	; 0x30
 8000e10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e12:	2303      	movs	r3, #3
 8000e14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1a:	f107 0314 	add.w	r3, r7, #20
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4805      	ldr	r0, [pc, #20]	; (8000e38 <HAL_DAC_MspInit+0x84>)
 8000e22:	f001 fb8b 	bl	800253c <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8000e26:	bf00      	nop
 8000e28:	3728      	adds	r7, #40	; 0x28
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40007400 	.word	0x40007400
 8000e34:	40023800 	.word	0x40023800
 8000e38:	40020000 	.word	0x40020000

08000e3c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b08c      	sub	sp, #48	; 0x30
 8000e40:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e42:	f107 031c 	add.w	r3, r7, #28
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	605a      	str	r2, [r3, #4]
 8000e4c:	609a      	str	r2, [r3, #8]
 8000e4e:	60da      	str	r2, [r3, #12]
 8000e50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	61bb      	str	r3, [r7, #24]
 8000e56:	4b45      	ldr	r3, [pc, #276]	; (8000f6c <MX_GPIO_Init+0x130>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	4a44      	ldr	r2, [pc, #272]	; (8000f6c <MX_GPIO_Init+0x130>)
 8000e5c:	f043 0320 	orr.w	r3, r3, #32
 8000e60:	6313      	str	r3, [r2, #48]	; 0x30
 8000e62:	4b42      	ldr	r3, [pc, #264]	; (8000f6c <MX_GPIO_Init+0x130>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	f003 0320 	and.w	r3, r3, #32
 8000e6a:	61bb      	str	r3, [r7, #24]
 8000e6c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	617b      	str	r3, [r7, #20]
 8000e72:	4b3e      	ldr	r3, [pc, #248]	; (8000f6c <MX_GPIO_Init+0x130>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	4a3d      	ldr	r2, [pc, #244]	; (8000f6c <MX_GPIO_Init+0x130>)
 8000e78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7e:	4b3b      	ldr	r3, [pc, #236]	; (8000f6c <MX_GPIO_Init+0x130>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e86:	617b      	str	r3, [r7, #20]
 8000e88:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	613b      	str	r3, [r7, #16]
 8000e8e:	4b37      	ldr	r3, [pc, #220]	; (8000f6c <MX_GPIO_Init+0x130>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	4a36      	ldr	r2, [pc, #216]	; (8000f6c <MX_GPIO_Init+0x130>)
 8000e94:	f043 0301 	orr.w	r3, r3, #1
 8000e98:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9a:	4b34      	ldr	r3, [pc, #208]	; (8000f6c <MX_GPIO_Init+0x130>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	f003 0301 	and.w	r3, r3, #1
 8000ea2:	613b      	str	r3, [r7, #16]
 8000ea4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60fb      	str	r3, [r7, #12]
 8000eaa:	4b30      	ldr	r3, [pc, #192]	; (8000f6c <MX_GPIO_Init+0x130>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	4a2f      	ldr	r2, [pc, #188]	; (8000f6c <MX_GPIO_Init+0x130>)
 8000eb0:	f043 0308 	orr.w	r3, r3, #8
 8000eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb6:	4b2d      	ldr	r3, [pc, #180]	; (8000f6c <MX_GPIO_Init+0x130>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	f003 0308 	and.w	r3, r3, #8
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60bb      	str	r3, [r7, #8]
 8000ec6:	4b29      	ldr	r3, [pc, #164]	; (8000f6c <MX_GPIO_Init+0x130>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	4a28      	ldr	r2, [pc, #160]	; (8000f6c <MX_GPIO_Init+0x130>)
 8000ecc:	f043 0304 	orr.w	r3, r3, #4
 8000ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed2:	4b26      	ldr	r3, [pc, #152]	; (8000f6c <MX_GPIO_Init+0x130>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	f003 0304 	and.w	r3, r3, #4
 8000eda:	60bb      	str	r3, [r7, #8]
 8000edc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	607b      	str	r3, [r7, #4]
 8000ee2:	4b22      	ldr	r3, [pc, #136]	; (8000f6c <MX_GPIO_Init+0x130>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	4a21      	ldr	r2, [pc, #132]	; (8000f6c <MX_GPIO_Init+0x130>)
 8000ee8:	f043 0302 	orr.w	r3, r3, #2
 8000eec:	6313      	str	r3, [r2, #48]	; 0x30
 8000eee:	4b1f      	ldr	r3, [pc, #124]	; (8000f6c <MX_GPIO_Init+0x130>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	f003 0302 	and.w	r3, r3, #2
 8000ef6:	607b      	str	r3, [r7, #4]
 8000ef8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_in4_Pin|OUT_in3_Pin|OUT_in2_Pin, GPIO_PIN_RESET);
 8000efa:	2200      	movs	r2, #0
 8000efc:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8000f00:	481b      	ldr	r0, [pc, #108]	; (8000f70 <MX_GPIO_Init+0x134>)
 8000f02:	f001 fcc5 	bl	8002890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, GPIO_PIN_RESET);
 8000f06:	2200      	movs	r2, #0
 8000f08:	2101      	movs	r1, #1
 8000f0a:	481a      	ldr	r0, [pc, #104]	; (8000f74 <MX_GPIO_Init+0x138>)
 8000f0c:	f001 fcc0 	bl	8002890 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = OUT_in4_Pin|OUT_in3_Pin|OUT_in2_Pin;
 8000f10:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000f14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f16:	2301      	movs	r3, #1
 8000f18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f22:	f107 031c 	add.w	r3, r7, #28
 8000f26:	4619      	mov	r1, r3
 8000f28:	4811      	ldr	r0, [pc, #68]	; (8000f70 <MX_GPIO_Init+0x134>)
 8000f2a:	f001 fb07 	bl	800253c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OUT_in1_Pin;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f32:	2301      	movs	r3, #1
 8000f34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OUT_in1_GPIO_Port, &GPIO_InitStruct);
 8000f3e:	f107 031c 	add.w	r3, r7, #28
 8000f42:	4619      	mov	r1, r3
 8000f44:	480b      	ldr	r0, [pc, #44]	; (8000f74 <MX_GPIO_Init+0x138>)
 8000f46:	f001 faf9 	bl	800253c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = IN_sensorL_Pin|IN_sensorR_Pin;
 8000f4a:	230a      	movs	r3, #10
 8000f4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f52:	2301      	movs	r3, #1
 8000f54:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f56:	f107 031c 	add.w	r3, r7, #28
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4805      	ldr	r0, [pc, #20]	; (8000f74 <MX_GPIO_Init+0x138>)
 8000f5e:	f001 faed 	bl	800253c <HAL_GPIO_Init>

}
 8000f62:	bf00      	nop
 8000f64:	3730      	adds	r7, #48	; 0x30
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40023800 	.word	0x40023800
 8000f70:	40020800 	.word	0x40020800
 8000f74:	40020c00 	.word	0x40020c00

08000f78 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000f7c:	4b1b      	ldr	r3, [pc, #108]	; (8000fec <MX_I2C1_Init+0x74>)
 8000f7e:	4a1c      	ldr	r2, [pc, #112]	; (8000ff0 <MX_I2C1_Init+0x78>)
 8000f80:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000f82:	4b1a      	ldr	r3, [pc, #104]	; (8000fec <MX_I2C1_Init+0x74>)
 8000f84:	4a1b      	ldr	r2, [pc, #108]	; (8000ff4 <MX_I2C1_Init+0x7c>)
 8000f86:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f88:	4b18      	ldr	r3, [pc, #96]	; (8000fec <MX_I2C1_Init+0x74>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f8e:	4b17      	ldr	r3, [pc, #92]	; (8000fec <MX_I2C1_Init+0x74>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f94:	4b15      	ldr	r3, [pc, #84]	; (8000fec <MX_I2C1_Init+0x74>)
 8000f96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f9a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f9c:	4b13      	ldr	r3, [pc, #76]	; (8000fec <MX_I2C1_Init+0x74>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000fa2:	4b12      	ldr	r3, [pc, #72]	; (8000fec <MX_I2C1_Init+0x74>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fa8:	4b10      	ldr	r3, [pc, #64]	; (8000fec <MX_I2C1_Init+0x74>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fae:	4b0f      	ldr	r3, [pc, #60]	; (8000fec <MX_I2C1_Init+0x74>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fb4:	480d      	ldr	r0, [pc, #52]	; (8000fec <MX_I2C1_Init+0x74>)
 8000fb6:	f001 fc85 	bl	80028c4 <HAL_I2C_Init>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000fc0:	f000 fa52 	bl	8001468 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	4809      	ldr	r0, [pc, #36]	; (8000fec <MX_I2C1_Init+0x74>)
 8000fc8:	f002 fc2f 	bl	800382a <HAL_I2CEx_ConfigAnalogFilter>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000fd2:	f000 fa49 	bl	8001468 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	4804      	ldr	r0, [pc, #16]	; (8000fec <MX_I2C1_Init+0x74>)
 8000fda:	f002 fc62 	bl	80038a2 <HAL_I2CEx_ConfigDigitalFilter>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000fe4:	f000 fa40 	bl	8001468 <Error_Handler>
  }

}
 8000fe8:	bf00      	nop
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20000054 	.word	0x20000054
 8000ff0:	40005400 	.word	0x40005400
 8000ff4:	00061a80 	.word	0x00061a80

08000ff8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08a      	sub	sp, #40	; 0x28
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001000:	f107 0314 	add.w	r3, r7, #20
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a19      	ldr	r2, [pc, #100]	; (800107c <HAL_I2C_MspInit+0x84>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d12b      	bne.n	8001072 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	613b      	str	r3, [r7, #16]
 800101e:	4b18      	ldr	r3, [pc, #96]	; (8001080 <HAL_I2C_MspInit+0x88>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	4a17      	ldr	r2, [pc, #92]	; (8001080 <HAL_I2C_MspInit+0x88>)
 8001024:	f043 0302 	orr.w	r3, r3, #2
 8001028:	6313      	str	r3, [r2, #48]	; 0x30
 800102a:	4b15      	ldr	r3, [pc, #84]	; (8001080 <HAL_I2C_MspInit+0x88>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	f003 0302 	and.w	r3, r3, #2
 8001032:	613b      	str	r3, [r7, #16]
 8001034:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001036:	23c0      	movs	r3, #192	; 0xc0
 8001038:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800103a:	2312      	movs	r3, #18
 800103c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800103e:	2301      	movs	r3, #1
 8001040:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001042:	2303      	movs	r3, #3
 8001044:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001046:	2304      	movs	r3, #4
 8001048:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800104a:	f107 0314 	add.w	r3, r7, #20
 800104e:	4619      	mov	r1, r3
 8001050:	480c      	ldr	r0, [pc, #48]	; (8001084 <HAL_I2C_MspInit+0x8c>)
 8001052:	f001 fa73 	bl	800253c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	4b09      	ldr	r3, [pc, #36]	; (8001080 <HAL_I2C_MspInit+0x88>)
 800105c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105e:	4a08      	ldr	r2, [pc, #32]	; (8001080 <HAL_I2C_MspInit+0x88>)
 8001060:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001064:	6413      	str	r3, [r2, #64]	; 0x40
 8001066:	4b06      	ldr	r3, [pc, #24]	; (8001080 <HAL_I2C_MspInit+0x88>)
 8001068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001072:	bf00      	nop
 8001074:	3728      	adds	r7, #40	; 0x28
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40005400 	.word	0x40005400
 8001080:	40023800 	.word	0x40023800
 8001084:	40020400 	.word	0x40020400

08001088 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001088:	b598      	push	{r3, r4, r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800108c:	f001 f820 	bl	80020d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001090:	f000 f94e 	bl	8001330 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001094:	f7ff fed2 	bl	8000e3c <MX_GPIO_Init>
  MX_DAC_Init();
 8001098:	f7ff fe58 	bl	8000d4c <MX_DAC_Init>
  MX_TIM2_Init();
 800109c:	f000 fc1a 	bl	80018d4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80010a0:	f000 fc6a 	bl	8001978 <MX_TIM3_Init>
  MX_TIM4_Init();
 80010a4:	f000 fcbc 	bl	8001a20 <MX_TIM4_Init>
  MX_TIM5_Init();
 80010a8:	f000 fd3a 	bl	8001b20 <MX_TIM5_Init>
  MX_UART7_Init();
 80010ac:	f000 ff6c 	bl	8001f88 <MX_UART7_Init>
  MX_TIM7_Init();
 80010b0:	f000 fde0 	bl	8001c74 <MX_TIM7_Init>
  MX_I2C1_Init();
 80010b4:	f7ff ff60 	bl	8000f78 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim2); //encoder.
 80010b8:	4887      	ldr	r0, [pc, #540]	; (80012d8 <main+0x250>)
 80010ba:	f003 f90e 	bl	80042da <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3); //encoder.
 80010be:	4887      	ldr	r0, [pc, #540]	; (80012dc <main+0x254>)
 80010c0:	f003 f90b 	bl	80042da <HAL_TIM_Base_Start>

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1); //rueda izquierda.
 80010c4:	2100      	movs	r1, #0
 80010c6:	4886      	ldr	r0, [pc, #536]	; (80012e0 <main+0x258>)
 80010c8:	f003 f984 	bl	80043d4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2); //rueda derecha.
 80010cc:	2104      	movs	r1, #4
 80010ce:	4884      	ldr	r0, [pc, #528]	; (80012e0 <main+0x258>)
 80010d0:	f003 f980 	bl	80043d4 <HAL_TIM_PWM_Start>
//  TIM4->CCR1 = set_pwm_L;
//  TIM4->CCR2 = set_pwm_R;
  TIM4->CCR1 = 0;
 80010d4:	4b83      	ldr	r3, [pc, #524]	; (80012e4 <main+0x25c>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	635a      	str	r2, [r3, #52]	; 0x34
  TIM4->CCR2 = 0;
 80010da:	4b82      	ldr	r3, [pc, #520]	; (80012e4 <main+0x25c>)
 80010dc:	2200      	movs	r2, #0
 80010de:	639a      	str	r2, [r3, #56]	; 0x38

  //avanza
  HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 1);
 80010e0:	2201      	movs	r2, #1
 80010e2:	2101      	movs	r1, #1
 80010e4:	4880      	ldr	r0, [pc, #512]	; (80012e8 <main+0x260>)
 80010e6:	f001 fbd3 	bl	8002890 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 1);
 80010ea:	2201      	movs	r2, #1
 80010ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010f0:	487e      	ldr	r0, [pc, #504]	; (80012ec <main+0x264>)
 80010f2:	f001 fbcd 	bl	8002890 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 0);
 80010f6:	2200      	movs	r2, #0
 80010f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010fc:	487b      	ldr	r0, [pc, #492]	; (80012ec <main+0x264>)
 80010fe:	f001 fbc7 	bl	8002890 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 0);
 8001102:	2200      	movs	r2, #0
 8001104:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001108:	4878      	ldr	r0, [pc, #480]	; (80012ec <main+0x264>)
 800110a:	f001 fbc1 	bl	8002890 <HAL_GPIO_WritePin>


  HAL_TIM_Base_Start_IT(&htim7); //desborda cada 1 s.
 800110e:	4878      	ldr	r0, [pc, #480]	; (80012f0 <main+0x268>)
 8001110:	f003 f907 	bl	8004322 <HAL_TIM_Base_Start_IT>

  init_controlRxTx (&huart7);
 8001114:	4877      	ldr	r0, [pc, #476]	; (80012f4 <main+0x26c>)
 8001116:	f7ff fe09 	bl	8000d2c <init_controlRxTx>
  mpu9265_Init(&hi2c1);
 800111a:	4877      	ldr	r0, [pc, #476]	; (80012f8 <main+0x270>)
 800111c:	f000 f9ac 	bl	8001478 <mpu9265_Init>
  HAL_UART_Receive_IT(&huart7, rxUart, 4);
 8001120:	2204      	movs	r2, #4
 8001122:	4976      	ldr	r1, [pc, #472]	; (80012fc <main+0x274>)
 8001124:	4873      	ldr	r0, [pc, #460]	; (80012f4 <main+0x26c>)
 8001126:	f004 fa2a 	bl	800557e <HAL_UART_Receive_IT>
//	  TIM4->CCR1 = set_pwm_L;
//	  TIM4->CCR2 = set_pwm_R;
	  
	  

	  if (desbordes != 0){
 800112a:	4b75      	ldr	r3, [pc, #468]	; (8001300 <main+0x278>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d0fb      	beq.n	800112a <main+0xa2>

		  deltaT = __HAL_TIM_GET_COUNTER(&htim7);
 8001132:	4b6f      	ldr	r3, [pc, #444]	; (80012f0 <main+0x268>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001138:	461a      	mov	r2, r3
 800113a:	4b72      	ldr	r3, [pc, #456]	; (8001304 <main+0x27c>)
 800113c:	601a      	str	r2, [r3, #0]

		  mpu9265_Read_Magnet(&mpu9265);
 800113e:	4872      	ldr	r0, [pc, #456]	; (8001308 <main+0x280>)
 8001140:	f000 faf2 	bl	8001728 <mpu9265_Read_Magnet>
		  magX = (float) (mpu9265.Magnet_X_RAW /*+ 388.0*/); //media empirica
 8001144:	4b70      	ldr	r3, [pc, #448]	; (8001308 <main+0x280>)
 8001146:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800114a:	ee07 3a90 	vmov	s15, r3
 800114e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001152:	4b6e      	ldr	r3, [pc, #440]	; (800130c <main+0x284>)
 8001154:	edc3 7a00 	vstr	s15, [r3]
		  magY = (float) (mpu9265.Magnet_Y_RAW /*- 234.0*/); //media empirica
 8001158:	4b6b      	ldr	r3, [pc, #428]	; (8001308 <main+0x280>)
 800115a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800115e:	ee07 3a90 	vmov	s15, r3
 8001162:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001166:	4b6a      	ldr	r3, [pc, #424]	; (8001310 <main+0x288>)
 8001168:	edc3 7a00 	vstr	s15, [r3]

		  if (magX > MAX_magX) MAX_magX = magX;
 800116c:	4b69      	ldr	r3, [pc, #420]	; (8001314 <main+0x28c>)
 800116e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001172:	ee07 3a90 	vmov	s15, r3
 8001176:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800117a:	4b64      	ldr	r3, [pc, #400]	; (800130c <main+0x284>)
 800117c:	edd3 7a00 	vldr	s15, [r3]
 8001180:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001188:	d509      	bpl.n	800119e <main+0x116>
 800118a:	4b60      	ldr	r3, [pc, #384]	; (800130c <main+0x284>)
 800118c:	edd3 7a00 	vldr	s15, [r3]
 8001190:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001194:	ee17 3a90 	vmov	r3, s15
 8001198:	b21a      	sxth	r2, r3
 800119a:	4b5e      	ldr	r3, [pc, #376]	; (8001314 <main+0x28c>)
 800119c:	801a      	strh	r2, [r3, #0]
		  if (magX < MIN_magX) MIN_magX = magX;
 800119e:	4b5e      	ldr	r3, [pc, #376]	; (8001318 <main+0x290>)
 80011a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011a4:	ee07 3a90 	vmov	s15, r3
 80011a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011ac:	4b57      	ldr	r3, [pc, #348]	; (800130c <main+0x284>)
 80011ae:	edd3 7a00 	vldr	s15, [r3]
 80011b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ba:	dd09      	ble.n	80011d0 <main+0x148>
 80011bc:	4b53      	ldr	r3, [pc, #332]	; (800130c <main+0x284>)
 80011be:	edd3 7a00 	vldr	s15, [r3]
 80011c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011c6:	ee17 3a90 	vmov	r3, s15
 80011ca:	b21a      	sxth	r2, r3
 80011cc:	4b52      	ldr	r3, [pc, #328]	; (8001318 <main+0x290>)
 80011ce:	801a      	strh	r2, [r3, #0]
		  if (magY > MAX_magY) MAX_magY = magY;
 80011d0:	4b52      	ldr	r3, [pc, #328]	; (800131c <main+0x294>)
 80011d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011d6:	ee07 3a90 	vmov	s15, r3
 80011da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011de:	4b4c      	ldr	r3, [pc, #304]	; (8001310 <main+0x288>)
 80011e0:	edd3 7a00 	vldr	s15, [r3]
 80011e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ec:	d509      	bpl.n	8001202 <main+0x17a>
 80011ee:	4b48      	ldr	r3, [pc, #288]	; (8001310 <main+0x288>)
 80011f0:	edd3 7a00 	vldr	s15, [r3]
 80011f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011f8:	ee17 3a90 	vmov	r3, s15
 80011fc:	b21a      	sxth	r2, r3
 80011fe:	4b47      	ldr	r3, [pc, #284]	; (800131c <main+0x294>)
 8001200:	801a      	strh	r2, [r3, #0]
		  if (magY < MIN_magY) MIN_magY = magY;
 8001202:	4b47      	ldr	r3, [pc, #284]	; (8001320 <main+0x298>)
 8001204:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001208:	ee07 3a90 	vmov	s15, r3
 800120c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001210:	4b3f      	ldr	r3, [pc, #252]	; (8001310 <main+0x288>)
 8001212:	edd3 7a00 	vldr	s15, [r3]
 8001216:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800121a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800121e:	dd09      	ble.n	8001234 <main+0x1ac>
 8001220:	4b3b      	ldr	r3, [pc, #236]	; (8001310 <main+0x288>)
 8001222:	edd3 7a00 	vldr	s15, [r3]
 8001226:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800122a:	ee17 3a90 	vmov	r3, s15
 800122e:	b21a      	sxth	r2, r3
 8001230:	4b3b      	ldr	r3, [pc, #236]	; (8001320 <main+0x298>)
 8001232:	801a      	strh	r2, [r3, #0]

		  media_magX = (MAX_magX + MIN_magX) / 2;
 8001234:	4b37      	ldr	r3, [pc, #220]	; (8001314 <main+0x28c>)
 8001236:	f9b3 3000 	ldrsh.w	r3, [r3]
 800123a:	461a      	mov	r2, r3
 800123c:	4b36      	ldr	r3, [pc, #216]	; (8001318 <main+0x290>)
 800123e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001242:	4413      	add	r3, r2
 8001244:	0fda      	lsrs	r2, r3, #31
 8001246:	4413      	add	r3, r2
 8001248:	105b      	asrs	r3, r3, #1
 800124a:	b21a      	sxth	r2, r3
 800124c:	4b35      	ldr	r3, [pc, #212]	; (8001324 <main+0x29c>)
 800124e:	801a      	strh	r2, [r3, #0]
		  media_magY = (MAX_magY + MIN_magY) / 2;
 8001250:	4b32      	ldr	r3, [pc, #200]	; (800131c <main+0x294>)
 8001252:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001256:	461a      	mov	r2, r3
 8001258:	4b31      	ldr	r3, [pc, #196]	; (8001320 <main+0x298>)
 800125a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800125e:	4413      	add	r3, r2
 8001260:	0fda      	lsrs	r2, r3, #31
 8001262:	4413      	add	r3, r2
 8001264:	105b      	asrs	r3, r3, #1
 8001266:	b21a      	sxth	r2, r3
 8001268:	4b2f      	ldr	r3, [pc, #188]	; (8001328 <main+0x2a0>)
 800126a:	801a      	strh	r2, [r3, #0]


		  direccion_f32 = atan2f(magY, magX);
 800126c:	4b28      	ldr	r3, [pc, #160]	; (8001310 <main+0x288>)
 800126e:	edd3 7a00 	vldr	s15, [r3]
 8001272:	4b26      	ldr	r3, [pc, #152]	; (800130c <main+0x284>)
 8001274:	ed93 7a00 	vldr	s14, [r3]
 8001278:	eef0 0a47 	vmov.f32	s1, s14
 800127c:	eeb0 0a67 	vmov.f32	s0, s15
 8001280:	f004 ffb0 	bl	80061e4 <atan2f>
 8001284:	eef0 7a40 	vmov.f32	s15, s0
 8001288:	4b28      	ldr	r3, [pc, #160]	; (800132c <main+0x2a4>)
 800128a:	edc3 7a00 	vstr	s15, [r3]
		  direccion_f32 *= (180.0/M_PI);
 800128e:	4b27      	ldr	r3, [pc, #156]	; (800132c <main+0x2a4>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff f910 	bl	80004b8 <__aeabi_f2d>
 8001298:	a30d      	add	r3, pc, #52	; (adr r3, 80012d0 <main+0x248>)
 800129a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800129e:	f7ff f963 	bl	8000568 <__aeabi_dmul>
 80012a2:	4603      	mov	r3, r0
 80012a4:	460c      	mov	r4, r1
 80012a6:	4618      	mov	r0, r3
 80012a8:	4621      	mov	r1, r4
 80012aa:	f7ff fb6f 	bl	800098c <__aeabi_d2f>
 80012ae:	4602      	mov	r2, r0
 80012b0:	4b1e      	ldr	r3, [pc, #120]	; (800132c <main+0x2a4>)
 80012b2:	601a      	str	r2, [r3, #0]
		  //			if (magX < magY) direccion_i16 = -direccion_i16;
		  //			direccion_f32 *= (180.0/M_PI);
		  //			direccion_i16 = direccion_f32/180;


		  deltaT = __HAL_TIM_GET_COUNTER(&htim7) - deltaT;
 80012b4:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <main+0x268>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ba:	4a12      	ldr	r2, [pc, #72]	; (8001304 <main+0x27c>)
 80012bc:	6812      	ldr	r2, [r2, #0]
 80012be:	1a9b      	subs	r3, r3, r2
 80012c0:	461a      	mov	r2, r3
 80012c2:	4b10      	ldr	r3, [pc, #64]	; (8001304 <main+0x27c>)
 80012c4:	601a      	str	r2, [r3, #0]
//		  txUart[0] = COORD_ANG;
//		  txUart[1] = (uint8_t)(direccion_i16 >> 8);
//		  txUart[2] = (uint8_t)(direccion_i16 & 0xFF);
//		  txUart[3] = '\0';
//		  HAL_UART_Transmit_IT(&huart7, txUart, 4);
		  desbordes = 0;
 80012c6:	4b0e      	ldr	r3, [pc, #56]	; (8001300 <main+0x278>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	701a      	strb	r2, [r3, #0]
	  if (desbordes != 0){
 80012cc:	e72d      	b.n	800112a <main+0xa2>
 80012ce:	bf00      	nop
 80012d0:	1a63c1f8 	.word	0x1a63c1f8
 80012d4:	404ca5dc 	.word	0x404ca5dc
 80012d8:	200001b4 	.word	0x200001b4
 80012dc:	20000174 	.word	0x20000174
 80012e0:	200000f4 	.word	0x200000f4
 80012e4:	40000800 	.word	0x40000800
 80012e8:	40020c00 	.word	0x40020c00
 80012ec:	40020800 	.word	0x40020800
 80012f0:	200001f4 	.word	0x200001f4
 80012f4:	20000234 	.word	0x20000234
 80012f8:	20000054 	.word	0x20000054
 80012fc:	200000b4 	.word	0x200000b4
 8001300:	200000b2 	.word	0x200000b2
 8001304:	200000c0 	.word	0x200000c0
 8001308:	200000c4 	.word	0x200000c4
 800130c:	200000d8 	.word	0x200000d8
 8001310:	200000a8 	.word	0x200000a8
 8001314:	20000000 	.word	0x20000000
 8001318:	20000004 	.word	0x20000004
 800131c:	20000002 	.word	0x20000002
 8001320:	20000006 	.word	0x20000006
 8001324:	200000b0 	.word	0x200000b0
 8001328:	200000bc 	.word	0x200000bc
 800132c:	200000dc 	.word	0x200000dc

08001330 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b094      	sub	sp, #80	; 0x50
 8001334:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001336:	f107 0320 	add.w	r3, r7, #32
 800133a:	2230      	movs	r2, #48	; 0x30
 800133c:	2100      	movs	r1, #0
 800133e:	4618      	mov	r0, r3
 8001340:	f004 ff48 	bl	80061d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001344:	f107 030c 	add.w	r3, r7, #12
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]
 8001352:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001354:	2300      	movs	r3, #0
 8001356:	60bb      	str	r3, [r7, #8]
 8001358:	4b2c      	ldr	r3, [pc, #176]	; (800140c <SystemClock_Config+0xdc>)
 800135a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135c:	4a2b      	ldr	r2, [pc, #172]	; (800140c <SystemClock_Config+0xdc>)
 800135e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001362:	6413      	str	r3, [r2, #64]	; 0x40
 8001364:	4b29      	ldr	r3, [pc, #164]	; (800140c <SystemClock_Config+0xdc>)
 8001366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001368:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800136c:	60bb      	str	r3, [r7, #8]
 800136e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001370:	2300      	movs	r3, #0
 8001372:	607b      	str	r3, [r7, #4]
 8001374:	4b26      	ldr	r3, [pc, #152]	; (8001410 <SystemClock_Config+0xe0>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a25      	ldr	r2, [pc, #148]	; (8001410 <SystemClock_Config+0xe0>)
 800137a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800137e:	6013      	str	r3, [r2, #0]
 8001380:	4b23      	ldr	r3, [pc, #140]	; (8001410 <SystemClock_Config+0xe0>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001388:	607b      	str	r3, [r7, #4]
 800138a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800138c:	2309      	movs	r3, #9
 800138e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001390:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001394:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001396:	2301      	movs	r3, #1
 8001398:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800139a:	2302      	movs	r3, #2
 800139c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800139e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80013a4:	2304      	movs	r3, #4
 80013a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80013a8:	23b4      	movs	r3, #180	; 0xb4
 80013aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013ac:	2302      	movs	r3, #2
 80013ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80013b0:	2304      	movs	r3, #4
 80013b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013b4:	f107 0320 	add.w	r3, r7, #32
 80013b8:	4618      	mov	r0, r3
 80013ba:	f002 fb01 	bl	80039c0 <HAL_RCC_OscConfig>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80013c4:	f000 f850 	bl	8001468 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80013c8:	f002 faaa 	bl	8003920 <HAL_PWREx_EnableOverDrive>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80013d2:	f000 f849 	bl	8001468 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013d6:	230f      	movs	r3, #15
 80013d8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013da:	2302      	movs	r3, #2
 80013dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013de:	2300      	movs	r3, #0
 80013e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80013e2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80013e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013ec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80013ee:	f107 030c 	add.w	r3, r7, #12
 80013f2:	2105      	movs	r1, #5
 80013f4:	4618      	mov	r0, r3
 80013f6:	f002 fd53 	bl	8003ea0 <HAL_RCC_ClockConfig>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001400:	f000 f832 	bl	8001468 <Error_Handler>
  }
}
 8001404:	bf00      	nop
 8001406:	3750      	adds	r7, #80	; 0x50
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	40023800 	.word	0x40023800
 8001410:	40007000 	.word	0x40007000

08001414 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
	if (htim->Instance==TIM7){
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a07      	ldr	r2, [pc, #28]	; (8001440 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d105      	bne.n	8001432 <HAL_TIM_PeriodElapsedCallback+0x1e>
//		cuenta_pulsosL = __HAL_TIM_GET_COUNTER(&htim3);
//		cuenta_pulsosR = __HAL_TIM_GET_COUNTER(&htim2);
//		__HAL_TIM_SET_COUNTER(&htim3, 0);
//		__HAL_TIM_SET_COUNTER(&htim2, 0);

		desbordes++;
 8001426:	4b07      	ldr	r3, [pc, #28]	; (8001444 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	3301      	adds	r3, #1
 800142c:	b2da      	uxtb	r2, r3
 800142e:	4b05      	ldr	r3, [pc, #20]	; (8001444 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001430:	701a      	strb	r2, [r3, #0]

	}
}
 8001432:	bf00      	nop
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	40001400 	.word	0x40001400
 8001444:	200000b2 	.word	0x200000b2

08001448 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
	flag_cmd = 1;
 8001450:	4b04      	ldr	r3, [pc, #16]	; (8001464 <HAL_UART_RxCpltCallback+0x1c>)
 8001452:	2201      	movs	r2, #1
 8001454:	701a      	strb	r2, [r3, #0]
}
 8001456:	bf00      	nop
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	20000030 	.word	0x20000030

08001468 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800146c:	bf00      	nop
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
	...

08001478 <mpu9265_Init>:





void mpu9265_Init(I2C_HandleTypeDef* i2c_handler){
 8001478:	b590      	push	{r4, r7, lr}
 800147a:	b089      	sub	sp, #36	; 0x24
 800147c:	af04      	add	r7, sp, #16
 800147e:	6078      	str	r0, [r7, #4]
	uint8_t check, data;

	hi2c_mpu = i2c_handler;
 8001480:	4aa3      	ldr	r2, [pc, #652]	; (8001710 <mpu9265_Init+0x298>)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6013      	str	r3, [r2, #0]

	HAL_I2C_Mem_Read(hi2c_mpu, MPU9250_ADDRESS << 1, WHO_AM_I_MPU9250, 1, &check, 1, 1000);
 8001486:	4ba2      	ldr	r3, [pc, #648]	; (8001710 <mpu9265_Init+0x298>)
 8001488:	6818      	ldr	r0, [r3, #0]
 800148a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800148e:	9302      	str	r3, [sp, #8]
 8001490:	2301      	movs	r3, #1
 8001492:	9301      	str	r3, [sp, #4]
 8001494:	f107 030f 	add.w	r3, r7, #15
 8001498:	9300      	str	r3, [sp, #0]
 800149a:	2301      	movs	r3, #1
 800149c:	2275      	movs	r2, #117	; 0x75
 800149e:	21d0      	movs	r1, #208	; 0xd0
 80014a0:	f001 fc42 	bl	8002d28 <HAL_I2C_Mem_Read>

	if (check == 0X73){ //successfull respond
 80014a4:	7bfb      	ldrb	r3, [r7, #15]
 80014a6:	2b73      	cmp	r3, #115	; 0x73
 80014a8:	d141      	bne.n	800152e <mpu9265_Init+0xb6>
		data = 0;
 80014aa:	2300      	movs	r3, #0
 80014ac:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(hi2c_mpu, MPU9250_ADDRESS << 1, PWR_MGMT_1, 1, &data, 1, 1000); //writing 0 in PWR_MGMT_1 reg to wake it up.
 80014ae:	4b98      	ldr	r3, [pc, #608]	; (8001710 <mpu9265_Init+0x298>)
 80014b0:	6818      	ldr	r0, [r3, #0]
 80014b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014b6:	9302      	str	r3, [sp, #8]
 80014b8:	2301      	movs	r3, #1
 80014ba:	9301      	str	r3, [sp, #4]
 80014bc:	f107 030e 	add.w	r3, r7, #14
 80014c0:	9300      	str	r3, [sp, #0]
 80014c2:	2301      	movs	r3, #1
 80014c4:	226b      	movs	r2, #107	; 0x6b
 80014c6:	21d0      	movs	r1, #208	; 0xd0
 80014c8:	f001 fb34 	bl	8002b34 <HAL_I2C_Mem_Write>

		data = 0X07;
 80014cc:	2307      	movs	r3, #7
 80014ce:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(hi2c_mpu, MPU9250_ADDRESS << 1, SMPLRT_DIV, 1, &data, 1, 1000); //seting data rate in 1kHz by writing 0x07 in SMPLRT_DIV reg.
 80014d0:	4b8f      	ldr	r3, [pc, #572]	; (8001710 <mpu9265_Init+0x298>)
 80014d2:	6818      	ldr	r0, [r3, #0]
 80014d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014d8:	9302      	str	r3, [sp, #8]
 80014da:	2301      	movs	r3, #1
 80014dc:	9301      	str	r3, [sp, #4]
 80014de:	f107 030e 	add.w	r3, r7, #14
 80014e2:	9300      	str	r3, [sp, #0]
 80014e4:	2301      	movs	r3, #1
 80014e6:	2219      	movs	r2, #25
 80014e8:	21d0      	movs	r1, #208	; 0xd0
 80014ea:	f001 fb23 	bl	8002b34 <HAL_I2C_Mem_Write>

		data = 0;
 80014ee:	2300      	movs	r3, #0
 80014f0:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(hi2c_mpu, MPU9250_ADDRESS << 1, GYRO_CONFIG, 1, &data, 1, 1000); //SET GYROSCOPIC CONFIGURATION: XG_ST=0; YG_ST=0; ZG_ST=0; FS_SEL=0 -> +/- 250 º/s.
 80014f2:	4b87      	ldr	r3, [pc, #540]	; (8001710 <mpu9265_Init+0x298>)
 80014f4:	6818      	ldr	r0, [r3, #0]
 80014f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014fa:	9302      	str	r3, [sp, #8]
 80014fc:	2301      	movs	r3, #1
 80014fe:	9301      	str	r3, [sp, #4]
 8001500:	f107 030e 	add.w	r3, r7, #14
 8001504:	9300      	str	r3, [sp, #0]
 8001506:	2301      	movs	r3, #1
 8001508:	221b      	movs	r2, #27
 800150a:	21d0      	movs	r1, #208	; 0xd0
 800150c:	f001 fb12 	bl	8002b34 <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Write(hi2c_mpu, MPU9250_ADDRESS << 1, ACCEL_CONFIG, 1, &data, 1, 1000); //SET accelerometer CONFIGURATION: XA_ST=0; YA_ST=0; ZA_ST=0; FS_SEL=0 -> +/- 2g.
 8001510:	4b7f      	ldr	r3, [pc, #508]	; (8001710 <mpu9265_Init+0x298>)
 8001512:	6818      	ldr	r0, [r3, #0]
 8001514:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001518:	9302      	str	r3, [sp, #8]
 800151a:	2301      	movs	r3, #1
 800151c:	9301      	str	r3, [sp, #4]
 800151e:	f107 030e 	add.w	r3, r7, #14
 8001522:	9300      	str	r3, [sp, #0]
 8001524:	2301      	movs	r3, #1
 8001526:	221c      	movs	r2, #28
 8001528:	21d0      	movs	r1, #208	; 0xd0
 800152a:	f001 fb03 	bl	8002b34 <HAL_I2C_Mem_Write>
	}else{
		//Error_Handler();
	}

	//magnetometer//
	data = 0b10; //i2c bypass bit, in INT_PIN_CFG reg. (made to reach the magnetometer)
 800152e:	2302      	movs	r3, #2
 8001530:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(hi2c_mpu, MPU9250_ADDRESS << 1, INT_PIN_CFG, 1, &data, 1, 1000);
 8001532:	4b77      	ldr	r3, [pc, #476]	; (8001710 <mpu9265_Init+0x298>)
 8001534:	6818      	ldr	r0, [r3, #0]
 8001536:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800153a:	9302      	str	r3, [sp, #8]
 800153c:	2301      	movs	r3, #1
 800153e:	9301      	str	r3, [sp, #4]
 8001540:	f107 030e 	add.w	r3, r7, #14
 8001544:	9300      	str	r3, [sp, #0]
 8001546:	2301      	movs	r3, #1
 8001548:	2237      	movs	r2, #55	; 0x37
 800154a:	21d0      	movs	r1, #208	; 0xd0
 800154c:	f001 faf2 	bl	8002b34 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Read(hi2c_mpu, AK8963_ADDRESS << 1, WHO_AM_I_AK8963, 1, &check, 1, 1000);
 8001550:	4b6f      	ldr	r3, [pc, #444]	; (8001710 <mpu9265_Init+0x298>)
 8001552:	6818      	ldr	r0, [r3, #0]
 8001554:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001558:	9302      	str	r3, [sp, #8]
 800155a:	2301      	movs	r3, #1
 800155c:	9301      	str	r3, [sp, #4]
 800155e:	f107 030f 	add.w	r3, r7, #15
 8001562:	9300      	str	r3, [sp, #0]
 8001564:	2301      	movs	r3, #1
 8001566:	2200      	movs	r2, #0
 8001568:	2118      	movs	r1, #24
 800156a:	f001 fbdd 	bl	8002d28 <HAL_I2C_Mem_Read>
	HAL_Delay(1);
 800156e:	2001      	movs	r0, #1
 8001570:	f000 fe20 	bl	80021b4 <HAL_Delay>
	if (check == 0X48){ //successfull respond
 8001574:	7bfb      	ldrb	r3, [r7, #15]
 8001576:	2b48      	cmp	r3, #72	; 0x48
 8001578:	f040 80c5 	bne.w	8001706 <mpu9265_Init+0x28e>

		//Power down magnetometer
		data = 0x00;
 800157c:	2300      	movs	r3, #0
 800157e:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(hi2c_mpu, AK8963_ADDRESS << 1, AK8963_CNTL, 1, &data, 1, 1000);
 8001580:	4b63      	ldr	r3, [pc, #396]	; (8001710 <mpu9265_Init+0x298>)
 8001582:	6818      	ldr	r0, [r3, #0]
 8001584:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001588:	9302      	str	r3, [sp, #8]
 800158a:	2301      	movs	r3, #1
 800158c:	9301      	str	r3, [sp, #4]
 800158e:	f107 030e 	add.w	r3, r7, #14
 8001592:	9300      	str	r3, [sp, #0]
 8001594:	2301      	movs	r3, #1
 8001596:	220a      	movs	r2, #10
 8001598:	2118      	movs	r1, #24
 800159a:	f001 facb 	bl	8002b34 <HAL_I2C_Mem_Write>
		HAL_Delay(100);
 800159e:	2064      	movs	r0, #100	; 0x64
 80015a0:	f000 fe08 	bl	80021b4 <HAL_Delay>

		//Enter Fuse ROM access mode
		data = 0x0F; //Fuse ROM access mode
 80015a4:	230f      	movs	r3, #15
 80015a6:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(hi2c_mpu, AK8963_ADDRESS << 1, AK8963_CNTL, 1, &data, 1, 1000); //Control 1 register
 80015a8:	4b59      	ldr	r3, [pc, #356]	; (8001710 <mpu9265_Init+0x298>)
 80015aa:	6818      	ldr	r0, [r3, #0]
 80015ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015b0:	9302      	str	r3, [sp, #8]
 80015b2:	2301      	movs	r3, #1
 80015b4:	9301      	str	r3, [sp, #4]
 80015b6:	f107 030e 	add.w	r3, r7, #14
 80015ba:	9300      	str	r3, [sp, #0]
 80015bc:	2301      	movs	r3, #1
 80015be:	220a      	movs	r2, #10
 80015c0:	2118      	movs	r1, #24
 80015c2:	f001 fab7 	bl	8002b34 <HAL_I2C_Mem_Write>
		HAL_Delay(100);
 80015c6:	2064      	movs	r0, #100	; 0x64
 80015c8:	f000 fdf4 	bl	80021b4 <HAL_Delay>

		//Read the x-, y-, and z-axis calibration values
		uint8_t rawMagCalData[3];
		HAL_I2C_Mem_Read(hi2c_mpu, AK8963_ADDRESS << 1, AK8963_ASAX, 1, &rawMagCalData[0], 3, 1000); //Sensitivity Adjustment values registers (read-only)
 80015cc:	4b50      	ldr	r3, [pc, #320]	; (8001710 <mpu9265_Init+0x298>)
 80015ce:	6818      	ldr	r0, [r3, #0]
 80015d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015d4:	9302      	str	r3, [sp, #8]
 80015d6:	2303      	movs	r3, #3
 80015d8:	9301      	str	r3, [sp, #4]
 80015da:	f107 0308 	add.w	r3, r7, #8
 80015de:	9300      	str	r3, [sp, #0]
 80015e0:	2301      	movs	r3, #1
 80015e2:	2210      	movs	r2, #16
 80015e4:	2118      	movs	r1, #24
 80015e6:	f001 fb9f 	bl	8002d28 <HAL_I2C_Mem_Read>
		calMagX =  (float)(rawMagCalData[0] - 128)/256. + 1.;   // Return x-axis sensitivity adjustment values, etc.
 80015ea:	7a3b      	ldrb	r3, [r7, #8]
 80015ec:	3b80      	subs	r3, #128	; 0x80
 80015ee:	ee07 3a90 	vmov	s15, r3
 80015f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015f6:	ee17 0a90 	vmov	r0, s15
 80015fa:	f7fe ff5d 	bl	80004b8 <__aeabi_f2d>
 80015fe:	f04f 0200 	mov.w	r2, #0
 8001602:	4b44      	ldr	r3, [pc, #272]	; (8001714 <mpu9265_Init+0x29c>)
 8001604:	f7ff f8da 	bl	80007bc <__aeabi_ddiv>
 8001608:	4603      	mov	r3, r0
 800160a:	460c      	mov	r4, r1
 800160c:	4618      	mov	r0, r3
 800160e:	4621      	mov	r1, r4
 8001610:	f04f 0200 	mov.w	r2, #0
 8001614:	4b40      	ldr	r3, [pc, #256]	; (8001718 <mpu9265_Init+0x2a0>)
 8001616:	f7fe fdf1 	bl	80001fc <__adddf3>
 800161a:	4603      	mov	r3, r0
 800161c:	460c      	mov	r4, r1
 800161e:	4618      	mov	r0, r3
 8001620:	4621      	mov	r1, r4
 8001622:	f7ff f9b3 	bl	800098c <__aeabi_d2f>
 8001626:	4602      	mov	r2, r0
 8001628:	4b3c      	ldr	r3, [pc, #240]	; (800171c <mpu9265_Init+0x2a4>)
 800162a:	601a      	str	r2, [r3, #0]
		calMagY =  (float)(rawMagCalData[1] - 128)/256. + 1.;
 800162c:	7a7b      	ldrb	r3, [r7, #9]
 800162e:	3b80      	subs	r3, #128	; 0x80
 8001630:	ee07 3a90 	vmov	s15, r3
 8001634:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001638:	ee17 0a90 	vmov	r0, s15
 800163c:	f7fe ff3c 	bl	80004b8 <__aeabi_f2d>
 8001640:	f04f 0200 	mov.w	r2, #0
 8001644:	4b33      	ldr	r3, [pc, #204]	; (8001714 <mpu9265_Init+0x29c>)
 8001646:	f7ff f8b9 	bl	80007bc <__aeabi_ddiv>
 800164a:	4603      	mov	r3, r0
 800164c:	460c      	mov	r4, r1
 800164e:	4618      	mov	r0, r3
 8001650:	4621      	mov	r1, r4
 8001652:	f04f 0200 	mov.w	r2, #0
 8001656:	4b30      	ldr	r3, [pc, #192]	; (8001718 <mpu9265_Init+0x2a0>)
 8001658:	f7fe fdd0 	bl	80001fc <__adddf3>
 800165c:	4603      	mov	r3, r0
 800165e:	460c      	mov	r4, r1
 8001660:	4618      	mov	r0, r3
 8001662:	4621      	mov	r1, r4
 8001664:	f7ff f992 	bl	800098c <__aeabi_d2f>
 8001668:	4602      	mov	r2, r0
 800166a:	4b2d      	ldr	r3, [pc, #180]	; (8001720 <mpu9265_Init+0x2a8>)
 800166c:	601a      	str	r2, [r3, #0]
		calMagZ =  (float)(rawMagCalData[2] - 128)/256. + 1.;
 800166e:	7abb      	ldrb	r3, [r7, #10]
 8001670:	3b80      	subs	r3, #128	; 0x80
 8001672:	ee07 3a90 	vmov	s15, r3
 8001676:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800167a:	ee17 0a90 	vmov	r0, s15
 800167e:	f7fe ff1b 	bl	80004b8 <__aeabi_f2d>
 8001682:	f04f 0200 	mov.w	r2, #0
 8001686:	4b23      	ldr	r3, [pc, #140]	; (8001714 <mpu9265_Init+0x29c>)
 8001688:	f7ff f898 	bl	80007bc <__aeabi_ddiv>
 800168c:	4603      	mov	r3, r0
 800168e:	460c      	mov	r4, r1
 8001690:	4618      	mov	r0, r3
 8001692:	4621      	mov	r1, r4
 8001694:	f04f 0200 	mov.w	r2, #0
 8001698:	4b1f      	ldr	r3, [pc, #124]	; (8001718 <mpu9265_Init+0x2a0>)
 800169a:	f7fe fdaf 	bl	80001fc <__adddf3>
 800169e:	4603      	mov	r3, r0
 80016a0:	460c      	mov	r4, r1
 80016a2:	4618      	mov	r0, r3
 80016a4:	4621      	mov	r1, r4
 80016a6:	f7ff f971 	bl	800098c <__aeabi_d2f>
 80016aa:	4602      	mov	r2, r0
 80016ac:	4b1d      	ldr	r3, [pc, #116]	; (8001724 <mpu9265_Init+0x2ac>)
 80016ae:	601a      	str	r2, [r3, #0]
		HAL_Delay(100);
 80016b0:	2064      	movs	r0, #100	; 0x64
 80016b2:	f000 fd7f 	bl	80021b4 <HAL_Delay>

		//Power down magnetometer
		data = 0x00;
 80016b6:	2300      	movs	r3, #0
 80016b8:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(hi2c_mpu, AK8963_ADDRESS << 1, AK8963_CNTL, 1, &data, 1, 1000);
 80016ba:	4b15      	ldr	r3, [pc, #84]	; (8001710 <mpu9265_Init+0x298>)
 80016bc:	6818      	ldr	r0, [r3, #0]
 80016be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016c2:	9302      	str	r3, [sp, #8]
 80016c4:	2301      	movs	r3, #1
 80016c6:	9301      	str	r3, [sp, #4]
 80016c8:	f107 030e 	add.w	r3, r7, #14
 80016cc:	9300      	str	r3, [sp, #0]
 80016ce:	2301      	movs	r3, #1
 80016d0:	220a      	movs	r2, #10
 80016d2:	2118      	movs	r1, #24
 80016d4:	f001 fa2e 	bl	8002b34 <HAL_I2C_Mem_Write>
		HAL_Delay(100);
 80016d8:	2064      	movs	r0, #100	; 0x64
 80016da:	f000 fd6b 	bl	80021b4 <HAL_Delay>

		//Set magnetometer data resolution and sample ODR
		data = 0b10010; // 0b10110: 0001 (MSB, 16 bit resolution) 0010 (LSB, 8Hz sample rate (Continuous measurement mode 1) ).
 80016de:	2312      	movs	r3, #18
 80016e0:	73bb      	strb	r3, [r7, #14]
//		data = 0B10110; // 0b10110: 0001 (MSB, 16 bit resolution) 0110 (LSB, 100Hz sample rate (Continuous measurement mode 2) ).
		HAL_I2C_Mem_Write(hi2c_mpu, AK8963_ADDRESS << 1, AK8963_CNTL, 1, &data, 1, 1000);
 80016e2:	4b0b      	ldr	r3, [pc, #44]	; (8001710 <mpu9265_Init+0x298>)
 80016e4:	6818      	ldr	r0, [r3, #0]
 80016e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ea:	9302      	str	r3, [sp, #8]
 80016ec:	2301      	movs	r3, #1
 80016ee:	9301      	str	r3, [sp, #4]
 80016f0:	f107 030e 	add.w	r3, r7, #14
 80016f4:	9300      	str	r3, [sp, #0]
 80016f6:	2301      	movs	r3, #1
 80016f8:	220a      	movs	r2, #10
 80016fa:	2118      	movs	r1, #24
 80016fc:	f001 fa1a 	bl	8002b34 <HAL_I2C_Mem_Write>
		HAL_Delay(100);
 8001700:	2064      	movs	r0, #100	; 0x64
 8001702:	f000 fd57 	bl	80021b4 <HAL_Delay>
		//Error_Handler();
	}



}
 8001706:	bf00      	nop
 8001708:	3714      	adds	r7, #20
 800170a:	46bd      	mov	sp, r7
 800170c:	bd90      	pop	{r4, r7, pc}
 800170e:	bf00      	nop
 8001710:	200000f0 	.word	0x200000f0
 8001714:	40700000 	.word	0x40700000
 8001718:	3ff00000 	.word	0x3ff00000
 800171c:	200000e8 	.word	0x200000e8
 8001720:	200000e4 	.word	0x200000e4
 8001724:	200000ec 	.word	0x200000ec

08001728 <mpu9265_Read_Magnet>:
	mpuData->Gyro_X_RAW = (uint16_t) ( data[0]<<8 | data[1] );
	mpuData->Gyro_Y_RAW = (uint16_t) ( data[2]<<8 | data[3] );
	mpuData->Gyro_Z_RAW = (uint16_t) ( data[4]<<8 | data[5] );
}

void mpu9265_Read_Magnet(mpuData_t* mpuData){
 8001728:	b580      	push	{r7, lr}
 800172a:	b088      	sub	sp, #32
 800172c:	af04      	add	r7, sp, #16
 800172e:	6078      	str	r0, [r7, #4]

	uint8_t ready, data[7];

	HAL_I2C_Mem_Read(hi2c_mpu, AK8963_ADDRESS << 1, AK8963_ST1, 1, &ready, 1, 1000); //bit 0 in "1".
 8001730:	4b22      	ldr	r3, [pc, #136]	; (80017bc <mpu9265_Read_Magnet+0x94>)
 8001732:	6818      	ldr	r0, [r3, #0]
 8001734:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001738:	9302      	str	r3, [sp, #8]
 800173a:	2301      	movs	r3, #1
 800173c:	9301      	str	r3, [sp, #4]
 800173e:	f107 030f 	add.w	r3, r7, #15
 8001742:	9300      	str	r3, [sp, #0]
 8001744:	2301      	movs	r3, #1
 8001746:	2202      	movs	r2, #2
 8001748:	2118      	movs	r1, #24
 800174a:	f001 faed 	bl	8002d28 <HAL_I2C_Mem_Read>

	if (ready){ //bit 0 from Status 1 register in "1".
 800174e:	7bfb      	ldrb	r3, [r7, #15]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d02e      	beq.n	80017b2 <mpu9265_Read_Magnet+0x8a>
		HAL_I2C_Mem_Read(hi2c_mpu, AK8963_ADDRESS << 1, AK8963_XOUT_L, 1, data, 7, 1000);
 8001754:	4b19      	ldr	r3, [pc, #100]	; (80017bc <mpu9265_Read_Magnet+0x94>)
 8001756:	6818      	ldr	r0, [r3, #0]
 8001758:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800175c:	9302      	str	r3, [sp, #8]
 800175e:	2307      	movs	r3, #7
 8001760:	9301      	str	r3, [sp, #4]
 8001762:	f107 0308 	add.w	r3, r7, #8
 8001766:	9300      	str	r3, [sp, #0]
 8001768:	2301      	movs	r3, #1
 800176a:	2203      	movs	r2, #3
 800176c:	2118      	movs	r1, #24
 800176e:	f001 fadb 	bl	8002d28 <HAL_I2C_Mem_Read>
		if (!(data[6] & 0x08)){// Check if magnetic sensor overflow set, if not then report data
 8001772:	7bbb      	ldrb	r3, [r7, #14]
 8001774:	f003 0308 	and.w	r3, r3, #8
 8001778:	2b00      	cmp	r3, #0
 800177a:	d11a      	bne.n	80017b2 <mpu9265_Read_Magnet+0x8a>
			mpuData->Magnet_X_RAW = (uint16_t) ( data[1]<<8 | data[0] );
 800177c:	7a7b      	ldrb	r3, [r7, #9]
 800177e:	021b      	lsls	r3, r3, #8
 8001780:	b21a      	sxth	r2, r3
 8001782:	7a3b      	ldrb	r3, [r7, #8]
 8001784:	b21b      	sxth	r3, r3
 8001786:	4313      	orrs	r3, r2
 8001788:	b21a      	sxth	r2, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	819a      	strh	r2, [r3, #12]
			mpuData->Magnet_Y_RAW = (uint16_t) ( data[3]<<8 | data[2] );
 800178e:	7afb      	ldrb	r3, [r7, #11]
 8001790:	021b      	lsls	r3, r3, #8
 8001792:	b21a      	sxth	r2, r3
 8001794:	7abb      	ldrb	r3, [r7, #10]
 8001796:	b21b      	sxth	r3, r3
 8001798:	4313      	orrs	r3, r2
 800179a:	b21a      	sxth	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	81da      	strh	r2, [r3, #14]
			mpuData->Magnet_Z_RAW = (uint16_t) ( data[5]<<8 | data[4] );
 80017a0:	7b7b      	ldrb	r3, [r7, #13]
 80017a2:	021b      	lsls	r3, r3, #8
 80017a4:	b21a      	sxth	r2, r3
 80017a6:	7b3b      	ldrb	r3, [r7, #12]
 80017a8:	b21b      	sxth	r3, r3
 80017aa:	4313      	orrs	r3, r2
 80017ac:	b21a      	sxth	r2, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	821a      	strh	r2, [r3, #16]
		}
	}
}
 80017b2:	bf00      	nop
 80017b4:	3710      	adds	r7, #16
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	200000f0 	.word	0x200000f0

080017c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	607b      	str	r3, [r7, #4]
 80017ca:	4b10      	ldr	r3, [pc, #64]	; (800180c <HAL_MspInit+0x4c>)
 80017cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ce:	4a0f      	ldr	r2, [pc, #60]	; (800180c <HAL_MspInit+0x4c>)
 80017d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017d4:	6453      	str	r3, [r2, #68]	; 0x44
 80017d6:	4b0d      	ldr	r3, [pc, #52]	; (800180c <HAL_MspInit+0x4c>)
 80017d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017de:	607b      	str	r3, [r7, #4]
 80017e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	603b      	str	r3, [r7, #0]
 80017e6:	4b09      	ldr	r3, [pc, #36]	; (800180c <HAL_MspInit+0x4c>)
 80017e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ea:	4a08      	ldr	r2, [pc, #32]	; (800180c <HAL_MspInit+0x4c>)
 80017ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017f0:	6413      	str	r3, [r2, #64]	; 0x40
 80017f2:	4b06      	ldr	r3, [pc, #24]	; (800180c <HAL_MspInit+0x4c>)
 80017f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017fa:	603b      	str	r3, [r7, #0]
 80017fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017fe:	bf00      	nop
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	40023800 	.word	0x40023800

08001810 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001814:	bf00      	nop
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr

0800181e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800181e:	b480      	push	{r7}
 8001820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001822:	e7fe      	b.n	8001822 <HardFault_Handler+0x4>

08001824 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001828:	e7fe      	b.n	8001828 <MemManage_Handler+0x4>

0800182a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800182a:	b480      	push	{r7}
 800182c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800182e:	e7fe      	b.n	800182e <BusFault_Handler+0x4>

08001830 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001834:	e7fe      	b.n	8001834 <UsageFault_Handler+0x4>

08001836 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001836:	b480      	push	{r7}
 8001838:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800183a:	bf00      	nop
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001848:	bf00      	nop
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr

08001852 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001852:	b480      	push	{r7}
 8001854:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001856:	bf00      	nop
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001864:	f000 fc86 	bl	8002174 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001868:	bf00      	nop
 800186a:	bd80      	pop	{r7, pc}

0800186c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001870:	4802      	ldr	r0, [pc, #8]	; (800187c <TIM5_IRQHandler+0x10>)
 8001872:	f002 fe22 	bl	80044ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001876:	bf00      	nop
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	20000134 	.word	0x20000134

08001880 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001884:	4802      	ldr	r0, [pc, #8]	; (8001890 <TIM7_IRQHandler+0x10>)
 8001886:	f002 fe18 	bl	80044ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	200001f4 	.word	0x200001f4

08001894 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8001898:	4802      	ldr	r0, [pc, #8]	; (80018a4 <UART7_IRQHandler+0x10>)
 800189a:	f003 fec5 	bl	8005628 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	20000234 	.word	0x20000234

080018a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018ac:	4b08      	ldr	r3, [pc, #32]	; (80018d0 <SystemInit+0x28>)
 80018ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018b2:	4a07      	ldr	r2, [pc, #28]	; (80018d0 <SystemInit+0x28>)
 80018b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80018bc:	4b04      	ldr	r3, [pc, #16]	; (80018d0 <SystemInit+0x28>)
 80018be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018c2:	609a      	str	r2, [r3, #8]
#endif
}
 80018c4:	bf00      	nop
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	e000ed00 	.word	0xe000ed00

080018d4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b086      	sub	sp, #24
 80018d8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018da:	f107 0308 	add.w	r3, r7, #8
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	605a      	str	r2, [r3, #4]
 80018e4:	609a      	str	r2, [r3, #8]
 80018e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018e8:	463b      	mov	r3, r7
 80018ea:	2200      	movs	r2, #0
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 80018f0:	4b20      	ldr	r3, [pc, #128]	; (8001974 <MX_TIM2_Init+0xa0>)
 80018f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018f6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80018f8:	4b1e      	ldr	r3, [pc, #120]	; (8001974 <MX_TIM2_Init+0xa0>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018fe:	4b1d      	ldr	r3, [pc, #116]	; (8001974 <MX_TIM2_Init+0xa0>)
 8001900:	2200      	movs	r2, #0
 8001902:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001904:	4b1b      	ldr	r3, [pc, #108]	; (8001974 <MX_TIM2_Init+0xa0>)
 8001906:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800190a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800190c:	4b19      	ldr	r3, [pc, #100]	; (8001974 <MX_TIM2_Init+0xa0>)
 800190e:	2200      	movs	r2, #0
 8001910:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001912:	4b18      	ldr	r3, [pc, #96]	; (8001974 <MX_TIM2_Init+0xa0>)
 8001914:	2200      	movs	r2, #0
 8001916:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001918:	4816      	ldr	r0, [pc, #88]	; (8001974 <MX_TIM2_Init+0xa0>)
 800191a:	f002 fcb3 	bl	8004284 <HAL_TIM_Base_Init>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001924:	f7ff fda0 	bl	8001468 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8001928:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800192c:	60bb      	str	r3, [r7, #8]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 800192e:	2300      	movs	r3, #0
 8001930:	60fb      	str	r3, [r7, #12]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8001932:	2300      	movs	r3, #0
 8001934:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockFilter = 0;
 8001936:	2300      	movs	r3, #0
 8001938:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800193a:	f107 0308 	add.w	r3, r7, #8
 800193e:	4619      	mov	r1, r3
 8001940:	480c      	ldr	r0, [pc, #48]	; (8001974 <MX_TIM2_Init+0xa0>)
 8001942:	f003 f825 	bl	8004990 <HAL_TIM_ConfigClockSource>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 800194c:	f7ff fd8c 	bl	8001468 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001950:	2300      	movs	r3, #0
 8001952:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001954:	2300      	movs	r3, #0
 8001956:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001958:	463b      	mov	r3, r7
 800195a:	4619      	mov	r1, r3
 800195c:	4805      	ldr	r0, [pc, #20]	; (8001974 <MX_TIM2_Init+0xa0>)
 800195e:	f003 fd31 	bl	80053c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001968:	f7ff fd7e 	bl	8001468 <Error_Handler>
  }

}
 800196c:	bf00      	nop
 800196e:	3718      	adds	r7, #24
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	200001b4 	.word	0x200001b4

08001978 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800197e:	f107 0308 	add.w	r3, r7, #8
 8001982:	2200      	movs	r2, #0
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	605a      	str	r2, [r3, #4]
 8001988:	609a      	str	r2, [r3, #8]
 800198a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800198c:	463b      	mov	r3, r7
 800198e:	2200      	movs	r2, #0
 8001990:	601a      	str	r2, [r3, #0]
 8001992:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8001994:	4b20      	ldr	r3, [pc, #128]	; (8001a18 <MX_TIM3_Init+0xa0>)
 8001996:	4a21      	ldr	r2, [pc, #132]	; (8001a1c <MX_TIM3_Init+0xa4>)
 8001998:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800199a:	4b1f      	ldr	r3, [pc, #124]	; (8001a18 <MX_TIM3_Init+0xa0>)
 800199c:	2200      	movs	r2, #0
 800199e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019a0:	4b1d      	ldr	r3, [pc, #116]	; (8001a18 <MX_TIM3_Init+0xa0>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80019a6:	4b1c      	ldr	r3, [pc, #112]	; (8001a18 <MX_TIM3_Init+0xa0>)
 80019a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019ac:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ae:	4b1a      	ldr	r3, [pc, #104]	; (8001a18 <MX_TIM3_Init+0xa0>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019b4:	4b18      	ldr	r3, [pc, #96]	; (8001a18 <MX_TIM3_Init+0xa0>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80019ba:	4817      	ldr	r0, [pc, #92]	; (8001a18 <MX_TIM3_Init+0xa0>)
 80019bc:	f002 fc62 	bl	8004284 <HAL_TIM_Base_Init>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80019c6:	f7ff fd4f 	bl	8001468 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 80019ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019ce:	60bb      	str	r3, [r7, #8]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 80019d0:	2300      	movs	r3, #0
 80019d2:	60fb      	str	r3, [r7, #12]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 80019d4:	2300      	movs	r3, #0
 80019d6:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockFilter = 0;
 80019d8:	2300      	movs	r3, #0
 80019da:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80019dc:	f107 0308 	add.w	r3, r7, #8
 80019e0:	4619      	mov	r1, r3
 80019e2:	480d      	ldr	r0, [pc, #52]	; (8001a18 <MX_TIM3_Init+0xa0>)
 80019e4:	f002 ffd4 	bl	8004990 <HAL_TIM_ConfigClockSource>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80019ee:	f7ff fd3b 	bl	8001468 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019f2:	2300      	movs	r3, #0
 80019f4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019f6:	2300      	movs	r3, #0
 80019f8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019fa:	463b      	mov	r3, r7
 80019fc:	4619      	mov	r1, r3
 80019fe:	4806      	ldr	r0, [pc, #24]	; (8001a18 <MX_TIM3_Init+0xa0>)
 8001a00:	f003 fce0 	bl	80053c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001a0a:	f7ff fd2d 	bl	8001468 <Error_Handler>
  }

}
 8001a0e:	bf00      	nop
 8001a10:	3718      	adds	r7, #24
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	20000174 	.word	0x20000174
 8001a1c:	40000400 	.word	0x40000400

08001a20 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b08e      	sub	sp, #56	; 0x38
 8001a24:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	601a      	str	r2, [r3, #0]
 8001a2e:	605a      	str	r2, [r3, #4]
 8001a30:	609a      	str	r2, [r3, #8]
 8001a32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a34:	f107 0320 	add.w	r3, r7, #32
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a3e:	1d3b      	adds	r3, r7, #4
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	605a      	str	r2, [r3, #4]
 8001a46:	609a      	str	r2, [r3, #8]
 8001a48:	60da      	str	r2, [r3, #12]
 8001a4a:	611a      	str	r2, [r3, #16]
 8001a4c:	615a      	str	r2, [r3, #20]
 8001a4e:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8001a50:	4b31      	ldr	r3, [pc, #196]	; (8001b18 <MX_TIM4_Init+0xf8>)
 8001a52:	4a32      	ldr	r2, [pc, #200]	; (8001b1c <MX_TIM4_Init+0xfc>)
 8001a54:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 30-1;
 8001a56:	4b30      	ldr	r3, [pc, #192]	; (8001b18 <MX_TIM4_Init+0xf8>)
 8001a58:	221d      	movs	r2, #29
 8001a5a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a5c:	4b2e      	ldr	r3, [pc, #184]	; (8001b18 <MX_TIM4_Init+0xf8>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8001a62:	4b2d      	ldr	r3, [pc, #180]	; (8001b18 <MX_TIM4_Init+0xf8>)
 8001a64:	2263      	movs	r2, #99	; 0x63
 8001a66:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a68:	4b2b      	ldr	r3, [pc, #172]	; (8001b18 <MX_TIM4_Init+0xf8>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a6e:	4b2a      	ldr	r3, [pc, #168]	; (8001b18 <MX_TIM4_Init+0xf8>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001a74:	4828      	ldr	r0, [pc, #160]	; (8001b18 <MX_TIM4_Init+0xf8>)
 8001a76:	f002 fc05 	bl	8004284 <HAL_TIM_Base_Init>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8001a80:	f7ff fcf2 	bl	8001468 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a88:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001a8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a8e:	4619      	mov	r1, r3
 8001a90:	4821      	ldr	r0, [pc, #132]	; (8001b18 <MX_TIM4_Init+0xf8>)
 8001a92:	f002 ff7d 	bl	8004990 <HAL_TIM_ConfigClockSource>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8001a9c:	f7ff fce4 	bl	8001468 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001aa0:	481d      	ldr	r0, [pc, #116]	; (8001b18 <MX_TIM4_Init+0xf8>)
 8001aa2:	f002 fc62 	bl	800436a <HAL_TIM_PWM_Init>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8001aac:	f7ff fcdc 	bl	8001468 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ab8:	f107 0320 	add.w	r3, r7, #32
 8001abc:	4619      	mov	r1, r3
 8001abe:	4816      	ldr	r0, [pc, #88]	; (8001b18 <MX_TIM4_Init+0xf8>)
 8001ac0:	f003 fc80 	bl	80053c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8001aca:	f7ff fccd 	bl	8001468 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ace:	2360      	movs	r3, #96	; 0x60
 8001ad0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 72-1;
 8001ad2:	2347      	movs	r3, #71	; 0x47
 8001ad4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ada:	2300      	movs	r3, #0
 8001adc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ade:	1d3b      	adds	r3, r7, #4
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	480c      	ldr	r0, [pc, #48]	; (8001b18 <MX_TIM4_Init+0xf8>)
 8001ae6:	f002 fe8d 	bl	8004804 <HAL_TIM_PWM_ConfigChannel>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8001af0:	f7ff fcba 	bl	8001468 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001af4:	1d3b      	adds	r3, r7, #4
 8001af6:	2204      	movs	r2, #4
 8001af8:	4619      	mov	r1, r3
 8001afa:	4807      	ldr	r0, [pc, #28]	; (8001b18 <MX_TIM4_Init+0xf8>)
 8001afc:	f002 fe82 	bl	8004804 <HAL_TIM_PWM_ConfigChannel>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <MX_TIM4_Init+0xea>
  {
    Error_Handler();
 8001b06:	f7ff fcaf 	bl	8001468 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8001b0a:	4803      	ldr	r0, [pc, #12]	; (8001b18 <MX_TIM4_Init+0xf8>)
 8001b0c:	f000 f9d8 	bl	8001ec0 <HAL_TIM_MspPostInit>

}
 8001b10:	bf00      	nop
 8001b12:	3738      	adds	r7, #56	; 0x38
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	200000f4 	.word	0x200000f4
 8001b1c:	40000800 	.word	0x40000800

08001b20 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b092      	sub	sp, #72	; 0x48
 8001b24:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b26:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	605a      	str	r2, [r3, #4]
 8001b30:	609a      	str	r2, [r3, #8]
 8001b32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b34:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b3e:	f107 0314 	add.w	r3, r7, #20
 8001b42:	2200      	movs	r2, #0
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	605a      	str	r2, [r3, #4]
 8001b48:	609a      	str	r2, [r3, #8]
 8001b4a:	60da      	str	r2, [r3, #12]
 8001b4c:	611a      	str	r2, [r3, #16]
 8001b4e:	615a      	str	r2, [r3, #20]
 8001b50:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001b52:	1d3b      	adds	r3, r7, #4
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	605a      	str	r2, [r3, #4]
 8001b5a:	609a      	str	r2, [r3, #8]
 8001b5c:	60da      	str	r2, [r3, #12]

  htim5.Instance = TIM5;
 8001b5e:	4b43      	ldr	r3, [pc, #268]	; (8001c6c <MX_TIM5_Init+0x14c>)
 8001b60:	4a43      	ldr	r2, [pc, #268]	; (8001c70 <MX_TIM5_Init+0x150>)
 8001b62:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 90-1;
 8001b64:	4b41      	ldr	r3, [pc, #260]	; (8001c6c <MX_TIM5_Init+0x14c>)
 8001b66:	2259      	movs	r2, #89	; 0x59
 8001b68:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b6a:	4b40      	ldr	r3, [pc, #256]	; (8001c6c <MX_TIM5_Init+0x14c>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001b70:	4b3e      	ldr	r3, [pc, #248]	; (8001c6c <MX_TIM5_Init+0x14c>)
 8001b72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b76:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b78:	4b3c      	ldr	r3, [pc, #240]	; (8001c6c <MX_TIM5_Init+0x14c>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b7e:	4b3b      	ldr	r3, [pc, #236]	; (8001c6c <MX_TIM5_Init+0x14c>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001b84:	4839      	ldr	r0, [pc, #228]	; (8001c6c <MX_TIM5_Init+0x14c>)
 8001b86:	f002 fb7d 	bl	8004284 <HAL_TIM_Base_Init>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8001b90:	f7ff fc6a 	bl	8001468 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b98:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001b9a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4832      	ldr	r0, [pc, #200]	; (8001c6c <MX_TIM5_Init+0x14c>)
 8001ba2:	f002 fef5 	bl	8004990 <HAL_TIM_ConfigClockSource>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8001bac:	f7ff fc5c 	bl	8001468 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001bb0:	482e      	ldr	r0, [pc, #184]	; (8001c6c <MX_TIM5_Init+0x14c>)
 8001bb2:	f002 fbda 	bl	800436a <HAL_TIM_PWM_Init>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <MX_TIM5_Init+0xa0>
  {
    Error_Handler();
 8001bbc:	f7ff fc54 	bl	8001468 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8001bc0:	482a      	ldr	r0, [pc, #168]	; (8001c6c <MX_TIM5_Init+0x14c>)
 8001bc2:	f002 fc45 	bl	8004450 <HAL_TIM_IC_Init>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8001bcc:	f7ff fc4c 	bl	8001468 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	633b      	str	r3, [r7, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001bd8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001bdc:	4619      	mov	r1, r3
 8001bde:	4823      	ldr	r0, [pc, #140]	; (8001c6c <MX_TIM5_Init+0x14c>)
 8001be0:	f003 fbf0 	bl	80053c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <MX_TIM5_Init+0xce>
  {
    Error_Handler();
 8001bea:	f7ff fc3d 	bl	8001468 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bee:	2360      	movs	r3, #96	; 0x60
 8001bf0:	617b      	str	r3, [r7, #20]
  sConfigOC.Pulse = 0xFFFFFFF5;
 8001bf2:	f06f 030a 	mvn.w	r3, #10
 8001bf6:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	61fb      	str	r3, [r7, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c00:	f107 0314 	add.w	r3, r7, #20
 8001c04:	2200      	movs	r2, #0
 8001c06:	4619      	mov	r1, r3
 8001c08:	4818      	ldr	r0, [pc, #96]	; (8001c6c <MX_TIM5_Init+0x14c>)
 8001c0a:	f002 fdfb 	bl	8004804 <HAL_TIM_PWM_ConfigChannel>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <MX_TIM5_Init+0xf8>
  {
    Error_Handler();
 8001c14:	f7ff fc28 	bl	8001468 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001c20:	2300      	movs	r3, #0
 8001c22:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001c24:	2300      	movs	r3, #0
 8001c26:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001c28:	1d3b      	adds	r3, r7, #4
 8001c2a:	2208      	movs	r2, #8
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	480f      	ldr	r0, [pc, #60]	; (8001c6c <MX_TIM5_Init+0x14c>)
 8001c30:	f002 fd4b 	bl	80046ca <HAL_TIM_IC_ConfigChannel>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <MX_TIM5_Init+0x11e>
  {
    Error_Handler();
 8001c3a:	f7ff fc15 	bl	8001468 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001c3e:	2302      	movs	r3, #2
 8001c40:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001c42:	2302      	movs	r3, #2
 8001c44:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001c46:	1d3b      	adds	r3, r7, #4
 8001c48:	220c      	movs	r2, #12
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4807      	ldr	r0, [pc, #28]	; (8001c6c <MX_TIM5_Init+0x14c>)
 8001c4e:	f002 fd3c 	bl	80046ca <HAL_TIM_IC_ConfigChannel>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <MX_TIM5_Init+0x13c>
  {
    Error_Handler();
 8001c58:	f7ff fc06 	bl	8001468 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim5);
 8001c5c:	4803      	ldr	r0, [pc, #12]	; (8001c6c <MX_TIM5_Init+0x14c>)
 8001c5e:	f000 f92f 	bl	8001ec0 <HAL_TIM_MspPostInit>

}
 8001c62:	bf00      	nop
 8001c64:	3748      	adds	r7, #72	; 0x48
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	20000134 	.word	0x20000134
 8001c70:	40000c00 	.word	0x40000c00

08001c74 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c7a:	463b      	mov	r3, r7
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	605a      	str	r2, [r3, #4]

  htim7.Instance = TIM7;
 8001c82:	4b15      	ldr	r3, [pc, #84]	; (8001cd8 <MX_TIM7_Init+0x64>)
 8001c84:	4a15      	ldr	r2, [pc, #84]	; (8001cdc <MX_TIM7_Init+0x68>)
 8001c86:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 9000-1;
 8001c88:	4b13      	ldr	r3, [pc, #76]	; (8001cd8 <MX_TIM7_Init+0x64>)
 8001c8a:	f242 3227 	movw	r2, #8999	; 0x2327
 8001c8e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c90:	4b11      	ldr	r3, [pc, #68]	; (8001cd8 <MX_TIM7_Init+0x64>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10000-1;
 8001c96:	4b10      	ldr	r3, [pc, #64]	; (8001cd8 <MX_TIM7_Init+0x64>)
 8001c98:	f242 720f 	movw	r2, #9999	; 0x270f
 8001c9c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c9e:	4b0e      	ldr	r3, [pc, #56]	; (8001cd8 <MX_TIM7_Init+0x64>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001ca4:	480c      	ldr	r0, [pc, #48]	; (8001cd8 <MX_TIM7_Init+0x64>)
 8001ca6:	f002 faed 	bl	8004284 <HAL_TIM_Base_Init>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001cb0:	f7ff fbda 	bl	8001468 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001cbc:	463b      	mov	r3, r7
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	4805      	ldr	r0, [pc, #20]	; (8001cd8 <MX_TIM7_Init+0x64>)
 8001cc2:	f003 fb7f 	bl	80053c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001ccc:	f7ff fbcc 	bl	8001468 <Error_Handler>
  }

}
 8001cd0:	bf00      	nop
 8001cd2:	3708      	adds	r7, #8
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	200001f4 	.word	0x200001f4
 8001cdc:	40001400 	.word	0x40001400

08001ce0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b090      	sub	sp, #64	; 0x40
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	605a      	str	r2, [r3, #4]
 8001cf2:	609a      	str	r2, [r3, #8]
 8001cf4:	60da      	str	r2, [r3, #12]
 8001cf6:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d00:	d12d      	bne.n	8001d5e <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d02:	2300      	movs	r3, #0
 8001d04:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d06:	4b66      	ldr	r3, [pc, #408]	; (8001ea0 <HAL_TIM_Base_MspInit+0x1c0>)
 8001d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0a:	4a65      	ldr	r2, [pc, #404]	; (8001ea0 <HAL_TIM_Base_MspInit+0x1c0>)
 8001d0c:	f043 0301 	orr.w	r3, r3, #1
 8001d10:	6413      	str	r3, [r2, #64]	; 0x40
 8001d12:	4b63      	ldr	r3, [pc, #396]	; (8001ea0 <HAL_TIM_Base_MspInit+0x1c0>)
 8001d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d1e:	2300      	movs	r3, #0
 8001d20:	627b      	str	r3, [r7, #36]	; 0x24
 8001d22:	4b5f      	ldr	r3, [pc, #380]	; (8001ea0 <HAL_TIM_Base_MspInit+0x1c0>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	4a5e      	ldr	r2, [pc, #376]	; (8001ea0 <HAL_TIM_Base_MspInit+0x1c0>)
 8001d28:	f043 0301 	orr.w	r3, r3, #1
 8001d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d2e:	4b5c      	ldr	r3, [pc, #368]	; (8001ea0 <HAL_TIM_Base_MspInit+0x1c0>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d32:	f003 0301 	and.w	r3, r3, #1
 8001d36:	627b      	str	r3, [r7, #36]	; 0x24
 8001d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001d3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d40:	2302      	movs	r3, #2
 8001d42:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d44:	2300      	movs	r3, #0
 8001d46:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d54:	4619      	mov	r1, r3
 8001d56:	4853      	ldr	r0, [pc, #332]	; (8001ea4 <HAL_TIM_Base_MspInit+0x1c4>)
 8001d58:	f000 fbf0 	bl	800253c <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8001d5c:	e09b      	b.n	8001e96 <HAL_TIM_Base_MspInit+0x1b6>
  else if(tim_baseHandle->Instance==TIM3)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a51      	ldr	r2, [pc, #324]	; (8001ea8 <HAL_TIM_Base_MspInit+0x1c8>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d12c      	bne.n	8001dc2 <HAL_TIM_Base_MspInit+0xe2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d68:	2300      	movs	r3, #0
 8001d6a:	623b      	str	r3, [r7, #32]
 8001d6c:	4b4c      	ldr	r3, [pc, #304]	; (8001ea0 <HAL_TIM_Base_MspInit+0x1c0>)
 8001d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d70:	4a4b      	ldr	r2, [pc, #300]	; (8001ea0 <HAL_TIM_Base_MspInit+0x1c0>)
 8001d72:	f043 0302 	orr.w	r3, r3, #2
 8001d76:	6413      	str	r3, [r2, #64]	; 0x40
 8001d78:	4b49      	ldr	r3, [pc, #292]	; (8001ea0 <HAL_TIM_Base_MspInit+0x1c0>)
 8001d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	623b      	str	r3, [r7, #32]
 8001d82:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d84:	2300      	movs	r3, #0
 8001d86:	61fb      	str	r3, [r7, #28]
 8001d88:	4b45      	ldr	r3, [pc, #276]	; (8001ea0 <HAL_TIM_Base_MspInit+0x1c0>)
 8001d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8c:	4a44      	ldr	r2, [pc, #272]	; (8001ea0 <HAL_TIM_Base_MspInit+0x1c0>)
 8001d8e:	f043 0308 	orr.w	r3, r3, #8
 8001d92:	6313      	str	r3, [r2, #48]	; 0x30
 8001d94:	4b42      	ldr	r3, [pc, #264]	; (8001ea0 <HAL_TIM_Base_MspInit+0x1c0>)
 8001d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d98:	f003 0308 	and.w	r3, r3, #8
 8001d9c:	61fb      	str	r3, [r7, #28]
 8001d9e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001da0:	2304      	movs	r3, #4
 8001da2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da4:	2302      	movs	r3, #2
 8001da6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da8:	2300      	movs	r3, #0
 8001daa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dac:	2300      	movs	r3, #0
 8001dae:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001db0:	2302      	movs	r3, #2
 8001db2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001db4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001db8:	4619      	mov	r1, r3
 8001dba:	483c      	ldr	r0, [pc, #240]	; (8001eac <HAL_TIM_Base_MspInit+0x1cc>)
 8001dbc:	f000 fbbe 	bl	800253c <HAL_GPIO_Init>
}
 8001dc0:	e069      	b.n	8001e96 <HAL_TIM_Base_MspInit+0x1b6>
  else if(tim_baseHandle->Instance==TIM4)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a3a      	ldr	r2, [pc, #232]	; (8001eb0 <HAL_TIM_Base_MspInit+0x1d0>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d10e      	bne.n	8001dea <HAL_TIM_Base_MspInit+0x10a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001dcc:	2300      	movs	r3, #0
 8001dce:	61bb      	str	r3, [r7, #24]
 8001dd0:	4b33      	ldr	r3, [pc, #204]	; (8001ea0 <HAL_TIM_Base_MspInit+0x1c0>)
 8001dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd4:	4a32      	ldr	r2, [pc, #200]	; (8001ea0 <HAL_TIM_Base_MspInit+0x1c0>)
 8001dd6:	f043 0304 	orr.w	r3, r3, #4
 8001dda:	6413      	str	r3, [r2, #64]	; 0x40
 8001ddc:	4b30      	ldr	r3, [pc, #192]	; (8001ea0 <HAL_TIM_Base_MspInit+0x1c0>)
 8001dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de0:	f003 0304 	and.w	r3, r3, #4
 8001de4:	61bb      	str	r3, [r7, #24]
 8001de6:	69bb      	ldr	r3, [r7, #24]
}
 8001de8:	e055      	b.n	8001e96 <HAL_TIM_Base_MspInit+0x1b6>
  else if(tim_baseHandle->Instance==TIM5)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a31      	ldr	r2, [pc, #196]	; (8001eb4 <HAL_TIM_Base_MspInit+0x1d4>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d135      	bne.n	8001e60 <HAL_TIM_Base_MspInit+0x180>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001df4:	2300      	movs	r3, #0
 8001df6:	617b      	str	r3, [r7, #20]
 8001df8:	4b29      	ldr	r3, [pc, #164]	; (8001ea0 <HAL_TIM_Base_MspInit+0x1c0>)
 8001dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfc:	4a28      	ldr	r2, [pc, #160]	; (8001ea0 <HAL_TIM_Base_MspInit+0x1c0>)
 8001dfe:	f043 0308 	orr.w	r3, r3, #8
 8001e02:	6413      	str	r3, [r2, #64]	; 0x40
 8001e04:	4b26      	ldr	r3, [pc, #152]	; (8001ea0 <HAL_TIM_Base_MspInit+0x1c0>)
 8001e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e08:	f003 0308 	and.w	r3, r3, #8
 8001e0c:	617b      	str	r3, [r7, #20]
 8001e0e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e10:	2300      	movs	r3, #0
 8001e12:	613b      	str	r3, [r7, #16]
 8001e14:	4b22      	ldr	r3, [pc, #136]	; (8001ea0 <HAL_TIM_Base_MspInit+0x1c0>)
 8001e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e18:	4a21      	ldr	r2, [pc, #132]	; (8001ea0 <HAL_TIM_Base_MspInit+0x1c0>)
 8001e1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e1e:	6313      	str	r3, [r2, #48]	; 0x30
 8001e20:	4b1f      	ldr	r3, [pc, #124]	; (8001ea0 <HAL_TIM_Base_MspInit+0x1c0>)
 8001e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e28:	613b      	str	r3, [r7, #16]
 8001e2a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = IC_Eco_Pin;
 8001e2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e30:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e32:	2302      	movs	r3, #2
 8001e34:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e36:	2300      	movs	r3, #0
 8001e38:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001e3e:	2302      	movs	r3, #2
 8001e40:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(IC_Eco_GPIO_Port, &GPIO_InitStruct);
 8001e42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e46:	4619      	mov	r1, r3
 8001e48:	481b      	ldr	r0, [pc, #108]	; (8001eb8 <HAL_TIM_Base_MspInit+0x1d8>)
 8001e4a:	f000 fb77 	bl	800253c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001e4e:	2200      	movs	r2, #0
 8001e50:	2100      	movs	r1, #0
 8001e52:	2032      	movs	r0, #50	; 0x32
 8001e54:	f000 faab 	bl	80023ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001e58:	2032      	movs	r0, #50	; 0x32
 8001e5a:	f000 fac4 	bl	80023e6 <HAL_NVIC_EnableIRQ>
}
 8001e5e:	e01a      	b.n	8001e96 <HAL_TIM_Base_MspInit+0x1b6>
  else if(tim_baseHandle->Instance==TIM7)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a15      	ldr	r2, [pc, #84]	; (8001ebc <HAL_TIM_Base_MspInit+0x1dc>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d115      	bne.n	8001e96 <HAL_TIM_Base_MspInit+0x1b6>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	60fb      	str	r3, [r7, #12]
 8001e6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ea0 <HAL_TIM_Base_MspInit+0x1c0>)
 8001e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e72:	4a0b      	ldr	r2, [pc, #44]	; (8001ea0 <HAL_TIM_Base_MspInit+0x1c0>)
 8001e74:	f043 0320 	orr.w	r3, r3, #32
 8001e78:	6413      	str	r3, [r2, #64]	; 0x40
 8001e7a:	4b09      	ldr	r3, [pc, #36]	; (8001ea0 <HAL_TIM_Base_MspInit+0x1c0>)
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7e:	f003 0320 	and.w	r3, r3, #32
 8001e82:	60fb      	str	r3, [r7, #12]
 8001e84:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001e86:	2200      	movs	r2, #0
 8001e88:	2100      	movs	r1, #0
 8001e8a:	2037      	movs	r0, #55	; 0x37
 8001e8c:	f000 fa8f 	bl	80023ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001e90:	2037      	movs	r0, #55	; 0x37
 8001e92:	f000 faa8 	bl	80023e6 <HAL_NVIC_EnableIRQ>
}
 8001e96:	bf00      	nop
 8001e98:	3740      	adds	r7, #64	; 0x40
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	40023800 	.word	0x40023800
 8001ea4:	40020000 	.word	0x40020000
 8001ea8:	40000400 	.word	0x40000400
 8001eac:	40020c00 	.word	0x40020c00
 8001eb0:	40000800 	.word	0x40000800
 8001eb4:	40000c00 	.word	0x40000c00
 8001eb8:	40021c00 	.word	0x40021c00
 8001ebc:	40001400 	.word	0x40001400

08001ec0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b08a      	sub	sp, #40	; 0x28
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec8:	f107 0314 	add.w	r3, r7, #20
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]
 8001ed0:	605a      	str	r2, [r3, #4]
 8001ed2:	609a      	str	r2, [r3, #8]
 8001ed4:	60da      	str	r2, [r3, #12]
 8001ed6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a25      	ldr	r2, [pc, #148]	; (8001f74 <HAL_TIM_MspPostInit+0xb4>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d11f      	bne.n	8001f22 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	613b      	str	r3, [r7, #16]
 8001ee6:	4b24      	ldr	r3, [pc, #144]	; (8001f78 <HAL_TIM_MspPostInit+0xb8>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eea:	4a23      	ldr	r2, [pc, #140]	; (8001f78 <HAL_TIM_MspPostInit+0xb8>)
 8001eec:	f043 0308 	orr.w	r3, r3, #8
 8001ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ef2:	4b21      	ldr	r3, [pc, #132]	; (8001f78 <HAL_TIM_MspPostInit+0xb8>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef6:	f003 0308 	and.w	r3, r3, #8
 8001efa:	613b      	str	r3, [r7, #16]
 8001efc:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = PWM_R_Pin|PWM_L_Pin;
 8001efe:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001f02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f04:	2302      	movs	r3, #2
 8001f06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001f10:	2302      	movs	r3, #2
 8001f12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f14:	f107 0314 	add.w	r3, r7, #20
 8001f18:	4619      	mov	r1, r3
 8001f1a:	4818      	ldr	r0, [pc, #96]	; (8001f7c <HAL_TIM_MspPostInit+0xbc>)
 8001f1c:	f000 fb0e 	bl	800253c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001f20:	e023      	b.n	8001f6a <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM5)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a16      	ldr	r2, [pc, #88]	; (8001f80 <HAL_TIM_MspPostInit+0xc0>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d11e      	bne.n	8001f6a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	60fb      	str	r3, [r7, #12]
 8001f30:	4b11      	ldr	r3, [pc, #68]	; (8001f78 <HAL_TIM_MspPostInit+0xb8>)
 8001f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f34:	4a10      	ldr	r2, [pc, #64]	; (8001f78 <HAL_TIM_MspPostInit+0xb8>)
 8001f36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f3a:	6313      	str	r3, [r2, #48]	; 0x30
 8001f3c:	4b0e      	ldr	r3, [pc, #56]	; (8001f78 <HAL_TIM_MspPostInit+0xb8>)
 8001f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f44:	60fb      	str	r3, [r7, #12]
 8001f46:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_Trig_Pin;
 8001f48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4e:	2302      	movs	r3, #2
 8001f50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f52:	2300      	movs	r3, #0
 8001f54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f56:	2300      	movs	r3, #0
 8001f58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_Trig_GPIO_Port, &GPIO_InitStruct);
 8001f5e:	f107 0314 	add.w	r3, r7, #20
 8001f62:	4619      	mov	r1, r3
 8001f64:	4807      	ldr	r0, [pc, #28]	; (8001f84 <HAL_TIM_MspPostInit+0xc4>)
 8001f66:	f000 fae9 	bl	800253c <HAL_GPIO_Init>
}
 8001f6a:	bf00      	nop
 8001f6c:	3728      	adds	r7, #40	; 0x28
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	40000800 	.word	0x40000800
 8001f78:	40023800 	.word	0x40023800
 8001f7c:	40020c00 	.word	0x40020c00
 8001f80:	40000c00 	.word	0x40000c00
 8001f84:	40021c00 	.word	0x40021c00

08001f88 <MX_UART7_Init>:

UART_HandleTypeDef huart7;

/* UART7 init function */
void MX_UART7_Init(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0

  huart7.Instance = UART7;
 8001f8c:	4b11      	ldr	r3, [pc, #68]	; (8001fd4 <MX_UART7_Init+0x4c>)
 8001f8e:	4a12      	ldr	r2, [pc, #72]	; (8001fd8 <MX_UART7_Init+0x50>)
 8001f90:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001f92:	4b10      	ldr	r3, [pc, #64]	; (8001fd4 <MX_UART7_Init+0x4c>)
 8001f94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f98:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001f9a:	4b0e      	ldr	r3, [pc, #56]	; (8001fd4 <MX_UART7_Init+0x4c>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001fa0:	4b0c      	ldr	r3, [pc, #48]	; (8001fd4 <MX_UART7_Init+0x4c>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001fa6:	4b0b      	ldr	r3, [pc, #44]	; (8001fd4 <MX_UART7_Init+0x4c>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001fac:	4b09      	ldr	r3, [pc, #36]	; (8001fd4 <MX_UART7_Init+0x4c>)
 8001fae:	220c      	movs	r2, #12
 8001fb0:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fb2:	4b08      	ldr	r3, [pc, #32]	; (8001fd4 <MX_UART7_Init+0x4c>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fb8:	4b06      	ldr	r3, [pc, #24]	; (8001fd4 <MX_UART7_Init+0x4c>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001fbe:	4805      	ldr	r0, [pc, #20]	; (8001fd4 <MX_UART7_Init+0x4c>)
 8001fc0:	f003 fa90 	bl	80054e4 <HAL_UART_Init>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <MX_UART7_Init+0x46>
  {
    Error_Handler();
 8001fca:	f7ff fa4d 	bl	8001468 <Error_Handler>
  }

}
 8001fce:	bf00      	nop
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	20000234 	.word	0x20000234
 8001fd8:	40007800 	.word	0x40007800

08001fdc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b08a      	sub	sp, #40	; 0x28
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe4:	f107 0314 	add.w	r3, r7, #20
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	605a      	str	r2, [r3, #4]
 8001fee:	609a      	str	r2, [r3, #8]
 8001ff0:	60da      	str	r2, [r3, #12]
 8001ff2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART7)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a1d      	ldr	r2, [pc, #116]	; (8002070 <HAL_UART_MspInit+0x94>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d133      	bne.n	8002066 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8001ffe:	2300      	movs	r3, #0
 8002000:	613b      	str	r3, [r7, #16]
 8002002:	4b1c      	ldr	r3, [pc, #112]	; (8002074 <HAL_UART_MspInit+0x98>)
 8002004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002006:	4a1b      	ldr	r2, [pc, #108]	; (8002074 <HAL_UART_MspInit+0x98>)
 8002008:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800200c:	6413      	str	r3, [r2, #64]	; 0x40
 800200e:	4b19      	ldr	r3, [pc, #100]	; (8002074 <HAL_UART_MspInit+0x98>)
 8002010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002012:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002016:	613b      	str	r3, [r7, #16]
 8002018:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800201a:	2300      	movs	r3, #0
 800201c:	60fb      	str	r3, [r7, #12]
 800201e:	4b15      	ldr	r3, [pc, #84]	; (8002074 <HAL_UART_MspInit+0x98>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002022:	4a14      	ldr	r2, [pc, #80]	; (8002074 <HAL_UART_MspInit+0x98>)
 8002024:	f043 0320 	orr.w	r3, r3, #32
 8002028:	6313      	str	r3, [r2, #48]	; 0x30
 800202a:	4b12      	ldr	r3, [pc, #72]	; (8002074 <HAL_UART_MspInit+0x98>)
 800202c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202e:	f003 0320 	and.w	r3, r3, #32
 8002032:	60fb      	str	r3, [r7, #12]
 8002034:	68fb      	ldr	r3, [r7, #12]
    /**UART7 GPIO Configuration
    PF6     ------> UART7_RX
    PF7     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002036:	23c0      	movs	r3, #192	; 0xc0
 8002038:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800203a:	2302      	movs	r3, #2
 800203c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800203e:	2301      	movs	r3, #1
 8002040:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002042:	2303      	movs	r3, #3
 8002044:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8002046:	2308      	movs	r3, #8
 8002048:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800204a:	f107 0314 	add.w	r3, r7, #20
 800204e:	4619      	mov	r1, r3
 8002050:	4809      	ldr	r0, [pc, #36]	; (8002078 <HAL_UART_MspInit+0x9c>)
 8002052:	f000 fa73 	bl	800253c <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8002056:	2200      	movs	r2, #0
 8002058:	2100      	movs	r1, #0
 800205a:	2052      	movs	r0, #82	; 0x52
 800205c:	f000 f9a7 	bl	80023ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8002060:	2052      	movs	r0, #82	; 0x52
 8002062:	f000 f9c0 	bl	80023e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }
}
 8002066:	bf00      	nop
 8002068:	3728      	adds	r7, #40	; 0x28
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40007800 	.word	0x40007800
 8002074:	40023800 	.word	0x40023800
 8002078:	40021400 	.word	0x40021400

0800207c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800207c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020b4 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002080:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002082:	e003      	b.n	800208c <LoopCopyDataInit>

08002084 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002084:	4b0c      	ldr	r3, [pc, #48]	; (80020b8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002086:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002088:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800208a:	3104      	adds	r1, #4

0800208c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800208c:	480b      	ldr	r0, [pc, #44]	; (80020bc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800208e:	4b0c      	ldr	r3, [pc, #48]	; (80020c0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002090:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002092:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002094:	d3f6      	bcc.n	8002084 <CopyDataInit>
  ldr  r2, =_sbss
 8002096:	4a0b      	ldr	r2, [pc, #44]	; (80020c4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002098:	e002      	b.n	80020a0 <LoopFillZerobss>

0800209a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800209a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800209c:	f842 3b04 	str.w	r3, [r2], #4

080020a0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80020a0:	4b09      	ldr	r3, [pc, #36]	; (80020c8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80020a2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80020a4:	d3f9      	bcc.n	800209a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80020a6:	f7ff fbff 	bl	80018a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020aa:	f004 f86f 	bl	800618c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020ae:	f7fe ffeb 	bl	8001088 <main>
  bx  lr    
 80020b2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80020b4:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80020b8:	0800655c 	.word	0x0800655c
  ldr  r0, =_sdata
 80020bc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80020c0:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 80020c4:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 80020c8:	20000278 	.word	0x20000278

080020cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020cc:	e7fe      	b.n	80020cc <ADC_IRQHandler>
	...

080020d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020d4:	4b0e      	ldr	r3, [pc, #56]	; (8002110 <HAL_Init+0x40>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a0d      	ldr	r2, [pc, #52]	; (8002110 <HAL_Init+0x40>)
 80020da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020e0:	4b0b      	ldr	r3, [pc, #44]	; (8002110 <HAL_Init+0x40>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a0a      	ldr	r2, [pc, #40]	; (8002110 <HAL_Init+0x40>)
 80020e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020ec:	4b08      	ldr	r3, [pc, #32]	; (8002110 <HAL_Init+0x40>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a07      	ldr	r2, [pc, #28]	; (8002110 <HAL_Init+0x40>)
 80020f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020f8:	2003      	movs	r0, #3
 80020fa:	f000 f94d 	bl	8002398 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020fe:	2000      	movs	r0, #0
 8002100:	f000 f808 	bl	8002114 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002104:	f7ff fb5c 	bl	80017c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	40023c00 	.word	0x40023c00

08002114 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800211c:	4b12      	ldr	r3, [pc, #72]	; (8002168 <HAL_InitTick+0x54>)
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	4b12      	ldr	r3, [pc, #72]	; (800216c <HAL_InitTick+0x58>)
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	4619      	mov	r1, r3
 8002126:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800212a:	fbb3 f3f1 	udiv	r3, r3, r1
 800212e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002132:	4618      	mov	r0, r3
 8002134:	f000 f965 	bl	8002402 <HAL_SYSTICK_Config>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e00e      	b.n	8002160 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2b0f      	cmp	r3, #15
 8002146:	d80a      	bhi.n	800215e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002148:	2200      	movs	r2, #0
 800214a:	6879      	ldr	r1, [r7, #4]
 800214c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002150:	f000 f92d 	bl	80023ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002154:	4a06      	ldr	r2, [pc, #24]	; (8002170 <HAL_InitTick+0x5c>)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800215a:	2300      	movs	r3, #0
 800215c:	e000      	b.n	8002160 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
}
 8002160:	4618      	mov	r0, r3
 8002162:	3708      	adds	r7, #8
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	20000008 	.word	0x20000008
 800216c:	20000010 	.word	0x20000010
 8002170:	2000000c 	.word	0x2000000c

08002174 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002178:	4b06      	ldr	r3, [pc, #24]	; (8002194 <HAL_IncTick+0x20>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	461a      	mov	r2, r3
 800217e:	4b06      	ldr	r3, [pc, #24]	; (8002198 <HAL_IncTick+0x24>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4413      	add	r3, r2
 8002184:	4a04      	ldr	r2, [pc, #16]	; (8002198 <HAL_IncTick+0x24>)
 8002186:	6013      	str	r3, [r2, #0]
}
 8002188:	bf00      	nop
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	20000010 	.word	0x20000010
 8002198:	20000274 	.word	0x20000274

0800219c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  return uwTick;
 80021a0:	4b03      	ldr	r3, [pc, #12]	; (80021b0 <HAL_GetTick+0x14>)
 80021a2:	681b      	ldr	r3, [r3, #0]
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	20000274 	.word	0x20000274

080021b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021bc:	f7ff ffee 	bl	800219c <HAL_GetTick>
 80021c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021cc:	d005      	beq.n	80021da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021ce:	4b09      	ldr	r3, [pc, #36]	; (80021f4 <HAL_Delay+0x40>)
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	461a      	mov	r2, r3
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	4413      	add	r3, r2
 80021d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021da:	bf00      	nop
 80021dc:	f7ff ffde 	bl	800219c <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	68fa      	ldr	r2, [r7, #12]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d8f7      	bhi.n	80021dc <HAL_Delay+0x28>
  {
  }
}
 80021ec:	bf00      	nop
 80021ee:	3710      	adds	r7, #16
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	20000010 	.word	0x20000010

080021f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f003 0307 	and.w	r3, r3, #7
 8002206:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002208:	4b0c      	ldr	r3, [pc, #48]	; (800223c <__NVIC_SetPriorityGrouping+0x44>)
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800220e:	68ba      	ldr	r2, [r7, #8]
 8002210:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002214:	4013      	ands	r3, r2
 8002216:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002220:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002224:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002228:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800222a:	4a04      	ldr	r2, [pc, #16]	; (800223c <__NVIC_SetPriorityGrouping+0x44>)
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	60d3      	str	r3, [r2, #12]
}
 8002230:	bf00      	nop
 8002232:	3714      	adds	r7, #20
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr
 800223c:	e000ed00 	.word	0xe000ed00

08002240 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002244:	4b04      	ldr	r3, [pc, #16]	; (8002258 <__NVIC_GetPriorityGrouping+0x18>)
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	0a1b      	lsrs	r3, r3, #8
 800224a:	f003 0307 	and.w	r3, r3, #7
}
 800224e:	4618      	mov	r0, r3
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr
 8002258:	e000ed00 	.word	0xe000ed00

0800225c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	4603      	mov	r3, r0
 8002264:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800226a:	2b00      	cmp	r3, #0
 800226c:	db0b      	blt.n	8002286 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800226e:	79fb      	ldrb	r3, [r7, #7]
 8002270:	f003 021f 	and.w	r2, r3, #31
 8002274:	4907      	ldr	r1, [pc, #28]	; (8002294 <__NVIC_EnableIRQ+0x38>)
 8002276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227a:	095b      	lsrs	r3, r3, #5
 800227c:	2001      	movs	r0, #1
 800227e:	fa00 f202 	lsl.w	r2, r0, r2
 8002282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002286:	bf00      	nop
 8002288:	370c      	adds	r7, #12
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	e000e100 	.word	0xe000e100

08002298 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	4603      	mov	r3, r0
 80022a0:	6039      	str	r1, [r7, #0]
 80022a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	db0a      	blt.n	80022c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	b2da      	uxtb	r2, r3
 80022b0:	490c      	ldr	r1, [pc, #48]	; (80022e4 <__NVIC_SetPriority+0x4c>)
 80022b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b6:	0112      	lsls	r2, r2, #4
 80022b8:	b2d2      	uxtb	r2, r2
 80022ba:	440b      	add	r3, r1
 80022bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022c0:	e00a      	b.n	80022d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	b2da      	uxtb	r2, r3
 80022c6:	4908      	ldr	r1, [pc, #32]	; (80022e8 <__NVIC_SetPriority+0x50>)
 80022c8:	79fb      	ldrb	r3, [r7, #7]
 80022ca:	f003 030f 	and.w	r3, r3, #15
 80022ce:	3b04      	subs	r3, #4
 80022d0:	0112      	lsls	r2, r2, #4
 80022d2:	b2d2      	uxtb	r2, r2
 80022d4:	440b      	add	r3, r1
 80022d6:	761a      	strb	r2, [r3, #24]
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr
 80022e4:	e000e100 	.word	0xe000e100
 80022e8:	e000ed00 	.word	0xe000ed00

080022ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b089      	sub	sp, #36	; 0x24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f003 0307 	and.w	r3, r3, #7
 80022fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	f1c3 0307 	rsb	r3, r3, #7
 8002306:	2b04      	cmp	r3, #4
 8002308:	bf28      	it	cs
 800230a:	2304      	movcs	r3, #4
 800230c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	3304      	adds	r3, #4
 8002312:	2b06      	cmp	r3, #6
 8002314:	d902      	bls.n	800231c <NVIC_EncodePriority+0x30>
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	3b03      	subs	r3, #3
 800231a:	e000      	b.n	800231e <NVIC_EncodePriority+0x32>
 800231c:	2300      	movs	r3, #0
 800231e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002320:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	43da      	mvns	r2, r3
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	401a      	ands	r2, r3
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002334:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	fa01 f303 	lsl.w	r3, r1, r3
 800233e:	43d9      	mvns	r1, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002344:	4313      	orrs	r3, r2
         );
}
 8002346:	4618      	mov	r0, r3
 8002348:	3724      	adds	r7, #36	; 0x24
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
	...

08002354 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	3b01      	subs	r3, #1
 8002360:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002364:	d301      	bcc.n	800236a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002366:	2301      	movs	r3, #1
 8002368:	e00f      	b.n	800238a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800236a:	4a0a      	ldr	r2, [pc, #40]	; (8002394 <SysTick_Config+0x40>)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	3b01      	subs	r3, #1
 8002370:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002372:	210f      	movs	r1, #15
 8002374:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002378:	f7ff ff8e 	bl	8002298 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800237c:	4b05      	ldr	r3, [pc, #20]	; (8002394 <SysTick_Config+0x40>)
 800237e:	2200      	movs	r2, #0
 8002380:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002382:	4b04      	ldr	r3, [pc, #16]	; (8002394 <SysTick_Config+0x40>)
 8002384:	2207      	movs	r2, #7
 8002386:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	e000e010 	.word	0xe000e010

08002398 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f7ff ff29 	bl	80021f8 <__NVIC_SetPriorityGrouping>
}
 80023a6:	bf00      	nop
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b086      	sub	sp, #24
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	4603      	mov	r3, r0
 80023b6:	60b9      	str	r1, [r7, #8]
 80023b8:	607a      	str	r2, [r7, #4]
 80023ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023bc:	2300      	movs	r3, #0
 80023be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023c0:	f7ff ff3e 	bl	8002240 <__NVIC_GetPriorityGrouping>
 80023c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	68b9      	ldr	r1, [r7, #8]
 80023ca:	6978      	ldr	r0, [r7, #20]
 80023cc:	f7ff ff8e 	bl	80022ec <NVIC_EncodePriority>
 80023d0:	4602      	mov	r2, r0
 80023d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023d6:	4611      	mov	r1, r2
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff ff5d 	bl	8002298 <__NVIC_SetPriority>
}
 80023de:	bf00      	nop
 80023e0:	3718      	adds	r7, #24
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b082      	sub	sp, #8
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	4603      	mov	r3, r0
 80023ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff ff31 	bl	800225c <__NVIC_EnableIRQ>
}
 80023fa:	bf00      	nop
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b082      	sub	sp, #8
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f7ff ffa2 	bl	8002354 <SysTick_Config>
 8002410:	4603      	mov	r3, r0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 800241a:	b580      	push	{r7, lr}
 800241c:	b082      	sub	sp, #8
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d101      	bne.n	800242c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e014      	b.n	8002456 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	791b      	ldrb	r3, [r3, #4]
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2b00      	cmp	r3, #0
 8002434:	d105      	bne.n	8002442 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f7fe fcb9 	bl	8000db4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2202      	movs	r2, #2
 8002446:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2201      	movs	r2, #1
 8002452:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8002454:	2300      	movs	r3, #0
}
 8002456:	4618      	mov	r0, r3
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}

0800245e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 800245e:	b480      	push	{r7}
 8002460:	b087      	sub	sp, #28
 8002462:	af00      	add	r7, sp, #0
 8002464:	60f8      	str	r0, [r7, #12]
 8002466:	60b9      	str	r1, [r7, #8]
 8002468:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 800246a:	2300      	movs	r3, #0
 800246c:	617b      	str	r3, [r7, #20]
 800246e:	2300      	movs	r3, #0
 8002470:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	795b      	ldrb	r3, [r3, #5]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d101      	bne.n	800247e <HAL_DAC_ConfigChannel+0x20>
 800247a:	2302      	movs	r3, #2
 800247c:	e036      	b.n	80024ec <HAL_DAC_ConfigChannel+0x8e>
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2201      	movs	r2, #1
 8002482:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2202      	movs	r2, #2
 8002488:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8002492:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	fa02 f303 	lsl.w	r3, r2, r3
 800249c:	43db      	mvns	r3, r3
 800249e:	697a      	ldr	r2, [r7, #20]
 80024a0:	4013      	ands	r3, r2
 80024a2:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80024b0:	693a      	ldr	r2, [r7, #16]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	697a      	ldr	r2, [r7, #20]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	697a      	ldr	r2, [r7, #20]
 80024c4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	6819      	ldr	r1, [r3, #0]
 80024cc:	22c0      	movs	r2, #192	; 0xc0
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	43da      	mvns	r2, r3
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	400a      	ands	r2, r1
 80024dc:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2201      	movs	r2, #1
 80024e2:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2200      	movs	r2, #0
 80024e8:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80024ea:	2300      	movs	r3, #0
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	371c      	adds	r7, #28
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002506:	b2db      	uxtb	r3, r3
 8002508:	2b02      	cmp	r3, #2
 800250a:	d004      	beq.n	8002516 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2280      	movs	r2, #128	; 0x80
 8002510:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e00c      	b.n	8002530 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2205      	movs	r2, #5
 800251a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f022 0201 	bic.w	r2, r2, #1
 800252c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800252e:	2300      	movs	r3, #0
}
 8002530:	4618      	mov	r0, r3
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800253c:	b480      	push	{r7}
 800253e:	b089      	sub	sp, #36	; 0x24
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002546:	2300      	movs	r3, #0
 8002548:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800254a:	2300      	movs	r3, #0
 800254c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800254e:	2300      	movs	r3, #0
 8002550:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002552:	2300      	movs	r3, #0
 8002554:	61fb      	str	r3, [r7, #28]
 8002556:	e177      	b.n	8002848 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002558:	2201      	movs	r2, #1
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	697a      	ldr	r2, [r7, #20]
 8002568:	4013      	ands	r3, r2
 800256a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800256c:	693a      	ldr	r2, [r7, #16]
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	429a      	cmp	r2, r3
 8002572:	f040 8166 	bne.w	8002842 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	2b01      	cmp	r3, #1
 800257c:	d00b      	beq.n	8002596 <HAL_GPIO_Init+0x5a>
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	2b02      	cmp	r3, #2
 8002584:	d007      	beq.n	8002596 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800258a:	2b11      	cmp	r3, #17
 800258c:	d003      	beq.n	8002596 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	2b12      	cmp	r3, #18
 8002594:	d130      	bne.n	80025f8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	2203      	movs	r2, #3
 80025a2:	fa02 f303 	lsl.w	r3, r2, r3
 80025a6:	43db      	mvns	r3, r3
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	4013      	ands	r3, r2
 80025ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	68da      	ldr	r2, [r3, #12]
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	4313      	orrs	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025cc:	2201      	movs	r2, #1
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	43db      	mvns	r3, r3
 80025d6:	69ba      	ldr	r2, [r7, #24]
 80025d8:	4013      	ands	r3, r2
 80025da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	091b      	lsrs	r3, r3, #4
 80025e2:	f003 0201 	and.w	r2, r3, #1
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	2203      	movs	r2, #3
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	43db      	mvns	r3, r3
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	4013      	ands	r3, r2
 800260e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	689a      	ldr	r2, [r3, #8]
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	4313      	orrs	r3, r2
 8002620:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	2b02      	cmp	r3, #2
 800262e:	d003      	beq.n	8002638 <HAL_GPIO_Init+0xfc>
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	2b12      	cmp	r3, #18
 8002636:	d123      	bne.n	8002680 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	08da      	lsrs	r2, r3, #3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	3208      	adds	r2, #8
 8002640:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002644:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	f003 0307 	and.w	r3, r3, #7
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	220f      	movs	r2, #15
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	43db      	mvns	r3, r3
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	4013      	ands	r3, r2
 800265a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	691a      	ldr	r2, [r3, #16]
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	f003 0307 	and.w	r3, r3, #7
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	4313      	orrs	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	08da      	lsrs	r2, r3, #3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	3208      	adds	r2, #8
 800267a:	69b9      	ldr	r1, [r7, #24]
 800267c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	2203      	movs	r2, #3
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	43db      	mvns	r3, r3
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	4013      	ands	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f003 0203 	and.w	r2, r3, #3
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	f000 80c0 	beq.w	8002842 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026c2:	2300      	movs	r3, #0
 80026c4:	60fb      	str	r3, [r7, #12]
 80026c6:	4b65      	ldr	r3, [pc, #404]	; (800285c <HAL_GPIO_Init+0x320>)
 80026c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ca:	4a64      	ldr	r2, [pc, #400]	; (800285c <HAL_GPIO_Init+0x320>)
 80026cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026d0:	6453      	str	r3, [r2, #68]	; 0x44
 80026d2:	4b62      	ldr	r3, [pc, #392]	; (800285c <HAL_GPIO_Init+0x320>)
 80026d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026da:	60fb      	str	r3, [r7, #12]
 80026dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026de:	4a60      	ldr	r2, [pc, #384]	; (8002860 <HAL_GPIO_Init+0x324>)
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	089b      	lsrs	r3, r3, #2
 80026e4:	3302      	adds	r3, #2
 80026e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	f003 0303 	and.w	r3, r3, #3
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	220f      	movs	r2, #15
 80026f6:	fa02 f303 	lsl.w	r3, r2, r3
 80026fa:	43db      	mvns	r3, r3
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	4013      	ands	r3, r2
 8002700:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a57      	ldr	r2, [pc, #348]	; (8002864 <HAL_GPIO_Init+0x328>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d037      	beq.n	800277a <HAL_GPIO_Init+0x23e>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a56      	ldr	r2, [pc, #344]	; (8002868 <HAL_GPIO_Init+0x32c>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d031      	beq.n	8002776 <HAL_GPIO_Init+0x23a>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a55      	ldr	r2, [pc, #340]	; (800286c <HAL_GPIO_Init+0x330>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d02b      	beq.n	8002772 <HAL_GPIO_Init+0x236>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a54      	ldr	r2, [pc, #336]	; (8002870 <HAL_GPIO_Init+0x334>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d025      	beq.n	800276e <HAL_GPIO_Init+0x232>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a53      	ldr	r2, [pc, #332]	; (8002874 <HAL_GPIO_Init+0x338>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d01f      	beq.n	800276a <HAL_GPIO_Init+0x22e>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a52      	ldr	r2, [pc, #328]	; (8002878 <HAL_GPIO_Init+0x33c>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d019      	beq.n	8002766 <HAL_GPIO_Init+0x22a>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a51      	ldr	r2, [pc, #324]	; (800287c <HAL_GPIO_Init+0x340>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d013      	beq.n	8002762 <HAL_GPIO_Init+0x226>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a50      	ldr	r2, [pc, #320]	; (8002880 <HAL_GPIO_Init+0x344>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d00d      	beq.n	800275e <HAL_GPIO_Init+0x222>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a4f      	ldr	r2, [pc, #316]	; (8002884 <HAL_GPIO_Init+0x348>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d007      	beq.n	800275a <HAL_GPIO_Init+0x21e>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a4e      	ldr	r2, [pc, #312]	; (8002888 <HAL_GPIO_Init+0x34c>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d101      	bne.n	8002756 <HAL_GPIO_Init+0x21a>
 8002752:	2309      	movs	r3, #9
 8002754:	e012      	b.n	800277c <HAL_GPIO_Init+0x240>
 8002756:	230a      	movs	r3, #10
 8002758:	e010      	b.n	800277c <HAL_GPIO_Init+0x240>
 800275a:	2308      	movs	r3, #8
 800275c:	e00e      	b.n	800277c <HAL_GPIO_Init+0x240>
 800275e:	2307      	movs	r3, #7
 8002760:	e00c      	b.n	800277c <HAL_GPIO_Init+0x240>
 8002762:	2306      	movs	r3, #6
 8002764:	e00a      	b.n	800277c <HAL_GPIO_Init+0x240>
 8002766:	2305      	movs	r3, #5
 8002768:	e008      	b.n	800277c <HAL_GPIO_Init+0x240>
 800276a:	2304      	movs	r3, #4
 800276c:	e006      	b.n	800277c <HAL_GPIO_Init+0x240>
 800276e:	2303      	movs	r3, #3
 8002770:	e004      	b.n	800277c <HAL_GPIO_Init+0x240>
 8002772:	2302      	movs	r3, #2
 8002774:	e002      	b.n	800277c <HAL_GPIO_Init+0x240>
 8002776:	2301      	movs	r3, #1
 8002778:	e000      	b.n	800277c <HAL_GPIO_Init+0x240>
 800277a:	2300      	movs	r3, #0
 800277c:	69fa      	ldr	r2, [r7, #28]
 800277e:	f002 0203 	and.w	r2, r2, #3
 8002782:	0092      	lsls	r2, r2, #2
 8002784:	4093      	lsls	r3, r2
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	4313      	orrs	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800278c:	4934      	ldr	r1, [pc, #208]	; (8002860 <HAL_GPIO_Init+0x324>)
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	089b      	lsrs	r3, r3, #2
 8002792:	3302      	adds	r3, #2
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800279a:	4b3c      	ldr	r3, [pc, #240]	; (800288c <HAL_GPIO_Init+0x350>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	43db      	mvns	r3, r3
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	4013      	ands	r3, r2
 80027a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d003      	beq.n	80027be <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027be:	4a33      	ldr	r2, [pc, #204]	; (800288c <HAL_GPIO_Init+0x350>)
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80027c4:	4b31      	ldr	r3, [pc, #196]	; (800288c <HAL_GPIO_Init+0x350>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	43db      	mvns	r3, r3
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	4013      	ands	r3, r2
 80027d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d003      	beq.n	80027e8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027e8:	4a28      	ldr	r2, [pc, #160]	; (800288c <HAL_GPIO_Init+0x350>)
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027ee:	4b27      	ldr	r3, [pc, #156]	; (800288c <HAL_GPIO_Init+0x350>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	43db      	mvns	r3, r3
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	4013      	ands	r3, r2
 80027fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d003      	beq.n	8002812 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	4313      	orrs	r3, r2
 8002810:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002812:	4a1e      	ldr	r2, [pc, #120]	; (800288c <HAL_GPIO_Init+0x350>)
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002818:	4b1c      	ldr	r3, [pc, #112]	; (800288c <HAL_GPIO_Init+0x350>)
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	43db      	mvns	r3, r3
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	4013      	ands	r3, r2
 8002826:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d003      	beq.n	800283c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	4313      	orrs	r3, r2
 800283a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800283c:	4a13      	ldr	r2, [pc, #76]	; (800288c <HAL_GPIO_Init+0x350>)
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	3301      	adds	r3, #1
 8002846:	61fb      	str	r3, [r7, #28]
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	2b0f      	cmp	r3, #15
 800284c:	f67f ae84 	bls.w	8002558 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002850:	bf00      	nop
 8002852:	3724      	adds	r7, #36	; 0x24
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr
 800285c:	40023800 	.word	0x40023800
 8002860:	40013800 	.word	0x40013800
 8002864:	40020000 	.word	0x40020000
 8002868:	40020400 	.word	0x40020400
 800286c:	40020800 	.word	0x40020800
 8002870:	40020c00 	.word	0x40020c00
 8002874:	40021000 	.word	0x40021000
 8002878:	40021400 	.word	0x40021400
 800287c:	40021800 	.word	0x40021800
 8002880:	40021c00 	.word	0x40021c00
 8002884:	40022000 	.word	0x40022000
 8002888:	40022400 	.word	0x40022400
 800288c:	40013c00 	.word	0x40013c00

08002890 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	460b      	mov	r3, r1
 800289a:	807b      	strh	r3, [r7, #2]
 800289c:	4613      	mov	r3, r2
 800289e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028a0:	787b      	ldrb	r3, [r7, #1]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d003      	beq.n	80028ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028a6:	887a      	ldrh	r2, [r7, #2]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028ac:	e003      	b.n	80028b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028ae:	887b      	ldrh	r3, [r7, #2]
 80028b0:	041a      	lsls	r2, r3, #16
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	619a      	str	r2, [r3, #24]
}
 80028b6:	bf00      	nop
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
	...

080028c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d101      	bne.n	80028d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e11f      	b.n	8002b16 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d106      	bne.n	80028f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f7fe fb84 	bl	8000ff8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2224      	movs	r2, #36	; 0x24
 80028f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f022 0201 	bic.w	r2, r2, #1
 8002906:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002916:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002926:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002928:	f001 fc84 	bl	8004234 <HAL_RCC_GetPCLK1Freq>
 800292c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	4a7b      	ldr	r2, [pc, #492]	; (8002b20 <HAL_I2C_Init+0x25c>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d807      	bhi.n	8002948 <HAL_I2C_Init+0x84>
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	4a7a      	ldr	r2, [pc, #488]	; (8002b24 <HAL_I2C_Init+0x260>)
 800293c:	4293      	cmp	r3, r2
 800293e:	bf94      	ite	ls
 8002940:	2301      	movls	r3, #1
 8002942:	2300      	movhi	r3, #0
 8002944:	b2db      	uxtb	r3, r3
 8002946:	e006      	b.n	8002956 <HAL_I2C_Init+0x92>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	4a77      	ldr	r2, [pc, #476]	; (8002b28 <HAL_I2C_Init+0x264>)
 800294c:	4293      	cmp	r3, r2
 800294e:	bf94      	ite	ls
 8002950:	2301      	movls	r3, #1
 8002952:	2300      	movhi	r3, #0
 8002954:	b2db      	uxtb	r3, r3
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e0db      	b.n	8002b16 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	4a72      	ldr	r2, [pc, #456]	; (8002b2c <HAL_I2C_Init+0x268>)
 8002962:	fba2 2303 	umull	r2, r3, r2, r3
 8002966:	0c9b      	lsrs	r3, r3, #18
 8002968:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68ba      	ldr	r2, [r7, #8]
 800297a:	430a      	orrs	r2, r1
 800297c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	6a1b      	ldr	r3, [r3, #32]
 8002984:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	4a64      	ldr	r2, [pc, #400]	; (8002b20 <HAL_I2C_Init+0x25c>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d802      	bhi.n	8002998 <HAL_I2C_Init+0xd4>
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	3301      	adds	r3, #1
 8002996:	e009      	b.n	80029ac <HAL_I2C_Init+0xe8>
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800299e:	fb02 f303 	mul.w	r3, r2, r3
 80029a2:	4a63      	ldr	r2, [pc, #396]	; (8002b30 <HAL_I2C_Init+0x26c>)
 80029a4:	fba2 2303 	umull	r2, r3, r2, r3
 80029a8:	099b      	lsrs	r3, r3, #6
 80029aa:	3301      	adds	r3, #1
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	6812      	ldr	r2, [r2, #0]
 80029b0:	430b      	orrs	r3, r1
 80029b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	69db      	ldr	r3, [r3, #28]
 80029ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80029be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	4956      	ldr	r1, [pc, #344]	; (8002b20 <HAL_I2C_Init+0x25c>)
 80029c8:	428b      	cmp	r3, r1
 80029ca:	d80d      	bhi.n	80029e8 <HAL_I2C_Init+0x124>
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	1e59      	subs	r1, r3, #1
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80029da:	3301      	adds	r3, #1
 80029dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029e0:	2b04      	cmp	r3, #4
 80029e2:	bf38      	it	cc
 80029e4:	2304      	movcc	r3, #4
 80029e6:	e04f      	b.n	8002a88 <HAL_I2C_Init+0x1c4>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d111      	bne.n	8002a14 <HAL_I2C_Init+0x150>
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	1e58      	subs	r0, r3, #1
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6859      	ldr	r1, [r3, #4]
 80029f8:	460b      	mov	r3, r1
 80029fa:	005b      	lsls	r3, r3, #1
 80029fc:	440b      	add	r3, r1
 80029fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a02:	3301      	adds	r3, #1
 8002a04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	bf0c      	ite	eq
 8002a0c:	2301      	moveq	r3, #1
 8002a0e:	2300      	movne	r3, #0
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	e012      	b.n	8002a3a <HAL_I2C_Init+0x176>
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	1e58      	subs	r0, r3, #1
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6859      	ldr	r1, [r3, #4]
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	440b      	add	r3, r1
 8002a22:	0099      	lsls	r1, r3, #2
 8002a24:	440b      	add	r3, r1
 8002a26:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	bf0c      	ite	eq
 8002a34:	2301      	moveq	r3, #1
 8002a36:	2300      	movne	r3, #0
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <HAL_I2C_Init+0x17e>
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e022      	b.n	8002a88 <HAL_I2C_Init+0x1c4>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d10e      	bne.n	8002a68 <HAL_I2C_Init+0x1a4>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	1e58      	subs	r0, r3, #1
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6859      	ldr	r1, [r3, #4]
 8002a52:	460b      	mov	r3, r1
 8002a54:	005b      	lsls	r3, r3, #1
 8002a56:	440b      	add	r3, r1
 8002a58:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a66:	e00f      	b.n	8002a88 <HAL_I2C_Init+0x1c4>
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	1e58      	subs	r0, r3, #1
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6859      	ldr	r1, [r3, #4]
 8002a70:	460b      	mov	r3, r1
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	440b      	add	r3, r1
 8002a76:	0099      	lsls	r1, r3, #2
 8002a78:	440b      	add	r3, r1
 8002a7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a7e:	3301      	adds	r3, #1
 8002a80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a88:	6879      	ldr	r1, [r7, #4]
 8002a8a:	6809      	ldr	r1, [r1, #0]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	69da      	ldr	r2, [r3, #28]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a1b      	ldr	r3, [r3, #32]
 8002aa2:	431a      	orrs	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ab6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	6911      	ldr	r1, [r2, #16]
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	68d2      	ldr	r2, [r2, #12]
 8002ac2:	4311      	orrs	r1, r2
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	6812      	ldr	r2, [r2, #0]
 8002ac8:	430b      	orrs	r3, r1
 8002aca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	695a      	ldr	r2, [r3, #20]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	431a      	orrs	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	430a      	orrs	r2, r1
 8002ae6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f042 0201 	orr.w	r2, r2, #1
 8002af6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2220      	movs	r2, #32
 8002b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3710      	adds	r7, #16
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	000186a0 	.word	0x000186a0
 8002b24:	001e847f 	.word	0x001e847f
 8002b28:	003d08ff 	.word	0x003d08ff
 8002b2c:	431bde83 	.word	0x431bde83
 8002b30:	10624dd3 	.word	0x10624dd3

08002b34 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b088      	sub	sp, #32
 8002b38:	af02      	add	r7, sp, #8
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	4608      	mov	r0, r1
 8002b3e:	4611      	mov	r1, r2
 8002b40:	461a      	mov	r2, r3
 8002b42:	4603      	mov	r3, r0
 8002b44:	817b      	strh	r3, [r7, #10]
 8002b46:	460b      	mov	r3, r1
 8002b48:	813b      	strh	r3, [r7, #8]
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b4e:	f7ff fb25 	bl	800219c <HAL_GetTick>
 8002b52:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	2b20      	cmp	r3, #32
 8002b5e:	f040 80d9 	bne.w	8002d14 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	9300      	str	r3, [sp, #0]
 8002b66:	2319      	movs	r3, #25
 8002b68:	2201      	movs	r2, #1
 8002b6a:	496d      	ldr	r1, [pc, #436]	; (8002d20 <HAL_I2C_Mem_Write+0x1ec>)
 8002b6c:	68f8      	ldr	r0, [r7, #12]
 8002b6e:	f000 fc7f 	bl	8003470 <I2C_WaitOnFlagUntilTimeout>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d001      	beq.n	8002b7c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002b78:	2302      	movs	r3, #2
 8002b7a:	e0cc      	b.n	8002d16 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d101      	bne.n	8002b8a <HAL_I2C_Mem_Write+0x56>
 8002b86:	2302      	movs	r3, #2
 8002b88:	e0c5      	b.n	8002d16 <HAL_I2C_Mem_Write+0x1e2>
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0301 	and.w	r3, r3, #1
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d007      	beq.n	8002bb0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f042 0201 	orr.w	r2, r2, #1
 8002bae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bbe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2221      	movs	r2, #33	; 0x21
 8002bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2240      	movs	r2, #64	; 0x40
 8002bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6a3a      	ldr	r2, [r7, #32]
 8002bda:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002be0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002be6:	b29a      	uxth	r2, r3
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	4a4d      	ldr	r2, [pc, #308]	; (8002d24 <HAL_I2C_Mem_Write+0x1f0>)
 8002bf0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002bf2:	88f8      	ldrh	r0, [r7, #6]
 8002bf4:	893a      	ldrh	r2, [r7, #8]
 8002bf6:	8979      	ldrh	r1, [r7, #10]
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	9301      	str	r3, [sp, #4]
 8002bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bfe:	9300      	str	r3, [sp, #0]
 8002c00:	4603      	mov	r3, r0
 8002c02:	68f8      	ldr	r0, [r7, #12]
 8002c04:	f000 fab6 	bl	8003174 <I2C_RequestMemoryWrite>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d052      	beq.n	8002cb4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e081      	b.n	8002d16 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c12:	697a      	ldr	r2, [r7, #20]
 8002c14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	f000 fd00 	bl	800361c <I2C_WaitOnTXEFlagUntilTimeout>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d00d      	beq.n	8002c3e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c26:	2b04      	cmp	r3, #4
 8002c28:	d107      	bne.n	8002c3a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c38:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e06b      	b.n	8002d16 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c42:	781a      	ldrb	r2, [r3, #0]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4e:	1c5a      	adds	r2, r3, #1
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	b29a      	uxth	r2, r3
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	3b01      	subs	r3, #1
 8002c68:	b29a      	uxth	r2, r3
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	695b      	ldr	r3, [r3, #20]
 8002c74:	f003 0304 	and.w	r3, r3, #4
 8002c78:	2b04      	cmp	r3, #4
 8002c7a:	d11b      	bne.n	8002cb4 <HAL_I2C_Mem_Write+0x180>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d017      	beq.n	8002cb4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c88:	781a      	ldrb	r2, [r3, #0]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c94:	1c5a      	adds	r2, r3, #1
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	b29a      	uxth	r2, r3
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	3b01      	subs	r3, #1
 8002cae:	b29a      	uxth	r2, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d1aa      	bne.n	8002c12 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cbc:	697a      	ldr	r2, [r7, #20]
 8002cbe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cc0:	68f8      	ldr	r0, [r7, #12]
 8002cc2:	f000 fcec 	bl	800369e <I2C_WaitOnBTFFlagUntilTimeout>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d00d      	beq.n	8002ce8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd0:	2b04      	cmp	r3, #4
 8002cd2:	d107      	bne.n	8002ce4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ce2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e016      	b.n	8002d16 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cf6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2220      	movs	r2, #32
 8002cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d10:	2300      	movs	r3, #0
 8002d12:	e000      	b.n	8002d16 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002d14:	2302      	movs	r3, #2
  }
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3718      	adds	r7, #24
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	00100002 	.word	0x00100002
 8002d24:	ffff0000 	.word	0xffff0000

08002d28 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b08c      	sub	sp, #48	; 0x30
 8002d2c:	af02      	add	r7, sp, #8
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	4608      	mov	r0, r1
 8002d32:	4611      	mov	r1, r2
 8002d34:	461a      	mov	r2, r3
 8002d36:	4603      	mov	r3, r0
 8002d38:	817b      	strh	r3, [r7, #10]
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	813b      	strh	r3, [r7, #8]
 8002d3e:	4613      	mov	r3, r2
 8002d40:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d42:	f7ff fa2b 	bl	800219c <HAL_GetTick>
 8002d46:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	2b20      	cmp	r3, #32
 8002d52:	f040 8208 	bne.w	8003166 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d58:	9300      	str	r3, [sp, #0]
 8002d5a:	2319      	movs	r3, #25
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	497b      	ldr	r1, [pc, #492]	; (8002f4c <HAL_I2C_Mem_Read+0x224>)
 8002d60:	68f8      	ldr	r0, [r7, #12]
 8002d62:	f000 fb85 	bl	8003470 <I2C_WaitOnFlagUntilTimeout>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d001      	beq.n	8002d70 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002d6c:	2302      	movs	r3, #2
 8002d6e:	e1fb      	b.n	8003168 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d101      	bne.n	8002d7e <HAL_I2C_Mem_Read+0x56>
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	e1f4      	b.n	8003168 <HAL_I2C_Mem_Read+0x440>
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2201      	movs	r2, #1
 8002d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0301 	and.w	r3, r3, #1
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d007      	beq.n	8002da4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f042 0201 	orr.w	r2, r2, #1
 8002da2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002db2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2222      	movs	r2, #34	; 0x22
 8002db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2240      	movs	r2, #64	; 0x40
 8002dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002dd4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	4a5b      	ldr	r2, [pc, #364]	; (8002f50 <HAL_I2C_Mem_Read+0x228>)
 8002de4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002de6:	88f8      	ldrh	r0, [r7, #6]
 8002de8:	893a      	ldrh	r2, [r7, #8]
 8002dea:	8979      	ldrh	r1, [r7, #10]
 8002dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dee:	9301      	str	r3, [sp, #4]
 8002df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002df2:	9300      	str	r3, [sp, #0]
 8002df4:	4603      	mov	r3, r0
 8002df6:	68f8      	ldr	r0, [r7, #12]
 8002df8:	f000 fa52 	bl	80032a0 <I2C_RequestMemoryRead>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d001      	beq.n	8002e06 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e1b0      	b.n	8003168 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d113      	bne.n	8002e36 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e0e:	2300      	movs	r3, #0
 8002e10:	623b      	str	r3, [r7, #32]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	695b      	ldr	r3, [r3, #20]
 8002e18:	623b      	str	r3, [r7, #32]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	623b      	str	r3, [r7, #32]
 8002e22:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e32:	601a      	str	r2, [r3, #0]
 8002e34:	e184      	b.n	8003140 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d11b      	bne.n	8002e76 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e4c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e4e:	2300      	movs	r3, #0
 8002e50:	61fb      	str	r3, [r7, #28]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	695b      	ldr	r3, [r3, #20]
 8002e58:	61fb      	str	r3, [r7, #28]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	699b      	ldr	r3, [r3, #24]
 8002e60:	61fb      	str	r3, [r7, #28]
 8002e62:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e72:	601a      	str	r2, [r3, #0]
 8002e74:	e164      	b.n	8003140 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d11b      	bne.n	8002eb6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e8c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e9c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	61bb      	str	r3, [r7, #24]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	695b      	ldr	r3, [r3, #20]
 8002ea8:	61bb      	str	r3, [r7, #24]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	699b      	ldr	r3, [r3, #24]
 8002eb0:	61bb      	str	r3, [r7, #24]
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	e144      	b.n	8003140 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	617b      	str	r3, [r7, #20]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	695b      	ldr	r3, [r3, #20]
 8002ec0:	617b      	str	r3, [r7, #20]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	699b      	ldr	r3, [r3, #24]
 8002ec8:	617b      	str	r3, [r7, #20]
 8002eca:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002ecc:	e138      	b.n	8003140 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ed2:	2b03      	cmp	r3, #3
 8002ed4:	f200 80f1 	bhi.w	80030ba <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d123      	bne.n	8002f28 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ee0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ee2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002ee4:	68f8      	ldr	r0, [r7, #12]
 8002ee6:	f000 fc1b 	bl	8003720 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d001      	beq.n	8002ef4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e139      	b.n	8003168 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	691a      	ldr	r2, [r3, #16]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efe:	b2d2      	uxtb	r2, r2
 8002f00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f06:	1c5a      	adds	r2, r3, #1
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f10:	3b01      	subs	r3, #1
 8002f12:	b29a      	uxth	r2, r3
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	b29a      	uxth	r2, r3
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f26:	e10b      	b.n	8003140 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d14e      	bne.n	8002fce <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f32:	9300      	str	r3, [sp, #0]
 8002f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f36:	2200      	movs	r2, #0
 8002f38:	4906      	ldr	r1, [pc, #24]	; (8002f54 <HAL_I2C_Mem_Read+0x22c>)
 8002f3a:	68f8      	ldr	r0, [r7, #12]
 8002f3c:	f000 fa98 	bl	8003470 <I2C_WaitOnFlagUntilTimeout>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d008      	beq.n	8002f58 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e10e      	b.n	8003168 <HAL_I2C_Mem_Read+0x440>
 8002f4a:	bf00      	nop
 8002f4c:	00100002 	.word	0x00100002
 8002f50:	ffff0000 	.word	0xffff0000
 8002f54:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	691a      	ldr	r2, [r3, #16]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f72:	b2d2      	uxtb	r2, r2
 8002f74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7a:	1c5a      	adds	r2, r3, #1
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f84:	3b01      	subs	r3, #1
 8002f86:	b29a      	uxth	r2, r3
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	3b01      	subs	r3, #1
 8002f94:	b29a      	uxth	r2, r3
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	691a      	ldr	r2, [r3, #16]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa4:	b2d2      	uxtb	r2, r2
 8002fa6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fac:	1c5a      	adds	r2, r3, #1
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	b29a      	uxth	r2, r3
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	3b01      	subs	r3, #1
 8002fc6:	b29a      	uxth	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002fcc:	e0b8      	b.n	8003140 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd0:	9300      	str	r3, [sp, #0]
 8002fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	4966      	ldr	r1, [pc, #408]	; (8003170 <HAL_I2C_Mem_Read+0x448>)
 8002fd8:	68f8      	ldr	r0, [r7, #12]
 8002fda:	f000 fa49 	bl	8003470 <I2C_WaitOnFlagUntilTimeout>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d001      	beq.n	8002fe8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e0bf      	b.n	8003168 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ff6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	691a      	ldr	r2, [r3, #16]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003002:	b2d2      	uxtb	r2, r2
 8003004:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300a:	1c5a      	adds	r2, r3, #1
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003014:	3b01      	subs	r3, #1
 8003016:	b29a      	uxth	r2, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003020:	b29b      	uxth	r3, r3
 8003022:	3b01      	subs	r3, #1
 8003024:	b29a      	uxth	r2, r3
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800302a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302c:	9300      	str	r3, [sp, #0]
 800302e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003030:	2200      	movs	r2, #0
 8003032:	494f      	ldr	r1, [pc, #316]	; (8003170 <HAL_I2C_Mem_Read+0x448>)
 8003034:	68f8      	ldr	r0, [r7, #12]
 8003036:	f000 fa1b 	bl	8003470 <I2C_WaitOnFlagUntilTimeout>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d001      	beq.n	8003044 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e091      	b.n	8003168 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003052:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	691a      	ldr	r2, [r3, #16]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305e:	b2d2      	uxtb	r2, r2
 8003060:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003066:	1c5a      	adds	r2, r3, #1
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003070:	3b01      	subs	r3, #1
 8003072:	b29a      	uxth	r2, r3
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800307c:	b29b      	uxth	r3, r3
 800307e:	3b01      	subs	r3, #1
 8003080:	b29a      	uxth	r2, r3
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	691a      	ldr	r2, [r3, #16]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003090:	b2d2      	uxtb	r2, r2
 8003092:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003098:	1c5a      	adds	r2, r3, #1
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030a2:	3b01      	subs	r3, #1
 80030a4:	b29a      	uxth	r2, r3
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	3b01      	subs	r3, #1
 80030b2:	b29a      	uxth	r2, r3
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80030b8:	e042      	b.n	8003140 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030bc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	f000 fb2e 	bl	8003720 <I2C_WaitOnRXNEFlagUntilTimeout>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e04c      	b.n	8003168 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	691a      	ldr	r2, [r3, #16]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d8:	b2d2      	uxtb	r2, r2
 80030da:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e0:	1c5a      	adds	r2, r3, #1
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ea:	3b01      	subs	r3, #1
 80030ec:	b29a      	uxth	r2, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	3b01      	subs	r3, #1
 80030fa:	b29a      	uxth	r2, r3
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	f003 0304 	and.w	r3, r3, #4
 800310a:	2b04      	cmp	r3, #4
 800310c:	d118      	bne.n	8003140 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	691a      	ldr	r2, [r3, #16]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003118:	b2d2      	uxtb	r2, r2
 800311a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003120:	1c5a      	adds	r2, r3, #1
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800312a:	3b01      	subs	r3, #1
 800312c:	b29a      	uxth	r2, r3
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003136:	b29b      	uxth	r3, r3
 8003138:	3b01      	subs	r3, #1
 800313a:	b29a      	uxth	r2, r3
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003144:	2b00      	cmp	r3, #0
 8003146:	f47f aec2 	bne.w	8002ece <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2220      	movs	r2, #32
 800314e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003162:	2300      	movs	r3, #0
 8003164:	e000      	b.n	8003168 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003166:	2302      	movs	r3, #2
  }
}
 8003168:	4618      	mov	r0, r3
 800316a:	3728      	adds	r7, #40	; 0x28
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	00010004 	.word	0x00010004

08003174 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b088      	sub	sp, #32
 8003178:	af02      	add	r7, sp, #8
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	4608      	mov	r0, r1
 800317e:	4611      	mov	r1, r2
 8003180:	461a      	mov	r2, r3
 8003182:	4603      	mov	r3, r0
 8003184:	817b      	strh	r3, [r7, #10]
 8003186:	460b      	mov	r3, r1
 8003188:	813b      	strh	r3, [r7, #8]
 800318a:	4613      	mov	r3, r2
 800318c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800319c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800319e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a0:	9300      	str	r3, [sp, #0]
 80031a2:	6a3b      	ldr	r3, [r7, #32]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80031aa:	68f8      	ldr	r0, [r7, #12]
 80031ac:	f000 f960 	bl	8003470 <I2C_WaitOnFlagUntilTimeout>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00d      	beq.n	80031d2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031c4:	d103      	bne.n	80031ce <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031cc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e05f      	b.n	8003292 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80031d2:	897b      	ldrh	r3, [r7, #10]
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	461a      	mov	r2, r3
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80031e0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e4:	6a3a      	ldr	r2, [r7, #32]
 80031e6:	492d      	ldr	r1, [pc, #180]	; (800329c <I2C_RequestMemoryWrite+0x128>)
 80031e8:	68f8      	ldr	r0, [r7, #12]
 80031ea:	f000 f998 	bl	800351e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d001      	beq.n	80031f8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e04c      	b.n	8003292 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031f8:	2300      	movs	r3, #0
 80031fa:	617b      	str	r3, [r7, #20]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	617b      	str	r3, [r7, #20]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	699b      	ldr	r3, [r3, #24]
 800320a:	617b      	str	r3, [r7, #20]
 800320c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800320e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003210:	6a39      	ldr	r1, [r7, #32]
 8003212:	68f8      	ldr	r0, [r7, #12]
 8003214:	f000 fa02 	bl	800361c <I2C_WaitOnTXEFlagUntilTimeout>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00d      	beq.n	800323a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003222:	2b04      	cmp	r3, #4
 8003224:	d107      	bne.n	8003236 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003234:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e02b      	b.n	8003292 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800323a:	88fb      	ldrh	r3, [r7, #6]
 800323c:	2b01      	cmp	r3, #1
 800323e:	d105      	bne.n	800324c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003240:	893b      	ldrh	r3, [r7, #8]
 8003242:	b2da      	uxtb	r2, r3
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	611a      	str	r2, [r3, #16]
 800324a:	e021      	b.n	8003290 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800324c:	893b      	ldrh	r3, [r7, #8]
 800324e:	0a1b      	lsrs	r3, r3, #8
 8003250:	b29b      	uxth	r3, r3
 8003252:	b2da      	uxtb	r2, r3
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800325a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800325c:	6a39      	ldr	r1, [r7, #32]
 800325e:	68f8      	ldr	r0, [r7, #12]
 8003260:	f000 f9dc 	bl	800361c <I2C_WaitOnTXEFlagUntilTimeout>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d00d      	beq.n	8003286 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326e:	2b04      	cmp	r3, #4
 8003270:	d107      	bne.n	8003282 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003280:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e005      	b.n	8003292 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003286:	893b      	ldrh	r3, [r7, #8]
 8003288:	b2da      	uxtb	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	3718      	adds	r7, #24
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	00010002 	.word	0x00010002

080032a0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b088      	sub	sp, #32
 80032a4:	af02      	add	r7, sp, #8
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	4608      	mov	r0, r1
 80032aa:	4611      	mov	r1, r2
 80032ac:	461a      	mov	r2, r3
 80032ae:	4603      	mov	r3, r0
 80032b0:	817b      	strh	r3, [r7, #10]
 80032b2:	460b      	mov	r3, r1
 80032b4:	813b      	strh	r3, [r7, #8]
 80032b6:	4613      	mov	r3, r2
 80032b8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80032c8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032d8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032dc:	9300      	str	r3, [sp, #0]
 80032de:	6a3b      	ldr	r3, [r7, #32]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032e6:	68f8      	ldr	r0, [r7, #12]
 80032e8:	f000 f8c2 	bl	8003470 <I2C_WaitOnFlagUntilTimeout>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d00d      	beq.n	800330e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003300:	d103      	bne.n	800330a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003308:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e0aa      	b.n	8003464 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800330e:	897b      	ldrh	r3, [r7, #10]
 8003310:	b2db      	uxtb	r3, r3
 8003312:	461a      	mov	r2, r3
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800331c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800331e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003320:	6a3a      	ldr	r2, [r7, #32]
 8003322:	4952      	ldr	r1, [pc, #328]	; (800346c <I2C_RequestMemoryRead+0x1cc>)
 8003324:	68f8      	ldr	r0, [r7, #12]
 8003326:	f000 f8fa 	bl	800351e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d001      	beq.n	8003334 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e097      	b.n	8003464 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003334:	2300      	movs	r3, #0
 8003336:	617b      	str	r3, [r7, #20]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	695b      	ldr	r3, [r3, #20]
 800333e:	617b      	str	r3, [r7, #20]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	699b      	ldr	r3, [r3, #24]
 8003346:	617b      	str	r3, [r7, #20]
 8003348:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800334a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800334c:	6a39      	ldr	r1, [r7, #32]
 800334e:	68f8      	ldr	r0, [r7, #12]
 8003350:	f000 f964 	bl	800361c <I2C_WaitOnTXEFlagUntilTimeout>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d00d      	beq.n	8003376 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335e:	2b04      	cmp	r3, #4
 8003360:	d107      	bne.n	8003372 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003370:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e076      	b.n	8003464 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003376:	88fb      	ldrh	r3, [r7, #6]
 8003378:	2b01      	cmp	r3, #1
 800337a:	d105      	bne.n	8003388 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800337c:	893b      	ldrh	r3, [r7, #8]
 800337e:	b2da      	uxtb	r2, r3
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	611a      	str	r2, [r3, #16]
 8003386:	e021      	b.n	80033cc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003388:	893b      	ldrh	r3, [r7, #8]
 800338a:	0a1b      	lsrs	r3, r3, #8
 800338c:	b29b      	uxth	r3, r3
 800338e:	b2da      	uxtb	r2, r3
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003396:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003398:	6a39      	ldr	r1, [r7, #32]
 800339a:	68f8      	ldr	r0, [r7, #12]
 800339c:	f000 f93e 	bl	800361c <I2C_WaitOnTXEFlagUntilTimeout>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d00d      	beq.n	80033c2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033aa:	2b04      	cmp	r3, #4
 80033ac:	d107      	bne.n	80033be <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033bc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e050      	b.n	8003464 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80033c2:	893b      	ldrh	r3, [r7, #8]
 80033c4:	b2da      	uxtb	r2, r3
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ce:	6a39      	ldr	r1, [r7, #32]
 80033d0:	68f8      	ldr	r0, [r7, #12]
 80033d2:	f000 f923 	bl	800361c <I2C_WaitOnTXEFlagUntilTimeout>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d00d      	beq.n	80033f8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e0:	2b04      	cmp	r3, #4
 80033e2:	d107      	bne.n	80033f4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033f2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e035      	b.n	8003464 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003406:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340a:	9300      	str	r3, [sp, #0]
 800340c:	6a3b      	ldr	r3, [r7, #32]
 800340e:	2200      	movs	r2, #0
 8003410:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003414:	68f8      	ldr	r0, [r7, #12]
 8003416:	f000 f82b 	bl	8003470 <I2C_WaitOnFlagUntilTimeout>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d00d      	beq.n	800343c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800342a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800342e:	d103      	bne.n	8003438 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003436:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	e013      	b.n	8003464 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800343c:	897b      	ldrh	r3, [r7, #10]
 800343e:	b2db      	uxtb	r3, r3
 8003440:	f043 0301 	orr.w	r3, r3, #1
 8003444:	b2da      	uxtb	r2, r3
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800344c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344e:	6a3a      	ldr	r2, [r7, #32]
 8003450:	4906      	ldr	r1, [pc, #24]	; (800346c <I2C_RequestMemoryRead+0x1cc>)
 8003452:	68f8      	ldr	r0, [r7, #12]
 8003454:	f000 f863 	bl	800351e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d001      	beq.n	8003462 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e000      	b.n	8003464 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003462:	2300      	movs	r3, #0
}
 8003464:	4618      	mov	r0, r3
 8003466:	3718      	adds	r7, #24
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}
 800346c:	00010002 	.word	0x00010002

08003470 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	60b9      	str	r1, [r7, #8]
 800347a:	603b      	str	r3, [r7, #0]
 800347c:	4613      	mov	r3, r2
 800347e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003480:	e025      	b.n	80034ce <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003488:	d021      	beq.n	80034ce <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800348a:	f7fe fe87 	bl	800219c <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	683a      	ldr	r2, [r7, #0]
 8003496:	429a      	cmp	r2, r3
 8003498:	d302      	bcc.n	80034a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d116      	bne.n	80034ce <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2200      	movs	r2, #0
 80034a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2220      	movs	r2, #32
 80034aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ba:	f043 0220 	orr.w	r2, r3, #32
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e023      	b.n	8003516 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	0c1b      	lsrs	r3, r3, #16
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d10d      	bne.n	80034f4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	695b      	ldr	r3, [r3, #20]
 80034de:	43da      	mvns	r2, r3
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	4013      	ands	r3, r2
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	bf0c      	ite	eq
 80034ea:	2301      	moveq	r3, #1
 80034ec:	2300      	movne	r3, #0
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	461a      	mov	r2, r3
 80034f2:	e00c      	b.n	800350e <I2C_WaitOnFlagUntilTimeout+0x9e>
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	699b      	ldr	r3, [r3, #24]
 80034fa:	43da      	mvns	r2, r3
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	4013      	ands	r3, r2
 8003500:	b29b      	uxth	r3, r3
 8003502:	2b00      	cmp	r3, #0
 8003504:	bf0c      	ite	eq
 8003506:	2301      	moveq	r3, #1
 8003508:	2300      	movne	r3, #0
 800350a:	b2db      	uxtb	r3, r3
 800350c:	461a      	mov	r2, r3
 800350e:	79fb      	ldrb	r3, [r7, #7]
 8003510:	429a      	cmp	r2, r3
 8003512:	d0b6      	beq.n	8003482 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	3710      	adds	r7, #16
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}

0800351e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800351e:	b580      	push	{r7, lr}
 8003520:	b084      	sub	sp, #16
 8003522:	af00      	add	r7, sp, #0
 8003524:	60f8      	str	r0, [r7, #12]
 8003526:	60b9      	str	r1, [r7, #8]
 8003528:	607a      	str	r2, [r7, #4]
 800352a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800352c:	e051      	b.n	80035d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	695b      	ldr	r3, [r3, #20]
 8003534:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003538:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800353c:	d123      	bne.n	8003586 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800354c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003556:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2200      	movs	r2, #0
 800355c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2220      	movs	r2, #32
 8003562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003572:	f043 0204 	orr.w	r2, r3, #4
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e046      	b.n	8003614 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800358c:	d021      	beq.n	80035d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800358e:	f7fe fe05 	bl	800219c <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	429a      	cmp	r2, r3
 800359c:	d302      	bcc.n	80035a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d116      	bne.n	80035d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2200      	movs	r2, #0
 80035a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2220      	movs	r2, #32
 80035ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035be:	f043 0220 	orr.w	r2, r3, #32
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e020      	b.n	8003614 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	0c1b      	lsrs	r3, r3, #16
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d10c      	bne.n	80035f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	43da      	mvns	r2, r3
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	4013      	ands	r3, r2
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	bf14      	ite	ne
 80035ee:	2301      	movne	r3, #1
 80035f0:	2300      	moveq	r3, #0
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	e00b      	b.n	800360e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	43da      	mvns	r2, r3
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	4013      	ands	r3, r2
 8003602:	b29b      	uxth	r3, r3
 8003604:	2b00      	cmp	r3, #0
 8003606:	bf14      	ite	ne
 8003608:	2301      	movne	r3, #1
 800360a:	2300      	moveq	r3, #0
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b00      	cmp	r3, #0
 8003610:	d18d      	bne.n	800352e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003612:	2300      	movs	r3, #0
}
 8003614:	4618      	mov	r0, r3
 8003616:	3710      	adds	r7, #16
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003628:	e02d      	b.n	8003686 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800362a:	68f8      	ldr	r0, [r7, #12]
 800362c:	f000 f8ce 	bl	80037cc <I2C_IsAcknowledgeFailed>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d001      	beq.n	800363a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e02d      	b.n	8003696 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003640:	d021      	beq.n	8003686 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003642:	f7fe fdab 	bl	800219c <HAL_GetTick>
 8003646:	4602      	mov	r2, r0
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	68ba      	ldr	r2, [r7, #8]
 800364e:	429a      	cmp	r2, r3
 8003650:	d302      	bcc.n	8003658 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d116      	bne.n	8003686 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2200      	movs	r2, #0
 800365c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2220      	movs	r2, #32
 8003662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003672:	f043 0220 	orr.w	r2, r3, #32
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e007      	b.n	8003696 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	695b      	ldr	r3, [r3, #20]
 800368c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003690:	2b80      	cmp	r3, #128	; 0x80
 8003692:	d1ca      	bne.n	800362a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3710      	adds	r7, #16
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}

0800369e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800369e:	b580      	push	{r7, lr}
 80036a0:	b084      	sub	sp, #16
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	60f8      	str	r0, [r7, #12]
 80036a6:	60b9      	str	r1, [r7, #8]
 80036a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036aa:	e02d      	b.n	8003708 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036ac:	68f8      	ldr	r0, [r7, #12]
 80036ae:	f000 f88d 	bl	80037cc <I2C_IsAcknowledgeFailed>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d001      	beq.n	80036bc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e02d      	b.n	8003718 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036c2:	d021      	beq.n	8003708 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036c4:	f7fe fd6a 	bl	800219c <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	68ba      	ldr	r2, [r7, #8]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d302      	bcc.n	80036da <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d116      	bne.n	8003708 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2220      	movs	r2, #32
 80036e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f4:	f043 0220 	orr.w	r2, r3, #32
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e007      	b.n	8003718 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	695b      	ldr	r3, [r3, #20]
 800370e:	f003 0304 	and.w	r3, r3, #4
 8003712:	2b04      	cmp	r3, #4
 8003714:	d1ca      	bne.n	80036ac <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	3710      	adds	r7, #16
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	60b9      	str	r1, [r7, #8]
 800372a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800372c:	e042      	b.n	80037b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	695b      	ldr	r3, [r3, #20]
 8003734:	f003 0310 	and.w	r3, r3, #16
 8003738:	2b10      	cmp	r3, #16
 800373a:	d119      	bne.n	8003770 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f06f 0210 	mvn.w	r2, #16
 8003744:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2200      	movs	r2, #0
 800374a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2220      	movs	r2, #32
 8003750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2200      	movs	r2, #0
 8003758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e029      	b.n	80037c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003770:	f7fe fd14 	bl	800219c <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	68ba      	ldr	r2, [r7, #8]
 800377c:	429a      	cmp	r2, r3
 800377e:	d302      	bcc.n	8003786 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d116      	bne.n	80037b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2200      	movs	r2, #0
 800378a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2220      	movs	r2, #32
 8003790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2200      	movs	r2, #0
 8003798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a0:	f043 0220 	orr.w	r2, r3, #32
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e007      	b.n	80037c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	695b      	ldr	r3, [r3, #20]
 80037ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037be:	2b40      	cmp	r3, #64	; 0x40
 80037c0:	d1b5      	bne.n	800372e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3710      	adds	r7, #16
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	695b      	ldr	r3, [r3, #20]
 80037da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037e2:	d11b      	bne.n	800381c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80037ec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2220      	movs	r2, #32
 80037f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003808:	f043 0204 	orr.w	r2, r3, #4
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e000      	b.n	800381e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	370c      	adds	r7, #12
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr

0800382a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800382a:	b480      	push	{r7}
 800382c:	b083      	sub	sp, #12
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
 8003832:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800383a:	b2db      	uxtb	r3, r3
 800383c:	2b20      	cmp	r3, #32
 800383e:	d129      	bne.n	8003894 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2224      	movs	r2, #36	; 0x24
 8003844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f022 0201 	bic.w	r2, r2, #1
 8003856:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f022 0210 	bic.w	r2, r2, #16
 8003866:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	683a      	ldr	r2, [r7, #0]
 8003874:	430a      	orrs	r2, r1
 8003876:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f042 0201 	orr.w	r2, r2, #1
 8003886:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2220      	movs	r2, #32
 800388c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003890:	2300      	movs	r3, #0
 8003892:	e000      	b.n	8003896 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003894:	2302      	movs	r3, #2
  }
}
 8003896:	4618      	mov	r0, r3
 8003898:	370c      	adds	r7, #12
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr

080038a2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80038a2:	b480      	push	{r7}
 80038a4:	b085      	sub	sp, #20
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
 80038aa:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80038ac:	2300      	movs	r3, #0
 80038ae:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	2b20      	cmp	r3, #32
 80038ba:	d12a      	bne.n	8003912 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2224      	movs	r2, #36	; 0x24
 80038c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f022 0201 	bic.w	r2, r2, #1
 80038d2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038da:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80038dc:	89fb      	ldrh	r3, [r7, #14]
 80038de:	f023 030f 	bic.w	r3, r3, #15
 80038e2:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	b29a      	uxth	r2, r3
 80038e8:	89fb      	ldrh	r3, [r7, #14]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	89fa      	ldrh	r2, [r7, #14]
 80038f4:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f042 0201 	orr.w	r2, r2, #1
 8003904:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2220      	movs	r2, #32
 800390a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800390e:	2300      	movs	r3, #0
 8003910:	e000      	b.n	8003914 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003912:	2302      	movs	r3, #2
  }
}
 8003914:	4618      	mov	r0, r3
 8003916:	3714      	adds	r7, #20
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003926:	2300      	movs	r3, #0
 8003928:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800392a:	2300      	movs	r3, #0
 800392c:	603b      	str	r3, [r7, #0]
 800392e:	4b20      	ldr	r3, [pc, #128]	; (80039b0 <HAL_PWREx_EnableOverDrive+0x90>)
 8003930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003932:	4a1f      	ldr	r2, [pc, #124]	; (80039b0 <HAL_PWREx_EnableOverDrive+0x90>)
 8003934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003938:	6413      	str	r3, [r2, #64]	; 0x40
 800393a:	4b1d      	ldr	r3, [pc, #116]	; (80039b0 <HAL_PWREx_EnableOverDrive+0x90>)
 800393c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003942:	603b      	str	r3, [r7, #0]
 8003944:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003946:	4b1b      	ldr	r3, [pc, #108]	; (80039b4 <HAL_PWREx_EnableOverDrive+0x94>)
 8003948:	2201      	movs	r2, #1
 800394a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800394c:	f7fe fc26 	bl	800219c <HAL_GetTick>
 8003950:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003952:	e009      	b.n	8003968 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003954:	f7fe fc22 	bl	800219c <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003962:	d901      	bls.n	8003968 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e01f      	b.n	80039a8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003968:	4b13      	ldr	r3, [pc, #76]	; (80039b8 <HAL_PWREx_EnableOverDrive+0x98>)
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003970:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003974:	d1ee      	bne.n	8003954 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003976:	4b11      	ldr	r3, [pc, #68]	; (80039bc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003978:	2201      	movs	r2, #1
 800397a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800397c:	f7fe fc0e 	bl	800219c <HAL_GetTick>
 8003980:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003982:	e009      	b.n	8003998 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003984:	f7fe fc0a 	bl	800219c <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003992:	d901      	bls.n	8003998 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e007      	b.n	80039a8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003998:	4b07      	ldr	r3, [pc, #28]	; (80039b8 <HAL_PWREx_EnableOverDrive+0x98>)
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039a4:	d1ee      	bne.n	8003984 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80039a6:	2300      	movs	r3, #0
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3708      	adds	r7, #8
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	40023800 	.word	0x40023800
 80039b4:	420e0040 	.word	0x420e0040
 80039b8:	40007000 	.word	0x40007000
 80039bc:	420e0044 	.word	0x420e0044

080039c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b086      	sub	sp, #24
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d101      	bne.n	80039d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e25b      	b.n	8003e8a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d075      	beq.n	8003aca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039de:	4ba3      	ldr	r3, [pc, #652]	; (8003c6c <HAL_RCC_OscConfig+0x2ac>)
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	f003 030c 	and.w	r3, r3, #12
 80039e6:	2b04      	cmp	r3, #4
 80039e8:	d00c      	beq.n	8003a04 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039ea:	4ba0      	ldr	r3, [pc, #640]	; (8003c6c <HAL_RCC_OscConfig+0x2ac>)
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039f2:	2b08      	cmp	r3, #8
 80039f4:	d112      	bne.n	8003a1c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039f6:	4b9d      	ldr	r3, [pc, #628]	; (8003c6c <HAL_RCC_OscConfig+0x2ac>)
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a02:	d10b      	bne.n	8003a1c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a04:	4b99      	ldr	r3, [pc, #612]	; (8003c6c <HAL_RCC_OscConfig+0x2ac>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d05b      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x108>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d157      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e236      	b.n	8003e8a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a24:	d106      	bne.n	8003a34 <HAL_RCC_OscConfig+0x74>
 8003a26:	4b91      	ldr	r3, [pc, #580]	; (8003c6c <HAL_RCC_OscConfig+0x2ac>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a90      	ldr	r2, [pc, #576]	; (8003c6c <HAL_RCC_OscConfig+0x2ac>)
 8003a2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a30:	6013      	str	r3, [r2, #0]
 8003a32:	e01d      	b.n	8003a70 <HAL_RCC_OscConfig+0xb0>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a3c:	d10c      	bne.n	8003a58 <HAL_RCC_OscConfig+0x98>
 8003a3e:	4b8b      	ldr	r3, [pc, #556]	; (8003c6c <HAL_RCC_OscConfig+0x2ac>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a8a      	ldr	r2, [pc, #552]	; (8003c6c <HAL_RCC_OscConfig+0x2ac>)
 8003a44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a48:	6013      	str	r3, [r2, #0]
 8003a4a:	4b88      	ldr	r3, [pc, #544]	; (8003c6c <HAL_RCC_OscConfig+0x2ac>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a87      	ldr	r2, [pc, #540]	; (8003c6c <HAL_RCC_OscConfig+0x2ac>)
 8003a50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a54:	6013      	str	r3, [r2, #0]
 8003a56:	e00b      	b.n	8003a70 <HAL_RCC_OscConfig+0xb0>
 8003a58:	4b84      	ldr	r3, [pc, #528]	; (8003c6c <HAL_RCC_OscConfig+0x2ac>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a83      	ldr	r2, [pc, #524]	; (8003c6c <HAL_RCC_OscConfig+0x2ac>)
 8003a5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a62:	6013      	str	r3, [r2, #0]
 8003a64:	4b81      	ldr	r3, [pc, #516]	; (8003c6c <HAL_RCC_OscConfig+0x2ac>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a80      	ldr	r2, [pc, #512]	; (8003c6c <HAL_RCC_OscConfig+0x2ac>)
 8003a6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d013      	beq.n	8003aa0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a78:	f7fe fb90 	bl	800219c <HAL_GetTick>
 8003a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a7e:	e008      	b.n	8003a92 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a80:	f7fe fb8c 	bl	800219c <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	2b64      	cmp	r3, #100	; 0x64
 8003a8c:	d901      	bls.n	8003a92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e1fb      	b.n	8003e8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a92:	4b76      	ldr	r3, [pc, #472]	; (8003c6c <HAL_RCC_OscConfig+0x2ac>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d0f0      	beq.n	8003a80 <HAL_RCC_OscConfig+0xc0>
 8003a9e:	e014      	b.n	8003aca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aa0:	f7fe fb7c 	bl	800219c <HAL_GetTick>
 8003aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003aa6:	e008      	b.n	8003aba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003aa8:	f7fe fb78 	bl	800219c <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	2b64      	cmp	r3, #100	; 0x64
 8003ab4:	d901      	bls.n	8003aba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e1e7      	b.n	8003e8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003aba:	4b6c      	ldr	r3, [pc, #432]	; (8003c6c <HAL_RCC_OscConfig+0x2ac>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1f0      	bne.n	8003aa8 <HAL_RCC_OscConfig+0xe8>
 8003ac6:	e000      	b.n	8003aca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ac8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d063      	beq.n	8003b9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ad6:	4b65      	ldr	r3, [pc, #404]	; (8003c6c <HAL_RCC_OscConfig+0x2ac>)
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f003 030c 	and.w	r3, r3, #12
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00b      	beq.n	8003afa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ae2:	4b62      	ldr	r3, [pc, #392]	; (8003c6c <HAL_RCC_OscConfig+0x2ac>)
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003aea:	2b08      	cmp	r3, #8
 8003aec:	d11c      	bne.n	8003b28 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003aee:	4b5f      	ldr	r3, [pc, #380]	; (8003c6c <HAL_RCC_OscConfig+0x2ac>)
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d116      	bne.n	8003b28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003afa:	4b5c      	ldr	r3, [pc, #368]	; (8003c6c <HAL_RCC_OscConfig+0x2ac>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0302 	and.w	r3, r3, #2
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d005      	beq.n	8003b12 <HAL_RCC_OscConfig+0x152>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d001      	beq.n	8003b12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e1bb      	b.n	8003e8a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b12:	4b56      	ldr	r3, [pc, #344]	; (8003c6c <HAL_RCC_OscConfig+0x2ac>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	00db      	lsls	r3, r3, #3
 8003b20:	4952      	ldr	r1, [pc, #328]	; (8003c6c <HAL_RCC_OscConfig+0x2ac>)
 8003b22:	4313      	orrs	r3, r2
 8003b24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b26:	e03a      	b.n	8003b9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d020      	beq.n	8003b72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b30:	4b4f      	ldr	r3, [pc, #316]	; (8003c70 <HAL_RCC_OscConfig+0x2b0>)
 8003b32:	2201      	movs	r2, #1
 8003b34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b36:	f7fe fb31 	bl	800219c <HAL_GetTick>
 8003b3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b3c:	e008      	b.n	8003b50 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b3e:	f7fe fb2d 	bl	800219c <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d901      	bls.n	8003b50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e19c      	b.n	8003e8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b50:	4b46      	ldr	r3, [pc, #280]	; (8003c6c <HAL_RCC_OscConfig+0x2ac>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0302 	and.w	r3, r3, #2
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d0f0      	beq.n	8003b3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b5c:	4b43      	ldr	r3, [pc, #268]	; (8003c6c <HAL_RCC_OscConfig+0x2ac>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	691b      	ldr	r3, [r3, #16]
 8003b68:	00db      	lsls	r3, r3, #3
 8003b6a:	4940      	ldr	r1, [pc, #256]	; (8003c6c <HAL_RCC_OscConfig+0x2ac>)
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	600b      	str	r3, [r1, #0]
 8003b70:	e015      	b.n	8003b9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b72:	4b3f      	ldr	r3, [pc, #252]	; (8003c70 <HAL_RCC_OscConfig+0x2b0>)
 8003b74:	2200      	movs	r2, #0
 8003b76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b78:	f7fe fb10 	bl	800219c <HAL_GetTick>
 8003b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b7e:	e008      	b.n	8003b92 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b80:	f7fe fb0c 	bl	800219c <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e17b      	b.n	8003e8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b92:	4b36      	ldr	r3, [pc, #216]	; (8003c6c <HAL_RCC_OscConfig+0x2ac>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 0302 	and.w	r3, r3, #2
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d1f0      	bne.n	8003b80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0308 	and.w	r3, r3, #8
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d030      	beq.n	8003c0c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	695b      	ldr	r3, [r3, #20]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d016      	beq.n	8003be0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bb2:	4b30      	ldr	r3, [pc, #192]	; (8003c74 <HAL_RCC_OscConfig+0x2b4>)
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bb8:	f7fe faf0 	bl	800219c <HAL_GetTick>
 8003bbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bbe:	e008      	b.n	8003bd2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bc0:	f7fe faec 	bl	800219c <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	2b02      	cmp	r3, #2
 8003bcc:	d901      	bls.n	8003bd2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e15b      	b.n	8003e8a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bd2:	4b26      	ldr	r3, [pc, #152]	; (8003c6c <HAL_RCC_OscConfig+0x2ac>)
 8003bd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bd6:	f003 0302 	and.w	r3, r3, #2
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d0f0      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x200>
 8003bde:	e015      	b.n	8003c0c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003be0:	4b24      	ldr	r3, [pc, #144]	; (8003c74 <HAL_RCC_OscConfig+0x2b4>)
 8003be2:	2200      	movs	r2, #0
 8003be4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003be6:	f7fe fad9 	bl	800219c <HAL_GetTick>
 8003bea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bec:	e008      	b.n	8003c00 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bee:	f7fe fad5 	bl	800219c <HAL_GetTick>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d901      	bls.n	8003c00 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	e144      	b.n	8003e8a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c00:	4b1a      	ldr	r3, [pc, #104]	; (8003c6c <HAL_RCC_OscConfig+0x2ac>)
 8003c02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c04:	f003 0302 	and.w	r3, r3, #2
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d1f0      	bne.n	8003bee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0304 	and.w	r3, r3, #4
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	f000 80a0 	beq.w	8003d5a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c1e:	4b13      	ldr	r3, [pc, #76]	; (8003c6c <HAL_RCC_OscConfig+0x2ac>)
 8003c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d10f      	bne.n	8003c4a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	60bb      	str	r3, [r7, #8]
 8003c2e:	4b0f      	ldr	r3, [pc, #60]	; (8003c6c <HAL_RCC_OscConfig+0x2ac>)
 8003c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c32:	4a0e      	ldr	r2, [pc, #56]	; (8003c6c <HAL_RCC_OscConfig+0x2ac>)
 8003c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c38:	6413      	str	r3, [r2, #64]	; 0x40
 8003c3a:	4b0c      	ldr	r3, [pc, #48]	; (8003c6c <HAL_RCC_OscConfig+0x2ac>)
 8003c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c42:	60bb      	str	r3, [r7, #8]
 8003c44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c46:	2301      	movs	r3, #1
 8003c48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c4a:	4b0b      	ldr	r3, [pc, #44]	; (8003c78 <HAL_RCC_OscConfig+0x2b8>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d121      	bne.n	8003c9a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c56:	4b08      	ldr	r3, [pc, #32]	; (8003c78 <HAL_RCC_OscConfig+0x2b8>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a07      	ldr	r2, [pc, #28]	; (8003c78 <HAL_RCC_OscConfig+0x2b8>)
 8003c5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c62:	f7fe fa9b 	bl	800219c <HAL_GetTick>
 8003c66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c68:	e011      	b.n	8003c8e <HAL_RCC_OscConfig+0x2ce>
 8003c6a:	bf00      	nop
 8003c6c:	40023800 	.word	0x40023800
 8003c70:	42470000 	.word	0x42470000
 8003c74:	42470e80 	.word	0x42470e80
 8003c78:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c7c:	f7fe fa8e 	bl	800219c <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d901      	bls.n	8003c8e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e0fd      	b.n	8003e8a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c8e:	4b81      	ldr	r3, [pc, #516]	; (8003e94 <HAL_RCC_OscConfig+0x4d4>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d0f0      	beq.n	8003c7c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d106      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x2f0>
 8003ca2:	4b7d      	ldr	r3, [pc, #500]	; (8003e98 <HAL_RCC_OscConfig+0x4d8>)
 8003ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca6:	4a7c      	ldr	r2, [pc, #496]	; (8003e98 <HAL_RCC_OscConfig+0x4d8>)
 8003ca8:	f043 0301 	orr.w	r3, r3, #1
 8003cac:	6713      	str	r3, [r2, #112]	; 0x70
 8003cae:	e01c      	b.n	8003cea <HAL_RCC_OscConfig+0x32a>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	2b05      	cmp	r3, #5
 8003cb6:	d10c      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x312>
 8003cb8:	4b77      	ldr	r3, [pc, #476]	; (8003e98 <HAL_RCC_OscConfig+0x4d8>)
 8003cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cbc:	4a76      	ldr	r2, [pc, #472]	; (8003e98 <HAL_RCC_OscConfig+0x4d8>)
 8003cbe:	f043 0304 	orr.w	r3, r3, #4
 8003cc2:	6713      	str	r3, [r2, #112]	; 0x70
 8003cc4:	4b74      	ldr	r3, [pc, #464]	; (8003e98 <HAL_RCC_OscConfig+0x4d8>)
 8003cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cc8:	4a73      	ldr	r2, [pc, #460]	; (8003e98 <HAL_RCC_OscConfig+0x4d8>)
 8003cca:	f043 0301 	orr.w	r3, r3, #1
 8003cce:	6713      	str	r3, [r2, #112]	; 0x70
 8003cd0:	e00b      	b.n	8003cea <HAL_RCC_OscConfig+0x32a>
 8003cd2:	4b71      	ldr	r3, [pc, #452]	; (8003e98 <HAL_RCC_OscConfig+0x4d8>)
 8003cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cd6:	4a70      	ldr	r2, [pc, #448]	; (8003e98 <HAL_RCC_OscConfig+0x4d8>)
 8003cd8:	f023 0301 	bic.w	r3, r3, #1
 8003cdc:	6713      	str	r3, [r2, #112]	; 0x70
 8003cde:	4b6e      	ldr	r3, [pc, #440]	; (8003e98 <HAL_RCC_OscConfig+0x4d8>)
 8003ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce2:	4a6d      	ldr	r2, [pc, #436]	; (8003e98 <HAL_RCC_OscConfig+0x4d8>)
 8003ce4:	f023 0304 	bic.w	r3, r3, #4
 8003ce8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d015      	beq.n	8003d1e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cf2:	f7fe fa53 	bl	800219c <HAL_GetTick>
 8003cf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cf8:	e00a      	b.n	8003d10 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cfa:	f7fe fa4f 	bl	800219c <HAL_GetTick>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d901      	bls.n	8003d10 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e0bc      	b.n	8003e8a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d10:	4b61      	ldr	r3, [pc, #388]	; (8003e98 <HAL_RCC_OscConfig+0x4d8>)
 8003d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d14:	f003 0302 	and.w	r3, r3, #2
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d0ee      	beq.n	8003cfa <HAL_RCC_OscConfig+0x33a>
 8003d1c:	e014      	b.n	8003d48 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d1e:	f7fe fa3d 	bl	800219c <HAL_GetTick>
 8003d22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d24:	e00a      	b.n	8003d3c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d26:	f7fe fa39 	bl	800219c <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d901      	bls.n	8003d3c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	e0a6      	b.n	8003e8a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d3c:	4b56      	ldr	r3, [pc, #344]	; (8003e98 <HAL_RCC_OscConfig+0x4d8>)
 8003d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d40:	f003 0302 	and.w	r3, r3, #2
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d1ee      	bne.n	8003d26 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d48:	7dfb      	ldrb	r3, [r7, #23]
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d105      	bne.n	8003d5a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d4e:	4b52      	ldr	r3, [pc, #328]	; (8003e98 <HAL_RCC_OscConfig+0x4d8>)
 8003d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d52:	4a51      	ldr	r2, [pc, #324]	; (8003e98 <HAL_RCC_OscConfig+0x4d8>)
 8003d54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d58:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	699b      	ldr	r3, [r3, #24]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	f000 8092 	beq.w	8003e88 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d64:	4b4c      	ldr	r3, [pc, #304]	; (8003e98 <HAL_RCC_OscConfig+0x4d8>)
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	f003 030c 	and.w	r3, r3, #12
 8003d6c:	2b08      	cmp	r3, #8
 8003d6e:	d05c      	beq.n	8003e2a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	699b      	ldr	r3, [r3, #24]
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d141      	bne.n	8003dfc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d78:	4b48      	ldr	r3, [pc, #288]	; (8003e9c <HAL_RCC_OscConfig+0x4dc>)
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d7e:	f7fe fa0d 	bl	800219c <HAL_GetTick>
 8003d82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d84:	e008      	b.n	8003d98 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d86:	f7fe fa09 	bl	800219c <HAL_GetTick>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	2b02      	cmp	r3, #2
 8003d92:	d901      	bls.n	8003d98 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e078      	b.n	8003e8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d98:	4b3f      	ldr	r3, [pc, #252]	; (8003e98 <HAL_RCC_OscConfig+0x4d8>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d1f0      	bne.n	8003d86 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	69da      	ldr	r2, [r3, #28]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a1b      	ldr	r3, [r3, #32]
 8003dac:	431a      	orrs	r2, r3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db2:	019b      	lsls	r3, r3, #6
 8003db4:	431a      	orrs	r2, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dba:	085b      	lsrs	r3, r3, #1
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	041b      	lsls	r3, r3, #16
 8003dc0:	431a      	orrs	r2, r3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc6:	061b      	lsls	r3, r3, #24
 8003dc8:	4933      	ldr	r1, [pc, #204]	; (8003e98 <HAL_RCC_OscConfig+0x4d8>)
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dce:	4b33      	ldr	r3, [pc, #204]	; (8003e9c <HAL_RCC_OscConfig+0x4dc>)
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dd4:	f7fe f9e2 	bl	800219c <HAL_GetTick>
 8003dd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dda:	e008      	b.n	8003dee <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ddc:	f7fe f9de 	bl	800219c <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d901      	bls.n	8003dee <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e04d      	b.n	8003e8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dee:	4b2a      	ldr	r3, [pc, #168]	; (8003e98 <HAL_RCC_OscConfig+0x4d8>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d0f0      	beq.n	8003ddc <HAL_RCC_OscConfig+0x41c>
 8003dfa:	e045      	b.n	8003e88 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dfc:	4b27      	ldr	r3, [pc, #156]	; (8003e9c <HAL_RCC_OscConfig+0x4dc>)
 8003dfe:	2200      	movs	r2, #0
 8003e00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e02:	f7fe f9cb 	bl	800219c <HAL_GetTick>
 8003e06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e08:	e008      	b.n	8003e1c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e0a:	f7fe f9c7 	bl	800219c <HAL_GetTick>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d901      	bls.n	8003e1c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003e18:	2303      	movs	r3, #3
 8003e1a:	e036      	b.n	8003e8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e1c:	4b1e      	ldr	r3, [pc, #120]	; (8003e98 <HAL_RCC_OscConfig+0x4d8>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d1f0      	bne.n	8003e0a <HAL_RCC_OscConfig+0x44a>
 8003e28:	e02e      	b.n	8003e88 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d101      	bne.n	8003e36 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e029      	b.n	8003e8a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e36:	4b18      	ldr	r3, [pc, #96]	; (8003e98 <HAL_RCC_OscConfig+0x4d8>)
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	69db      	ldr	r3, [r3, #28]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d11c      	bne.n	8003e84 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d115      	bne.n	8003e84 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003e58:	68fa      	ldr	r2, [r7, #12]
 8003e5a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e5e:	4013      	ands	r3, r2
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d10d      	bne.n	8003e84 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d106      	bne.n	8003e84 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d001      	beq.n	8003e88 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e000      	b.n	8003e8a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003e88:	2300      	movs	r3, #0
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3718      	adds	r7, #24
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	40007000 	.word	0x40007000
 8003e98:	40023800 	.word	0x40023800
 8003e9c:	42470060 	.word	0x42470060

08003ea0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d101      	bne.n	8003eb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e0cc      	b.n	800404e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003eb4:	4b68      	ldr	r3, [pc, #416]	; (8004058 <HAL_RCC_ClockConfig+0x1b8>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 030f 	and.w	r3, r3, #15
 8003ebc:	683a      	ldr	r2, [r7, #0]
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d90c      	bls.n	8003edc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ec2:	4b65      	ldr	r3, [pc, #404]	; (8004058 <HAL_RCC_ClockConfig+0x1b8>)
 8003ec4:	683a      	ldr	r2, [r7, #0]
 8003ec6:	b2d2      	uxtb	r2, r2
 8003ec8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eca:	4b63      	ldr	r3, [pc, #396]	; (8004058 <HAL_RCC_ClockConfig+0x1b8>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 030f 	and.w	r3, r3, #15
 8003ed2:	683a      	ldr	r2, [r7, #0]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d001      	beq.n	8003edc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e0b8      	b.n	800404e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0302 	and.w	r3, r3, #2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d020      	beq.n	8003f2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0304 	and.w	r3, r3, #4
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d005      	beq.n	8003f00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ef4:	4b59      	ldr	r3, [pc, #356]	; (800405c <HAL_RCC_ClockConfig+0x1bc>)
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	4a58      	ldr	r2, [pc, #352]	; (800405c <HAL_RCC_ClockConfig+0x1bc>)
 8003efa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003efe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0308 	and.w	r3, r3, #8
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d005      	beq.n	8003f18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f0c:	4b53      	ldr	r3, [pc, #332]	; (800405c <HAL_RCC_ClockConfig+0x1bc>)
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	4a52      	ldr	r2, [pc, #328]	; (800405c <HAL_RCC_ClockConfig+0x1bc>)
 8003f12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f18:	4b50      	ldr	r3, [pc, #320]	; (800405c <HAL_RCC_ClockConfig+0x1bc>)
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	494d      	ldr	r1, [pc, #308]	; (800405c <HAL_RCC_ClockConfig+0x1bc>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0301 	and.w	r3, r3, #1
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d044      	beq.n	8003fc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d107      	bne.n	8003f4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f3e:	4b47      	ldr	r3, [pc, #284]	; (800405c <HAL_RCC_ClockConfig+0x1bc>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d119      	bne.n	8003f7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e07f      	b.n	800404e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d003      	beq.n	8003f5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f5a:	2b03      	cmp	r3, #3
 8003f5c:	d107      	bne.n	8003f6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f5e:	4b3f      	ldr	r3, [pc, #252]	; (800405c <HAL_RCC_ClockConfig+0x1bc>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d109      	bne.n	8003f7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e06f      	b.n	800404e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f6e:	4b3b      	ldr	r3, [pc, #236]	; (800405c <HAL_RCC_ClockConfig+0x1bc>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d101      	bne.n	8003f7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e067      	b.n	800404e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f7e:	4b37      	ldr	r3, [pc, #220]	; (800405c <HAL_RCC_ClockConfig+0x1bc>)
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f023 0203 	bic.w	r2, r3, #3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	4934      	ldr	r1, [pc, #208]	; (800405c <HAL_RCC_ClockConfig+0x1bc>)
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f90:	f7fe f904 	bl	800219c <HAL_GetTick>
 8003f94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f96:	e00a      	b.n	8003fae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f98:	f7fe f900 	bl	800219c <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d901      	bls.n	8003fae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e04f      	b.n	800404e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fae:	4b2b      	ldr	r3, [pc, #172]	; (800405c <HAL_RCC_ClockConfig+0x1bc>)
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	f003 020c 	and.w	r2, r3, #12
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d1eb      	bne.n	8003f98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fc0:	4b25      	ldr	r3, [pc, #148]	; (8004058 <HAL_RCC_ClockConfig+0x1b8>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 030f 	and.w	r3, r3, #15
 8003fc8:	683a      	ldr	r2, [r7, #0]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d20c      	bcs.n	8003fe8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fce:	4b22      	ldr	r3, [pc, #136]	; (8004058 <HAL_RCC_ClockConfig+0x1b8>)
 8003fd0:	683a      	ldr	r2, [r7, #0]
 8003fd2:	b2d2      	uxtb	r2, r2
 8003fd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fd6:	4b20      	ldr	r3, [pc, #128]	; (8004058 <HAL_RCC_ClockConfig+0x1b8>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 030f 	and.w	r3, r3, #15
 8003fde:	683a      	ldr	r2, [r7, #0]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d001      	beq.n	8003fe8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e032      	b.n	800404e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0304 	and.w	r3, r3, #4
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d008      	beq.n	8004006 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ff4:	4b19      	ldr	r3, [pc, #100]	; (800405c <HAL_RCC_ClockConfig+0x1bc>)
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	4916      	ldr	r1, [pc, #88]	; (800405c <HAL_RCC_ClockConfig+0x1bc>)
 8004002:	4313      	orrs	r3, r2
 8004004:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0308 	and.w	r3, r3, #8
 800400e:	2b00      	cmp	r3, #0
 8004010:	d009      	beq.n	8004026 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004012:	4b12      	ldr	r3, [pc, #72]	; (800405c <HAL_RCC_ClockConfig+0x1bc>)
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	00db      	lsls	r3, r3, #3
 8004020:	490e      	ldr	r1, [pc, #56]	; (800405c <HAL_RCC_ClockConfig+0x1bc>)
 8004022:	4313      	orrs	r3, r2
 8004024:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004026:	f000 f821 	bl	800406c <HAL_RCC_GetSysClockFreq>
 800402a:	4601      	mov	r1, r0
 800402c:	4b0b      	ldr	r3, [pc, #44]	; (800405c <HAL_RCC_ClockConfig+0x1bc>)
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	091b      	lsrs	r3, r3, #4
 8004032:	f003 030f 	and.w	r3, r3, #15
 8004036:	4a0a      	ldr	r2, [pc, #40]	; (8004060 <HAL_RCC_ClockConfig+0x1c0>)
 8004038:	5cd3      	ldrb	r3, [r2, r3]
 800403a:	fa21 f303 	lsr.w	r3, r1, r3
 800403e:	4a09      	ldr	r2, [pc, #36]	; (8004064 <HAL_RCC_ClockConfig+0x1c4>)
 8004040:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004042:	4b09      	ldr	r3, [pc, #36]	; (8004068 <HAL_RCC_ClockConfig+0x1c8>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4618      	mov	r0, r3
 8004048:	f7fe f864 	bl	8002114 <HAL_InitTick>

  return HAL_OK;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3710      	adds	r7, #16
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	40023c00 	.word	0x40023c00
 800405c:	40023800 	.word	0x40023800
 8004060:	08006514 	.word	0x08006514
 8004064:	20000008 	.word	0x20000008
 8004068:	2000000c 	.word	0x2000000c

0800406c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800406c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800406e:	b085      	sub	sp, #20
 8004070:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004072:	2300      	movs	r3, #0
 8004074:	607b      	str	r3, [r7, #4]
 8004076:	2300      	movs	r3, #0
 8004078:	60fb      	str	r3, [r7, #12]
 800407a:	2300      	movs	r3, #0
 800407c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800407e:	2300      	movs	r3, #0
 8004080:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004082:	4b63      	ldr	r3, [pc, #396]	; (8004210 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f003 030c 	and.w	r3, r3, #12
 800408a:	2b04      	cmp	r3, #4
 800408c:	d007      	beq.n	800409e <HAL_RCC_GetSysClockFreq+0x32>
 800408e:	2b08      	cmp	r3, #8
 8004090:	d008      	beq.n	80040a4 <HAL_RCC_GetSysClockFreq+0x38>
 8004092:	2b00      	cmp	r3, #0
 8004094:	f040 80b4 	bne.w	8004200 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004098:	4b5e      	ldr	r3, [pc, #376]	; (8004214 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800409a:	60bb      	str	r3, [r7, #8]
       break;
 800409c:	e0b3      	b.n	8004206 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800409e:	4b5e      	ldr	r3, [pc, #376]	; (8004218 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80040a0:	60bb      	str	r3, [r7, #8]
      break;
 80040a2:	e0b0      	b.n	8004206 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040a4:	4b5a      	ldr	r3, [pc, #360]	; (8004210 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040ac:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040ae:	4b58      	ldr	r3, [pc, #352]	; (8004210 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d04a      	beq.n	8004150 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040ba:	4b55      	ldr	r3, [pc, #340]	; (8004210 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	099b      	lsrs	r3, r3, #6
 80040c0:	f04f 0400 	mov.w	r4, #0
 80040c4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80040c8:	f04f 0200 	mov.w	r2, #0
 80040cc:	ea03 0501 	and.w	r5, r3, r1
 80040d0:	ea04 0602 	and.w	r6, r4, r2
 80040d4:	4629      	mov	r1, r5
 80040d6:	4632      	mov	r2, r6
 80040d8:	f04f 0300 	mov.w	r3, #0
 80040dc:	f04f 0400 	mov.w	r4, #0
 80040e0:	0154      	lsls	r4, r2, #5
 80040e2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80040e6:	014b      	lsls	r3, r1, #5
 80040e8:	4619      	mov	r1, r3
 80040ea:	4622      	mov	r2, r4
 80040ec:	1b49      	subs	r1, r1, r5
 80040ee:	eb62 0206 	sbc.w	r2, r2, r6
 80040f2:	f04f 0300 	mov.w	r3, #0
 80040f6:	f04f 0400 	mov.w	r4, #0
 80040fa:	0194      	lsls	r4, r2, #6
 80040fc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004100:	018b      	lsls	r3, r1, #6
 8004102:	1a5b      	subs	r3, r3, r1
 8004104:	eb64 0402 	sbc.w	r4, r4, r2
 8004108:	f04f 0100 	mov.w	r1, #0
 800410c:	f04f 0200 	mov.w	r2, #0
 8004110:	00e2      	lsls	r2, r4, #3
 8004112:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004116:	00d9      	lsls	r1, r3, #3
 8004118:	460b      	mov	r3, r1
 800411a:	4614      	mov	r4, r2
 800411c:	195b      	adds	r3, r3, r5
 800411e:	eb44 0406 	adc.w	r4, r4, r6
 8004122:	f04f 0100 	mov.w	r1, #0
 8004126:	f04f 0200 	mov.w	r2, #0
 800412a:	0262      	lsls	r2, r4, #9
 800412c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004130:	0259      	lsls	r1, r3, #9
 8004132:	460b      	mov	r3, r1
 8004134:	4614      	mov	r4, r2
 8004136:	4618      	mov	r0, r3
 8004138:	4621      	mov	r1, r4
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f04f 0400 	mov.w	r4, #0
 8004140:	461a      	mov	r2, r3
 8004142:	4623      	mov	r3, r4
 8004144:	f7fc fc72 	bl	8000a2c <__aeabi_uldivmod>
 8004148:	4603      	mov	r3, r0
 800414a:	460c      	mov	r4, r1
 800414c:	60fb      	str	r3, [r7, #12]
 800414e:	e049      	b.n	80041e4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004150:	4b2f      	ldr	r3, [pc, #188]	; (8004210 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	099b      	lsrs	r3, r3, #6
 8004156:	f04f 0400 	mov.w	r4, #0
 800415a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800415e:	f04f 0200 	mov.w	r2, #0
 8004162:	ea03 0501 	and.w	r5, r3, r1
 8004166:	ea04 0602 	and.w	r6, r4, r2
 800416a:	4629      	mov	r1, r5
 800416c:	4632      	mov	r2, r6
 800416e:	f04f 0300 	mov.w	r3, #0
 8004172:	f04f 0400 	mov.w	r4, #0
 8004176:	0154      	lsls	r4, r2, #5
 8004178:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800417c:	014b      	lsls	r3, r1, #5
 800417e:	4619      	mov	r1, r3
 8004180:	4622      	mov	r2, r4
 8004182:	1b49      	subs	r1, r1, r5
 8004184:	eb62 0206 	sbc.w	r2, r2, r6
 8004188:	f04f 0300 	mov.w	r3, #0
 800418c:	f04f 0400 	mov.w	r4, #0
 8004190:	0194      	lsls	r4, r2, #6
 8004192:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004196:	018b      	lsls	r3, r1, #6
 8004198:	1a5b      	subs	r3, r3, r1
 800419a:	eb64 0402 	sbc.w	r4, r4, r2
 800419e:	f04f 0100 	mov.w	r1, #0
 80041a2:	f04f 0200 	mov.w	r2, #0
 80041a6:	00e2      	lsls	r2, r4, #3
 80041a8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80041ac:	00d9      	lsls	r1, r3, #3
 80041ae:	460b      	mov	r3, r1
 80041b0:	4614      	mov	r4, r2
 80041b2:	195b      	adds	r3, r3, r5
 80041b4:	eb44 0406 	adc.w	r4, r4, r6
 80041b8:	f04f 0100 	mov.w	r1, #0
 80041bc:	f04f 0200 	mov.w	r2, #0
 80041c0:	02a2      	lsls	r2, r4, #10
 80041c2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80041c6:	0299      	lsls	r1, r3, #10
 80041c8:	460b      	mov	r3, r1
 80041ca:	4614      	mov	r4, r2
 80041cc:	4618      	mov	r0, r3
 80041ce:	4621      	mov	r1, r4
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f04f 0400 	mov.w	r4, #0
 80041d6:	461a      	mov	r2, r3
 80041d8:	4623      	mov	r3, r4
 80041da:	f7fc fc27 	bl	8000a2c <__aeabi_uldivmod>
 80041de:	4603      	mov	r3, r0
 80041e0:	460c      	mov	r4, r1
 80041e2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80041e4:	4b0a      	ldr	r3, [pc, #40]	; (8004210 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	0c1b      	lsrs	r3, r3, #16
 80041ea:	f003 0303 	and.w	r3, r3, #3
 80041ee:	3301      	adds	r3, #1
 80041f0:	005b      	lsls	r3, r3, #1
 80041f2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80041f4:	68fa      	ldr	r2, [r7, #12]
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041fc:	60bb      	str	r3, [r7, #8]
      break;
 80041fe:	e002      	b.n	8004206 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004200:	4b04      	ldr	r3, [pc, #16]	; (8004214 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004202:	60bb      	str	r3, [r7, #8]
      break;
 8004204:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004206:	68bb      	ldr	r3, [r7, #8]
}
 8004208:	4618      	mov	r0, r3
 800420a:	3714      	adds	r7, #20
 800420c:	46bd      	mov	sp, r7
 800420e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004210:	40023800 	.word	0x40023800
 8004214:	00f42400 	.word	0x00f42400
 8004218:	007a1200 	.word	0x007a1200

0800421c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800421c:	b480      	push	{r7}
 800421e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004220:	4b03      	ldr	r3, [pc, #12]	; (8004230 <HAL_RCC_GetHCLKFreq+0x14>)
 8004222:	681b      	ldr	r3, [r3, #0]
}
 8004224:	4618      	mov	r0, r3
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr
 800422e:	bf00      	nop
 8004230:	20000008 	.word	0x20000008

08004234 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004238:	f7ff fff0 	bl	800421c <HAL_RCC_GetHCLKFreq>
 800423c:	4601      	mov	r1, r0
 800423e:	4b05      	ldr	r3, [pc, #20]	; (8004254 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	0a9b      	lsrs	r3, r3, #10
 8004244:	f003 0307 	and.w	r3, r3, #7
 8004248:	4a03      	ldr	r2, [pc, #12]	; (8004258 <HAL_RCC_GetPCLK1Freq+0x24>)
 800424a:	5cd3      	ldrb	r3, [r2, r3]
 800424c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004250:	4618      	mov	r0, r3
 8004252:	bd80      	pop	{r7, pc}
 8004254:	40023800 	.word	0x40023800
 8004258:	08006524 	.word	0x08006524

0800425c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004260:	f7ff ffdc 	bl	800421c <HAL_RCC_GetHCLKFreq>
 8004264:	4601      	mov	r1, r0
 8004266:	4b05      	ldr	r3, [pc, #20]	; (800427c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	0b5b      	lsrs	r3, r3, #13
 800426c:	f003 0307 	and.w	r3, r3, #7
 8004270:	4a03      	ldr	r2, [pc, #12]	; (8004280 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004272:	5cd3      	ldrb	r3, [r2, r3]
 8004274:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004278:	4618      	mov	r0, r3
 800427a:	bd80      	pop	{r7, pc}
 800427c:	40023800 	.word	0x40023800
 8004280:	08006524 	.word	0x08006524

08004284 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b082      	sub	sp, #8
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d101      	bne.n	8004296 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e01d      	b.n	80042d2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d106      	bne.n	80042b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f7fd fd18 	bl	8001ce0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2202      	movs	r2, #2
 80042b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	3304      	adds	r3, #4
 80042c0:	4619      	mov	r1, r3
 80042c2:	4610      	mov	r0, r2
 80042c4:	f000 fc44 	bl	8004b50 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042d0:	2300      	movs	r3, #0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3708      	adds	r7, #8
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}

080042da <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80042da:	b480      	push	{r7}
 80042dc:	b085      	sub	sp, #20
 80042de:	af00      	add	r7, sp, #0
 80042e0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2202      	movs	r2, #2
 80042e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	f003 0307 	and.w	r3, r3, #7
 80042f4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2b06      	cmp	r3, #6
 80042fa:	d007      	beq.n	800430c <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f042 0201 	orr.w	r2, r2, #1
 800430a:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004314:	2300      	movs	r3, #0
}
 8004316:	4618      	mov	r0, r3
 8004318:	3714      	adds	r7, #20
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr

08004322 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004322:	b480      	push	{r7}
 8004324:	b085      	sub	sp, #20
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	68da      	ldr	r2, [r3, #12]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f042 0201 	orr.w	r2, r2, #1
 8004338:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	f003 0307 	and.w	r3, r3, #7
 8004344:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2b06      	cmp	r3, #6
 800434a:	d007      	beq.n	800435c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f042 0201 	orr.w	r2, r2, #1
 800435a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800435c:	2300      	movs	r3, #0
}
 800435e:	4618      	mov	r0, r3
 8004360:	3714      	adds	r7, #20
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr

0800436a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800436a:	b580      	push	{r7, lr}
 800436c:	b082      	sub	sp, #8
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d101      	bne.n	800437c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e01d      	b.n	80043b8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004382:	b2db      	uxtb	r3, r3
 8004384:	2b00      	cmp	r3, #0
 8004386:	d106      	bne.n	8004396 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f000 f815 	bl	80043c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2202      	movs	r2, #2
 800439a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	3304      	adds	r3, #4
 80043a6:	4619      	mov	r1, r3
 80043a8:	4610      	mov	r0, r2
 80043aa:	f000 fbd1 	bl	8004b50 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2201      	movs	r2, #1
 80043b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043b6:	2300      	movs	r3, #0
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3708      	adds	r7, #8
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}

080043c0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80043c8:	bf00      	nop
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	2201      	movs	r2, #1
 80043e4:	6839      	ldr	r1, [r7, #0]
 80043e6:	4618      	mov	r0, r3
 80043e8:	f000 ffc6 	bl	8005378 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a15      	ldr	r2, [pc, #84]	; (8004448 <HAL_TIM_PWM_Start+0x74>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d004      	beq.n	8004400 <HAL_TIM_PWM_Start+0x2c>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a14      	ldr	r2, [pc, #80]	; (800444c <HAL_TIM_PWM_Start+0x78>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d101      	bne.n	8004404 <HAL_TIM_PWM_Start+0x30>
 8004400:	2301      	movs	r3, #1
 8004402:	e000      	b.n	8004406 <HAL_TIM_PWM_Start+0x32>
 8004404:	2300      	movs	r3, #0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d007      	beq.n	800441a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004418:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	f003 0307 	and.w	r3, r3, #7
 8004424:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2b06      	cmp	r3, #6
 800442a:	d007      	beq.n	800443c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f042 0201 	orr.w	r2, r2, #1
 800443a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3710      	adds	r7, #16
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	40010000 	.word	0x40010000
 800444c:	40010400 	.word	0x40010400

08004450 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b082      	sub	sp, #8
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d101      	bne.n	8004462 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e01d      	b.n	800449e <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004468:	b2db      	uxtb	r3, r3
 800446a:	2b00      	cmp	r3, #0
 800446c:	d106      	bne.n	800447c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 f815 	bl	80044a6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2202      	movs	r2, #2
 8004480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	3304      	adds	r3, #4
 800448c:	4619      	mov	r1, r3
 800448e:	4610      	mov	r0, r2
 8004490:	f000 fb5e 	bl	8004b50 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800449c:	2300      	movs	r3, #0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3708      	adds	r7, #8
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}

080044a6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80044a6:	b480      	push	{r7}
 80044a8:	b083      	sub	sp, #12
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80044ae:	bf00      	nop
 80044b0:	370c      	adds	r7, #12
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr

080044ba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044ba:	b580      	push	{r7, lr}
 80044bc:	b082      	sub	sp, #8
 80044be:	af00      	add	r7, sp, #0
 80044c0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	f003 0302 	and.w	r3, r3, #2
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d122      	bne.n	8004516 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	f003 0302 	and.w	r3, r3, #2
 80044da:	2b02      	cmp	r3, #2
 80044dc:	d11b      	bne.n	8004516 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f06f 0202 	mvn.w	r2, #2
 80044e6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	699b      	ldr	r3, [r3, #24]
 80044f4:	f003 0303 	and.w	r3, r3, #3
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d003      	beq.n	8004504 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f000 fb08 	bl	8004b12 <HAL_TIM_IC_CaptureCallback>
 8004502:	e005      	b.n	8004510 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f000 fafa 	bl	8004afe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f000 fb0b 	bl	8004b26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	f003 0304 	and.w	r3, r3, #4
 8004520:	2b04      	cmp	r3, #4
 8004522:	d122      	bne.n	800456a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	f003 0304 	and.w	r3, r3, #4
 800452e:	2b04      	cmp	r3, #4
 8004530:	d11b      	bne.n	800456a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f06f 0204 	mvn.w	r2, #4
 800453a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2202      	movs	r2, #2
 8004540:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	699b      	ldr	r3, [r3, #24]
 8004548:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800454c:	2b00      	cmp	r3, #0
 800454e:	d003      	beq.n	8004558 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f000 fade 	bl	8004b12 <HAL_TIM_IC_CaptureCallback>
 8004556:	e005      	b.n	8004564 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f000 fad0 	bl	8004afe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f000 fae1 	bl	8004b26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	691b      	ldr	r3, [r3, #16]
 8004570:	f003 0308 	and.w	r3, r3, #8
 8004574:	2b08      	cmp	r3, #8
 8004576:	d122      	bne.n	80045be <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	f003 0308 	and.w	r3, r3, #8
 8004582:	2b08      	cmp	r3, #8
 8004584:	d11b      	bne.n	80045be <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f06f 0208 	mvn.w	r2, #8
 800458e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2204      	movs	r2, #4
 8004594:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	69db      	ldr	r3, [r3, #28]
 800459c:	f003 0303 	and.w	r3, r3, #3
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d003      	beq.n	80045ac <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f000 fab4 	bl	8004b12 <HAL_TIM_IC_CaptureCallback>
 80045aa:	e005      	b.n	80045b8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f000 faa6 	bl	8004afe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 fab7 	bl	8004b26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	691b      	ldr	r3, [r3, #16]
 80045c4:	f003 0310 	and.w	r3, r3, #16
 80045c8:	2b10      	cmp	r3, #16
 80045ca:	d122      	bne.n	8004612 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	f003 0310 	and.w	r3, r3, #16
 80045d6:	2b10      	cmp	r3, #16
 80045d8:	d11b      	bne.n	8004612 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f06f 0210 	mvn.w	r2, #16
 80045e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2208      	movs	r2, #8
 80045e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	69db      	ldr	r3, [r3, #28]
 80045f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d003      	beq.n	8004600 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f000 fa8a 	bl	8004b12 <HAL_TIM_IC_CaptureCallback>
 80045fe:	e005      	b.n	800460c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f000 fa7c 	bl	8004afe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f000 fa8d 	bl	8004b26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	691b      	ldr	r3, [r3, #16]
 8004618:	f003 0301 	and.w	r3, r3, #1
 800461c:	2b01      	cmp	r3, #1
 800461e:	d10e      	bne.n	800463e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	f003 0301 	and.w	r3, r3, #1
 800462a:	2b01      	cmp	r3, #1
 800462c:	d107      	bne.n	800463e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f06f 0201 	mvn.w	r2, #1
 8004636:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f7fc feeb 	bl	8001414 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	691b      	ldr	r3, [r3, #16]
 8004644:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004648:	2b80      	cmp	r3, #128	; 0x80
 800464a:	d10e      	bne.n	800466a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004656:	2b80      	cmp	r3, #128	; 0x80
 8004658:	d107      	bne.n	800466a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004662:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f000 ff33 	bl	80054d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	691b      	ldr	r3, [r3, #16]
 8004670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004674:	2b40      	cmp	r3, #64	; 0x40
 8004676:	d10e      	bne.n	8004696 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004682:	2b40      	cmp	r3, #64	; 0x40
 8004684:	d107      	bne.n	8004696 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800468e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f000 fa52 	bl	8004b3a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	691b      	ldr	r3, [r3, #16]
 800469c:	f003 0320 	and.w	r3, r3, #32
 80046a0:	2b20      	cmp	r3, #32
 80046a2:	d10e      	bne.n	80046c2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	f003 0320 	and.w	r3, r3, #32
 80046ae:	2b20      	cmp	r3, #32
 80046b0:	d107      	bne.n	80046c2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f06f 0220 	mvn.w	r2, #32
 80046ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f000 fefd 	bl	80054bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046c2:	bf00      	nop
 80046c4:	3708      	adds	r7, #8
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}

080046ca <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80046ca:	b580      	push	{r7, lr}
 80046cc:	b084      	sub	sp, #16
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	60f8      	str	r0, [r7, #12]
 80046d2:	60b9      	str	r1, [r7, #8]
 80046d4:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d101      	bne.n	80046e4 <HAL_TIM_IC_ConfigChannel+0x1a>
 80046e0:	2302      	movs	r3, #2
 80046e2:	e08a      	b.n	80047fa <HAL_TIM_IC_ConfigChannel+0x130>
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2202      	movs	r2, #2
 80046f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d11b      	bne.n	8004732 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6818      	ldr	r0, [r3, #0]
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	6819      	ldr	r1, [r3, #0]
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	685a      	ldr	r2, [r3, #4]
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	f000 fc71 	bl	8004ff0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	699a      	ldr	r2, [r3, #24]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f022 020c 	bic.w	r2, r2, #12
 800471c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	6999      	ldr	r1, [r3, #24]
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	689a      	ldr	r2, [r3, #8]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	430a      	orrs	r2, r1
 800472e:	619a      	str	r2, [r3, #24]
 8004730:	e05a      	b.n	80047e8 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2b04      	cmp	r3, #4
 8004736:	d11c      	bne.n	8004772 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6818      	ldr	r0, [r3, #0]
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	6819      	ldr	r1, [r3, #0]
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	685a      	ldr	r2, [r3, #4]
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	f000 fcf5 	bl	8005136 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	699a      	ldr	r2, [r3, #24]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800475a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	6999      	ldr	r1, [r3, #24]
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	021a      	lsls	r2, r3, #8
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	430a      	orrs	r2, r1
 800476e:	619a      	str	r2, [r3, #24]
 8004770:	e03a      	b.n	80047e8 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2b08      	cmp	r3, #8
 8004776:	d11b      	bne.n	80047b0 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6818      	ldr	r0, [r3, #0]
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	6819      	ldr	r1, [r3, #0]
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	685a      	ldr	r2, [r3, #4]
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	f000 fd42 	bl	8005210 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	69da      	ldr	r2, [r3, #28]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f022 020c 	bic.w	r2, r2, #12
 800479a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	69d9      	ldr	r1, [r3, #28]
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	689a      	ldr	r2, [r3, #8]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	430a      	orrs	r2, r1
 80047ac:	61da      	str	r2, [r3, #28]
 80047ae:	e01b      	b.n	80047e8 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6818      	ldr	r0, [r3, #0]
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	6819      	ldr	r1, [r3, #0]
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	685a      	ldr	r2, [r3, #4]
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	f000 fd62 	bl	8005288 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	69da      	ldr	r2, [r3, #28]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80047d2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	69d9      	ldr	r1, [r3, #28]
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	021a      	lsls	r2, r3, #8
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	430a      	orrs	r2, r1
 80047e6:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3710      	adds	r7, #16
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
	...

08004804 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	60b9      	str	r1, [r7, #8]
 800480e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004816:	2b01      	cmp	r3, #1
 8004818:	d101      	bne.n	800481e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800481a:	2302      	movs	r3, #2
 800481c:	e0b4      	b.n	8004988 <HAL_TIM_PWM_ConfigChannel+0x184>
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2201      	movs	r2, #1
 8004822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2202      	movs	r2, #2
 800482a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2b0c      	cmp	r3, #12
 8004832:	f200 809f 	bhi.w	8004974 <HAL_TIM_PWM_ConfigChannel+0x170>
 8004836:	a201      	add	r2, pc, #4	; (adr r2, 800483c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800483c:	08004871 	.word	0x08004871
 8004840:	08004975 	.word	0x08004975
 8004844:	08004975 	.word	0x08004975
 8004848:	08004975 	.word	0x08004975
 800484c:	080048b1 	.word	0x080048b1
 8004850:	08004975 	.word	0x08004975
 8004854:	08004975 	.word	0x08004975
 8004858:	08004975 	.word	0x08004975
 800485c:	080048f3 	.word	0x080048f3
 8004860:	08004975 	.word	0x08004975
 8004864:	08004975 	.word	0x08004975
 8004868:	08004975 	.word	0x08004975
 800486c:	08004933 	.word	0x08004933
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	68b9      	ldr	r1, [r7, #8]
 8004876:	4618      	mov	r0, r3
 8004878:	f000 fa0a 	bl	8004c90 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	699a      	ldr	r2, [r3, #24]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f042 0208 	orr.w	r2, r2, #8
 800488a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	699a      	ldr	r2, [r3, #24]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f022 0204 	bic.w	r2, r2, #4
 800489a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	6999      	ldr	r1, [r3, #24]
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	691a      	ldr	r2, [r3, #16]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	430a      	orrs	r2, r1
 80048ac:	619a      	str	r2, [r3, #24]
      break;
 80048ae:	e062      	b.n	8004976 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	68b9      	ldr	r1, [r7, #8]
 80048b6:	4618      	mov	r0, r3
 80048b8:	f000 fa5a 	bl	8004d70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	699a      	ldr	r2, [r3, #24]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	699a      	ldr	r2, [r3, #24]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	6999      	ldr	r1, [r3, #24]
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	021a      	lsls	r2, r3, #8
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	430a      	orrs	r2, r1
 80048ee:	619a      	str	r2, [r3, #24]
      break;
 80048f0:	e041      	b.n	8004976 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	68b9      	ldr	r1, [r7, #8]
 80048f8:	4618      	mov	r0, r3
 80048fa:	f000 faaf 	bl	8004e5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	69da      	ldr	r2, [r3, #28]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f042 0208 	orr.w	r2, r2, #8
 800490c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	69da      	ldr	r2, [r3, #28]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f022 0204 	bic.w	r2, r2, #4
 800491c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	69d9      	ldr	r1, [r3, #28]
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	691a      	ldr	r2, [r3, #16]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	430a      	orrs	r2, r1
 800492e:	61da      	str	r2, [r3, #28]
      break;
 8004930:	e021      	b.n	8004976 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	68b9      	ldr	r1, [r7, #8]
 8004938:	4618      	mov	r0, r3
 800493a:	f000 fb03 	bl	8004f44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	69da      	ldr	r2, [r3, #28]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800494c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	69da      	ldr	r2, [r3, #28]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800495c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	69d9      	ldr	r1, [r3, #28]
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	691b      	ldr	r3, [r3, #16]
 8004968:	021a      	lsls	r2, r3, #8
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	430a      	orrs	r2, r1
 8004970:	61da      	str	r2, [r3, #28]
      break;
 8004972:	e000      	b.n	8004976 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004974:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2201      	movs	r2, #1
 800497a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2200      	movs	r2, #0
 8004982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004986:	2300      	movs	r3, #0
}
 8004988:	4618      	mov	r0, r3
 800498a:	3710      	adds	r7, #16
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}

08004990 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b084      	sub	sp, #16
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d101      	bne.n	80049a8 <HAL_TIM_ConfigClockSource+0x18>
 80049a4:	2302      	movs	r3, #2
 80049a6:	e0a6      	b.n	8004af6 <HAL_TIM_ConfigClockSource+0x166>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2202      	movs	r2, #2
 80049b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80049c6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049ce:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2b40      	cmp	r3, #64	; 0x40
 80049de:	d067      	beq.n	8004ab0 <HAL_TIM_ConfigClockSource+0x120>
 80049e0:	2b40      	cmp	r3, #64	; 0x40
 80049e2:	d80b      	bhi.n	80049fc <HAL_TIM_ConfigClockSource+0x6c>
 80049e4:	2b10      	cmp	r3, #16
 80049e6:	d073      	beq.n	8004ad0 <HAL_TIM_ConfigClockSource+0x140>
 80049e8:	2b10      	cmp	r3, #16
 80049ea:	d802      	bhi.n	80049f2 <HAL_TIM_ConfigClockSource+0x62>
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d06f      	beq.n	8004ad0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80049f0:	e078      	b.n	8004ae4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80049f2:	2b20      	cmp	r3, #32
 80049f4:	d06c      	beq.n	8004ad0 <HAL_TIM_ConfigClockSource+0x140>
 80049f6:	2b30      	cmp	r3, #48	; 0x30
 80049f8:	d06a      	beq.n	8004ad0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80049fa:	e073      	b.n	8004ae4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80049fc:	2b70      	cmp	r3, #112	; 0x70
 80049fe:	d00d      	beq.n	8004a1c <HAL_TIM_ConfigClockSource+0x8c>
 8004a00:	2b70      	cmp	r3, #112	; 0x70
 8004a02:	d804      	bhi.n	8004a0e <HAL_TIM_ConfigClockSource+0x7e>
 8004a04:	2b50      	cmp	r3, #80	; 0x50
 8004a06:	d033      	beq.n	8004a70 <HAL_TIM_ConfigClockSource+0xe0>
 8004a08:	2b60      	cmp	r3, #96	; 0x60
 8004a0a:	d041      	beq.n	8004a90 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004a0c:	e06a      	b.n	8004ae4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004a0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a12:	d066      	beq.n	8004ae2 <HAL_TIM_ConfigClockSource+0x152>
 8004a14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a18:	d017      	beq.n	8004a4a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004a1a:	e063      	b.n	8004ae4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6818      	ldr	r0, [r3, #0]
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	6899      	ldr	r1, [r3, #8]
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	685a      	ldr	r2, [r3, #4]
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	f000 fc84 	bl	8005338 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a3e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	68fa      	ldr	r2, [r7, #12]
 8004a46:	609a      	str	r2, [r3, #8]
      break;
 8004a48:	e04c      	b.n	8004ae4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6818      	ldr	r0, [r3, #0]
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	6899      	ldr	r1, [r3, #8]
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	685a      	ldr	r2, [r3, #4]
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	f000 fc6d 	bl	8005338 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	689a      	ldr	r2, [r3, #8]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a6c:	609a      	str	r2, [r3, #8]
      break;
 8004a6e:	e039      	b.n	8004ae4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6818      	ldr	r0, [r3, #0]
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	6859      	ldr	r1, [r3, #4]
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	f000 fb2b 	bl	80050d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	2150      	movs	r1, #80	; 0x50
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f000 fc3a 	bl	8005302 <TIM_ITRx_SetConfig>
      break;
 8004a8e:	e029      	b.n	8004ae4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6818      	ldr	r0, [r3, #0]
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	6859      	ldr	r1, [r3, #4]
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	f000 fb87 	bl	80051b0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2160      	movs	r1, #96	; 0x60
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f000 fc2a 	bl	8005302 <TIM_ITRx_SetConfig>
      break;
 8004aae:	e019      	b.n	8004ae4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6818      	ldr	r0, [r3, #0]
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	6859      	ldr	r1, [r3, #4]
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	461a      	mov	r2, r3
 8004abe:	f000 fb0b 	bl	80050d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	2140      	movs	r1, #64	; 0x40
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f000 fc1a 	bl	8005302 <TIM_ITRx_SetConfig>
      break;
 8004ace:	e009      	b.n	8004ae4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4619      	mov	r1, r3
 8004ada:	4610      	mov	r0, r2
 8004adc:	f000 fc11 	bl	8005302 <TIM_ITRx_SetConfig>
      break;
 8004ae0:	e000      	b.n	8004ae4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004ae2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3710      	adds	r7, #16
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}

08004afe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004afe:	b480      	push	{r7}
 8004b00:	b083      	sub	sp, #12
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b06:	bf00      	nop
 8004b08:	370c      	adds	r7, #12
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr

08004b12 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b12:	b480      	push	{r7}
 8004b14:	b083      	sub	sp, #12
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b1a:	bf00      	nop
 8004b1c:	370c      	adds	r7, #12
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr

08004b26 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b26:	b480      	push	{r7}
 8004b28:	b083      	sub	sp, #12
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b2e:	bf00      	nop
 8004b30:	370c      	adds	r7, #12
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr

08004b3a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b3a:	b480      	push	{r7}
 8004b3c:	b083      	sub	sp, #12
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b42:	bf00      	nop
 8004b44:	370c      	adds	r7, #12
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr
	...

08004b50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b085      	sub	sp, #20
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a40      	ldr	r2, [pc, #256]	; (8004c64 <TIM_Base_SetConfig+0x114>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d013      	beq.n	8004b90 <TIM_Base_SetConfig+0x40>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b6e:	d00f      	beq.n	8004b90 <TIM_Base_SetConfig+0x40>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a3d      	ldr	r2, [pc, #244]	; (8004c68 <TIM_Base_SetConfig+0x118>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d00b      	beq.n	8004b90 <TIM_Base_SetConfig+0x40>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a3c      	ldr	r2, [pc, #240]	; (8004c6c <TIM_Base_SetConfig+0x11c>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d007      	beq.n	8004b90 <TIM_Base_SetConfig+0x40>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a3b      	ldr	r2, [pc, #236]	; (8004c70 <TIM_Base_SetConfig+0x120>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d003      	beq.n	8004b90 <TIM_Base_SetConfig+0x40>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a3a      	ldr	r2, [pc, #232]	; (8004c74 <TIM_Base_SetConfig+0x124>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d108      	bne.n	8004ba2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	68fa      	ldr	r2, [r7, #12]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a2f      	ldr	r2, [pc, #188]	; (8004c64 <TIM_Base_SetConfig+0x114>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d02b      	beq.n	8004c02 <TIM_Base_SetConfig+0xb2>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bb0:	d027      	beq.n	8004c02 <TIM_Base_SetConfig+0xb2>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a2c      	ldr	r2, [pc, #176]	; (8004c68 <TIM_Base_SetConfig+0x118>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d023      	beq.n	8004c02 <TIM_Base_SetConfig+0xb2>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a2b      	ldr	r2, [pc, #172]	; (8004c6c <TIM_Base_SetConfig+0x11c>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d01f      	beq.n	8004c02 <TIM_Base_SetConfig+0xb2>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a2a      	ldr	r2, [pc, #168]	; (8004c70 <TIM_Base_SetConfig+0x120>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d01b      	beq.n	8004c02 <TIM_Base_SetConfig+0xb2>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a29      	ldr	r2, [pc, #164]	; (8004c74 <TIM_Base_SetConfig+0x124>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d017      	beq.n	8004c02 <TIM_Base_SetConfig+0xb2>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a28      	ldr	r2, [pc, #160]	; (8004c78 <TIM_Base_SetConfig+0x128>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d013      	beq.n	8004c02 <TIM_Base_SetConfig+0xb2>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a27      	ldr	r2, [pc, #156]	; (8004c7c <TIM_Base_SetConfig+0x12c>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d00f      	beq.n	8004c02 <TIM_Base_SetConfig+0xb2>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a26      	ldr	r2, [pc, #152]	; (8004c80 <TIM_Base_SetConfig+0x130>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d00b      	beq.n	8004c02 <TIM_Base_SetConfig+0xb2>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a25      	ldr	r2, [pc, #148]	; (8004c84 <TIM_Base_SetConfig+0x134>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d007      	beq.n	8004c02 <TIM_Base_SetConfig+0xb2>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a24      	ldr	r2, [pc, #144]	; (8004c88 <TIM_Base_SetConfig+0x138>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d003      	beq.n	8004c02 <TIM_Base_SetConfig+0xb2>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a23      	ldr	r2, [pc, #140]	; (8004c8c <TIM_Base_SetConfig+0x13c>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d108      	bne.n	8004c14 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	68fa      	ldr	r2, [r7, #12]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	695b      	ldr	r3, [r3, #20]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	68fa      	ldr	r2, [r7, #12]
 8004c26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	689a      	ldr	r2, [r3, #8]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4a0a      	ldr	r2, [pc, #40]	; (8004c64 <TIM_Base_SetConfig+0x114>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d003      	beq.n	8004c48 <TIM_Base_SetConfig+0xf8>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4a0c      	ldr	r2, [pc, #48]	; (8004c74 <TIM_Base_SetConfig+0x124>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d103      	bne.n	8004c50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	691a      	ldr	r2, [r3, #16]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	615a      	str	r2, [r3, #20]
}
 8004c56:	bf00      	nop
 8004c58:	3714      	adds	r7, #20
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr
 8004c62:	bf00      	nop
 8004c64:	40010000 	.word	0x40010000
 8004c68:	40000400 	.word	0x40000400
 8004c6c:	40000800 	.word	0x40000800
 8004c70:	40000c00 	.word	0x40000c00
 8004c74:	40010400 	.word	0x40010400
 8004c78:	40014000 	.word	0x40014000
 8004c7c:	40014400 	.word	0x40014400
 8004c80:	40014800 	.word	0x40014800
 8004c84:	40001800 	.word	0x40001800
 8004c88:	40001c00 	.word	0x40001c00
 8004c8c:	40002000 	.word	0x40002000

08004c90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b087      	sub	sp, #28
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a1b      	ldr	r3, [r3, #32]
 8004c9e:	f023 0201 	bic.w	r2, r3, #1
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a1b      	ldr	r3, [r3, #32]
 8004caa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	699b      	ldr	r3, [r3, #24]
 8004cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f023 0303 	bic.w	r3, r3, #3
 8004cc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	68fa      	ldr	r2, [r7, #12]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	f023 0302 	bic.w	r3, r3, #2
 8004cd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	697a      	ldr	r2, [r7, #20]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	4a20      	ldr	r2, [pc, #128]	; (8004d68 <TIM_OC1_SetConfig+0xd8>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d003      	beq.n	8004cf4 <TIM_OC1_SetConfig+0x64>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4a1f      	ldr	r2, [pc, #124]	; (8004d6c <TIM_OC1_SetConfig+0xdc>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d10c      	bne.n	8004d0e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	f023 0308 	bic.w	r3, r3, #8
 8004cfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	697a      	ldr	r2, [r7, #20]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	f023 0304 	bic.w	r3, r3, #4
 8004d0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a15      	ldr	r2, [pc, #84]	; (8004d68 <TIM_OC1_SetConfig+0xd8>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d003      	beq.n	8004d1e <TIM_OC1_SetConfig+0x8e>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a14      	ldr	r2, [pc, #80]	; (8004d6c <TIM_OC1_SetConfig+0xdc>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d111      	bne.n	8004d42 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	695b      	ldr	r3, [r3, #20]
 8004d32:	693a      	ldr	r2, [r7, #16]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	699b      	ldr	r3, [r3, #24]
 8004d3c:	693a      	ldr	r2, [r7, #16]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	693a      	ldr	r2, [r7, #16]
 8004d46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	68fa      	ldr	r2, [r7, #12]
 8004d4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	685a      	ldr	r2, [r3, #4]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	697a      	ldr	r2, [r7, #20]
 8004d5a:	621a      	str	r2, [r3, #32]
}
 8004d5c:	bf00      	nop
 8004d5e:	371c      	adds	r7, #28
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr
 8004d68:	40010000 	.word	0x40010000
 8004d6c:	40010400 	.word	0x40010400

08004d70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b087      	sub	sp, #28
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a1b      	ldr	r3, [r3, #32]
 8004d7e:	f023 0210 	bic.w	r2, r3, #16
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a1b      	ldr	r3, [r3, #32]
 8004d8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004da6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	021b      	lsls	r3, r3, #8
 8004dae:	68fa      	ldr	r2, [r7, #12]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	f023 0320 	bic.w	r3, r3, #32
 8004dba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	011b      	lsls	r3, r3, #4
 8004dc2:	697a      	ldr	r2, [r7, #20]
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	4a22      	ldr	r2, [pc, #136]	; (8004e54 <TIM_OC2_SetConfig+0xe4>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d003      	beq.n	8004dd8 <TIM_OC2_SetConfig+0x68>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4a21      	ldr	r2, [pc, #132]	; (8004e58 <TIM_OC2_SetConfig+0xe8>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d10d      	bne.n	8004df4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004dde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	011b      	lsls	r3, r3, #4
 8004de6:	697a      	ldr	r2, [r7, #20]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004df2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a17      	ldr	r2, [pc, #92]	; (8004e54 <TIM_OC2_SetConfig+0xe4>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d003      	beq.n	8004e04 <TIM_OC2_SetConfig+0x94>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a16      	ldr	r2, [pc, #88]	; (8004e58 <TIM_OC2_SetConfig+0xe8>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d113      	bne.n	8004e2c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	695b      	ldr	r3, [r3, #20]
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	693a      	ldr	r2, [r7, #16]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	699b      	ldr	r3, [r3, #24]
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	693a      	ldr	r2, [r7, #16]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	693a      	ldr	r2, [r7, #16]
 8004e30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	68fa      	ldr	r2, [r7, #12]
 8004e36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	685a      	ldr	r2, [r3, #4]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	697a      	ldr	r2, [r7, #20]
 8004e44:	621a      	str	r2, [r3, #32]
}
 8004e46:	bf00      	nop
 8004e48:	371c      	adds	r7, #28
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop
 8004e54:	40010000 	.word	0x40010000
 8004e58:	40010400 	.word	0x40010400

08004e5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b087      	sub	sp, #28
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a1b      	ldr	r3, [r3, #32]
 8004e6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a1b      	ldr	r3, [r3, #32]
 8004e76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	69db      	ldr	r3, [r3, #28]
 8004e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f023 0303 	bic.w	r3, r3, #3
 8004e92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	68fa      	ldr	r2, [r7, #12]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ea4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	021b      	lsls	r3, r3, #8
 8004eac:	697a      	ldr	r2, [r7, #20]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a21      	ldr	r2, [pc, #132]	; (8004f3c <TIM_OC3_SetConfig+0xe0>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d003      	beq.n	8004ec2 <TIM_OC3_SetConfig+0x66>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a20      	ldr	r2, [pc, #128]	; (8004f40 <TIM_OC3_SetConfig+0xe4>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d10d      	bne.n	8004ede <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ec8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	021b      	lsls	r3, r3, #8
 8004ed0:	697a      	ldr	r2, [r7, #20]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004edc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a16      	ldr	r2, [pc, #88]	; (8004f3c <TIM_OC3_SetConfig+0xe0>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d003      	beq.n	8004eee <TIM_OC3_SetConfig+0x92>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a15      	ldr	r2, [pc, #84]	; (8004f40 <TIM_OC3_SetConfig+0xe4>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d113      	bne.n	8004f16 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ef4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004efc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	695b      	ldr	r3, [r3, #20]
 8004f02:	011b      	lsls	r3, r3, #4
 8004f04:	693a      	ldr	r2, [r7, #16]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	699b      	ldr	r3, [r3, #24]
 8004f0e:	011b      	lsls	r3, r3, #4
 8004f10:	693a      	ldr	r2, [r7, #16]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	693a      	ldr	r2, [r7, #16]
 8004f1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	68fa      	ldr	r2, [r7, #12]
 8004f20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	685a      	ldr	r2, [r3, #4]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	697a      	ldr	r2, [r7, #20]
 8004f2e:	621a      	str	r2, [r3, #32]
}
 8004f30:	bf00      	nop
 8004f32:	371c      	adds	r7, #28
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr
 8004f3c:	40010000 	.word	0x40010000
 8004f40:	40010400 	.word	0x40010400

08004f44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b087      	sub	sp, #28
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a1b      	ldr	r3, [r3, #32]
 8004f52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a1b      	ldr	r3, [r3, #32]
 8004f5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	69db      	ldr	r3, [r3, #28]
 8004f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	021b      	lsls	r3, r3, #8
 8004f82:	68fa      	ldr	r2, [r7, #12]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	031b      	lsls	r3, r3, #12
 8004f96:	693a      	ldr	r2, [r7, #16]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	4a12      	ldr	r2, [pc, #72]	; (8004fe8 <TIM_OC4_SetConfig+0xa4>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d003      	beq.n	8004fac <TIM_OC4_SetConfig+0x68>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4a11      	ldr	r2, [pc, #68]	; (8004fec <TIM_OC4_SetConfig+0xa8>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d109      	bne.n	8004fc0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fb2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	695b      	ldr	r3, [r3, #20]
 8004fb8:	019b      	lsls	r3, r3, #6
 8004fba:	697a      	ldr	r2, [r7, #20]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	697a      	ldr	r2, [r7, #20]
 8004fc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	68fa      	ldr	r2, [r7, #12]
 8004fca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	685a      	ldr	r2, [r3, #4]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	693a      	ldr	r2, [r7, #16]
 8004fd8:	621a      	str	r2, [r3, #32]
}
 8004fda:	bf00      	nop
 8004fdc:	371c      	adds	r7, #28
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr
 8004fe6:	bf00      	nop
 8004fe8:	40010000 	.word	0x40010000
 8004fec:	40010400 	.word	0x40010400

08004ff0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b087      	sub	sp, #28
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	60b9      	str	r1, [r7, #8]
 8004ffa:	607a      	str	r2, [r7, #4]
 8004ffc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6a1b      	ldr	r3, [r3, #32]
 8005002:	f023 0201 	bic.w	r2, r3, #1
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	699b      	ldr	r3, [r3, #24]
 800500e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6a1b      	ldr	r3, [r3, #32]
 8005014:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	4a28      	ldr	r2, [pc, #160]	; (80050bc <TIM_TI1_SetConfig+0xcc>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d01b      	beq.n	8005056 <TIM_TI1_SetConfig+0x66>
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005024:	d017      	beq.n	8005056 <TIM_TI1_SetConfig+0x66>
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	4a25      	ldr	r2, [pc, #148]	; (80050c0 <TIM_TI1_SetConfig+0xd0>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d013      	beq.n	8005056 <TIM_TI1_SetConfig+0x66>
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	4a24      	ldr	r2, [pc, #144]	; (80050c4 <TIM_TI1_SetConfig+0xd4>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d00f      	beq.n	8005056 <TIM_TI1_SetConfig+0x66>
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	4a23      	ldr	r2, [pc, #140]	; (80050c8 <TIM_TI1_SetConfig+0xd8>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d00b      	beq.n	8005056 <TIM_TI1_SetConfig+0x66>
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	4a22      	ldr	r2, [pc, #136]	; (80050cc <TIM_TI1_SetConfig+0xdc>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d007      	beq.n	8005056 <TIM_TI1_SetConfig+0x66>
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	4a21      	ldr	r2, [pc, #132]	; (80050d0 <TIM_TI1_SetConfig+0xe0>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d003      	beq.n	8005056 <TIM_TI1_SetConfig+0x66>
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	4a20      	ldr	r2, [pc, #128]	; (80050d4 <TIM_TI1_SetConfig+0xe4>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d101      	bne.n	800505a <TIM_TI1_SetConfig+0x6a>
 8005056:	2301      	movs	r3, #1
 8005058:	e000      	b.n	800505c <TIM_TI1_SetConfig+0x6c>
 800505a:	2300      	movs	r3, #0
 800505c:	2b00      	cmp	r3, #0
 800505e:	d008      	beq.n	8005072 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	f023 0303 	bic.w	r3, r3, #3
 8005066:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005068:	697a      	ldr	r2, [r7, #20]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	4313      	orrs	r3, r2
 800506e:	617b      	str	r3, [r7, #20]
 8005070:	e003      	b.n	800507a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	f043 0301 	orr.w	r3, r3, #1
 8005078:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005080:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	011b      	lsls	r3, r3, #4
 8005086:	b2db      	uxtb	r3, r3
 8005088:	697a      	ldr	r2, [r7, #20]
 800508a:	4313      	orrs	r3, r2
 800508c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	f023 030a 	bic.w	r3, r3, #10
 8005094:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	f003 030a 	and.w	r3, r3, #10
 800509c:	693a      	ldr	r2, [r7, #16]
 800509e:	4313      	orrs	r3, r2
 80050a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	697a      	ldr	r2, [r7, #20]
 80050a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	693a      	ldr	r2, [r7, #16]
 80050ac:	621a      	str	r2, [r3, #32]
}
 80050ae:	bf00      	nop
 80050b0:	371c      	adds	r7, #28
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr
 80050ba:	bf00      	nop
 80050bc:	40010000 	.word	0x40010000
 80050c0:	40000400 	.word	0x40000400
 80050c4:	40000800 	.word	0x40000800
 80050c8:	40000c00 	.word	0x40000c00
 80050cc:	40010400 	.word	0x40010400
 80050d0:	40014000 	.word	0x40014000
 80050d4:	40001800 	.word	0x40001800

080050d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050d8:	b480      	push	{r7}
 80050da:	b087      	sub	sp, #28
 80050dc:	af00      	add	r7, sp, #0
 80050de:	60f8      	str	r0, [r7, #12]
 80050e0:	60b9      	str	r1, [r7, #8]
 80050e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6a1b      	ldr	r3, [r3, #32]
 80050e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6a1b      	ldr	r3, [r3, #32]
 80050ee:	f023 0201 	bic.w	r2, r3, #1
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	699b      	ldr	r3, [r3, #24]
 80050fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005102:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	011b      	lsls	r3, r3, #4
 8005108:	693a      	ldr	r2, [r7, #16]
 800510a:	4313      	orrs	r3, r2
 800510c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	f023 030a 	bic.w	r3, r3, #10
 8005114:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005116:	697a      	ldr	r2, [r7, #20]
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	4313      	orrs	r3, r2
 800511c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	693a      	ldr	r2, [r7, #16]
 8005122:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	697a      	ldr	r2, [r7, #20]
 8005128:	621a      	str	r2, [r3, #32]
}
 800512a:	bf00      	nop
 800512c:	371c      	adds	r7, #28
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr

08005136 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005136:	b480      	push	{r7}
 8005138:	b087      	sub	sp, #28
 800513a:	af00      	add	r7, sp, #0
 800513c:	60f8      	str	r0, [r7, #12]
 800513e:	60b9      	str	r1, [r7, #8]
 8005140:	607a      	str	r2, [r7, #4]
 8005142:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6a1b      	ldr	r3, [r3, #32]
 8005148:	f023 0210 	bic.w	r2, r3, #16
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	699b      	ldr	r3, [r3, #24]
 8005154:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	6a1b      	ldr	r3, [r3, #32]
 800515a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005162:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	021b      	lsls	r3, r3, #8
 8005168:	697a      	ldr	r2, [r7, #20]
 800516a:	4313      	orrs	r3, r2
 800516c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005174:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	031b      	lsls	r3, r3, #12
 800517a:	b29b      	uxth	r3, r3
 800517c:	697a      	ldr	r2, [r7, #20]
 800517e:	4313      	orrs	r3, r2
 8005180:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005188:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	011b      	lsls	r3, r3, #4
 800518e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005192:	693a      	ldr	r2, [r7, #16]
 8005194:	4313      	orrs	r3, r2
 8005196:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	697a      	ldr	r2, [r7, #20]
 800519c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	693a      	ldr	r2, [r7, #16]
 80051a2:	621a      	str	r2, [r3, #32]
}
 80051a4:	bf00      	nop
 80051a6:	371c      	adds	r7, #28
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr

080051b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b087      	sub	sp, #28
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	60f8      	str	r0, [r7, #12]
 80051b8:	60b9      	str	r1, [r7, #8]
 80051ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6a1b      	ldr	r3, [r3, #32]
 80051c0:	f023 0210 	bic.w	r2, r3, #16
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	699b      	ldr	r3, [r3, #24]
 80051cc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6a1b      	ldr	r3, [r3, #32]
 80051d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80051da:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	031b      	lsls	r3, r3, #12
 80051e0:	697a      	ldr	r2, [r7, #20]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80051ec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	011b      	lsls	r3, r3, #4
 80051f2:	693a      	ldr	r2, [r7, #16]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	697a      	ldr	r2, [r7, #20]
 80051fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	693a      	ldr	r2, [r7, #16]
 8005202:	621a      	str	r2, [r3, #32]
}
 8005204:	bf00      	nop
 8005206:	371c      	adds	r7, #28
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr

08005210 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005210:	b480      	push	{r7}
 8005212:	b087      	sub	sp, #28
 8005214:	af00      	add	r7, sp, #0
 8005216:	60f8      	str	r0, [r7, #12]
 8005218:	60b9      	str	r1, [r7, #8]
 800521a:	607a      	str	r2, [r7, #4]
 800521c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	6a1b      	ldr	r3, [r3, #32]
 8005222:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	69db      	ldr	r3, [r3, #28]
 800522e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6a1b      	ldr	r3, [r3, #32]
 8005234:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	f023 0303 	bic.w	r3, r3, #3
 800523c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800523e:	697a      	ldr	r2, [r7, #20]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	4313      	orrs	r3, r2
 8005244:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800524c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	011b      	lsls	r3, r3, #4
 8005252:	b2db      	uxtb	r3, r3
 8005254:	697a      	ldr	r2, [r7, #20]
 8005256:	4313      	orrs	r3, r2
 8005258:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005260:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	021b      	lsls	r3, r3, #8
 8005266:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800526a:	693a      	ldr	r2, [r7, #16]
 800526c:	4313      	orrs	r3, r2
 800526e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	697a      	ldr	r2, [r7, #20]
 8005274:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	693a      	ldr	r2, [r7, #16]
 800527a:	621a      	str	r2, [r3, #32]
}
 800527c:	bf00      	nop
 800527e:	371c      	adds	r7, #28
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005288:	b480      	push	{r7}
 800528a:	b087      	sub	sp, #28
 800528c:	af00      	add	r7, sp, #0
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	607a      	str	r2, [r7, #4]
 8005294:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6a1b      	ldr	r3, [r3, #32]
 800529a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	69db      	ldr	r3, [r3, #28]
 80052a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6a1b      	ldr	r3, [r3, #32]
 80052ac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052b4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	021b      	lsls	r3, r3, #8
 80052ba:	697a      	ldr	r2, [r7, #20]
 80052bc:	4313      	orrs	r3, r2
 80052be:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80052c6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	031b      	lsls	r3, r3, #12
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	697a      	ldr	r2, [r7, #20]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80052da:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	031b      	lsls	r3, r3, #12
 80052e0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80052e4:	693a      	ldr	r2, [r7, #16]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	697a      	ldr	r2, [r7, #20]
 80052ee:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	693a      	ldr	r2, [r7, #16]
 80052f4:	621a      	str	r2, [r3, #32]
}
 80052f6:	bf00      	nop
 80052f8:	371c      	adds	r7, #28
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr

08005302 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005302:	b480      	push	{r7}
 8005304:	b085      	sub	sp, #20
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
 800530a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005318:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800531a:	683a      	ldr	r2, [r7, #0]
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	4313      	orrs	r3, r2
 8005320:	f043 0307 	orr.w	r3, r3, #7
 8005324:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	68fa      	ldr	r2, [r7, #12]
 800532a:	609a      	str	r2, [r3, #8]
}
 800532c:	bf00      	nop
 800532e:	3714      	adds	r7, #20
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr

08005338 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005338:	b480      	push	{r7}
 800533a:	b087      	sub	sp, #28
 800533c:	af00      	add	r7, sp, #0
 800533e:	60f8      	str	r0, [r7, #12]
 8005340:	60b9      	str	r1, [r7, #8]
 8005342:	607a      	str	r2, [r7, #4]
 8005344:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005352:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	021a      	lsls	r2, r3, #8
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	431a      	orrs	r2, r3
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	4313      	orrs	r3, r2
 8005360:	697a      	ldr	r2, [r7, #20]
 8005362:	4313      	orrs	r3, r2
 8005364:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	697a      	ldr	r2, [r7, #20]
 800536a:	609a      	str	r2, [r3, #8]
}
 800536c:	bf00      	nop
 800536e:	371c      	adds	r7, #28
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr

08005378 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005378:	b480      	push	{r7}
 800537a:	b087      	sub	sp, #28
 800537c:	af00      	add	r7, sp, #0
 800537e:	60f8      	str	r0, [r7, #12]
 8005380:	60b9      	str	r1, [r7, #8]
 8005382:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	f003 031f 	and.w	r3, r3, #31
 800538a:	2201      	movs	r2, #1
 800538c:	fa02 f303 	lsl.w	r3, r2, r3
 8005390:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	6a1a      	ldr	r2, [r3, #32]
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	43db      	mvns	r3, r3
 800539a:	401a      	ands	r2, r3
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6a1a      	ldr	r2, [r3, #32]
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	f003 031f 	and.w	r3, r3, #31
 80053aa:	6879      	ldr	r1, [r7, #4]
 80053ac:	fa01 f303 	lsl.w	r3, r1, r3
 80053b0:	431a      	orrs	r2, r3
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	621a      	str	r2, [r3, #32]
}
 80053b6:	bf00      	nop
 80053b8:	371c      	adds	r7, #28
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr
	...

080053c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b085      	sub	sp, #20
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d101      	bne.n	80053dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053d8:	2302      	movs	r3, #2
 80053da:	e05a      	b.n	8005492 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2202      	movs	r2, #2
 80053e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005402:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	68fa      	ldr	r2, [r7, #12]
 800540a:	4313      	orrs	r3, r2
 800540c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a21      	ldr	r2, [pc, #132]	; (80054a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d022      	beq.n	8005466 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005428:	d01d      	beq.n	8005466 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a1d      	ldr	r2, [pc, #116]	; (80054a4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d018      	beq.n	8005466 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a1b      	ldr	r2, [pc, #108]	; (80054a8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d013      	beq.n	8005466 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a1a      	ldr	r2, [pc, #104]	; (80054ac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d00e      	beq.n	8005466 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a18      	ldr	r2, [pc, #96]	; (80054b0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d009      	beq.n	8005466 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a17      	ldr	r2, [pc, #92]	; (80054b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d004      	beq.n	8005466 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a15      	ldr	r2, [pc, #84]	; (80054b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d10c      	bne.n	8005480 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800546c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	68ba      	ldr	r2, [r7, #8]
 8005474:	4313      	orrs	r3, r2
 8005476:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68ba      	ldr	r2, [r7, #8]
 800547e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005490:	2300      	movs	r3, #0
}
 8005492:	4618      	mov	r0, r3
 8005494:	3714      	adds	r7, #20
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr
 800549e:	bf00      	nop
 80054a0:	40010000 	.word	0x40010000
 80054a4:	40000400 	.word	0x40000400
 80054a8:	40000800 	.word	0x40000800
 80054ac:	40000c00 	.word	0x40000c00
 80054b0:	40010400 	.word	0x40010400
 80054b4:	40014000 	.word	0x40014000
 80054b8:	40001800 	.word	0x40001800

080054bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054c4:	bf00      	nop
 80054c6:	370c      	adds	r7, #12
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr

080054d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054d8:	bf00      	nop
 80054da:	370c      	adds	r7, #12
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr

080054e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b082      	sub	sp, #8
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d101      	bne.n	80054f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e03f      	b.n	8005576 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d106      	bne.n	8005510 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f7fc fd66 	bl	8001fdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2224      	movs	r2, #36	; 0x24
 8005514:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	68da      	ldr	r2, [r3, #12]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005526:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f000 fab3 	bl	8005a94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	691a      	ldr	r2, [r3, #16]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800553c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	695a      	ldr	r2, [r3, #20]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800554c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	68da      	ldr	r2, [r3, #12]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800555c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2220      	movs	r2, #32
 8005568:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2220      	movs	r2, #32
 8005570:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	3708      	adds	r7, #8
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}

0800557e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800557e:	b480      	push	{r7}
 8005580:	b085      	sub	sp, #20
 8005582:	af00      	add	r7, sp, #0
 8005584:	60f8      	str	r0, [r7, #12]
 8005586:	60b9      	str	r1, [r7, #8]
 8005588:	4613      	mov	r3, r2
 800558a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005592:	b2db      	uxtb	r3, r3
 8005594:	2b20      	cmp	r3, #32
 8005596:	d140      	bne.n	800561a <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d002      	beq.n	80055a4 <HAL_UART_Receive_IT+0x26>
 800559e:	88fb      	ldrh	r3, [r7, #6]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d101      	bne.n	80055a8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	e039      	b.n	800561c <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d101      	bne.n	80055b6 <HAL_UART_Receive_IT+0x38>
 80055b2:	2302      	movs	r3, #2
 80055b4:	e032      	b.n	800561c <HAL_UART_Receive_IT+0x9e>
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2201      	movs	r2, #1
 80055ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	68ba      	ldr	r2, [r7, #8]
 80055c2:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	88fa      	ldrh	r2, [r7, #6]
 80055c8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	88fa      	ldrh	r2, [r7, #6]
 80055ce:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2200      	movs	r2, #0
 80055d4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2222      	movs	r2, #34	; 0x22
 80055da:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2200      	movs	r2, #0
 80055e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68da      	ldr	r2, [r3, #12]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055f4:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	695a      	ldr	r2, [r3, #20]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f042 0201 	orr.w	r2, r2, #1
 8005604:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	68da      	ldr	r2, [r3, #12]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f042 0220 	orr.w	r2, r2, #32
 8005614:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005616:	2300      	movs	r3, #0
 8005618:	e000      	b.n	800561c <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800561a:	2302      	movs	r3, #2
  }
}
 800561c:	4618      	mov	r0, r3
 800561e:	3714      	adds	r7, #20
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr

08005628 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b088      	sub	sp, #32
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	695b      	ldr	r3, [r3, #20]
 8005646:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005648:	2300      	movs	r3, #0
 800564a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800564c:	2300      	movs	r3, #0
 800564e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005650:	69fb      	ldr	r3, [r7, #28]
 8005652:	f003 030f 	and.w	r3, r3, #15
 8005656:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d10d      	bne.n	800567a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	f003 0320 	and.w	r3, r3, #32
 8005664:	2b00      	cmp	r3, #0
 8005666:	d008      	beq.n	800567a <HAL_UART_IRQHandler+0x52>
 8005668:	69bb      	ldr	r3, [r7, #24]
 800566a:	f003 0320 	and.w	r3, r3, #32
 800566e:	2b00      	cmp	r3, #0
 8005670:	d003      	beq.n	800567a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f000 f98c 	bl	8005990 <UART_Receive_IT>
      return;
 8005678:	e0d1      	b.n	800581e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	2b00      	cmp	r3, #0
 800567e:	f000 80b0 	beq.w	80057e2 <HAL_UART_IRQHandler+0x1ba>
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	f003 0301 	and.w	r3, r3, #1
 8005688:	2b00      	cmp	r3, #0
 800568a:	d105      	bne.n	8005698 <HAL_UART_IRQHandler+0x70>
 800568c:	69bb      	ldr	r3, [r7, #24]
 800568e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005692:	2b00      	cmp	r3, #0
 8005694:	f000 80a5 	beq.w	80057e2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005698:	69fb      	ldr	r3, [r7, #28]
 800569a:	f003 0301 	and.w	r3, r3, #1
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d00a      	beq.n	80056b8 <HAL_UART_IRQHandler+0x90>
 80056a2:	69bb      	ldr	r3, [r7, #24]
 80056a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d005      	beq.n	80056b8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056b0:	f043 0201 	orr.w	r2, r3, #1
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	f003 0304 	and.w	r3, r3, #4
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d00a      	beq.n	80056d8 <HAL_UART_IRQHandler+0xb0>
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	f003 0301 	and.w	r3, r3, #1
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d005      	beq.n	80056d8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056d0:	f043 0202 	orr.w	r2, r3, #2
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80056d8:	69fb      	ldr	r3, [r7, #28]
 80056da:	f003 0302 	and.w	r3, r3, #2
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d00a      	beq.n	80056f8 <HAL_UART_IRQHandler+0xd0>
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	f003 0301 	and.w	r3, r3, #1
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d005      	beq.n	80056f8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056f0:	f043 0204 	orr.w	r2, r3, #4
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80056f8:	69fb      	ldr	r3, [r7, #28]
 80056fa:	f003 0308 	and.w	r3, r3, #8
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d00f      	beq.n	8005722 <HAL_UART_IRQHandler+0xfa>
 8005702:	69bb      	ldr	r3, [r7, #24]
 8005704:	f003 0320 	and.w	r3, r3, #32
 8005708:	2b00      	cmp	r3, #0
 800570a:	d104      	bne.n	8005716 <HAL_UART_IRQHandler+0xee>
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	f003 0301 	and.w	r3, r3, #1
 8005712:	2b00      	cmp	r3, #0
 8005714:	d005      	beq.n	8005722 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800571a:	f043 0208 	orr.w	r2, r3, #8
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005726:	2b00      	cmp	r3, #0
 8005728:	d078      	beq.n	800581c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800572a:	69fb      	ldr	r3, [r7, #28]
 800572c:	f003 0320 	and.w	r3, r3, #32
 8005730:	2b00      	cmp	r3, #0
 8005732:	d007      	beq.n	8005744 <HAL_UART_IRQHandler+0x11c>
 8005734:	69bb      	ldr	r3, [r7, #24]
 8005736:	f003 0320 	and.w	r3, r3, #32
 800573a:	2b00      	cmp	r3, #0
 800573c:	d002      	beq.n	8005744 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f000 f926 	bl	8005990 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	695b      	ldr	r3, [r3, #20]
 800574a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800574e:	2b40      	cmp	r3, #64	; 0x40
 8005750:	bf0c      	ite	eq
 8005752:	2301      	moveq	r3, #1
 8005754:	2300      	movne	r3, #0
 8005756:	b2db      	uxtb	r3, r3
 8005758:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800575e:	f003 0308 	and.w	r3, r3, #8
 8005762:	2b00      	cmp	r3, #0
 8005764:	d102      	bne.n	800576c <HAL_UART_IRQHandler+0x144>
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d031      	beq.n	80057d0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f000 f86f 	bl	8005850 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	695b      	ldr	r3, [r3, #20]
 8005778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800577c:	2b40      	cmp	r3, #64	; 0x40
 800577e:	d123      	bne.n	80057c8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	695a      	ldr	r2, [r3, #20]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800578e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005794:	2b00      	cmp	r3, #0
 8005796:	d013      	beq.n	80057c0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800579c:	4a21      	ldr	r2, [pc, #132]	; (8005824 <HAL_UART_IRQHandler+0x1fc>)
 800579e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057a4:	4618      	mov	r0, r3
 80057a6:	f7fc fea7 	bl	80024f8 <HAL_DMA_Abort_IT>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d016      	beq.n	80057de <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80057ba:	4610      	mov	r0, r2
 80057bc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057be:	e00e      	b.n	80057de <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f000 f83b 	bl	800583c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057c6:	e00a      	b.n	80057de <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f000 f837 	bl	800583c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057ce:	e006      	b.n	80057de <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f000 f833 	bl	800583c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2200      	movs	r2, #0
 80057da:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80057dc:	e01e      	b.n	800581c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057de:	bf00      	nop
    return;
 80057e0:	e01c      	b.n	800581c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d008      	beq.n	80057fe <HAL_UART_IRQHandler+0x1d6>
 80057ec:	69bb      	ldr	r3, [r7, #24]
 80057ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d003      	beq.n	80057fe <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f000 f85c 	bl	80058b4 <UART_Transmit_IT>
    return;
 80057fc:	e00f      	b.n	800581e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80057fe:	69fb      	ldr	r3, [r7, #28]
 8005800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005804:	2b00      	cmp	r3, #0
 8005806:	d00a      	beq.n	800581e <HAL_UART_IRQHandler+0x1f6>
 8005808:	69bb      	ldr	r3, [r7, #24]
 800580a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800580e:	2b00      	cmp	r3, #0
 8005810:	d005      	beq.n	800581e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f000 f8a4 	bl	8005960 <UART_EndTransmit_IT>
    return;
 8005818:	bf00      	nop
 800581a:	e000      	b.n	800581e <HAL_UART_IRQHandler+0x1f6>
    return;
 800581c:	bf00      	nop
  }
}
 800581e:	3720      	adds	r7, #32
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}
 8005824:	0800588d 	.word	0x0800588d

08005828 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005828:	b480      	push	{r7}
 800582a:	b083      	sub	sp, #12
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005830:	bf00      	nop
 8005832:	370c      	adds	r7, #12
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr

0800583c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800583c:	b480      	push	{r7}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005844:	bf00      	nop
 8005846:	370c      	adds	r7, #12
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005850:	b480      	push	{r7}
 8005852:	b083      	sub	sp, #12
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	68da      	ldr	r2, [r3, #12]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005866:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	695a      	ldr	r2, [r3, #20]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f022 0201 	bic.w	r2, r2, #1
 8005876:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2220      	movs	r2, #32
 800587c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005880:	bf00      	nop
 8005882:	370c      	adds	r7, #12
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005898:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2200      	movs	r2, #0
 800589e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2200      	movs	r2, #0
 80058a4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80058a6:	68f8      	ldr	r0, [r7, #12]
 80058a8:	f7ff ffc8 	bl	800583c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058ac:	bf00      	nop
 80058ae:	3710      	adds	r7, #16
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b085      	sub	sp, #20
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	2b21      	cmp	r3, #33	; 0x21
 80058c6:	d144      	bne.n	8005952 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058d0:	d11a      	bne.n	8005908 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6a1b      	ldr	r3, [r3, #32]
 80058d6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	881b      	ldrh	r3, [r3, #0]
 80058dc:	461a      	mov	r2, r3
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058e6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	691b      	ldr	r3, [r3, #16]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d105      	bne.n	80058fc <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6a1b      	ldr	r3, [r3, #32]
 80058f4:	1c9a      	adds	r2, r3, #2
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	621a      	str	r2, [r3, #32]
 80058fa:	e00e      	b.n	800591a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6a1b      	ldr	r3, [r3, #32]
 8005900:	1c5a      	adds	r2, r3, #1
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	621a      	str	r2, [r3, #32]
 8005906:	e008      	b.n	800591a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6a1b      	ldr	r3, [r3, #32]
 800590c:	1c59      	adds	r1, r3, #1
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	6211      	str	r1, [r2, #32]
 8005912:	781a      	ldrb	r2, [r3, #0]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800591e:	b29b      	uxth	r3, r3
 8005920:	3b01      	subs	r3, #1
 8005922:	b29b      	uxth	r3, r3
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	4619      	mov	r1, r3
 8005928:	84d1      	strh	r1, [r2, #38]	; 0x26
 800592a:	2b00      	cmp	r3, #0
 800592c:	d10f      	bne.n	800594e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	68da      	ldr	r2, [r3, #12]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800593c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	68da      	ldr	r2, [r3, #12]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800594c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800594e:	2300      	movs	r3, #0
 8005950:	e000      	b.n	8005954 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005952:	2302      	movs	r3, #2
  }
}
 8005954:	4618      	mov	r0, r3
 8005956:	3714      	adds	r7, #20
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr

08005960 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b082      	sub	sp, #8
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	68da      	ldr	r2, [r3, #12]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005976:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2220      	movs	r2, #32
 800597c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f7ff ff51 	bl	8005828 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005986:	2300      	movs	r3, #0
}
 8005988:	4618      	mov	r0, r3
 800598a:	3708      	adds	r7, #8
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}

08005990 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	2b22      	cmp	r3, #34	; 0x22
 80059a2:	d171      	bne.n	8005a88 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059ac:	d123      	bne.n	80059f6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	691b      	ldr	r3, [r3, #16]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d10e      	bne.n	80059da <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059c8:	b29a      	uxth	r2, r3
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059d2:	1c9a      	adds	r2, r3, #2
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	629a      	str	r2, [r3, #40]	; 0x28
 80059d8:	e029      	b.n	8005a2e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	b29a      	uxth	r2, r3
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ee:	1c5a      	adds	r2, r3, #1
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	629a      	str	r2, [r3, #40]	; 0x28
 80059f4:	e01b      	b.n	8005a2e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d10a      	bne.n	8005a14 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	6858      	ldr	r0, [r3, #4]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a08:	1c59      	adds	r1, r3, #1
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	6291      	str	r1, [r2, #40]	; 0x28
 8005a0e:	b2c2      	uxtb	r2, r0
 8005a10:	701a      	strb	r2, [r3, #0]
 8005a12:	e00c      	b.n	8005a2e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	b2da      	uxtb	r2, r3
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a20:	1c58      	adds	r0, r3, #1
 8005a22:	6879      	ldr	r1, [r7, #4]
 8005a24:	6288      	str	r0, [r1, #40]	; 0x28
 8005a26:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005a2a:	b2d2      	uxtb	r2, r2
 8005a2c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	3b01      	subs	r3, #1
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	4619      	mov	r1, r3
 8005a3c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d120      	bne.n	8005a84 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	68da      	ldr	r2, [r3, #12]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f022 0220 	bic.w	r2, r2, #32
 8005a50:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	68da      	ldr	r2, [r3, #12]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a60:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	695a      	ldr	r2, [r3, #20]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f022 0201 	bic.w	r2, r2, #1
 8005a70:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2220      	movs	r2, #32
 8005a76:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f7fb fce4 	bl	8001448 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005a80:	2300      	movs	r3, #0
 8005a82:	e002      	b.n	8005a8a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005a84:	2300      	movs	r3, #0
 8005a86:	e000      	b.n	8005a8a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005a88:	2302      	movs	r3, #2
  }
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3710      	adds	r7, #16
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}
	...

08005a94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a98:	b085      	sub	sp, #20
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	691b      	ldr	r3, [r3, #16]
 8005aa4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	68da      	ldr	r2, [r3, #12]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	430a      	orrs	r2, r1
 8005ab2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	689a      	ldr	r2, [r3, #8]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	691b      	ldr	r3, [r3, #16]
 8005abc:	431a      	orrs	r2, r3
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	695b      	ldr	r3, [r3, #20]
 8005ac2:	431a      	orrs	r2, r3
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	69db      	ldr	r3, [r3, #28]
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	68db      	ldr	r3, [r3, #12]
 8005ad2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005ad6:	f023 030c 	bic.w	r3, r3, #12
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	6812      	ldr	r2, [r2, #0]
 8005ade:	68f9      	ldr	r1, [r7, #12]
 8005ae0:	430b      	orrs	r3, r1
 8005ae2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	695b      	ldr	r3, [r3, #20]
 8005aea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	699a      	ldr	r2, [r3, #24]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	430a      	orrs	r2, r1
 8005af8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	69db      	ldr	r3, [r3, #28]
 8005afe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b02:	f040 818b 	bne.w	8005e1c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4ac1      	ldr	r2, [pc, #772]	; (8005e10 <UART_SetConfig+0x37c>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d005      	beq.n	8005b1c <UART_SetConfig+0x88>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4abf      	ldr	r2, [pc, #764]	; (8005e14 <UART_SetConfig+0x380>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	f040 80bd 	bne.w	8005c96 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b1c:	f7fe fb9e 	bl	800425c <HAL_RCC_GetPCLK2Freq>
 8005b20:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	461d      	mov	r5, r3
 8005b26:	f04f 0600 	mov.w	r6, #0
 8005b2a:	46a8      	mov	r8, r5
 8005b2c:	46b1      	mov	r9, r6
 8005b2e:	eb18 0308 	adds.w	r3, r8, r8
 8005b32:	eb49 0409 	adc.w	r4, r9, r9
 8005b36:	4698      	mov	r8, r3
 8005b38:	46a1      	mov	r9, r4
 8005b3a:	eb18 0805 	adds.w	r8, r8, r5
 8005b3e:	eb49 0906 	adc.w	r9, r9, r6
 8005b42:	f04f 0100 	mov.w	r1, #0
 8005b46:	f04f 0200 	mov.w	r2, #0
 8005b4a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005b4e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005b52:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005b56:	4688      	mov	r8, r1
 8005b58:	4691      	mov	r9, r2
 8005b5a:	eb18 0005 	adds.w	r0, r8, r5
 8005b5e:	eb49 0106 	adc.w	r1, r9, r6
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	461d      	mov	r5, r3
 8005b68:	f04f 0600 	mov.w	r6, #0
 8005b6c:	196b      	adds	r3, r5, r5
 8005b6e:	eb46 0406 	adc.w	r4, r6, r6
 8005b72:	461a      	mov	r2, r3
 8005b74:	4623      	mov	r3, r4
 8005b76:	f7fa ff59 	bl	8000a2c <__aeabi_uldivmod>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	460c      	mov	r4, r1
 8005b7e:	461a      	mov	r2, r3
 8005b80:	4ba5      	ldr	r3, [pc, #660]	; (8005e18 <UART_SetConfig+0x384>)
 8005b82:	fba3 2302 	umull	r2, r3, r3, r2
 8005b86:	095b      	lsrs	r3, r3, #5
 8005b88:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	461d      	mov	r5, r3
 8005b90:	f04f 0600 	mov.w	r6, #0
 8005b94:	46a9      	mov	r9, r5
 8005b96:	46b2      	mov	sl, r6
 8005b98:	eb19 0309 	adds.w	r3, r9, r9
 8005b9c:	eb4a 040a 	adc.w	r4, sl, sl
 8005ba0:	4699      	mov	r9, r3
 8005ba2:	46a2      	mov	sl, r4
 8005ba4:	eb19 0905 	adds.w	r9, r9, r5
 8005ba8:	eb4a 0a06 	adc.w	sl, sl, r6
 8005bac:	f04f 0100 	mov.w	r1, #0
 8005bb0:	f04f 0200 	mov.w	r2, #0
 8005bb4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005bb8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005bbc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005bc0:	4689      	mov	r9, r1
 8005bc2:	4692      	mov	sl, r2
 8005bc4:	eb19 0005 	adds.w	r0, r9, r5
 8005bc8:	eb4a 0106 	adc.w	r1, sl, r6
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	461d      	mov	r5, r3
 8005bd2:	f04f 0600 	mov.w	r6, #0
 8005bd6:	196b      	adds	r3, r5, r5
 8005bd8:	eb46 0406 	adc.w	r4, r6, r6
 8005bdc:	461a      	mov	r2, r3
 8005bde:	4623      	mov	r3, r4
 8005be0:	f7fa ff24 	bl	8000a2c <__aeabi_uldivmod>
 8005be4:	4603      	mov	r3, r0
 8005be6:	460c      	mov	r4, r1
 8005be8:	461a      	mov	r2, r3
 8005bea:	4b8b      	ldr	r3, [pc, #556]	; (8005e18 <UART_SetConfig+0x384>)
 8005bec:	fba3 1302 	umull	r1, r3, r3, r2
 8005bf0:	095b      	lsrs	r3, r3, #5
 8005bf2:	2164      	movs	r1, #100	; 0x64
 8005bf4:	fb01 f303 	mul.w	r3, r1, r3
 8005bf8:	1ad3      	subs	r3, r2, r3
 8005bfa:	00db      	lsls	r3, r3, #3
 8005bfc:	3332      	adds	r3, #50	; 0x32
 8005bfe:	4a86      	ldr	r2, [pc, #536]	; (8005e18 <UART_SetConfig+0x384>)
 8005c00:	fba2 2303 	umull	r2, r3, r2, r3
 8005c04:	095b      	lsrs	r3, r3, #5
 8005c06:	005b      	lsls	r3, r3, #1
 8005c08:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005c0c:	4498      	add	r8, r3
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	461d      	mov	r5, r3
 8005c12:	f04f 0600 	mov.w	r6, #0
 8005c16:	46a9      	mov	r9, r5
 8005c18:	46b2      	mov	sl, r6
 8005c1a:	eb19 0309 	adds.w	r3, r9, r9
 8005c1e:	eb4a 040a 	adc.w	r4, sl, sl
 8005c22:	4699      	mov	r9, r3
 8005c24:	46a2      	mov	sl, r4
 8005c26:	eb19 0905 	adds.w	r9, r9, r5
 8005c2a:	eb4a 0a06 	adc.w	sl, sl, r6
 8005c2e:	f04f 0100 	mov.w	r1, #0
 8005c32:	f04f 0200 	mov.w	r2, #0
 8005c36:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c3a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005c3e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005c42:	4689      	mov	r9, r1
 8005c44:	4692      	mov	sl, r2
 8005c46:	eb19 0005 	adds.w	r0, r9, r5
 8005c4a:	eb4a 0106 	adc.w	r1, sl, r6
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	461d      	mov	r5, r3
 8005c54:	f04f 0600 	mov.w	r6, #0
 8005c58:	196b      	adds	r3, r5, r5
 8005c5a:	eb46 0406 	adc.w	r4, r6, r6
 8005c5e:	461a      	mov	r2, r3
 8005c60:	4623      	mov	r3, r4
 8005c62:	f7fa fee3 	bl	8000a2c <__aeabi_uldivmod>
 8005c66:	4603      	mov	r3, r0
 8005c68:	460c      	mov	r4, r1
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	4b6a      	ldr	r3, [pc, #424]	; (8005e18 <UART_SetConfig+0x384>)
 8005c6e:	fba3 1302 	umull	r1, r3, r3, r2
 8005c72:	095b      	lsrs	r3, r3, #5
 8005c74:	2164      	movs	r1, #100	; 0x64
 8005c76:	fb01 f303 	mul.w	r3, r1, r3
 8005c7a:	1ad3      	subs	r3, r2, r3
 8005c7c:	00db      	lsls	r3, r3, #3
 8005c7e:	3332      	adds	r3, #50	; 0x32
 8005c80:	4a65      	ldr	r2, [pc, #404]	; (8005e18 <UART_SetConfig+0x384>)
 8005c82:	fba2 2303 	umull	r2, r3, r2, r3
 8005c86:	095b      	lsrs	r3, r3, #5
 8005c88:	f003 0207 	and.w	r2, r3, #7
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4442      	add	r2, r8
 8005c92:	609a      	str	r2, [r3, #8]
 8005c94:	e26f      	b.n	8006176 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005c96:	f7fe facd 	bl	8004234 <HAL_RCC_GetPCLK1Freq>
 8005c9a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	461d      	mov	r5, r3
 8005ca0:	f04f 0600 	mov.w	r6, #0
 8005ca4:	46a8      	mov	r8, r5
 8005ca6:	46b1      	mov	r9, r6
 8005ca8:	eb18 0308 	adds.w	r3, r8, r8
 8005cac:	eb49 0409 	adc.w	r4, r9, r9
 8005cb0:	4698      	mov	r8, r3
 8005cb2:	46a1      	mov	r9, r4
 8005cb4:	eb18 0805 	adds.w	r8, r8, r5
 8005cb8:	eb49 0906 	adc.w	r9, r9, r6
 8005cbc:	f04f 0100 	mov.w	r1, #0
 8005cc0:	f04f 0200 	mov.w	r2, #0
 8005cc4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005cc8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005ccc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005cd0:	4688      	mov	r8, r1
 8005cd2:	4691      	mov	r9, r2
 8005cd4:	eb18 0005 	adds.w	r0, r8, r5
 8005cd8:	eb49 0106 	adc.w	r1, r9, r6
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	461d      	mov	r5, r3
 8005ce2:	f04f 0600 	mov.w	r6, #0
 8005ce6:	196b      	adds	r3, r5, r5
 8005ce8:	eb46 0406 	adc.w	r4, r6, r6
 8005cec:	461a      	mov	r2, r3
 8005cee:	4623      	mov	r3, r4
 8005cf0:	f7fa fe9c 	bl	8000a2c <__aeabi_uldivmod>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	460c      	mov	r4, r1
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	4b47      	ldr	r3, [pc, #284]	; (8005e18 <UART_SetConfig+0x384>)
 8005cfc:	fba3 2302 	umull	r2, r3, r3, r2
 8005d00:	095b      	lsrs	r3, r3, #5
 8005d02:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	461d      	mov	r5, r3
 8005d0a:	f04f 0600 	mov.w	r6, #0
 8005d0e:	46a9      	mov	r9, r5
 8005d10:	46b2      	mov	sl, r6
 8005d12:	eb19 0309 	adds.w	r3, r9, r9
 8005d16:	eb4a 040a 	adc.w	r4, sl, sl
 8005d1a:	4699      	mov	r9, r3
 8005d1c:	46a2      	mov	sl, r4
 8005d1e:	eb19 0905 	adds.w	r9, r9, r5
 8005d22:	eb4a 0a06 	adc.w	sl, sl, r6
 8005d26:	f04f 0100 	mov.w	r1, #0
 8005d2a:	f04f 0200 	mov.w	r2, #0
 8005d2e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d32:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005d36:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005d3a:	4689      	mov	r9, r1
 8005d3c:	4692      	mov	sl, r2
 8005d3e:	eb19 0005 	adds.w	r0, r9, r5
 8005d42:	eb4a 0106 	adc.w	r1, sl, r6
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	461d      	mov	r5, r3
 8005d4c:	f04f 0600 	mov.w	r6, #0
 8005d50:	196b      	adds	r3, r5, r5
 8005d52:	eb46 0406 	adc.w	r4, r6, r6
 8005d56:	461a      	mov	r2, r3
 8005d58:	4623      	mov	r3, r4
 8005d5a:	f7fa fe67 	bl	8000a2c <__aeabi_uldivmod>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	460c      	mov	r4, r1
 8005d62:	461a      	mov	r2, r3
 8005d64:	4b2c      	ldr	r3, [pc, #176]	; (8005e18 <UART_SetConfig+0x384>)
 8005d66:	fba3 1302 	umull	r1, r3, r3, r2
 8005d6a:	095b      	lsrs	r3, r3, #5
 8005d6c:	2164      	movs	r1, #100	; 0x64
 8005d6e:	fb01 f303 	mul.w	r3, r1, r3
 8005d72:	1ad3      	subs	r3, r2, r3
 8005d74:	00db      	lsls	r3, r3, #3
 8005d76:	3332      	adds	r3, #50	; 0x32
 8005d78:	4a27      	ldr	r2, [pc, #156]	; (8005e18 <UART_SetConfig+0x384>)
 8005d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d7e:	095b      	lsrs	r3, r3, #5
 8005d80:	005b      	lsls	r3, r3, #1
 8005d82:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005d86:	4498      	add	r8, r3
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	461d      	mov	r5, r3
 8005d8c:	f04f 0600 	mov.w	r6, #0
 8005d90:	46a9      	mov	r9, r5
 8005d92:	46b2      	mov	sl, r6
 8005d94:	eb19 0309 	adds.w	r3, r9, r9
 8005d98:	eb4a 040a 	adc.w	r4, sl, sl
 8005d9c:	4699      	mov	r9, r3
 8005d9e:	46a2      	mov	sl, r4
 8005da0:	eb19 0905 	adds.w	r9, r9, r5
 8005da4:	eb4a 0a06 	adc.w	sl, sl, r6
 8005da8:	f04f 0100 	mov.w	r1, #0
 8005dac:	f04f 0200 	mov.w	r2, #0
 8005db0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005db4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005db8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005dbc:	4689      	mov	r9, r1
 8005dbe:	4692      	mov	sl, r2
 8005dc0:	eb19 0005 	adds.w	r0, r9, r5
 8005dc4:	eb4a 0106 	adc.w	r1, sl, r6
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	461d      	mov	r5, r3
 8005dce:	f04f 0600 	mov.w	r6, #0
 8005dd2:	196b      	adds	r3, r5, r5
 8005dd4:	eb46 0406 	adc.w	r4, r6, r6
 8005dd8:	461a      	mov	r2, r3
 8005dda:	4623      	mov	r3, r4
 8005ddc:	f7fa fe26 	bl	8000a2c <__aeabi_uldivmod>
 8005de0:	4603      	mov	r3, r0
 8005de2:	460c      	mov	r4, r1
 8005de4:	461a      	mov	r2, r3
 8005de6:	4b0c      	ldr	r3, [pc, #48]	; (8005e18 <UART_SetConfig+0x384>)
 8005de8:	fba3 1302 	umull	r1, r3, r3, r2
 8005dec:	095b      	lsrs	r3, r3, #5
 8005dee:	2164      	movs	r1, #100	; 0x64
 8005df0:	fb01 f303 	mul.w	r3, r1, r3
 8005df4:	1ad3      	subs	r3, r2, r3
 8005df6:	00db      	lsls	r3, r3, #3
 8005df8:	3332      	adds	r3, #50	; 0x32
 8005dfa:	4a07      	ldr	r2, [pc, #28]	; (8005e18 <UART_SetConfig+0x384>)
 8005dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8005e00:	095b      	lsrs	r3, r3, #5
 8005e02:	f003 0207 	and.w	r2, r3, #7
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4442      	add	r2, r8
 8005e0c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005e0e:	e1b2      	b.n	8006176 <UART_SetConfig+0x6e2>
 8005e10:	40011000 	.word	0x40011000
 8005e14:	40011400 	.word	0x40011400
 8005e18:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4ad7      	ldr	r2, [pc, #860]	; (8006180 <UART_SetConfig+0x6ec>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d005      	beq.n	8005e32 <UART_SetConfig+0x39e>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4ad6      	ldr	r2, [pc, #856]	; (8006184 <UART_SetConfig+0x6f0>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	f040 80d1 	bne.w	8005fd4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e32:	f7fe fa13 	bl	800425c <HAL_RCC_GetPCLK2Freq>
 8005e36:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	469a      	mov	sl, r3
 8005e3c:	f04f 0b00 	mov.w	fp, #0
 8005e40:	46d0      	mov	r8, sl
 8005e42:	46d9      	mov	r9, fp
 8005e44:	eb18 0308 	adds.w	r3, r8, r8
 8005e48:	eb49 0409 	adc.w	r4, r9, r9
 8005e4c:	4698      	mov	r8, r3
 8005e4e:	46a1      	mov	r9, r4
 8005e50:	eb18 080a 	adds.w	r8, r8, sl
 8005e54:	eb49 090b 	adc.w	r9, r9, fp
 8005e58:	f04f 0100 	mov.w	r1, #0
 8005e5c:	f04f 0200 	mov.w	r2, #0
 8005e60:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005e64:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005e68:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005e6c:	4688      	mov	r8, r1
 8005e6e:	4691      	mov	r9, r2
 8005e70:	eb1a 0508 	adds.w	r5, sl, r8
 8005e74:	eb4b 0609 	adc.w	r6, fp, r9
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	4619      	mov	r1, r3
 8005e7e:	f04f 0200 	mov.w	r2, #0
 8005e82:	f04f 0300 	mov.w	r3, #0
 8005e86:	f04f 0400 	mov.w	r4, #0
 8005e8a:	0094      	lsls	r4, r2, #2
 8005e8c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005e90:	008b      	lsls	r3, r1, #2
 8005e92:	461a      	mov	r2, r3
 8005e94:	4623      	mov	r3, r4
 8005e96:	4628      	mov	r0, r5
 8005e98:	4631      	mov	r1, r6
 8005e9a:	f7fa fdc7 	bl	8000a2c <__aeabi_uldivmod>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	460c      	mov	r4, r1
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	4bb8      	ldr	r3, [pc, #736]	; (8006188 <UART_SetConfig+0x6f4>)
 8005ea6:	fba3 2302 	umull	r2, r3, r3, r2
 8005eaa:	095b      	lsrs	r3, r3, #5
 8005eac:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	469b      	mov	fp, r3
 8005eb4:	f04f 0c00 	mov.w	ip, #0
 8005eb8:	46d9      	mov	r9, fp
 8005eba:	46e2      	mov	sl, ip
 8005ebc:	eb19 0309 	adds.w	r3, r9, r9
 8005ec0:	eb4a 040a 	adc.w	r4, sl, sl
 8005ec4:	4699      	mov	r9, r3
 8005ec6:	46a2      	mov	sl, r4
 8005ec8:	eb19 090b 	adds.w	r9, r9, fp
 8005ecc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005ed0:	f04f 0100 	mov.w	r1, #0
 8005ed4:	f04f 0200 	mov.w	r2, #0
 8005ed8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005edc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005ee0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005ee4:	4689      	mov	r9, r1
 8005ee6:	4692      	mov	sl, r2
 8005ee8:	eb1b 0509 	adds.w	r5, fp, r9
 8005eec:	eb4c 060a 	adc.w	r6, ip, sl
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	4619      	mov	r1, r3
 8005ef6:	f04f 0200 	mov.w	r2, #0
 8005efa:	f04f 0300 	mov.w	r3, #0
 8005efe:	f04f 0400 	mov.w	r4, #0
 8005f02:	0094      	lsls	r4, r2, #2
 8005f04:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005f08:	008b      	lsls	r3, r1, #2
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	4623      	mov	r3, r4
 8005f0e:	4628      	mov	r0, r5
 8005f10:	4631      	mov	r1, r6
 8005f12:	f7fa fd8b 	bl	8000a2c <__aeabi_uldivmod>
 8005f16:	4603      	mov	r3, r0
 8005f18:	460c      	mov	r4, r1
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	4b9a      	ldr	r3, [pc, #616]	; (8006188 <UART_SetConfig+0x6f4>)
 8005f1e:	fba3 1302 	umull	r1, r3, r3, r2
 8005f22:	095b      	lsrs	r3, r3, #5
 8005f24:	2164      	movs	r1, #100	; 0x64
 8005f26:	fb01 f303 	mul.w	r3, r1, r3
 8005f2a:	1ad3      	subs	r3, r2, r3
 8005f2c:	011b      	lsls	r3, r3, #4
 8005f2e:	3332      	adds	r3, #50	; 0x32
 8005f30:	4a95      	ldr	r2, [pc, #596]	; (8006188 <UART_SetConfig+0x6f4>)
 8005f32:	fba2 2303 	umull	r2, r3, r2, r3
 8005f36:	095b      	lsrs	r3, r3, #5
 8005f38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f3c:	4498      	add	r8, r3
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	469b      	mov	fp, r3
 8005f42:	f04f 0c00 	mov.w	ip, #0
 8005f46:	46d9      	mov	r9, fp
 8005f48:	46e2      	mov	sl, ip
 8005f4a:	eb19 0309 	adds.w	r3, r9, r9
 8005f4e:	eb4a 040a 	adc.w	r4, sl, sl
 8005f52:	4699      	mov	r9, r3
 8005f54:	46a2      	mov	sl, r4
 8005f56:	eb19 090b 	adds.w	r9, r9, fp
 8005f5a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005f5e:	f04f 0100 	mov.w	r1, #0
 8005f62:	f04f 0200 	mov.w	r2, #0
 8005f66:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f6a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005f6e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005f72:	4689      	mov	r9, r1
 8005f74:	4692      	mov	sl, r2
 8005f76:	eb1b 0509 	adds.w	r5, fp, r9
 8005f7a:	eb4c 060a 	adc.w	r6, ip, sl
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	4619      	mov	r1, r3
 8005f84:	f04f 0200 	mov.w	r2, #0
 8005f88:	f04f 0300 	mov.w	r3, #0
 8005f8c:	f04f 0400 	mov.w	r4, #0
 8005f90:	0094      	lsls	r4, r2, #2
 8005f92:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005f96:	008b      	lsls	r3, r1, #2
 8005f98:	461a      	mov	r2, r3
 8005f9a:	4623      	mov	r3, r4
 8005f9c:	4628      	mov	r0, r5
 8005f9e:	4631      	mov	r1, r6
 8005fa0:	f7fa fd44 	bl	8000a2c <__aeabi_uldivmod>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	460c      	mov	r4, r1
 8005fa8:	461a      	mov	r2, r3
 8005faa:	4b77      	ldr	r3, [pc, #476]	; (8006188 <UART_SetConfig+0x6f4>)
 8005fac:	fba3 1302 	umull	r1, r3, r3, r2
 8005fb0:	095b      	lsrs	r3, r3, #5
 8005fb2:	2164      	movs	r1, #100	; 0x64
 8005fb4:	fb01 f303 	mul.w	r3, r1, r3
 8005fb8:	1ad3      	subs	r3, r2, r3
 8005fba:	011b      	lsls	r3, r3, #4
 8005fbc:	3332      	adds	r3, #50	; 0x32
 8005fbe:	4a72      	ldr	r2, [pc, #456]	; (8006188 <UART_SetConfig+0x6f4>)
 8005fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8005fc4:	095b      	lsrs	r3, r3, #5
 8005fc6:	f003 020f 	and.w	r2, r3, #15
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4442      	add	r2, r8
 8005fd0:	609a      	str	r2, [r3, #8]
 8005fd2:	e0d0      	b.n	8006176 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005fd4:	f7fe f92e 	bl	8004234 <HAL_RCC_GetPCLK1Freq>
 8005fd8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	469a      	mov	sl, r3
 8005fde:	f04f 0b00 	mov.w	fp, #0
 8005fe2:	46d0      	mov	r8, sl
 8005fe4:	46d9      	mov	r9, fp
 8005fe6:	eb18 0308 	adds.w	r3, r8, r8
 8005fea:	eb49 0409 	adc.w	r4, r9, r9
 8005fee:	4698      	mov	r8, r3
 8005ff0:	46a1      	mov	r9, r4
 8005ff2:	eb18 080a 	adds.w	r8, r8, sl
 8005ff6:	eb49 090b 	adc.w	r9, r9, fp
 8005ffa:	f04f 0100 	mov.w	r1, #0
 8005ffe:	f04f 0200 	mov.w	r2, #0
 8006002:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006006:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800600a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800600e:	4688      	mov	r8, r1
 8006010:	4691      	mov	r9, r2
 8006012:	eb1a 0508 	adds.w	r5, sl, r8
 8006016:	eb4b 0609 	adc.w	r6, fp, r9
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	4619      	mov	r1, r3
 8006020:	f04f 0200 	mov.w	r2, #0
 8006024:	f04f 0300 	mov.w	r3, #0
 8006028:	f04f 0400 	mov.w	r4, #0
 800602c:	0094      	lsls	r4, r2, #2
 800602e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006032:	008b      	lsls	r3, r1, #2
 8006034:	461a      	mov	r2, r3
 8006036:	4623      	mov	r3, r4
 8006038:	4628      	mov	r0, r5
 800603a:	4631      	mov	r1, r6
 800603c:	f7fa fcf6 	bl	8000a2c <__aeabi_uldivmod>
 8006040:	4603      	mov	r3, r0
 8006042:	460c      	mov	r4, r1
 8006044:	461a      	mov	r2, r3
 8006046:	4b50      	ldr	r3, [pc, #320]	; (8006188 <UART_SetConfig+0x6f4>)
 8006048:	fba3 2302 	umull	r2, r3, r3, r2
 800604c:	095b      	lsrs	r3, r3, #5
 800604e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	469b      	mov	fp, r3
 8006056:	f04f 0c00 	mov.w	ip, #0
 800605a:	46d9      	mov	r9, fp
 800605c:	46e2      	mov	sl, ip
 800605e:	eb19 0309 	adds.w	r3, r9, r9
 8006062:	eb4a 040a 	adc.w	r4, sl, sl
 8006066:	4699      	mov	r9, r3
 8006068:	46a2      	mov	sl, r4
 800606a:	eb19 090b 	adds.w	r9, r9, fp
 800606e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006072:	f04f 0100 	mov.w	r1, #0
 8006076:	f04f 0200 	mov.w	r2, #0
 800607a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800607e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006082:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006086:	4689      	mov	r9, r1
 8006088:	4692      	mov	sl, r2
 800608a:	eb1b 0509 	adds.w	r5, fp, r9
 800608e:	eb4c 060a 	adc.w	r6, ip, sl
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	4619      	mov	r1, r3
 8006098:	f04f 0200 	mov.w	r2, #0
 800609c:	f04f 0300 	mov.w	r3, #0
 80060a0:	f04f 0400 	mov.w	r4, #0
 80060a4:	0094      	lsls	r4, r2, #2
 80060a6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80060aa:	008b      	lsls	r3, r1, #2
 80060ac:	461a      	mov	r2, r3
 80060ae:	4623      	mov	r3, r4
 80060b0:	4628      	mov	r0, r5
 80060b2:	4631      	mov	r1, r6
 80060b4:	f7fa fcba 	bl	8000a2c <__aeabi_uldivmod>
 80060b8:	4603      	mov	r3, r0
 80060ba:	460c      	mov	r4, r1
 80060bc:	461a      	mov	r2, r3
 80060be:	4b32      	ldr	r3, [pc, #200]	; (8006188 <UART_SetConfig+0x6f4>)
 80060c0:	fba3 1302 	umull	r1, r3, r3, r2
 80060c4:	095b      	lsrs	r3, r3, #5
 80060c6:	2164      	movs	r1, #100	; 0x64
 80060c8:	fb01 f303 	mul.w	r3, r1, r3
 80060cc:	1ad3      	subs	r3, r2, r3
 80060ce:	011b      	lsls	r3, r3, #4
 80060d0:	3332      	adds	r3, #50	; 0x32
 80060d2:	4a2d      	ldr	r2, [pc, #180]	; (8006188 <UART_SetConfig+0x6f4>)
 80060d4:	fba2 2303 	umull	r2, r3, r2, r3
 80060d8:	095b      	lsrs	r3, r3, #5
 80060da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060de:	4498      	add	r8, r3
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	469b      	mov	fp, r3
 80060e4:	f04f 0c00 	mov.w	ip, #0
 80060e8:	46d9      	mov	r9, fp
 80060ea:	46e2      	mov	sl, ip
 80060ec:	eb19 0309 	adds.w	r3, r9, r9
 80060f0:	eb4a 040a 	adc.w	r4, sl, sl
 80060f4:	4699      	mov	r9, r3
 80060f6:	46a2      	mov	sl, r4
 80060f8:	eb19 090b 	adds.w	r9, r9, fp
 80060fc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006100:	f04f 0100 	mov.w	r1, #0
 8006104:	f04f 0200 	mov.w	r2, #0
 8006108:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800610c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006110:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006114:	4689      	mov	r9, r1
 8006116:	4692      	mov	sl, r2
 8006118:	eb1b 0509 	adds.w	r5, fp, r9
 800611c:	eb4c 060a 	adc.w	r6, ip, sl
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	4619      	mov	r1, r3
 8006126:	f04f 0200 	mov.w	r2, #0
 800612a:	f04f 0300 	mov.w	r3, #0
 800612e:	f04f 0400 	mov.w	r4, #0
 8006132:	0094      	lsls	r4, r2, #2
 8006134:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006138:	008b      	lsls	r3, r1, #2
 800613a:	461a      	mov	r2, r3
 800613c:	4623      	mov	r3, r4
 800613e:	4628      	mov	r0, r5
 8006140:	4631      	mov	r1, r6
 8006142:	f7fa fc73 	bl	8000a2c <__aeabi_uldivmod>
 8006146:	4603      	mov	r3, r0
 8006148:	460c      	mov	r4, r1
 800614a:	461a      	mov	r2, r3
 800614c:	4b0e      	ldr	r3, [pc, #56]	; (8006188 <UART_SetConfig+0x6f4>)
 800614e:	fba3 1302 	umull	r1, r3, r3, r2
 8006152:	095b      	lsrs	r3, r3, #5
 8006154:	2164      	movs	r1, #100	; 0x64
 8006156:	fb01 f303 	mul.w	r3, r1, r3
 800615a:	1ad3      	subs	r3, r2, r3
 800615c:	011b      	lsls	r3, r3, #4
 800615e:	3332      	adds	r3, #50	; 0x32
 8006160:	4a09      	ldr	r2, [pc, #36]	; (8006188 <UART_SetConfig+0x6f4>)
 8006162:	fba2 2303 	umull	r2, r3, r2, r3
 8006166:	095b      	lsrs	r3, r3, #5
 8006168:	f003 020f 	and.w	r2, r3, #15
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4442      	add	r2, r8
 8006172:	609a      	str	r2, [r3, #8]
}
 8006174:	e7ff      	b.n	8006176 <UART_SetConfig+0x6e2>
 8006176:	bf00      	nop
 8006178:	3714      	adds	r7, #20
 800617a:	46bd      	mov	sp, r7
 800617c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006180:	40011000 	.word	0x40011000
 8006184:	40011400 	.word	0x40011400
 8006188:	51eb851f 	.word	0x51eb851f

0800618c <__libc_init_array>:
 800618c:	b570      	push	{r4, r5, r6, lr}
 800618e:	4e0d      	ldr	r6, [pc, #52]	; (80061c4 <__libc_init_array+0x38>)
 8006190:	4c0d      	ldr	r4, [pc, #52]	; (80061c8 <__libc_init_array+0x3c>)
 8006192:	1ba4      	subs	r4, r4, r6
 8006194:	10a4      	asrs	r4, r4, #2
 8006196:	2500      	movs	r5, #0
 8006198:	42a5      	cmp	r5, r4
 800619a:	d109      	bne.n	80061b0 <__libc_init_array+0x24>
 800619c:	4e0b      	ldr	r6, [pc, #44]	; (80061cc <__libc_init_array+0x40>)
 800619e:	4c0c      	ldr	r4, [pc, #48]	; (80061d0 <__libc_init_array+0x44>)
 80061a0:	f000 f9ac 	bl	80064fc <_init>
 80061a4:	1ba4      	subs	r4, r4, r6
 80061a6:	10a4      	asrs	r4, r4, #2
 80061a8:	2500      	movs	r5, #0
 80061aa:	42a5      	cmp	r5, r4
 80061ac:	d105      	bne.n	80061ba <__libc_init_array+0x2e>
 80061ae:	bd70      	pop	{r4, r5, r6, pc}
 80061b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80061b4:	4798      	blx	r3
 80061b6:	3501      	adds	r5, #1
 80061b8:	e7ee      	b.n	8006198 <__libc_init_array+0xc>
 80061ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80061be:	4798      	blx	r3
 80061c0:	3501      	adds	r5, #1
 80061c2:	e7f2      	b.n	80061aa <__libc_init_array+0x1e>
 80061c4:	08006554 	.word	0x08006554
 80061c8:	08006554 	.word	0x08006554
 80061cc:	08006554 	.word	0x08006554
 80061d0:	08006558 	.word	0x08006558

080061d4 <memset>:
 80061d4:	4402      	add	r2, r0
 80061d6:	4603      	mov	r3, r0
 80061d8:	4293      	cmp	r3, r2
 80061da:	d100      	bne.n	80061de <memset+0xa>
 80061dc:	4770      	bx	lr
 80061de:	f803 1b01 	strb.w	r1, [r3], #1
 80061e2:	e7f9      	b.n	80061d8 <memset+0x4>

080061e4 <atan2f>:
 80061e4:	f000 b800 	b.w	80061e8 <__ieee754_atan2f>

080061e8 <__ieee754_atan2f>:
 80061e8:	ee10 2a90 	vmov	r2, s1
 80061ec:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80061f0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80061f4:	b510      	push	{r4, lr}
 80061f6:	eef0 7a40 	vmov.f32	s15, s0
 80061fa:	dc06      	bgt.n	800620a <__ieee754_atan2f+0x22>
 80061fc:	ee10 0a10 	vmov	r0, s0
 8006200:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8006204:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8006208:	dd04      	ble.n	8006214 <__ieee754_atan2f+0x2c>
 800620a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800620e:	eeb0 0a67 	vmov.f32	s0, s15
 8006212:	bd10      	pop	{r4, pc}
 8006214:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8006218:	d103      	bne.n	8006222 <__ieee754_atan2f+0x3a>
 800621a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800621e:	f000 b891 	b.w	8006344 <atanf>
 8006222:	1794      	asrs	r4, r2, #30
 8006224:	f004 0402 	and.w	r4, r4, #2
 8006228:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800622c:	b943      	cbnz	r3, 8006240 <__ieee754_atan2f+0x58>
 800622e:	2c02      	cmp	r4, #2
 8006230:	d06e      	beq.n	8006310 <__ieee754_atan2f+0x128>
 8006232:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8006318 <__ieee754_atan2f+0x130>
 8006236:	2c03      	cmp	r4, #3
 8006238:	bf08      	it	eq
 800623a:	eef0 7a47 	vmoveq.f32	s15, s14
 800623e:	e7e6      	b.n	800620e <__ieee754_atan2f+0x26>
 8006240:	b941      	cbnz	r1, 8006254 <__ieee754_atan2f+0x6c>
 8006242:	eddf 7a36 	vldr	s15, [pc, #216]	; 800631c <__ieee754_atan2f+0x134>
 8006246:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8006320 <__ieee754_atan2f+0x138>
 800624a:	2800      	cmp	r0, #0
 800624c:	bfb8      	it	lt
 800624e:	eef0 7a47 	vmovlt.f32	s15, s14
 8006252:	e7dc      	b.n	800620e <__ieee754_atan2f+0x26>
 8006254:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8006258:	d122      	bne.n	80062a0 <__ieee754_atan2f+0xb8>
 800625a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800625e:	d112      	bne.n	8006286 <__ieee754_atan2f+0x9e>
 8006260:	2c02      	cmp	r4, #2
 8006262:	d00a      	beq.n	800627a <__ieee754_atan2f+0x92>
 8006264:	2c03      	cmp	r4, #3
 8006266:	d00b      	beq.n	8006280 <__ieee754_atan2f+0x98>
 8006268:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8006324 <__ieee754_atan2f+0x13c>
 800626c:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8006328 <__ieee754_atan2f+0x140>
 8006270:	2c01      	cmp	r4, #1
 8006272:	bf18      	it	ne
 8006274:	eef0 7a47 	vmovne.f32	s15, s14
 8006278:	e7c9      	b.n	800620e <__ieee754_atan2f+0x26>
 800627a:	eddf 7a2c 	vldr	s15, [pc, #176]	; 800632c <__ieee754_atan2f+0x144>
 800627e:	e7c6      	b.n	800620e <__ieee754_atan2f+0x26>
 8006280:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8006330 <__ieee754_atan2f+0x148>
 8006284:	e7c3      	b.n	800620e <__ieee754_atan2f+0x26>
 8006286:	2c02      	cmp	r4, #2
 8006288:	d042      	beq.n	8006310 <__ieee754_atan2f+0x128>
 800628a:	2c03      	cmp	r4, #3
 800628c:	d005      	beq.n	800629a <__ieee754_atan2f+0xb2>
 800628e:	2c01      	cmp	r4, #1
 8006290:	eddf 7a28 	vldr	s15, [pc, #160]	; 8006334 <__ieee754_atan2f+0x14c>
 8006294:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8006338 <__ieee754_atan2f+0x150>
 8006298:	e7eb      	b.n	8006272 <__ieee754_atan2f+0x8a>
 800629a:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8006318 <__ieee754_atan2f+0x130>
 800629e:	e7b6      	b.n	800620e <__ieee754_atan2f+0x26>
 80062a0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80062a4:	d0cd      	beq.n	8006242 <__ieee754_atan2f+0x5a>
 80062a6:	1a5b      	subs	r3, r3, r1
 80062a8:	15db      	asrs	r3, r3, #23
 80062aa:	2b3c      	cmp	r3, #60	; 0x3c
 80062ac:	dc1a      	bgt.n	80062e4 <__ieee754_atan2f+0xfc>
 80062ae:	2a00      	cmp	r2, #0
 80062b0:	da01      	bge.n	80062b6 <__ieee754_atan2f+0xce>
 80062b2:	333c      	adds	r3, #60	; 0x3c
 80062b4:	db19      	blt.n	80062ea <__ieee754_atan2f+0x102>
 80062b6:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80062ba:	f000 f917 	bl	80064ec <fabsf>
 80062be:	f000 f841 	bl	8006344 <atanf>
 80062c2:	eef0 7a40 	vmov.f32	s15, s0
 80062c6:	2c01      	cmp	r4, #1
 80062c8:	d012      	beq.n	80062f0 <__ieee754_atan2f+0x108>
 80062ca:	2c02      	cmp	r4, #2
 80062cc:	d017      	beq.n	80062fe <__ieee754_atan2f+0x116>
 80062ce:	2c00      	cmp	r4, #0
 80062d0:	d09d      	beq.n	800620e <__ieee754_atan2f+0x26>
 80062d2:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800633c <__ieee754_atan2f+0x154>
 80062d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80062da:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8006340 <__ieee754_atan2f+0x158>
 80062de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80062e2:	e794      	b.n	800620e <__ieee754_atan2f+0x26>
 80062e4:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800631c <__ieee754_atan2f+0x134>
 80062e8:	e7ed      	b.n	80062c6 <__ieee754_atan2f+0xde>
 80062ea:	eddf 7a13 	vldr	s15, [pc, #76]	; 8006338 <__ieee754_atan2f+0x150>
 80062ee:	e7ea      	b.n	80062c6 <__ieee754_atan2f+0xde>
 80062f0:	ee17 3a90 	vmov	r3, s15
 80062f4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80062f8:	ee07 3a90 	vmov	s15, r3
 80062fc:	e787      	b.n	800620e <__ieee754_atan2f+0x26>
 80062fe:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800633c <__ieee754_atan2f+0x154>
 8006302:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006306:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8006340 <__ieee754_atan2f+0x158>
 800630a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800630e:	e77e      	b.n	800620e <__ieee754_atan2f+0x26>
 8006310:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8006340 <__ieee754_atan2f+0x158>
 8006314:	e77b      	b.n	800620e <__ieee754_atan2f+0x26>
 8006316:	bf00      	nop
 8006318:	c0490fdb 	.word	0xc0490fdb
 800631c:	3fc90fdb 	.word	0x3fc90fdb
 8006320:	bfc90fdb 	.word	0xbfc90fdb
 8006324:	bf490fdb 	.word	0xbf490fdb
 8006328:	3f490fdb 	.word	0x3f490fdb
 800632c:	4016cbe4 	.word	0x4016cbe4
 8006330:	c016cbe4 	.word	0xc016cbe4
 8006334:	80000000 	.word	0x80000000
 8006338:	00000000 	.word	0x00000000
 800633c:	33bbbd2e 	.word	0x33bbbd2e
 8006340:	40490fdb 	.word	0x40490fdb

08006344 <atanf>:
 8006344:	b538      	push	{r3, r4, r5, lr}
 8006346:	ee10 5a10 	vmov	r5, s0
 800634a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800634e:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8006352:	eef0 7a40 	vmov.f32	s15, s0
 8006356:	db10      	blt.n	800637a <atanf+0x36>
 8006358:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800635c:	dd04      	ble.n	8006368 <atanf+0x24>
 800635e:	ee70 7a00 	vadd.f32	s15, s0, s0
 8006362:	eeb0 0a67 	vmov.f32	s0, s15
 8006366:	bd38      	pop	{r3, r4, r5, pc}
 8006368:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 80064a0 <atanf+0x15c>
 800636c:	eddf 7a4d 	vldr	s15, [pc, #308]	; 80064a4 <atanf+0x160>
 8006370:	2d00      	cmp	r5, #0
 8006372:	bfd8      	it	le
 8006374:	eef0 7a47 	vmovle.f32	s15, s14
 8006378:	e7f3      	b.n	8006362 <atanf+0x1e>
 800637a:	4b4b      	ldr	r3, [pc, #300]	; (80064a8 <atanf+0x164>)
 800637c:	429c      	cmp	r4, r3
 800637e:	dc10      	bgt.n	80063a2 <atanf+0x5e>
 8006380:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8006384:	da0a      	bge.n	800639c <atanf+0x58>
 8006386:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80064ac <atanf+0x168>
 800638a:	ee30 7a07 	vadd.f32	s14, s0, s14
 800638e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006392:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8006396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800639a:	dce2      	bgt.n	8006362 <atanf+0x1e>
 800639c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80063a0:	e013      	b.n	80063ca <atanf+0x86>
 80063a2:	f000 f8a3 	bl	80064ec <fabsf>
 80063a6:	4b42      	ldr	r3, [pc, #264]	; (80064b0 <atanf+0x16c>)
 80063a8:	429c      	cmp	r4, r3
 80063aa:	dc4f      	bgt.n	800644c <atanf+0x108>
 80063ac:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80063b0:	429c      	cmp	r4, r3
 80063b2:	dc41      	bgt.n	8006438 <atanf+0xf4>
 80063b4:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80063b8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80063bc:	eea0 7a27 	vfma.f32	s14, s0, s15
 80063c0:	2300      	movs	r3, #0
 80063c2:	ee30 0a27 	vadd.f32	s0, s0, s15
 80063c6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80063ca:	1c5a      	adds	r2, r3, #1
 80063cc:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80063d0:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80064b4 <atanf+0x170>
 80063d4:	eddf 5a38 	vldr	s11, [pc, #224]	; 80064b8 <atanf+0x174>
 80063d8:	ed9f 5a38 	vldr	s10, [pc, #224]	; 80064bc <atanf+0x178>
 80063dc:	ee66 6a06 	vmul.f32	s13, s12, s12
 80063e0:	eee6 5a87 	vfma.f32	s11, s13, s14
 80063e4:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80064c0 <atanf+0x17c>
 80063e8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80063ec:	eddf 5a35 	vldr	s11, [pc, #212]	; 80064c4 <atanf+0x180>
 80063f0:	eee7 5a26 	vfma.f32	s11, s14, s13
 80063f4:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80064c8 <atanf+0x184>
 80063f8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80063fc:	eddf 5a33 	vldr	s11, [pc, #204]	; 80064cc <atanf+0x188>
 8006400:	eee7 5a26 	vfma.f32	s11, s14, s13
 8006404:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80064d0 <atanf+0x18c>
 8006408:	eea6 5a87 	vfma.f32	s10, s13, s14
 800640c:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80064d4 <atanf+0x190>
 8006410:	eea5 7a26 	vfma.f32	s14, s10, s13
 8006414:	ed9f 5a30 	vldr	s10, [pc, #192]	; 80064d8 <atanf+0x194>
 8006418:	eea7 5a26 	vfma.f32	s10, s14, s13
 800641c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80064dc <atanf+0x198>
 8006420:	eea5 7a26 	vfma.f32	s14, s10, s13
 8006424:	ee27 7a26 	vmul.f32	s14, s14, s13
 8006428:	eea5 7a86 	vfma.f32	s14, s11, s12
 800642c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006430:	d121      	bne.n	8006476 <atanf+0x132>
 8006432:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006436:	e794      	b.n	8006362 <atanf+0x1e>
 8006438:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800643c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8006440:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006444:	2301      	movs	r3, #1
 8006446:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800644a:	e7be      	b.n	80063ca <atanf+0x86>
 800644c:	4b24      	ldr	r3, [pc, #144]	; (80064e0 <atanf+0x19c>)
 800644e:	429c      	cmp	r4, r3
 8006450:	dc0b      	bgt.n	800646a <atanf+0x126>
 8006452:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8006456:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800645a:	eea0 7a27 	vfma.f32	s14, s0, s15
 800645e:	2302      	movs	r3, #2
 8006460:	ee70 6a67 	vsub.f32	s13, s0, s15
 8006464:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006468:	e7af      	b.n	80063ca <atanf+0x86>
 800646a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800646e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8006472:	2303      	movs	r3, #3
 8006474:	e7a9      	b.n	80063ca <atanf+0x86>
 8006476:	4a1b      	ldr	r2, [pc, #108]	; (80064e4 <atanf+0x1a0>)
 8006478:	491b      	ldr	r1, [pc, #108]	; (80064e8 <atanf+0x1a4>)
 800647a:	009b      	lsls	r3, r3, #2
 800647c:	441a      	add	r2, r3
 800647e:	440b      	add	r3, r1
 8006480:	edd3 6a00 	vldr	s13, [r3]
 8006484:	ee37 7a66 	vsub.f32	s14, s14, s13
 8006488:	2d00      	cmp	r5, #0
 800648a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800648e:	ed92 7a00 	vldr	s14, [r2]
 8006492:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006496:	bfb8      	it	lt
 8006498:	eef1 7a67 	vneglt.f32	s15, s15
 800649c:	e761      	b.n	8006362 <atanf+0x1e>
 800649e:	bf00      	nop
 80064a0:	bfc90fdb 	.word	0xbfc90fdb
 80064a4:	3fc90fdb 	.word	0x3fc90fdb
 80064a8:	3edfffff 	.word	0x3edfffff
 80064ac:	7149f2ca 	.word	0x7149f2ca
 80064b0:	3f97ffff 	.word	0x3f97ffff
 80064b4:	3c8569d7 	.word	0x3c8569d7
 80064b8:	3d4bda59 	.word	0x3d4bda59
 80064bc:	bd6ef16b 	.word	0xbd6ef16b
 80064c0:	3d886b35 	.word	0x3d886b35
 80064c4:	3dba2e6e 	.word	0x3dba2e6e
 80064c8:	3e124925 	.word	0x3e124925
 80064cc:	3eaaaaab 	.word	0x3eaaaaab
 80064d0:	bd15a221 	.word	0xbd15a221
 80064d4:	bd9d8795 	.word	0xbd9d8795
 80064d8:	bde38e38 	.word	0xbde38e38
 80064dc:	be4ccccd 	.word	0xbe4ccccd
 80064e0:	401bffff 	.word	0x401bffff
 80064e4:	0800652c 	.word	0x0800652c
 80064e8:	0800653c 	.word	0x0800653c

080064ec <fabsf>:
 80064ec:	ee10 3a10 	vmov	r3, s0
 80064f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80064f4:	ee00 3a10 	vmov	s0, r3
 80064f8:	4770      	bx	lr
	...

080064fc <_init>:
 80064fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064fe:	bf00      	nop
 8006500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006502:	bc08      	pop	{r3}
 8006504:	469e      	mov	lr, r3
 8006506:	4770      	bx	lr

08006508 <_fini>:
 8006508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800650a:	bf00      	nop
 800650c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800650e:	bc08      	pop	{r3}
 8006510:	469e      	mov	lr, r3
 8006512:	4770      	bx	lr
