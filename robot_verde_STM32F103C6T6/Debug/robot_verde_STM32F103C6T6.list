
robot_verde_STM32F103C6T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f10  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0800301c  0800301c  0001301c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003040  08003040  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003040  08003040  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003040  08003040  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003040  08003040  00013040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003044  08003044  00013044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003048  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  20000010  08003058  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  08003058  0002012c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000845d  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000158e  00000000  00000000  00028496  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000990  00000000  00000000  00029a28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008c8  00000000  00000000  0002a3b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001655a  00000000  00000000  0002ac80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007a97  00000000  00000000  000411da  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00081df0  00000000  00000000  00048c71  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000caa61  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026dc  00000000  00000000  000caadc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08003004 	.word	0x08003004

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08003004 	.word	0x08003004

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0310 	add.w	r3, r7, #16
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000160:	4b34      	ldr	r3, [pc, #208]	; (8000234 <MX_GPIO_Init+0xe8>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a33      	ldr	r2, [pc, #204]	; (8000234 <MX_GPIO_Init+0xe8>)
 8000166:	f043 0310 	orr.w	r3, r3, #16
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b31      	ldr	r3, [pc, #196]	; (8000234 <MX_GPIO_Init+0xe8>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0310 	and.w	r3, r3, #16
 8000174:	60fb      	str	r3, [r7, #12]
 8000176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000178:	4b2e      	ldr	r3, [pc, #184]	; (8000234 <MX_GPIO_Init+0xe8>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a2d      	ldr	r2, [pc, #180]	; (8000234 <MX_GPIO_Init+0xe8>)
 800017e:	f043 0320 	orr.w	r3, r3, #32
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b2b      	ldr	r3, [pc, #172]	; (8000234 <MX_GPIO_Init+0xe8>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0320 	and.w	r3, r3, #32
 800018c:	60bb      	str	r3, [r7, #8]
 800018e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000190:	4b28      	ldr	r3, [pc, #160]	; (8000234 <MX_GPIO_Init+0xe8>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a27      	ldr	r2, [pc, #156]	; (8000234 <MX_GPIO_Init+0xe8>)
 8000196:	f043 0304 	orr.w	r3, r3, #4
 800019a:	6193      	str	r3, [r2, #24]
 800019c:	4b25      	ldr	r3, [pc, #148]	; (8000234 <MX_GPIO_Init+0xe8>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	f003 0304 	and.w	r3, r3, #4
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001a8:	4b22      	ldr	r3, [pc, #136]	; (8000234 <MX_GPIO_Init+0xe8>)
 80001aa:	699b      	ldr	r3, [r3, #24]
 80001ac:	4a21      	ldr	r2, [pc, #132]	; (8000234 <MX_GPIO_Init+0xe8>)
 80001ae:	f043 0308 	orr.w	r3, r3, #8
 80001b2:	6193      	str	r3, [r2, #24]
 80001b4:	4b1f      	ldr	r3, [pc, #124]	; (8000234 <MX_GPIO_Init+0xe8>)
 80001b6:	699b      	ldr	r3, [r3, #24]
 80001b8:	f003 0308 	and.w	r3, r3, #8
 80001bc:	603b      	str	r3, [r7, #0]
 80001be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80001c0:	2200      	movs	r2, #0
 80001c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001c6:	481c      	ldr	r0, [pc, #112]	; (8000238 <MX_GPIO_Init+0xec>)
 80001c8:	f001 f893 	bl	80012f2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUT_in2_Pin|OUT_in3_Pin|OUT_in4_Pin|OUT_in1_Pin
 80001cc:	2200      	movs	r2, #0
 80001ce:	f64c 4102 	movw	r1, #52226	; 0xcc02
 80001d2:	481a      	ldr	r0, [pc, #104]	; (800023c <MX_GPIO_Init+0xf0>)
 80001d4:	f001 f88d 	bl	80012f2 <HAL_GPIO_WritePin>
                          |OUT_Trig_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80001d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001de:	2301      	movs	r3, #1
 80001e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001e2:	2300      	movs	r3, #0
 80001e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001e6:	2302      	movs	r3, #2
 80001e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80001ea:	f107 0310 	add.w	r3, r7, #16
 80001ee:	4619      	mov	r1, r3
 80001f0:	4811      	ldr	r0, [pc, #68]	; (8000238 <MX_GPIO_Init+0xec>)
 80001f2:	f000 ff15 	bl	8001020 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = IN_sensorR_Pin|IN_sensorL_Pin;
 80001f6:	2330      	movs	r3, #48	; 0x30
 80001f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80001fa:	2300      	movs	r3, #0
 80001fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80001fe:	2301      	movs	r3, #1
 8000200:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000202:	f107 0310 	add.w	r3, r7, #16
 8000206:	4619      	mov	r1, r3
 8000208:	480d      	ldr	r0, [pc, #52]	; (8000240 <MX_GPIO_Init+0xf4>)
 800020a:	f000 ff09 	bl	8001020 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = OUT_in2_Pin|OUT_in3_Pin|OUT_in4_Pin|OUT_in1_Pin
 800020e:	f64c 4302 	movw	r3, #52226	; 0xcc02
 8000212:	613b      	str	r3, [r7, #16]
                          |OUT_Trig_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000214:	2301      	movs	r3, #1
 8000216:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000218:	2300      	movs	r3, #0
 800021a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800021c:	2302      	movs	r3, #2
 800021e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000220:	f107 0310 	add.w	r3, r7, #16
 8000224:	4619      	mov	r1, r3
 8000226:	4805      	ldr	r0, [pc, #20]	; (800023c <MX_GPIO_Init+0xf0>)
 8000228:	f000 fefa 	bl	8001020 <HAL_GPIO_Init>

}
 800022c:	bf00      	nop
 800022e:	3720      	adds	r7, #32
 8000230:	46bd      	mov	sp, r7
 8000232:	bd80      	pop	{r7, pc}
 8000234:	40021000 	.word	0x40021000
 8000238:	40011000 	.word	0x40011000
 800023c:	40010c00 	.word	0x40010c00
 8000240:	40010800 	.word	0x40010800

08000244 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000248:	f000 fd7a 	bl	8000d40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800024c:	f000 fa2a 	bl	80006a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000250:	f7ff ff7c 	bl	800014c <MX_GPIO_Init>
  MX_TIM1_Init();
 8000254:	f000 fb2e 	bl	80008b4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000258:	f000 fb82 	bl	8000960 <MX_TIM2_Init>
  MX_TIM3_Init();
 800025c:	f000 fbd2 	bl	8000a04 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 1);
 8000260:	2201      	movs	r2, #1
 8000262:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000266:	48a5      	ldr	r0, [pc, #660]	; (80004fc <main+0x2b8>)
 8000268:	f001 f843 	bl	80012f2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 1);
 800026c:	2201      	movs	r2, #1
 800026e:	2102      	movs	r1, #2
 8000270:	48a2      	ldr	r0, [pc, #648]	; (80004fc <main+0x2b8>)
 8000272:	f001 f83e 	bl	80012f2 <HAL_GPIO_WritePin>

//  HAL_TIM_Base_Start_IT(&htim4);
  HAL_TIM_Base_Start(&htim1); //encoder
 8000276:	48a2      	ldr	r0, [pc, #648]	; (8000500 <main+0x2bc>)
 8000278:	f001 fc8e 	bl	8001b98 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim2); //encoder
 800027c:	48a1      	ldr	r0, [pc, #644]	; (8000504 <main+0x2c0>)
 800027e:	f001 fc8b 	bl	8001b98 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 8000282:	48a1      	ldr	r0, [pc, #644]	; (8000508 <main+0x2c4>)
 8000284:	f001 fccc 	bl	8001c20 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000288:	2100      	movs	r1, #0
 800028a:	489f      	ldr	r0, [pc, #636]	; (8000508 <main+0x2c4>)
 800028c:	f001 fd64 	bl	8001d58 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000290:	2104      	movs	r1, #4
 8000292:	489d      	ldr	r0, [pc, #628]	; (8000508 <main+0x2c4>)
 8000294:	f001 fd60 	bl	8001d58 <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3);
 8000298:	2108      	movs	r1, #8
 800029a:	489b      	ldr	r0, [pc, #620]	; (8000508 <main+0x2c4>)
 800029c:	f001 fe50 	bl	8001f40 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_4);
 80002a0:	210c      	movs	r1, #12
 80002a2:	4899      	ldr	r0, [pc, #612]	; (8000508 <main+0x2c4>)
 80002a4:	f001 fe4c 	bl	8001f40 <HAL_TIM_IC_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  switch (statusBurst){
 80002a8:	4b98      	ldr	r3, [pc, #608]	; (800050c <main+0x2c8>)
 80002aa:	781b      	ldrb	r3, [r3, #0]
 80002ac:	2b01      	cmp	r3, #1
 80002ae:	d03d      	beq.n	800032c <main+0xe8>
 80002b0:	2b02      	cmp	r3, #2
 80002b2:	d04f      	beq.n	8000354 <main+0x110>
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	f040 8083 	bne.w	80003c0 <main+0x17c>
		  case 0:

			  if (desbordeTIM3 < 3572) break; //3572 = 150 ms aprox; 2380 = 100 ms aprox.
 80002ba:	4b95      	ldr	r3, [pc, #596]	; (8000510 <main+0x2cc>)
 80002bc:	881b      	ldrh	r3, [r3, #0]
 80002be:	f640 52f3 	movw	r2, #3571	; 0xdf3
 80002c2:	4293      	cmp	r3, r2
 80002c4:	d979      	bls.n	80003ba <main+0x176>

			  HAL_GPIO_WritePin(OUT_Trig_GPIO_Port, OUT_Trig_Pin, 1);
 80002c6:	2201      	movs	r2, #1
 80002c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002cc:	488b      	ldr	r0, [pc, #556]	; (80004fc <main+0x2b8>)
 80002ce:	f001 f810 	bl	80012f2 <HAL_GPIO_WritePin>

			  delayTrig = 10 + (uint8_t)__HAL_TIM_GET_COUNTER (&htim3);
 80002d2:	4b8d      	ldr	r3, [pc, #564]	; (8000508 <main+0x2c4>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002d8:	b2db      	uxtb	r3, r3
 80002da:	330a      	adds	r3, #10
 80002dc:	b2da      	uxtb	r2, r3
 80002de:	4b8d      	ldr	r3, [pc, #564]	; (8000514 <main+0x2d0>)
 80002e0:	701a      	strb	r2, [r3, #0]
			  if (delayTrig > 32){
 80002e2:	4b8c      	ldr	r3, [pc, #560]	; (8000514 <main+0x2d0>)
 80002e4:	781b      	ldrb	r3, [r3, #0]
 80002e6:	2b20      	cmp	r3, #32
 80002e8:	d90b      	bls.n	8000302 <main+0xbe>
				  delayTrig -= 32;
 80002ea:	4b8a      	ldr	r3, [pc, #552]	; (8000514 <main+0x2d0>)
 80002ec:	781b      	ldrb	r3, [r3, #0]
 80002ee:	3b20      	subs	r3, #32
 80002f0:	b2da      	uxtb	r2, r3
 80002f2:	4b88      	ldr	r3, [pc, #544]	; (8000514 <main+0x2d0>)
 80002f4:	701a      	strb	r2, [r3, #0]
				  while (__HAL_TIM_GET_COUNTER (&htim3) > 32);
 80002f6:	bf00      	nop
 80002f8:	4b83      	ldr	r3, [pc, #524]	; (8000508 <main+0x2c4>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002fe:	2b20      	cmp	r3, #32
 8000300:	d8fa      	bhi.n	80002f8 <main+0xb4>
			  }
			  while (__HAL_TIM_GET_COUNTER (&htim3) < delayTrig);
 8000302:	bf00      	nop
 8000304:	4b80      	ldr	r3, [pc, #512]	; (8000508 <main+0x2c4>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800030a:	4a82      	ldr	r2, [pc, #520]	; (8000514 <main+0x2d0>)
 800030c:	7812      	ldrb	r2, [r2, #0]
 800030e:	4293      	cmp	r3, r2
 8000310:	d3f8      	bcc.n	8000304 <main+0xc0>

			  HAL_GPIO_WritePin(OUT_Trig_GPIO_Port, OUT_Trig_Pin, 0);
 8000312:	2200      	movs	r2, #0
 8000314:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000318:	4878      	ldr	r0, [pc, #480]	; (80004fc <main+0x2b8>)
 800031a:	f000 ffea 	bl	80012f2 <HAL_GPIO_WritePin>

			  desbordeTIM3 = 0;
 800031e:	4b7c      	ldr	r3, [pc, #496]	; (8000510 <main+0x2cc>)
 8000320:	2200      	movs	r2, #0
 8000322:	801a      	strh	r2, [r3, #0]

			  statusBurst = 1;
 8000324:	4b79      	ldr	r3, [pc, #484]	; (800050c <main+0x2c8>)
 8000326:	2201      	movs	r2, #1
 8000328:	701a      	strb	r2, [r3, #0]
		  break;
 800032a:	e049      	b.n	80003c0 <main+0x17c>
		  case 1:

			  if (desbordeTIM3 > 595){ // 25 ms.
 800032c:	4b78      	ldr	r3, [pc, #480]	; (8000510 <main+0x2cc>)
 800032e:	881b      	ldrh	r3, [r3, #0]
 8000330:	f5b3 7f15 	cmp.w	r3, #596	; 0x254
 8000334:	d303      	bcc.n	800033e <main+0xfa>
				  statusBurst = 0;
 8000336:	4b75      	ldr	r3, [pc, #468]	; (800050c <main+0x2c8>)
 8000338:	2200      	movs	r2, #0
 800033a:	701a      	strb	r2, [r3, #0]
				  break;
 800033c:	e040      	b.n	80003c0 <main+0x17c>
			  }

			  if (flagEco != 0){
 800033e:	4b76      	ldr	r3, [pc, #472]	; (8000518 <main+0x2d4>)
 8000340:	781b      	ldrb	r3, [r3, #0]
 8000342:	2b00      	cmp	r3, #0
 8000344:	d03b      	beq.n	80003be <main+0x17a>
				  flagEco = 0;
 8000346:	4b74      	ldr	r3, [pc, #464]	; (8000518 <main+0x2d4>)
 8000348:	2200      	movs	r2, #0
 800034a:	701a      	strb	r2, [r3, #0]
				  statusBurst = 2;
 800034c:	4b6f      	ldr	r3, [pc, #444]	; (800050c <main+0x2c8>)
 800034e:	2202      	movs	r2, #2
 8000350:	701a      	strb	r2, [r3, #0]
			  }
		  break;
 8000352:	e034      	b.n	80003be <main+0x17a>
		  case 2:
			  if (cuentasDesbordes != 0){
 8000354:	4b71      	ldr	r3, [pc, #452]	; (800051c <main+0x2d8>)
 8000356:	881b      	ldrh	r3, [r3, #0]
 8000358:	2b00      	cmp	r3, #0
 800035a:	d00e      	beq.n	800037a <main+0x136>
				  cuentaPulsos = 42 * cuentasDesbordes + ic2 - ic1;
 800035c:	4b6f      	ldr	r3, [pc, #444]	; (800051c <main+0x2d8>)
 800035e:	881b      	ldrh	r3, [r3, #0]
 8000360:	461a      	mov	r2, r3
 8000362:	232a      	movs	r3, #42	; 0x2a
 8000364:	fb03 f302 	mul.w	r3, r3, r2
 8000368:	461a      	mov	r2, r3
 800036a:	4b6d      	ldr	r3, [pc, #436]	; (8000520 <main+0x2dc>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	441a      	add	r2, r3
 8000370:	4b6c      	ldr	r3, [pc, #432]	; (8000524 <main+0x2e0>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	1ad3      	subs	r3, r2, r3
 8000376:	4a6c      	ldr	r2, [pc, #432]	; (8000528 <main+0x2e4>)
 8000378:	6013      	str	r3, [r2, #0]
			  }

			  if (cuentaPulsos < 25000){
 800037a:	4b6b      	ldr	r3, [pc, #428]	; (8000528 <main+0x2e4>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	f246 12a7 	movw	r2, #24999	; 0x61a7
 8000382:	4293      	cmp	r3, r2
 8000384:	d80e      	bhi.n	80003a4 <main+0x160>
				  distancia = cuentaPulsos * 34 / 2000;
 8000386:	4b68      	ldr	r3, [pc, #416]	; (8000528 <main+0x2e4>)
 8000388:	681a      	ldr	r2, [r3, #0]
 800038a:	4613      	mov	r3, r2
 800038c:	011b      	lsls	r3, r3, #4
 800038e:	4413      	add	r3, r2
 8000390:	005b      	lsls	r3, r3, #1
 8000392:	461a      	mov	r2, r3
 8000394:	4b65      	ldr	r3, [pc, #404]	; (800052c <main+0x2e8>)
 8000396:	fba3 2302 	umull	r2, r3, r3, r2
 800039a:	09db      	lsrs	r3, r3, #7
 800039c:	b29a      	uxth	r2, r3
 800039e:	4b64      	ldr	r3, [pc, #400]	; (8000530 <main+0x2ec>)
 80003a0:	801a      	strh	r2, [r3, #0]
 80003a2:	e003      	b.n	80003ac <main+0x168>
			  }else{
				  distancia = 400;
 80003a4:	4b62      	ldr	r3, [pc, #392]	; (8000530 <main+0x2ec>)
 80003a6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80003aa:	801a      	strh	r2, [r3, #0]
			  }

			  statusBurst = 0;
 80003ac:	4b57      	ldr	r3, [pc, #348]	; (800050c <main+0x2c8>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	701a      	strb	r2, [r3, #0]
			  desbordeTIM3 = 0;
 80003b2:	4b57      	ldr	r3, [pc, #348]	; (8000510 <main+0x2cc>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	801a      	strh	r2, [r3, #0]
		  break;
 80003b8:	e002      	b.n	80003c0 <main+0x17c>
			  if (desbordeTIM3 < 3572) break; //3572 = 150 ms aprox; 2380 = 100 ms aprox.
 80003ba:	bf00      	nop
 80003bc:	e000      	b.n	80003c0 <main+0x17c>
		  break;
 80003be:	bf00      	nop

	  } //fin switch (statusBurst)


	  if (desbordeSysTick > 210){
 80003c0:	4b5c      	ldr	r3, [pc, #368]	; (8000534 <main+0x2f0>)
 80003c2:	881b      	ldrh	r3, [r3, #0]
 80003c4:	2bd2      	cmp	r3, #210	; 0xd2
 80003c6:	d93c      	bls.n	8000442 <main+0x1fe>
		  encoder1 = __HAL_TIM_GET_COUNTER(&htim1);
 80003c8:	4b4d      	ldr	r3, [pc, #308]	; (8000500 <main+0x2bc>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003ce:	b21a      	sxth	r2, r3
 80003d0:	4b59      	ldr	r3, [pc, #356]	; (8000538 <main+0x2f4>)
 80003d2:	801a      	strh	r2, [r3, #0]
		  __HAL_TIM_SET_COUNTER(&htim1, 0);
 80003d4:	4b4a      	ldr	r3, [pc, #296]	; (8000500 <main+0x2bc>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	2200      	movs	r2, #0
 80003da:	625a      	str	r2, [r3, #36]	; 0x24
		  encoder2 = __HAL_TIM_GET_COUNTER(&htim2);
 80003dc:	4b49      	ldr	r3, [pc, #292]	; (8000504 <main+0x2c0>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003e2:	b21a      	sxth	r2, r3
 80003e4:	4b55      	ldr	r3, [pc, #340]	; (800053c <main+0x2f8>)
 80003e6:	801a      	strh	r2, [r3, #0]
		  __HAL_TIM_SET_COUNTER(&htim2, 0);
 80003e8:	4b46      	ldr	r3, [pc, #280]	; (8000504 <main+0x2c0>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	2200      	movs	r2, #0
 80003ee:	625a      	str	r2, [r3, #36]	; 0x24

		  if (encoder1 > 5){
 80003f0:	4b51      	ldr	r3, [pc, #324]	; (8000538 <main+0x2f4>)
 80003f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80003f6:	2b05      	cmp	r3, #5
 80003f8:	dd04      	ble.n	8000404 <main+0x1c0>
			  TIM3->CCR1--;
 80003fa:	4b51      	ldr	r3, [pc, #324]	; (8000540 <main+0x2fc>)
 80003fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80003fe:	3a01      	subs	r2, #1
 8000400:	635a      	str	r2, [r3, #52]	; 0x34
 8000402:	e008      	b.n	8000416 <main+0x1d2>
		  }else if (encoder2 < 5){
 8000404:	4b4d      	ldr	r3, [pc, #308]	; (800053c <main+0x2f8>)
 8000406:	f9b3 3000 	ldrsh.w	r3, [r3]
 800040a:	2b04      	cmp	r3, #4
 800040c:	dc03      	bgt.n	8000416 <main+0x1d2>
			  TIM3->CCR1++;
 800040e:	4b4c      	ldr	r3, [pc, #304]	; (8000540 <main+0x2fc>)
 8000410:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000412:	3201      	adds	r2, #1
 8000414:	635a      	str	r2, [r3, #52]	; 0x34
		  }

		  if (encoder2 > 5){
 8000416:	4b49      	ldr	r3, [pc, #292]	; (800053c <main+0x2f8>)
 8000418:	f9b3 3000 	ldrsh.w	r3, [r3]
 800041c:	2b05      	cmp	r3, #5
 800041e:	dd04      	ble.n	800042a <main+0x1e6>
			  TIM3->CCR2--;
 8000420:	4b47      	ldr	r3, [pc, #284]	; (8000540 <main+0x2fc>)
 8000422:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000424:	3a01      	subs	r2, #1
 8000426:	639a      	str	r2, [r3, #56]	; 0x38
 8000428:	e008      	b.n	800043c <main+0x1f8>
		  }else if (encoder2 < 5){
 800042a:	4b44      	ldr	r3, [pc, #272]	; (800053c <main+0x2f8>)
 800042c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000430:	2b04      	cmp	r3, #4
 8000432:	dc03      	bgt.n	800043c <main+0x1f8>
			  TIM3->CCR2++;
 8000434:	4b42      	ldr	r3, [pc, #264]	; (8000540 <main+0x2fc>)
 8000436:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000438:	3201      	adds	r2, #1
 800043a:	639a      	str	r2, [r3, #56]	; 0x38
		  }

		  desbordeSysTick = 0;
 800043c:	4b3d      	ldr	r3, [pc, #244]	; (8000534 <main+0x2f0>)
 800043e:	2200      	movs	r2, #0
 8000440:	801a      	strh	r2, [r3, #0]



	  //sensores_dist = SI << 2 | SF << 1 | SD (logica negativa)

	  SI = (HAL_GPIO_ReadPin(IN_sensorL_GPIO_Port, IN_sensorL_Pin)) ;
 8000442:	2120      	movs	r1, #32
 8000444:	483f      	ldr	r0, [pc, #252]	; (8000544 <main+0x300>)
 8000446:	f000 ff3d 	bl	80012c4 <HAL_GPIO_ReadPin>
 800044a:	4603      	mov	r3, r0
 800044c:	461a      	mov	r2, r3
 800044e:	4b3e      	ldr	r3, [pc, #248]	; (8000548 <main+0x304>)
 8000450:	701a      	strb	r2, [r3, #0]
	  SD = HAL_GPIO_ReadPin(IN_sensorR_GPIO_Port, IN_sensorR_Pin);
 8000452:	2110      	movs	r1, #16
 8000454:	483b      	ldr	r0, [pc, #236]	; (8000544 <main+0x300>)
 8000456:	f000 ff35 	bl	80012c4 <HAL_GPIO_ReadPin>
 800045a:	4603      	mov	r3, r0
 800045c:	461a      	mov	r2, r3
 800045e:	4b3b      	ldr	r3, [pc, #236]	; (800054c <main+0x308>)
 8000460:	701a      	strb	r2, [r3, #0]
	  if (distancia < 25) SF = 0; else SF = 1;
 8000462:	4b33      	ldr	r3, [pc, #204]	; (8000530 <main+0x2ec>)
 8000464:	881b      	ldrh	r3, [r3, #0]
 8000466:	2b18      	cmp	r3, #24
 8000468:	d803      	bhi.n	8000472 <main+0x22e>
 800046a:	4b39      	ldr	r3, [pc, #228]	; (8000550 <main+0x30c>)
 800046c:	2200      	movs	r2, #0
 800046e:	701a      	strb	r2, [r3, #0]
 8000470:	e002      	b.n	8000478 <main+0x234>
 8000472:	4b37      	ldr	r3, [pc, #220]	; (8000550 <main+0x30c>)
 8000474:	2201      	movs	r2, #1
 8000476:	701a      	strb	r2, [r3, #0]

	  sensores_dist = SI << 2 | SF << 1 | SD;
 8000478:	4b33      	ldr	r3, [pc, #204]	; (8000548 <main+0x304>)
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	009b      	lsls	r3, r3, #2
 800047e:	b25a      	sxtb	r2, r3
 8000480:	4b33      	ldr	r3, [pc, #204]	; (8000550 <main+0x30c>)
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	005b      	lsls	r3, r3, #1
 8000486:	b25b      	sxtb	r3, r3
 8000488:	4313      	orrs	r3, r2
 800048a:	b25a      	sxtb	r2, r3
 800048c:	4b2f      	ldr	r3, [pc, #188]	; (800054c <main+0x308>)
 800048e:	781b      	ldrb	r3, [r3, #0]
 8000490:	b25b      	sxtb	r3, r3
 8000492:	4313      	orrs	r3, r2
 8000494:	b25b      	sxtb	r3, r3
 8000496:	b2da      	uxtb	r2, r3
 8000498:	4b2e      	ldr	r3, [pc, #184]	; (8000554 <main+0x310>)
 800049a:	701a      	strb	r2, [r3, #0]




	  switch (status_movimiento) {
 800049c:	4b2e      	ldr	r3, [pc, #184]	; (8000558 <main+0x314>)
 800049e:	781b      	ldrb	r3, [r3, #0]
 80004a0:	2b05      	cmp	r3, #5
 80004a2:	f200 80f7 	bhi.w	8000694 <main+0x450>
 80004a6:	a201      	add	r2, pc, #4	; (adr r2, 80004ac <main+0x268>)
 80004a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004ac:	080004c5 	.word	0x080004c5
 80004b0:	0800055d 	.word	0x0800055d
 80004b4:	08000665 	.word	0x08000665
 80004b8:	080005c9 	.word	0x080005c9
 80004bc:	08000617 	.word	0x08000617
 80004c0:	08000695 	.word	0x08000695
		  case QUIETO:

			  HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 0);
 80004c4:	2200      	movs	r2, #0
 80004c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004ca:	480c      	ldr	r0, [pc, #48]	; (80004fc <main+0x2b8>)
 80004cc:	f000 ff11 	bl	80012f2 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in4_Pin, 0);
 80004d0:	2200      	movs	r2, #0
 80004d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004d6:	4809      	ldr	r0, [pc, #36]	; (80004fc <main+0x2b8>)
 80004d8:	f000 ff0b 	bl	80012f2 <HAL_GPIO_WritePin>

			  HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in2_Pin, 0);
 80004dc:	2200      	movs	r2, #0
 80004de:	2102      	movs	r1, #2
 80004e0:	4806      	ldr	r0, [pc, #24]	; (80004fc <main+0x2b8>)
 80004e2:	f000 ff06 	bl	80012f2 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in3_Pin, 0);
 80004e6:	2200      	movs	r2, #0
 80004e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004ec:	4803      	ldr	r0, [pc, #12]	; (80004fc <main+0x2b8>)
 80004ee:	f000 ff00 	bl	80012f2 <HAL_GPIO_WritePin>

			  status_movimiento = AVANZANDO;
 80004f2:	4b19      	ldr	r3, [pc, #100]	; (8000558 <main+0x314>)
 80004f4:	2201      	movs	r2, #1
 80004f6:	701a      	strb	r2, [r3, #0]
			  break;
 80004f8:	e0cd      	b.n	8000696 <main+0x452>
 80004fa:	bf00      	nop
 80004fc:	40010c00 	.word	0x40010c00
 8000500:	20000098 	.word	0x20000098
 8000504:	200000e0 	.word	0x200000e0
 8000508:	20000050 	.word	0x20000050
 800050c:	20000044 	.word	0x20000044
 8000510:	2000002e 	.word	0x2000002e
 8000514:	20000045 	.word	0x20000045
 8000518:	2000004d 	.word	0x2000004d
 800051c:	2000003c 	.word	0x2000003c
 8000520:	20000038 	.word	0x20000038
 8000524:	20000034 	.word	0x20000034
 8000528:	20000040 	.word	0x20000040
 800052c:	10624dd3 	.word	0x10624dd3
 8000530:	20000000 	.word	0x20000000
 8000534:	20000030 	.word	0x20000030
 8000538:	20000046 	.word	0x20000046
 800053c:	20000048 	.word	0x20000048
 8000540:	40000400 	.word	0x40000400
 8000544:	40010800 	.word	0x40010800
 8000548:	2000004c 	.word	0x2000004c
 800054c:	2000004b 	.word	0x2000004b
 8000550:	2000004a 	.word	0x2000004a
 8000554:	2000002d 	.word	0x2000002d
 8000558:	2000002c 	.word	0x2000002c
		  case AVANZANDO:

			  HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 1);
 800055c:	2201      	movs	r2, #1
 800055e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000562:	484d      	ldr	r0, [pc, #308]	; (8000698 <main+0x454>)
 8000564:	f000 fec5 	bl	80012f2 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in4_Pin, 1);
 8000568:	2201      	movs	r2, #1
 800056a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800056e:	484a      	ldr	r0, [pc, #296]	; (8000698 <main+0x454>)
 8000570:	f000 febf 	bl	80012f2 <HAL_GPIO_WritePin>

			  HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in2_Pin, 0);
 8000574:	2200      	movs	r2, #0
 8000576:	2102      	movs	r1, #2
 8000578:	4847      	ldr	r0, [pc, #284]	; (8000698 <main+0x454>)
 800057a:	f000 feba 	bl	80012f2 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in3_Pin, 0);
 800057e:	2200      	movs	r2, #0
 8000580:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000584:	4844      	ldr	r0, [pc, #272]	; (8000698 <main+0x454>)
 8000586:	f000 feb4 	bl	80012f2 <HAL_GPIO_WritePin>

			  switch (sensores_dist) {
 800058a:	4b44      	ldr	r3, [pc, #272]	; (800069c <main+0x458>)
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	2b06      	cmp	r3, #6
 8000590:	d818      	bhi.n	80005c4 <main+0x380>
 8000592:	a201      	add	r2, pc, #4	; (adr r2, 8000598 <main+0x354>)
 8000594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000598:	080005b5 	.word	0x080005b5
 800059c:	080005bd 	.word	0x080005bd
 80005a0:	080005c5 	.word	0x080005c5
 80005a4:	080005bd 	.word	0x080005bd
 80005a8:	080005b5 	.word	0x080005b5
 80005ac:	080005b5 	.word	0x080005b5
 80005b0:	080005b5 	.word	0x080005b5
				  case 0b110:
				  case 0b101:
				  case 0b100:
				  case 0b000:
					  status_movimiento = ROTANDO_IZQ;
 80005b4:	4b3a      	ldr	r3, [pc, #232]	; (80006a0 <main+0x45c>)
 80005b6:	2203      	movs	r2, #3
 80005b8:	701a      	strb	r2, [r3, #0]
					  break;
 80005ba:	e004      	b.n	80005c6 <main+0x382>
				  case 0b011:
				  case 0b001:
					  status_movimiento = ROTANDO_DER;
 80005bc:	4b38      	ldr	r3, [pc, #224]	; (80006a0 <main+0x45c>)
 80005be:	2204      	movs	r2, #4
 80005c0:	701a      	strb	r2, [r3, #0]
					  break;
 80005c2:	e000      	b.n	80005c6 <main+0x382>
				  default:
					  break;
 80005c4:	bf00      	nop
			  } //end switch sensores_dist

		  break;
 80005c6:	e066      	b.n	8000696 <main+0x452>
		  case ROTANDO_IZQ:

			  HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 0);
 80005c8:	2200      	movs	r2, #0
 80005ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005ce:	4832      	ldr	r0, [pc, #200]	; (8000698 <main+0x454>)
 80005d0:	f000 fe8f 	bl	80012f2 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in4_Pin, 1);
 80005d4:	2201      	movs	r2, #1
 80005d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005da:	482f      	ldr	r0, [pc, #188]	; (8000698 <main+0x454>)
 80005dc:	f000 fe89 	bl	80012f2 <HAL_GPIO_WritePin>

			  HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in2_Pin, 1);
 80005e0:	2201      	movs	r2, #1
 80005e2:	2102      	movs	r1, #2
 80005e4:	482c      	ldr	r0, [pc, #176]	; (8000698 <main+0x454>)
 80005e6:	f000 fe84 	bl	80012f2 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in3_Pin, 0);
 80005ea:	2200      	movs	r2, #0
 80005ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005f0:	4829      	ldr	r0, [pc, #164]	; (8000698 <main+0x454>)
 80005f2:	f000 fe7e 	bl	80012f2 <HAL_GPIO_WritePin>

			  switch (sensores_dist){
 80005f6:	4b29      	ldr	r3, [pc, #164]	; (800069c <main+0x458>)
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	2b03      	cmp	r3, #3
 80005fc:	d006      	beq.n	800060c <main+0x3c8>
 80005fe:	2b07      	cmp	r3, #7
 8000600:	d000      	beq.n	8000604 <main+0x3c0>
					  status_movimiento = AVANZANDO;
					  break;
				  case 0b011:
					  status_movimiento = ROTANDO_DER;
				  default:
				  break;
 8000602:	e006      	b.n	8000612 <main+0x3ce>
					  status_movimiento = AVANZANDO;
 8000604:	4b26      	ldr	r3, [pc, #152]	; (80006a0 <main+0x45c>)
 8000606:	2201      	movs	r2, #1
 8000608:	701a      	strb	r2, [r3, #0]
					  break;
 800060a:	e003      	b.n	8000614 <main+0x3d0>
					  status_movimiento = ROTANDO_DER;
 800060c:	4b24      	ldr	r3, [pc, #144]	; (80006a0 <main+0x45c>)
 800060e:	2204      	movs	r2, #4
 8000610:	701a      	strb	r2, [r3, #0]
				  break;
 8000612:	bf00      	nop
			  } //end switch sensores_dist

		  break;
 8000614:	e03f      	b.n	8000696 <main+0x452>
		  case ROTANDO_DER:
			  HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 1);
 8000616:	2201      	movs	r2, #1
 8000618:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800061c:	481e      	ldr	r0, [pc, #120]	; (8000698 <main+0x454>)
 800061e:	f000 fe68 	bl	80012f2 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in4_Pin, 0);
 8000622:	2200      	movs	r2, #0
 8000624:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000628:	481b      	ldr	r0, [pc, #108]	; (8000698 <main+0x454>)
 800062a:	f000 fe62 	bl	80012f2 <HAL_GPIO_WritePin>

			  HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in2_Pin, 0);
 800062e:	2200      	movs	r2, #0
 8000630:	2102      	movs	r1, #2
 8000632:	4819      	ldr	r0, [pc, #100]	; (8000698 <main+0x454>)
 8000634:	f000 fe5d 	bl	80012f2 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in3_Pin, 1);
 8000638:	2201      	movs	r2, #1
 800063a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800063e:	4816      	ldr	r0, [pc, #88]	; (8000698 <main+0x454>)
 8000640:	f000 fe57 	bl	80012f2 <HAL_GPIO_WritePin>

			  switch (sensores_dist){
 8000644:	4b15      	ldr	r3, [pc, #84]	; (800069c <main+0x458>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b06      	cmp	r3, #6
 800064a:	d006      	beq.n	800065a <main+0x416>
 800064c:	2b07      	cmp	r3, #7
 800064e:	d000      	beq.n	8000652 <main+0x40e>
					  status_movimiento = AVANZANDO;
				  break;
				  case 0b110:
					  status_movimiento = ROTANDO_IZQ;
				  default:
				  break;
 8000650:	e006      	b.n	8000660 <main+0x41c>
					  status_movimiento = AVANZANDO;
 8000652:	4b13      	ldr	r3, [pc, #76]	; (80006a0 <main+0x45c>)
 8000654:	2201      	movs	r2, #1
 8000656:	701a      	strb	r2, [r3, #0]
				  break;
 8000658:	e003      	b.n	8000662 <main+0x41e>
					  status_movimiento = ROTANDO_IZQ;
 800065a:	4b11      	ldr	r3, [pc, #68]	; (80006a0 <main+0x45c>)
 800065c:	2203      	movs	r2, #3
 800065e:	701a      	strb	r2, [r3, #0]
				  break;
 8000660:	bf00      	nop
			  } //end switch sensores_dist

			  break;
 8000662:	e018      	b.n	8000696 <main+0x452>
			  case RETROCEDIENDO:
				  HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 0);
 8000664:	2200      	movs	r2, #0
 8000666:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800066a:	480b      	ldr	r0, [pc, #44]	; (8000698 <main+0x454>)
 800066c:	f000 fe41 	bl	80012f2 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in4_Pin, 0);
 8000670:	2200      	movs	r2, #0
 8000672:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000676:	4808      	ldr	r0, [pc, #32]	; (8000698 <main+0x454>)
 8000678:	f000 fe3b 	bl	80012f2 <HAL_GPIO_WritePin>

				  HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in2_Pin, 1);
 800067c:	2201      	movs	r2, #1
 800067e:	2102      	movs	r1, #2
 8000680:	4805      	ldr	r0, [pc, #20]	; (8000698 <main+0x454>)
 8000682:	f000 fe36 	bl	80012f2 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in3_Pin, 1);
 8000686:	2201      	movs	r2, #1
 8000688:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800068c:	4802      	ldr	r0, [pc, #8]	; (8000698 <main+0x454>)
 800068e:	f000 fe30 	bl	80012f2 <HAL_GPIO_WritePin>
			  break;
 8000692:	e000      	b.n	8000696 <main+0x452>

			  break;
			  case PIVOTE_DER_AVAN:

			  default:
			  break;
 8000694:	bf00      	nop
	  switch (statusBurst){
 8000696:	e607      	b.n	80002a8 <main+0x64>
 8000698:	40010c00 	.word	0x40010c00
 800069c:	2000002d 	.word	0x2000002d
 80006a0:	2000002c 	.word	0x2000002c

080006a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b090      	sub	sp, #64	; 0x40
 80006a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006aa:	f107 0318 	add.w	r3, r7, #24
 80006ae:	2228      	movs	r2, #40	; 0x28
 80006b0:	2100      	movs	r1, #0
 80006b2:	4618      	mov	r0, r3
 80006b4:	f002 fc9e 	bl	8002ff4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b8:	1d3b      	adds	r3, r7, #4
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	605a      	str	r2, [r3, #4]
 80006c0:	609a      	str	r2, [r3, #8]
 80006c2:	60da      	str	r2, [r3, #12]
 80006c4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006c6:	2301      	movs	r3, #1
 80006c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d4:	2301      	movs	r3, #1
 80006d6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d8:	2302      	movs	r3, #2
 80006da:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80006e2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80006e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e8:	f107 0318 	add.w	r3, r7, #24
 80006ec:	4618      	mov	r0, r3
 80006ee:	f000 fe19 	bl	8001324 <HAL_RCC_OscConfig>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80006f8:	f000 f862 	bl	80007c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fc:	230f      	movs	r3, #15
 80006fe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000700:	2302      	movs	r3, #2
 8000702:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000704:	2300      	movs	r3, #0
 8000706:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000708:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800070c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800070e:	2300      	movs	r3, #0
 8000710:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000712:	1d3b      	adds	r3, r7, #4
 8000714:	2102      	movs	r1, #2
 8000716:	4618      	mov	r0, r3
 8000718:	f001 f884 	bl	8001824 <HAL_RCC_ClockConfig>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000722:	f000 f84d 	bl	80007c0 <Error_Handler>
  }
}
 8000726:	bf00      	nop
 8000728:	3740      	adds	r7, #64	; 0x40
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
	...

08000730 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
	if (htim->Instance==TIM3){
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a06      	ldr	r2, [pc, #24]	; (8000758 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800073e:	4293      	cmp	r3, r2
 8000740:	d105      	bne.n	800074e <HAL_TIM_PeriodElapsedCallback+0x1e>
		desbordeTIM3++;
 8000742:	4b06      	ldr	r3, [pc, #24]	; (800075c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000744:	881b      	ldrh	r3, [r3, #0]
 8000746:	3301      	adds	r3, #1
 8000748:	b29a      	uxth	r2, r3
 800074a:	4b04      	ldr	r3, [pc, #16]	; (800075c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800074c:	801a      	strh	r2, [r3, #0]

//	if (htim->Instance==TIM4){
//		desbordeSysTick++;
//	}

}
 800074e:	bf00      	nop
 8000750:	370c      	adds	r7, #12
 8000752:	46bd      	mov	sp, r7
 8000754:	bc80      	pop	{r7}
 8000756:	4770      	bx	lr
 8000758:	40000400 	.word	0x40000400
 800075c:	2000002e 	.word	0x2000002e

08000760 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3){
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	7f1b      	ldrb	r3, [r3, #28]
 800076c:	2b04      	cmp	r3, #4
 800076e:	d107      	bne.n	8000780 <HAL_TIM_IC_CaptureCallback+0x20>
		//HAL_TIM_ReadCapturedValue(htim, HAL_TIM_ACTIVE_CHANNEL_3);
		ic1 = htim->Instance->CCR3;
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000776:	4a0d      	ldr	r2, [pc, #52]	; (80007ac <HAL_TIM_IC_CaptureCallback+0x4c>)
 8000778:	6013      	str	r3, [r2, #0]
		desbordeTIM3 = 0;
 800077a:	4b0d      	ldr	r3, [pc, #52]	; (80007b0 <HAL_TIM_IC_CaptureCallback+0x50>)
 800077c:	2200      	movs	r2, #0
 800077e:	801a      	strh	r2, [r3, #0]
	}

	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4){
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	7f1b      	ldrb	r3, [r3, #28]
 8000784:	2b08      	cmp	r3, #8
 8000786:	d10b      	bne.n	80007a0 <HAL_TIM_IC_CaptureCallback+0x40>
		ic2 = htim->Instance->CCR4;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078e:	4a09      	ldr	r2, [pc, #36]	; (80007b4 <HAL_TIM_IC_CaptureCallback+0x54>)
 8000790:	6013      	str	r3, [r2, #0]
		cuentasDesbordes = desbordeTIM3;
 8000792:	4b07      	ldr	r3, [pc, #28]	; (80007b0 <HAL_TIM_IC_CaptureCallback+0x50>)
 8000794:	881a      	ldrh	r2, [r3, #0]
 8000796:	4b08      	ldr	r3, [pc, #32]	; (80007b8 <HAL_TIM_IC_CaptureCallback+0x58>)
 8000798:	801a      	strh	r2, [r3, #0]
		flagEco = 1;
 800079a:	4b08      	ldr	r3, [pc, #32]	; (80007bc <HAL_TIM_IC_CaptureCallback+0x5c>)
 800079c:	2201      	movs	r2, #1
 800079e:	701a      	strb	r2, [r3, #0]
	}
}
 80007a0:	bf00      	nop
 80007a2:	370c      	adds	r7, #12
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bc80      	pop	{r7}
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	20000034 	.word	0x20000034
 80007b0:	2000002e 	.word	0x2000002e
 80007b4:	20000038 	.word	0x20000038
 80007b8:	2000003c 	.word	0x2000003c
 80007bc:	2000004d 	.word	0x2000004d

080007c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007c4:	bf00      	nop
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bc80      	pop	{r7}
 80007ca:	4770      	bx	lr

080007cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b085      	sub	sp, #20
 80007d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007d2:	4b15      	ldr	r3, [pc, #84]	; (8000828 <HAL_MspInit+0x5c>)
 80007d4:	699b      	ldr	r3, [r3, #24]
 80007d6:	4a14      	ldr	r2, [pc, #80]	; (8000828 <HAL_MspInit+0x5c>)
 80007d8:	f043 0301 	orr.w	r3, r3, #1
 80007dc:	6193      	str	r3, [r2, #24]
 80007de:	4b12      	ldr	r3, [pc, #72]	; (8000828 <HAL_MspInit+0x5c>)
 80007e0:	699b      	ldr	r3, [r3, #24]
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ea:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <HAL_MspInit+0x5c>)
 80007ec:	69db      	ldr	r3, [r3, #28]
 80007ee:	4a0e      	ldr	r2, [pc, #56]	; (8000828 <HAL_MspInit+0x5c>)
 80007f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007f4:	61d3      	str	r3, [r2, #28]
 80007f6:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <HAL_MspInit+0x5c>)
 80007f8:	69db      	ldr	r3, [r3, #28]
 80007fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000802:	4b0a      	ldr	r3, [pc, #40]	; (800082c <HAL_MspInit+0x60>)
 8000804:	685b      	ldr	r3, [r3, #4]
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	4a04      	ldr	r2, [pc, #16]	; (800082c <HAL_MspInit+0x60>)
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800081e:	bf00      	nop
 8000820:	3714      	adds	r7, #20
 8000822:	46bd      	mov	sp, r7
 8000824:	bc80      	pop	{r7}
 8000826:	4770      	bx	lr
 8000828:	40021000 	.word	0x40021000
 800082c:	40010000 	.word	0x40010000

08000830 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	bc80      	pop	{r7}
 800083a:	4770      	bx	lr

0800083c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000840:	e7fe      	b.n	8000840 <HardFault_Handler+0x4>

08000842 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000842:	b480      	push	{r7}
 8000844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000846:	e7fe      	b.n	8000846 <MemManage_Handler+0x4>

08000848 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800084c:	e7fe      	b.n	800084c <BusFault_Handler+0x4>

0800084e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800084e:	b480      	push	{r7}
 8000850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000852:	e7fe      	b.n	8000852 <UsageFault_Handler+0x4>

08000854 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000858:	bf00      	nop
 800085a:	46bd      	mov	sp, r7
 800085c:	bc80      	pop	{r7}
 800085e:	4770      	bx	lr

08000860 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000864:	bf00      	nop
 8000866:	46bd      	mov	sp, r7
 8000868:	bc80      	pop	{r7}
 800086a:	4770      	bx	lr

0800086c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000870:	bf00      	nop
 8000872:	46bd      	mov	sp, r7
 8000874:	bc80      	pop	{r7}
 8000876:	4770      	bx	lr

08000878 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	desbordeSysTick++;
 800087c:	4b04      	ldr	r3, [pc, #16]	; (8000890 <SysTick_Handler+0x18>)
 800087e:	881b      	ldrh	r3, [r3, #0]
 8000880:	3301      	adds	r3, #1
 8000882:	b29a      	uxth	r2, r3
 8000884:	4b02      	ldr	r3, [pc, #8]	; (8000890 <SysTick_Handler+0x18>)
 8000886:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000888:	f000 faa0 	bl	8000dcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800088c:	bf00      	nop
 800088e:	bd80      	pop	{r7, pc}
 8000890:	20000030 	.word	0x20000030

08000894 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000898:	4802      	ldr	r0, [pc, #8]	; (80008a4 <TIM3_IRQHandler+0x10>)
 800089a:	f001 fc4f 	bl	800213c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	20000050 	.word	0x20000050

080008a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008ac:	bf00      	nop
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bc80      	pop	{r7}
 80008b2:	4770      	bx	lr

080008b4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b086      	sub	sp, #24
 80008b8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ba:	f107 0308 	add.w	r3, r7, #8
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]
 80008c4:	609a      	str	r2, [r3, #8]
 80008c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008c8:	463b      	mov	r3, r7
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 80008d0:	4b21      	ldr	r3, [pc, #132]	; (8000958 <MX_TIM1_Init+0xa4>)
 80008d2:	4a22      	ldr	r2, [pc, #136]	; (800095c <MX_TIM1_Init+0xa8>)
 80008d4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80008d6:	4b20      	ldr	r3, [pc, #128]	; (8000958 <MX_TIM1_Init+0xa4>)
 80008d8:	2200      	movs	r2, #0
 80008da:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008dc:	4b1e      	ldr	r3, [pc, #120]	; (8000958 <MX_TIM1_Init+0xa4>)
 80008de:	2200      	movs	r2, #0
 80008e0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80008e2:	4b1d      	ldr	r3, [pc, #116]	; (8000958 <MX_TIM1_Init+0xa4>)
 80008e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008e8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ea:	4b1b      	ldr	r3, [pc, #108]	; (8000958 <MX_TIM1_Init+0xa4>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008f0:	4b19      	ldr	r3, [pc, #100]	; (8000958 <MX_TIM1_Init+0xa4>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008f6:	4b18      	ldr	r3, [pc, #96]	; (8000958 <MX_TIM1_Init+0xa4>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008fc:	4816      	ldr	r0, [pc, #88]	; (8000958 <MX_TIM1_Init+0xa4>)
 80008fe:	f001 f8fb 	bl	8001af8 <HAL_TIM_Base_Init>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000908:	f7ff ff5a 	bl	80007c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 800090c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000910:	60bb      	str	r3, [r7, #8]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8000912:	2300      	movs	r3, #0
 8000914:	60fb      	str	r3, [r7, #12]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8000916:	2300      	movs	r3, #0
 8000918:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockFilter = 0;
 800091a:	2300      	movs	r3, #0
 800091c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800091e:	f107 0308 	add.w	r3, r7, #8
 8000922:	4619      	mov	r1, r3
 8000924:	480c      	ldr	r0, [pc, #48]	; (8000958 <MX_TIM1_Init+0xa4>)
 8000926:	f001 fe63 	bl	80025f0 <HAL_TIM_ConfigClockSource>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8000930:	f7ff ff46 	bl	80007c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000934:	2300      	movs	r3, #0
 8000936:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000938:	2300      	movs	r3, #0
 800093a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800093c:	463b      	mov	r3, r7
 800093e:	4619      	mov	r1, r3
 8000940:	4805      	ldr	r0, [pc, #20]	; (8000958 <MX_TIM1_Init+0xa4>)
 8000942:	f002 fac9 	bl	8002ed8 <HAL_TIMEx_MasterConfigSynchronization>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 800094c:	f7ff ff38 	bl	80007c0 <Error_Handler>
  }

}
 8000950:	bf00      	nop
 8000952:	3718      	adds	r7, #24
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20000098 	.word	0x20000098
 800095c:	40012c00 	.word	0x40012c00

08000960 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b086      	sub	sp, #24
 8000964:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000966:	f107 0308 	add.w	r3, r7, #8
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]
 8000970:	609a      	str	r2, [r3, #8]
 8000972:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000974:	463b      	mov	r3, r7
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
 800097a:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 800097c:	4b20      	ldr	r3, [pc, #128]	; (8000a00 <MX_TIM2_Init+0xa0>)
 800097e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000982:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000984:	4b1e      	ldr	r3, [pc, #120]	; (8000a00 <MX_TIM2_Init+0xa0>)
 8000986:	2200      	movs	r2, #0
 8000988:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800098a:	4b1d      	ldr	r3, [pc, #116]	; (8000a00 <MX_TIM2_Init+0xa0>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000990:	4b1b      	ldr	r3, [pc, #108]	; (8000a00 <MX_TIM2_Init+0xa0>)
 8000992:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000996:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000998:	4b19      	ldr	r3, [pc, #100]	; (8000a00 <MX_TIM2_Init+0xa0>)
 800099a:	2200      	movs	r2, #0
 800099c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800099e:	4b18      	ldr	r3, [pc, #96]	; (8000a00 <MX_TIM2_Init+0xa0>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009a4:	4816      	ldr	r0, [pc, #88]	; (8000a00 <MX_TIM2_Init+0xa0>)
 80009a6:	f001 f8a7 	bl	8001af8 <HAL_TIM_Base_Init>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80009b0:	f7ff ff06 	bl	80007c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 80009b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009b8:	60bb      	str	r3, [r7, #8]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 80009ba:	2300      	movs	r3, #0
 80009bc:	60fb      	str	r3, [r7, #12]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 80009be:	2300      	movs	r3, #0
 80009c0:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockFilter = 0;
 80009c2:	2300      	movs	r3, #0
 80009c4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009c6:	f107 0308 	add.w	r3, r7, #8
 80009ca:	4619      	mov	r1, r3
 80009cc:	480c      	ldr	r0, [pc, #48]	; (8000a00 <MX_TIM2_Init+0xa0>)
 80009ce:	f001 fe0f 	bl	80025f0 <HAL_TIM_ConfigClockSource>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80009d8:	f7ff fef2 	bl	80007c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009dc:	2300      	movs	r3, #0
 80009de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009e0:	2300      	movs	r3, #0
 80009e2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009e4:	463b      	mov	r3, r7
 80009e6:	4619      	mov	r1, r3
 80009e8:	4805      	ldr	r0, [pc, #20]	; (8000a00 <MX_TIM2_Init+0xa0>)
 80009ea:	f002 fa75 	bl	8002ed8 <HAL_TIMEx_MasterConfigSynchronization>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80009f4:	f7ff fee4 	bl	80007c0 <Error_Handler>
  }

}
 80009f8:	bf00      	nop
 80009fa:	3718      	adds	r7, #24
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	200000e0 	.word	0x200000e0

08000a04 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b08e      	sub	sp, #56	; 0x38
 8000a08:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a0a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]
 8000a12:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
 8000a22:	611a      	str	r2, [r3, #16]
 8000a24:	615a      	str	r2, [r3, #20]
 8000a26:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000a28:	1d3b      	adds	r3, r7, #4
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	605a      	str	r2, [r3, #4]
 8000a30:	609a      	str	r2, [r3, #8]
 8000a32:	60da      	str	r2, [r3, #12]

  htim3.Instance = TIM3;
 8000a34:	4b3c      	ldr	r3, [pc, #240]	; (8000b28 <MX_TIM3_Init+0x124>)
 8000a36:	4a3d      	ldr	r2, [pc, #244]	; (8000b2c <MX_TIM3_Init+0x128>)
 8000a38:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8000a3a:	4b3b      	ldr	r3, [pc, #236]	; (8000b28 <MX_TIM3_Init+0x124>)
 8000a3c:	2247      	movs	r2, #71	; 0x47
 8000a3e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a40:	4b39      	ldr	r3, [pc, #228]	; (8000b28 <MX_TIM3_Init+0x124>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 42-1;
 8000a46:	4b38      	ldr	r3, [pc, #224]	; (8000b28 <MX_TIM3_Init+0x124>)
 8000a48:	2229      	movs	r2, #41	; 0x29
 8000a4a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a4c:	4b36      	ldr	r3, [pc, #216]	; (8000b28 <MX_TIM3_Init+0x124>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a52:	4b35      	ldr	r3, [pc, #212]	; (8000b28 <MX_TIM3_Init+0x124>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000a58:	4833      	ldr	r0, [pc, #204]	; (8000b28 <MX_TIM3_Init+0x124>)
 8000a5a:	f001 f92d 	bl	8001cb8 <HAL_TIM_PWM_Init>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000a64:	f7ff feac 	bl	80007c0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000a68:	482f      	ldr	r0, [pc, #188]	; (8000b28 <MX_TIM3_Init+0x124>)
 8000a6a:	f001 fa11 	bl	8001e90 <HAL_TIM_IC_Init>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8000a74:	f7ff fea4 	bl	80007c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	633b      	str	r3, [r7, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a80:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a84:	4619      	mov	r1, r3
 8000a86:	4828      	ldr	r0, [pc, #160]	; (8000b28 <MX_TIM3_Init+0x124>)
 8000a88:	f002 fa26 	bl	8002ed8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000a92:	f7ff fe95 	bl	80007c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a96:	2360      	movs	r3, #96	; 0x60
 8000a98:	617b      	str	r3, [r7, #20]
  sConfigOC.Pulse = 30-1;
 8000a9a:	231d      	movs	r3, #29
 8000a9c:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	61fb      	str	r3, [r7, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000aa6:	f107 0314 	add.w	r3, r7, #20
 8000aaa:	2200      	movs	r2, #0
 8000aac:	4619      	mov	r1, r3
 8000aae:	481e      	ldr	r0, [pc, #120]	; (8000b28 <MX_TIM3_Init+0x124>)
 8000ab0:	f001 fce0 	bl	8002474 <HAL_TIM_PWM_ConfigChannel>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 8000aba:	f7ff fe81 	bl	80007c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000abe:	f107 0314 	add.w	r3, r7, #20
 8000ac2:	2204      	movs	r2, #4
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4818      	ldr	r0, [pc, #96]	; (8000b28 <MX_TIM3_Init+0x124>)
 8000ac8:	f001 fcd4 	bl	8002474 <HAL_TIM_PWM_ConfigChannel>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 8000ad2:	f7ff fe75 	bl	80007c0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000ada:	2301      	movs	r3, #1
 8000adc:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000ae6:	1d3b      	adds	r3, r7, #4
 8000ae8:	2208      	movs	r2, #8
 8000aea:	4619      	mov	r1, r3
 8000aec:	480e      	ldr	r0, [pc, #56]	; (8000b28 <MX_TIM3_Init+0x124>)
 8000aee:	f001 fc2d 	bl	800234c <HAL_TIM_IC_ConfigChannel>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_TIM3_Init+0xf8>
  {
    Error_Handler();
 8000af8:	f7ff fe62 	bl	80007c0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000afc:	2302      	movs	r3, #2
 8000afe:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000b00:	2302      	movs	r3, #2
 8000b02:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000b04:	1d3b      	adds	r3, r7, #4
 8000b06:	220c      	movs	r2, #12
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4807      	ldr	r0, [pc, #28]	; (8000b28 <MX_TIM3_Init+0x124>)
 8000b0c:	f001 fc1e 	bl	800234c <HAL_TIM_IC_ConfigChannel>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_TIM3_Init+0x116>
  {
    Error_Handler();
 8000b16:	f7ff fe53 	bl	80007c0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8000b1a:	4803      	ldr	r0, [pc, #12]	; (8000b28 <MX_TIM3_Init+0x124>)
 8000b1c:	f000 f8b8 	bl	8000c90 <HAL_TIM_MspPostInit>

}
 8000b20:	bf00      	nop
 8000b22:	3738      	adds	r7, #56	; 0x38
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	20000050 	.word	0x20000050
 8000b2c:	40000400 	.word	0x40000400

08000b30 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08a      	sub	sp, #40	; 0x28
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b38:	f107 0318 	add.w	r3, r7, #24
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM1)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a2b      	ldr	r2, [pc, #172]	; (8000bf8 <HAL_TIM_Base_MspInit+0xc8>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d125      	bne.n	8000b9c <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b50:	4b2a      	ldr	r3, [pc, #168]	; (8000bfc <HAL_TIM_Base_MspInit+0xcc>)
 8000b52:	699b      	ldr	r3, [r3, #24]
 8000b54:	4a29      	ldr	r2, [pc, #164]	; (8000bfc <HAL_TIM_Base_MspInit+0xcc>)
 8000b56:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b5a:	6193      	str	r3, [r2, #24]
 8000b5c:	4b27      	ldr	r3, [pc, #156]	; (8000bfc <HAL_TIM_Base_MspInit+0xcc>)
 8000b5e:	699b      	ldr	r3, [r3, #24]
 8000b60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b64:	617b      	str	r3, [r7, #20]
 8000b66:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b68:	4b24      	ldr	r3, [pc, #144]	; (8000bfc <HAL_TIM_Base_MspInit+0xcc>)
 8000b6a:	699b      	ldr	r3, [r3, #24]
 8000b6c:	4a23      	ldr	r2, [pc, #140]	; (8000bfc <HAL_TIM_Base_MspInit+0xcc>)
 8000b6e:	f043 0304 	orr.w	r3, r3, #4
 8000b72:	6193      	str	r3, [r2, #24]
 8000b74:	4b21      	ldr	r3, [pc, #132]	; (8000bfc <HAL_TIM_Base_MspInit+0xcc>)
 8000b76:	699b      	ldr	r3, [r3, #24]
 8000b78:	f003 0304 	and.w	r3, r3, #4
 8000b7c:	613b      	str	r3, [r7, #16]
 8000b7e:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA12     ------> TIM1_ETR
    */
    GPIO_InitStruct.Pin = encoder_L_Pin;
 8000b80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b86:	2300      	movs	r3, #0
 8000b88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(encoder_L_GPIO_Port, &GPIO_InitStruct);
 8000b8e:	f107 0318 	add.w	r3, r7, #24
 8000b92:	4619      	mov	r1, r3
 8000b94:	481a      	ldr	r0, [pc, #104]	; (8000c00 <HAL_TIM_Base_MspInit+0xd0>)
 8000b96:	f000 fa43 	bl	8001020 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000b9a:	e028      	b.n	8000bee <HAL_TIM_Base_MspInit+0xbe>
  else if(tim_baseHandle->Instance==TIM2)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ba4:	d123      	bne.n	8000bee <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ba6:	4b15      	ldr	r3, [pc, #84]	; (8000bfc <HAL_TIM_Base_MspInit+0xcc>)
 8000ba8:	69db      	ldr	r3, [r3, #28]
 8000baa:	4a14      	ldr	r2, [pc, #80]	; (8000bfc <HAL_TIM_Base_MspInit+0xcc>)
 8000bac:	f043 0301 	orr.w	r3, r3, #1
 8000bb0:	61d3      	str	r3, [r2, #28]
 8000bb2:	4b12      	ldr	r3, [pc, #72]	; (8000bfc <HAL_TIM_Base_MspInit+0xcc>)
 8000bb4:	69db      	ldr	r3, [r3, #28]
 8000bb6:	f003 0301 	and.w	r3, r3, #1
 8000bba:	60fb      	str	r3, [r7, #12]
 8000bbc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bbe:	4b0f      	ldr	r3, [pc, #60]	; (8000bfc <HAL_TIM_Base_MspInit+0xcc>)
 8000bc0:	699b      	ldr	r3, [r3, #24]
 8000bc2:	4a0e      	ldr	r2, [pc, #56]	; (8000bfc <HAL_TIM_Base_MspInit+0xcc>)
 8000bc4:	f043 0304 	orr.w	r3, r3, #4
 8000bc8:	6193      	str	r3, [r2, #24]
 8000bca:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <HAL_TIM_Base_MspInit+0xcc>)
 8000bcc:	699b      	ldr	r3, [r3, #24]
 8000bce:	f003 0304 	and.w	r3, r3, #4
 8000bd2:	60bb      	str	r3, [r7, #8]
 8000bd4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = encoder_R_Pin;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(encoder_R_GPIO_Port, &GPIO_InitStruct);
 8000be2:	f107 0318 	add.w	r3, r7, #24
 8000be6:	4619      	mov	r1, r3
 8000be8:	4805      	ldr	r0, [pc, #20]	; (8000c00 <HAL_TIM_Base_MspInit+0xd0>)
 8000bea:	f000 fa19 	bl	8001020 <HAL_GPIO_Init>
}
 8000bee:	bf00      	nop
 8000bf0:	3728      	adds	r7, #40	; 0x28
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40012c00 	.word	0x40012c00
 8000bfc:	40021000 	.word	0x40021000
 8000c00:	40010800 	.word	0x40010800

08000c04 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b088      	sub	sp, #32
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0c:	f107 0310 	add.w	r3, r7, #16
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
  if(tim_pwmHandle->Instance==TIM3)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a19      	ldr	r2, [pc, #100]	; (8000c84 <HAL_TIM_PWM_MspInit+0x80>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d12b      	bne.n	8000c7c <HAL_TIM_PWM_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c24:	4b18      	ldr	r3, [pc, #96]	; (8000c88 <HAL_TIM_PWM_MspInit+0x84>)
 8000c26:	69db      	ldr	r3, [r3, #28]
 8000c28:	4a17      	ldr	r2, [pc, #92]	; (8000c88 <HAL_TIM_PWM_MspInit+0x84>)
 8000c2a:	f043 0302 	orr.w	r3, r3, #2
 8000c2e:	61d3      	str	r3, [r2, #28]
 8000c30:	4b15      	ldr	r3, [pc, #84]	; (8000c88 <HAL_TIM_PWM_MspInit+0x84>)
 8000c32:	69db      	ldr	r3, [r3, #28]
 8000c34:	f003 0302 	and.w	r3, r3, #2
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c3c:	4b12      	ldr	r3, [pc, #72]	; (8000c88 <HAL_TIM_PWM_MspInit+0x84>)
 8000c3e:	699b      	ldr	r3, [r3, #24]
 8000c40:	4a11      	ldr	r2, [pc, #68]	; (8000c88 <HAL_TIM_PWM_MspInit+0x84>)
 8000c42:	f043 0308 	orr.w	r3, r3, #8
 8000c46:	6193      	str	r3, [r2, #24]
 8000c48:	4b0f      	ldr	r3, [pc, #60]	; (8000c88 <HAL_TIM_PWM_MspInit+0x84>)
 8000c4a:	699b      	ldr	r3, [r3, #24]
 8000c4c:	f003 0308 	and.w	r3, r3, #8
 8000c50:	60bb      	str	r3, [r7, #8]
 8000c52:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c54:	2301      	movs	r3, #1
 8000c56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c60:	f107 0310 	add.w	r3, r7, #16
 8000c64:	4619      	mov	r1, r3
 8000c66:	4809      	ldr	r0, [pc, #36]	; (8000c8c <HAL_TIM_PWM_MspInit+0x88>)
 8000c68:	f000 f9da 	bl	8001020 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	2100      	movs	r1, #0
 8000c70:	201d      	movs	r0, #29
 8000c72:	f000 f99e 	bl	8000fb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000c76:	201d      	movs	r0, #29
 8000c78:	f000 f9b7 	bl	8000fea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000c7c:	bf00      	nop
 8000c7e:	3720      	adds	r7, #32
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	40000400 	.word	0x40000400
 8000c88:	40021000 	.word	0x40021000
 8000c8c:	40010c00 	.word	0x40010c00

08000c90 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b088      	sub	sp, #32
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c98:	f107 0310 	add.w	r3, r7, #16
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4a0f      	ldr	r2, [pc, #60]	; (8000ce8 <HAL_TIM_MspPostInit+0x58>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d117      	bne.n	8000ce0 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb0:	4b0e      	ldr	r3, [pc, #56]	; (8000cec <HAL_TIM_MspPostInit+0x5c>)
 8000cb2:	699b      	ldr	r3, [r3, #24]
 8000cb4:	4a0d      	ldr	r2, [pc, #52]	; (8000cec <HAL_TIM_MspPostInit+0x5c>)
 8000cb6:	f043 0304 	orr.w	r3, r3, #4
 8000cba:	6193      	str	r3, [r2, #24]
 8000cbc:	4b0b      	ldr	r3, [pc, #44]	; (8000cec <HAL_TIM_MspPostInit+0x5c>)
 8000cbe:	699b      	ldr	r3, [r3, #24]
 8000cc0:	f003 0304 	and.w	r3, r3, #4
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = PWM_L_Pin|GPIO_PIN_7;
 8000cc8:	23c0      	movs	r3, #192	; 0xc0
 8000cca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd4:	f107 0310 	add.w	r3, r7, #16
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4805      	ldr	r0, [pc, #20]	; (8000cf0 <HAL_TIM_MspPostInit+0x60>)
 8000cdc:	f000 f9a0 	bl	8001020 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000ce0:	bf00      	nop
 8000ce2:	3720      	adds	r7, #32
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	40000400 	.word	0x40000400
 8000cec:	40021000 	.word	0x40021000
 8000cf0:	40010800 	.word	0x40010800

08000cf4 <Reset_Handler>:
 8000cf4:	480c      	ldr	r0, [pc, #48]	; (8000d28 <LoopFillZerobss+0x12>)
 8000cf6:	490d      	ldr	r1, [pc, #52]	; (8000d2c <LoopFillZerobss+0x16>)
 8000cf8:	4a0d      	ldr	r2, [pc, #52]	; (8000d30 <LoopFillZerobss+0x1a>)
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	e002      	b.n	8000d04 <LoopCopyDataInit>

08000cfe <CopyDataInit>:
 8000cfe:	58d4      	ldr	r4, [r2, r3]
 8000d00:	50c4      	str	r4, [r0, r3]
 8000d02:	3304      	adds	r3, #4

08000d04 <LoopCopyDataInit>:
 8000d04:	18c4      	adds	r4, r0, r3
 8000d06:	428c      	cmp	r4, r1
 8000d08:	d3f9      	bcc.n	8000cfe <CopyDataInit>
 8000d0a:	4a0a      	ldr	r2, [pc, #40]	; (8000d34 <LoopFillZerobss+0x1e>)
 8000d0c:	4c0a      	ldr	r4, [pc, #40]	; (8000d38 <LoopFillZerobss+0x22>)
 8000d0e:	2300      	movs	r3, #0
 8000d10:	e001      	b.n	8000d16 <LoopFillZerobss>

08000d12 <FillZerobss>:
 8000d12:	6013      	str	r3, [r2, #0]
 8000d14:	3204      	adds	r2, #4

08000d16 <LoopFillZerobss>:
 8000d16:	42a2      	cmp	r2, r4
 8000d18:	d3fb      	bcc.n	8000d12 <FillZerobss>
 8000d1a:	f7ff fdc5 	bl	80008a8 <SystemInit>
 8000d1e:	f002 f945 	bl	8002fac <__libc_init_array>
 8000d22:	f7ff fa8f 	bl	8000244 <main>
 8000d26:	4770      	bx	lr
 8000d28:	20000000 	.word	0x20000000
 8000d2c:	20000010 	.word	0x20000010
 8000d30:	08003048 	.word	0x08003048
 8000d34:	20000010 	.word	0x20000010
 8000d38:	2000012c 	.word	0x2000012c

08000d3c <ADC1_2_IRQHandler>:
 8000d3c:	e7fe      	b.n	8000d3c <ADC1_2_IRQHandler>
	...

08000d40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d44:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <HAL_Init+0x28>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a07      	ldr	r2, [pc, #28]	; (8000d68 <HAL_Init+0x28>)
 8000d4a:	f043 0310 	orr.w	r3, r3, #16
 8000d4e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d50:	2003      	movs	r0, #3
 8000d52:	f000 f923 	bl	8000f9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d56:	2000      	movs	r0, #0
 8000d58:	f000 f808 	bl	8000d6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d5c:	f7ff fd36 	bl	80007cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d60:	2300      	movs	r3, #0
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40022000 	.word	0x40022000

08000d6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d74:	4b12      	ldr	r3, [pc, #72]	; (8000dc0 <HAL_InitTick+0x54>)
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	4b12      	ldr	r3, [pc, #72]	; (8000dc4 <HAL_InitTick+0x58>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f000 f93b 	bl	8001006 <HAL_SYSTICK_Config>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d96:	2301      	movs	r3, #1
 8000d98:	e00e      	b.n	8000db8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2b0f      	cmp	r3, #15
 8000d9e:	d80a      	bhi.n	8000db6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000da0:	2200      	movs	r2, #0
 8000da2:	6879      	ldr	r1, [r7, #4]
 8000da4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000da8:	f000 f903 	bl	8000fb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dac:	4a06      	ldr	r2, [pc, #24]	; (8000dc8 <HAL_InitTick+0x5c>)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000db2:	2300      	movs	r3, #0
 8000db4:	e000      	b.n	8000db8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	20000004 	.word	0x20000004
 8000dc4:	2000000c 	.word	0x2000000c
 8000dc8:	20000008 	.word	0x20000008

08000dcc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dd0:	4b05      	ldr	r3, [pc, #20]	; (8000de8 <HAL_IncTick+0x1c>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	4b05      	ldr	r3, [pc, #20]	; (8000dec <HAL_IncTick+0x20>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4413      	add	r3, r2
 8000ddc:	4a03      	ldr	r2, [pc, #12]	; (8000dec <HAL_IncTick+0x20>)
 8000dde:	6013      	str	r3, [r2, #0]
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bc80      	pop	{r7}
 8000de6:	4770      	bx	lr
 8000de8:	2000000c 	.word	0x2000000c
 8000dec:	20000128 	.word	0x20000128

08000df0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  return uwTick;
 8000df4:	4b02      	ldr	r3, [pc, #8]	; (8000e00 <HAL_GetTick+0x10>)
 8000df6:	681b      	ldr	r3, [r3, #0]
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bc80      	pop	{r7}
 8000dfe:	4770      	bx	lr
 8000e00:	20000128 	.word	0x20000128

08000e04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	f003 0307 	and.w	r3, r3, #7
 8000e12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e14:	4b0c      	ldr	r3, [pc, #48]	; (8000e48 <__NVIC_SetPriorityGrouping+0x44>)
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e1a:	68ba      	ldr	r2, [r7, #8]
 8000e1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e20:	4013      	ands	r3, r2
 8000e22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e36:	4a04      	ldr	r2, [pc, #16]	; (8000e48 <__NVIC_SetPriorityGrouping+0x44>)
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	60d3      	str	r3, [r2, #12]
}
 8000e3c:	bf00      	nop
 8000e3e:	3714      	adds	r7, #20
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bc80      	pop	{r7}
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	e000ed00 	.word	0xe000ed00

08000e4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e50:	4b04      	ldr	r3, [pc, #16]	; (8000e64 <__NVIC_GetPriorityGrouping+0x18>)
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	0a1b      	lsrs	r3, r3, #8
 8000e56:	f003 0307 	and.w	r3, r3, #7
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bc80      	pop	{r7}
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	db0b      	blt.n	8000e92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	f003 021f 	and.w	r2, r3, #31
 8000e80:	4906      	ldr	r1, [pc, #24]	; (8000e9c <__NVIC_EnableIRQ+0x34>)
 8000e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e86:	095b      	lsrs	r3, r3, #5
 8000e88:	2001      	movs	r0, #1
 8000e8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e92:	bf00      	nop
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bc80      	pop	{r7}
 8000e9a:	4770      	bx	lr
 8000e9c:	e000e100 	.word	0xe000e100

08000ea0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	6039      	str	r1, [r7, #0]
 8000eaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	db0a      	blt.n	8000eca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	b2da      	uxtb	r2, r3
 8000eb8:	490c      	ldr	r1, [pc, #48]	; (8000eec <__NVIC_SetPriority+0x4c>)
 8000eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebe:	0112      	lsls	r2, r2, #4
 8000ec0:	b2d2      	uxtb	r2, r2
 8000ec2:	440b      	add	r3, r1
 8000ec4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ec8:	e00a      	b.n	8000ee0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	b2da      	uxtb	r2, r3
 8000ece:	4908      	ldr	r1, [pc, #32]	; (8000ef0 <__NVIC_SetPriority+0x50>)
 8000ed0:	79fb      	ldrb	r3, [r7, #7]
 8000ed2:	f003 030f 	and.w	r3, r3, #15
 8000ed6:	3b04      	subs	r3, #4
 8000ed8:	0112      	lsls	r2, r2, #4
 8000eda:	b2d2      	uxtb	r2, r2
 8000edc:	440b      	add	r3, r1
 8000ede:	761a      	strb	r2, [r3, #24]
}
 8000ee0:	bf00      	nop
 8000ee2:	370c      	adds	r7, #12
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bc80      	pop	{r7}
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	e000e100 	.word	0xe000e100
 8000ef0:	e000ed00 	.word	0xe000ed00

08000ef4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b089      	sub	sp, #36	; 0x24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	f003 0307 	and.w	r3, r3, #7
 8000f06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	f1c3 0307 	rsb	r3, r3, #7
 8000f0e:	2b04      	cmp	r3, #4
 8000f10:	bf28      	it	cs
 8000f12:	2304      	movcs	r3, #4
 8000f14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	3304      	adds	r3, #4
 8000f1a:	2b06      	cmp	r3, #6
 8000f1c:	d902      	bls.n	8000f24 <NVIC_EncodePriority+0x30>
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	3b03      	subs	r3, #3
 8000f22:	e000      	b.n	8000f26 <NVIC_EncodePriority+0x32>
 8000f24:	2300      	movs	r3, #0
 8000f26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f2c:	69bb      	ldr	r3, [r7, #24]
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	43da      	mvns	r2, r3
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	401a      	ands	r2, r3
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f3c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	fa01 f303 	lsl.w	r3, r1, r3
 8000f46:	43d9      	mvns	r1, r3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f4c:	4313      	orrs	r3, r2
         );
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3724      	adds	r7, #36	; 0x24
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bc80      	pop	{r7}
 8000f56:	4770      	bx	lr

08000f58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	3b01      	subs	r3, #1
 8000f64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f68:	d301      	bcc.n	8000f6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e00f      	b.n	8000f8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f6e:	4a0a      	ldr	r2, [pc, #40]	; (8000f98 <SysTick_Config+0x40>)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	3b01      	subs	r3, #1
 8000f74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f76:	210f      	movs	r1, #15
 8000f78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f7c:	f7ff ff90 	bl	8000ea0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f80:	4b05      	ldr	r3, [pc, #20]	; (8000f98 <SysTick_Config+0x40>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f86:	4b04      	ldr	r3, [pc, #16]	; (8000f98 <SysTick_Config+0x40>)
 8000f88:	2207      	movs	r2, #7
 8000f8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f8c:	2300      	movs	r3, #0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	e000e010 	.word	0xe000e010

08000f9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f7ff ff2d 	bl	8000e04 <__NVIC_SetPriorityGrouping>
}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b086      	sub	sp, #24
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	4603      	mov	r3, r0
 8000fba:	60b9      	str	r1, [r7, #8]
 8000fbc:	607a      	str	r2, [r7, #4]
 8000fbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fc4:	f7ff ff42 	bl	8000e4c <__NVIC_GetPriorityGrouping>
 8000fc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	68b9      	ldr	r1, [r7, #8]
 8000fce:	6978      	ldr	r0, [r7, #20]
 8000fd0:	f7ff ff90 	bl	8000ef4 <NVIC_EncodePriority>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fda:	4611      	mov	r1, r2
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff ff5f 	bl	8000ea0 <__NVIC_SetPriority>
}
 8000fe2:	bf00      	nop
 8000fe4:	3718      	adds	r7, #24
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b082      	sub	sp, #8
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff ff35 	bl	8000e68 <__NVIC_EnableIRQ>
}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	b082      	sub	sp, #8
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f7ff ffa2 	bl	8000f58 <SysTick_Config>
 8001014:	4603      	mov	r3, r0
}
 8001016:	4618      	mov	r0, r3
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
	...

08001020 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001020:	b480      	push	{r7}
 8001022:	b08b      	sub	sp, #44	; 0x2c
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800102a:	2300      	movs	r3, #0
 800102c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800102e:	2300      	movs	r3, #0
 8001030:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001032:	e121      	b.n	8001278 <HAL_GPIO_Init+0x258>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001034:	2201      	movs	r2, #1
 8001036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	69fa      	ldr	r2, [r7, #28]
 8001044:	4013      	ands	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	429a      	cmp	r2, r3
 800104e:	f040 8110 	bne.w	8001272 <HAL_GPIO_Init+0x252>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	2b12      	cmp	r3, #18
 8001058:	d034      	beq.n	80010c4 <HAL_GPIO_Init+0xa4>
 800105a:	2b12      	cmp	r3, #18
 800105c:	d80d      	bhi.n	800107a <HAL_GPIO_Init+0x5a>
 800105e:	2b02      	cmp	r3, #2
 8001060:	d02b      	beq.n	80010ba <HAL_GPIO_Init+0x9a>
 8001062:	2b02      	cmp	r3, #2
 8001064:	d804      	bhi.n	8001070 <HAL_GPIO_Init+0x50>
 8001066:	2b00      	cmp	r3, #0
 8001068:	d031      	beq.n	80010ce <HAL_GPIO_Init+0xae>
 800106a:	2b01      	cmp	r3, #1
 800106c:	d01c      	beq.n	80010a8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800106e:	e048      	b.n	8001102 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001070:	2b03      	cmp	r3, #3
 8001072:	d043      	beq.n	80010fc <HAL_GPIO_Init+0xdc>
 8001074:	2b11      	cmp	r3, #17
 8001076:	d01b      	beq.n	80010b0 <HAL_GPIO_Init+0x90>
          break;
 8001078:	e043      	b.n	8001102 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800107a:	4a86      	ldr	r2, [pc, #536]	; (8001294 <HAL_GPIO_Init+0x274>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d026      	beq.n	80010ce <HAL_GPIO_Init+0xae>
 8001080:	4a84      	ldr	r2, [pc, #528]	; (8001294 <HAL_GPIO_Init+0x274>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d806      	bhi.n	8001094 <HAL_GPIO_Init+0x74>
 8001086:	4a84      	ldr	r2, [pc, #528]	; (8001298 <HAL_GPIO_Init+0x278>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d020      	beq.n	80010ce <HAL_GPIO_Init+0xae>
 800108c:	4a83      	ldr	r2, [pc, #524]	; (800129c <HAL_GPIO_Init+0x27c>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d01d      	beq.n	80010ce <HAL_GPIO_Init+0xae>
          break;
 8001092:	e036      	b.n	8001102 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001094:	4a82      	ldr	r2, [pc, #520]	; (80012a0 <HAL_GPIO_Init+0x280>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d019      	beq.n	80010ce <HAL_GPIO_Init+0xae>
 800109a:	4a82      	ldr	r2, [pc, #520]	; (80012a4 <HAL_GPIO_Init+0x284>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d016      	beq.n	80010ce <HAL_GPIO_Init+0xae>
 80010a0:	4a81      	ldr	r2, [pc, #516]	; (80012a8 <HAL_GPIO_Init+0x288>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d013      	beq.n	80010ce <HAL_GPIO_Init+0xae>
          break;
 80010a6:	e02c      	b.n	8001102 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	623b      	str	r3, [r7, #32]
          break;
 80010ae:	e028      	b.n	8001102 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	3304      	adds	r3, #4
 80010b6:	623b      	str	r3, [r7, #32]
          break;
 80010b8:	e023      	b.n	8001102 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	68db      	ldr	r3, [r3, #12]
 80010be:	3308      	adds	r3, #8
 80010c0:	623b      	str	r3, [r7, #32]
          break;
 80010c2:	e01e      	b.n	8001102 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	330c      	adds	r3, #12
 80010ca:	623b      	str	r3, [r7, #32]
          break;
 80010cc:	e019      	b.n	8001102 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d102      	bne.n	80010dc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80010d6:	2304      	movs	r3, #4
 80010d8:	623b      	str	r3, [r7, #32]
          break;
 80010da:	e012      	b.n	8001102 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d105      	bne.n	80010f0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010e4:	2308      	movs	r3, #8
 80010e6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	69fa      	ldr	r2, [r7, #28]
 80010ec:	611a      	str	r2, [r3, #16]
          break;
 80010ee:	e008      	b.n	8001102 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010f0:	2308      	movs	r3, #8
 80010f2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	69fa      	ldr	r2, [r7, #28]
 80010f8:	615a      	str	r2, [r3, #20]
          break;
 80010fa:	e002      	b.n	8001102 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80010fc:	2300      	movs	r3, #0
 80010fe:	623b      	str	r3, [r7, #32]
          break;
 8001100:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	2bff      	cmp	r3, #255	; 0xff
 8001106:	d801      	bhi.n	800110c <HAL_GPIO_Init+0xec>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	e001      	b.n	8001110 <HAL_GPIO_Init+0xf0>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	3304      	adds	r3, #4
 8001110:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	2bff      	cmp	r3, #255	; 0xff
 8001116:	d802      	bhi.n	800111e <HAL_GPIO_Init+0xfe>
 8001118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	e002      	b.n	8001124 <HAL_GPIO_Init+0x104>
 800111e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001120:	3b08      	subs	r3, #8
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	210f      	movs	r1, #15
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	fa01 f303 	lsl.w	r3, r1, r3
 8001132:	43db      	mvns	r3, r3
 8001134:	401a      	ands	r2, r3
 8001136:	6a39      	ldr	r1, [r7, #32]
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	fa01 f303 	lsl.w	r3, r1, r3
 800113e:	431a      	orrs	r2, r3
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800114c:	2b00      	cmp	r3, #0
 800114e:	f000 8090 	beq.w	8001272 <HAL_GPIO_Init+0x252>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001152:	4b56      	ldr	r3, [pc, #344]	; (80012ac <HAL_GPIO_Init+0x28c>)
 8001154:	699b      	ldr	r3, [r3, #24]
 8001156:	4a55      	ldr	r2, [pc, #340]	; (80012ac <HAL_GPIO_Init+0x28c>)
 8001158:	f043 0301 	orr.w	r3, r3, #1
 800115c:	6193      	str	r3, [r2, #24]
 800115e:	4b53      	ldr	r3, [pc, #332]	; (80012ac <HAL_GPIO_Init+0x28c>)
 8001160:	699b      	ldr	r3, [r3, #24]
 8001162:	f003 0301 	and.w	r3, r3, #1
 8001166:	60bb      	str	r3, [r7, #8]
 8001168:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800116a:	4a51      	ldr	r2, [pc, #324]	; (80012b0 <HAL_GPIO_Init+0x290>)
 800116c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800116e:	089b      	lsrs	r3, r3, #2
 8001170:	3302      	adds	r3, #2
 8001172:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001176:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117a:	f003 0303 	and.w	r3, r3, #3
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	220f      	movs	r2, #15
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	43db      	mvns	r3, r3
 8001188:	68fa      	ldr	r2, [r7, #12]
 800118a:	4013      	ands	r3, r2
 800118c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a48      	ldr	r2, [pc, #288]	; (80012b4 <HAL_GPIO_Init+0x294>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d00d      	beq.n	80011b2 <HAL_GPIO_Init+0x192>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a47      	ldr	r2, [pc, #284]	; (80012b8 <HAL_GPIO_Init+0x298>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d007      	beq.n	80011ae <HAL_GPIO_Init+0x18e>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a46      	ldr	r2, [pc, #280]	; (80012bc <HAL_GPIO_Init+0x29c>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d101      	bne.n	80011aa <HAL_GPIO_Init+0x18a>
 80011a6:	2302      	movs	r3, #2
 80011a8:	e004      	b.n	80011b4 <HAL_GPIO_Init+0x194>
 80011aa:	2303      	movs	r3, #3
 80011ac:	e002      	b.n	80011b4 <HAL_GPIO_Init+0x194>
 80011ae:	2301      	movs	r3, #1
 80011b0:	e000      	b.n	80011b4 <HAL_GPIO_Init+0x194>
 80011b2:	2300      	movs	r3, #0
 80011b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011b6:	f002 0203 	and.w	r2, r2, #3
 80011ba:	0092      	lsls	r2, r2, #2
 80011bc:	4093      	lsls	r3, r2
 80011be:	68fa      	ldr	r2, [r7, #12]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80011c4:	493a      	ldr	r1, [pc, #232]	; (80012b0 <HAL_GPIO_Init+0x290>)
 80011c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c8:	089b      	lsrs	r3, r3, #2
 80011ca:	3302      	adds	r3, #2
 80011cc:	68fa      	ldr	r2, [r7, #12]
 80011ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d006      	beq.n	80011ec <HAL_GPIO_Init+0x1cc>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80011de:	4b38      	ldr	r3, [pc, #224]	; (80012c0 <HAL_GPIO_Init+0x2a0>)
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	4937      	ldr	r1, [pc, #220]	; (80012c0 <HAL_GPIO_Init+0x2a0>)
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	600b      	str	r3, [r1, #0]
 80011ea:	e006      	b.n	80011fa <HAL_GPIO_Init+0x1da>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80011ec:	4b34      	ldr	r3, [pc, #208]	; (80012c0 <HAL_GPIO_Init+0x2a0>)
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	43db      	mvns	r3, r3
 80011f4:	4932      	ldr	r1, [pc, #200]	; (80012c0 <HAL_GPIO_Init+0x2a0>)
 80011f6:	4013      	ands	r3, r2
 80011f8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d006      	beq.n	8001214 <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001206:	4b2e      	ldr	r3, [pc, #184]	; (80012c0 <HAL_GPIO_Init+0x2a0>)
 8001208:	685a      	ldr	r2, [r3, #4]
 800120a:	492d      	ldr	r1, [pc, #180]	; (80012c0 <HAL_GPIO_Init+0x2a0>)
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	4313      	orrs	r3, r2
 8001210:	604b      	str	r3, [r1, #4]
 8001212:	e006      	b.n	8001222 <HAL_GPIO_Init+0x202>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001214:	4b2a      	ldr	r3, [pc, #168]	; (80012c0 <HAL_GPIO_Init+0x2a0>)
 8001216:	685a      	ldr	r2, [r3, #4]
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	43db      	mvns	r3, r3
 800121c:	4928      	ldr	r1, [pc, #160]	; (80012c0 <HAL_GPIO_Init+0x2a0>)
 800121e:	4013      	ands	r3, r2
 8001220:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d006      	beq.n	800123c <HAL_GPIO_Init+0x21c>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800122e:	4b24      	ldr	r3, [pc, #144]	; (80012c0 <HAL_GPIO_Init+0x2a0>)
 8001230:	689a      	ldr	r2, [r3, #8]
 8001232:	4923      	ldr	r1, [pc, #140]	; (80012c0 <HAL_GPIO_Init+0x2a0>)
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	4313      	orrs	r3, r2
 8001238:	608b      	str	r3, [r1, #8]
 800123a:	e006      	b.n	800124a <HAL_GPIO_Init+0x22a>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800123c:	4b20      	ldr	r3, [pc, #128]	; (80012c0 <HAL_GPIO_Init+0x2a0>)
 800123e:	689a      	ldr	r2, [r3, #8]
 8001240:	69bb      	ldr	r3, [r7, #24]
 8001242:	43db      	mvns	r3, r3
 8001244:	491e      	ldr	r1, [pc, #120]	; (80012c0 <HAL_GPIO_Init+0x2a0>)
 8001246:	4013      	ands	r3, r2
 8001248:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d006      	beq.n	8001264 <HAL_GPIO_Init+0x244>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001256:	4b1a      	ldr	r3, [pc, #104]	; (80012c0 <HAL_GPIO_Init+0x2a0>)
 8001258:	68da      	ldr	r2, [r3, #12]
 800125a:	4919      	ldr	r1, [pc, #100]	; (80012c0 <HAL_GPIO_Init+0x2a0>)
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	4313      	orrs	r3, r2
 8001260:	60cb      	str	r3, [r1, #12]
 8001262:	e006      	b.n	8001272 <HAL_GPIO_Init+0x252>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001264:	4b16      	ldr	r3, [pc, #88]	; (80012c0 <HAL_GPIO_Init+0x2a0>)
 8001266:	68da      	ldr	r2, [r3, #12]
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	43db      	mvns	r3, r3
 800126c:	4914      	ldr	r1, [pc, #80]	; (80012c0 <HAL_GPIO_Init+0x2a0>)
 800126e:	4013      	ands	r3, r2
 8001270:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001274:	3301      	adds	r3, #1
 8001276:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127e:	fa22 f303 	lsr.w	r3, r2, r3
 8001282:	2b00      	cmp	r3, #0
 8001284:	f47f aed6 	bne.w	8001034 <HAL_GPIO_Init+0x14>
  }
}
 8001288:	bf00      	nop
 800128a:	372c      	adds	r7, #44	; 0x2c
 800128c:	46bd      	mov	sp, r7
 800128e:	bc80      	pop	{r7}
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	10210000 	.word	0x10210000
 8001298:	10110000 	.word	0x10110000
 800129c:	10120000 	.word	0x10120000
 80012a0:	10310000 	.word	0x10310000
 80012a4:	10320000 	.word	0x10320000
 80012a8:	10220000 	.word	0x10220000
 80012ac:	40021000 	.word	0x40021000
 80012b0:	40010000 	.word	0x40010000
 80012b4:	40010800 	.word	0x40010800
 80012b8:	40010c00 	.word	0x40010c00
 80012bc:	40011000 	.word	0x40011000
 80012c0:	40010400 	.word	0x40010400

080012c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	460b      	mov	r3, r1
 80012ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	689a      	ldr	r2, [r3, #8]
 80012d4:	887b      	ldrh	r3, [r7, #2]
 80012d6:	4013      	ands	r3, r2
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d002      	beq.n	80012e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80012dc:	2301      	movs	r3, #1
 80012de:	73fb      	strb	r3, [r7, #15]
 80012e0:	e001      	b.n	80012e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012e2:	2300      	movs	r3, #0
 80012e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80012e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3714      	adds	r7, #20
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bc80      	pop	{r7}
 80012f0:	4770      	bx	lr

080012f2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012f2:	b480      	push	{r7}
 80012f4:	b083      	sub	sp, #12
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
 80012fa:	460b      	mov	r3, r1
 80012fc:	807b      	strh	r3, [r7, #2]
 80012fe:	4613      	mov	r3, r2
 8001300:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001302:	787b      	ldrb	r3, [r7, #1]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d003      	beq.n	8001310 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001308:	887a      	ldrh	r2, [r7, #2]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800130e:	e003      	b.n	8001318 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001310:	887b      	ldrh	r3, [r7, #2]
 8001312:	041a      	lsls	r2, r3, #16
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	611a      	str	r2, [r3, #16]
}
 8001318:	bf00      	nop
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	bc80      	pop	{r7}
 8001320:	4770      	bx	lr
	...

08001324 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d101      	bne.n	8001336 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e26c      	b.n	8001810 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	2b00      	cmp	r3, #0
 8001340:	f000 8087 	beq.w	8001452 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001344:	4b92      	ldr	r3, [pc, #584]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f003 030c 	and.w	r3, r3, #12
 800134c:	2b04      	cmp	r3, #4
 800134e:	d00c      	beq.n	800136a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001350:	4b8f      	ldr	r3, [pc, #572]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f003 030c 	and.w	r3, r3, #12
 8001358:	2b08      	cmp	r3, #8
 800135a:	d112      	bne.n	8001382 <HAL_RCC_OscConfig+0x5e>
 800135c:	4b8c      	ldr	r3, [pc, #560]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001364:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001368:	d10b      	bne.n	8001382 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800136a:	4b89      	ldr	r3, [pc, #548]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d06c      	beq.n	8001450 <HAL_RCC_OscConfig+0x12c>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d168      	bne.n	8001450 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e246      	b.n	8001810 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800138a:	d106      	bne.n	800139a <HAL_RCC_OscConfig+0x76>
 800138c:	4b80      	ldr	r3, [pc, #512]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a7f      	ldr	r2, [pc, #508]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 8001392:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001396:	6013      	str	r3, [r2, #0]
 8001398:	e02e      	b.n	80013f8 <HAL_RCC_OscConfig+0xd4>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d10c      	bne.n	80013bc <HAL_RCC_OscConfig+0x98>
 80013a2:	4b7b      	ldr	r3, [pc, #492]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a7a      	ldr	r2, [pc, #488]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 80013a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013ac:	6013      	str	r3, [r2, #0]
 80013ae:	4b78      	ldr	r3, [pc, #480]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a77      	ldr	r2, [pc, #476]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 80013b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013b8:	6013      	str	r3, [r2, #0]
 80013ba:	e01d      	b.n	80013f8 <HAL_RCC_OscConfig+0xd4>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013c4:	d10c      	bne.n	80013e0 <HAL_RCC_OscConfig+0xbc>
 80013c6:	4b72      	ldr	r3, [pc, #456]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a71      	ldr	r2, [pc, #452]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 80013cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013d0:	6013      	str	r3, [r2, #0]
 80013d2:	4b6f      	ldr	r3, [pc, #444]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a6e      	ldr	r2, [pc, #440]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 80013d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013dc:	6013      	str	r3, [r2, #0]
 80013de:	e00b      	b.n	80013f8 <HAL_RCC_OscConfig+0xd4>
 80013e0:	4b6b      	ldr	r3, [pc, #428]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a6a      	ldr	r2, [pc, #424]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 80013e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013ea:	6013      	str	r3, [r2, #0]
 80013ec:	4b68      	ldr	r3, [pc, #416]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a67      	ldr	r2, [pc, #412]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 80013f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013f6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d013      	beq.n	8001428 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001400:	f7ff fcf6 	bl	8000df0 <HAL_GetTick>
 8001404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001406:	e008      	b.n	800141a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001408:	f7ff fcf2 	bl	8000df0 <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	2b64      	cmp	r3, #100	; 0x64
 8001414:	d901      	bls.n	800141a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e1fa      	b.n	8001810 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800141a:	4b5d      	ldr	r3, [pc, #372]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d0f0      	beq.n	8001408 <HAL_RCC_OscConfig+0xe4>
 8001426:	e014      	b.n	8001452 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001428:	f7ff fce2 	bl	8000df0 <HAL_GetTick>
 800142c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800142e:	e008      	b.n	8001442 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001430:	f7ff fcde 	bl	8000df0 <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	2b64      	cmp	r3, #100	; 0x64
 800143c:	d901      	bls.n	8001442 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800143e:	2303      	movs	r3, #3
 8001440:	e1e6      	b.n	8001810 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001442:	4b53      	ldr	r3, [pc, #332]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d1f0      	bne.n	8001430 <HAL_RCC_OscConfig+0x10c>
 800144e:	e000      	b.n	8001452 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001450:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	2b00      	cmp	r3, #0
 800145c:	d063      	beq.n	8001526 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800145e:	4b4c      	ldr	r3, [pc, #304]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f003 030c 	and.w	r3, r3, #12
 8001466:	2b00      	cmp	r3, #0
 8001468:	d00b      	beq.n	8001482 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800146a:	4b49      	ldr	r3, [pc, #292]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f003 030c 	and.w	r3, r3, #12
 8001472:	2b08      	cmp	r3, #8
 8001474:	d11c      	bne.n	80014b0 <HAL_RCC_OscConfig+0x18c>
 8001476:	4b46      	ldr	r3, [pc, #280]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d116      	bne.n	80014b0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001482:	4b43      	ldr	r3, [pc, #268]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	2b00      	cmp	r3, #0
 800148c:	d005      	beq.n	800149a <HAL_RCC_OscConfig+0x176>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	691b      	ldr	r3, [r3, #16]
 8001492:	2b01      	cmp	r3, #1
 8001494:	d001      	beq.n	800149a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e1ba      	b.n	8001810 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800149a:	4b3d      	ldr	r3, [pc, #244]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	695b      	ldr	r3, [r3, #20]
 80014a6:	00db      	lsls	r3, r3, #3
 80014a8:	4939      	ldr	r1, [pc, #228]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 80014aa:	4313      	orrs	r3, r2
 80014ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ae:	e03a      	b.n	8001526 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	691b      	ldr	r3, [r3, #16]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d020      	beq.n	80014fa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014b8:	4b36      	ldr	r3, [pc, #216]	; (8001594 <HAL_RCC_OscConfig+0x270>)
 80014ba:	2201      	movs	r2, #1
 80014bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014be:	f7ff fc97 	bl	8000df0 <HAL_GetTick>
 80014c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014c4:	e008      	b.n	80014d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014c6:	f7ff fc93 	bl	8000df0 <HAL_GetTick>
 80014ca:	4602      	mov	r2, r0
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d901      	bls.n	80014d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80014d4:	2303      	movs	r3, #3
 80014d6:	e19b      	b.n	8001810 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014d8:	4b2d      	ldr	r3, [pc, #180]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0302 	and.w	r3, r3, #2
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d0f0      	beq.n	80014c6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014e4:	4b2a      	ldr	r3, [pc, #168]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	695b      	ldr	r3, [r3, #20]
 80014f0:	00db      	lsls	r3, r3, #3
 80014f2:	4927      	ldr	r1, [pc, #156]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 80014f4:	4313      	orrs	r3, r2
 80014f6:	600b      	str	r3, [r1, #0]
 80014f8:	e015      	b.n	8001526 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014fa:	4b26      	ldr	r3, [pc, #152]	; (8001594 <HAL_RCC_OscConfig+0x270>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001500:	f7ff fc76 	bl	8000df0 <HAL_GetTick>
 8001504:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001506:	e008      	b.n	800151a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001508:	f7ff fc72 	bl	8000df0 <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b02      	cmp	r3, #2
 8001514:	d901      	bls.n	800151a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e17a      	b.n	8001810 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800151a:	4b1d      	ldr	r3, [pc, #116]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	2b00      	cmp	r3, #0
 8001524:	d1f0      	bne.n	8001508 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0308 	and.w	r3, r3, #8
 800152e:	2b00      	cmp	r3, #0
 8001530:	d03a      	beq.n	80015a8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	699b      	ldr	r3, [r3, #24]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d019      	beq.n	800156e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800153a:	4b17      	ldr	r3, [pc, #92]	; (8001598 <HAL_RCC_OscConfig+0x274>)
 800153c:	2201      	movs	r2, #1
 800153e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001540:	f7ff fc56 	bl	8000df0 <HAL_GetTick>
 8001544:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001546:	e008      	b.n	800155a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001548:	f7ff fc52 	bl	8000df0 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b02      	cmp	r3, #2
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e15a      	b.n	8001810 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800155a:	4b0d      	ldr	r3, [pc, #52]	; (8001590 <HAL_RCC_OscConfig+0x26c>)
 800155c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	2b00      	cmp	r3, #0
 8001564:	d0f0      	beq.n	8001548 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001566:	2001      	movs	r0, #1
 8001568:	f000 faa8 	bl	8001abc <RCC_Delay>
 800156c:	e01c      	b.n	80015a8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800156e:	4b0a      	ldr	r3, [pc, #40]	; (8001598 <HAL_RCC_OscConfig+0x274>)
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001574:	f7ff fc3c 	bl	8000df0 <HAL_GetTick>
 8001578:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800157a:	e00f      	b.n	800159c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800157c:	f7ff fc38 	bl	8000df0 <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	2b02      	cmp	r3, #2
 8001588:	d908      	bls.n	800159c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e140      	b.n	8001810 <HAL_RCC_OscConfig+0x4ec>
 800158e:	bf00      	nop
 8001590:	40021000 	.word	0x40021000
 8001594:	42420000 	.word	0x42420000
 8001598:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800159c:	4b9e      	ldr	r3, [pc, #632]	; (8001818 <HAL_RCC_OscConfig+0x4f4>)
 800159e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a0:	f003 0302 	and.w	r3, r3, #2
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d1e9      	bne.n	800157c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0304 	and.w	r3, r3, #4
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	f000 80a6 	beq.w	8001702 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015b6:	2300      	movs	r3, #0
 80015b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015ba:	4b97      	ldr	r3, [pc, #604]	; (8001818 <HAL_RCC_OscConfig+0x4f4>)
 80015bc:	69db      	ldr	r3, [r3, #28]
 80015be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d10d      	bne.n	80015e2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015c6:	4b94      	ldr	r3, [pc, #592]	; (8001818 <HAL_RCC_OscConfig+0x4f4>)
 80015c8:	69db      	ldr	r3, [r3, #28]
 80015ca:	4a93      	ldr	r2, [pc, #588]	; (8001818 <HAL_RCC_OscConfig+0x4f4>)
 80015cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015d0:	61d3      	str	r3, [r2, #28]
 80015d2:	4b91      	ldr	r3, [pc, #580]	; (8001818 <HAL_RCC_OscConfig+0x4f4>)
 80015d4:	69db      	ldr	r3, [r3, #28]
 80015d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015da:	60bb      	str	r3, [r7, #8]
 80015dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015de:	2301      	movs	r3, #1
 80015e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015e2:	4b8e      	ldr	r3, [pc, #568]	; (800181c <HAL_RCC_OscConfig+0x4f8>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d118      	bne.n	8001620 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015ee:	4b8b      	ldr	r3, [pc, #556]	; (800181c <HAL_RCC_OscConfig+0x4f8>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a8a      	ldr	r2, [pc, #552]	; (800181c <HAL_RCC_OscConfig+0x4f8>)
 80015f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015fa:	f7ff fbf9 	bl	8000df0 <HAL_GetTick>
 80015fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001600:	e008      	b.n	8001614 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001602:	f7ff fbf5 	bl	8000df0 <HAL_GetTick>
 8001606:	4602      	mov	r2, r0
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	2b64      	cmp	r3, #100	; 0x64
 800160e:	d901      	bls.n	8001614 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e0fd      	b.n	8001810 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001614:	4b81      	ldr	r3, [pc, #516]	; (800181c <HAL_RCC_OscConfig+0x4f8>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800161c:	2b00      	cmp	r3, #0
 800161e:	d0f0      	beq.n	8001602 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	2b01      	cmp	r3, #1
 8001626:	d106      	bne.n	8001636 <HAL_RCC_OscConfig+0x312>
 8001628:	4b7b      	ldr	r3, [pc, #492]	; (8001818 <HAL_RCC_OscConfig+0x4f4>)
 800162a:	6a1b      	ldr	r3, [r3, #32]
 800162c:	4a7a      	ldr	r2, [pc, #488]	; (8001818 <HAL_RCC_OscConfig+0x4f4>)
 800162e:	f043 0301 	orr.w	r3, r3, #1
 8001632:	6213      	str	r3, [r2, #32]
 8001634:	e02d      	b.n	8001692 <HAL_RCC_OscConfig+0x36e>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d10c      	bne.n	8001658 <HAL_RCC_OscConfig+0x334>
 800163e:	4b76      	ldr	r3, [pc, #472]	; (8001818 <HAL_RCC_OscConfig+0x4f4>)
 8001640:	6a1b      	ldr	r3, [r3, #32]
 8001642:	4a75      	ldr	r2, [pc, #468]	; (8001818 <HAL_RCC_OscConfig+0x4f4>)
 8001644:	f023 0301 	bic.w	r3, r3, #1
 8001648:	6213      	str	r3, [r2, #32]
 800164a:	4b73      	ldr	r3, [pc, #460]	; (8001818 <HAL_RCC_OscConfig+0x4f4>)
 800164c:	6a1b      	ldr	r3, [r3, #32]
 800164e:	4a72      	ldr	r2, [pc, #456]	; (8001818 <HAL_RCC_OscConfig+0x4f4>)
 8001650:	f023 0304 	bic.w	r3, r3, #4
 8001654:	6213      	str	r3, [r2, #32]
 8001656:	e01c      	b.n	8001692 <HAL_RCC_OscConfig+0x36e>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	2b05      	cmp	r3, #5
 800165e:	d10c      	bne.n	800167a <HAL_RCC_OscConfig+0x356>
 8001660:	4b6d      	ldr	r3, [pc, #436]	; (8001818 <HAL_RCC_OscConfig+0x4f4>)
 8001662:	6a1b      	ldr	r3, [r3, #32]
 8001664:	4a6c      	ldr	r2, [pc, #432]	; (8001818 <HAL_RCC_OscConfig+0x4f4>)
 8001666:	f043 0304 	orr.w	r3, r3, #4
 800166a:	6213      	str	r3, [r2, #32]
 800166c:	4b6a      	ldr	r3, [pc, #424]	; (8001818 <HAL_RCC_OscConfig+0x4f4>)
 800166e:	6a1b      	ldr	r3, [r3, #32]
 8001670:	4a69      	ldr	r2, [pc, #420]	; (8001818 <HAL_RCC_OscConfig+0x4f4>)
 8001672:	f043 0301 	orr.w	r3, r3, #1
 8001676:	6213      	str	r3, [r2, #32]
 8001678:	e00b      	b.n	8001692 <HAL_RCC_OscConfig+0x36e>
 800167a:	4b67      	ldr	r3, [pc, #412]	; (8001818 <HAL_RCC_OscConfig+0x4f4>)
 800167c:	6a1b      	ldr	r3, [r3, #32]
 800167e:	4a66      	ldr	r2, [pc, #408]	; (8001818 <HAL_RCC_OscConfig+0x4f4>)
 8001680:	f023 0301 	bic.w	r3, r3, #1
 8001684:	6213      	str	r3, [r2, #32]
 8001686:	4b64      	ldr	r3, [pc, #400]	; (8001818 <HAL_RCC_OscConfig+0x4f4>)
 8001688:	6a1b      	ldr	r3, [r3, #32]
 800168a:	4a63      	ldr	r2, [pc, #396]	; (8001818 <HAL_RCC_OscConfig+0x4f4>)
 800168c:	f023 0304 	bic.w	r3, r3, #4
 8001690:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	68db      	ldr	r3, [r3, #12]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d015      	beq.n	80016c6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800169a:	f7ff fba9 	bl	8000df0 <HAL_GetTick>
 800169e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016a0:	e00a      	b.n	80016b8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016a2:	f7ff fba5 	bl	8000df0 <HAL_GetTick>
 80016a6:	4602      	mov	r2, r0
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d901      	bls.n	80016b8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80016b4:	2303      	movs	r3, #3
 80016b6:	e0ab      	b.n	8001810 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016b8:	4b57      	ldr	r3, [pc, #348]	; (8001818 <HAL_RCC_OscConfig+0x4f4>)
 80016ba:	6a1b      	ldr	r3, [r3, #32]
 80016bc:	f003 0302 	and.w	r3, r3, #2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d0ee      	beq.n	80016a2 <HAL_RCC_OscConfig+0x37e>
 80016c4:	e014      	b.n	80016f0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016c6:	f7ff fb93 	bl	8000df0 <HAL_GetTick>
 80016ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016cc:	e00a      	b.n	80016e4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016ce:	f7ff fb8f 	bl	8000df0 <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80016dc:	4293      	cmp	r3, r2
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e095      	b.n	8001810 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016e4:	4b4c      	ldr	r3, [pc, #304]	; (8001818 <HAL_RCC_OscConfig+0x4f4>)
 80016e6:	6a1b      	ldr	r3, [r3, #32]
 80016e8:	f003 0302 	and.w	r3, r3, #2
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d1ee      	bne.n	80016ce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80016f0:	7dfb      	ldrb	r3, [r7, #23]
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d105      	bne.n	8001702 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016f6:	4b48      	ldr	r3, [pc, #288]	; (8001818 <HAL_RCC_OscConfig+0x4f4>)
 80016f8:	69db      	ldr	r3, [r3, #28]
 80016fa:	4a47      	ldr	r2, [pc, #284]	; (8001818 <HAL_RCC_OscConfig+0x4f4>)
 80016fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001700:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	69db      	ldr	r3, [r3, #28]
 8001706:	2b00      	cmp	r3, #0
 8001708:	f000 8081 	beq.w	800180e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800170c:	4b42      	ldr	r3, [pc, #264]	; (8001818 <HAL_RCC_OscConfig+0x4f4>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f003 030c 	and.w	r3, r3, #12
 8001714:	2b08      	cmp	r3, #8
 8001716:	d061      	beq.n	80017dc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	69db      	ldr	r3, [r3, #28]
 800171c:	2b02      	cmp	r3, #2
 800171e:	d146      	bne.n	80017ae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001720:	4b3f      	ldr	r3, [pc, #252]	; (8001820 <HAL_RCC_OscConfig+0x4fc>)
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001726:	f7ff fb63 	bl	8000df0 <HAL_GetTick>
 800172a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800172c:	e008      	b.n	8001740 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800172e:	f7ff fb5f 	bl	8000df0 <HAL_GetTick>
 8001732:	4602      	mov	r2, r0
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	2b02      	cmp	r3, #2
 800173a:	d901      	bls.n	8001740 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	e067      	b.n	8001810 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001740:	4b35      	ldr	r3, [pc, #212]	; (8001818 <HAL_RCC_OscConfig+0x4f4>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d1f0      	bne.n	800172e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6a1b      	ldr	r3, [r3, #32]
 8001750:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001754:	d108      	bne.n	8001768 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001756:	4b30      	ldr	r3, [pc, #192]	; (8001818 <HAL_RCC_OscConfig+0x4f4>)
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	492d      	ldr	r1, [pc, #180]	; (8001818 <HAL_RCC_OscConfig+0x4f4>)
 8001764:	4313      	orrs	r3, r2
 8001766:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001768:	4b2b      	ldr	r3, [pc, #172]	; (8001818 <HAL_RCC_OscConfig+0x4f4>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6a19      	ldr	r1, [r3, #32]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001778:	430b      	orrs	r3, r1
 800177a:	4927      	ldr	r1, [pc, #156]	; (8001818 <HAL_RCC_OscConfig+0x4f4>)
 800177c:	4313      	orrs	r3, r2
 800177e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001780:	4b27      	ldr	r3, [pc, #156]	; (8001820 <HAL_RCC_OscConfig+0x4fc>)
 8001782:	2201      	movs	r2, #1
 8001784:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001786:	f7ff fb33 	bl	8000df0 <HAL_GetTick>
 800178a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800178c:	e008      	b.n	80017a0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800178e:	f7ff fb2f 	bl	8000df0 <HAL_GetTick>
 8001792:	4602      	mov	r2, r0
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	2b02      	cmp	r3, #2
 800179a:	d901      	bls.n	80017a0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	e037      	b.n	8001810 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017a0:	4b1d      	ldr	r3, [pc, #116]	; (8001818 <HAL_RCC_OscConfig+0x4f4>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d0f0      	beq.n	800178e <HAL_RCC_OscConfig+0x46a>
 80017ac:	e02f      	b.n	800180e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ae:	4b1c      	ldr	r3, [pc, #112]	; (8001820 <HAL_RCC_OscConfig+0x4fc>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b4:	f7ff fb1c 	bl	8000df0 <HAL_GetTick>
 80017b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017ba:	e008      	b.n	80017ce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017bc:	f7ff fb18 	bl	8000df0 <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e020      	b.n	8001810 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017ce:	4b12      	ldr	r3, [pc, #72]	; (8001818 <HAL_RCC_OscConfig+0x4f4>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d1f0      	bne.n	80017bc <HAL_RCC_OscConfig+0x498>
 80017da:	e018      	b.n	800180e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	69db      	ldr	r3, [r3, #28]
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d101      	bne.n	80017e8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e013      	b.n	8001810 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80017e8:	4b0b      	ldr	r3, [pc, #44]	; (8001818 <HAL_RCC_OscConfig+0x4f4>)
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6a1b      	ldr	r3, [r3, #32]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d106      	bne.n	800180a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001806:	429a      	cmp	r2, r3
 8001808:	d001      	beq.n	800180e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e000      	b.n	8001810 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800180e:	2300      	movs	r3, #0
}
 8001810:	4618      	mov	r0, r3
 8001812:	3718      	adds	r7, #24
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	40021000 	.word	0x40021000
 800181c:	40007000 	.word	0x40007000
 8001820:	42420060 	.word	0x42420060

08001824 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d101      	bne.n	8001838 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e0d0      	b.n	80019da <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001838:	4b6a      	ldr	r3, [pc, #424]	; (80019e4 <HAL_RCC_ClockConfig+0x1c0>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0307 	and.w	r3, r3, #7
 8001840:	683a      	ldr	r2, [r7, #0]
 8001842:	429a      	cmp	r2, r3
 8001844:	d910      	bls.n	8001868 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001846:	4b67      	ldr	r3, [pc, #412]	; (80019e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f023 0207 	bic.w	r2, r3, #7
 800184e:	4965      	ldr	r1, [pc, #404]	; (80019e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	4313      	orrs	r3, r2
 8001854:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001856:	4b63      	ldr	r3, [pc, #396]	; (80019e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	683a      	ldr	r2, [r7, #0]
 8001860:	429a      	cmp	r2, r3
 8001862:	d001      	beq.n	8001868 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e0b8      	b.n	80019da <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0302 	and.w	r3, r3, #2
 8001870:	2b00      	cmp	r3, #0
 8001872:	d020      	beq.n	80018b6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0304 	and.w	r3, r3, #4
 800187c:	2b00      	cmp	r3, #0
 800187e:	d005      	beq.n	800188c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001880:	4b59      	ldr	r3, [pc, #356]	; (80019e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	4a58      	ldr	r2, [pc, #352]	; (80019e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001886:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800188a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0308 	and.w	r3, r3, #8
 8001894:	2b00      	cmp	r3, #0
 8001896:	d005      	beq.n	80018a4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001898:	4b53      	ldr	r3, [pc, #332]	; (80019e8 <HAL_RCC_ClockConfig+0x1c4>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	4a52      	ldr	r2, [pc, #328]	; (80019e8 <HAL_RCC_ClockConfig+0x1c4>)
 800189e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80018a2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018a4:	4b50      	ldr	r3, [pc, #320]	; (80019e8 <HAL_RCC_ClockConfig+0x1c4>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	494d      	ldr	r1, [pc, #308]	; (80019e8 <HAL_RCC_ClockConfig+0x1c4>)
 80018b2:	4313      	orrs	r3, r2
 80018b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d040      	beq.n	8001944 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d107      	bne.n	80018da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ca:	4b47      	ldr	r3, [pc, #284]	; (80019e8 <HAL_RCC_ClockConfig+0x1c4>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d115      	bne.n	8001902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e07f      	b.n	80019da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d107      	bne.n	80018f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018e2:	4b41      	ldr	r3, [pc, #260]	; (80019e8 <HAL_RCC_ClockConfig+0x1c4>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d109      	bne.n	8001902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e073      	b.n	80019da <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018f2:	4b3d      	ldr	r3, [pc, #244]	; (80019e8 <HAL_RCC_ClockConfig+0x1c4>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d101      	bne.n	8001902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e06b      	b.n	80019da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001902:	4b39      	ldr	r3, [pc, #228]	; (80019e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f023 0203 	bic.w	r2, r3, #3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	4936      	ldr	r1, [pc, #216]	; (80019e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001910:	4313      	orrs	r3, r2
 8001912:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001914:	f7ff fa6c 	bl	8000df0 <HAL_GetTick>
 8001918:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800191a:	e00a      	b.n	8001932 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800191c:	f7ff fa68 	bl	8000df0 <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	f241 3288 	movw	r2, #5000	; 0x1388
 800192a:	4293      	cmp	r3, r2
 800192c:	d901      	bls.n	8001932 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e053      	b.n	80019da <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001932:	4b2d      	ldr	r3, [pc, #180]	; (80019e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f003 020c 	and.w	r2, r3, #12
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	429a      	cmp	r2, r3
 8001942:	d1eb      	bne.n	800191c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001944:	4b27      	ldr	r3, [pc, #156]	; (80019e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0307 	and.w	r3, r3, #7
 800194c:	683a      	ldr	r2, [r7, #0]
 800194e:	429a      	cmp	r2, r3
 8001950:	d210      	bcs.n	8001974 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001952:	4b24      	ldr	r3, [pc, #144]	; (80019e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f023 0207 	bic.w	r2, r3, #7
 800195a:	4922      	ldr	r1, [pc, #136]	; (80019e4 <HAL_RCC_ClockConfig+0x1c0>)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	4313      	orrs	r3, r2
 8001960:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001962:	4b20      	ldr	r3, [pc, #128]	; (80019e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0307 	and.w	r3, r3, #7
 800196a:	683a      	ldr	r2, [r7, #0]
 800196c:	429a      	cmp	r2, r3
 800196e:	d001      	beq.n	8001974 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e032      	b.n	80019da <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0304 	and.w	r3, r3, #4
 800197c:	2b00      	cmp	r3, #0
 800197e:	d008      	beq.n	8001992 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001980:	4b19      	ldr	r3, [pc, #100]	; (80019e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	4916      	ldr	r1, [pc, #88]	; (80019e8 <HAL_RCC_ClockConfig+0x1c4>)
 800198e:	4313      	orrs	r3, r2
 8001990:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0308 	and.w	r3, r3, #8
 800199a:	2b00      	cmp	r3, #0
 800199c:	d009      	beq.n	80019b2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800199e:	4b12      	ldr	r3, [pc, #72]	; (80019e8 <HAL_RCC_ClockConfig+0x1c4>)
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	691b      	ldr	r3, [r3, #16]
 80019aa:	00db      	lsls	r3, r3, #3
 80019ac:	490e      	ldr	r1, [pc, #56]	; (80019e8 <HAL_RCC_ClockConfig+0x1c4>)
 80019ae:	4313      	orrs	r3, r2
 80019b0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019b2:	f000 f821 	bl	80019f8 <HAL_RCC_GetSysClockFreq>
 80019b6:	4601      	mov	r1, r0
 80019b8:	4b0b      	ldr	r3, [pc, #44]	; (80019e8 <HAL_RCC_ClockConfig+0x1c4>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	091b      	lsrs	r3, r3, #4
 80019be:	f003 030f 	and.w	r3, r3, #15
 80019c2:	4a0a      	ldr	r2, [pc, #40]	; (80019ec <HAL_RCC_ClockConfig+0x1c8>)
 80019c4:	5cd3      	ldrb	r3, [r2, r3]
 80019c6:	fa21 f303 	lsr.w	r3, r1, r3
 80019ca:	4a09      	ldr	r2, [pc, #36]	; (80019f0 <HAL_RCC_ClockConfig+0x1cc>)
 80019cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80019ce:	4b09      	ldr	r3, [pc, #36]	; (80019f4 <HAL_RCC_ClockConfig+0x1d0>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff f9ca 	bl	8000d6c <HAL_InitTick>

  return HAL_OK;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3710      	adds	r7, #16
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	40022000 	.word	0x40022000
 80019e8:	40021000 	.word	0x40021000
 80019ec:	08003030 	.word	0x08003030
 80019f0:	20000004 	.word	0x20000004
 80019f4:	20000008 	.word	0x20000008

080019f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019f8:	b490      	push	{r4, r7}
 80019fa:	b08a      	sub	sp, #40	; 0x28
 80019fc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80019fe:	4b2a      	ldr	r3, [pc, #168]	; (8001aa8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001a00:	1d3c      	adds	r4, r7, #4
 8001a02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001a08:	4b28      	ldr	r3, [pc, #160]	; (8001aac <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a0a:	881b      	ldrh	r3, [r3, #0]
 8001a0c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	61fb      	str	r3, [r7, #28]
 8001a12:	2300      	movs	r3, #0
 8001a14:	61bb      	str	r3, [r7, #24]
 8001a16:	2300      	movs	r3, #0
 8001a18:	627b      	str	r3, [r7, #36]	; 0x24
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a22:	4b23      	ldr	r3, [pc, #140]	; (8001ab0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	f003 030c 	and.w	r3, r3, #12
 8001a2e:	2b04      	cmp	r3, #4
 8001a30:	d002      	beq.n	8001a38 <HAL_RCC_GetSysClockFreq+0x40>
 8001a32:	2b08      	cmp	r3, #8
 8001a34:	d003      	beq.n	8001a3e <HAL_RCC_GetSysClockFreq+0x46>
 8001a36:	e02d      	b.n	8001a94 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a38:	4b1e      	ldr	r3, [pc, #120]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a3a:	623b      	str	r3, [r7, #32]
      break;
 8001a3c:	e02d      	b.n	8001a9a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	0c9b      	lsrs	r3, r3, #18
 8001a42:	f003 030f 	and.w	r3, r3, #15
 8001a46:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a4a:	4413      	add	r3, r2
 8001a4c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001a50:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d013      	beq.n	8001a84 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a5c:	4b14      	ldr	r3, [pc, #80]	; (8001ab0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	0c5b      	lsrs	r3, r3, #17
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a6a:	4413      	add	r3, r2
 8001a6c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001a70:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	4a0f      	ldr	r2, [pc, #60]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a76:	fb02 f203 	mul.w	r2, r2, r3
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a80:	627b      	str	r3, [r7, #36]	; 0x24
 8001a82:	e004      	b.n	8001a8e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	4a0c      	ldr	r2, [pc, #48]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001a88:	fb02 f303 	mul.w	r3, r2, r3
 8001a8c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a90:	623b      	str	r3, [r7, #32]
      break;
 8001a92:	e002      	b.n	8001a9a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a94:	4b07      	ldr	r3, [pc, #28]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a96:	623b      	str	r3, [r7, #32]
      break;
 8001a98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a9a:	6a3b      	ldr	r3, [r7, #32]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3728      	adds	r7, #40	; 0x28
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bc90      	pop	{r4, r7}
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	0800301c 	.word	0x0800301c
 8001aac:	0800302c 	.word	0x0800302c
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	007a1200 	.word	0x007a1200
 8001ab8:	003d0900 	.word	0x003d0900

08001abc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ac4:	4b0a      	ldr	r3, [pc, #40]	; (8001af0 <RCC_Delay+0x34>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a0a      	ldr	r2, [pc, #40]	; (8001af4 <RCC_Delay+0x38>)
 8001aca:	fba2 2303 	umull	r2, r3, r2, r3
 8001ace:	0a5b      	lsrs	r3, r3, #9
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	fb02 f303 	mul.w	r3, r2, r3
 8001ad6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ad8:	bf00      	nop
  }
  while (Delay --);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	1e5a      	subs	r2, r3, #1
 8001ade:	60fa      	str	r2, [r7, #12]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d1f9      	bne.n	8001ad8 <RCC_Delay+0x1c>
}
 8001ae4:	bf00      	nop
 8001ae6:	3714      	adds	r7, #20
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bc80      	pop	{r7}
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	20000004 	.word	0x20000004
 8001af4:	10624dd3 	.word	0x10624dd3

08001af8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d101      	bne.n	8001b0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e041      	b.n	8001b8e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d106      	bne.n	8001b24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f7ff f806 	bl	8000b30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2202      	movs	r2, #2
 8001b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	3304      	adds	r3, #4
 8001b34:	4619      	mov	r1, r3
 8001b36:	4610      	mov	r0, r2
 8001b38:	f000 fe2c 	bl	8002794 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2201      	movs	r2, #1
 8001b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2201      	movs	r2, #1
 8001b58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2201      	movs	r2, #1
 8001b78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b8c:	2300      	movs	r3, #0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
	...

08001b98 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d001      	beq.n	8001bb0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e02d      	b.n	8001c0c <HAL_TIM_Base_Start+0x74>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2202      	movs	r2, #2
 8001bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a16      	ldr	r2, [pc, #88]	; (8001c18 <HAL_TIM_Base_Start+0x80>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d009      	beq.n	8001bd6 <HAL_TIM_Base_Start+0x3e>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bca:	d004      	beq.n	8001bd6 <HAL_TIM_Base_Start+0x3e>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a12      	ldr	r2, [pc, #72]	; (8001c1c <HAL_TIM_Base_Start+0x84>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d111      	bne.n	8001bfa <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	f003 0307 	and.w	r3, r3, #7
 8001be0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2b06      	cmp	r3, #6
 8001be6:	d010      	beq.n	8001c0a <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f042 0201 	orr.w	r2, r2, #1
 8001bf6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bf8:	e007      	b.n	8001c0a <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f042 0201 	orr.w	r2, r2, #1
 8001c08:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c0a:	2300      	movs	r3, #0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3714      	adds	r7, #20
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bc80      	pop	{r7}
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	40012c00 	.word	0x40012c00
 8001c1c:	40000400 	.word	0x40000400

08001c20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d001      	beq.n	8001c38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e035      	b.n	8001ca4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2202      	movs	r2, #2
 8001c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	68da      	ldr	r2, [r3, #12]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f042 0201 	orr.w	r2, r2, #1
 8001c4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a16      	ldr	r2, [pc, #88]	; (8001cb0 <HAL_TIM_Base_Start_IT+0x90>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d009      	beq.n	8001c6e <HAL_TIM_Base_Start_IT+0x4e>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c62:	d004      	beq.n	8001c6e <HAL_TIM_Base_Start_IT+0x4e>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a12      	ldr	r2, [pc, #72]	; (8001cb4 <HAL_TIM_Base_Start_IT+0x94>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d111      	bne.n	8001c92 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f003 0307 	and.w	r3, r3, #7
 8001c78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2b06      	cmp	r3, #6
 8001c7e:	d010      	beq.n	8001ca2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f042 0201 	orr.w	r2, r2, #1
 8001c8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c90:	e007      	b.n	8001ca2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f042 0201 	orr.w	r2, r2, #1
 8001ca0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ca2:	2300      	movs	r3, #0
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3714      	adds	r7, #20
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bc80      	pop	{r7}
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	40012c00 	.word	0x40012c00
 8001cb4:	40000400 	.word	0x40000400

08001cb8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d101      	bne.n	8001cca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e041      	b.n	8001d4e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d106      	bne.n	8001ce4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f7fe ff90 	bl	8000c04 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2202      	movs	r2, #2
 8001ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	3304      	adds	r3, #4
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4610      	mov	r0, r2
 8001cf8:	f000 fd4c 	bl	8002794 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2201      	movs	r2, #1
 8001d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2201      	movs	r2, #1
 8001d18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
	...

08001d58 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d109      	bne.n	8001d7c <HAL_TIM_PWM_Start+0x24>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	bf14      	ite	ne
 8001d74:	2301      	movne	r3, #1
 8001d76:	2300      	moveq	r3, #0
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	e022      	b.n	8001dc2 <HAL_TIM_PWM_Start+0x6a>
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	2b04      	cmp	r3, #4
 8001d80:	d109      	bne.n	8001d96 <HAL_TIM_PWM_Start+0x3e>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	bf14      	ite	ne
 8001d8e:	2301      	movne	r3, #1
 8001d90:	2300      	moveq	r3, #0
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	e015      	b.n	8001dc2 <HAL_TIM_PWM_Start+0x6a>
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	2b08      	cmp	r3, #8
 8001d9a:	d109      	bne.n	8001db0 <HAL_TIM_PWM_Start+0x58>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	bf14      	ite	ne
 8001da8:	2301      	movne	r3, #1
 8001daa:	2300      	moveq	r3, #0
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	e008      	b.n	8001dc2 <HAL_TIM_PWM_Start+0x6a>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	bf14      	ite	ne
 8001dbc:	2301      	movne	r3, #1
 8001dbe:	2300      	moveq	r3, #0
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e059      	b.n	8001e7e <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d104      	bne.n	8001dda <HAL_TIM_PWM_Start+0x82>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2202      	movs	r2, #2
 8001dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001dd8:	e013      	b.n	8001e02 <HAL_TIM_PWM_Start+0xaa>
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	2b04      	cmp	r3, #4
 8001dde:	d104      	bne.n	8001dea <HAL_TIM_PWM_Start+0x92>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2202      	movs	r2, #2
 8001de4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001de8:	e00b      	b.n	8001e02 <HAL_TIM_PWM_Start+0xaa>
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	2b08      	cmp	r3, #8
 8001dee:	d104      	bne.n	8001dfa <HAL_TIM_PWM_Start+0xa2>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2202      	movs	r2, #2
 8001df4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001df8:	e003      	b.n	8001e02 <HAL_TIM_PWM_Start+0xaa>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2202      	movs	r2, #2
 8001dfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	2201      	movs	r2, #1
 8001e08:	6839      	ldr	r1, [r7, #0]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f001 f83f 	bl	8002e8e <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a1c      	ldr	r2, [pc, #112]	; (8001e88 <HAL_TIM_PWM_Start+0x130>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d107      	bne.n	8001e2a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e28:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a16      	ldr	r2, [pc, #88]	; (8001e88 <HAL_TIM_PWM_Start+0x130>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d009      	beq.n	8001e48 <HAL_TIM_PWM_Start+0xf0>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e3c:	d004      	beq.n	8001e48 <HAL_TIM_PWM_Start+0xf0>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a12      	ldr	r2, [pc, #72]	; (8001e8c <HAL_TIM_PWM_Start+0x134>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d111      	bne.n	8001e6c <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f003 0307 	and.w	r3, r3, #7
 8001e52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2b06      	cmp	r3, #6
 8001e58:	d010      	beq.n	8001e7c <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f042 0201 	orr.w	r2, r2, #1
 8001e68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e6a:	e007      	b.n	8001e7c <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f042 0201 	orr.w	r2, r2, #1
 8001e7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3710      	adds	r7, #16
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	40012c00 	.word	0x40012c00
 8001e8c:	40000400 	.word	0x40000400

08001e90 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d101      	bne.n	8001ea2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e041      	b.n	8001f26 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d106      	bne.n	8001ebc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 f839 	bl	8001f2e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2202      	movs	r2, #2
 8001ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	3304      	adds	r3, #4
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4610      	mov	r0, r2
 8001ed0:	f000 fc60 	bl	8002794 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2201      	movs	r2, #1
 8001f18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	b083      	sub	sp, #12
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8001f36:	bf00      	nop
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bc80      	pop	{r7}
 8001f3e:	4770      	bx	lr

08001f40 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d104      	bne.n	8001f5a <HAL_TIM_IC_Start_IT+0x1a>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	e013      	b.n	8001f82 <HAL_TIM_IC_Start_IT+0x42>
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	2b04      	cmp	r3, #4
 8001f5e:	d104      	bne.n	8001f6a <HAL_TIM_IC_Start_IT+0x2a>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	e00b      	b.n	8001f82 <HAL_TIM_IC_Start_IT+0x42>
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	2b08      	cmp	r3, #8
 8001f6e:	d104      	bne.n	8001f7a <HAL_TIM_IC_Start_IT+0x3a>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	e003      	b.n	8001f82 <HAL_TIM_IC_Start_IT+0x42>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d104      	bne.n	8001f94 <HAL_TIM_IC_Start_IT+0x54>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	e013      	b.n	8001fbc <HAL_TIM_IC_Start_IT+0x7c>
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	2b04      	cmp	r3, #4
 8001f98:	d104      	bne.n	8001fa4 <HAL_TIM_IC_Start_IT+0x64>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	e00b      	b.n	8001fbc <HAL_TIM_IC_Start_IT+0x7c>
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	2b08      	cmp	r3, #8
 8001fa8:	d104      	bne.n	8001fb4 <HAL_TIM_IC_Start_IT+0x74>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	e003      	b.n	8001fbc <HAL_TIM_IC_Start_IT+0x7c>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8001fbe:	7bfb      	ldrb	r3, [r7, #15]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d102      	bne.n	8001fca <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8001fc4:	7bbb      	ldrb	r3, [r7, #14]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d001      	beq.n	8001fce <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e0ae      	b.n	800212c <HAL_TIM_IC_Start_IT+0x1ec>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d104      	bne.n	8001fde <HAL_TIM_IC_Start_IT+0x9e>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2202      	movs	r2, #2
 8001fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001fdc:	e013      	b.n	8002006 <HAL_TIM_IC_Start_IT+0xc6>
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	2b04      	cmp	r3, #4
 8001fe2:	d104      	bne.n	8001fee <HAL_TIM_IC_Start_IT+0xae>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2202      	movs	r2, #2
 8001fe8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001fec:	e00b      	b.n	8002006 <HAL_TIM_IC_Start_IT+0xc6>
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	2b08      	cmp	r3, #8
 8001ff2:	d104      	bne.n	8001ffe <HAL_TIM_IC_Start_IT+0xbe>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2202      	movs	r2, #2
 8001ff8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ffc:	e003      	b.n	8002006 <HAL_TIM_IC_Start_IT+0xc6>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2202      	movs	r2, #2
 8002002:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d104      	bne.n	8002016 <HAL_TIM_IC_Start_IT+0xd6>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2202      	movs	r2, #2
 8002010:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002014:	e013      	b.n	800203e <HAL_TIM_IC_Start_IT+0xfe>
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	2b04      	cmp	r3, #4
 800201a:	d104      	bne.n	8002026 <HAL_TIM_IC_Start_IT+0xe6>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2202      	movs	r2, #2
 8002020:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002024:	e00b      	b.n	800203e <HAL_TIM_IC_Start_IT+0xfe>
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	2b08      	cmp	r3, #8
 800202a:	d104      	bne.n	8002036 <HAL_TIM_IC_Start_IT+0xf6>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2202      	movs	r2, #2
 8002030:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002034:	e003      	b.n	800203e <HAL_TIM_IC_Start_IT+0xfe>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2202      	movs	r2, #2
 800203a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	2b0c      	cmp	r3, #12
 8002042:	d841      	bhi.n	80020c8 <HAL_TIM_IC_Start_IT+0x188>
 8002044:	a201      	add	r2, pc, #4	; (adr r2, 800204c <HAL_TIM_IC_Start_IT+0x10c>)
 8002046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800204a:	bf00      	nop
 800204c:	08002081 	.word	0x08002081
 8002050:	080020c9 	.word	0x080020c9
 8002054:	080020c9 	.word	0x080020c9
 8002058:	080020c9 	.word	0x080020c9
 800205c:	08002093 	.word	0x08002093
 8002060:	080020c9 	.word	0x080020c9
 8002064:	080020c9 	.word	0x080020c9
 8002068:	080020c9 	.word	0x080020c9
 800206c:	080020a5 	.word	0x080020a5
 8002070:	080020c9 	.word	0x080020c9
 8002074:	080020c9 	.word	0x080020c9
 8002078:	080020c9 	.word	0x080020c9
 800207c:	080020b7 	.word	0x080020b7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	68da      	ldr	r2, [r3, #12]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f042 0202 	orr.w	r2, r2, #2
 800208e:	60da      	str	r2, [r3, #12]
      break;
 8002090:	e01b      	b.n	80020ca <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	68da      	ldr	r2, [r3, #12]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f042 0204 	orr.w	r2, r2, #4
 80020a0:	60da      	str	r2, [r3, #12]
      break;
 80020a2:	e012      	b.n	80020ca <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	68da      	ldr	r2, [r3, #12]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f042 0208 	orr.w	r2, r2, #8
 80020b2:	60da      	str	r2, [r3, #12]
      break;
 80020b4:	e009      	b.n	80020ca <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	68da      	ldr	r2, [r3, #12]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f042 0210 	orr.w	r2, r2, #16
 80020c4:	60da      	str	r2, [r3, #12]
      break;
 80020c6:	e000      	b.n	80020ca <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 80020c8:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2201      	movs	r2, #1
 80020d0:	6839      	ldr	r1, [r7, #0]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f000 fedb 	bl	8002e8e <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a15      	ldr	r2, [pc, #84]	; (8002134 <HAL_TIM_IC_Start_IT+0x1f4>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d009      	beq.n	80020f6 <HAL_TIM_IC_Start_IT+0x1b6>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020ea:	d004      	beq.n	80020f6 <HAL_TIM_IC_Start_IT+0x1b6>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a11      	ldr	r2, [pc, #68]	; (8002138 <HAL_TIM_IC_Start_IT+0x1f8>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d111      	bne.n	800211a <HAL_TIM_IC_Start_IT+0x1da>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f003 0307 	and.w	r3, r3, #7
 8002100:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	2b06      	cmp	r3, #6
 8002106:	d010      	beq.n	800212a <HAL_TIM_IC_Start_IT+0x1ea>
    {
      __HAL_TIM_ENABLE(htim);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f042 0201 	orr.w	r2, r2, #1
 8002116:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002118:	e007      	b.n	800212a <HAL_TIM_IC_Start_IT+0x1ea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f042 0201 	orr.w	r2, r2, #1
 8002128:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800212a:	2300      	movs	r3, #0
}
 800212c:	4618      	mov	r0, r3
 800212e:	3710      	adds	r7, #16
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	40012c00 	.word	0x40012c00
 8002138:	40000400 	.word	0x40000400

0800213c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	691b      	ldr	r3, [r3, #16]
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	2b02      	cmp	r3, #2
 8002150:	d122      	bne.n	8002198 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	f003 0302 	and.w	r3, r3, #2
 800215c:	2b02      	cmp	r3, #2
 800215e:	d11b      	bne.n	8002198 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f06f 0202 	mvn.w	r2, #2
 8002168:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2201      	movs	r2, #1
 800216e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	699b      	ldr	r3, [r3, #24]
 8002176:	f003 0303 	and.w	r3, r3, #3
 800217a:	2b00      	cmp	r3, #0
 800217c:	d003      	beq.n	8002186 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f7fe faee 	bl	8000760 <HAL_TIM_IC_CaptureCallback>
 8002184:	e005      	b.n	8002192 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 fae9 	bl	800275e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f000 faef 	bl	8002770 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	f003 0304 	and.w	r3, r3, #4
 80021a2:	2b04      	cmp	r3, #4
 80021a4:	d122      	bne.n	80021ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	f003 0304 	and.w	r3, r3, #4
 80021b0:	2b04      	cmp	r3, #4
 80021b2:	d11b      	bne.n	80021ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f06f 0204 	mvn.w	r2, #4
 80021bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2202      	movs	r2, #2
 80021c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	699b      	ldr	r3, [r3, #24]
 80021ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d003      	beq.n	80021da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f7fe fac4 	bl	8000760 <HAL_TIM_IC_CaptureCallback>
 80021d8:	e005      	b.n	80021e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f000 fabf 	bl	800275e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f000 fac5 	bl	8002770 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	f003 0308 	and.w	r3, r3, #8
 80021f6:	2b08      	cmp	r3, #8
 80021f8:	d122      	bne.n	8002240 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	f003 0308 	and.w	r3, r3, #8
 8002204:	2b08      	cmp	r3, #8
 8002206:	d11b      	bne.n	8002240 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f06f 0208 	mvn.w	r2, #8
 8002210:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2204      	movs	r2, #4
 8002216:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	69db      	ldr	r3, [r3, #28]
 800221e:	f003 0303 	and.w	r3, r3, #3
 8002222:	2b00      	cmp	r3, #0
 8002224:	d003      	beq.n	800222e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f7fe fa9a 	bl	8000760 <HAL_TIM_IC_CaptureCallback>
 800222c:	e005      	b.n	800223a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f000 fa95 	bl	800275e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f000 fa9b 	bl	8002770 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	691b      	ldr	r3, [r3, #16]
 8002246:	f003 0310 	and.w	r3, r3, #16
 800224a:	2b10      	cmp	r3, #16
 800224c:	d122      	bne.n	8002294 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	f003 0310 	and.w	r3, r3, #16
 8002258:	2b10      	cmp	r3, #16
 800225a:	d11b      	bne.n	8002294 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f06f 0210 	mvn.w	r2, #16
 8002264:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2208      	movs	r2, #8
 800226a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	69db      	ldr	r3, [r3, #28]
 8002272:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002276:	2b00      	cmp	r3, #0
 8002278:	d003      	beq.n	8002282 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f7fe fa70 	bl	8000760 <HAL_TIM_IC_CaptureCallback>
 8002280:	e005      	b.n	800228e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 fa6b 	bl	800275e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f000 fa71 	bl	8002770 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	f003 0301 	and.w	r3, r3, #1
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d10e      	bne.n	80022c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	f003 0301 	and.w	r3, r3, #1
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d107      	bne.n	80022c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f06f 0201 	mvn.w	r2, #1
 80022b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f7fe fa38 	bl	8000730 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022ca:	2b80      	cmp	r3, #128	; 0x80
 80022cc:	d10e      	bne.n	80022ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022d8:	2b80      	cmp	r3, #128	; 0x80
 80022da:	d107      	bne.n	80022ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80022e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f000 fe57 	bl	8002f9a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022f6:	2b40      	cmp	r3, #64	; 0x40
 80022f8:	d10e      	bne.n	8002318 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002304:	2b40      	cmp	r3, #64	; 0x40
 8002306:	d107      	bne.n	8002318 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002310:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f000 fa35 	bl	8002782 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	691b      	ldr	r3, [r3, #16]
 800231e:	f003 0320 	and.w	r3, r3, #32
 8002322:	2b20      	cmp	r3, #32
 8002324:	d10e      	bne.n	8002344 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	f003 0320 	and.w	r3, r3, #32
 8002330:	2b20      	cmp	r3, #32
 8002332:	d107      	bne.n	8002344 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f06f 0220 	mvn.w	r2, #32
 800233c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f000 fe22 	bl	8002f88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002344:	bf00      	nop
 8002346:	3708      	adds	r7, #8
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800235e:	2b01      	cmp	r3, #1
 8002360:	d101      	bne.n	8002366 <HAL_TIM_IC_ConfigChannel+0x1a>
 8002362:	2302      	movs	r3, #2
 8002364:	e082      	b.n	800246c <HAL_TIM_IC_ConfigChannel+0x120>
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2201      	movs	r2, #1
 800236a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d11b      	bne.n	80023ac <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6818      	ldr	r0, [r3, #0]
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	6819      	ldr	r1, [r3, #0]
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	685a      	ldr	r2, [r3, #4]
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	f000 fbe6 	bl	8002b54 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	699a      	ldr	r2, [r3, #24]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f022 020c 	bic.w	r2, r2, #12
 8002396:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	6999      	ldr	r1, [r3, #24]
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	689a      	ldr	r2, [r3, #8]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	430a      	orrs	r2, r1
 80023a8:	619a      	str	r2, [r3, #24]
 80023aa:	e05a      	b.n	8002462 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2b04      	cmp	r3, #4
 80023b0:	d11c      	bne.n	80023ec <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6818      	ldr	r0, [r3, #0]
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	6819      	ldr	r1, [r3, #0]
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	685a      	ldr	r2, [r3, #4]
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	f000 fc49 	bl	8002c58 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	699a      	ldr	r2, [r3, #24]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80023d4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	6999      	ldr	r1, [r3, #24]
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	021a      	lsls	r2, r3, #8
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	430a      	orrs	r2, r1
 80023e8:	619a      	str	r2, [r3, #24]
 80023ea:	e03a      	b.n	8002462 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2b08      	cmp	r3, #8
 80023f0:	d11b      	bne.n	800242a <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6818      	ldr	r0, [r3, #0]
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	6819      	ldr	r1, [r3, #0]
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	685a      	ldr	r2, [r3, #4]
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	f000 fc94 	bl	8002d2e <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	69da      	ldr	r2, [r3, #28]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f022 020c 	bic.w	r2, r2, #12
 8002414:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	69d9      	ldr	r1, [r3, #28]
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	689a      	ldr	r2, [r3, #8]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	430a      	orrs	r2, r1
 8002426:	61da      	str	r2, [r3, #28]
 8002428:	e01b      	b.n	8002462 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6818      	ldr	r0, [r3, #0]
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	6819      	ldr	r1, [r3, #0]
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	685a      	ldr	r2, [r3, #4]
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	f000 fcb3 	bl	8002da4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	69da      	ldr	r2, [r3, #28]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800244c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	69d9      	ldr	r1, [r3, #28]
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	021a      	lsls	r2, r3, #8
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	430a      	orrs	r2, r1
 8002460:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2200      	movs	r2, #0
 8002466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800246a:	2300      	movs	r3, #0
}
 800246c:	4618      	mov	r0, r3
 800246e:	3710      	adds	r7, #16
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}

08002474 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002486:	2b01      	cmp	r3, #1
 8002488:	d101      	bne.n	800248e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800248a:	2302      	movs	r3, #2
 800248c:	e0ac      	b.n	80025e8 <HAL_TIM_PWM_ConfigChannel+0x174>
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2201      	movs	r2, #1
 8002492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2b0c      	cmp	r3, #12
 800249a:	f200 809f 	bhi.w	80025dc <HAL_TIM_PWM_ConfigChannel+0x168>
 800249e:	a201      	add	r2, pc, #4	; (adr r2, 80024a4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80024a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024a4:	080024d9 	.word	0x080024d9
 80024a8:	080025dd 	.word	0x080025dd
 80024ac:	080025dd 	.word	0x080025dd
 80024b0:	080025dd 	.word	0x080025dd
 80024b4:	08002519 	.word	0x08002519
 80024b8:	080025dd 	.word	0x080025dd
 80024bc:	080025dd 	.word	0x080025dd
 80024c0:	080025dd 	.word	0x080025dd
 80024c4:	0800255b 	.word	0x0800255b
 80024c8:	080025dd 	.word	0x080025dd
 80024cc:	080025dd 	.word	0x080025dd
 80024d0:	080025dd 	.word	0x080025dd
 80024d4:	0800259b 	.word	0x0800259b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	68b9      	ldr	r1, [r7, #8]
 80024de:	4618      	mov	r0, r3
 80024e0:	f000 f9b0 	bl	8002844 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	699a      	ldr	r2, [r3, #24]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f042 0208 	orr.w	r2, r2, #8
 80024f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	699a      	ldr	r2, [r3, #24]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f022 0204 	bic.w	r2, r2, #4
 8002502:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	6999      	ldr	r1, [r3, #24]
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	691a      	ldr	r2, [r3, #16]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	430a      	orrs	r2, r1
 8002514:	619a      	str	r2, [r3, #24]
      break;
 8002516:	e062      	b.n	80025de <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	68b9      	ldr	r1, [r7, #8]
 800251e:	4618      	mov	r0, r3
 8002520:	f000 f9f6 	bl	8002910 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	699a      	ldr	r2, [r3, #24]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002532:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	699a      	ldr	r2, [r3, #24]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002542:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	6999      	ldr	r1, [r3, #24]
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	021a      	lsls	r2, r3, #8
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	430a      	orrs	r2, r1
 8002556:	619a      	str	r2, [r3, #24]
      break;
 8002558:	e041      	b.n	80025de <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	68b9      	ldr	r1, [r7, #8]
 8002560:	4618      	mov	r0, r3
 8002562:	f000 fa3f 	bl	80029e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	69da      	ldr	r2, [r3, #28]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f042 0208 	orr.w	r2, r2, #8
 8002574:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	69da      	ldr	r2, [r3, #28]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f022 0204 	bic.w	r2, r2, #4
 8002584:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	69d9      	ldr	r1, [r3, #28]
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	691a      	ldr	r2, [r3, #16]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	430a      	orrs	r2, r1
 8002596:	61da      	str	r2, [r3, #28]
      break;
 8002598:	e021      	b.n	80025de <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	68b9      	ldr	r1, [r7, #8]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f000 fa89 	bl	8002ab8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	69da      	ldr	r2, [r3, #28]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	69da      	ldr	r2, [r3, #28]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	69d9      	ldr	r1, [r3, #28]
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	691b      	ldr	r3, [r3, #16]
 80025d0:	021a      	lsls	r2, r3, #8
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	430a      	orrs	r2, r1
 80025d8:	61da      	str	r2, [r3, #28]
      break;
 80025da:	e000      	b.n	80025de <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80025dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80025e6:	2300      	movs	r3, #0
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3710      	adds	r7, #16
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002600:	2b01      	cmp	r3, #1
 8002602:	d101      	bne.n	8002608 <HAL_TIM_ConfigClockSource+0x18>
 8002604:	2302      	movs	r3, #2
 8002606:	e0a6      	b.n	8002756 <HAL_TIM_ConfigClockSource+0x166>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2202      	movs	r2, #2
 8002614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002626:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800262e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	68fa      	ldr	r2, [r7, #12]
 8002636:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2b40      	cmp	r3, #64	; 0x40
 800263e:	d067      	beq.n	8002710 <HAL_TIM_ConfigClockSource+0x120>
 8002640:	2b40      	cmp	r3, #64	; 0x40
 8002642:	d80b      	bhi.n	800265c <HAL_TIM_ConfigClockSource+0x6c>
 8002644:	2b10      	cmp	r3, #16
 8002646:	d073      	beq.n	8002730 <HAL_TIM_ConfigClockSource+0x140>
 8002648:	2b10      	cmp	r3, #16
 800264a:	d802      	bhi.n	8002652 <HAL_TIM_ConfigClockSource+0x62>
 800264c:	2b00      	cmp	r3, #0
 800264e:	d06f      	beq.n	8002730 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002650:	e078      	b.n	8002744 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002652:	2b20      	cmp	r3, #32
 8002654:	d06c      	beq.n	8002730 <HAL_TIM_ConfigClockSource+0x140>
 8002656:	2b30      	cmp	r3, #48	; 0x30
 8002658:	d06a      	beq.n	8002730 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800265a:	e073      	b.n	8002744 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800265c:	2b70      	cmp	r3, #112	; 0x70
 800265e:	d00d      	beq.n	800267c <HAL_TIM_ConfigClockSource+0x8c>
 8002660:	2b70      	cmp	r3, #112	; 0x70
 8002662:	d804      	bhi.n	800266e <HAL_TIM_ConfigClockSource+0x7e>
 8002664:	2b50      	cmp	r3, #80	; 0x50
 8002666:	d033      	beq.n	80026d0 <HAL_TIM_ConfigClockSource+0xe0>
 8002668:	2b60      	cmp	r3, #96	; 0x60
 800266a:	d041      	beq.n	80026f0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800266c:	e06a      	b.n	8002744 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800266e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002672:	d066      	beq.n	8002742 <HAL_TIM_ConfigClockSource+0x152>
 8002674:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002678:	d017      	beq.n	80026aa <HAL_TIM_ConfigClockSource+0xba>
      break;
 800267a:	e063      	b.n	8002744 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6818      	ldr	r0, [r3, #0]
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	6899      	ldr	r1, [r3, #8]
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685a      	ldr	r2, [r3, #4]
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	f000 fbe0 	bl	8002e50 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800269e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68fa      	ldr	r2, [r7, #12]
 80026a6:	609a      	str	r2, [r3, #8]
      break;
 80026a8:	e04c      	b.n	8002744 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6818      	ldr	r0, [r3, #0]
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	6899      	ldr	r1, [r3, #8]
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685a      	ldr	r2, [r3, #4]
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	f000 fbc9 	bl	8002e50 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	689a      	ldr	r2, [r3, #8]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026cc:	609a      	str	r2, [r3, #8]
      break;
 80026ce:	e039      	b.n	8002744 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6818      	ldr	r0, [r3, #0]
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	6859      	ldr	r1, [r3, #4]
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	461a      	mov	r2, r3
 80026de:	f000 fa8d 	bl	8002bfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2150      	movs	r1, #80	; 0x50
 80026e8:	4618      	mov	r0, r3
 80026ea:	f000 fb97 	bl	8002e1c <TIM_ITRx_SetConfig>
      break;
 80026ee:	e029      	b.n	8002744 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6818      	ldr	r0, [r3, #0]
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	6859      	ldr	r1, [r3, #4]
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	461a      	mov	r2, r3
 80026fe:	f000 fae7 	bl	8002cd0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2160      	movs	r1, #96	; 0x60
 8002708:	4618      	mov	r0, r3
 800270a:	f000 fb87 	bl	8002e1c <TIM_ITRx_SetConfig>
      break;
 800270e:	e019      	b.n	8002744 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6818      	ldr	r0, [r3, #0]
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	6859      	ldr	r1, [r3, #4]
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	461a      	mov	r2, r3
 800271e:	f000 fa6d 	bl	8002bfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2140      	movs	r1, #64	; 0x40
 8002728:	4618      	mov	r0, r3
 800272a:	f000 fb77 	bl	8002e1c <TIM_ITRx_SetConfig>
      break;
 800272e:	e009      	b.n	8002744 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4619      	mov	r1, r3
 800273a:	4610      	mov	r0, r2
 800273c:	f000 fb6e 	bl	8002e1c <TIM_ITRx_SetConfig>
        break;
 8002740:	e000      	b.n	8002744 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002742:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3710      	adds	r7, #16
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}

0800275e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800275e:	b480      	push	{r7}
 8002760:	b083      	sub	sp, #12
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002766:	bf00      	nop
 8002768:	370c      	adds	r7, #12
 800276a:	46bd      	mov	sp, r7
 800276c:	bc80      	pop	{r7}
 800276e:	4770      	bx	lr

08002770 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002778:	bf00      	nop
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	bc80      	pop	{r7}
 8002780:	4770      	bx	lr

08002782 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002782:	b480      	push	{r7}
 8002784:	b083      	sub	sp, #12
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800278a:	bf00      	nop
 800278c:	370c      	adds	r7, #12
 800278e:	46bd      	mov	sp, r7
 8002790:	bc80      	pop	{r7}
 8002792:	4770      	bx	lr

08002794 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002794:	b480      	push	{r7}
 8002796:	b085      	sub	sp, #20
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	4a25      	ldr	r2, [pc, #148]	; (800283c <TIM_Base_SetConfig+0xa8>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d007      	beq.n	80027bc <TIM_Base_SetConfig+0x28>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027b2:	d003      	beq.n	80027bc <TIM_Base_SetConfig+0x28>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	4a22      	ldr	r2, [pc, #136]	; (8002840 <TIM_Base_SetConfig+0xac>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d108      	bne.n	80027ce <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	68fa      	ldr	r2, [r7, #12]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a1a      	ldr	r2, [pc, #104]	; (800283c <TIM_Base_SetConfig+0xa8>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d007      	beq.n	80027e6 <TIM_Base_SetConfig+0x52>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027dc:	d003      	beq.n	80027e6 <TIM_Base_SetConfig+0x52>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a17      	ldr	r2, [pc, #92]	; (8002840 <TIM_Base_SetConfig+0xac>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d108      	bne.n	80027f8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	68fa      	ldr	r2, [r7, #12]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	695b      	ldr	r3, [r3, #20]
 8002802:	4313      	orrs	r3, r2
 8002804:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	68fa      	ldr	r2, [r7, #12]
 800280a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	689a      	ldr	r2, [r3, #8]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	4a07      	ldr	r2, [pc, #28]	; (800283c <TIM_Base_SetConfig+0xa8>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d103      	bne.n	800282c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	691a      	ldr	r2, [r3, #16]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	615a      	str	r2, [r3, #20]
}
 8002832:	bf00      	nop
 8002834:	3714      	adds	r7, #20
 8002836:	46bd      	mov	sp, r7
 8002838:	bc80      	pop	{r7}
 800283a:	4770      	bx	lr
 800283c:	40012c00 	.word	0x40012c00
 8002840:	40000400 	.word	0x40000400

08002844 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002844:	b480      	push	{r7}
 8002846:	b087      	sub	sp, #28
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a1b      	ldr	r3, [r3, #32]
 8002852:	f023 0201 	bic.w	r2, r3, #1
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a1b      	ldr	r3, [r3, #32]
 800285e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	699b      	ldr	r3, [r3, #24]
 800286a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002872:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f023 0303 	bic.w	r3, r3, #3
 800287a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	68fa      	ldr	r2, [r7, #12]
 8002882:	4313      	orrs	r3, r2
 8002884:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	f023 0302 	bic.w	r3, r3, #2
 800288c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	4313      	orrs	r3, r2
 8002896:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	4a1c      	ldr	r2, [pc, #112]	; (800290c <TIM_OC1_SetConfig+0xc8>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d10c      	bne.n	80028ba <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	f023 0308 	bic.w	r3, r3, #8
 80028a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	697a      	ldr	r2, [r7, #20]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	f023 0304 	bic.w	r3, r3, #4
 80028b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a13      	ldr	r2, [pc, #76]	; (800290c <TIM_OC1_SetConfig+0xc8>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d111      	bne.n	80028e6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80028d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	695b      	ldr	r3, [r3, #20]
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	4313      	orrs	r3, r2
 80028da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	699b      	ldr	r3, [r3, #24]
 80028e0:	693a      	ldr	r2, [r7, #16]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	693a      	ldr	r2, [r7, #16]
 80028ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	68fa      	ldr	r2, [r7, #12]
 80028f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	685a      	ldr	r2, [r3, #4]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	697a      	ldr	r2, [r7, #20]
 80028fe:	621a      	str	r2, [r3, #32]
}
 8002900:	bf00      	nop
 8002902:	371c      	adds	r7, #28
 8002904:	46bd      	mov	sp, r7
 8002906:	bc80      	pop	{r7}
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	40012c00 	.word	0x40012c00

08002910 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002910:	b480      	push	{r7}
 8002912:	b087      	sub	sp, #28
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a1b      	ldr	r3, [r3, #32]
 800291e:	f023 0210 	bic.w	r2, r3, #16
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a1b      	ldr	r3, [r3, #32]
 800292a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	699b      	ldr	r3, [r3, #24]
 8002936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800293e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002946:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	021b      	lsls	r3, r3, #8
 800294e:	68fa      	ldr	r2, [r7, #12]
 8002950:	4313      	orrs	r3, r2
 8002952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	f023 0320 	bic.w	r3, r3, #32
 800295a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	011b      	lsls	r3, r3, #4
 8002962:	697a      	ldr	r2, [r7, #20]
 8002964:	4313      	orrs	r3, r2
 8002966:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4a1d      	ldr	r2, [pc, #116]	; (80029e0 <TIM_OC2_SetConfig+0xd0>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d10d      	bne.n	800298c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002976:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	011b      	lsls	r3, r3, #4
 800297e:	697a      	ldr	r2, [r7, #20]
 8002980:	4313      	orrs	r3, r2
 8002982:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800298a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	4a14      	ldr	r2, [pc, #80]	; (80029e0 <TIM_OC2_SetConfig+0xd0>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d113      	bne.n	80029bc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800299a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80029a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	695b      	ldr	r3, [r3, #20]
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	693a      	ldr	r2, [r7, #16]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	693a      	ldr	r2, [r7, #16]
 80029c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	68fa      	ldr	r2, [r7, #12]
 80029c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	685a      	ldr	r2, [r3, #4]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	697a      	ldr	r2, [r7, #20]
 80029d4:	621a      	str	r2, [r3, #32]
}
 80029d6:	bf00      	nop
 80029d8:	371c      	adds	r7, #28
 80029da:	46bd      	mov	sp, r7
 80029dc:	bc80      	pop	{r7}
 80029de:	4770      	bx	lr
 80029e0:	40012c00 	.word	0x40012c00

080029e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b087      	sub	sp, #28
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a1b      	ldr	r3, [r3, #32]
 80029f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a1b      	ldr	r3, [r3, #32]
 80029fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	69db      	ldr	r3, [r3, #28]
 8002a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f023 0303 	bic.w	r3, r3, #3
 8002a1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	68fa      	ldr	r2, [r7, #12]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	021b      	lsls	r3, r3, #8
 8002a34:	697a      	ldr	r2, [r7, #20]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a1d      	ldr	r2, [pc, #116]	; (8002ab4 <TIM_OC3_SetConfig+0xd0>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d10d      	bne.n	8002a5e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	021b      	lsls	r3, r3, #8
 8002a50:	697a      	ldr	r2, [r7, #20]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a14      	ldr	r2, [pc, #80]	; (8002ab4 <TIM_OC3_SetConfig+0xd0>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d113      	bne.n	8002a8e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002a74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	011b      	lsls	r3, r3, #4
 8002a7c:	693a      	ldr	r2, [r7, #16]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	699b      	ldr	r3, [r3, #24]
 8002a86:	011b      	lsls	r3, r3, #4
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	68fa      	ldr	r2, [r7, #12]
 8002a98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	685a      	ldr	r2, [r3, #4]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	697a      	ldr	r2, [r7, #20]
 8002aa6:	621a      	str	r2, [r3, #32]
}
 8002aa8:	bf00      	nop
 8002aaa:	371c      	adds	r7, #28
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bc80      	pop	{r7}
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	40012c00 	.word	0x40012c00

08002ab8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b087      	sub	sp, #28
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a1b      	ldr	r3, [r3, #32]
 8002ac6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a1b      	ldr	r3, [r3, #32]
 8002ad2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	69db      	ldr	r3, [r3, #28]
 8002ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ae6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002aee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	021b      	lsls	r3, r3, #8
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	031b      	lsls	r3, r3, #12
 8002b0a:	693a      	ldr	r2, [r7, #16]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4a0f      	ldr	r2, [pc, #60]	; (8002b50 <TIM_OC4_SetConfig+0x98>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d109      	bne.n	8002b2c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b1e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	695b      	ldr	r3, [r3, #20]
 8002b24:	019b      	lsls	r3, r3, #6
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	697a      	ldr	r2, [r7, #20]
 8002b30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	68fa      	ldr	r2, [r7, #12]
 8002b36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685a      	ldr	r2, [r3, #4]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	693a      	ldr	r2, [r7, #16]
 8002b44:	621a      	str	r2, [r3, #32]
}
 8002b46:	bf00      	nop
 8002b48:	371c      	adds	r7, #28
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bc80      	pop	{r7}
 8002b4e:	4770      	bx	lr
 8002b50:	40012c00 	.word	0x40012c00

08002b54 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b087      	sub	sp, #28
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	607a      	str	r2, [r7, #4]
 8002b60:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6a1b      	ldr	r3, [r3, #32]
 8002b66:	f023 0201 	bic.w	r2, r3, #1
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	699b      	ldr	r3, [r3, #24]
 8002b72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6a1b      	ldr	r3, [r3, #32]
 8002b78:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	4a1d      	ldr	r2, [pc, #116]	; (8002bf4 <TIM_TI1_SetConfig+0xa0>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d007      	beq.n	8002b92 <TIM_TI1_SetConfig+0x3e>
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b88:	d003      	beq.n	8002b92 <TIM_TI1_SetConfig+0x3e>
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	4a1a      	ldr	r2, [pc, #104]	; (8002bf8 <TIM_TI1_SetConfig+0xa4>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d101      	bne.n	8002b96 <TIM_TI1_SetConfig+0x42>
 8002b92:	2301      	movs	r3, #1
 8002b94:	e000      	b.n	8002b98 <TIM_TI1_SetConfig+0x44>
 8002b96:	2300      	movs	r3, #0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d008      	beq.n	8002bae <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	f023 0303 	bic.w	r3, r3, #3
 8002ba2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002ba4:	697a      	ldr	r2, [r7, #20]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	617b      	str	r3, [r7, #20]
 8002bac:	e003      	b.n	8002bb6 <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	f043 0301 	orr.w	r3, r3, #1
 8002bb4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bbc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	011b      	lsls	r3, r3, #4
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	697a      	ldr	r2, [r7, #20]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	f023 030a 	bic.w	r3, r3, #10
 8002bd0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	f003 030a 	and.w	r3, r3, #10
 8002bd8:	693a      	ldr	r2, [r7, #16]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	697a      	ldr	r2, [r7, #20]
 8002be2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	693a      	ldr	r2, [r7, #16]
 8002be8:	621a      	str	r2, [r3, #32]
}
 8002bea:	bf00      	nop
 8002bec:	371c      	adds	r7, #28
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bc80      	pop	{r7}
 8002bf2:	4770      	bx	lr
 8002bf4:	40012c00 	.word	0x40012c00
 8002bf8:	40000400 	.word	0x40000400

08002bfc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b087      	sub	sp, #28
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	60b9      	str	r1, [r7, #8]
 8002c06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6a1b      	ldr	r3, [r3, #32]
 8002c0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6a1b      	ldr	r3, [r3, #32]
 8002c12:	f023 0201 	bic.w	r2, r3, #1
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	011b      	lsls	r3, r3, #4
 8002c2c:	693a      	ldr	r2, [r7, #16]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	f023 030a 	bic.w	r3, r3, #10
 8002c38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c3a:	697a      	ldr	r2, [r7, #20]
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	693a      	ldr	r2, [r7, #16]
 8002c46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	697a      	ldr	r2, [r7, #20]
 8002c4c:	621a      	str	r2, [r3, #32]
}
 8002c4e:	bf00      	nop
 8002c50:	371c      	adds	r7, #28
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bc80      	pop	{r7}
 8002c56:	4770      	bx	lr

08002c58 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b087      	sub	sp, #28
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]
 8002c64:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6a1b      	ldr	r3, [r3, #32]
 8002c6a:	f023 0210 	bic.w	r2, r3, #16
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6a1b      	ldr	r3, [r3, #32]
 8002c7c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	021b      	lsls	r3, r3, #8
 8002c8a:	697a      	ldr	r2, [r7, #20]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c96:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	031b      	lsls	r3, r3, #12
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	697a      	ldr	r2, [r7, #20]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002caa:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	011b      	lsls	r3, r3, #4
 8002cb0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002cb4:	693a      	ldr	r2, [r7, #16]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	697a      	ldr	r2, [r7, #20]
 8002cbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	693a      	ldr	r2, [r7, #16]
 8002cc4:	621a      	str	r2, [r3, #32]
}
 8002cc6:	bf00      	nop
 8002cc8:	371c      	adds	r7, #28
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bc80      	pop	{r7}
 8002cce:	4770      	bx	lr

08002cd0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b087      	sub	sp, #28
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	60b9      	str	r1, [r7, #8]
 8002cda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6a1b      	ldr	r3, [r3, #32]
 8002ce0:	f023 0210 	bic.w	r2, r3, #16
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6a1b      	ldr	r3, [r3, #32]
 8002cf2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002cfa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	031b      	lsls	r3, r3, #12
 8002d00:	697a      	ldr	r2, [r7, #20]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d0c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	011b      	lsls	r3, r3, #4
 8002d12:	693a      	ldr	r2, [r7, #16]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	697a      	ldr	r2, [r7, #20]
 8002d1c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	693a      	ldr	r2, [r7, #16]
 8002d22:	621a      	str	r2, [r3, #32]
}
 8002d24:	bf00      	nop
 8002d26:	371c      	adds	r7, #28
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bc80      	pop	{r7}
 8002d2c:	4770      	bx	lr

08002d2e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002d2e:	b480      	push	{r7}
 8002d30:	b087      	sub	sp, #28
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	60f8      	str	r0, [r7, #12]
 8002d36:	60b9      	str	r1, [r7, #8]
 8002d38:	607a      	str	r2, [r7, #4]
 8002d3a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6a1b      	ldr	r3, [r3, #32]
 8002d40:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	69db      	ldr	r3, [r3, #28]
 8002d4c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6a1b      	ldr	r3, [r3, #32]
 8002d52:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	f023 0303 	bic.w	r3, r3, #3
 8002d5a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8002d5c:	697a      	ldr	r2, [r7, #20]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d6a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	011b      	lsls	r3, r3, #4
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	697a      	ldr	r2, [r7, #20]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d7e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	021b      	lsls	r3, r3, #8
 8002d84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d88:	693a      	ldr	r2, [r7, #16]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	697a      	ldr	r2, [r7, #20]
 8002d92:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	693a      	ldr	r2, [r7, #16]
 8002d98:	621a      	str	r2, [r3, #32]
}
 8002d9a:	bf00      	nop
 8002d9c:	371c      	adds	r7, #28
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bc80      	pop	{r7}
 8002da2:	4770      	bx	lr

08002da4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b087      	sub	sp, #28
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	607a      	str	r2, [r7, #4]
 8002db0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6a1b      	ldr	r3, [r3, #32]
 8002db6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	69db      	ldr	r3, [r3, #28]
 8002dc2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6a1b      	ldr	r3, [r3, #32]
 8002dc8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dd0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	021b      	lsls	r3, r3, #8
 8002dd6:	697a      	ldr	r2, [r7, #20]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002de2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	031b      	lsls	r3, r3, #12
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	697a      	ldr	r2, [r7, #20]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002df6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	031b      	lsls	r3, r3, #12
 8002dfc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e00:	693a      	ldr	r2, [r7, #16]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	697a      	ldr	r2, [r7, #20]
 8002e0a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	693a      	ldr	r2, [r7, #16]
 8002e10:	621a      	str	r2, [r3, #32]
}
 8002e12:	bf00      	nop
 8002e14:	371c      	adds	r7, #28
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bc80      	pop	{r7}
 8002e1a:	4770      	bx	lr

08002e1c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b085      	sub	sp, #20
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e32:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e34:	683a      	ldr	r2, [r7, #0]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	f043 0307 	orr.w	r3, r3, #7
 8002e3e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	68fa      	ldr	r2, [r7, #12]
 8002e44:	609a      	str	r2, [r3, #8]
}
 8002e46:	bf00      	nop
 8002e48:	3714      	adds	r7, #20
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bc80      	pop	{r7}
 8002e4e:	4770      	bx	lr

08002e50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b087      	sub	sp, #28
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	607a      	str	r2, [r7, #4]
 8002e5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	021a      	lsls	r2, r3, #8
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	431a      	orrs	r2, r3
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	697a      	ldr	r2, [r7, #20]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	697a      	ldr	r2, [r7, #20]
 8002e82:	609a      	str	r2, [r3, #8]
}
 8002e84:	bf00      	nop
 8002e86:	371c      	adds	r7, #28
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bc80      	pop	{r7}
 8002e8c:	4770      	bx	lr

08002e8e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002e8e:	b480      	push	{r7}
 8002e90:	b087      	sub	sp, #28
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	60f8      	str	r0, [r7, #12]
 8002e96:	60b9      	str	r1, [r7, #8]
 8002e98:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	f003 031f 	and.w	r3, r3, #31
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6a1a      	ldr	r2, [r3, #32]
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	43db      	mvns	r3, r3
 8002eb0:	401a      	ands	r2, r3
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6a1a      	ldr	r2, [r3, #32]
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	f003 031f 	and.w	r3, r3, #31
 8002ec0:	6879      	ldr	r1, [r7, #4]
 8002ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec6:	431a      	orrs	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	621a      	str	r2, [r3, #32]
}
 8002ecc:	bf00      	nop
 8002ece:	371c      	adds	r7, #28
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bc80      	pop	{r7}
 8002ed4:	4770      	bx	lr
	...

08002ed8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b085      	sub	sp, #20
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d101      	bne.n	8002ef0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002eec:	2302      	movs	r3, #2
 8002eee:	e041      	b.n	8002f74 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2202      	movs	r2, #2
 8002efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68fa      	ldr	r2, [r7, #12]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	68fa      	ldr	r2, [r7, #12]
 8002f28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a14      	ldr	r2, [pc, #80]	; (8002f80 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d009      	beq.n	8002f48 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f3c:	d004      	beq.n	8002f48 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a10      	ldr	r2, [pc, #64]	; (8002f84 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d10c      	bne.n	8002f62 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f4e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	68ba      	ldr	r2, [r7, #8]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68ba      	ldr	r2, [r7, #8]
 8002f60:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2201      	movs	r2, #1
 8002f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3714      	adds	r7, #20
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bc80      	pop	{r7}
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	40012c00 	.word	0x40012c00
 8002f84:	40000400 	.word	0x40000400

08002f88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f90:	bf00      	nop
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bc80      	pop	{r7}
 8002f98:	4770      	bx	lr

08002f9a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f9a:	b480      	push	{r7}
 8002f9c:	b083      	sub	sp, #12
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002fa2:	bf00      	nop
 8002fa4:	370c      	adds	r7, #12
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bc80      	pop	{r7}
 8002faa:	4770      	bx	lr

08002fac <__libc_init_array>:
 8002fac:	b570      	push	{r4, r5, r6, lr}
 8002fae:	2500      	movs	r5, #0
 8002fb0:	4e0c      	ldr	r6, [pc, #48]	; (8002fe4 <__libc_init_array+0x38>)
 8002fb2:	4c0d      	ldr	r4, [pc, #52]	; (8002fe8 <__libc_init_array+0x3c>)
 8002fb4:	1ba4      	subs	r4, r4, r6
 8002fb6:	10a4      	asrs	r4, r4, #2
 8002fb8:	42a5      	cmp	r5, r4
 8002fba:	d109      	bne.n	8002fd0 <__libc_init_array+0x24>
 8002fbc:	f000 f822 	bl	8003004 <_init>
 8002fc0:	2500      	movs	r5, #0
 8002fc2:	4e0a      	ldr	r6, [pc, #40]	; (8002fec <__libc_init_array+0x40>)
 8002fc4:	4c0a      	ldr	r4, [pc, #40]	; (8002ff0 <__libc_init_array+0x44>)
 8002fc6:	1ba4      	subs	r4, r4, r6
 8002fc8:	10a4      	asrs	r4, r4, #2
 8002fca:	42a5      	cmp	r5, r4
 8002fcc:	d105      	bne.n	8002fda <__libc_init_array+0x2e>
 8002fce:	bd70      	pop	{r4, r5, r6, pc}
 8002fd0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002fd4:	4798      	blx	r3
 8002fd6:	3501      	adds	r5, #1
 8002fd8:	e7ee      	b.n	8002fb8 <__libc_init_array+0xc>
 8002fda:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002fde:	4798      	blx	r3
 8002fe0:	3501      	adds	r5, #1
 8002fe2:	e7f2      	b.n	8002fca <__libc_init_array+0x1e>
 8002fe4:	08003040 	.word	0x08003040
 8002fe8:	08003040 	.word	0x08003040
 8002fec:	08003040 	.word	0x08003040
 8002ff0:	08003044 	.word	0x08003044

08002ff4 <memset>:
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	4402      	add	r2, r0
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d100      	bne.n	8002ffe <memset+0xa>
 8002ffc:	4770      	bx	lr
 8002ffe:	f803 1b01 	strb.w	r1, [r3], #1
 8003002:	e7f9      	b.n	8002ff8 <memset+0x4>

08003004 <_init>:
 8003004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003006:	bf00      	nop
 8003008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800300a:	bc08      	pop	{r3}
 800300c:	469e      	mov	lr, r3
 800300e:	4770      	bx	lr

08003010 <_fini>:
 8003010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003012:	bf00      	nop
 8003014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003016:	bc08      	pop	{r3}
 8003018:	469e      	mov	lr, r3
 800301a:	4770      	bx	lr
