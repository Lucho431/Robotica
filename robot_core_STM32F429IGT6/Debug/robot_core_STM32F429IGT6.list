
robot_core_STM32F429IGT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072b0  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800745c  0800745c  0001745c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007474  08007474  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08007474  08007474  00017474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800747c  0800747c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800747c  0800747c  0001747c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007480  08007480  00017480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007484  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  20000010  08007494  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000274  08007494  00020274  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012da8  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dd1  00000000  00000000  00032de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001138  00000000  00000000  00035bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fe8  00000000  00000000  00036cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025369  00000000  00000000  00037ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014713  00000000  00000000  0005d049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd1c4  00000000  00000000  0007175c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014e920  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004808  00000000  00000000  0014e970  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000010 	.word	0x20000010
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08007444 	.word	0x08007444

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000014 	.word	0x20000014
 80001e8:	08007444 	.word	0x08007444

080001ec <__aeabi_drsub>:
 80001ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f0:	e002      	b.n	80001f8 <__adddf3>
 80001f2:	bf00      	nop

080001f4 <__aeabi_dsub>:
 80001f4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f8 <__adddf3>:
 80001f8:	b530      	push	{r4, r5, lr}
 80001fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000202:	ea94 0f05 	teq	r4, r5
 8000206:	bf08      	it	eq
 8000208:	ea90 0f02 	teqeq	r0, r2
 800020c:	bf1f      	itttt	ne
 800020e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000212:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000216:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021e:	f000 80e2 	beq.w	80003e6 <__adddf3+0x1ee>
 8000222:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000226:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022a:	bfb8      	it	lt
 800022c:	426d      	neglt	r5, r5
 800022e:	dd0c      	ble.n	800024a <__adddf3+0x52>
 8000230:	442c      	add	r4, r5
 8000232:	ea80 0202 	eor.w	r2, r0, r2
 8000236:	ea81 0303 	eor.w	r3, r1, r3
 800023a:	ea82 0000 	eor.w	r0, r2, r0
 800023e:	ea83 0101 	eor.w	r1, r3, r1
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	2d36      	cmp	r5, #54	; 0x36
 800024c:	bf88      	it	hi
 800024e:	bd30      	pophi	{r4, r5, pc}
 8000250:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000254:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000258:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800025c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x70>
 8000262:	4240      	negs	r0, r0
 8000264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000268:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800026c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000270:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x84>
 8000276:	4252      	negs	r2, r2
 8000278:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800027c:	ea94 0f05 	teq	r4, r5
 8000280:	f000 80a7 	beq.w	80003d2 <__adddf3+0x1da>
 8000284:	f1a4 0401 	sub.w	r4, r4, #1
 8000288:	f1d5 0e20 	rsbs	lr, r5, #32
 800028c:	db0d      	blt.n	80002aa <__adddf3+0xb2>
 800028e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000292:	fa22 f205 	lsr.w	r2, r2, r5
 8000296:	1880      	adds	r0, r0, r2
 8000298:	f141 0100 	adc.w	r1, r1, #0
 800029c:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a0:	1880      	adds	r0, r0, r2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	4159      	adcs	r1, r3
 80002a8:	e00e      	b.n	80002c8 <__adddf3+0xd0>
 80002aa:	f1a5 0520 	sub.w	r5, r5, #32
 80002ae:	f10e 0e20 	add.w	lr, lr, #32
 80002b2:	2a01      	cmp	r2, #1
 80002b4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b8:	bf28      	it	cs
 80002ba:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	18c0      	adds	r0, r0, r3
 80002c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002cc:	d507      	bpl.n	80002de <__adddf3+0xe6>
 80002ce:	f04f 0e00 	mov.w	lr, #0
 80002d2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002da:	eb6e 0101 	sbc.w	r1, lr, r1
 80002de:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e2:	d31b      	bcc.n	800031c <__adddf3+0x124>
 80002e4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e8:	d30c      	bcc.n	8000304 <__adddf3+0x10c>
 80002ea:	0849      	lsrs	r1, r1, #1
 80002ec:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f4:	f104 0401 	add.w	r4, r4, #1
 80002f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002fc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000300:	f080 809a 	bcs.w	8000438 <__adddf3+0x240>
 8000304:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000308:	bf08      	it	eq
 800030a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030e:	f150 0000 	adcs.w	r0, r0, #0
 8000312:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000316:	ea41 0105 	orr.w	r1, r1, r5
 800031a:	bd30      	pop	{r4, r5, pc}
 800031c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000320:	4140      	adcs	r0, r0
 8000322:	eb41 0101 	adc.w	r1, r1, r1
 8000326:	3c01      	subs	r4, #1
 8000328:	bf28      	it	cs
 800032a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800032e:	d2e9      	bcs.n	8000304 <__adddf3+0x10c>
 8000330:	f091 0f00 	teq	r1, #0
 8000334:	bf04      	itt	eq
 8000336:	4601      	moveq	r1, r0
 8000338:	2000      	moveq	r0, #0
 800033a:	fab1 f381 	clz	r3, r1
 800033e:	bf08      	it	eq
 8000340:	3320      	addeq	r3, #32
 8000342:	f1a3 030b 	sub.w	r3, r3, #11
 8000346:	f1b3 0220 	subs.w	r2, r3, #32
 800034a:	da0c      	bge.n	8000366 <__adddf3+0x16e>
 800034c:	320c      	adds	r2, #12
 800034e:	dd08      	ble.n	8000362 <__adddf3+0x16a>
 8000350:	f102 0c14 	add.w	ip, r2, #20
 8000354:	f1c2 020c 	rsb	r2, r2, #12
 8000358:	fa01 f00c 	lsl.w	r0, r1, ip
 800035c:	fa21 f102 	lsr.w	r1, r1, r2
 8000360:	e00c      	b.n	800037c <__adddf3+0x184>
 8000362:	f102 0214 	add.w	r2, r2, #20
 8000366:	bfd8      	it	le
 8000368:	f1c2 0c20 	rsble	ip, r2, #32
 800036c:	fa01 f102 	lsl.w	r1, r1, r2
 8000370:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000374:	bfdc      	itt	le
 8000376:	ea41 010c 	orrle.w	r1, r1, ip
 800037a:	4090      	lslle	r0, r2
 800037c:	1ae4      	subs	r4, r4, r3
 800037e:	bfa2      	ittt	ge
 8000380:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000384:	4329      	orrge	r1, r5
 8000386:	bd30      	popge	{r4, r5, pc}
 8000388:	ea6f 0404 	mvn.w	r4, r4
 800038c:	3c1f      	subs	r4, #31
 800038e:	da1c      	bge.n	80003ca <__adddf3+0x1d2>
 8000390:	340c      	adds	r4, #12
 8000392:	dc0e      	bgt.n	80003b2 <__adddf3+0x1ba>
 8000394:	f104 0414 	add.w	r4, r4, #20
 8000398:	f1c4 0220 	rsb	r2, r4, #32
 800039c:	fa20 f004 	lsr.w	r0, r0, r4
 80003a0:	fa01 f302 	lsl.w	r3, r1, r2
 80003a4:	ea40 0003 	orr.w	r0, r0, r3
 80003a8:	fa21 f304 	lsr.w	r3, r1, r4
 80003ac:	ea45 0103 	orr.w	r1, r5, r3
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	f1c4 040c 	rsb	r4, r4, #12
 80003b6:	f1c4 0220 	rsb	r2, r4, #32
 80003ba:	fa20 f002 	lsr.w	r0, r0, r2
 80003be:	fa01 f304 	lsl.w	r3, r1, r4
 80003c2:	ea40 0003 	orr.w	r0, r0, r3
 80003c6:	4629      	mov	r1, r5
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	fa21 f004 	lsr.w	r0, r1, r4
 80003ce:	4629      	mov	r1, r5
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	f094 0f00 	teq	r4, #0
 80003d6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003da:	bf06      	itte	eq
 80003dc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e0:	3401      	addeq	r4, #1
 80003e2:	3d01      	subne	r5, #1
 80003e4:	e74e      	b.n	8000284 <__adddf3+0x8c>
 80003e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ea:	bf18      	it	ne
 80003ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f0:	d029      	beq.n	8000446 <__adddf3+0x24e>
 80003f2:	ea94 0f05 	teq	r4, r5
 80003f6:	bf08      	it	eq
 80003f8:	ea90 0f02 	teqeq	r0, r2
 80003fc:	d005      	beq.n	800040a <__adddf3+0x212>
 80003fe:	ea54 0c00 	orrs.w	ip, r4, r0
 8000402:	bf04      	itt	eq
 8000404:	4619      	moveq	r1, r3
 8000406:	4610      	moveq	r0, r2
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	ea91 0f03 	teq	r1, r3
 800040e:	bf1e      	ittt	ne
 8000410:	2100      	movne	r1, #0
 8000412:	2000      	movne	r0, #0
 8000414:	bd30      	popne	{r4, r5, pc}
 8000416:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041a:	d105      	bne.n	8000428 <__adddf3+0x230>
 800041c:	0040      	lsls	r0, r0, #1
 800041e:	4149      	adcs	r1, r1
 8000420:	bf28      	it	cs
 8000422:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000426:	bd30      	pop	{r4, r5, pc}
 8000428:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800042c:	bf3c      	itt	cc
 800042e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000432:	bd30      	popcc	{r4, r5, pc}
 8000434:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000438:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800043c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000440:	f04f 0000 	mov.w	r0, #0
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044a:	bf1a      	itte	ne
 800044c:	4619      	movne	r1, r3
 800044e:	4610      	movne	r0, r2
 8000450:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000454:	bf1c      	itt	ne
 8000456:	460b      	movne	r3, r1
 8000458:	4602      	movne	r2, r0
 800045a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045e:	bf06      	itte	eq
 8000460:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000464:	ea91 0f03 	teqeq	r1, r3
 8000468:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	bf00      	nop

08000470 <__aeabi_ui2d>:
 8000470:	f090 0f00 	teq	r0, #0
 8000474:	bf04      	itt	eq
 8000476:	2100      	moveq	r1, #0
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000480:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000484:	f04f 0500 	mov.w	r5, #0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e750      	b.n	8000330 <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_i2d>:
 8000490:	f090 0f00 	teq	r0, #0
 8000494:	bf04      	itt	eq
 8000496:	2100      	moveq	r1, #0
 8000498:	4770      	bxeq	lr
 800049a:	b530      	push	{r4, r5, lr}
 800049c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a8:	bf48      	it	mi
 80004aa:	4240      	negmi	r0, r0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e73e      	b.n	8000330 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_f2d>:
 80004b4:	0042      	lsls	r2, r0, #1
 80004b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80004be:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c2:	bf1f      	itttt	ne
 80004c4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004cc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d0:	4770      	bxne	lr
 80004d2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d6:	bf08      	it	eq
 80004d8:	4770      	bxeq	lr
 80004da:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004de:	bf04      	itt	eq
 80004e0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f4:	e71c      	b.n	8000330 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_ul2d>:
 80004f8:	ea50 0201 	orrs.w	r2, r0, r1
 80004fc:	bf08      	it	eq
 80004fe:	4770      	bxeq	lr
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	f04f 0500 	mov.w	r5, #0
 8000506:	e00a      	b.n	800051e <__aeabi_l2d+0x16>

08000508 <__aeabi_l2d>:
 8000508:	ea50 0201 	orrs.w	r2, r0, r1
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000516:	d502      	bpl.n	800051e <__aeabi_l2d+0x16>
 8000518:	4240      	negs	r0, r0
 800051a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000522:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000526:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052a:	f43f aed8 	beq.w	80002de <__adddf3+0xe6>
 800052e:	f04f 0203 	mov.w	r2, #3
 8000532:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000536:	bf18      	it	ne
 8000538:	3203      	addne	r2, #3
 800053a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053e:	bf18      	it	ne
 8000540:	3203      	addne	r2, #3
 8000542:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000546:	f1c2 0320 	rsb	r3, r2, #32
 800054a:	fa00 fc03 	lsl.w	ip, r0, r3
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 fe03 	lsl.w	lr, r1, r3
 8000556:	ea40 000e 	orr.w	r0, r0, lr
 800055a:	fa21 f102 	lsr.w	r1, r1, r2
 800055e:	4414      	add	r4, r2
 8000560:	e6bd      	b.n	80002de <__adddf3+0xe6>
 8000562:	bf00      	nop

08000564 <__aeabi_dmul>:
 8000564:	b570      	push	{r4, r5, r6, lr}
 8000566:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000572:	bf1d      	ittte	ne
 8000574:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000578:	ea94 0f0c 	teqne	r4, ip
 800057c:	ea95 0f0c 	teqne	r5, ip
 8000580:	f000 f8de 	bleq	8000740 <__aeabi_dmul+0x1dc>
 8000584:	442c      	add	r4, r5
 8000586:	ea81 0603 	eor.w	r6, r1, r3
 800058a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000592:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000596:	bf18      	it	ne
 8000598:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a4:	d038      	beq.n	8000618 <__aeabi_dmul+0xb4>
 80005a6:	fba0 ce02 	umull	ip, lr, r0, r2
 80005aa:	f04f 0500 	mov.w	r5, #0
 80005ae:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ba:	f04f 0600 	mov.w	r6, #0
 80005be:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c2:	f09c 0f00 	teq	ip, #0
 80005c6:	bf18      	it	ne
 80005c8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005cc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d8:	d204      	bcs.n	80005e4 <__aeabi_dmul+0x80>
 80005da:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005de:	416d      	adcs	r5, r5
 80005e0:	eb46 0606 	adc.w	r6, r6, r6
 80005e4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005ec:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005fc:	bf88      	it	hi
 80005fe:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000602:	d81e      	bhi.n	8000642 <__aeabi_dmul+0xde>
 8000604:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000608:	bf08      	it	eq
 800060a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060e:	f150 0000 	adcs.w	r0, r0, #0
 8000612:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000616:	bd70      	pop	{r4, r5, r6, pc}
 8000618:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800061c:	ea46 0101 	orr.w	r1, r6, r1
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	ea81 0103 	eor.w	r1, r1, r3
 8000628:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800062c:	bfc2      	ittt	gt
 800062e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000632:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000636:	bd70      	popgt	{r4, r5, r6, pc}
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f04f 0e00 	mov.w	lr, #0
 8000640:	3c01      	subs	r4, #1
 8000642:	f300 80ab 	bgt.w	800079c <__aeabi_dmul+0x238>
 8000646:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064a:	bfde      	ittt	le
 800064c:	2000      	movle	r0, #0
 800064e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000652:	bd70      	pople	{r4, r5, r6, pc}
 8000654:	f1c4 0400 	rsb	r4, r4, #0
 8000658:	3c20      	subs	r4, #32
 800065a:	da35      	bge.n	80006c8 <__aeabi_dmul+0x164>
 800065c:	340c      	adds	r4, #12
 800065e:	dc1b      	bgt.n	8000698 <__aeabi_dmul+0x134>
 8000660:	f104 0414 	add.w	r4, r4, #20
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f305 	lsl.w	r3, r0, r5
 800066c:	fa20 f004 	lsr.w	r0, r0, r4
 8000670:	fa01 f205 	lsl.w	r2, r1, r5
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800067c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000680:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000684:	fa21 f604 	lsr.w	r6, r1, r4
 8000688:	eb42 0106 	adc.w	r1, r2, r6
 800068c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000690:	bf08      	it	eq
 8000692:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000696:	bd70      	pop	{r4, r5, r6, pc}
 8000698:	f1c4 040c 	rsb	r4, r4, #12
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f304 	lsl.w	r3, r0, r4
 80006a4:	fa20 f005 	lsr.w	r0, r0, r5
 80006a8:	fa01 f204 	lsl.w	r2, r1, r4
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	f141 0100 	adc.w	r1, r1, #0
 80006bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c0:	bf08      	it	eq
 80006c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c6:	bd70      	pop	{r4, r5, r6, pc}
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f205 	lsl.w	r2, r0, r5
 80006d0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d4:	fa20 f304 	lsr.w	r3, r0, r4
 80006d8:	fa01 f205 	lsl.w	r2, r1, r5
 80006dc:	ea43 0302 	orr.w	r3, r3, r2
 80006e0:	fa21 f004 	lsr.w	r0, r1, r4
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	fa21 f204 	lsr.w	r2, r1, r4
 80006ec:	ea20 0002 	bic.w	r0, r0, r2
 80006f0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f8:	bf08      	it	eq
 80006fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f094 0f00 	teq	r4, #0
 8000704:	d10f      	bne.n	8000726 <__aeabi_dmul+0x1c2>
 8000706:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070a:	0040      	lsls	r0, r0, #1
 800070c:	eb41 0101 	adc.w	r1, r1, r1
 8000710:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000714:	bf08      	it	eq
 8000716:	3c01      	subeq	r4, #1
 8000718:	d0f7      	beq.n	800070a <__aeabi_dmul+0x1a6>
 800071a:	ea41 0106 	orr.w	r1, r1, r6
 800071e:	f095 0f00 	teq	r5, #0
 8000722:	bf18      	it	ne
 8000724:	4770      	bxne	lr
 8000726:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072a:	0052      	lsls	r2, r2, #1
 800072c:	eb43 0303 	adc.w	r3, r3, r3
 8000730:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000734:	bf08      	it	eq
 8000736:	3d01      	subeq	r5, #1
 8000738:	d0f7      	beq.n	800072a <__aeabi_dmul+0x1c6>
 800073a:	ea43 0306 	orr.w	r3, r3, r6
 800073e:	4770      	bx	lr
 8000740:	ea94 0f0c 	teq	r4, ip
 8000744:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000748:	bf18      	it	ne
 800074a:	ea95 0f0c 	teqne	r5, ip
 800074e:	d00c      	beq.n	800076a <__aeabi_dmul+0x206>
 8000750:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000754:	bf18      	it	ne
 8000756:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075a:	d1d1      	bne.n	8000700 <__aeabi_dmul+0x19c>
 800075c:	ea81 0103 	eor.w	r1, r1, r3
 8000760:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000764:	f04f 0000 	mov.w	r0, #0
 8000768:	bd70      	pop	{r4, r5, r6, pc}
 800076a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076e:	bf06      	itte	eq
 8000770:	4610      	moveq	r0, r2
 8000772:	4619      	moveq	r1, r3
 8000774:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000778:	d019      	beq.n	80007ae <__aeabi_dmul+0x24a>
 800077a:	ea94 0f0c 	teq	r4, ip
 800077e:	d102      	bne.n	8000786 <__aeabi_dmul+0x222>
 8000780:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000784:	d113      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000786:	ea95 0f0c 	teq	r5, ip
 800078a:	d105      	bne.n	8000798 <__aeabi_dmul+0x234>
 800078c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000790:	bf1c      	itt	ne
 8000792:	4610      	movne	r0, r2
 8000794:	4619      	movne	r1, r3
 8000796:	d10a      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b6:	bd70      	pop	{r4, r5, r6, pc}

080007b8 <__aeabi_ddiv>:
 80007b8:	b570      	push	{r4, r5, r6, lr}
 80007ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c6:	bf1d      	ittte	ne
 80007c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007cc:	ea94 0f0c 	teqne	r4, ip
 80007d0:	ea95 0f0c 	teqne	r5, ip
 80007d4:	f000 f8a7 	bleq	8000926 <__aeabi_ddiv+0x16e>
 80007d8:	eba4 0405 	sub.w	r4, r4, r5
 80007dc:	ea81 0e03 	eor.w	lr, r1, r3
 80007e0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e8:	f000 8088 	beq.w	80008fc <__aeabi_ddiv+0x144>
 80007ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007fc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000800:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000804:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000808:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800080c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000810:	429d      	cmp	r5, r3
 8000812:	bf08      	it	eq
 8000814:	4296      	cmpeq	r6, r2
 8000816:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081e:	d202      	bcs.n	8000826 <__aeabi_ddiv+0x6e>
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	1ab6      	subs	r6, r6, r2
 8000828:	eb65 0503 	sbc.w	r5, r5, r3
 800082c:	085b      	lsrs	r3, r3, #1
 800082e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000832:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000836:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 000c 	orrcs.w	r0, r0, ip
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000894:	ea55 0e06 	orrs.w	lr, r5, r6
 8000898:	d018      	beq.n	80008cc <__aeabi_ddiv+0x114>
 800089a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008aa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ae:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b6:	d1c0      	bne.n	800083a <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	d10b      	bne.n	80008d6 <__aeabi_ddiv+0x11e>
 80008be:	ea41 0100 	orr.w	r1, r1, r0
 80008c2:	f04f 0000 	mov.w	r0, #0
 80008c6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ca:	e7b6      	b.n	800083a <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	bf04      	itt	eq
 80008d2:	4301      	orreq	r1, r0
 80008d4:	2000      	moveq	r0, #0
 80008d6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008da:	bf88      	it	hi
 80008dc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e0:	f63f aeaf 	bhi.w	8000642 <__aeabi_dmul+0xde>
 80008e4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e8:	bf04      	itt	eq
 80008ea:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f2:	f150 0000 	adcs.w	r0, r0, #0
 80008f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fa:	bd70      	pop	{r4, r5, r6, pc}
 80008fc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000900:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000904:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000908:	bfc2      	ittt	gt
 800090a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000912:	bd70      	popgt	{r4, r5, r6, pc}
 8000914:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000918:	f04f 0e00 	mov.w	lr, #0
 800091c:	3c01      	subs	r4, #1
 800091e:	e690      	b.n	8000642 <__aeabi_dmul+0xde>
 8000920:	ea45 0e06 	orr.w	lr, r5, r6
 8000924:	e68d      	b.n	8000642 <__aeabi_dmul+0xde>
 8000926:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092a:	ea94 0f0c 	teq	r4, ip
 800092e:	bf08      	it	eq
 8000930:	ea95 0f0c 	teqeq	r5, ip
 8000934:	f43f af3b 	beq.w	80007ae <__aeabi_dmul+0x24a>
 8000938:	ea94 0f0c 	teq	r4, ip
 800093c:	d10a      	bne.n	8000954 <__aeabi_ddiv+0x19c>
 800093e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000942:	f47f af34 	bne.w	80007ae <__aeabi_dmul+0x24a>
 8000946:	ea95 0f0c 	teq	r5, ip
 800094a:	f47f af25 	bne.w	8000798 <__aeabi_dmul+0x234>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e72c      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000954:	ea95 0f0c 	teq	r5, ip
 8000958:	d106      	bne.n	8000968 <__aeabi_ddiv+0x1b0>
 800095a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095e:	f43f aefd 	beq.w	800075c <__aeabi_dmul+0x1f8>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e722      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000968:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800096c:	bf18      	it	ne
 800096e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000972:	f47f aec5 	bne.w	8000700 <__aeabi_dmul+0x19c>
 8000976:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097a:	f47f af0d 	bne.w	8000798 <__aeabi_dmul+0x234>
 800097e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000982:	f47f aeeb 	bne.w	800075c <__aeabi_dmul+0x1f8>
 8000986:	e712      	b.n	80007ae <__aeabi_dmul+0x24a>

08000988 <__aeabi_d2f>:
 8000988:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800098c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000990:	bf24      	itt	cs
 8000992:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000996:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800099a:	d90d      	bls.n	80009b8 <__aeabi_d2f+0x30>
 800099c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009a0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009a4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009a8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009ac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009b0:	bf08      	it	eq
 80009b2:	f020 0001 	biceq.w	r0, r0, #1
 80009b6:	4770      	bx	lr
 80009b8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009bc:	d121      	bne.n	8000a02 <__aeabi_d2f+0x7a>
 80009be:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009c2:	bfbc      	itt	lt
 80009c4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009c8:	4770      	bxlt	lr
 80009ca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ce:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009d2:	f1c2 0218 	rsb	r2, r2, #24
 80009d6:	f1c2 0c20 	rsb	ip, r2, #32
 80009da:	fa10 f30c 	lsls.w	r3, r0, ip
 80009de:	fa20 f002 	lsr.w	r0, r0, r2
 80009e2:	bf18      	it	ne
 80009e4:	f040 0001 	orrne.w	r0, r0, #1
 80009e8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009f0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009f4:	ea40 000c 	orr.w	r0, r0, ip
 80009f8:	fa23 f302 	lsr.w	r3, r3, r2
 80009fc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a00:	e7cc      	b.n	800099c <__aeabi_d2f+0x14>
 8000a02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a06:	d107      	bne.n	8000a18 <__aeabi_d2f+0x90>
 8000a08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a0c:	bf1e      	ittt	ne
 8000a0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a16:	4770      	bxne	lr
 8000a18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop

08000a28 <__aeabi_uldivmod>:
 8000a28:	b953      	cbnz	r3, 8000a40 <__aeabi_uldivmod+0x18>
 8000a2a:	b94a      	cbnz	r2, 8000a40 <__aeabi_uldivmod+0x18>
 8000a2c:	2900      	cmp	r1, #0
 8000a2e:	bf08      	it	eq
 8000a30:	2800      	cmpeq	r0, #0
 8000a32:	bf1c      	itt	ne
 8000a34:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a38:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a3c:	f000 b974 	b.w	8000d28 <__aeabi_idiv0>
 8000a40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a48:	f000 f806 	bl	8000a58 <__udivmoddi4>
 8000a4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a54:	b004      	add	sp, #16
 8000a56:	4770      	bx	lr

08000a58 <__udivmoddi4>:
 8000a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a5c:	9d08      	ldr	r5, [sp, #32]
 8000a5e:	4604      	mov	r4, r0
 8000a60:	468e      	mov	lr, r1
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d14d      	bne.n	8000b02 <__udivmoddi4+0xaa>
 8000a66:	428a      	cmp	r2, r1
 8000a68:	4694      	mov	ip, r2
 8000a6a:	d969      	bls.n	8000b40 <__udivmoddi4+0xe8>
 8000a6c:	fab2 f282 	clz	r2, r2
 8000a70:	b152      	cbz	r2, 8000a88 <__udivmoddi4+0x30>
 8000a72:	fa01 f302 	lsl.w	r3, r1, r2
 8000a76:	f1c2 0120 	rsb	r1, r2, #32
 8000a7a:	fa20 f101 	lsr.w	r1, r0, r1
 8000a7e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a82:	ea41 0e03 	orr.w	lr, r1, r3
 8000a86:	4094      	lsls	r4, r2
 8000a88:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a8c:	0c21      	lsrs	r1, r4, #16
 8000a8e:	fbbe f6f8 	udiv	r6, lr, r8
 8000a92:	fa1f f78c 	uxth.w	r7, ip
 8000a96:	fb08 e316 	mls	r3, r8, r6, lr
 8000a9a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a9e:	fb06 f107 	mul.w	r1, r6, r7
 8000aa2:	4299      	cmp	r1, r3
 8000aa4:	d90a      	bls.n	8000abc <__udivmoddi4+0x64>
 8000aa6:	eb1c 0303 	adds.w	r3, ip, r3
 8000aaa:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000aae:	f080 811f 	bcs.w	8000cf0 <__udivmoddi4+0x298>
 8000ab2:	4299      	cmp	r1, r3
 8000ab4:	f240 811c 	bls.w	8000cf0 <__udivmoddi4+0x298>
 8000ab8:	3e02      	subs	r6, #2
 8000aba:	4463      	add	r3, ip
 8000abc:	1a5b      	subs	r3, r3, r1
 8000abe:	b2a4      	uxth	r4, r4
 8000ac0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ac4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ac8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000acc:	fb00 f707 	mul.w	r7, r0, r7
 8000ad0:	42a7      	cmp	r7, r4
 8000ad2:	d90a      	bls.n	8000aea <__udivmoddi4+0x92>
 8000ad4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ad8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000adc:	f080 810a 	bcs.w	8000cf4 <__udivmoddi4+0x29c>
 8000ae0:	42a7      	cmp	r7, r4
 8000ae2:	f240 8107 	bls.w	8000cf4 <__udivmoddi4+0x29c>
 8000ae6:	4464      	add	r4, ip
 8000ae8:	3802      	subs	r0, #2
 8000aea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000aee:	1be4      	subs	r4, r4, r7
 8000af0:	2600      	movs	r6, #0
 8000af2:	b11d      	cbz	r5, 8000afc <__udivmoddi4+0xa4>
 8000af4:	40d4      	lsrs	r4, r2
 8000af6:	2300      	movs	r3, #0
 8000af8:	e9c5 4300 	strd	r4, r3, [r5]
 8000afc:	4631      	mov	r1, r6
 8000afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b02:	428b      	cmp	r3, r1
 8000b04:	d909      	bls.n	8000b1a <__udivmoddi4+0xc2>
 8000b06:	2d00      	cmp	r5, #0
 8000b08:	f000 80ef 	beq.w	8000cea <__udivmoddi4+0x292>
 8000b0c:	2600      	movs	r6, #0
 8000b0e:	e9c5 0100 	strd	r0, r1, [r5]
 8000b12:	4630      	mov	r0, r6
 8000b14:	4631      	mov	r1, r6
 8000b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b1a:	fab3 f683 	clz	r6, r3
 8000b1e:	2e00      	cmp	r6, #0
 8000b20:	d14a      	bne.n	8000bb8 <__udivmoddi4+0x160>
 8000b22:	428b      	cmp	r3, r1
 8000b24:	d302      	bcc.n	8000b2c <__udivmoddi4+0xd4>
 8000b26:	4282      	cmp	r2, r0
 8000b28:	f200 80f9 	bhi.w	8000d1e <__udivmoddi4+0x2c6>
 8000b2c:	1a84      	subs	r4, r0, r2
 8000b2e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b32:	2001      	movs	r0, #1
 8000b34:	469e      	mov	lr, r3
 8000b36:	2d00      	cmp	r5, #0
 8000b38:	d0e0      	beq.n	8000afc <__udivmoddi4+0xa4>
 8000b3a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b3e:	e7dd      	b.n	8000afc <__udivmoddi4+0xa4>
 8000b40:	b902      	cbnz	r2, 8000b44 <__udivmoddi4+0xec>
 8000b42:	deff      	udf	#255	; 0xff
 8000b44:	fab2 f282 	clz	r2, r2
 8000b48:	2a00      	cmp	r2, #0
 8000b4a:	f040 8092 	bne.w	8000c72 <__udivmoddi4+0x21a>
 8000b4e:	eba1 010c 	sub.w	r1, r1, ip
 8000b52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b56:	fa1f fe8c 	uxth.w	lr, ip
 8000b5a:	2601      	movs	r6, #1
 8000b5c:	0c20      	lsrs	r0, r4, #16
 8000b5e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b62:	fb07 1113 	mls	r1, r7, r3, r1
 8000b66:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b6a:	fb0e f003 	mul.w	r0, lr, r3
 8000b6e:	4288      	cmp	r0, r1
 8000b70:	d908      	bls.n	8000b84 <__udivmoddi4+0x12c>
 8000b72:	eb1c 0101 	adds.w	r1, ip, r1
 8000b76:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000b7a:	d202      	bcs.n	8000b82 <__udivmoddi4+0x12a>
 8000b7c:	4288      	cmp	r0, r1
 8000b7e:	f200 80cb 	bhi.w	8000d18 <__udivmoddi4+0x2c0>
 8000b82:	4643      	mov	r3, r8
 8000b84:	1a09      	subs	r1, r1, r0
 8000b86:	b2a4      	uxth	r4, r4
 8000b88:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b8c:	fb07 1110 	mls	r1, r7, r0, r1
 8000b90:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b94:	fb0e fe00 	mul.w	lr, lr, r0
 8000b98:	45a6      	cmp	lr, r4
 8000b9a:	d908      	bls.n	8000bae <__udivmoddi4+0x156>
 8000b9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000ba0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ba4:	d202      	bcs.n	8000bac <__udivmoddi4+0x154>
 8000ba6:	45a6      	cmp	lr, r4
 8000ba8:	f200 80bb 	bhi.w	8000d22 <__udivmoddi4+0x2ca>
 8000bac:	4608      	mov	r0, r1
 8000bae:	eba4 040e 	sub.w	r4, r4, lr
 8000bb2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bb6:	e79c      	b.n	8000af2 <__udivmoddi4+0x9a>
 8000bb8:	f1c6 0720 	rsb	r7, r6, #32
 8000bbc:	40b3      	lsls	r3, r6
 8000bbe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bc2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bc6:	fa20 f407 	lsr.w	r4, r0, r7
 8000bca:	fa01 f306 	lsl.w	r3, r1, r6
 8000bce:	431c      	orrs	r4, r3
 8000bd0:	40f9      	lsrs	r1, r7
 8000bd2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bd6:	fa00 f306 	lsl.w	r3, r0, r6
 8000bda:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bde:	0c20      	lsrs	r0, r4, #16
 8000be0:	fa1f fe8c 	uxth.w	lr, ip
 8000be4:	fb09 1118 	mls	r1, r9, r8, r1
 8000be8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bec:	fb08 f00e 	mul.w	r0, r8, lr
 8000bf0:	4288      	cmp	r0, r1
 8000bf2:	fa02 f206 	lsl.w	r2, r2, r6
 8000bf6:	d90b      	bls.n	8000c10 <__udivmoddi4+0x1b8>
 8000bf8:	eb1c 0101 	adds.w	r1, ip, r1
 8000bfc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000c00:	f080 8088 	bcs.w	8000d14 <__udivmoddi4+0x2bc>
 8000c04:	4288      	cmp	r0, r1
 8000c06:	f240 8085 	bls.w	8000d14 <__udivmoddi4+0x2bc>
 8000c0a:	f1a8 0802 	sub.w	r8, r8, #2
 8000c0e:	4461      	add	r1, ip
 8000c10:	1a09      	subs	r1, r1, r0
 8000c12:	b2a4      	uxth	r4, r4
 8000c14:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c18:	fb09 1110 	mls	r1, r9, r0, r1
 8000c1c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c20:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c24:	458e      	cmp	lr, r1
 8000c26:	d908      	bls.n	8000c3a <__udivmoddi4+0x1e2>
 8000c28:	eb1c 0101 	adds.w	r1, ip, r1
 8000c2c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000c30:	d26c      	bcs.n	8000d0c <__udivmoddi4+0x2b4>
 8000c32:	458e      	cmp	lr, r1
 8000c34:	d96a      	bls.n	8000d0c <__udivmoddi4+0x2b4>
 8000c36:	3802      	subs	r0, #2
 8000c38:	4461      	add	r1, ip
 8000c3a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c3e:	fba0 9402 	umull	r9, r4, r0, r2
 8000c42:	eba1 010e 	sub.w	r1, r1, lr
 8000c46:	42a1      	cmp	r1, r4
 8000c48:	46c8      	mov	r8, r9
 8000c4a:	46a6      	mov	lr, r4
 8000c4c:	d356      	bcc.n	8000cfc <__udivmoddi4+0x2a4>
 8000c4e:	d053      	beq.n	8000cf8 <__udivmoddi4+0x2a0>
 8000c50:	b15d      	cbz	r5, 8000c6a <__udivmoddi4+0x212>
 8000c52:	ebb3 0208 	subs.w	r2, r3, r8
 8000c56:	eb61 010e 	sbc.w	r1, r1, lr
 8000c5a:	fa01 f707 	lsl.w	r7, r1, r7
 8000c5e:	fa22 f306 	lsr.w	r3, r2, r6
 8000c62:	40f1      	lsrs	r1, r6
 8000c64:	431f      	orrs	r7, r3
 8000c66:	e9c5 7100 	strd	r7, r1, [r5]
 8000c6a:	2600      	movs	r6, #0
 8000c6c:	4631      	mov	r1, r6
 8000c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c72:	f1c2 0320 	rsb	r3, r2, #32
 8000c76:	40d8      	lsrs	r0, r3
 8000c78:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c7c:	fa21 f303 	lsr.w	r3, r1, r3
 8000c80:	4091      	lsls	r1, r2
 8000c82:	4301      	orrs	r1, r0
 8000c84:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c88:	fa1f fe8c 	uxth.w	lr, ip
 8000c8c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c90:	fb07 3610 	mls	r6, r7, r0, r3
 8000c94:	0c0b      	lsrs	r3, r1, #16
 8000c96:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c9a:	fb00 f60e 	mul.w	r6, r0, lr
 8000c9e:	429e      	cmp	r6, r3
 8000ca0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ca4:	d908      	bls.n	8000cb8 <__udivmoddi4+0x260>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000cae:	d22f      	bcs.n	8000d10 <__udivmoddi4+0x2b8>
 8000cb0:	429e      	cmp	r6, r3
 8000cb2:	d92d      	bls.n	8000d10 <__udivmoddi4+0x2b8>
 8000cb4:	3802      	subs	r0, #2
 8000cb6:	4463      	add	r3, ip
 8000cb8:	1b9b      	subs	r3, r3, r6
 8000cba:	b289      	uxth	r1, r1
 8000cbc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cc0:	fb07 3316 	mls	r3, r7, r6, r3
 8000cc4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc8:	fb06 f30e 	mul.w	r3, r6, lr
 8000ccc:	428b      	cmp	r3, r1
 8000cce:	d908      	bls.n	8000ce2 <__udivmoddi4+0x28a>
 8000cd0:	eb1c 0101 	adds.w	r1, ip, r1
 8000cd4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000cd8:	d216      	bcs.n	8000d08 <__udivmoddi4+0x2b0>
 8000cda:	428b      	cmp	r3, r1
 8000cdc:	d914      	bls.n	8000d08 <__udivmoddi4+0x2b0>
 8000cde:	3e02      	subs	r6, #2
 8000ce0:	4461      	add	r1, ip
 8000ce2:	1ac9      	subs	r1, r1, r3
 8000ce4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ce8:	e738      	b.n	8000b5c <__udivmoddi4+0x104>
 8000cea:	462e      	mov	r6, r5
 8000cec:	4628      	mov	r0, r5
 8000cee:	e705      	b.n	8000afc <__udivmoddi4+0xa4>
 8000cf0:	4606      	mov	r6, r0
 8000cf2:	e6e3      	b.n	8000abc <__udivmoddi4+0x64>
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	e6f8      	b.n	8000aea <__udivmoddi4+0x92>
 8000cf8:	454b      	cmp	r3, r9
 8000cfa:	d2a9      	bcs.n	8000c50 <__udivmoddi4+0x1f8>
 8000cfc:	ebb9 0802 	subs.w	r8, r9, r2
 8000d00:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d04:	3801      	subs	r0, #1
 8000d06:	e7a3      	b.n	8000c50 <__udivmoddi4+0x1f8>
 8000d08:	4646      	mov	r6, r8
 8000d0a:	e7ea      	b.n	8000ce2 <__udivmoddi4+0x28a>
 8000d0c:	4620      	mov	r0, r4
 8000d0e:	e794      	b.n	8000c3a <__udivmoddi4+0x1e2>
 8000d10:	4640      	mov	r0, r8
 8000d12:	e7d1      	b.n	8000cb8 <__udivmoddi4+0x260>
 8000d14:	46d0      	mov	r8, sl
 8000d16:	e77b      	b.n	8000c10 <__udivmoddi4+0x1b8>
 8000d18:	3b02      	subs	r3, #2
 8000d1a:	4461      	add	r1, ip
 8000d1c:	e732      	b.n	8000b84 <__udivmoddi4+0x12c>
 8000d1e:	4630      	mov	r0, r6
 8000d20:	e709      	b.n	8000b36 <__udivmoddi4+0xde>
 8000d22:	4464      	add	r4, ip
 8000d24:	3802      	subs	r0, #2
 8000d26:	e742      	b.n	8000bae <__udivmoddi4+0x156>

08000d28 <__aeabi_idiv0>:
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop

08000d2c <init_controlRxTx>:

////prototipos de funciones/////
void iniciaInstruccion(void);
void continuaInstruccion(void);

void init_controlRxTx (UART_HandleTypeDef* huart){
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
	uart_handler = huart;
 8000d34:	4a04      	ldr	r2, [pc, #16]	; (8000d48 <init_controlRxTx+0x1c>)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6013      	str	r3, [r2, #0]
} //end init_controlRxTx ()
 8000d3a:	bf00      	nop
 8000d3c:	370c      	adds	r7, #12
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	2000002c 	.word	0x2000002c

08000d4c <controlRxTxUART>:


void controlRxTxUART (uint8_t rx[]){
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]

	if (rx[3] != 0){
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	3303      	adds	r3, #3
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d014      	beq.n	8000d88 <controlRxTxUART+0x3c>
		tx[0] = CMD_ERROR;
 8000d5e:	4b16      	ldr	r3, [pc, #88]	; (8000db8 <controlRxTxUART+0x6c>)
 8000d60:	2204      	movs	r2, #4
 8000d62:	701a      	strb	r2, [r3, #0]
		tx[3] = '\0';
 8000d64:	4b14      	ldr	r3, [pc, #80]	; (8000db8 <controlRxTxUART+0x6c>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	70da      	strb	r2, [r3, #3]
		HAL_UART_Transmit_IT(uart_handler, tx, 4);
 8000d6a:	4b14      	ldr	r3, [pc, #80]	; (8000dbc <controlRxTxUART+0x70>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	2204      	movs	r2, #4
 8000d70:	4911      	ldr	r1, [pc, #68]	; (8000db8 <controlRxTxUART+0x6c>)
 8000d72:	4618      	mov	r0, r3
 8000d74:	f005 fb51 	bl	800641a <HAL_UART_Transmit_IT>
		HAL_UART_Receive_IT(uart_handler, rx, 4);
 8000d78:	4b10      	ldr	r3, [pc, #64]	; (8000dbc <controlRxTxUART+0x70>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2204      	movs	r2, #4
 8000d7e:	6879      	ldr	r1, [r7, #4]
 8000d80:	4618      	mov	r0, r3
 8000d82:	f005 fb8f 	bl	80064a4 <HAL_UART_Receive_IT>
		return;
 8000d86:	e013      	b.n	8000db0 <controlRxTxUART+0x64>
	}

	p_rx = &rx[0];
 8000d88:	4a0d      	ldr	r2, [pc, #52]	; (8000dc0 <controlRxTxUART+0x74>)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6013      	str	r3, [r2, #0]

	if (cmdEsperado != NO_CMD){
 8000d8e:	4b0d      	ldr	r3, [pc, #52]	; (8000dc4 <controlRxTxUART+0x78>)
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d002      	beq.n	8000d9c <controlRxTxUART+0x50>
		continuaInstruccion();
 8000d96:	f000 f953 	bl	8001040 <continuaInstruccion>
 8000d9a:	e001      	b.n	8000da0 <controlRxTxUART+0x54>
	}else{
		iniciaInstruccion();
 8000d9c:	f000 f814 	bl	8000dc8 <iniciaInstruccion>
	}

	HAL_UART_Receive_IT(uart_handler, p_rx, 4);
 8000da0:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <controlRxTxUART+0x70>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a06      	ldr	r2, [pc, #24]	; (8000dc0 <controlRxTxUART+0x74>)
 8000da6:	6811      	ldr	r1, [r2, #0]
 8000da8:	2204      	movs	r2, #4
 8000daa:	4618      	mov	r0, r3
 8000dac:	f005 fb7a 	bl	80064a4 <HAL_UART_Receive_IT>

} //end controlRxTxUART ()
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20000030 	.word	0x20000030
 8000dbc:	2000002c 	.word	0x2000002c
 8000dc0:	20000034 	.word	0x20000034
 8000dc4:	20000038 	.word	0x20000038

08000dc8 <iniciaInstruccion>:


void iniciaInstruccion (void){
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0

	switch (p_rx[0]){
 8000dcc:	4b92      	ldr	r3, [pc, #584]	; (8001018 <iniciaInstruccion+0x250>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	3b01      	subs	r3, #1
 8000dd4:	2b13      	cmp	r3, #19
 8000dd6:	f200 810e 	bhi.w	8000ff6 <iniciaInstruccion+0x22e>
 8000dda:	a201      	add	r2, pc, #4	; (adr r2, 8000de0 <iniciaInstruccion+0x18>)
 8000ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000de0:	08000e31 	.word	0x08000e31
 8000de4:	08000ff7 	.word	0x08000ff7
 8000de8:	08000ff7 	.word	0x08000ff7
 8000dec:	08000ff7 	.word	0x08000ff7
 8000df0:	08000e59 	.word	0x08000e59
 8000df4:	08000ff7 	.word	0x08000ff7
 8000df8:	08000ff7 	.word	0x08000ff7
 8000dfc:	08000fe1 	.word	0x08000fe1
 8000e00:	08000ff7 	.word	0x08000ff7
 8000e04:	08000ed3 	.word	0x08000ed3
 8000e08:	08000ff7 	.word	0x08000ff7
 8000e0c:	08000f0f 	.word	0x08000f0f
 8000e10:	08000f37 	.word	0x08000f37
 8000e14:	08000f7b 	.word	0x08000f7b
 8000e18:	08000f9d 	.word	0x08000f9d
 8000e1c:	08000f59 	.word	0x08000f59
 8000e20:	08000ff7 	.word	0x08000ff7
 8000e24:	08000ff7 	.word	0x08000ff7
 8000e28:	08000ff7 	.word	0x08000ff7
 8000e2c:	08000fbf 	.word	0x08000fbf
		case HOLA:
			esp01Presente = 1;
 8000e30:	4b7a      	ldr	r3, [pc, #488]	; (800101c <iniciaInstruccion+0x254>)
 8000e32:	2201      	movs	r2, #1
 8000e34:	701a      	strb	r2, [r3, #0]
			cmdEsperado = NO_CMD;
 8000e36:	4b7a      	ldr	r3, [pc, #488]	; (8001020 <iniciaInstruccion+0x258>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	701a      	strb	r2, [r3, #0]
			tx[0] = HOLA;
 8000e3c:	4b79      	ldr	r3, [pc, #484]	; (8001024 <iniciaInstruccion+0x25c>)
 8000e3e:	2201      	movs	r2, #1
 8000e40:	701a      	strb	r2, [r3, #0]
			tx[3] = '\0';
 8000e42:	4b78      	ldr	r3, [pc, #480]	; (8001024 <iniciaInstruccion+0x25c>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	70da      	strb	r2, [r3, #3]
			HAL_UART_Transmit_IT(uart_handler, tx, 4);
 8000e48:	4b77      	ldr	r3, [pc, #476]	; (8001028 <iniciaInstruccion+0x260>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	2204      	movs	r2, #4
 8000e4e:	4975      	ldr	r1, [pc, #468]	; (8001024 <iniciaInstruccion+0x25c>)
 8000e50:	4618      	mov	r0, r3
 8000e52:	f005 fae2 	bl	800641a <HAL_UART_Transmit_IT>
		break;
 8000e56:	e0dc      	b.n	8001012 <iniciaInstruccion+0x24a>

		case MODO:
			switch (p_rx[1]) {
 8000e58:	4b6f      	ldr	r3, [pc, #444]	; (8001018 <iniciaInstruccion+0x250>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d002      	beq.n	8000e6a <iniciaInstruccion+0xa2>
 8000e64:	2b01      	cmp	r3, #1
 8000e66:	d014      	beq.n	8000e92 <iniciaInstruccion+0xca>
 8000e68:	e024      	b.n	8000eb4 <iniciaInstruccion+0xec>
				case AUTOMATICO:
					modoFuncionamiento = AUTOMATICO;
 8000e6a:	4b70      	ldr	r3, [pc, #448]	; (800102c <iniciaInstruccion+0x264>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	701a      	strb	r2, [r3, #0]
					flag_encoders = 0;
 8000e70:	4b6f      	ldr	r3, [pc, #444]	; (8001030 <iniciaInstruccion+0x268>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	701a      	strb	r2, [r3, #0]
					tx[0] = OK_;
 8000e76:	4b6b      	ldr	r3, [pc, #428]	; (8001024 <iniciaInstruccion+0x25c>)
 8000e78:	2202      	movs	r2, #2
 8000e7a:	701a      	strb	r2, [r3, #0]
					tx[3] = '\0';
 8000e7c:	4b69      	ldr	r3, [pc, #420]	; (8001024 <iniciaInstruccion+0x25c>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	70da      	strb	r2, [r3, #3]
					HAL_UART_Transmit_IT(uart_handler, tx, 4);
 8000e82:	4b69      	ldr	r3, [pc, #420]	; (8001028 <iniciaInstruccion+0x260>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	2204      	movs	r2, #4
 8000e88:	4966      	ldr	r1, [pc, #408]	; (8001024 <iniciaInstruccion+0x25c>)
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f005 fac5 	bl	800641a <HAL_UART_Transmit_IT>
					break;
 8000e90:	e01e      	b.n	8000ed0 <iniciaInstruccion+0x108>
				case MANUAL:
//					status_movimiento = QUIETO;
					modoFuncionamiento = MANUAL;
 8000e92:	4b66      	ldr	r3, [pc, #408]	; (800102c <iniciaInstruccion+0x264>)
 8000e94:	2201      	movs	r2, #1
 8000e96:	701a      	strb	r2, [r3, #0]
					tx[0] = OK_;
 8000e98:	4b62      	ldr	r3, [pc, #392]	; (8001024 <iniciaInstruccion+0x25c>)
 8000e9a:	2202      	movs	r2, #2
 8000e9c:	701a      	strb	r2, [r3, #0]
					tx[3] = '\0';
 8000e9e:	4b61      	ldr	r3, [pc, #388]	; (8001024 <iniciaInstruccion+0x25c>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	70da      	strb	r2, [r3, #3]
					HAL_UART_Transmit_IT(uart_handler, tx, 4);
 8000ea4:	4b60      	ldr	r3, [pc, #384]	; (8001028 <iniciaInstruccion+0x260>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2204      	movs	r2, #4
 8000eaa:	495e      	ldr	r1, [pc, #376]	; (8001024 <iniciaInstruccion+0x25c>)
 8000eac:	4618      	mov	r0, r3
 8000eae:	f005 fab4 	bl	800641a <HAL_UART_Transmit_IT>
					break;
 8000eb2:	e00d      	b.n	8000ed0 <iniciaInstruccion+0x108>
				default:
					tx[0] = CMD_ERROR;
 8000eb4:	4b5b      	ldr	r3, [pc, #364]	; (8001024 <iniciaInstruccion+0x25c>)
 8000eb6:	2204      	movs	r2, #4
 8000eb8:	701a      	strb	r2, [r3, #0]
					tx[3] = '\0';
 8000eba:	4b5a      	ldr	r3, [pc, #360]	; (8001024 <iniciaInstruccion+0x25c>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	70da      	strb	r2, [r3, #3]
					HAL_UART_Transmit_IT(uart_handler, tx, 4);
 8000ec0:	4b59      	ldr	r3, [pc, #356]	; (8001028 <iniciaInstruccion+0x260>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2204      	movs	r2, #4
 8000ec6:	4957      	ldr	r1, [pc, #348]	; (8001024 <iniciaInstruccion+0x25c>)
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f005 faa6 	bl	800641a <HAL_UART_Transmit_IT>
			} //end switch p_rx[1]
		break;
 8000ece:	e0a0      	b.n	8001012 <iniciaInstruccion+0x24a>
 8000ed0:	e09f      	b.n	8001012 <iniciaInstruccion+0x24a>
		case HOME:
			cmdActual = HOME;
 8000ed2:	4b58      	ldr	r3, [pc, #352]	; (8001034 <iniciaInstruccion+0x26c>)
 8000ed4:	220a      	movs	r2, #10
 8000ed6:	701a      	strb	r2, [r3, #0]
			tx[0] = COORD_X;
 8000ed8:	4b52      	ldr	r3, [pc, #328]	; (8001024 <iniciaInstruccion+0x25c>)
 8000eda:	2206      	movs	r2, #6
 8000edc:	701a      	strb	r2, [r3, #0]
			tx[1] = 0x0;
 8000ede:	4b51      	ldr	r3, [pc, #324]	; (8001024 <iniciaInstruccion+0x25c>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	705a      	strb	r2, [r3, #1]
			tx[2] = pos_x;
 8000ee4:	4b54      	ldr	r3, [pc, #336]	; (8001038 <iniciaInstruccion+0x270>)
 8000ee6:	781a      	ldrb	r2, [r3, #0]
 8000ee8:	4b4e      	ldr	r3, [pc, #312]	; (8001024 <iniciaInstruccion+0x25c>)
 8000eea:	709a      	strb	r2, [r3, #2]
			tx[3] = '\0';
 8000eec:	4b4d      	ldr	r3, [pc, #308]	; (8001024 <iniciaInstruccion+0x25c>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	70da      	strb	r2, [r3, #3]
			cmdEsperado = OK_;
 8000ef2:	4b4b      	ldr	r3, [pc, #300]	; (8001020 <iniciaInstruccion+0x258>)
 8000ef4:	2202      	movs	r2, #2
 8000ef6:	701a      	strb	r2, [r3, #0]
			cmdSecuencia = 2;
 8000ef8:	4b50      	ldr	r3, [pc, #320]	; (800103c <iniciaInstruccion+0x274>)
 8000efa:	2202      	movs	r2, #2
 8000efc:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(uart_handler, tx, 4);
 8000efe:	4b4a      	ldr	r3, [pc, #296]	; (8001028 <iniciaInstruccion+0x260>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	2204      	movs	r2, #4
 8000f04:	4947      	ldr	r1, [pc, #284]	; (8001024 <iniciaInstruccion+0x25c>)
 8000f06:	4618      	mov	r0, r3
 8000f08:	f005 fa87 	bl	800641a <HAL_UART_Transmit_IT>
		break;
 8000f0c:	e081      	b.n	8001012 <iniciaInstruccion+0x24a>
		case SET_HOME:
			cmdActual = SET_HOME;
 8000f0e:	4b49      	ldr	r3, [pc, #292]	; (8001034 <iniciaInstruccion+0x26c>)
 8000f10:	220c      	movs	r2, #12
 8000f12:	701a      	strb	r2, [r3, #0]
			tx[0] = OK_;
 8000f14:	4b43      	ldr	r3, [pc, #268]	; (8001024 <iniciaInstruccion+0x25c>)
 8000f16:	2202      	movs	r2, #2
 8000f18:	701a      	strb	r2, [r3, #0]
			tx[3] = '\0';
 8000f1a:	4b42      	ldr	r3, [pc, #264]	; (8001024 <iniciaInstruccion+0x25c>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	70da      	strb	r2, [r3, #3]
			cmdEsperado = COORD_X;
 8000f20:	4b3f      	ldr	r3, [pc, #252]	; (8001020 <iniciaInstruccion+0x258>)
 8000f22:	2206      	movs	r2, #6
 8000f24:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(uart_handler, tx, 4);
 8000f26:	4b40      	ldr	r3, [pc, #256]	; (8001028 <iniciaInstruccion+0x260>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	2204      	movs	r2, #4
 8000f2c:	493d      	ldr	r1, [pc, #244]	; (8001024 <iniciaInstruccion+0x25c>)
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f005 fa73 	bl	800641a <HAL_UART_Transmit_IT>
		break;
 8000f34:	e06d      	b.n	8001012 <iniciaInstruccion+0x24a>
		case AVANCE:
//			avance_cant += (uint16_t) (rx[2] + (rx[1] << 8));
			cmdEsperado = NO_CMD;
 8000f36:	4b3a      	ldr	r3, [pc, #232]	; (8001020 <iniciaInstruccion+0x258>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	701a      	strb	r2, [r3, #0]
			tx[0] = OK_;
 8000f3c:	4b39      	ldr	r3, [pc, #228]	; (8001024 <iniciaInstruccion+0x25c>)
 8000f3e:	2202      	movs	r2, #2
 8000f40:	701a      	strb	r2, [r3, #0]
			tx[3] = '\0';
 8000f42:	4b38      	ldr	r3, [pc, #224]	; (8001024 <iniciaInstruccion+0x25c>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	70da      	strb	r2, [r3, #3]
			HAL_UART_Transmit_IT(uart_handler, tx, 4);
 8000f48:	4b37      	ldr	r3, [pc, #220]	; (8001028 <iniciaInstruccion+0x260>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2204      	movs	r2, #4
 8000f4e:	4935      	ldr	r1, [pc, #212]	; (8001024 <iniciaInstruccion+0x25c>)
 8000f50:	4618      	mov	r0, r3
 8000f52:	f005 fa62 	bl	800641a <HAL_UART_Transmit_IT>
		break;
 8000f56:	e05c      	b.n	8001012 <iniciaInstruccion+0x24a>
		case RETROCEDE:
//			retroceso_cant += (uint16_t) (rx[2] + (rx[1] << 8));
			cmdEsperado = NO_CMD;
 8000f58:	4b31      	ldr	r3, [pc, #196]	; (8001020 <iniciaInstruccion+0x258>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	701a      	strb	r2, [r3, #0]
			tx[0] = OK_;
 8000f5e:	4b31      	ldr	r3, [pc, #196]	; (8001024 <iniciaInstruccion+0x25c>)
 8000f60:	2202      	movs	r2, #2
 8000f62:	701a      	strb	r2, [r3, #0]
			tx[3] = '\0';
 8000f64:	4b2f      	ldr	r3, [pc, #188]	; (8001024 <iniciaInstruccion+0x25c>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	70da      	strb	r2, [r3, #3]
			HAL_UART_Transmit_IT(uart_handler, tx, 4);
 8000f6a:	4b2f      	ldr	r3, [pc, #188]	; (8001028 <iniciaInstruccion+0x260>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	2204      	movs	r2, #4
 8000f70:	492c      	ldr	r1, [pc, #176]	; (8001024 <iniciaInstruccion+0x25c>)
 8000f72:	4618      	mov	r0, r3
 8000f74:	f005 fa51 	bl	800641a <HAL_UART_Transmit_IT>
		break;
 8000f78:	e04b      	b.n	8001012 <iniciaInstruccion+0x24a>
		case GIRO_IZQ:
//			giroIzq_cant += (uint16_t) (rx[2] + (rx[1] << 8));
			cmdEsperado = NO_CMD;
 8000f7a:	4b29      	ldr	r3, [pc, #164]	; (8001020 <iniciaInstruccion+0x258>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	701a      	strb	r2, [r3, #0]
			tx[0] = OK_;
 8000f80:	4b28      	ldr	r3, [pc, #160]	; (8001024 <iniciaInstruccion+0x25c>)
 8000f82:	2202      	movs	r2, #2
 8000f84:	701a      	strb	r2, [r3, #0]
			tx[3] = '\0';
 8000f86:	4b27      	ldr	r3, [pc, #156]	; (8001024 <iniciaInstruccion+0x25c>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	70da      	strb	r2, [r3, #3]
			HAL_UART_Transmit_IT(uart_handler, tx, 4);
 8000f8c:	4b26      	ldr	r3, [pc, #152]	; (8001028 <iniciaInstruccion+0x260>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2204      	movs	r2, #4
 8000f92:	4924      	ldr	r1, [pc, #144]	; (8001024 <iniciaInstruccion+0x25c>)
 8000f94:	4618      	mov	r0, r3
 8000f96:	f005 fa40 	bl	800641a <HAL_UART_Transmit_IT>
		break;
 8000f9a:	e03a      	b.n	8001012 <iniciaInstruccion+0x24a>
		case GIRO_DER:
//			giroDer_cant += (uint16_t) (rx[2] + (rx[1] << 8));
			cmdEsperado = NO_CMD;
 8000f9c:	4b20      	ldr	r3, [pc, #128]	; (8001020 <iniciaInstruccion+0x258>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	701a      	strb	r2, [r3, #0]
			tx[0] = OK_;
 8000fa2:	4b20      	ldr	r3, [pc, #128]	; (8001024 <iniciaInstruccion+0x25c>)
 8000fa4:	2202      	movs	r2, #2
 8000fa6:	701a      	strb	r2, [r3, #0]
			tx[3] = '\0';
 8000fa8:	4b1e      	ldr	r3, [pc, #120]	; (8001024 <iniciaInstruccion+0x25c>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	70da      	strb	r2, [r3, #3]
			HAL_UART_Transmit_IT(uart_handler, tx, 4);
 8000fae:	4b1e      	ldr	r3, [pc, #120]	; (8001028 <iniciaInstruccion+0x260>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	2204      	movs	r2, #4
 8000fb4:	491b      	ldr	r1, [pc, #108]	; (8001024 <iniciaInstruccion+0x25c>)
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f005 fa2f 	bl	800641a <HAL_UART_Transmit_IT>
		break;
 8000fbc:	e029      	b.n	8001012 <iniciaInstruccion+0x24a>
		case VEL_AVANCE:
			cmdEsperado = NO_CMD;
 8000fbe:	4b18      	ldr	r3, [pc, #96]	; (8001020 <iniciaInstruccion+0x258>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	701a      	strb	r2, [r3, #0]

//			mpu9265_Read_Accel(&mpu9265);

			tx[0] = VEL_AVANCE;
 8000fc4:	4b17      	ldr	r3, [pc, #92]	; (8001024 <iniciaInstruccion+0x25c>)
 8000fc6:	2214      	movs	r2, #20
 8000fc8:	701a      	strb	r2, [r3, #0]
//			tx[1] = (uint8_t)(mpu9265.Accel_X_RAW >> 8);
//			tx[2] = (uint8_t)(mpu9265.Accel_X_RAW & 0xFF);
			tx[3] = '\0';
 8000fca:	4b16      	ldr	r3, [pc, #88]	; (8001024 <iniciaInstruccion+0x25c>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	70da      	strb	r2, [r3, #3]
			HAL_UART_Transmit_IT(uart_handler, tx, 4);
 8000fd0:	4b15      	ldr	r3, [pc, #84]	; (8001028 <iniciaInstruccion+0x260>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2204      	movs	r2, #4
 8000fd6:	4913      	ldr	r1, [pc, #76]	; (8001024 <iniciaInstruccion+0x25c>)
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f005 fa1e 	bl	800641a <HAL_UART_Transmit_IT>
		break;
 8000fde:	e018      	b.n	8001012 <iniciaInstruccion+0x24a>
		case COORD_ANG:
			cmdEsperado = NO_CMD;
 8000fe0:	4b0f      	ldr	r3, [pc, #60]	; (8001020 <iniciaInstruccion+0x258>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	701a      	strb	r2, [r3, #0]
			txUart[0] = COORD_ANG;
			txUart[1] = (uint8_t)(direccion_i16 >> 8);
			txUart[2] = (uint8_t)(direccion_i16 & 0xFF);
			txUart[3] = '\0';
			*/
			HAL_UART_Transmit_IT(uart_handler, tx, 4);
 8000fe6:	4b10      	ldr	r3, [pc, #64]	; (8001028 <iniciaInstruccion+0x260>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	2204      	movs	r2, #4
 8000fec:	490d      	ldr	r1, [pc, #52]	; (8001024 <iniciaInstruccion+0x25c>)
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f005 fa13 	bl	800641a <HAL_UART_Transmit_IT>
		break;
 8000ff4:	e00d      	b.n	8001012 <iniciaInstruccion+0x24a>
		default:
			tx[0] = CMD_ERROR;
 8000ff6:	4b0b      	ldr	r3, [pc, #44]	; (8001024 <iniciaInstruccion+0x25c>)
 8000ff8:	2204      	movs	r2, #4
 8000ffa:	701a      	strb	r2, [r3, #0]
			tx[3] = '\0';
 8000ffc:	4b09      	ldr	r3, [pc, #36]	; (8001024 <iniciaInstruccion+0x25c>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	70da      	strb	r2, [r3, #3]
			HAL_UART_Transmit_IT(uart_handler, tx, 4);
 8001002:	4b09      	ldr	r3, [pc, #36]	; (8001028 <iniciaInstruccion+0x260>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	2204      	movs	r2, #4
 8001008:	4906      	ldr	r1, [pc, #24]	; (8001024 <iniciaInstruccion+0x25c>)
 800100a:	4618      	mov	r0, r3
 800100c:	f005 fa05 	bl	800641a <HAL_UART_Transmit_IT>
		break;
 8001010:	bf00      	nop
	} //end switch (cmdEsperado)

} //end iniciaInstruccion ()
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	20000034 	.word	0x20000034
 800101c:	200000b0 	.word	0x200000b0
 8001020:	20000038 	.word	0x20000038
 8001024:	20000030 	.word	0x20000030
 8001028:	2000002c 	.word	0x2000002c
 800102c:	20000000 	.word	0x20000000
 8001030:	200000d6 	.word	0x200000d6
 8001034:	20000039 	.word	0x20000039
 8001038:	200000ba 	.word	0x200000ba
 800103c:	2000003a 	.word	0x2000003a

08001040 <continuaInstruccion>:



void continuaInstruccion(void){
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0

	if (cmdEsperado != p_rx[0]){
 8001044:	4b5f      	ldr	r3, [pc, #380]	; (80011c4 <continuaInstruccion+0x184>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	781a      	ldrb	r2, [r3, #0]
 800104a:	4b5f      	ldr	r3, [pc, #380]	; (80011c8 <continuaInstruccion+0x188>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	429a      	cmp	r2, r3
 8001050:	d016      	beq.n	8001080 <continuaInstruccion+0x40>
		cmdActual = NO_CMD;
 8001052:	4b5e      	ldr	r3, [pc, #376]	; (80011cc <continuaInstruccion+0x18c>)
 8001054:	2200      	movs	r2, #0
 8001056:	701a      	strb	r2, [r3, #0]
		cmdEsperado = NO_CMD;
 8001058:	4b5b      	ldr	r3, [pc, #364]	; (80011c8 <continuaInstruccion+0x188>)
 800105a:	2200      	movs	r2, #0
 800105c:	701a      	strb	r2, [r3, #0]
		cmdSecuencia = 0;
 800105e:	4b5c      	ldr	r3, [pc, #368]	; (80011d0 <continuaInstruccion+0x190>)
 8001060:	2200      	movs	r2, #0
 8001062:	701a      	strb	r2, [r3, #0]
		tx[0] = CMD_ERROR;
 8001064:	4b5b      	ldr	r3, [pc, #364]	; (80011d4 <continuaInstruccion+0x194>)
 8001066:	2204      	movs	r2, #4
 8001068:	701a      	strb	r2, [r3, #0]
		tx[3] = '\0';
 800106a:	4b5a      	ldr	r3, [pc, #360]	; (80011d4 <continuaInstruccion+0x194>)
 800106c:	2200      	movs	r2, #0
 800106e:	70da      	strb	r2, [r3, #3]
		HAL_UART_Transmit_IT(uart_handler, tx, 4);
 8001070:	4b59      	ldr	r3, [pc, #356]	; (80011d8 <continuaInstruccion+0x198>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2204      	movs	r2, #4
 8001076:	4957      	ldr	r1, [pc, #348]	; (80011d4 <continuaInstruccion+0x194>)
 8001078:	4618      	mov	r0, r3
 800107a:	f005 f9ce 	bl	800641a <HAL_UART_Transmit_IT>
		return;
 800107e:	e0a0      	b.n	80011c2 <continuaInstruccion+0x182>
	}

	switch (cmdActual) {
 8001080:	4b52      	ldr	r3, [pc, #328]	; (80011cc <continuaInstruccion+0x18c>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	2b0a      	cmp	r3, #10
 8001086:	d002      	beq.n	800108e <continuaInstruccion+0x4e>
 8001088:	2b0c      	cmp	r3, #12
 800108a:	d04a      	beq.n	8001122 <continuaInstruccion+0xe2>
				default:
				break;
			} //end switch cmdEsperado
		break;
		default:
		break;
 800108c:	e099      	b.n	80011c2 <continuaInstruccion+0x182>
			switch (cmdSecuencia){
 800108e:	4b50      	ldr	r3, [pc, #320]	; (80011d0 <continuaInstruccion+0x190>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	2b02      	cmp	r3, #2
 8001094:	d007      	beq.n	80010a6 <continuaInstruccion+0x66>
 8001096:	2b02      	cmp	r3, #2
 8001098:	f300 8092 	bgt.w	80011c0 <continuaInstruccion+0x180>
 800109c:	2b00      	cmp	r3, #0
 800109e:	d038      	beq.n	8001112 <continuaInstruccion+0xd2>
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d01b      	beq.n	80010dc <continuaInstruccion+0x9c>
		break;
 80010a4:	e08c      	b.n	80011c0 <continuaInstruccion+0x180>
					tx[0] = COORD_Y;
 80010a6:	4b4b      	ldr	r3, [pc, #300]	; (80011d4 <continuaInstruccion+0x194>)
 80010a8:	2207      	movs	r2, #7
 80010aa:	701a      	strb	r2, [r3, #0]
					tx[1] = 0x0;
 80010ac:	4b49      	ldr	r3, [pc, #292]	; (80011d4 <continuaInstruccion+0x194>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	705a      	strb	r2, [r3, #1]
					tx[2] = pos_y;
 80010b2:	4b4a      	ldr	r3, [pc, #296]	; (80011dc <continuaInstruccion+0x19c>)
 80010b4:	781a      	ldrb	r2, [r3, #0]
 80010b6:	4b47      	ldr	r3, [pc, #284]	; (80011d4 <continuaInstruccion+0x194>)
 80010b8:	709a      	strb	r2, [r3, #2]
					tx[3] = '\0';
 80010ba:	4b46      	ldr	r3, [pc, #280]	; (80011d4 <continuaInstruccion+0x194>)
 80010bc:	2200      	movs	r2, #0
 80010be:	70da      	strb	r2, [r3, #3]
					cmdSecuencia--;
 80010c0:	4b43      	ldr	r3, [pc, #268]	; (80011d0 <continuaInstruccion+0x190>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	3b01      	subs	r3, #1
 80010c6:	b2da      	uxtb	r2, r3
 80010c8:	4b41      	ldr	r3, [pc, #260]	; (80011d0 <continuaInstruccion+0x190>)
 80010ca:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_IT(uart_handler, tx, 4);
 80010cc:	4b42      	ldr	r3, [pc, #264]	; (80011d8 <continuaInstruccion+0x198>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2204      	movs	r2, #4
 80010d2:	4940      	ldr	r1, [pc, #256]	; (80011d4 <continuaInstruccion+0x194>)
 80010d4:	4618      	mov	r0, r3
 80010d6:	f005 f9a0 	bl	800641a <HAL_UART_Transmit_IT>
				break;
 80010da:	e021      	b.n	8001120 <continuaInstruccion+0xe0>
					tx[0] = COORD_ANG;
 80010dc:	4b3d      	ldr	r3, [pc, #244]	; (80011d4 <continuaInstruccion+0x194>)
 80010de:	2208      	movs	r2, #8
 80010e0:	701a      	strb	r2, [r3, #0]
					tx[1] = 0x0;
 80010e2:	4b3c      	ldr	r3, [pc, #240]	; (80011d4 <continuaInstruccion+0x194>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	705a      	strb	r2, [r3, #1]
					tx[2] = pos_ang;
 80010e8:	4b3d      	ldr	r3, [pc, #244]	; (80011e0 <continuaInstruccion+0x1a0>)
 80010ea:	781a      	ldrb	r2, [r3, #0]
 80010ec:	4b39      	ldr	r3, [pc, #228]	; (80011d4 <continuaInstruccion+0x194>)
 80010ee:	709a      	strb	r2, [r3, #2]
					tx[3] = '\0';
 80010f0:	4b38      	ldr	r3, [pc, #224]	; (80011d4 <continuaInstruccion+0x194>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	70da      	strb	r2, [r3, #3]
					cmdSecuencia--;
 80010f6:	4b36      	ldr	r3, [pc, #216]	; (80011d0 <continuaInstruccion+0x190>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	3b01      	subs	r3, #1
 80010fc:	b2da      	uxtb	r2, r3
 80010fe:	4b34      	ldr	r3, [pc, #208]	; (80011d0 <continuaInstruccion+0x190>)
 8001100:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_IT(uart_handler, tx, 4);
 8001102:	4b35      	ldr	r3, [pc, #212]	; (80011d8 <continuaInstruccion+0x198>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	2204      	movs	r2, #4
 8001108:	4932      	ldr	r1, [pc, #200]	; (80011d4 <continuaInstruccion+0x194>)
 800110a:	4618      	mov	r0, r3
 800110c:	f005 f985 	bl	800641a <HAL_UART_Transmit_IT>
				break;
 8001110:	e006      	b.n	8001120 <continuaInstruccion+0xe0>
					cmdActual = NO_CMD;
 8001112:	4b2e      	ldr	r3, [pc, #184]	; (80011cc <continuaInstruccion+0x18c>)
 8001114:	2200      	movs	r2, #0
 8001116:	701a      	strb	r2, [r3, #0]
					cmdEsperado = NO_CMD;
 8001118:	4b2b      	ldr	r3, [pc, #172]	; (80011c8 <continuaInstruccion+0x188>)
 800111a:	2200      	movs	r2, #0
 800111c:	701a      	strb	r2, [r3, #0]
				break;
 800111e:	bf00      	nop
		break;
 8001120:	e04e      	b.n	80011c0 <continuaInstruccion+0x180>
			switch (cmdEsperado){
 8001122:	4b29      	ldr	r3, [pc, #164]	; (80011c8 <continuaInstruccion+0x188>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	2b08      	cmp	r3, #8
 8001128:	d032      	beq.n	8001190 <continuaInstruccion+0x150>
 800112a:	2b08      	cmp	r3, #8
 800112c:	dc46      	bgt.n	80011bc <continuaInstruccion+0x17c>
 800112e:	2b06      	cmp	r3, #6
 8001130:	d002      	beq.n	8001138 <continuaInstruccion+0xf8>
 8001132:	2b07      	cmp	r3, #7
 8001134:	d016      	beq.n	8001164 <continuaInstruccion+0x124>
				break;
 8001136:	e041      	b.n	80011bc <continuaInstruccion+0x17c>
					pos_x = p_rx[1];//recibi la coordenada X
 8001138:	4b22      	ldr	r3, [pc, #136]	; (80011c4 <continuaInstruccion+0x184>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	785a      	ldrb	r2, [r3, #1]
 800113e:	4b29      	ldr	r3, [pc, #164]	; (80011e4 <continuaInstruccion+0x1a4>)
 8001140:	701a      	strb	r2, [r3, #0]
					cmdEsperado = COORD_Y;
 8001142:	4b21      	ldr	r3, [pc, #132]	; (80011c8 <continuaInstruccion+0x188>)
 8001144:	2207      	movs	r2, #7
 8001146:	701a      	strb	r2, [r3, #0]
					tx[0] = OK_;
 8001148:	4b22      	ldr	r3, [pc, #136]	; (80011d4 <continuaInstruccion+0x194>)
 800114a:	2202      	movs	r2, #2
 800114c:	701a      	strb	r2, [r3, #0]
					tx[3] = '\0';
 800114e:	4b21      	ldr	r3, [pc, #132]	; (80011d4 <continuaInstruccion+0x194>)
 8001150:	2200      	movs	r2, #0
 8001152:	70da      	strb	r2, [r3, #3]
					HAL_UART_Transmit_IT(uart_handler, tx, 4);
 8001154:	4b20      	ldr	r3, [pc, #128]	; (80011d8 <continuaInstruccion+0x198>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2204      	movs	r2, #4
 800115a:	491e      	ldr	r1, [pc, #120]	; (80011d4 <continuaInstruccion+0x194>)
 800115c:	4618      	mov	r0, r3
 800115e:	f005 f95c 	bl	800641a <HAL_UART_Transmit_IT>
				break;
 8001162:	e02c      	b.n	80011be <continuaInstruccion+0x17e>
					pos_y = p_rx[1];//recibi la coordenada Y
 8001164:	4b17      	ldr	r3, [pc, #92]	; (80011c4 <continuaInstruccion+0x184>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	785a      	ldrb	r2, [r3, #1]
 800116a:	4b1c      	ldr	r3, [pc, #112]	; (80011dc <continuaInstruccion+0x19c>)
 800116c:	701a      	strb	r2, [r3, #0]
					cmdEsperado = COORD_ANG;
 800116e:	4b16      	ldr	r3, [pc, #88]	; (80011c8 <continuaInstruccion+0x188>)
 8001170:	2208      	movs	r2, #8
 8001172:	701a      	strb	r2, [r3, #0]
					tx[0] = OK_;
 8001174:	4b17      	ldr	r3, [pc, #92]	; (80011d4 <continuaInstruccion+0x194>)
 8001176:	2202      	movs	r2, #2
 8001178:	701a      	strb	r2, [r3, #0]
					tx[3] = '\0';
 800117a:	4b16      	ldr	r3, [pc, #88]	; (80011d4 <continuaInstruccion+0x194>)
 800117c:	2200      	movs	r2, #0
 800117e:	70da      	strb	r2, [r3, #3]
					HAL_UART_Transmit_IT(uart_handler, tx, 4);
 8001180:	4b15      	ldr	r3, [pc, #84]	; (80011d8 <continuaInstruccion+0x198>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2204      	movs	r2, #4
 8001186:	4913      	ldr	r1, [pc, #76]	; (80011d4 <continuaInstruccion+0x194>)
 8001188:	4618      	mov	r0, r3
 800118a:	f005 f946 	bl	800641a <HAL_UART_Transmit_IT>
				break;
 800118e:	e016      	b.n	80011be <continuaInstruccion+0x17e>
					pos_ang = p_rx[1];//recibi el angulo
 8001190:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <continuaInstruccion+0x184>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	785a      	ldrb	r2, [r3, #1]
 8001196:	4b12      	ldr	r3, [pc, #72]	; (80011e0 <continuaInstruccion+0x1a0>)
 8001198:	701a      	strb	r2, [r3, #0]
					cmdEsperado = NO_CMD;
 800119a:	4b0b      	ldr	r3, [pc, #44]	; (80011c8 <continuaInstruccion+0x188>)
 800119c:	2200      	movs	r2, #0
 800119e:	701a      	strb	r2, [r3, #0]
					tx[0] = OK_;
 80011a0:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <continuaInstruccion+0x194>)
 80011a2:	2202      	movs	r2, #2
 80011a4:	701a      	strb	r2, [r3, #0]
					tx[3] = '\0';
 80011a6:	4b0b      	ldr	r3, [pc, #44]	; (80011d4 <continuaInstruccion+0x194>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	70da      	strb	r2, [r3, #3]
					HAL_UART_Transmit_IT(uart_handler, tx, 4);
 80011ac:	4b0a      	ldr	r3, [pc, #40]	; (80011d8 <continuaInstruccion+0x198>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2204      	movs	r2, #4
 80011b2:	4908      	ldr	r1, [pc, #32]	; (80011d4 <continuaInstruccion+0x194>)
 80011b4:	4618      	mov	r0, r3
 80011b6:	f005 f930 	bl	800641a <HAL_UART_Transmit_IT>
				break;
 80011ba:	e000      	b.n	80011be <continuaInstruccion+0x17e>
				break;
 80011bc:	bf00      	nop
		break;
 80011be:	e000      	b.n	80011c2 <continuaInstruccion+0x182>
		break;
 80011c0:	bf00      	nop
	} //end switch cmdActual


} //end continuaInstruccion()
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20000034 	.word	0x20000034
 80011c8:	20000038 	.word	0x20000038
 80011cc:	20000039 	.word	0x20000039
 80011d0:	2000003a 	.word	0x2000003a
 80011d4:	20000030 	.word	0x20000030
 80011d8:	2000002c 	.word	0x2000002c
 80011dc:	200000bb 	.word	0x200000bb
 80011e0:	200000bc 	.word	0x200000bc
 80011e4:	200000ba 	.word	0x200000ba

080011e8 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 80011ee:	463b      	mov	r3, r7
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80011f6:	4b14      	ldr	r3, [pc, #80]	; (8001248 <MX_DAC_Init+0x60>)
 80011f8:	4a14      	ldr	r2, [pc, #80]	; (800124c <MX_DAC_Init+0x64>)
 80011fa:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80011fc:	4812      	ldr	r0, [pc, #72]	; (8001248 <MX_DAC_Init+0x60>)
 80011fe:	f001 fef8 	bl	8002ff2 <HAL_DAC_Init>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001208:	f000 ff64 	bl	80020d4 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800120c:	2300      	movs	r3, #0
 800120e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001210:	2300      	movs	r3, #0
 8001212:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001214:	463b      	mov	r3, r7
 8001216:	2200      	movs	r2, #0
 8001218:	4619      	mov	r1, r3
 800121a:	480b      	ldr	r0, [pc, #44]	; (8001248 <MX_DAC_Init+0x60>)
 800121c:	f001 ff0b 	bl	8003036 <HAL_DAC_ConfigChannel>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001226:	f000 ff55 	bl	80020d4 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800122a:	463b      	mov	r3, r7
 800122c:	2210      	movs	r2, #16
 800122e:	4619      	mov	r1, r3
 8001230:	4805      	ldr	r0, [pc, #20]	; (8001248 <MX_DAC_Init+0x60>)
 8001232:	f001 ff00 	bl	8003036 <HAL_DAC_ConfigChannel>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 800123c:	f000 ff4a 	bl	80020d4 <Error_Handler>
  }

}
 8001240:	bf00      	nop
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	2000003c 	.word	0x2000003c
 800124c:	40007400 	.word	0x40007400

08001250 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b08a      	sub	sp, #40	; 0x28
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001258:	f107 0314 	add.w	r3, r7, #20
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
 8001266:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a17      	ldr	r2, [pc, #92]	; (80012cc <HAL_DAC_MspInit+0x7c>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d127      	bne.n	80012c2 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	613b      	str	r3, [r7, #16]
 8001276:	4b16      	ldr	r3, [pc, #88]	; (80012d0 <HAL_DAC_MspInit+0x80>)
 8001278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127a:	4a15      	ldr	r2, [pc, #84]	; (80012d0 <HAL_DAC_MspInit+0x80>)
 800127c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001280:	6413      	str	r3, [r2, #64]	; 0x40
 8001282:	4b13      	ldr	r3, [pc, #76]	; (80012d0 <HAL_DAC_MspInit+0x80>)
 8001284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001286:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800128a:	613b      	str	r3, [r7, #16]
 800128c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	4b0f      	ldr	r3, [pc, #60]	; (80012d0 <HAL_DAC_MspInit+0x80>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	4a0e      	ldr	r2, [pc, #56]	; (80012d0 <HAL_DAC_MspInit+0x80>)
 8001298:	f043 0301 	orr.w	r3, r3, #1
 800129c:	6313      	str	r3, [r2, #48]	; 0x30
 800129e:	4b0c      	ldr	r3, [pc, #48]	; (80012d0 <HAL_DAC_MspInit+0x80>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80012aa:	2330      	movs	r3, #48	; 0x30
 80012ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ae:	2303      	movs	r3, #3
 80012b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b6:	f107 0314 	add.w	r3, r7, #20
 80012ba:	4619      	mov	r1, r3
 80012bc:	4805      	ldr	r0, [pc, #20]	; (80012d4 <HAL_DAC_MspInit+0x84>)
 80012be:	f001 ff29 	bl	8003114 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 80012c2:	bf00      	nop
 80012c4:	3728      	adds	r7, #40	; 0x28
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	40007400 	.word	0x40007400
 80012d0:	40023800 	.word	0x40023800
 80012d4:	40020000 	.word	0x40020000

080012d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08c      	sub	sp, #48	; 0x30
 80012dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012de:	f107 031c 	add.w	r3, r7, #28
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	605a      	str	r2, [r3, #4]
 80012e8:	609a      	str	r2, [r3, #8]
 80012ea:	60da      	str	r2, [r3, #12]
 80012ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	61bb      	str	r3, [r7, #24]
 80012f2:	4b45      	ldr	r3, [pc, #276]	; (8001408 <MX_GPIO_Init+0x130>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	4a44      	ldr	r2, [pc, #272]	; (8001408 <MX_GPIO_Init+0x130>)
 80012f8:	f043 0320 	orr.w	r3, r3, #32
 80012fc:	6313      	str	r3, [r2, #48]	; 0x30
 80012fe:	4b42      	ldr	r3, [pc, #264]	; (8001408 <MX_GPIO_Init+0x130>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	f003 0320 	and.w	r3, r3, #32
 8001306:	61bb      	str	r3, [r7, #24]
 8001308:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	617b      	str	r3, [r7, #20]
 800130e:	4b3e      	ldr	r3, [pc, #248]	; (8001408 <MX_GPIO_Init+0x130>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	4a3d      	ldr	r2, [pc, #244]	; (8001408 <MX_GPIO_Init+0x130>)
 8001314:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001318:	6313      	str	r3, [r2, #48]	; 0x30
 800131a:	4b3b      	ldr	r3, [pc, #236]	; (8001408 <MX_GPIO_Init+0x130>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001322:	617b      	str	r3, [r7, #20]
 8001324:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	613b      	str	r3, [r7, #16]
 800132a:	4b37      	ldr	r3, [pc, #220]	; (8001408 <MX_GPIO_Init+0x130>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	4a36      	ldr	r2, [pc, #216]	; (8001408 <MX_GPIO_Init+0x130>)
 8001330:	f043 0301 	orr.w	r3, r3, #1
 8001334:	6313      	str	r3, [r2, #48]	; 0x30
 8001336:	4b34      	ldr	r3, [pc, #208]	; (8001408 <MX_GPIO_Init+0x130>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	613b      	str	r3, [r7, #16]
 8001340:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	4b30      	ldr	r3, [pc, #192]	; (8001408 <MX_GPIO_Init+0x130>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	4a2f      	ldr	r2, [pc, #188]	; (8001408 <MX_GPIO_Init+0x130>)
 800134c:	f043 0308 	orr.w	r3, r3, #8
 8001350:	6313      	str	r3, [r2, #48]	; 0x30
 8001352:	4b2d      	ldr	r3, [pc, #180]	; (8001408 <MX_GPIO_Init+0x130>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	f003 0308 	and.w	r3, r3, #8
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	60bb      	str	r3, [r7, #8]
 8001362:	4b29      	ldr	r3, [pc, #164]	; (8001408 <MX_GPIO_Init+0x130>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	4a28      	ldr	r2, [pc, #160]	; (8001408 <MX_GPIO_Init+0x130>)
 8001368:	f043 0304 	orr.w	r3, r3, #4
 800136c:	6313      	str	r3, [r2, #48]	; 0x30
 800136e:	4b26      	ldr	r3, [pc, #152]	; (8001408 <MX_GPIO_Init+0x130>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	f003 0304 	and.w	r3, r3, #4
 8001376:	60bb      	str	r3, [r7, #8]
 8001378:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	607b      	str	r3, [r7, #4]
 800137e:	4b22      	ldr	r3, [pc, #136]	; (8001408 <MX_GPIO_Init+0x130>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	4a21      	ldr	r2, [pc, #132]	; (8001408 <MX_GPIO_Init+0x130>)
 8001384:	f043 0302 	orr.w	r3, r3, #2
 8001388:	6313      	str	r3, [r2, #48]	; 0x30
 800138a:	4b1f      	ldr	r3, [pc, #124]	; (8001408 <MX_GPIO_Init+0x130>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	f003 0302 	and.w	r3, r3, #2
 8001392:	607b      	str	r3, [r7, #4]
 8001394:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_in4_Pin|OUT_in3_Pin|OUT_in2_Pin, GPIO_PIN_RESET);
 8001396:	2200      	movs	r2, #0
 8001398:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 800139c:	481b      	ldr	r0, [pc, #108]	; (800140c <MX_GPIO_Init+0x134>)
 800139e:	f002 f87d 	bl	800349c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, GPIO_PIN_RESET);
 80013a2:	2200      	movs	r2, #0
 80013a4:	2101      	movs	r1, #1
 80013a6:	481a      	ldr	r0, [pc, #104]	; (8001410 <MX_GPIO_Init+0x138>)
 80013a8:	f002 f878 	bl	800349c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = OUT_in4_Pin|OUT_in3_Pin|OUT_in2_Pin;
 80013ac:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80013b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b2:	2301      	movs	r3, #1
 80013b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ba:	2300      	movs	r3, #0
 80013bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013be:	f107 031c 	add.w	r3, r7, #28
 80013c2:	4619      	mov	r1, r3
 80013c4:	4811      	ldr	r0, [pc, #68]	; (800140c <MX_GPIO_Init+0x134>)
 80013c6:	f001 fea5 	bl	8003114 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OUT_in1_Pin;
 80013ca:	2301      	movs	r3, #1
 80013cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ce:	2301      	movs	r3, #1
 80013d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d6:	2300      	movs	r3, #0
 80013d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OUT_in1_GPIO_Port, &GPIO_InitStruct);
 80013da:	f107 031c 	add.w	r3, r7, #28
 80013de:	4619      	mov	r1, r3
 80013e0:	480b      	ldr	r0, [pc, #44]	; (8001410 <MX_GPIO_Init+0x138>)
 80013e2:	f001 fe97 	bl	8003114 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = IN_sensorL_Pin|IN_sensorR_Pin;
 80013e6:	230a      	movs	r3, #10
 80013e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ea:	2300      	movs	r3, #0
 80013ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013ee:	2301      	movs	r3, #1
 80013f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013f2:	f107 031c 	add.w	r3, r7, #28
 80013f6:	4619      	mov	r1, r3
 80013f8:	4805      	ldr	r0, [pc, #20]	; (8001410 <MX_GPIO_Init+0x138>)
 80013fa:	f001 fe8b 	bl	8003114 <HAL_GPIO_Init>

}
 80013fe:	bf00      	nop
 8001400:	3730      	adds	r7, #48	; 0x30
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40023800 	.word	0x40023800
 800140c:	40020800 	.word	0x40020800
 8001410:	40020c00 	.word	0x40020c00

08001414 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001418:	4b1b      	ldr	r3, [pc, #108]	; (8001488 <MX_I2C1_Init+0x74>)
 800141a:	4a1c      	ldr	r2, [pc, #112]	; (800148c <MX_I2C1_Init+0x78>)
 800141c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800141e:	4b1a      	ldr	r3, [pc, #104]	; (8001488 <MX_I2C1_Init+0x74>)
 8001420:	4a1b      	ldr	r2, [pc, #108]	; (8001490 <MX_I2C1_Init+0x7c>)
 8001422:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001424:	4b18      	ldr	r3, [pc, #96]	; (8001488 <MX_I2C1_Init+0x74>)
 8001426:	2200      	movs	r2, #0
 8001428:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800142a:	4b17      	ldr	r3, [pc, #92]	; (8001488 <MX_I2C1_Init+0x74>)
 800142c:	2200      	movs	r2, #0
 800142e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001430:	4b15      	ldr	r3, [pc, #84]	; (8001488 <MX_I2C1_Init+0x74>)
 8001432:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001436:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001438:	4b13      	ldr	r3, [pc, #76]	; (8001488 <MX_I2C1_Init+0x74>)
 800143a:	2200      	movs	r2, #0
 800143c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800143e:	4b12      	ldr	r3, [pc, #72]	; (8001488 <MX_I2C1_Init+0x74>)
 8001440:	2200      	movs	r2, #0
 8001442:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001444:	4b10      	ldr	r3, [pc, #64]	; (8001488 <MX_I2C1_Init+0x74>)
 8001446:	2200      	movs	r2, #0
 8001448:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800144a:	4b0f      	ldr	r3, [pc, #60]	; (8001488 <MX_I2C1_Init+0x74>)
 800144c:	2200      	movs	r2, #0
 800144e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001450:	480d      	ldr	r0, [pc, #52]	; (8001488 <MX_I2C1_Init+0x74>)
 8001452:	f002 f83d 	bl	80034d0 <HAL_I2C_Init>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800145c:	f000 fe3a 	bl	80020d4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001460:	2100      	movs	r1, #0
 8001462:	4809      	ldr	r0, [pc, #36]	; (8001488 <MX_I2C1_Init+0x74>)
 8001464:	f002 fff3 	bl	800444e <HAL_I2CEx_ConfigAnalogFilter>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800146e:	f000 fe31 	bl	80020d4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001472:	2100      	movs	r1, #0
 8001474:	4804      	ldr	r0, [pc, #16]	; (8001488 <MX_I2C1_Init+0x74>)
 8001476:	f003 f826 	bl	80044c6 <HAL_I2CEx_ConfigDigitalFilter>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001480:	f000 fe28 	bl	80020d4 <Error_Handler>
  }

}
 8001484:	bf00      	nop
 8001486:	bd80      	pop	{r7, pc}
 8001488:	20000050 	.word	0x20000050
 800148c:	40005400 	.word	0x40005400
 8001490:	00061a80 	.word	0x00061a80

08001494 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b08a      	sub	sp, #40	; 0x28
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149c:	f107 0314 	add.w	r3, r7, #20
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
 80014a8:	60da      	str	r2, [r3, #12]
 80014aa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a19      	ldr	r2, [pc, #100]	; (8001518 <HAL_I2C_MspInit+0x84>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d12b      	bne.n	800150e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	613b      	str	r3, [r7, #16]
 80014ba:	4b18      	ldr	r3, [pc, #96]	; (800151c <HAL_I2C_MspInit+0x88>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	4a17      	ldr	r2, [pc, #92]	; (800151c <HAL_I2C_MspInit+0x88>)
 80014c0:	f043 0302 	orr.w	r3, r3, #2
 80014c4:	6313      	str	r3, [r2, #48]	; 0x30
 80014c6:	4b15      	ldr	r3, [pc, #84]	; (800151c <HAL_I2C_MspInit+0x88>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	613b      	str	r3, [r7, #16]
 80014d0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014d2:	23c0      	movs	r3, #192	; 0xc0
 80014d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014d6:	2312      	movs	r3, #18
 80014d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014da:	2301      	movs	r3, #1
 80014dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014de:	2303      	movs	r3, #3
 80014e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014e2:	2304      	movs	r3, #4
 80014e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e6:	f107 0314 	add.w	r3, r7, #20
 80014ea:	4619      	mov	r1, r3
 80014ec:	480c      	ldr	r0, [pc, #48]	; (8001520 <HAL_I2C_MspInit+0x8c>)
 80014ee:	f001 fe11 	bl	8003114 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	60fb      	str	r3, [r7, #12]
 80014f6:	4b09      	ldr	r3, [pc, #36]	; (800151c <HAL_I2C_MspInit+0x88>)
 80014f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fa:	4a08      	ldr	r2, [pc, #32]	; (800151c <HAL_I2C_MspInit+0x88>)
 80014fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001500:	6413      	str	r3, [r2, #64]	; 0x40
 8001502:	4b06      	ldr	r3, [pc, #24]	; (800151c <HAL_I2C_MspInit+0x88>)
 8001504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001506:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800150e:	bf00      	nop
 8001510:	3728      	adds	r7, #40	; 0x28
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	40005400 	.word	0x40005400
 800151c:	40023800 	.word	0x40023800
 8001520:	40020400 	.word	0x40020400

08001524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001528:	f001 fbbc 	bl	8002ca4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800152c:	f000 f8d0 	bl	80016d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001530:	f7ff fed2 	bl	80012d8 <MX_GPIO_Init>
  MX_DAC_Init();
 8001534:	f7ff fe58 	bl	80011e8 <MX_DAC_Init>
  MX_TIM2_Init();
 8001538:	f000 ffb6 	bl	80024a8 <MX_TIM2_Init>
  MX_TIM3_Init();
 800153c:	f001 f806 	bl	800254c <MX_TIM3_Init>
  MX_TIM4_Init();
 8001540:	f001 f858 	bl	80025f4 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001544:	f001 f8d6 	bl	80026f4 <MX_TIM5_Init>
  MX_UART7_Init();
 8001548:	f001 fb08 	bl	8002b5c <MX_UART7_Init>
  MX_TIM7_Init();
 800154c:	f001 f97c 	bl	8002848 <MX_TIM7_Init>
  MX_I2C1_Init();
 8001550:	f7ff ff60 	bl	8001414 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim7); //desborda cada 10 ms.
 8001554:	484e      	ldr	r0, [pc, #312]	; (8001690 <main+0x16c>)
 8001556:	f003 fd22 	bl	8004f9e <HAL_TIM_Base_Start_IT>

  HAL_TIM_Base_Start(&htim2); //encoder R.
 800155a:	484e      	ldr	r0, [pc, #312]	; (8001694 <main+0x170>)
 800155c:	f003 fcfb 	bl	8004f56 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3); //encoder L.
 8001560:	484d      	ldr	r0, [pc, #308]	; (8001698 <main+0x174>)
 8001562:	f003 fcf8 	bl	8004f56 <HAL_TIM_Base_Start>

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1); //rueda izquierda.
 8001566:	2100      	movs	r1, #0
 8001568:	484c      	ldr	r0, [pc, #304]	; (800169c <main+0x178>)
 800156a:	f003 fd71 	bl	8005050 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2); //rueda derecha.
 800156e:	2104      	movs	r1, #4
 8001570:	484a      	ldr	r0, [pc, #296]	; (800169c <main+0x178>)
 8001572:	f003 fd6d 	bl	8005050 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start(&htim5); //control del SR-04.
 8001576:	484a      	ldr	r0, [pc, #296]	; (80016a0 <main+0x17c>)
 8001578:	f003 fced 	bl	8004f56 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1); //para el pulso del trigger.
 800157c:	2100      	movs	r1, #0
 800157e:	4848      	ldr	r0, [pc, #288]	; (80016a0 <main+0x17c>)
 8001580:	f003 fd66 	bl	8005050 <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_3); //para capturar el eco (flanco ascendente).
 8001584:	2108      	movs	r1, #8
 8001586:	4846      	ldr	r0, [pc, #280]	; (80016a0 <main+0x17c>)
 8001588:	f003 fdd6 	bl	8005138 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_4); //para capturar el eco (flanco descendente).
 800158c:	210c      	movs	r1, #12
 800158e:	4844      	ldr	r0, [pc, #272]	; (80016a0 <main+0x17c>)
 8001590:	f003 fdd2 	bl	8005138 <HAL_TIM_IC_Start_IT>

  mpu9265_Init(&hi2c1);
 8001594:	4843      	ldr	r0, [pc, #268]	; (80016a4 <main+0x180>)
 8001596:	f000 fda5 	bl	80020e4 <mpu9265_Init>


  HAL_UART_Receive(&huart7, rxUart, 4, 500);
 800159a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800159e:	2204      	movs	r2, #4
 80015a0:	4941      	ldr	r1, [pc, #260]	; (80016a8 <main+0x184>)
 80015a2:	4842      	ldr	r0, [pc, #264]	; (80016ac <main+0x188>)
 80015a4:	f004 fe93 	bl	80062ce <HAL_UART_Receive>

  if (rxUart[0] == HOLA){
 80015a8:	4b3f      	ldr	r3, [pc, #252]	; (80016a8 <main+0x184>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d11d      	bne.n	80015ec <main+0xc8>

	  if (!rxUart[3]){
 80015b0:	4b3d      	ldr	r3, [pc, #244]	; (80016a8 <main+0x184>)
 80015b2:	78db      	ldrb	r3, [r3, #3]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d10b      	bne.n	80015d0 <main+0xac>
		  txUart[0] = CMD_ERROR;
 80015b8:	4b3d      	ldr	r3, [pc, #244]	; (80016b0 <main+0x18c>)
 80015ba:	2204      	movs	r2, #4
 80015bc:	701a      	strb	r2, [r3, #0]
		  txUart[3] = '\0';
 80015be:	4b3c      	ldr	r3, [pc, #240]	; (80016b0 <main+0x18c>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	70da      	strb	r2, [r3, #3]
		  HAL_UART_Transmit_IT(&huart7, txUart, 4);
 80015c4:	2204      	movs	r2, #4
 80015c6:	493a      	ldr	r1, [pc, #232]	; (80016b0 <main+0x18c>)
 80015c8:	4838      	ldr	r0, [pc, #224]	; (80016ac <main+0x188>)
 80015ca:	f004 ff26 	bl	800641a <HAL_UART_Transmit_IT>
 80015ce:	e00d      	b.n	80015ec <main+0xc8>
	  } else {
		  esp01Presente = 1;
 80015d0:	4b38      	ldr	r3, [pc, #224]	; (80016b4 <main+0x190>)
 80015d2:	2201      	movs	r2, #1
 80015d4:	701a      	strb	r2, [r3, #0]
		  txUart[0] = HOLA;
 80015d6:	4b36      	ldr	r3, [pc, #216]	; (80016b0 <main+0x18c>)
 80015d8:	2201      	movs	r2, #1
 80015da:	701a      	strb	r2, [r3, #0]
		  txUart[3] = '\0';
 80015dc:	4b34      	ldr	r3, [pc, #208]	; (80016b0 <main+0x18c>)
 80015de:	2200      	movs	r2, #0
 80015e0:	70da      	strb	r2, [r3, #3]
		  HAL_UART_Transmit_IT(&huart7, txUart, 4);
 80015e2:	2204      	movs	r2, #4
 80015e4:	4932      	ldr	r1, [pc, #200]	; (80016b0 <main+0x18c>)
 80015e6:	4831      	ldr	r0, [pc, #196]	; (80016ac <main+0x188>)
 80015e8:	f004 ff17 	bl	800641a <HAL_UART_Transmit_IT>
	  }

  }

  init_controlRxTx (&huart7);
 80015ec:	482f      	ldr	r0, [pc, #188]	; (80016ac <main+0x188>)
 80015ee:	f7ff fb9d 	bl	8000d2c <init_controlRxTx>

  HAL_UART_Receive_IT(&huart7, rxUart, 4);
 80015f2:	2204      	movs	r2, #4
 80015f4:	492c      	ldr	r1, [pc, #176]	; (80016a8 <main+0x184>)
 80015f6:	482d      	ldr	r0, [pc, #180]	; (80016ac <main+0x188>)
 80015f8:	f004 ff54 	bl	80064a4 <HAL_UART_Receive_IT>

  if (!esp01Presente) {
 80015fc:	4b2d      	ldr	r3, [pc, #180]	; (80016b4 <main+0x190>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d103      	bne.n	800160c <main+0xe8>
	  modoFuncionamiento = AUTOMATICO;
 8001604:	4b2c      	ldr	r3, [pc, #176]	; (80016b8 <main+0x194>)
 8001606:	2200      	movs	r2, #0
 8001608:	701a      	strb	r2, [r3, #0]
 800160a:	e002      	b.n	8001612 <main+0xee>
  }else{
	  modoFuncionamiento = MANUAL;
 800160c:	4b2a      	ldr	r3, [pc, #168]	; (80016b8 <main+0x194>)
 800160e:	2201      	movs	r2, #1
 8001610:	701a      	strb	r2, [r3, #0]
		  }
	  }
	  last_button = read_button;
	  */

	  if (flag_cmd != 0){
 8001612:	4b2a      	ldr	r3, [pc, #168]	; (80016bc <main+0x198>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d005      	beq.n	8001626 <main+0x102>
//		  check_rxUart();
		  controlRxTxUART(rxUart);
 800161a:	4823      	ldr	r0, [pc, #140]	; (80016a8 <main+0x184>)
 800161c:	f7ff fb96 	bl	8000d4c <controlRxTxUART>
		  flag_cmd = 0;
 8001620:	4b26      	ldr	r3, [pc, #152]	; (80016bc <main+0x198>)
 8001622:	2200      	movs	r2, #0
 8001624:	701a      	strb	r2, [r3, #0]
	  }

	  SR_04();
 8001626:	f000 f91d 	bl	8001864 <SR_04>
	  sensores();
 800162a:	f000 f961 	bl	80018f0 <sensores>
	  modo_funcionamiento();
 800162e:	f000 fd3b 	bl	80020a8 <modo_funcionamiento>
		  desbordeTIM7 = 0;

		  TRIG_SR04;
	  }
*/
	  if (desbordeTIM7 != 0){
 8001632:	4b23      	ldr	r3, [pc, #140]	; (80016c0 <main+0x19c>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d0eb      	beq.n	8001612 <main+0xee>
		  periodo_Encoder += desbordeTIM7;
 800163a:	4b22      	ldr	r3, [pc, #136]	; (80016c4 <main+0x1a0>)
 800163c:	781a      	ldrb	r2, [r3, #0]
 800163e:	4b20      	ldr	r3, [pc, #128]	; (80016c0 <main+0x19c>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	4413      	add	r3, r2
 8001644:	b2da      	uxtb	r2, r3
 8001646:	4b1f      	ldr	r3, [pc, #124]	; (80016c4 <main+0x1a0>)
 8001648:	701a      	strb	r2, [r3, #0]
		  periodo_SR04 += desbordeTIM7;
 800164a:	4b1f      	ldr	r3, [pc, #124]	; (80016c8 <main+0x1a4>)
 800164c:	781a      	ldrb	r2, [r3, #0]
 800164e:	4b1c      	ldr	r3, [pc, #112]	; (80016c0 <main+0x19c>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	4413      	add	r3, r2
 8001654:	b2da      	uxtb	r2, r3
 8001656:	4b1c      	ldr	r3, [pc, #112]	; (80016c8 <main+0x1a4>)
 8001658:	701a      	strb	r2, [r3, #0]
		  desbordeTIM7 = 0;
 800165a:	4b19      	ldr	r3, [pc, #100]	; (80016c0 <main+0x19c>)
 800165c:	2200      	movs	r2, #0
 800165e:	701a      	strb	r2, [r3, #0]
		  if (periodo_Encoder > 21){ // en 10 * ms
 8001660:	4b18      	ldr	r3, [pc, #96]	; (80016c4 <main+0x1a0>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	2b15      	cmp	r3, #21
 8001666:	d905      	bls.n	8001674 <main+0x150>
			  flag_encoders = 1;
 8001668:	4b18      	ldr	r3, [pc, #96]	; (80016cc <main+0x1a8>)
 800166a:	2201      	movs	r2, #1
 800166c:	701a      	strb	r2, [r3, #0]
			  periodo_Encoder = 0;
 800166e:	4b15      	ldr	r3, [pc, #84]	; (80016c4 <main+0x1a0>)
 8001670:	2200      	movs	r2, #0
 8001672:	701a      	strb	r2, [r3, #0]
		  }
		  if (periodo_SR04 > 21){
 8001674:	4b14      	ldr	r3, [pc, #80]	; (80016c8 <main+0x1a4>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	2b15      	cmp	r3, #21
 800167a:	d9ca      	bls.n	8001612 <main+0xee>
			  TRIG_SR04;
 800167c:	4b08      	ldr	r3, [pc, #32]	; (80016a0 <main+0x17c>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f06f 020a 	mvn.w	r2, #10
 8001684:	625a      	str	r2, [r3, #36]	; 0x24
			  periodo_SR04 = 0;
 8001686:	4b10      	ldr	r3, [pc, #64]	; (80016c8 <main+0x1a4>)
 8001688:	2200      	movs	r2, #0
 800168a:	701a      	strb	r2, [r3, #0]
	  if (flag_cmd != 0){
 800168c:	e7c1      	b.n	8001612 <main+0xee>
 800168e:	bf00      	nop
 8001690:	200001f0 	.word	0x200001f0
 8001694:	200000f0 	.word	0x200000f0
 8001698:	20000130 	.word	0x20000130
 800169c:	20000170 	.word	0x20000170
 80016a0:	200001b0 	.word	0x200001b0
 80016a4:	20000050 	.word	0x20000050
 80016a8:	200000a4 	.word	0x200000a4
 80016ac:	20000230 	.word	0x20000230
 80016b0:	200000ac 	.word	0x200000ac
 80016b4:	200000b0 	.word	0x200000b0
 80016b8:	20000000 	.word	0x20000000
 80016bc:	200000a8 	.word	0x200000a8
 80016c0:	200000c1 	.word	0x200000c1
 80016c4:	200000c2 	.word	0x200000c2
 80016c8:	200000c3 	.word	0x200000c3
 80016cc:	200000d6 	.word	0x200000d6

080016d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b094      	sub	sp, #80	; 0x50
 80016d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016d6:	f107 0320 	add.w	r3, r7, #32
 80016da:	2230      	movs	r2, #48	; 0x30
 80016dc:	2100      	movs	r1, #0
 80016de:	4618      	mov	r0, r3
 80016e0:	f005 fea8 	bl	8007434 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016e4:	f107 030c 	add.w	r3, r7, #12
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	609a      	str	r2, [r3, #8]
 80016f0:	60da      	str	r2, [r3, #12]
 80016f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016f4:	2300      	movs	r3, #0
 80016f6:	60bb      	str	r3, [r7, #8]
 80016f8:	4b2c      	ldr	r3, [pc, #176]	; (80017ac <SystemClock_Config+0xdc>)
 80016fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fc:	4a2b      	ldr	r2, [pc, #172]	; (80017ac <SystemClock_Config+0xdc>)
 80016fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001702:	6413      	str	r3, [r2, #64]	; 0x40
 8001704:	4b29      	ldr	r3, [pc, #164]	; (80017ac <SystemClock_Config+0xdc>)
 8001706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800170c:	60bb      	str	r3, [r7, #8]
 800170e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001710:	2300      	movs	r3, #0
 8001712:	607b      	str	r3, [r7, #4]
 8001714:	4b26      	ldr	r3, [pc, #152]	; (80017b0 <SystemClock_Config+0xe0>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a25      	ldr	r2, [pc, #148]	; (80017b0 <SystemClock_Config+0xe0>)
 800171a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800171e:	6013      	str	r3, [r2, #0]
 8001720:	4b23      	ldr	r3, [pc, #140]	; (80017b0 <SystemClock_Config+0xe0>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001728:	607b      	str	r3, [r7, #4]
 800172a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800172c:	2309      	movs	r3, #9
 800172e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001730:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001734:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001736:	2301      	movs	r3, #1
 8001738:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800173a:	2302      	movs	r3, #2
 800173c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800173e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001742:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001744:	2304      	movs	r3, #4
 8001746:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001748:	23b4      	movs	r3, #180	; 0xb4
 800174a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800174c:	2302      	movs	r3, #2
 800174e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001750:	2304      	movs	r3, #4
 8001752:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001754:	f107 0320 	add.w	r3, r7, #32
 8001758:	4618      	mov	r0, r3
 800175a:	f002 ff43 	bl	80045e4 <HAL_RCC_OscConfig>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001764:	f000 fcb6 	bl	80020d4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001768:	f002 feec 	bl	8004544 <HAL_PWREx_EnableOverDrive>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001772:	f000 fcaf 	bl	80020d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001776:	230f      	movs	r3, #15
 8001778:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800177a:	2302      	movs	r3, #2
 800177c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800177e:	2300      	movs	r3, #0
 8001780:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001782:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001786:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001788:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800178c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800178e:	f107 030c 	add.w	r3, r7, #12
 8001792:	2105      	movs	r1, #5
 8001794:	4618      	mov	r0, r3
 8001796:	f003 f993 	bl	8004ac0 <HAL_RCC_ClockConfig>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80017a0:	f000 fc98 	bl	80020d4 <Error_Handler>
  }
}
 80017a4:	bf00      	nop
 80017a6:	3750      	adds	r7, #80	; 0x50
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	40023800 	.word	0x40023800
 80017b0:	40007000 	.word	0x40007000

080017b4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
	if (htim->Instance==TIM7){
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a07      	ldr	r2, [pc, #28]	; (80017e0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d105      	bne.n	80017d2 <HAL_TIM_PeriodElapsedCallback+0x1e>
		desbordeTIM7++;
 80017c6:	4b07      	ldr	r3, [pc, #28]	; (80017e4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	3301      	adds	r3, #1
 80017cc:	b2da      	uxtb	r2, r3
 80017ce:	4b05      	ldr	r3, [pc, #20]	; (80017e4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80017d0:	701a      	strb	r2, [r3, #0]
	}
}
 80017d2:	bf00      	nop
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	40001400 	.word	0x40001400
 80017e4:	200000c1 	.word	0x200000c1

080017e8 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3){
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	7f1b      	ldrb	r3, [r3, #28]
 80017f4:	2b04      	cmp	r3, #4
 80017f6:	d10a      	bne.n	800180e <HAL_TIM_IC_CaptureCallback+0x26>
		ic1 = htim->Instance->CCR3;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017fe:	4a0e      	ldr	r2, [pc, #56]	; (8001838 <HAL_TIM_IC_CaptureCallback+0x50>)
 8001800:	6013      	str	r3, [r2, #0]
		flancoEco++;
 8001802:	4b0e      	ldr	r3, [pc, #56]	; (800183c <HAL_TIM_IC_CaptureCallback+0x54>)
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	3301      	adds	r3, #1
 8001808:	b2da      	uxtb	r2, r3
 800180a:	4b0c      	ldr	r3, [pc, #48]	; (800183c <HAL_TIM_IC_CaptureCallback+0x54>)
 800180c:	701a      	strb	r2, [r3, #0]
	}

	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4){
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	7f1b      	ldrb	r3, [r3, #28]
 8001812:	2b08      	cmp	r3, #8
 8001814:	d10a      	bne.n	800182c <HAL_TIM_IC_CaptureCallback+0x44>
		ic2 = htim->Instance->CCR4;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181c:	4a08      	ldr	r2, [pc, #32]	; (8001840 <HAL_TIM_IC_CaptureCallback+0x58>)
 800181e:	6013      	str	r3, [r2, #0]
		flancoEco++;
 8001820:	4b06      	ldr	r3, [pc, #24]	; (800183c <HAL_TIM_IC_CaptureCallback+0x54>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	3301      	adds	r3, #1
 8001826:	b2da      	uxtb	r2, r3
 8001828:	4b04      	ldr	r3, [pc, #16]	; (800183c <HAL_TIM_IC_CaptureCallback+0x54>)
 800182a:	701a      	strb	r2, [r3, #0]
	}
}
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr
 8001838:	200000c4 	.word	0x200000c4
 800183c:	200000cc 	.word	0x200000cc
 8001840:	200000c8 	.word	0x200000c8

08001844 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
	flag_cmd = 1;
 800184c:	4b04      	ldr	r3, [pc, #16]	; (8001860 <HAL_UART_RxCpltCallback+0x1c>)
 800184e:	2201      	movs	r2, #1
 8001850:	701a      	strb	r2, [r3, #0]
}
 8001852:	bf00      	nop
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	200000a8 	.word	0x200000a8

08001864 <SR_04>:


void SR_04 (void){
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0

	switch (flancoEco){
 8001868:	4b1b      	ldr	r3, [pc, #108]	; (80018d8 <SR_04+0x74>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	2b01      	cmp	r3, #1
 800186e:	dc02      	bgt.n	8001876 <SR_04+0x12>
 8001870:	2b00      	cmp	r3, #0
 8001872:	da2c      	bge.n	80018ce <SR_04+0x6a>
 8001874:	e027      	b.n	80018c6 <SR_04+0x62>
 8001876:	2b02      	cmp	r3, #2
 8001878:	d125      	bne.n	80018c6 <SR_04+0x62>
		case 0:
		case 1:
			return;
		case 2:
			cuentaPulsos = (int32_t)(ic2 - ic1);
 800187a:	4b18      	ldr	r3, [pc, #96]	; (80018dc <SR_04+0x78>)
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	4b18      	ldr	r3, [pc, #96]	; (80018e0 <SR_04+0x7c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	461a      	mov	r2, r3
 8001886:	4b17      	ldr	r3, [pc, #92]	; (80018e4 <SR_04+0x80>)
 8001888:	601a      	str	r2, [r3, #0]
			if (cuentaPulsos < 23310){
 800188a:	4b16      	ldr	r3, [pc, #88]	; (80018e4 <SR_04+0x80>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f645 320d 	movw	r2, #23309	; 0x5b0d
 8001892:	4293      	cmp	r3, r2
 8001894:	dc0f      	bgt.n	80018b6 <SR_04+0x52>
				distanciaSR04 = cuentaPulsos * 34 / 2000;
 8001896:	4b13      	ldr	r3, [pc, #76]	; (80018e4 <SR_04+0x80>)
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	4613      	mov	r3, r2
 800189c:	011b      	lsls	r3, r3, #4
 800189e:	4413      	add	r3, r2
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	4a11      	ldr	r2, [pc, #68]	; (80018e8 <SR_04+0x84>)
 80018a4:	fb82 1203 	smull	r1, r2, r2, r3
 80018a8:	11d2      	asrs	r2, r2, #7
 80018aa:	17db      	asrs	r3, r3, #31
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	b29a      	uxth	r2, r3
 80018b0:	4b0e      	ldr	r3, [pc, #56]	; (80018ec <SR_04+0x88>)
 80018b2:	801a      	strh	r2, [r3, #0]
 80018b4:	e003      	b.n	80018be <SR_04+0x5a>
			}else{
				distanciaSR04 = 400;
 80018b6:	4b0d      	ldr	r3, [pc, #52]	; (80018ec <SR_04+0x88>)
 80018b8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80018bc:	801a      	strh	r2, [r3, #0]
			}
			flancoEco = 0;
 80018be:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <SR_04+0x74>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	701a      	strb	r2, [r3, #0]
		break;
 80018c4:	e004      	b.n	80018d0 <SR_04+0x6c>
		default:
			flancoEco = 0;
 80018c6:	4b04      	ldr	r3, [pc, #16]	; (80018d8 <SR_04+0x74>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	701a      	strb	r2, [r3, #0]
		break;
 80018cc:	e000      	b.n	80018d0 <SR_04+0x6c>
			return;
 80018ce:	bf00      	nop
	} //end switch flancoEco

} //end SR_04()
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	200000cc 	.word	0x200000cc
 80018dc:	200000c8 	.word	0x200000c8
 80018e0:	200000c4 	.word	0x200000c4
 80018e4:	200000d0 	.word	0x200000d0
 80018e8:	10624dd3 	.word	0x10624dd3
 80018ec:	200000d4 	.word	0x200000d4

080018f0 <sensores>:

void sensores (void){
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
	//sensores_dist = SI << 2 | SF << 1 | SD (logica negativa)
	SI = (HAL_GPIO_ReadPin(IN_sensorL_GPIO_Port, IN_sensorL_Pin)) ;
 80018f4:	2102      	movs	r1, #2
 80018f6:	4817      	ldr	r0, [pc, #92]	; (8001954 <sensores+0x64>)
 80018f8:	f001 fdb8 	bl	800346c <HAL_GPIO_ReadPin>
 80018fc:	4603      	mov	r3, r0
 80018fe:	461a      	mov	r2, r3
 8001900:	4b15      	ldr	r3, [pc, #84]	; (8001958 <sensores+0x68>)
 8001902:	701a      	strb	r2, [r3, #0]
	SD = HAL_GPIO_ReadPin(IN_sensorR_GPIO_Port, IN_sensorR_Pin);
 8001904:	2108      	movs	r1, #8
 8001906:	4813      	ldr	r0, [pc, #76]	; (8001954 <sensores+0x64>)
 8001908:	f001 fdb0 	bl	800346c <HAL_GPIO_ReadPin>
 800190c:	4603      	mov	r3, r0
 800190e:	461a      	mov	r2, r3
 8001910:	4b12      	ldr	r3, [pc, #72]	; (800195c <sensores+0x6c>)
 8001912:	701a      	strb	r2, [r3, #0]
	if (distanciaSR04 < 25) SF = 0; else SF = 1;
 8001914:	4b12      	ldr	r3, [pc, #72]	; (8001960 <sensores+0x70>)
 8001916:	881b      	ldrh	r3, [r3, #0]
 8001918:	2b18      	cmp	r3, #24
 800191a:	d803      	bhi.n	8001924 <sensores+0x34>
 800191c:	4b11      	ldr	r3, [pc, #68]	; (8001964 <sensores+0x74>)
 800191e:	2200      	movs	r2, #0
 8001920:	701a      	strb	r2, [r3, #0]
 8001922:	e002      	b.n	800192a <sensores+0x3a>
 8001924:	4b0f      	ldr	r3, [pc, #60]	; (8001964 <sensores+0x74>)
 8001926:	2201      	movs	r2, #1
 8001928:	701a      	strb	r2, [r3, #0]

	sensores_dist = SI << 2 | SF << 1 | SD;
 800192a:	4b0b      	ldr	r3, [pc, #44]	; (8001958 <sensores+0x68>)
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	b25a      	sxtb	r2, r3
 8001932:	4b0c      	ldr	r3, [pc, #48]	; (8001964 <sensores+0x74>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	b25b      	sxtb	r3, r3
 800193a:	4313      	orrs	r3, r2
 800193c:	b25a      	sxtb	r2, r3
 800193e:	4b07      	ldr	r3, [pc, #28]	; (800195c <sensores+0x6c>)
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	b25b      	sxtb	r3, r3
 8001944:	4313      	orrs	r3, r2
 8001946:	b25b      	sxtb	r3, r3
 8001948:	b2da      	uxtb	r2, r3
 800194a:	4b07      	ldr	r3, [pc, #28]	; (8001968 <sensores+0x78>)
 800194c:	701a      	strb	r2, [r3, #0]
} //end sensores()
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	40020c00 	.word	0x40020c00
 8001958:	200000bd 	.word	0x200000bd
 800195c:	200000bf 	.word	0x200000bf
 8001960:	200000d4 	.word	0x200000d4
 8001964:	200000be 	.word	0x200000be
 8001968:	200000c0 	.word	0x200000c0

0800196c <movimientoLibre>:
	velLFinal = abs(vl);
	velRFinal = abs(vr);

} //end velocidades()

void movimientoLibre (void){
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0

	if (avance_cant != 0) avance_cant = 0;
 8001970:	4b70      	ldr	r3, [pc, #448]	; (8001b34 <movimientoLibre+0x1c8>)
 8001972:	881b      	ldrh	r3, [r3, #0]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d002      	beq.n	800197e <movimientoLibre+0x12>
 8001978:	4b6e      	ldr	r3, [pc, #440]	; (8001b34 <movimientoLibre+0x1c8>)
 800197a:	2200      	movs	r2, #0
 800197c:	801a      	strh	r2, [r3, #0]
	if (retroceso_cant != 0) retroceso_cant = 0;
 800197e:	4b6e      	ldr	r3, [pc, #440]	; (8001b38 <movimientoLibre+0x1cc>)
 8001980:	881b      	ldrh	r3, [r3, #0]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d002      	beq.n	800198c <movimientoLibre+0x20>
 8001986:	4b6c      	ldr	r3, [pc, #432]	; (8001b38 <movimientoLibre+0x1cc>)
 8001988:	2200      	movs	r2, #0
 800198a:	801a      	strh	r2, [r3, #0]
	if (giroIzq_cant != 0) giroIzq_cant = 0;
 800198c:	4b6b      	ldr	r3, [pc, #428]	; (8001b3c <movimientoLibre+0x1d0>)
 800198e:	881b      	ldrh	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d002      	beq.n	800199a <movimientoLibre+0x2e>
 8001994:	4b69      	ldr	r3, [pc, #420]	; (8001b3c <movimientoLibre+0x1d0>)
 8001996:	2200      	movs	r2, #0
 8001998:	801a      	strh	r2, [r3, #0]
	if (giroDer_cant != 0) giroDer_cant = 0;
 800199a:	4b69      	ldr	r3, [pc, #420]	; (8001b40 <movimientoLibre+0x1d4>)
 800199c:	881b      	ldrh	r3, [r3, #0]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d002      	beq.n	80019a8 <movimientoLibre+0x3c>
 80019a2:	4b67      	ldr	r3, [pc, #412]	; (8001b40 <movimientoLibre+0x1d4>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	801a      	strh	r2, [r3, #0]

	switch (status_movimiento) {
 80019a8:	4b66      	ldr	r3, [pc, #408]	; (8001b44 <movimientoLibre+0x1d8>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	2b06      	cmp	r3, #6
 80019ae:	f200 80ba 	bhi.w	8001b26 <movimientoLibre+0x1ba>
 80019b2:	a201      	add	r2, pc, #4	; (adr r2, 80019b8 <movimientoLibre+0x4c>)
 80019b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019b8:	080019d5 	.word	0x080019d5
 80019bc:	080019ef 	.word	0x080019ef
 80019c0:	08001a9d 	.word	0x08001a9d
 80019c4:	08001a49 	.word	0x08001a49
 80019c8:	08001a73 	.word	0x08001a73
 80019cc:	08001ab1 	.word	0x08001ab1
 80019d0:	08001aed 	.word	0x08001aed
//			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 0);
//
//			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 0);
//			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 0);

			velL = 0;
 80019d4:	4b5c      	ldr	r3, [pc, #368]	; (8001b48 <movimientoLibre+0x1dc>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	701a      	strb	r2, [r3, #0]
			velR = 0;
 80019da:	4b5c      	ldr	r3, [pc, #368]	; (8001b4c <movimientoLibre+0x1e0>)
 80019dc:	2200      	movs	r2, #0
 80019de:	701a      	strb	r2, [r3, #0]
			periodo_Encoder = 0;
 80019e0:	4b5b      	ldr	r3, [pc, #364]	; (8001b50 <movimientoLibre+0x1e4>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	701a      	strb	r2, [r3, #0]

			status_movimiento = AVANZANDO;
 80019e6:	4b57      	ldr	r3, [pc, #348]	; (8001b44 <movimientoLibre+0x1d8>)
 80019e8:	2201      	movs	r2, #1
 80019ea:	701a      	strb	r2, [r3, #0]
		break;
 80019ec:	e09c      	b.n	8001b28 <movimientoLibre+0x1bc>
//			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 1);
//
//			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 0);
//			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 0);

			velL = 5;
 80019ee:	4b56      	ldr	r3, [pc, #344]	; (8001b48 <movimientoLibre+0x1dc>)
 80019f0:	2205      	movs	r2, #5
 80019f2:	701a      	strb	r2, [r3, #0]
			velR = 5;
 80019f4:	4b55      	ldr	r3, [pc, #340]	; (8001b4c <movimientoLibre+0x1e0>)
 80019f6:	2205      	movs	r2, #5
 80019f8:	701a      	strb	r2, [r3, #0]

			switch (sensores_dist) {
 80019fa:	4b56      	ldr	r3, [pc, #344]	; (8001b54 <movimientoLibre+0x1e8>)
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	2b06      	cmp	r3, #6
 8001a00:	d820      	bhi.n	8001a44 <movimientoLibre+0xd8>
 8001a02:	a201      	add	r2, pc, #4	; (adr r2, 8001a08 <movimientoLibre+0x9c>)
 8001a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a08:	08001a2d 	.word	0x08001a2d
 8001a0c:	08001a3d 	.word	0x08001a3d
 8001a10:	08001a45 	.word	0x08001a45
 8001a14:	08001a35 	.word	0x08001a35
 8001a18:	08001a2d 	.word	0x08001a2d
 8001a1c:	08001a2d 	.word	0x08001a2d
 8001a20:	08001a25 	.word	0x08001a25
				case 0b110:
					//agregado para prueba
					//status_movimiento = PIVOTE_IZQ_AVAN;
					status_movimiento = ROTANDO_IZQ;
 8001a24:	4b47      	ldr	r3, [pc, #284]	; (8001b44 <movimientoLibre+0x1d8>)
 8001a26:	2203      	movs	r2, #3
 8001a28:	701a      	strb	r2, [r3, #0]

				break;
 8001a2a:	e00c      	b.n	8001a46 <movimientoLibre+0xda>
				case 0b101:
				case 0b100:
				case 0b000:
					status_movimiento = ROTANDO_IZQ;
 8001a2c:	4b45      	ldr	r3, [pc, #276]	; (8001b44 <movimientoLibre+0x1d8>)
 8001a2e:	2203      	movs	r2, #3
 8001a30:	701a      	strb	r2, [r3, #0]
				break;
 8001a32:	e008      	b.n	8001a46 <movimientoLibre+0xda>
				case 0b011:
					//agregado para prueba
					//status_movimiento = PIVOTE_DER_AVAN;
					status_movimiento = ROTANDO_DER;
 8001a34:	4b43      	ldr	r3, [pc, #268]	; (8001b44 <movimientoLibre+0x1d8>)
 8001a36:	2204      	movs	r2, #4
 8001a38:	701a      	strb	r2, [r3, #0]
				break;
 8001a3a:	e004      	b.n	8001a46 <movimientoLibre+0xda>
				case 0b001:
					status_movimiento = ROTANDO_DER;
 8001a3c:	4b41      	ldr	r3, [pc, #260]	; (8001b44 <movimientoLibre+0x1d8>)
 8001a3e:	2204      	movs	r2, #4
 8001a40:	701a      	strb	r2, [r3, #0]
				break;
 8001a42:	e000      	b.n	8001a46 <movimientoLibre+0xda>
				default:
				break;
 8001a44:	bf00      	nop
			} //end switch sensores_dist

		break;
 8001a46:	e06f      	b.n	8001b28 <movimientoLibre+0x1bc>
//			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 1);
//
//			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 1);
//			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 0);

			velL = -5;
 8001a48:	4b3f      	ldr	r3, [pc, #252]	; (8001b48 <movimientoLibre+0x1dc>)
 8001a4a:	22fb      	movs	r2, #251	; 0xfb
 8001a4c:	701a      	strb	r2, [r3, #0]
			velR = 5;
 8001a4e:	4b3f      	ldr	r3, [pc, #252]	; (8001b4c <movimientoLibre+0x1e0>)
 8001a50:	2205      	movs	r2, #5
 8001a52:	701a      	strb	r2, [r3, #0]

			switch (sensores_dist){
 8001a54:	4b3f      	ldr	r3, [pc, #252]	; (8001b54 <movimientoLibre+0x1e8>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	2b03      	cmp	r3, #3
 8001a5a:	d005      	beq.n	8001a68 <movimientoLibre+0xfc>
 8001a5c:	2b07      	cmp	r3, #7
 8001a5e:	d106      	bne.n	8001a6e <movimientoLibre+0x102>
				case 0b111:
					status_movimiento = AVANZANDO;
 8001a60:	4b38      	ldr	r3, [pc, #224]	; (8001b44 <movimientoLibre+0x1d8>)
 8001a62:	2201      	movs	r2, #1
 8001a64:	701a      	strb	r2, [r3, #0]
					break;
 8001a66:	e003      	b.n	8001a70 <movimientoLibre+0x104>
				case 0b011:
					status_movimiento = ROTANDO_DER;
 8001a68:	4b36      	ldr	r3, [pc, #216]	; (8001b44 <movimientoLibre+0x1d8>)
 8001a6a:	2204      	movs	r2, #4
 8001a6c:	701a      	strb	r2, [r3, #0]
				default:
					break;
 8001a6e:	bf00      	nop
			} //end switch sensores_dist

		break;
 8001a70:	e05a      	b.n	8001b28 <movimientoLibre+0x1bc>
//			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 0);
//
//			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 0);
//			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 1);

			velL = 5;
 8001a72:	4b35      	ldr	r3, [pc, #212]	; (8001b48 <movimientoLibre+0x1dc>)
 8001a74:	2205      	movs	r2, #5
 8001a76:	701a      	strb	r2, [r3, #0]
			velR = -5;
 8001a78:	4b34      	ldr	r3, [pc, #208]	; (8001b4c <movimientoLibre+0x1e0>)
 8001a7a:	22fb      	movs	r2, #251	; 0xfb
 8001a7c:	701a      	strb	r2, [r3, #0]

			switch (sensores_dist){
 8001a7e:	4b35      	ldr	r3, [pc, #212]	; (8001b54 <movimientoLibre+0x1e8>)
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	2b06      	cmp	r3, #6
 8001a84:	d005      	beq.n	8001a92 <movimientoLibre+0x126>
 8001a86:	2b07      	cmp	r3, #7
 8001a88:	d106      	bne.n	8001a98 <movimientoLibre+0x12c>
				case 0b111:
					status_movimiento = AVANZANDO;
 8001a8a:	4b2e      	ldr	r3, [pc, #184]	; (8001b44 <movimientoLibre+0x1d8>)
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	701a      	strb	r2, [r3, #0]
					break;
 8001a90:	e003      	b.n	8001a9a <movimientoLibre+0x12e>
				case 0b110:
					status_movimiento = ROTANDO_IZQ;
 8001a92:	4b2c      	ldr	r3, [pc, #176]	; (8001b44 <movimientoLibre+0x1d8>)
 8001a94:	2203      	movs	r2, #3
 8001a96:	701a      	strb	r2, [r3, #0]
				default:
					break;
 8001a98:	bf00      	nop
			} //end switch sensores_dist

		break;
 8001a9a:	e045      	b.n	8001b28 <movimientoLibre+0x1bc>
//			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 0);
//
//			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 1);
//			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 1);

			velL = -5;
 8001a9c:	4b2a      	ldr	r3, [pc, #168]	; (8001b48 <movimientoLibre+0x1dc>)
 8001a9e:	22fb      	movs	r2, #251	; 0xfb
 8001aa0:	701a      	strb	r2, [r3, #0]
			velR = -5;
 8001aa2:	4b2a      	ldr	r3, [pc, #168]	; (8001b4c <movimientoLibre+0x1e0>)
 8001aa4:	22fb      	movs	r2, #251	; 0xfb
 8001aa6:	701a      	strb	r2, [r3, #0]

			status_movimiento = AVANZANDO;
 8001aa8:	4b26      	ldr	r3, [pc, #152]	; (8001b44 <movimientoLibre+0x1d8>)
 8001aaa:	2201      	movs	r2, #1
 8001aac:	701a      	strb	r2, [r3, #0]
			break;
 8001aae:	e03b      	b.n	8001b28 <movimientoLibre+0x1bc>
//			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 1);
//
//			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 0);
//			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 0);

			velL = 0;
 8001ab0:	4b25      	ldr	r3, [pc, #148]	; (8001b48 <movimientoLibre+0x1dc>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	701a      	strb	r2, [r3, #0]
			velR = 5;
 8001ab6:	4b25      	ldr	r3, [pc, #148]	; (8001b4c <movimientoLibre+0x1e0>)
 8001ab8:	2205      	movs	r2, #5
 8001aba:	701a      	strb	r2, [r3, #0]

			switch (sensores_dist){
 8001abc:	4b25      	ldr	r3, [pc, #148]	; (8001b54 <movimientoLibre+0x1e8>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	2b07      	cmp	r3, #7
 8001ac2:	d006      	beq.n	8001ad2 <movimientoLibre+0x166>
 8001ac4:	2b07      	cmp	r3, #7
 8001ac6:	dc0f      	bgt.n	8001ae8 <movimientoLibre+0x17c>
 8001ac8:	2b03      	cmp	r3, #3
 8001aca:	d006      	beq.n	8001ada <movimientoLibre+0x16e>
 8001acc:	2b04      	cmp	r3, #4
 8001ace:	d008      	beq.n	8001ae2 <movimientoLibre+0x176>
					status_movimiento = ROTANDO_DER;
				break;
				case 0b100:
					status_movimiento = ROTANDO_IZQ;
				default:
				break;
 8001ad0:	e00a      	b.n	8001ae8 <movimientoLibre+0x17c>
					status_movimiento = AVANZANDO;
 8001ad2:	4b1c      	ldr	r3, [pc, #112]	; (8001b44 <movimientoLibre+0x1d8>)
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	701a      	strb	r2, [r3, #0]
				break;
 8001ad8:	e007      	b.n	8001aea <movimientoLibre+0x17e>
					status_movimiento = ROTANDO_DER;
 8001ada:	4b1a      	ldr	r3, [pc, #104]	; (8001b44 <movimientoLibre+0x1d8>)
 8001adc:	2204      	movs	r2, #4
 8001ade:	701a      	strb	r2, [r3, #0]
				break;
 8001ae0:	e003      	b.n	8001aea <movimientoLibre+0x17e>
					status_movimiento = ROTANDO_IZQ;
 8001ae2:	4b18      	ldr	r3, [pc, #96]	; (8001b44 <movimientoLibre+0x1d8>)
 8001ae4:	2203      	movs	r2, #3
 8001ae6:	701a      	strb	r2, [r3, #0]
				break;
 8001ae8:	bf00      	nop
			} //end switch sensores_dist

		break;
 8001aea:	e01d      	b.n	8001b28 <movimientoLibre+0x1bc>
//			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 0);
//
//			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 0);
//			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 0);

			velL = 5;
 8001aec:	4b16      	ldr	r3, [pc, #88]	; (8001b48 <movimientoLibre+0x1dc>)
 8001aee:	2205      	movs	r2, #5
 8001af0:	701a      	strb	r2, [r3, #0]
			velR = 0;
 8001af2:	4b16      	ldr	r3, [pc, #88]	; (8001b4c <movimientoLibre+0x1e0>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	701a      	strb	r2, [r3, #0]

			switch (sensores_dist){
 8001af8:	4b16      	ldr	r3, [pc, #88]	; (8001b54 <movimientoLibre+0x1e8>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	2b07      	cmp	r3, #7
 8001afe:	d006      	beq.n	8001b0e <movimientoLibre+0x1a2>
 8001b00:	2b07      	cmp	r3, #7
 8001b02:	dc0f      	bgt.n	8001b24 <movimientoLibre+0x1b8>
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d00a      	beq.n	8001b1e <movimientoLibre+0x1b2>
 8001b08:	2b06      	cmp	r3, #6
 8001b0a:	d004      	beq.n	8001b16 <movimientoLibre+0x1aa>
					status_movimiento = ROTANDO_IZQ;
				break;
				case 0b001:
					status_movimiento = ROTANDO_DER;
				default:
				break;
 8001b0c:	e00a      	b.n	8001b24 <movimientoLibre+0x1b8>
					status_movimiento = AVANZANDO;
 8001b0e:	4b0d      	ldr	r3, [pc, #52]	; (8001b44 <movimientoLibre+0x1d8>)
 8001b10:	2201      	movs	r2, #1
 8001b12:	701a      	strb	r2, [r3, #0]
				break;
 8001b14:	e007      	b.n	8001b26 <movimientoLibre+0x1ba>
					status_movimiento = ROTANDO_IZQ;
 8001b16:	4b0b      	ldr	r3, [pc, #44]	; (8001b44 <movimientoLibre+0x1d8>)
 8001b18:	2203      	movs	r2, #3
 8001b1a:	701a      	strb	r2, [r3, #0]
				break;
 8001b1c:	e003      	b.n	8001b26 <movimientoLibre+0x1ba>
					status_movimiento = ROTANDO_DER;
 8001b1e:	4b09      	ldr	r3, [pc, #36]	; (8001b44 <movimientoLibre+0x1d8>)
 8001b20:	2204      	movs	r2, #4
 8001b22:	701a      	strb	r2, [r3, #0]
				break;
 8001b24:	bf00      	nop
			} //end switch sensores_dist

		default:
		break;
 8001b26:	bf00      	nop

	} //fin switch status_movimiento

} //fin movimientoLibre()
 8001b28:	bf00      	nop
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	200000b2 	.word	0x200000b2
 8001b38:	200000b4 	.word	0x200000b4
 8001b3c:	200000b6 	.word	0x200000b6
 8001b40:	200000b8 	.word	0x200000b8
 8001b44:	200000b1 	.word	0x200000b1
 8001b48:	20000001 	.word	0x20000001
 8001b4c:	20000002 	.word	0x20000002
 8001b50:	200000c2 	.word	0x200000c2
 8001b54:	200000c0 	.word	0x200000c0

08001b58 <movimientoRC>:

void movimientoRC (void){
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0

	if (!avance_cant && !retroceso_cant && !giroIzq_cant && !giroDer_cant ){
 8001b5c:	4b9d      	ldr	r3, [pc, #628]	; (8001dd4 <movimientoRC+0x27c>)
 8001b5e:	881b      	ldrh	r3, [r3, #0]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d10e      	bne.n	8001b82 <movimientoRC+0x2a>
 8001b64:	4b9c      	ldr	r3, [pc, #624]	; (8001dd8 <movimientoRC+0x280>)
 8001b66:	881b      	ldrh	r3, [r3, #0]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d10a      	bne.n	8001b82 <movimientoRC+0x2a>
 8001b6c:	4b9b      	ldr	r3, [pc, #620]	; (8001ddc <movimientoRC+0x284>)
 8001b6e:	881b      	ldrh	r3, [r3, #0]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d106      	bne.n	8001b82 <movimientoRC+0x2a>
 8001b74:	4b9a      	ldr	r3, [pc, #616]	; (8001de0 <movimientoRC+0x288>)
 8001b76:	881b      	ldrh	r3, [r3, #0]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d102      	bne.n	8001b82 <movimientoRC+0x2a>
		status_movimiento = QUIETO;
 8001b7c:	4b99      	ldr	r3, [pc, #612]	; (8001de4 <movimientoRC+0x28c>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	701a      	strb	r2, [r3, #0]
	}

	switch (status_movimiento) {
 8001b82:	4b98      	ldr	r3, [pc, #608]	; (8001de4 <movimientoRC+0x28c>)
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	2b05      	cmp	r3, #5
 8001b88:	f200 81f5 	bhi.w	8001f76 <movimientoRC+0x41e>
 8001b8c:	a201      	add	r2, pc, #4	; (adr r2, 8001b94 <movimientoRC+0x3c>)
 8001b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b92:	bf00      	nop
 8001b94:	08001bad 	.word	0x08001bad
 8001b98:	08001c59 	.word	0x08001c59
 8001b9c:	08001ebd 	.word	0x08001ebd
 8001ba0:	08001d17 	.word	0x08001d17
 8001ba4:	08001e01 	.word	0x08001e01
 8001ba8:	08001f77 	.word	0x08001f77
		case QUIETO:

			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 0);
 8001bac:	2200      	movs	r2, #0
 8001bae:	2101      	movs	r1, #1
 8001bb0:	488d      	ldr	r0, [pc, #564]	; (8001de8 <movimientoRC+0x290>)
 8001bb2:	f001 fc73 	bl	800349c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 0);
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bbc:	488b      	ldr	r0, [pc, #556]	; (8001dec <movimientoRC+0x294>)
 8001bbe:	f001 fc6d 	bl	800349c <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 0);
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bc8:	4888      	ldr	r0, [pc, #544]	; (8001dec <movimientoRC+0x294>)
 8001bca:	f001 fc67 	bl	800349c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 0);
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001bd4:	4885      	ldr	r0, [pc, #532]	; (8001dec <movimientoRC+0x294>)
 8001bd6:	f001 fc61 	bl	800349c <HAL_GPIO_WritePin>

			velL = 0;
 8001bda:	4b85      	ldr	r3, [pc, #532]	; (8001df0 <movimientoRC+0x298>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	701a      	strb	r2, [r3, #0]
			velR = 0;
 8001be0:	4b84      	ldr	r3, [pc, #528]	; (8001df4 <movimientoRC+0x29c>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	701a      	strb	r2, [r3, #0]

			if (avance_cant != 0){
 8001be6:	4b7b      	ldr	r3, [pc, #492]	; (8001dd4 <movimientoRC+0x27c>)
 8001be8:	881b      	ldrh	r3, [r3, #0]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d009      	beq.n	8001c02 <movimientoRC+0xaa>
				acum_encoderL = 0;
 8001bee:	4b82      	ldr	r3, [pc, #520]	; (8001df8 <movimientoRC+0x2a0>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 8001bf4:	4b81      	ldr	r3, [pc, #516]	; (8001dfc <movimientoRC+0x2a4>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	801a      	strh	r2, [r3, #0]
				status_movimiento = AVANZANDO;
 8001bfa:	4b7a      	ldr	r3, [pc, #488]	; (8001de4 <movimientoRC+0x28c>)
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	701a      	strb	r2, [r3, #0]
				break;
 8001c00:	e1cc      	b.n	8001f9c <movimientoRC+0x444>
			}

			if (retroceso_cant != 0){
 8001c02:	4b75      	ldr	r3, [pc, #468]	; (8001dd8 <movimientoRC+0x280>)
 8001c04:	881b      	ldrh	r3, [r3, #0]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d009      	beq.n	8001c1e <movimientoRC+0xc6>
				acum_encoderL = 0;
 8001c0a:	4b7b      	ldr	r3, [pc, #492]	; (8001df8 <movimientoRC+0x2a0>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 8001c10:	4b7a      	ldr	r3, [pc, #488]	; (8001dfc <movimientoRC+0x2a4>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	801a      	strh	r2, [r3, #0]
				status_movimiento = RETROCEDIENDO;
 8001c16:	4b73      	ldr	r3, [pc, #460]	; (8001de4 <movimientoRC+0x28c>)
 8001c18:	2202      	movs	r2, #2
 8001c1a:	701a      	strb	r2, [r3, #0]
				break;
 8001c1c:	e1be      	b.n	8001f9c <movimientoRC+0x444>
			}

			if (giroIzq_cant != 0){
 8001c1e:	4b6f      	ldr	r3, [pc, #444]	; (8001ddc <movimientoRC+0x284>)
 8001c20:	881b      	ldrh	r3, [r3, #0]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d009      	beq.n	8001c3a <movimientoRC+0xe2>
				acum_encoderL = 0;
 8001c26:	4b74      	ldr	r3, [pc, #464]	; (8001df8 <movimientoRC+0x2a0>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 8001c2c:	4b73      	ldr	r3, [pc, #460]	; (8001dfc <movimientoRC+0x2a4>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	801a      	strh	r2, [r3, #0]
				status_movimiento = ROTANDO_IZQ;
 8001c32:	4b6c      	ldr	r3, [pc, #432]	; (8001de4 <movimientoRC+0x28c>)
 8001c34:	2203      	movs	r2, #3
 8001c36:	701a      	strb	r2, [r3, #0]
				break;
 8001c38:	e1b0      	b.n	8001f9c <movimientoRC+0x444>
			}

			if (giroDer_cant != 0){
 8001c3a:	4b69      	ldr	r3, [pc, #420]	; (8001de0 <movimientoRC+0x288>)
 8001c3c:	881b      	ldrh	r3, [r3, #0]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	f000 819b 	beq.w	8001f7a <movimientoRC+0x422>
				acum_encoderL = 0;
 8001c44:	4b6c      	ldr	r3, [pc, #432]	; (8001df8 <movimientoRC+0x2a0>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 8001c4a:	4b6c      	ldr	r3, [pc, #432]	; (8001dfc <movimientoRC+0x2a4>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	801a      	strh	r2, [r3, #0]
				status_movimiento = ROTANDO_DER;
 8001c50:	4b64      	ldr	r3, [pc, #400]	; (8001de4 <movimientoRC+0x28c>)
 8001c52:	2204      	movs	r2, #4
 8001c54:	701a      	strb	r2, [r3, #0]
				break;
 8001c56:	e1a1      	b.n	8001f9c <movimientoRC+0x444>
			}

		break;
		case AVANZANDO:

			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 1);
 8001c58:	2201      	movs	r2, #1
 8001c5a:	2101      	movs	r1, #1
 8001c5c:	4862      	ldr	r0, [pc, #392]	; (8001de8 <movimientoRC+0x290>)
 8001c5e:	f001 fc1d 	bl	800349c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 1);
 8001c62:	2201      	movs	r2, #1
 8001c64:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c68:	4860      	ldr	r0, [pc, #384]	; (8001dec <movimientoRC+0x294>)
 8001c6a:	f001 fc17 	bl	800349c <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 0);
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c74:	485d      	ldr	r0, [pc, #372]	; (8001dec <movimientoRC+0x294>)
 8001c76:	f001 fc11 	bl	800349c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 0);
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c80:	485a      	ldr	r0, [pc, #360]	; (8001dec <movimientoRC+0x294>)
 8001c82:	f001 fc0b 	bl	800349c <HAL_GPIO_WritePin>

			velL = 5;
 8001c86:	4b5a      	ldr	r3, [pc, #360]	; (8001df0 <movimientoRC+0x298>)
 8001c88:	2205      	movs	r2, #5
 8001c8a:	701a      	strb	r2, [r3, #0]
			velR = 5;
 8001c8c:	4b59      	ldr	r3, [pc, #356]	; (8001df4 <movimientoRC+0x29c>)
 8001c8e:	2205      	movs	r2, #5
 8001c90:	701a      	strb	r2, [r3, #0]

			encoders();
 8001c92:	f000 f99b 	bl	8001fcc <encoders>

			if (avance_cant > ((acum_encoderL + acum_encoderR) >> 1) ) break;
 8001c96:	4b4f      	ldr	r3, [pc, #316]	; (8001dd4 <movimientoRC+0x27c>)
 8001c98:	881b      	ldrh	r3, [r3, #0]
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	4b56      	ldr	r3, [pc, #344]	; (8001df8 <movimientoRC+0x2a0>)
 8001c9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4b55      	ldr	r3, [pc, #340]	; (8001dfc <movimientoRC+0x2a4>)
 8001ca6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001caa:	440b      	add	r3, r1
 8001cac:	105b      	asrs	r3, r3, #1
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	f300 8165 	bgt.w	8001f7e <movimientoRC+0x426>

			avance_cant = 0;
 8001cb4:	4b47      	ldr	r3, [pc, #284]	; (8001dd4 <movimientoRC+0x27c>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	801a      	strh	r2, [r3, #0]

			status_movimiento = QUIETO;
 8001cba:	4b4a      	ldr	r3, [pc, #296]	; (8001de4 <movimientoRC+0x28c>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	701a      	strb	r2, [r3, #0]

			if (retroceso_cant != 0){
 8001cc0:	4b45      	ldr	r3, [pc, #276]	; (8001dd8 <movimientoRC+0x280>)
 8001cc2:	881b      	ldrh	r3, [r3, #0]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d009      	beq.n	8001cdc <movimientoRC+0x184>
				acum_encoderL = 0;
 8001cc8:	4b4b      	ldr	r3, [pc, #300]	; (8001df8 <movimientoRC+0x2a0>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 8001cce:	4b4b      	ldr	r3, [pc, #300]	; (8001dfc <movimientoRC+0x2a4>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	801a      	strh	r2, [r3, #0]
				status_movimiento = RETROCEDIENDO;
 8001cd4:	4b43      	ldr	r3, [pc, #268]	; (8001de4 <movimientoRC+0x28c>)
 8001cd6:	2202      	movs	r2, #2
 8001cd8:	701a      	strb	r2, [r3, #0]
				break;
 8001cda:	e15f      	b.n	8001f9c <movimientoRC+0x444>
			}

			if (giroIzq_cant != 0){
 8001cdc:	4b3f      	ldr	r3, [pc, #252]	; (8001ddc <movimientoRC+0x284>)
 8001cde:	881b      	ldrh	r3, [r3, #0]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d009      	beq.n	8001cf8 <movimientoRC+0x1a0>
				acum_encoderL = 0;
 8001ce4:	4b44      	ldr	r3, [pc, #272]	; (8001df8 <movimientoRC+0x2a0>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 8001cea:	4b44      	ldr	r3, [pc, #272]	; (8001dfc <movimientoRC+0x2a4>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	801a      	strh	r2, [r3, #0]
				status_movimiento = ROTANDO_IZQ;
 8001cf0:	4b3c      	ldr	r3, [pc, #240]	; (8001de4 <movimientoRC+0x28c>)
 8001cf2:	2203      	movs	r2, #3
 8001cf4:	701a      	strb	r2, [r3, #0]
				break;
 8001cf6:	e151      	b.n	8001f9c <movimientoRC+0x444>
			}

			if (giroDer_cant != 0){
 8001cf8:	4b39      	ldr	r3, [pc, #228]	; (8001de0 <movimientoRC+0x288>)
 8001cfa:	881b      	ldrh	r3, [r3, #0]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	f000 8140 	beq.w	8001f82 <movimientoRC+0x42a>
				acum_encoderL = 0;
 8001d02:	4b3d      	ldr	r3, [pc, #244]	; (8001df8 <movimientoRC+0x2a0>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 8001d08:	4b3c      	ldr	r3, [pc, #240]	; (8001dfc <movimientoRC+0x2a4>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	801a      	strh	r2, [r3, #0]
				status_movimiento = ROTANDO_DER;
 8001d0e:	4b35      	ldr	r3, [pc, #212]	; (8001de4 <movimientoRC+0x28c>)
 8001d10:	2204      	movs	r2, #4
 8001d12:	701a      	strb	r2, [r3, #0]
				break;
 8001d14:	e142      	b.n	8001f9c <movimientoRC+0x444>
			}

		break;
		case ROTANDO_IZQ:

			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 0);
 8001d16:	2200      	movs	r2, #0
 8001d18:	2101      	movs	r1, #1
 8001d1a:	4833      	ldr	r0, [pc, #204]	; (8001de8 <movimientoRC+0x290>)
 8001d1c:	f001 fbbe 	bl	800349c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 1);
 8001d20:	2201      	movs	r2, #1
 8001d22:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d26:	4831      	ldr	r0, [pc, #196]	; (8001dec <movimientoRC+0x294>)
 8001d28:	f001 fbb8 	bl	800349c <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 1);
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d32:	482e      	ldr	r0, [pc, #184]	; (8001dec <movimientoRC+0x294>)
 8001d34:	f001 fbb2 	bl	800349c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 0);
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d3e:	482b      	ldr	r0, [pc, #172]	; (8001dec <movimientoRC+0x294>)
 8001d40:	f001 fbac 	bl	800349c <HAL_GPIO_WritePin>

			velL = 5;
 8001d44:	4b2a      	ldr	r3, [pc, #168]	; (8001df0 <movimientoRC+0x298>)
 8001d46:	2205      	movs	r2, #5
 8001d48:	701a      	strb	r2, [r3, #0]
			velR = 5;
 8001d4a:	4b2a      	ldr	r3, [pc, #168]	; (8001df4 <movimientoRC+0x29c>)
 8001d4c:	2205      	movs	r2, #5
 8001d4e:	701a      	strb	r2, [r3, #0]

			encoders();
 8001d50:	f000 f93c 	bl	8001fcc <encoders>

			if (giroIzq_cant > ((acum_encoderL + acum_encoderR) >> 1) ) break;
 8001d54:	4b21      	ldr	r3, [pc, #132]	; (8001ddc <movimientoRC+0x284>)
 8001d56:	881b      	ldrh	r3, [r3, #0]
 8001d58:	461a      	mov	r2, r3
 8001d5a:	4b27      	ldr	r3, [pc, #156]	; (8001df8 <movimientoRC+0x2a0>)
 8001d5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d60:	4619      	mov	r1, r3
 8001d62:	4b26      	ldr	r3, [pc, #152]	; (8001dfc <movimientoRC+0x2a4>)
 8001d64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d68:	440b      	add	r3, r1
 8001d6a:	105b      	asrs	r3, r3, #1
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	f300 810a 	bgt.w	8001f86 <movimientoRC+0x42e>

			giroIzq_cant = 0;
 8001d72:	4b1a      	ldr	r3, [pc, #104]	; (8001ddc <movimientoRC+0x284>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	801a      	strh	r2, [r3, #0]

			status_movimiento = QUIETO;
 8001d78:	4b1a      	ldr	r3, [pc, #104]	; (8001de4 <movimientoRC+0x28c>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	701a      	strb	r2, [r3, #0]

			if (avance_cant != 0){
 8001d7e:	4b15      	ldr	r3, [pc, #84]	; (8001dd4 <movimientoRC+0x27c>)
 8001d80:	881b      	ldrh	r3, [r3, #0]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d009      	beq.n	8001d9a <movimientoRC+0x242>
				acum_encoderL = 0;
 8001d86:	4b1c      	ldr	r3, [pc, #112]	; (8001df8 <movimientoRC+0x2a0>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 8001d8c:	4b1b      	ldr	r3, [pc, #108]	; (8001dfc <movimientoRC+0x2a4>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	801a      	strh	r2, [r3, #0]
				status_movimiento = AVANZANDO;
 8001d92:	4b14      	ldr	r3, [pc, #80]	; (8001de4 <movimientoRC+0x28c>)
 8001d94:	2201      	movs	r2, #1
 8001d96:	701a      	strb	r2, [r3, #0]
				break;
 8001d98:	e100      	b.n	8001f9c <movimientoRC+0x444>
			}

			if (retroceso_cant != 0){
 8001d9a:	4b0f      	ldr	r3, [pc, #60]	; (8001dd8 <movimientoRC+0x280>)
 8001d9c:	881b      	ldrh	r3, [r3, #0]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d009      	beq.n	8001db6 <movimientoRC+0x25e>
				acum_encoderL = 0;
 8001da2:	4b15      	ldr	r3, [pc, #84]	; (8001df8 <movimientoRC+0x2a0>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 8001da8:	4b14      	ldr	r3, [pc, #80]	; (8001dfc <movimientoRC+0x2a4>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	801a      	strh	r2, [r3, #0]
				status_movimiento = RETROCEDIENDO;
 8001dae:	4b0d      	ldr	r3, [pc, #52]	; (8001de4 <movimientoRC+0x28c>)
 8001db0:	2202      	movs	r2, #2
 8001db2:	701a      	strb	r2, [r3, #0]
				break;
 8001db4:	e0f2      	b.n	8001f9c <movimientoRC+0x444>
			}

			if (giroDer_cant != 0){
 8001db6:	4b0a      	ldr	r3, [pc, #40]	; (8001de0 <movimientoRC+0x288>)
 8001db8:	881b      	ldrh	r3, [r3, #0]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	f000 80e5 	beq.w	8001f8a <movimientoRC+0x432>
				acum_encoderL = 0;
 8001dc0:	4b0d      	ldr	r3, [pc, #52]	; (8001df8 <movimientoRC+0x2a0>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 8001dc6:	4b0d      	ldr	r3, [pc, #52]	; (8001dfc <movimientoRC+0x2a4>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	801a      	strh	r2, [r3, #0]
				status_movimiento = ROTANDO_DER;
 8001dcc:	4b05      	ldr	r3, [pc, #20]	; (8001de4 <movimientoRC+0x28c>)
 8001dce:	2204      	movs	r2, #4
 8001dd0:	701a      	strb	r2, [r3, #0]
				break;
 8001dd2:	e0e3      	b.n	8001f9c <movimientoRC+0x444>
 8001dd4:	200000b2 	.word	0x200000b2
 8001dd8:	200000b4 	.word	0x200000b4
 8001ddc:	200000b6 	.word	0x200000b6
 8001de0:	200000b8 	.word	0x200000b8
 8001de4:	200000b1 	.word	0x200000b1
 8001de8:	40020c00 	.word	0x40020c00
 8001dec:	40020800 	.word	0x40020800
 8001df0:	20000001 	.word	0x20000001
 8001df4:	20000002 	.word	0x20000002
 8001df8:	200000dc 	.word	0x200000dc
 8001dfc:	200000de 	.word	0x200000de
			}

		break;
		case ROTANDO_DER:
			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 1);
 8001e00:	2201      	movs	r2, #1
 8001e02:	2101      	movs	r1, #1
 8001e04:	4866      	ldr	r0, [pc, #408]	; (8001fa0 <movimientoRC+0x448>)
 8001e06:	f001 fb49 	bl	800349c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 0);
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e10:	4864      	ldr	r0, [pc, #400]	; (8001fa4 <movimientoRC+0x44c>)
 8001e12:	f001 fb43 	bl	800349c <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 0);
 8001e16:	2200      	movs	r2, #0
 8001e18:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e1c:	4861      	ldr	r0, [pc, #388]	; (8001fa4 <movimientoRC+0x44c>)
 8001e1e:	f001 fb3d 	bl	800349c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 1);
 8001e22:	2201      	movs	r2, #1
 8001e24:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e28:	485e      	ldr	r0, [pc, #376]	; (8001fa4 <movimientoRC+0x44c>)
 8001e2a:	f001 fb37 	bl	800349c <HAL_GPIO_WritePin>

			velL = 5;
 8001e2e:	4b5e      	ldr	r3, [pc, #376]	; (8001fa8 <movimientoRC+0x450>)
 8001e30:	2205      	movs	r2, #5
 8001e32:	701a      	strb	r2, [r3, #0]
			velR = 5;
 8001e34:	4b5d      	ldr	r3, [pc, #372]	; (8001fac <movimientoRC+0x454>)
 8001e36:	2205      	movs	r2, #5
 8001e38:	701a      	strb	r2, [r3, #0]

			encoders();
 8001e3a:	f000 f8c7 	bl	8001fcc <encoders>

			if (giroDer_cant > ((acum_encoderL + acum_encoderR) >> 1) ) break;
 8001e3e:	4b5c      	ldr	r3, [pc, #368]	; (8001fb0 <movimientoRC+0x458>)
 8001e40:	881b      	ldrh	r3, [r3, #0]
 8001e42:	461a      	mov	r2, r3
 8001e44:	4b5b      	ldr	r3, [pc, #364]	; (8001fb4 <movimientoRC+0x45c>)
 8001e46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4b5a      	ldr	r3, [pc, #360]	; (8001fb8 <movimientoRC+0x460>)
 8001e4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e52:	440b      	add	r3, r1
 8001e54:	105b      	asrs	r3, r3, #1
 8001e56:	429a      	cmp	r2, r3
 8001e58:	f300 8099 	bgt.w	8001f8e <movimientoRC+0x436>

			giroDer_cant = 0;
 8001e5c:	4b54      	ldr	r3, [pc, #336]	; (8001fb0 <movimientoRC+0x458>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	801a      	strh	r2, [r3, #0]

			status_movimiento = QUIETO;
 8001e62:	4b56      	ldr	r3, [pc, #344]	; (8001fbc <movimientoRC+0x464>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	701a      	strb	r2, [r3, #0]

			if (avance_cant != 0){
 8001e68:	4b55      	ldr	r3, [pc, #340]	; (8001fc0 <movimientoRC+0x468>)
 8001e6a:	881b      	ldrh	r3, [r3, #0]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d009      	beq.n	8001e84 <movimientoRC+0x32c>
				acum_encoderL = 0;
 8001e70:	4b50      	ldr	r3, [pc, #320]	; (8001fb4 <movimientoRC+0x45c>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 8001e76:	4b50      	ldr	r3, [pc, #320]	; (8001fb8 <movimientoRC+0x460>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	801a      	strh	r2, [r3, #0]
				status_movimiento = AVANZANDO;
 8001e7c:	4b4f      	ldr	r3, [pc, #316]	; (8001fbc <movimientoRC+0x464>)
 8001e7e:	2201      	movs	r2, #1
 8001e80:	701a      	strb	r2, [r3, #0]
				break;
 8001e82:	e08b      	b.n	8001f9c <movimientoRC+0x444>
			}

			if (retroceso_cant != 0){
 8001e84:	4b4f      	ldr	r3, [pc, #316]	; (8001fc4 <movimientoRC+0x46c>)
 8001e86:	881b      	ldrh	r3, [r3, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d009      	beq.n	8001ea0 <movimientoRC+0x348>
				acum_encoderL = 0;
 8001e8c:	4b49      	ldr	r3, [pc, #292]	; (8001fb4 <movimientoRC+0x45c>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 8001e92:	4b49      	ldr	r3, [pc, #292]	; (8001fb8 <movimientoRC+0x460>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	801a      	strh	r2, [r3, #0]
				status_movimiento = RETROCEDIENDO;
 8001e98:	4b48      	ldr	r3, [pc, #288]	; (8001fbc <movimientoRC+0x464>)
 8001e9a:	2202      	movs	r2, #2
 8001e9c:	701a      	strb	r2, [r3, #0]
				break;
 8001e9e:	e07d      	b.n	8001f9c <movimientoRC+0x444>
			}

			if (giroIzq_cant != 0){
 8001ea0:	4b49      	ldr	r3, [pc, #292]	; (8001fc8 <movimientoRC+0x470>)
 8001ea2:	881b      	ldrh	r3, [r3, #0]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d074      	beq.n	8001f92 <movimientoRC+0x43a>
				acum_encoderL = 0;
 8001ea8:	4b42      	ldr	r3, [pc, #264]	; (8001fb4 <movimientoRC+0x45c>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 8001eae:	4b42      	ldr	r3, [pc, #264]	; (8001fb8 <movimientoRC+0x460>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	801a      	strh	r2, [r3, #0]
				status_movimiento = ROTANDO_IZQ;
 8001eb4:	4b41      	ldr	r3, [pc, #260]	; (8001fbc <movimientoRC+0x464>)
 8001eb6:	2203      	movs	r2, #3
 8001eb8:	701a      	strb	r2, [r3, #0]
				break;
 8001eba:	e06f      	b.n	8001f9c <movimientoRC+0x444>
			}

		break;
		case RETROCEDIENDO:
			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 0);
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	4837      	ldr	r0, [pc, #220]	; (8001fa0 <movimientoRC+0x448>)
 8001ec2:	f001 faeb 	bl	800349c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 0);
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ecc:	4835      	ldr	r0, [pc, #212]	; (8001fa4 <movimientoRC+0x44c>)
 8001ece:	f001 fae5 	bl	800349c <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 1);
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ed8:	4832      	ldr	r0, [pc, #200]	; (8001fa4 <movimientoRC+0x44c>)
 8001eda:	f001 fadf 	bl	800349c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 1);
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ee4:	482f      	ldr	r0, [pc, #188]	; (8001fa4 <movimientoRC+0x44c>)
 8001ee6:	f001 fad9 	bl	800349c <HAL_GPIO_WritePin>

			velL = 5;
 8001eea:	4b2f      	ldr	r3, [pc, #188]	; (8001fa8 <movimientoRC+0x450>)
 8001eec:	2205      	movs	r2, #5
 8001eee:	701a      	strb	r2, [r3, #0]
			velR = 5;
 8001ef0:	4b2e      	ldr	r3, [pc, #184]	; (8001fac <movimientoRC+0x454>)
 8001ef2:	2205      	movs	r2, #5
 8001ef4:	701a      	strb	r2, [r3, #0]

			encoders();
 8001ef6:	f000 f869 	bl	8001fcc <encoders>

			if (retroceso_cant > ((acum_encoderL + acum_encoderR) >> 1) ) break;
 8001efa:	4b32      	ldr	r3, [pc, #200]	; (8001fc4 <movimientoRC+0x46c>)
 8001efc:	881b      	ldrh	r3, [r3, #0]
 8001efe:	461a      	mov	r2, r3
 8001f00:	4b2c      	ldr	r3, [pc, #176]	; (8001fb4 <movimientoRC+0x45c>)
 8001f02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f06:	4619      	mov	r1, r3
 8001f08:	4b2b      	ldr	r3, [pc, #172]	; (8001fb8 <movimientoRC+0x460>)
 8001f0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f0e:	440b      	add	r3, r1
 8001f10:	105b      	asrs	r3, r3, #1
 8001f12:	429a      	cmp	r2, r3
 8001f14:	dc3f      	bgt.n	8001f96 <movimientoRC+0x43e>

			retroceso_cant = 0;
 8001f16:	4b2b      	ldr	r3, [pc, #172]	; (8001fc4 <movimientoRC+0x46c>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	801a      	strh	r2, [r3, #0]

			status_movimiento = QUIETO;
 8001f1c:	4b27      	ldr	r3, [pc, #156]	; (8001fbc <movimientoRC+0x464>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	701a      	strb	r2, [r3, #0]

			if (avance_cant != 0){
 8001f22:	4b27      	ldr	r3, [pc, #156]	; (8001fc0 <movimientoRC+0x468>)
 8001f24:	881b      	ldrh	r3, [r3, #0]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d009      	beq.n	8001f3e <movimientoRC+0x3e6>
				acum_encoderL = 0;
 8001f2a:	4b22      	ldr	r3, [pc, #136]	; (8001fb4 <movimientoRC+0x45c>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 8001f30:	4b21      	ldr	r3, [pc, #132]	; (8001fb8 <movimientoRC+0x460>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	801a      	strh	r2, [r3, #0]
				status_movimiento = AVANZANDO;
 8001f36:	4b21      	ldr	r3, [pc, #132]	; (8001fbc <movimientoRC+0x464>)
 8001f38:	2201      	movs	r2, #1
 8001f3a:	701a      	strb	r2, [r3, #0]
				break;
 8001f3c:	e02e      	b.n	8001f9c <movimientoRC+0x444>
			}

			if (giroIzq_cant != 0){
 8001f3e:	4b22      	ldr	r3, [pc, #136]	; (8001fc8 <movimientoRC+0x470>)
 8001f40:	881b      	ldrh	r3, [r3, #0]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d009      	beq.n	8001f5a <movimientoRC+0x402>
				acum_encoderL = 0;
 8001f46:	4b1b      	ldr	r3, [pc, #108]	; (8001fb4 <movimientoRC+0x45c>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 8001f4c:	4b1a      	ldr	r3, [pc, #104]	; (8001fb8 <movimientoRC+0x460>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	801a      	strh	r2, [r3, #0]
				status_movimiento = ROTANDO_IZQ;
 8001f52:	4b1a      	ldr	r3, [pc, #104]	; (8001fbc <movimientoRC+0x464>)
 8001f54:	2203      	movs	r2, #3
 8001f56:	701a      	strb	r2, [r3, #0]
				break;
 8001f58:	e020      	b.n	8001f9c <movimientoRC+0x444>
			}

			if (giroDer_cant != 0){
 8001f5a:	4b15      	ldr	r3, [pc, #84]	; (8001fb0 <movimientoRC+0x458>)
 8001f5c:	881b      	ldrh	r3, [r3, #0]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d01b      	beq.n	8001f9a <movimientoRC+0x442>
				acum_encoderL = 0;
 8001f62:	4b14      	ldr	r3, [pc, #80]	; (8001fb4 <movimientoRC+0x45c>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 8001f68:	4b13      	ldr	r3, [pc, #76]	; (8001fb8 <movimientoRC+0x460>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	801a      	strh	r2, [r3, #0]
				status_movimiento = ROTANDO_DER;
 8001f6e:	4b13      	ldr	r3, [pc, #76]	; (8001fbc <movimientoRC+0x464>)
 8001f70:	2204      	movs	r2, #4
 8001f72:	701a      	strb	r2, [r3, #0]
				break;
 8001f74:	e012      	b.n	8001f9c <movimientoRC+0x444>

		break;
		case PIVOTE_DER_AVAN:

		default:
		break;
 8001f76:	bf00      	nop
 8001f78:	e010      	b.n	8001f9c <movimientoRC+0x444>
		break;
 8001f7a:	bf00      	nop
 8001f7c:	e00e      	b.n	8001f9c <movimientoRC+0x444>
			if (avance_cant > ((acum_encoderL + acum_encoderR) >> 1) ) break;
 8001f7e:	bf00      	nop
 8001f80:	e00c      	b.n	8001f9c <movimientoRC+0x444>
		break;
 8001f82:	bf00      	nop
 8001f84:	e00a      	b.n	8001f9c <movimientoRC+0x444>
			if (giroIzq_cant > ((acum_encoderL + acum_encoderR) >> 1) ) break;
 8001f86:	bf00      	nop
 8001f88:	e008      	b.n	8001f9c <movimientoRC+0x444>
		break;
 8001f8a:	bf00      	nop
 8001f8c:	e006      	b.n	8001f9c <movimientoRC+0x444>
			if (giroDer_cant > ((acum_encoderL + acum_encoderR) >> 1) ) break;
 8001f8e:	bf00      	nop
 8001f90:	e004      	b.n	8001f9c <movimientoRC+0x444>
		break;
 8001f92:	bf00      	nop
 8001f94:	e002      	b.n	8001f9c <movimientoRC+0x444>
			if (retroceso_cant > ((acum_encoderL + acum_encoderR) >> 1) ) break;
 8001f96:	bf00      	nop
 8001f98:	e000      	b.n	8001f9c <movimientoRC+0x444>
		break;
 8001f9a:	bf00      	nop

	} //fin switch status_movimiento

} //fin movimientoRC()
 8001f9c:	bf00      	nop
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	40020c00 	.word	0x40020c00
 8001fa4:	40020800 	.word	0x40020800
 8001fa8:	20000001 	.word	0x20000001
 8001fac:	20000002 	.word	0x20000002
 8001fb0:	200000b8 	.word	0x200000b8
 8001fb4:	200000dc 	.word	0x200000dc
 8001fb8:	200000de 	.word	0x200000de
 8001fbc:	200000b1 	.word	0x200000b1
 8001fc0:	200000b2 	.word	0x200000b2
 8001fc4:	200000b4 	.word	0x200000b4
 8001fc8:	200000b6 	.word	0x200000b6

08001fcc <encoders>:

void encoders (void){
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0

	if (!flag_encoders) return;
 8001fd0:	4b2b      	ldr	r3, [pc, #172]	; (8002080 <encoders+0xb4>)
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d04d      	beq.n	8002074 <encoders+0xa8>

	encoderL = __HAL_TIM_GET_COUNTER(&htim3);
 8001fd8:	4b2a      	ldr	r3, [pc, #168]	; (8002084 <encoders+0xb8>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fde:	b21a      	sxth	r2, r3
 8001fe0:	4b29      	ldr	r3, [pc, #164]	; (8002088 <encoders+0xbc>)
 8001fe2:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8001fe4:	4b27      	ldr	r3, [pc, #156]	; (8002084 <encoders+0xb8>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	625a      	str	r2, [r3, #36]	; 0x24
	encoderR = __HAL_TIM_GET_COUNTER(&htim2);
 8001fec:	4b27      	ldr	r3, [pc, #156]	; (800208c <encoders+0xc0>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff2:	b21a      	sxth	r2, r3
 8001ff4:	4b26      	ldr	r3, [pc, #152]	; (8002090 <encoders+0xc4>)
 8001ff6:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8001ff8:	4b24      	ldr	r3, [pc, #144]	; (800208c <encoders+0xc0>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	625a      	str	r2, [r3, #36]	; 0x24
//	}else if (encoderL < velL){
//		if (TIM4->CCR1 < 85)
//			TIM4->CCR1++;
//	}

	TIM4->CCR1 += velL - encoderL;
 8002000:	4b24      	ldr	r3, [pc, #144]	; (8002094 <encoders+0xc8>)
 8002002:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002004:	4a24      	ldr	r2, [pc, #144]	; (8002098 <encoders+0xcc>)
 8002006:	f992 2000 	ldrsb.w	r2, [r2]
 800200a:	4611      	mov	r1, r2
 800200c:	4a1e      	ldr	r2, [pc, #120]	; (8002088 <encoders+0xbc>)
 800200e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002012:	1a8a      	subs	r2, r1, r2
 8002014:	4611      	mov	r1, r2
 8002016:	4a1f      	ldr	r2, [pc, #124]	; (8002094 <encoders+0xc8>)
 8002018:	440b      	add	r3, r1
 800201a:	6353      	str	r3, [r2, #52]	; 0x34
//	}else if (encoderR < velR){
//		if (TIM4->CCR2 < 85)
//			TIM4->CCR2++;
//	}

	TIM4->CCR2 += velR - encoderR;
 800201c:	4b1d      	ldr	r3, [pc, #116]	; (8002094 <encoders+0xc8>)
 800201e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002020:	4a1e      	ldr	r2, [pc, #120]	; (800209c <encoders+0xd0>)
 8002022:	f992 2000 	ldrsb.w	r2, [r2]
 8002026:	4611      	mov	r1, r2
 8002028:	4a19      	ldr	r2, [pc, #100]	; (8002090 <encoders+0xc4>)
 800202a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800202e:	1a8a      	subs	r2, r1, r2
 8002030:	4611      	mov	r1, r2
 8002032:	4a18      	ldr	r2, [pc, #96]	; (8002094 <encoders+0xc8>)
 8002034:	440b      	add	r3, r1
 8002036:	6393      	str	r3, [r2, #56]	; 0x38
//	if (TIM4->CCR2 < 62) TIM4->CCR2 = 62;
//	if (TIM4->CCR2 > 82) TIM4->CCR2 = 82;

	acum_encoderL += encoderL;
 8002038:	4b19      	ldr	r3, [pc, #100]	; (80020a0 <encoders+0xd4>)
 800203a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800203e:	b29a      	uxth	r2, r3
 8002040:	4b11      	ldr	r3, [pc, #68]	; (8002088 <encoders+0xbc>)
 8002042:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002046:	b29b      	uxth	r3, r3
 8002048:	4413      	add	r3, r2
 800204a:	b29b      	uxth	r3, r3
 800204c:	b21a      	sxth	r2, r3
 800204e:	4b14      	ldr	r3, [pc, #80]	; (80020a0 <encoders+0xd4>)
 8002050:	801a      	strh	r2, [r3, #0]
	acum_encoderR += encoderR;
 8002052:	4b14      	ldr	r3, [pc, #80]	; (80020a4 <encoders+0xd8>)
 8002054:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002058:	b29a      	uxth	r2, r3
 800205a:	4b0d      	ldr	r3, [pc, #52]	; (8002090 <encoders+0xc4>)
 800205c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002060:	b29b      	uxth	r3, r3
 8002062:	4413      	add	r3, r2
 8002064:	b29b      	uxth	r3, r3
 8002066:	b21a      	sxth	r2, r3
 8002068:	4b0e      	ldr	r3, [pc, #56]	; (80020a4 <encoders+0xd8>)
 800206a:	801a      	strh	r2, [r3, #0]

	flag_encoders = 0;
 800206c:	4b04      	ldr	r3, [pc, #16]	; (8002080 <encoders+0xb4>)
 800206e:	2200      	movs	r2, #0
 8002070:	701a      	strb	r2, [r3, #0]
 8002072:	e000      	b.n	8002076 <encoders+0xaa>
	if (!flag_encoders) return;
 8002074:	bf00      	nop

} //fin encoders()
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	200000d6 	.word	0x200000d6
 8002084:	20000130 	.word	0x20000130
 8002088:	200000d8 	.word	0x200000d8
 800208c:	200000f0 	.word	0x200000f0
 8002090:	200000da 	.word	0x200000da
 8002094:	40000800 	.word	0x40000800
 8002098:	20000001 	.word	0x20000001
 800209c:	20000002 	.word	0x20000002
 80020a0:	200000dc 	.word	0x200000dc
 80020a4:	200000de 	.word	0x200000de

080020a8 <modo_funcionamiento>:

	HAL_UART_Receive_IT(&huart7, rxUart, 4);

} //end check_rxUart ()

void modo_funcionamiento (void){
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0

	switch (modoFuncionamiento) {
 80020ac:	4b08      	ldr	r3, [pc, #32]	; (80020d0 <modo_funcionamiento+0x28>)
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d002      	beq.n	80020ba <modo_funcionamiento+0x12>
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d005      	beq.n	80020c4 <modo_funcionamiento+0x1c>
		break;
		case MANUAL:
			movimientoRC();
		break;
		default:
		break;
 80020b8:	e007      	b.n	80020ca <modo_funcionamiento+0x22>
			movimientoLibre();
 80020ba:	f7ff fc57 	bl	800196c <movimientoLibre>
			encoders();
 80020be:	f7ff ff85 	bl	8001fcc <encoders>
		break;
 80020c2:	e002      	b.n	80020ca <modo_funcionamiento+0x22>
			movimientoRC();
 80020c4:	f7ff fd48 	bl	8001b58 <movimientoRC>
		break;
 80020c8:	bf00      	nop
	} //end switch modoFuncionamiento

} //end modo_funcionamiento ()
 80020ca:	bf00      	nop
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	20000000 	.word	0x20000000

080020d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80020d8:	bf00      	nop
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
	...

080020e4 <mpu9265_Init>:





void mpu9265_Init(I2C_HandleTypeDef* i2c_handler){
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b088      	sub	sp, #32
 80020e8:	af04      	add	r7, sp, #16
 80020ea:	6078      	str	r0, [r7, #4]
	uint8_t check, data;

	hi2c_mpu = i2c_handler;
 80020ec:	4aa3      	ldr	r2, [pc, #652]	; (800237c <mpu9265_Init+0x298>)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6013      	str	r3, [r2, #0]

	HAL_I2C_Mem_Read(hi2c_mpu, MPU9250_ADDRESS << 1, WHO_AM_I_MPU9250, 1, &check, 1, 1000);
 80020f2:	4ba2      	ldr	r3, [pc, #648]	; (800237c <mpu9265_Init+0x298>)
 80020f4:	6818      	ldr	r0, [r3, #0]
 80020f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020fa:	9302      	str	r3, [sp, #8]
 80020fc:	2301      	movs	r3, #1
 80020fe:	9301      	str	r3, [sp, #4]
 8002100:	f107 030f 	add.w	r3, r7, #15
 8002104:	9300      	str	r3, [sp, #0]
 8002106:	2301      	movs	r3, #1
 8002108:	2275      	movs	r2, #117	; 0x75
 800210a:	21d0      	movs	r1, #208	; 0xd0
 800210c:	f001 fc1e 	bl	800394c <HAL_I2C_Mem_Read>

	if (check == 0X73){ //successfull respond
 8002110:	7bfb      	ldrb	r3, [r7, #15]
 8002112:	2b73      	cmp	r3, #115	; 0x73
 8002114:	d141      	bne.n	800219a <mpu9265_Init+0xb6>
		data = 0;
 8002116:	2300      	movs	r3, #0
 8002118:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(hi2c_mpu, MPU9250_ADDRESS << 1, PWR_MGMT_1, 1, &data, 1, 1000); //writing 0 in PWR_MGMT_1 reg to wake it up.
 800211a:	4b98      	ldr	r3, [pc, #608]	; (800237c <mpu9265_Init+0x298>)
 800211c:	6818      	ldr	r0, [r3, #0]
 800211e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002122:	9302      	str	r3, [sp, #8]
 8002124:	2301      	movs	r3, #1
 8002126:	9301      	str	r3, [sp, #4]
 8002128:	f107 030e 	add.w	r3, r7, #14
 800212c:	9300      	str	r3, [sp, #0]
 800212e:	2301      	movs	r3, #1
 8002130:	226b      	movs	r2, #107	; 0x6b
 8002132:	21d0      	movs	r1, #208	; 0xd0
 8002134:	f001 fb10 	bl	8003758 <HAL_I2C_Mem_Write>

		data = 0X07;
 8002138:	2307      	movs	r3, #7
 800213a:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(hi2c_mpu, MPU9250_ADDRESS << 1, SMPLRT_DIV, 1, &data, 1, 1000); //seting data rate in 1kHz by writing 0x07 in SMPLRT_DIV reg.
 800213c:	4b8f      	ldr	r3, [pc, #572]	; (800237c <mpu9265_Init+0x298>)
 800213e:	6818      	ldr	r0, [r3, #0]
 8002140:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002144:	9302      	str	r3, [sp, #8]
 8002146:	2301      	movs	r3, #1
 8002148:	9301      	str	r3, [sp, #4]
 800214a:	f107 030e 	add.w	r3, r7, #14
 800214e:	9300      	str	r3, [sp, #0]
 8002150:	2301      	movs	r3, #1
 8002152:	2219      	movs	r2, #25
 8002154:	21d0      	movs	r1, #208	; 0xd0
 8002156:	f001 faff 	bl	8003758 <HAL_I2C_Mem_Write>

		data = 0;
 800215a:	2300      	movs	r3, #0
 800215c:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(hi2c_mpu, MPU9250_ADDRESS << 1, GYRO_CONFIG, 1, &data, 1, 1000); //SET GYROSCOPIC CONFIGURATION: XG_ST=0; YG_ST=0; ZG_ST=0; FS_SEL=0 -> +/- 250 º/s.
 800215e:	4b87      	ldr	r3, [pc, #540]	; (800237c <mpu9265_Init+0x298>)
 8002160:	6818      	ldr	r0, [r3, #0]
 8002162:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002166:	9302      	str	r3, [sp, #8]
 8002168:	2301      	movs	r3, #1
 800216a:	9301      	str	r3, [sp, #4]
 800216c:	f107 030e 	add.w	r3, r7, #14
 8002170:	9300      	str	r3, [sp, #0]
 8002172:	2301      	movs	r3, #1
 8002174:	221b      	movs	r2, #27
 8002176:	21d0      	movs	r1, #208	; 0xd0
 8002178:	f001 faee 	bl	8003758 <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Write(hi2c_mpu, MPU9250_ADDRESS << 1, ACCEL_CONFIG, 1, &data, 1, 1000); //SET accelerometer CONFIGURATION: XA_ST=0; YA_ST=0; ZA_ST=0; FS_SEL=0 -> +/- 2g.
 800217c:	4b7f      	ldr	r3, [pc, #508]	; (800237c <mpu9265_Init+0x298>)
 800217e:	6818      	ldr	r0, [r3, #0]
 8002180:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002184:	9302      	str	r3, [sp, #8]
 8002186:	2301      	movs	r3, #1
 8002188:	9301      	str	r3, [sp, #4]
 800218a:	f107 030e 	add.w	r3, r7, #14
 800218e:	9300      	str	r3, [sp, #0]
 8002190:	2301      	movs	r3, #1
 8002192:	221c      	movs	r2, #28
 8002194:	21d0      	movs	r1, #208	; 0xd0
 8002196:	f001 fadf 	bl	8003758 <HAL_I2C_Mem_Write>
	}else{
		//Error_Handler();
	}

	//magnetometer//
	data = 0b10; //i2c bypass bit, in INT_PIN_CFG reg. (made to reach the magnetometer)
 800219a:	2302      	movs	r3, #2
 800219c:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(hi2c_mpu, MPU9250_ADDRESS << 1, INT_PIN_CFG, 1, &data, 1, 1000);
 800219e:	4b77      	ldr	r3, [pc, #476]	; (800237c <mpu9265_Init+0x298>)
 80021a0:	6818      	ldr	r0, [r3, #0]
 80021a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021a6:	9302      	str	r3, [sp, #8]
 80021a8:	2301      	movs	r3, #1
 80021aa:	9301      	str	r3, [sp, #4]
 80021ac:	f107 030e 	add.w	r3, r7, #14
 80021b0:	9300      	str	r3, [sp, #0]
 80021b2:	2301      	movs	r3, #1
 80021b4:	2237      	movs	r2, #55	; 0x37
 80021b6:	21d0      	movs	r1, #208	; 0xd0
 80021b8:	f001 face 	bl	8003758 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Read(hi2c_mpu, AK8963_ADDRESS << 1, WHO_AM_I_AK8963, 1, &check, 1, 1000);
 80021bc:	4b6f      	ldr	r3, [pc, #444]	; (800237c <mpu9265_Init+0x298>)
 80021be:	6818      	ldr	r0, [r3, #0]
 80021c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021c4:	9302      	str	r3, [sp, #8]
 80021c6:	2301      	movs	r3, #1
 80021c8:	9301      	str	r3, [sp, #4]
 80021ca:	f107 030f 	add.w	r3, r7, #15
 80021ce:	9300      	str	r3, [sp, #0]
 80021d0:	2301      	movs	r3, #1
 80021d2:	2200      	movs	r2, #0
 80021d4:	2118      	movs	r1, #24
 80021d6:	f001 fbb9 	bl	800394c <HAL_I2C_Mem_Read>
	HAL_Delay(1);
 80021da:	2001      	movs	r0, #1
 80021dc:	f000 fdd4 	bl	8002d88 <HAL_Delay>
	if (check == 0X48){ //successfull respond
 80021e0:	7bfb      	ldrb	r3, [r7, #15]
 80021e2:	2b48      	cmp	r3, #72	; 0x48
 80021e4:	f040 80c5 	bne.w	8002372 <mpu9265_Init+0x28e>

		//Power down magnetometer
		data = 0x00;
 80021e8:	2300      	movs	r3, #0
 80021ea:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(hi2c_mpu, AK8963_ADDRESS << 1, AK8963_CNTL, 1, &data, 1, 1000);
 80021ec:	4b63      	ldr	r3, [pc, #396]	; (800237c <mpu9265_Init+0x298>)
 80021ee:	6818      	ldr	r0, [r3, #0]
 80021f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021f4:	9302      	str	r3, [sp, #8]
 80021f6:	2301      	movs	r3, #1
 80021f8:	9301      	str	r3, [sp, #4]
 80021fa:	f107 030e 	add.w	r3, r7, #14
 80021fe:	9300      	str	r3, [sp, #0]
 8002200:	2301      	movs	r3, #1
 8002202:	220a      	movs	r2, #10
 8002204:	2118      	movs	r1, #24
 8002206:	f001 faa7 	bl	8003758 <HAL_I2C_Mem_Write>
		HAL_Delay(100);
 800220a:	2064      	movs	r0, #100	; 0x64
 800220c:	f000 fdbc 	bl	8002d88 <HAL_Delay>

		//Enter Fuse ROM access mode
		data = 0x0F; //Fuse ROM access mode
 8002210:	230f      	movs	r3, #15
 8002212:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(hi2c_mpu, AK8963_ADDRESS << 1, AK8963_CNTL, 1, &data, 1, 1000); //Control 1 register
 8002214:	4b59      	ldr	r3, [pc, #356]	; (800237c <mpu9265_Init+0x298>)
 8002216:	6818      	ldr	r0, [r3, #0]
 8002218:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800221c:	9302      	str	r3, [sp, #8]
 800221e:	2301      	movs	r3, #1
 8002220:	9301      	str	r3, [sp, #4]
 8002222:	f107 030e 	add.w	r3, r7, #14
 8002226:	9300      	str	r3, [sp, #0]
 8002228:	2301      	movs	r3, #1
 800222a:	220a      	movs	r2, #10
 800222c:	2118      	movs	r1, #24
 800222e:	f001 fa93 	bl	8003758 <HAL_I2C_Mem_Write>
		HAL_Delay(100);
 8002232:	2064      	movs	r0, #100	; 0x64
 8002234:	f000 fda8 	bl	8002d88 <HAL_Delay>

		//Read the x-, y-, and z-axis calibration values
		uint8_t rawMagCalData[3];
		HAL_I2C_Mem_Read(hi2c_mpu, AK8963_ADDRESS << 1, AK8963_ASAX, 1, &rawMagCalData[0], 3, 1000); //Sensitivity Adjustment values registers (read-only)
 8002238:	4b50      	ldr	r3, [pc, #320]	; (800237c <mpu9265_Init+0x298>)
 800223a:	6818      	ldr	r0, [r3, #0]
 800223c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002240:	9302      	str	r3, [sp, #8]
 8002242:	2303      	movs	r3, #3
 8002244:	9301      	str	r3, [sp, #4]
 8002246:	f107 0308 	add.w	r3, r7, #8
 800224a:	9300      	str	r3, [sp, #0]
 800224c:	2301      	movs	r3, #1
 800224e:	2210      	movs	r2, #16
 8002250:	2118      	movs	r1, #24
 8002252:	f001 fb7b 	bl	800394c <HAL_I2C_Mem_Read>
		calMagX =  (float)(rawMagCalData[0] - 128)/256. + 1.;   // Return x-axis sensitivity adjustment values, etc.
 8002256:	7a3b      	ldrb	r3, [r7, #8]
 8002258:	3b80      	subs	r3, #128	; 0x80
 800225a:	ee07 3a90 	vmov	s15, r3
 800225e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002262:	ee17 0a90 	vmov	r0, s15
 8002266:	f7fe f925 	bl	80004b4 <__aeabi_f2d>
 800226a:	f04f 0200 	mov.w	r2, #0
 800226e:	4b44      	ldr	r3, [pc, #272]	; (8002380 <mpu9265_Init+0x29c>)
 8002270:	f7fe faa2 	bl	80007b8 <__aeabi_ddiv>
 8002274:	4602      	mov	r2, r0
 8002276:	460b      	mov	r3, r1
 8002278:	4610      	mov	r0, r2
 800227a:	4619      	mov	r1, r3
 800227c:	f04f 0200 	mov.w	r2, #0
 8002280:	4b40      	ldr	r3, [pc, #256]	; (8002384 <mpu9265_Init+0x2a0>)
 8002282:	f7fd ffb9 	bl	80001f8 <__adddf3>
 8002286:	4602      	mov	r2, r0
 8002288:	460b      	mov	r3, r1
 800228a:	4610      	mov	r0, r2
 800228c:	4619      	mov	r1, r3
 800228e:	f7fe fb7b 	bl	8000988 <__aeabi_d2f>
 8002292:	4603      	mov	r3, r0
 8002294:	4a3c      	ldr	r2, [pc, #240]	; (8002388 <mpu9265_Init+0x2a4>)
 8002296:	6013      	str	r3, [r2, #0]
		calMagY =  (float)(rawMagCalData[1] - 128)/256. + 1.;
 8002298:	7a7b      	ldrb	r3, [r7, #9]
 800229a:	3b80      	subs	r3, #128	; 0x80
 800229c:	ee07 3a90 	vmov	s15, r3
 80022a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022a4:	ee17 0a90 	vmov	r0, s15
 80022a8:	f7fe f904 	bl	80004b4 <__aeabi_f2d>
 80022ac:	f04f 0200 	mov.w	r2, #0
 80022b0:	4b33      	ldr	r3, [pc, #204]	; (8002380 <mpu9265_Init+0x29c>)
 80022b2:	f7fe fa81 	bl	80007b8 <__aeabi_ddiv>
 80022b6:	4602      	mov	r2, r0
 80022b8:	460b      	mov	r3, r1
 80022ba:	4610      	mov	r0, r2
 80022bc:	4619      	mov	r1, r3
 80022be:	f04f 0200 	mov.w	r2, #0
 80022c2:	4b30      	ldr	r3, [pc, #192]	; (8002384 <mpu9265_Init+0x2a0>)
 80022c4:	f7fd ff98 	bl	80001f8 <__adddf3>
 80022c8:	4602      	mov	r2, r0
 80022ca:	460b      	mov	r3, r1
 80022cc:	4610      	mov	r0, r2
 80022ce:	4619      	mov	r1, r3
 80022d0:	f7fe fb5a 	bl	8000988 <__aeabi_d2f>
 80022d4:	4603      	mov	r3, r0
 80022d6:	4a2d      	ldr	r2, [pc, #180]	; (800238c <mpu9265_Init+0x2a8>)
 80022d8:	6013      	str	r3, [r2, #0]
		calMagZ =  (float)(rawMagCalData[2] - 128)/256. + 1.;
 80022da:	7abb      	ldrb	r3, [r7, #10]
 80022dc:	3b80      	subs	r3, #128	; 0x80
 80022de:	ee07 3a90 	vmov	s15, r3
 80022e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022e6:	ee17 0a90 	vmov	r0, s15
 80022ea:	f7fe f8e3 	bl	80004b4 <__aeabi_f2d>
 80022ee:	f04f 0200 	mov.w	r2, #0
 80022f2:	4b23      	ldr	r3, [pc, #140]	; (8002380 <mpu9265_Init+0x29c>)
 80022f4:	f7fe fa60 	bl	80007b8 <__aeabi_ddiv>
 80022f8:	4602      	mov	r2, r0
 80022fa:	460b      	mov	r3, r1
 80022fc:	4610      	mov	r0, r2
 80022fe:	4619      	mov	r1, r3
 8002300:	f04f 0200 	mov.w	r2, #0
 8002304:	4b1f      	ldr	r3, [pc, #124]	; (8002384 <mpu9265_Init+0x2a0>)
 8002306:	f7fd ff77 	bl	80001f8 <__adddf3>
 800230a:	4602      	mov	r2, r0
 800230c:	460b      	mov	r3, r1
 800230e:	4610      	mov	r0, r2
 8002310:	4619      	mov	r1, r3
 8002312:	f7fe fb39 	bl	8000988 <__aeabi_d2f>
 8002316:	4603      	mov	r3, r0
 8002318:	4a1d      	ldr	r2, [pc, #116]	; (8002390 <mpu9265_Init+0x2ac>)
 800231a:	6013      	str	r3, [r2, #0]
		HAL_Delay(100);
 800231c:	2064      	movs	r0, #100	; 0x64
 800231e:	f000 fd33 	bl	8002d88 <HAL_Delay>

		//Power down magnetometer
		data = 0x00;
 8002322:	2300      	movs	r3, #0
 8002324:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(hi2c_mpu, AK8963_ADDRESS << 1, AK8963_CNTL, 1, &data, 1, 1000);
 8002326:	4b15      	ldr	r3, [pc, #84]	; (800237c <mpu9265_Init+0x298>)
 8002328:	6818      	ldr	r0, [r3, #0]
 800232a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800232e:	9302      	str	r3, [sp, #8]
 8002330:	2301      	movs	r3, #1
 8002332:	9301      	str	r3, [sp, #4]
 8002334:	f107 030e 	add.w	r3, r7, #14
 8002338:	9300      	str	r3, [sp, #0]
 800233a:	2301      	movs	r3, #1
 800233c:	220a      	movs	r2, #10
 800233e:	2118      	movs	r1, #24
 8002340:	f001 fa0a 	bl	8003758 <HAL_I2C_Mem_Write>
		HAL_Delay(100);
 8002344:	2064      	movs	r0, #100	; 0x64
 8002346:	f000 fd1f 	bl	8002d88 <HAL_Delay>

		//Set magnetometer data resolution and sample ODR
		data = 0b10010; // 0b10110: 0001 (MSB, 16 bit resolution) 0010 (LSB, 8Hz sample rate (Continuous measurement mode 1) ).
 800234a:	2312      	movs	r3, #18
 800234c:	73bb      	strb	r3, [r7, #14]
//		data = 0B10110; // 0b10110: 0001 (MSB, 16 bit resolution) 0110 (LSB, 100Hz sample rate (Continuous measurement mode 2) ).
		HAL_I2C_Mem_Write(hi2c_mpu, AK8963_ADDRESS << 1, AK8963_CNTL, 1, &data, 1, 1000);
 800234e:	4b0b      	ldr	r3, [pc, #44]	; (800237c <mpu9265_Init+0x298>)
 8002350:	6818      	ldr	r0, [r3, #0]
 8002352:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002356:	9302      	str	r3, [sp, #8]
 8002358:	2301      	movs	r3, #1
 800235a:	9301      	str	r3, [sp, #4]
 800235c:	f107 030e 	add.w	r3, r7, #14
 8002360:	9300      	str	r3, [sp, #0]
 8002362:	2301      	movs	r3, #1
 8002364:	220a      	movs	r2, #10
 8002366:	2118      	movs	r1, #24
 8002368:	f001 f9f6 	bl	8003758 <HAL_I2C_Mem_Write>
		HAL_Delay(100);
 800236c:	2064      	movs	r0, #100	; 0x64
 800236e:	f000 fd0b 	bl	8002d88 <HAL_Delay>
		//Error_Handler();
	}



}
 8002372:	bf00      	nop
 8002374:	3710      	adds	r7, #16
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	200000e0 	.word	0x200000e0
 8002380:	40700000 	.word	0x40700000
 8002384:	3ff00000 	.word	0x3ff00000
 8002388:	200000e4 	.word	0x200000e4
 800238c:	200000e8 	.word	0x200000e8
 8002390:	200000ec 	.word	0x200000ec

08002394 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800239a:	2300      	movs	r3, #0
 800239c:	607b      	str	r3, [r7, #4]
 800239e:	4b10      	ldr	r3, [pc, #64]	; (80023e0 <HAL_MspInit+0x4c>)
 80023a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a2:	4a0f      	ldr	r2, [pc, #60]	; (80023e0 <HAL_MspInit+0x4c>)
 80023a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023a8:	6453      	str	r3, [r2, #68]	; 0x44
 80023aa:	4b0d      	ldr	r3, [pc, #52]	; (80023e0 <HAL_MspInit+0x4c>)
 80023ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023b2:	607b      	str	r3, [r7, #4]
 80023b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023b6:	2300      	movs	r3, #0
 80023b8:	603b      	str	r3, [r7, #0]
 80023ba:	4b09      	ldr	r3, [pc, #36]	; (80023e0 <HAL_MspInit+0x4c>)
 80023bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023be:	4a08      	ldr	r2, [pc, #32]	; (80023e0 <HAL_MspInit+0x4c>)
 80023c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023c4:	6413      	str	r3, [r2, #64]	; 0x40
 80023c6:	4b06      	ldr	r3, [pc, #24]	; (80023e0 <HAL_MspInit+0x4c>)
 80023c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ce:	603b      	str	r3, [r7, #0]
 80023d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023d2:	bf00      	nop
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	40023800 	.word	0x40023800

080023e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80023e8:	bf00      	nop
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr

080023f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023f2:	b480      	push	{r7}
 80023f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023f6:	e7fe      	b.n	80023f6 <HardFault_Handler+0x4>

080023f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023fc:	e7fe      	b.n	80023fc <MemManage_Handler+0x4>

080023fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023fe:	b480      	push	{r7}
 8002400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002402:	e7fe      	b.n	8002402 <BusFault_Handler+0x4>

08002404 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002408:	e7fe      	b.n	8002408 <UsageFault_Handler+0x4>

0800240a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800240a:	b480      	push	{r7}
 800240c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800240e:	bf00      	nop
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800241c:	bf00      	nop
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr

08002426 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002426:	b480      	push	{r7}
 8002428:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800242a:	bf00      	nop
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002438:	f000 fc86 	bl	8002d48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800243c:	bf00      	nop
 800243e:	bd80      	pop	{r7, pc}

08002440 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002444:	4802      	ldr	r0, [pc, #8]	; (8002450 <TIM5_IRQHandler+0x10>)
 8002446:	f002 fedf 	bl	8005208 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800244a:	bf00      	nop
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	200001b0 	.word	0x200001b0

08002454 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002458:	4802      	ldr	r0, [pc, #8]	; (8002464 <TIM7_IRQHandler+0x10>)
 800245a:	f002 fed5 	bl	8005208 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800245e:	bf00      	nop
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	200001f0 	.word	0x200001f0

08002468 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 800246c:	4802      	ldr	r0, [pc, #8]	; (8002478 <UART7_IRQHandler+0x10>)
 800246e:	f004 f86f 	bl	8006550 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8002472:	bf00      	nop
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	20000230 	.word	0x20000230

0800247c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002480:	4b08      	ldr	r3, [pc, #32]	; (80024a4 <SystemInit+0x28>)
 8002482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002486:	4a07      	ldr	r2, [pc, #28]	; (80024a4 <SystemInit+0x28>)
 8002488:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800248c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002490:	4b04      	ldr	r3, [pc, #16]	; (80024a4 <SystemInit+0x28>)
 8002492:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002496:	609a      	str	r2, [r3, #8]
#endif
}
 8002498:	bf00      	nop
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	e000ed00 	.word	0xe000ed00

080024a8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024ae:	f107 0308 	add.w	r3, r7, #8
 80024b2:	2200      	movs	r2, #0
 80024b4:	601a      	str	r2, [r3, #0]
 80024b6:	605a      	str	r2, [r3, #4]
 80024b8:	609a      	str	r2, [r3, #8]
 80024ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024bc:	463b      	mov	r3, r7
 80024be:	2200      	movs	r2, #0
 80024c0:	601a      	str	r2, [r3, #0]
 80024c2:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 80024c4:	4b20      	ldr	r3, [pc, #128]	; (8002548 <MX_TIM2_Init+0xa0>)
 80024c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80024cc:	4b1e      	ldr	r3, [pc, #120]	; (8002548 <MX_TIM2_Init+0xa0>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024d2:	4b1d      	ldr	r3, [pc, #116]	; (8002548 <MX_TIM2_Init+0xa0>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80024d8:	4b1b      	ldr	r3, [pc, #108]	; (8002548 <MX_TIM2_Init+0xa0>)
 80024da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80024de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024e0:	4b19      	ldr	r3, [pc, #100]	; (8002548 <MX_TIM2_Init+0xa0>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024e6:	4b18      	ldr	r3, [pc, #96]	; (8002548 <MX_TIM2_Init+0xa0>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80024ec:	4816      	ldr	r0, [pc, #88]	; (8002548 <MX_TIM2_Init+0xa0>)
 80024ee:	f002 fd07 	bl	8004f00 <HAL_TIM_Base_Init>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80024f8:	f7ff fdec 	bl	80020d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 80024fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002500:	60bb      	str	r3, [r7, #8]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8002502:	2300      	movs	r3, #0
 8002504:	60fb      	str	r3, [r7, #12]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8002506:	2300      	movs	r3, #0
 8002508:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockFilter = 0;
 800250a:	2300      	movs	r3, #0
 800250c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800250e:	f107 0308 	add.w	r3, r7, #8
 8002512:	4619      	mov	r1, r3
 8002514:	480c      	ldr	r0, [pc, #48]	; (8002548 <MX_TIM2_Init+0xa0>)
 8002516:	f003 f8e1 	bl	80056dc <HAL_TIM_ConfigClockSource>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8002520:	f7ff fdd8 	bl	80020d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002524:	2300      	movs	r3, #0
 8002526:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002528:	2300      	movs	r3, #0
 800252a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800252c:	463b      	mov	r3, r7
 800252e:	4619      	mov	r1, r3
 8002530:	4805      	ldr	r0, [pc, #20]	; (8002548 <MX_TIM2_Init+0xa0>)
 8002532:	f003 fdef 	bl	8006114 <HAL_TIMEx_MasterConfigSynchronization>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d001      	beq.n	8002540 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800253c:	f7ff fdca 	bl	80020d4 <Error_Handler>
  }

}
 8002540:	bf00      	nop
 8002542:	3718      	adds	r7, #24
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	200000f0 	.word	0x200000f0

0800254c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b086      	sub	sp, #24
 8002550:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002552:	f107 0308 	add.w	r3, r7, #8
 8002556:	2200      	movs	r2, #0
 8002558:	601a      	str	r2, [r3, #0]
 800255a:	605a      	str	r2, [r3, #4]
 800255c:	609a      	str	r2, [r3, #8]
 800255e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002560:	463b      	mov	r3, r7
 8002562:	2200      	movs	r2, #0
 8002564:	601a      	str	r2, [r3, #0]
 8002566:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8002568:	4b20      	ldr	r3, [pc, #128]	; (80025ec <MX_TIM3_Init+0xa0>)
 800256a:	4a21      	ldr	r2, [pc, #132]	; (80025f0 <MX_TIM3_Init+0xa4>)
 800256c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800256e:	4b1f      	ldr	r3, [pc, #124]	; (80025ec <MX_TIM3_Init+0xa0>)
 8002570:	2200      	movs	r2, #0
 8002572:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002574:	4b1d      	ldr	r3, [pc, #116]	; (80025ec <MX_TIM3_Init+0xa0>)
 8002576:	2200      	movs	r2, #0
 8002578:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800257a:	4b1c      	ldr	r3, [pc, #112]	; (80025ec <MX_TIM3_Init+0xa0>)
 800257c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002580:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002582:	4b1a      	ldr	r3, [pc, #104]	; (80025ec <MX_TIM3_Init+0xa0>)
 8002584:	2200      	movs	r2, #0
 8002586:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002588:	4b18      	ldr	r3, [pc, #96]	; (80025ec <MX_TIM3_Init+0xa0>)
 800258a:	2200      	movs	r2, #0
 800258c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800258e:	4817      	ldr	r0, [pc, #92]	; (80025ec <MX_TIM3_Init+0xa0>)
 8002590:	f002 fcb6 	bl	8004f00 <HAL_TIM_Base_Init>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800259a:	f7ff fd9b 	bl	80020d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 800259e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025a2:	60bb      	str	r3, [r7, #8]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 80025a4:	2300      	movs	r3, #0
 80025a6:	60fb      	str	r3, [r7, #12]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 80025a8:	2300      	movs	r3, #0
 80025aa:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockFilter = 0;
 80025ac:	2300      	movs	r3, #0
 80025ae:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80025b0:	f107 0308 	add.w	r3, r7, #8
 80025b4:	4619      	mov	r1, r3
 80025b6:	480d      	ldr	r0, [pc, #52]	; (80025ec <MX_TIM3_Init+0xa0>)
 80025b8:	f003 f890 	bl	80056dc <HAL_TIM_ConfigClockSource>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80025c2:	f7ff fd87 	bl	80020d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025c6:	2300      	movs	r3, #0
 80025c8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025ca:	2300      	movs	r3, #0
 80025cc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80025ce:	463b      	mov	r3, r7
 80025d0:	4619      	mov	r1, r3
 80025d2:	4806      	ldr	r0, [pc, #24]	; (80025ec <MX_TIM3_Init+0xa0>)
 80025d4:	f003 fd9e 	bl	8006114 <HAL_TIMEx_MasterConfigSynchronization>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80025de:	f7ff fd79 	bl	80020d4 <Error_Handler>
  }

}
 80025e2:	bf00      	nop
 80025e4:	3718      	adds	r7, #24
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	20000130 	.word	0x20000130
 80025f0:	40000400 	.word	0x40000400

080025f4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b08e      	sub	sp, #56	; 0x38
 80025f8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025fe:	2200      	movs	r2, #0
 8002600:	601a      	str	r2, [r3, #0]
 8002602:	605a      	str	r2, [r3, #4]
 8002604:	609a      	str	r2, [r3, #8]
 8002606:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002608:	f107 0320 	add.w	r3, r7, #32
 800260c:	2200      	movs	r2, #0
 800260e:	601a      	str	r2, [r3, #0]
 8002610:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002612:	1d3b      	adds	r3, r7, #4
 8002614:	2200      	movs	r2, #0
 8002616:	601a      	str	r2, [r3, #0]
 8002618:	605a      	str	r2, [r3, #4]
 800261a:	609a      	str	r2, [r3, #8]
 800261c:	60da      	str	r2, [r3, #12]
 800261e:	611a      	str	r2, [r3, #16]
 8002620:	615a      	str	r2, [r3, #20]
 8002622:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8002624:	4b31      	ldr	r3, [pc, #196]	; (80026ec <MX_TIM4_Init+0xf8>)
 8002626:	4a32      	ldr	r2, [pc, #200]	; (80026f0 <MX_TIM4_Init+0xfc>)
 8002628:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 15-1;
 800262a:	4b30      	ldr	r3, [pc, #192]	; (80026ec <MX_TIM4_Init+0xf8>)
 800262c:	220e      	movs	r2, #14
 800262e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002630:	4b2e      	ldr	r3, [pc, #184]	; (80026ec <MX_TIM4_Init+0xf8>)
 8002632:	2200      	movs	r2, #0
 8002634:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 200-1;
 8002636:	4b2d      	ldr	r3, [pc, #180]	; (80026ec <MX_TIM4_Init+0xf8>)
 8002638:	22c7      	movs	r2, #199	; 0xc7
 800263a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800263c:	4b2b      	ldr	r3, [pc, #172]	; (80026ec <MX_TIM4_Init+0xf8>)
 800263e:	2200      	movs	r2, #0
 8002640:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002642:	4b2a      	ldr	r3, [pc, #168]	; (80026ec <MX_TIM4_Init+0xf8>)
 8002644:	2200      	movs	r2, #0
 8002646:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002648:	4828      	ldr	r0, [pc, #160]	; (80026ec <MX_TIM4_Init+0xf8>)
 800264a:	f002 fc59 	bl	8004f00 <HAL_TIM_Base_Init>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d001      	beq.n	8002658 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8002654:	f7ff fd3e 	bl	80020d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002658:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800265c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800265e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002662:	4619      	mov	r1, r3
 8002664:	4821      	ldr	r0, [pc, #132]	; (80026ec <MX_TIM4_Init+0xf8>)
 8002666:	f003 f839 	bl	80056dc <HAL_TIM_ConfigClockSource>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8002670:	f7ff fd30 	bl	80020d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002674:	481d      	ldr	r0, [pc, #116]	; (80026ec <MX_TIM4_Init+0xf8>)
 8002676:	f002 fcb6 	bl	8004fe6 <HAL_TIM_PWM_Init>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8002680:	f7ff fd28 	bl	80020d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002684:	2300      	movs	r3, #0
 8002686:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002688:	2300      	movs	r3, #0
 800268a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800268c:	f107 0320 	add.w	r3, r7, #32
 8002690:	4619      	mov	r1, r3
 8002692:	4816      	ldr	r0, [pc, #88]	; (80026ec <MX_TIM4_Init+0xf8>)
 8002694:	f003 fd3e 	bl	8006114 <HAL_TIMEx_MasterConfigSynchronization>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 800269e:	f7ff fd19 	bl	80020d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026a2:	2360      	movs	r3, #96	; 0x60
 80026a4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 72-1;
 80026a6:	2347      	movs	r3, #71	; 0x47
 80026a8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026aa:	2300      	movs	r3, #0
 80026ac:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026ae:	2300      	movs	r3, #0
 80026b0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026b2:	1d3b      	adds	r3, r7, #4
 80026b4:	2200      	movs	r2, #0
 80026b6:	4619      	mov	r1, r3
 80026b8:	480c      	ldr	r0, [pc, #48]	; (80026ec <MX_TIM4_Init+0xf8>)
 80026ba:	f002 ff49 	bl	8005550 <HAL_TIM_PWM_ConfigChannel>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 80026c4:	f7ff fd06 	bl	80020d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80026c8:	1d3b      	adds	r3, r7, #4
 80026ca:	2204      	movs	r2, #4
 80026cc:	4619      	mov	r1, r3
 80026ce:	4807      	ldr	r0, [pc, #28]	; (80026ec <MX_TIM4_Init+0xf8>)
 80026d0:	f002 ff3e 	bl	8005550 <HAL_TIM_PWM_ConfigChannel>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <MX_TIM4_Init+0xea>
  {
    Error_Handler();
 80026da:	f7ff fcfb 	bl	80020d4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 80026de:	4803      	ldr	r0, [pc, #12]	; (80026ec <MX_TIM4_Init+0xf8>)
 80026e0:	f000 f9d8 	bl	8002a94 <HAL_TIM_MspPostInit>

}
 80026e4:	bf00      	nop
 80026e6:	3738      	adds	r7, #56	; 0x38
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	20000170 	.word	0x20000170
 80026f0:	40000800 	.word	0x40000800

080026f4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b092      	sub	sp, #72	; 0x48
 80026f8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026fa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80026fe:	2200      	movs	r2, #0
 8002700:	601a      	str	r2, [r3, #0]
 8002702:	605a      	str	r2, [r3, #4]
 8002704:	609a      	str	r2, [r3, #8]
 8002706:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002708:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002712:	f107 0314 	add.w	r3, r7, #20
 8002716:	2200      	movs	r2, #0
 8002718:	601a      	str	r2, [r3, #0]
 800271a:	605a      	str	r2, [r3, #4]
 800271c:	609a      	str	r2, [r3, #8]
 800271e:	60da      	str	r2, [r3, #12]
 8002720:	611a      	str	r2, [r3, #16]
 8002722:	615a      	str	r2, [r3, #20]
 8002724:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002726:	1d3b      	adds	r3, r7, #4
 8002728:	2200      	movs	r2, #0
 800272a:	601a      	str	r2, [r3, #0]
 800272c:	605a      	str	r2, [r3, #4]
 800272e:	609a      	str	r2, [r3, #8]
 8002730:	60da      	str	r2, [r3, #12]

  htim5.Instance = TIM5;
 8002732:	4b43      	ldr	r3, [pc, #268]	; (8002840 <MX_TIM5_Init+0x14c>)
 8002734:	4a43      	ldr	r2, [pc, #268]	; (8002844 <MX_TIM5_Init+0x150>)
 8002736:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 90-1;
 8002738:	4b41      	ldr	r3, [pc, #260]	; (8002840 <MX_TIM5_Init+0x14c>)
 800273a:	2259      	movs	r2, #89	; 0x59
 800273c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800273e:	4b40      	ldr	r3, [pc, #256]	; (8002840 <MX_TIM5_Init+0x14c>)
 8002740:	2200      	movs	r2, #0
 8002742:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002744:	4b3e      	ldr	r3, [pc, #248]	; (8002840 <MX_TIM5_Init+0x14c>)
 8002746:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800274a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800274c:	4b3c      	ldr	r3, [pc, #240]	; (8002840 <MX_TIM5_Init+0x14c>)
 800274e:	2200      	movs	r2, #0
 8002750:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002752:	4b3b      	ldr	r3, [pc, #236]	; (8002840 <MX_TIM5_Init+0x14c>)
 8002754:	2200      	movs	r2, #0
 8002756:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002758:	4839      	ldr	r0, [pc, #228]	; (8002840 <MX_TIM5_Init+0x14c>)
 800275a:	f002 fbd1 	bl	8004f00 <HAL_TIM_Base_Init>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d001      	beq.n	8002768 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8002764:	f7ff fcb6 	bl	80020d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002768:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800276c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800276e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002772:	4619      	mov	r1, r3
 8002774:	4832      	ldr	r0, [pc, #200]	; (8002840 <MX_TIM5_Init+0x14c>)
 8002776:	f002 ffb1 	bl	80056dc <HAL_TIM_ConfigClockSource>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d001      	beq.n	8002784 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8002780:	f7ff fca8 	bl	80020d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002784:	482e      	ldr	r0, [pc, #184]	; (8002840 <MX_TIM5_Init+0x14c>)
 8002786:	f002 fc2e 	bl	8004fe6 <HAL_TIM_PWM_Init>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d001      	beq.n	8002794 <MX_TIM5_Init+0xa0>
  {
    Error_Handler();
 8002790:	f7ff fca0 	bl	80020d4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8002794:	482a      	ldr	r0, [pc, #168]	; (8002840 <MX_TIM5_Init+0x14c>)
 8002796:	f002 fc99 	bl	80050cc <HAL_TIM_IC_Init>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d001      	beq.n	80027a4 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 80027a0:	f7ff fc98 	bl	80020d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027a4:	2300      	movs	r3, #0
 80027a6:	633b      	str	r3, [r7, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027a8:	2300      	movs	r3, #0
 80027aa:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80027ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80027b0:	4619      	mov	r1, r3
 80027b2:	4823      	ldr	r0, [pc, #140]	; (8002840 <MX_TIM5_Init+0x14c>)
 80027b4:	f003 fcae 	bl	8006114 <HAL_TIMEx_MasterConfigSynchronization>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <MX_TIM5_Init+0xce>
  {
    Error_Handler();
 80027be:	f7ff fc89 	bl	80020d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027c2:	2360      	movs	r3, #96	; 0x60
 80027c4:	617b      	str	r3, [r7, #20]
  sConfigOC.Pulse = 0xFFFFFFF5;
 80027c6:	f06f 030a 	mvn.w	r3, #10
 80027ca:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80027cc:	2302      	movs	r3, #2
 80027ce:	61fb      	str	r3, [r7, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027d0:	2300      	movs	r3, #0
 80027d2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80027d4:	f107 0314 	add.w	r3, r7, #20
 80027d8:	2200      	movs	r2, #0
 80027da:	4619      	mov	r1, r3
 80027dc:	4818      	ldr	r0, [pc, #96]	; (8002840 <MX_TIM5_Init+0x14c>)
 80027de:	f002 feb7 	bl	8005550 <HAL_TIM_PWM_ConfigChannel>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d001      	beq.n	80027ec <MX_TIM5_Init+0xf8>
  {
    Error_Handler();
 80027e8:	f7ff fc74 	bl	80020d4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80027ec:	2300      	movs	r3, #0
 80027ee:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80027f0:	2301      	movs	r3, #1
 80027f2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80027f4:	2300      	movs	r3, #0
 80027f6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80027f8:	2300      	movs	r3, #0
 80027fa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80027fc:	1d3b      	adds	r3, r7, #4
 80027fe:	2208      	movs	r2, #8
 8002800:	4619      	mov	r1, r3
 8002802:	480f      	ldr	r0, [pc, #60]	; (8002840 <MX_TIM5_Init+0x14c>)
 8002804:	f002 fe08 	bl	8005418 <HAL_TIM_IC_ConfigChannel>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <MX_TIM5_Init+0x11e>
  {
    Error_Handler();
 800280e:	f7ff fc61 	bl	80020d4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002812:	2302      	movs	r3, #2
 8002814:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002816:	2302      	movs	r3, #2
 8002818:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800281a:	1d3b      	adds	r3, r7, #4
 800281c:	220c      	movs	r2, #12
 800281e:	4619      	mov	r1, r3
 8002820:	4807      	ldr	r0, [pc, #28]	; (8002840 <MX_TIM5_Init+0x14c>)
 8002822:	f002 fdf9 	bl	8005418 <HAL_TIM_IC_ConfigChannel>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <MX_TIM5_Init+0x13c>
  {
    Error_Handler();
 800282c:	f7ff fc52 	bl	80020d4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim5);
 8002830:	4803      	ldr	r0, [pc, #12]	; (8002840 <MX_TIM5_Init+0x14c>)
 8002832:	f000 f92f 	bl	8002a94 <HAL_TIM_MspPostInit>

}
 8002836:	bf00      	nop
 8002838:	3748      	adds	r7, #72	; 0x48
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	200001b0 	.word	0x200001b0
 8002844:	40000c00 	.word	0x40000c00

08002848 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800284e:	463b      	mov	r3, r7
 8002850:	2200      	movs	r2, #0
 8002852:	601a      	str	r2, [r3, #0]
 8002854:	605a      	str	r2, [r3, #4]

  htim7.Instance = TIM7;
 8002856:	4b15      	ldr	r3, [pc, #84]	; (80028ac <MX_TIM7_Init+0x64>)
 8002858:	4a15      	ldr	r2, [pc, #84]	; (80028b0 <MX_TIM7_Init+0x68>)
 800285a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 900-1;
 800285c:	4b13      	ldr	r3, [pc, #76]	; (80028ac <MX_TIM7_Init+0x64>)
 800285e:	f240 3283 	movw	r2, #899	; 0x383
 8002862:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002864:	4b11      	ldr	r3, [pc, #68]	; (80028ac <MX_TIM7_Init+0x64>)
 8002866:	2200      	movs	r2, #0
 8002868:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 800286a:	4b10      	ldr	r3, [pc, #64]	; (80028ac <MX_TIM7_Init+0x64>)
 800286c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002870:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002872:	4b0e      	ldr	r3, [pc, #56]	; (80028ac <MX_TIM7_Init+0x64>)
 8002874:	2200      	movs	r2, #0
 8002876:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002878:	480c      	ldr	r0, [pc, #48]	; (80028ac <MX_TIM7_Init+0x64>)
 800287a:	f002 fb41 	bl	8004f00 <HAL_TIM_Base_Init>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8002884:	f7ff fc26 	bl	80020d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002888:	2300      	movs	r3, #0
 800288a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800288c:	2300      	movs	r3, #0
 800288e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002890:	463b      	mov	r3, r7
 8002892:	4619      	mov	r1, r3
 8002894:	4805      	ldr	r0, [pc, #20]	; (80028ac <MX_TIM7_Init+0x64>)
 8002896:	f003 fc3d 	bl	8006114 <HAL_TIMEx_MasterConfigSynchronization>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80028a0:	f7ff fc18 	bl	80020d4 <Error_Handler>
  }

}
 80028a4:	bf00      	nop
 80028a6:	3708      	adds	r7, #8
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	200001f0 	.word	0x200001f0
 80028b0:	40001400 	.word	0x40001400

080028b4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b090      	sub	sp, #64	; 0x40
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028c0:	2200      	movs	r2, #0
 80028c2:	601a      	str	r2, [r3, #0]
 80028c4:	605a      	str	r2, [r3, #4]
 80028c6:	609a      	str	r2, [r3, #8]
 80028c8:	60da      	str	r2, [r3, #12]
 80028ca:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028d4:	d12d      	bne.n	8002932 <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028d6:	2300      	movs	r3, #0
 80028d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80028da:	4b66      	ldr	r3, [pc, #408]	; (8002a74 <HAL_TIM_Base_MspInit+0x1c0>)
 80028dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028de:	4a65      	ldr	r2, [pc, #404]	; (8002a74 <HAL_TIM_Base_MspInit+0x1c0>)
 80028e0:	f043 0301 	orr.w	r3, r3, #1
 80028e4:	6413      	str	r3, [r2, #64]	; 0x40
 80028e6:	4b63      	ldr	r3, [pc, #396]	; (8002a74 <HAL_TIM_Base_MspInit+0x1c0>)
 80028e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80028f0:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028f2:	2300      	movs	r3, #0
 80028f4:	627b      	str	r3, [r7, #36]	; 0x24
 80028f6:	4b5f      	ldr	r3, [pc, #380]	; (8002a74 <HAL_TIM_Base_MspInit+0x1c0>)
 80028f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fa:	4a5e      	ldr	r2, [pc, #376]	; (8002a74 <HAL_TIM_Base_MspInit+0x1c0>)
 80028fc:	f043 0301 	orr.w	r3, r3, #1
 8002900:	6313      	str	r3, [r2, #48]	; 0x30
 8002902:	4b5c      	ldr	r3, [pc, #368]	; (8002a74 <HAL_TIM_Base_MspInit+0x1c0>)
 8002904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002906:	f003 0301 	and.w	r3, r3, #1
 800290a:	627b      	str	r3, [r7, #36]	; 0x24
 800290c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800290e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002912:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002914:	2302      	movs	r3, #2
 8002916:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002918:	2300      	movs	r3, #0
 800291a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800291c:	2300      	movs	r3, #0
 800291e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002920:	2301      	movs	r3, #1
 8002922:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002924:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002928:	4619      	mov	r1, r3
 800292a:	4853      	ldr	r0, [pc, #332]	; (8002a78 <HAL_TIM_Base_MspInit+0x1c4>)
 800292c:	f000 fbf2 	bl	8003114 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8002930:	e09b      	b.n	8002a6a <HAL_TIM_Base_MspInit+0x1b6>
  else if(tim_baseHandle->Instance==TIM3)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a51      	ldr	r2, [pc, #324]	; (8002a7c <HAL_TIM_Base_MspInit+0x1c8>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d12c      	bne.n	8002996 <HAL_TIM_Base_MspInit+0xe2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800293c:	2300      	movs	r3, #0
 800293e:	623b      	str	r3, [r7, #32]
 8002940:	4b4c      	ldr	r3, [pc, #304]	; (8002a74 <HAL_TIM_Base_MspInit+0x1c0>)
 8002942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002944:	4a4b      	ldr	r2, [pc, #300]	; (8002a74 <HAL_TIM_Base_MspInit+0x1c0>)
 8002946:	f043 0302 	orr.w	r3, r3, #2
 800294a:	6413      	str	r3, [r2, #64]	; 0x40
 800294c:	4b49      	ldr	r3, [pc, #292]	; (8002a74 <HAL_TIM_Base_MspInit+0x1c0>)
 800294e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	623b      	str	r3, [r7, #32]
 8002956:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002958:	2300      	movs	r3, #0
 800295a:	61fb      	str	r3, [r7, #28]
 800295c:	4b45      	ldr	r3, [pc, #276]	; (8002a74 <HAL_TIM_Base_MspInit+0x1c0>)
 800295e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002960:	4a44      	ldr	r2, [pc, #272]	; (8002a74 <HAL_TIM_Base_MspInit+0x1c0>)
 8002962:	f043 0308 	orr.w	r3, r3, #8
 8002966:	6313      	str	r3, [r2, #48]	; 0x30
 8002968:	4b42      	ldr	r3, [pc, #264]	; (8002a74 <HAL_TIM_Base_MspInit+0x1c0>)
 800296a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296c:	f003 0308 	and.w	r3, r3, #8
 8002970:	61fb      	str	r3, [r7, #28]
 8002972:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002974:	2304      	movs	r3, #4
 8002976:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002978:	2302      	movs	r3, #2
 800297a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297c:	2300      	movs	r3, #0
 800297e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002980:	2300      	movs	r3, #0
 8002982:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002984:	2302      	movs	r3, #2
 8002986:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002988:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800298c:	4619      	mov	r1, r3
 800298e:	483c      	ldr	r0, [pc, #240]	; (8002a80 <HAL_TIM_Base_MspInit+0x1cc>)
 8002990:	f000 fbc0 	bl	8003114 <HAL_GPIO_Init>
}
 8002994:	e069      	b.n	8002a6a <HAL_TIM_Base_MspInit+0x1b6>
  else if(tim_baseHandle->Instance==TIM4)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a3a      	ldr	r2, [pc, #232]	; (8002a84 <HAL_TIM_Base_MspInit+0x1d0>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d10e      	bne.n	80029be <HAL_TIM_Base_MspInit+0x10a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80029a0:	2300      	movs	r3, #0
 80029a2:	61bb      	str	r3, [r7, #24]
 80029a4:	4b33      	ldr	r3, [pc, #204]	; (8002a74 <HAL_TIM_Base_MspInit+0x1c0>)
 80029a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a8:	4a32      	ldr	r2, [pc, #200]	; (8002a74 <HAL_TIM_Base_MspInit+0x1c0>)
 80029aa:	f043 0304 	orr.w	r3, r3, #4
 80029ae:	6413      	str	r3, [r2, #64]	; 0x40
 80029b0:	4b30      	ldr	r3, [pc, #192]	; (8002a74 <HAL_TIM_Base_MspInit+0x1c0>)
 80029b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b4:	f003 0304 	and.w	r3, r3, #4
 80029b8:	61bb      	str	r3, [r7, #24]
 80029ba:	69bb      	ldr	r3, [r7, #24]
}
 80029bc:	e055      	b.n	8002a6a <HAL_TIM_Base_MspInit+0x1b6>
  else if(tim_baseHandle->Instance==TIM5)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a31      	ldr	r2, [pc, #196]	; (8002a88 <HAL_TIM_Base_MspInit+0x1d4>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d135      	bne.n	8002a34 <HAL_TIM_Base_MspInit+0x180>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80029c8:	2300      	movs	r3, #0
 80029ca:	617b      	str	r3, [r7, #20]
 80029cc:	4b29      	ldr	r3, [pc, #164]	; (8002a74 <HAL_TIM_Base_MspInit+0x1c0>)
 80029ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d0:	4a28      	ldr	r2, [pc, #160]	; (8002a74 <HAL_TIM_Base_MspInit+0x1c0>)
 80029d2:	f043 0308 	orr.w	r3, r3, #8
 80029d6:	6413      	str	r3, [r2, #64]	; 0x40
 80029d8:	4b26      	ldr	r3, [pc, #152]	; (8002a74 <HAL_TIM_Base_MspInit+0x1c0>)
 80029da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029dc:	f003 0308 	and.w	r3, r3, #8
 80029e0:	617b      	str	r3, [r7, #20]
 80029e2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80029e4:	2300      	movs	r3, #0
 80029e6:	613b      	str	r3, [r7, #16]
 80029e8:	4b22      	ldr	r3, [pc, #136]	; (8002a74 <HAL_TIM_Base_MspInit+0x1c0>)
 80029ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ec:	4a21      	ldr	r2, [pc, #132]	; (8002a74 <HAL_TIM_Base_MspInit+0x1c0>)
 80029ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029f2:	6313      	str	r3, [r2, #48]	; 0x30
 80029f4:	4b1f      	ldr	r3, [pc, #124]	; (8002a74 <HAL_TIM_Base_MspInit+0x1c0>)
 80029f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029fc:	613b      	str	r3, [r7, #16]
 80029fe:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = IC_Eco_Pin;
 8002a00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a04:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a06:	2302      	movs	r3, #2
 8002a08:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002a12:	2302      	movs	r3, #2
 8002a14:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(IC_Eco_GPIO_Port, &GPIO_InitStruct);
 8002a16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	481b      	ldr	r0, [pc, #108]	; (8002a8c <HAL_TIM_Base_MspInit+0x1d8>)
 8002a1e:	f000 fb79 	bl	8003114 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002a22:	2200      	movs	r2, #0
 8002a24:	2100      	movs	r1, #0
 8002a26:	2032      	movs	r0, #50	; 0x32
 8002a28:	f000 faad 	bl	8002f86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002a2c:	2032      	movs	r0, #50	; 0x32
 8002a2e:	f000 fac6 	bl	8002fbe <HAL_NVIC_EnableIRQ>
}
 8002a32:	e01a      	b.n	8002a6a <HAL_TIM_Base_MspInit+0x1b6>
  else if(tim_baseHandle->Instance==TIM7)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a15      	ldr	r2, [pc, #84]	; (8002a90 <HAL_TIM_Base_MspInit+0x1dc>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d115      	bne.n	8002a6a <HAL_TIM_Base_MspInit+0x1b6>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002a3e:	2300      	movs	r3, #0
 8002a40:	60fb      	str	r3, [r7, #12]
 8002a42:	4b0c      	ldr	r3, [pc, #48]	; (8002a74 <HAL_TIM_Base_MspInit+0x1c0>)
 8002a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a46:	4a0b      	ldr	r2, [pc, #44]	; (8002a74 <HAL_TIM_Base_MspInit+0x1c0>)
 8002a48:	f043 0320 	orr.w	r3, r3, #32
 8002a4c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a4e:	4b09      	ldr	r3, [pc, #36]	; (8002a74 <HAL_TIM_Base_MspInit+0x1c0>)
 8002a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a52:	f003 0320 	and.w	r3, r3, #32
 8002a56:	60fb      	str	r3, [r7, #12]
 8002a58:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	2100      	movs	r1, #0
 8002a5e:	2037      	movs	r0, #55	; 0x37
 8002a60:	f000 fa91 	bl	8002f86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002a64:	2037      	movs	r0, #55	; 0x37
 8002a66:	f000 faaa 	bl	8002fbe <HAL_NVIC_EnableIRQ>
}
 8002a6a:	bf00      	nop
 8002a6c:	3740      	adds	r7, #64	; 0x40
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	40023800 	.word	0x40023800
 8002a78:	40020000 	.word	0x40020000
 8002a7c:	40000400 	.word	0x40000400
 8002a80:	40020c00 	.word	0x40020c00
 8002a84:	40000800 	.word	0x40000800
 8002a88:	40000c00 	.word	0x40000c00
 8002a8c:	40021c00 	.word	0x40021c00
 8002a90:	40001400 	.word	0x40001400

08002a94 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b08a      	sub	sp, #40	; 0x28
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a9c:	f107 0314 	add.w	r3, r7, #20
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	605a      	str	r2, [r3, #4]
 8002aa6:	609a      	str	r2, [r3, #8]
 8002aa8:	60da      	str	r2, [r3, #12]
 8002aaa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a25      	ldr	r2, [pc, #148]	; (8002b48 <HAL_TIM_MspPostInit+0xb4>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d11f      	bne.n	8002af6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	613b      	str	r3, [r7, #16]
 8002aba:	4b24      	ldr	r3, [pc, #144]	; (8002b4c <HAL_TIM_MspPostInit+0xb8>)
 8002abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abe:	4a23      	ldr	r2, [pc, #140]	; (8002b4c <HAL_TIM_MspPostInit+0xb8>)
 8002ac0:	f043 0308 	orr.w	r3, r3, #8
 8002ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ac6:	4b21      	ldr	r3, [pc, #132]	; (8002b4c <HAL_TIM_MspPostInit+0xb8>)
 8002ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aca:	f003 0308 	and.w	r3, r3, #8
 8002ace:	613b      	str	r3, [r7, #16]
 8002ad0:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = PWM_R_Pin|PWM_L_Pin;
 8002ad2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002ad6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad8:	2302      	movs	r3, #2
 8002ada:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002adc:	2300      	movs	r3, #0
 8002ade:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ae8:	f107 0314 	add.w	r3, r7, #20
 8002aec:	4619      	mov	r1, r3
 8002aee:	4818      	ldr	r0, [pc, #96]	; (8002b50 <HAL_TIM_MspPostInit+0xbc>)
 8002af0:	f000 fb10 	bl	8003114 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002af4:	e023      	b.n	8002b3e <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM5)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a16      	ldr	r2, [pc, #88]	; (8002b54 <HAL_TIM_MspPostInit+0xc0>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d11e      	bne.n	8002b3e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b00:	2300      	movs	r3, #0
 8002b02:	60fb      	str	r3, [r7, #12]
 8002b04:	4b11      	ldr	r3, [pc, #68]	; (8002b4c <HAL_TIM_MspPostInit+0xb8>)
 8002b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b08:	4a10      	ldr	r2, [pc, #64]	; (8002b4c <HAL_TIM_MspPostInit+0xb8>)
 8002b0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b0e:	6313      	str	r3, [r2, #48]	; 0x30
 8002b10:	4b0e      	ldr	r3, [pc, #56]	; (8002b4c <HAL_TIM_MspPostInit+0xb8>)
 8002b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b18:	60fb      	str	r3, [r7, #12]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_Trig_Pin;
 8002b1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b22:	2302      	movs	r3, #2
 8002b24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b26:	2300      	movs	r3, #0
 8002b28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002b2e:	2302      	movs	r3, #2
 8002b30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_Trig_GPIO_Port, &GPIO_InitStruct);
 8002b32:	f107 0314 	add.w	r3, r7, #20
 8002b36:	4619      	mov	r1, r3
 8002b38:	4807      	ldr	r0, [pc, #28]	; (8002b58 <HAL_TIM_MspPostInit+0xc4>)
 8002b3a:	f000 faeb 	bl	8003114 <HAL_GPIO_Init>
}
 8002b3e:	bf00      	nop
 8002b40:	3728      	adds	r7, #40	; 0x28
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	40000800 	.word	0x40000800
 8002b4c:	40023800 	.word	0x40023800
 8002b50:	40020c00 	.word	0x40020c00
 8002b54:	40000c00 	.word	0x40000c00
 8002b58:	40021c00 	.word	0x40021c00

08002b5c <MX_UART7_Init>:

UART_HandleTypeDef huart7;

/* UART7 init function */
void MX_UART7_Init(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0

  huart7.Instance = UART7;
 8002b60:	4b11      	ldr	r3, [pc, #68]	; (8002ba8 <MX_UART7_Init+0x4c>)
 8002b62:	4a12      	ldr	r2, [pc, #72]	; (8002bac <MX_UART7_Init+0x50>)
 8002b64:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8002b66:	4b10      	ldr	r3, [pc, #64]	; (8002ba8 <MX_UART7_Init+0x4c>)
 8002b68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b6c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8002b6e:	4b0e      	ldr	r3, [pc, #56]	; (8002ba8 <MX_UART7_Init+0x4c>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8002b74:	4b0c      	ldr	r3, [pc, #48]	; (8002ba8 <MX_UART7_Init+0x4c>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8002b7a:	4b0b      	ldr	r3, [pc, #44]	; (8002ba8 <MX_UART7_Init+0x4c>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8002b80:	4b09      	ldr	r3, [pc, #36]	; (8002ba8 <MX_UART7_Init+0x4c>)
 8002b82:	220c      	movs	r2, #12
 8002b84:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b86:	4b08      	ldr	r3, [pc, #32]	; (8002ba8 <MX_UART7_Init+0x4c>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b8c:	4b06      	ldr	r3, [pc, #24]	; (8002ba8 <MX_UART7_Init+0x4c>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8002b92:	4805      	ldr	r0, [pc, #20]	; (8002ba8 <MX_UART7_Init+0x4c>)
 8002b94:	f003 fb4e 	bl	8006234 <HAL_UART_Init>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <MX_UART7_Init+0x46>
  {
    Error_Handler();
 8002b9e:	f7ff fa99 	bl	80020d4 <Error_Handler>
  }

}
 8002ba2:	bf00      	nop
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	20000230 	.word	0x20000230
 8002bac:	40007800 	.word	0x40007800

08002bb0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b08a      	sub	sp, #40	; 0x28
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bb8:	f107 0314 	add.w	r3, r7, #20
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	601a      	str	r2, [r3, #0]
 8002bc0:	605a      	str	r2, [r3, #4]
 8002bc2:	609a      	str	r2, [r3, #8]
 8002bc4:	60da      	str	r2, [r3, #12]
 8002bc6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART7)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a1d      	ldr	r2, [pc, #116]	; (8002c44 <HAL_UART_MspInit+0x94>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d133      	bne.n	8002c3a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	613b      	str	r3, [r7, #16]
 8002bd6:	4b1c      	ldr	r3, [pc, #112]	; (8002c48 <HAL_UART_MspInit+0x98>)
 8002bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bda:	4a1b      	ldr	r2, [pc, #108]	; (8002c48 <HAL_UART_MspInit+0x98>)
 8002bdc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002be0:	6413      	str	r3, [r2, #64]	; 0x40
 8002be2:	4b19      	ldr	r3, [pc, #100]	; (8002c48 <HAL_UART_MspInit+0x98>)
 8002be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002bea:	613b      	str	r3, [r7, #16]
 8002bec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002bee:	2300      	movs	r3, #0
 8002bf0:	60fb      	str	r3, [r7, #12]
 8002bf2:	4b15      	ldr	r3, [pc, #84]	; (8002c48 <HAL_UART_MspInit+0x98>)
 8002bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf6:	4a14      	ldr	r2, [pc, #80]	; (8002c48 <HAL_UART_MspInit+0x98>)
 8002bf8:	f043 0320 	orr.w	r3, r3, #32
 8002bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8002bfe:	4b12      	ldr	r3, [pc, #72]	; (8002c48 <HAL_UART_MspInit+0x98>)
 8002c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c02:	f003 0320 	and.w	r3, r3, #32
 8002c06:	60fb      	str	r3, [r7, #12]
 8002c08:	68fb      	ldr	r3, [r7, #12]
    /**UART7 GPIO Configuration
    PF6     ------> UART7_RX
    PF7     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c0a:	23c0      	movs	r3, #192	; 0xc0
 8002c0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c0e:	2302      	movs	r3, #2
 8002c10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c12:	2301      	movs	r3, #1
 8002c14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c16:	2303      	movs	r3, #3
 8002c18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8002c1a:	2308      	movs	r3, #8
 8002c1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002c1e:	f107 0314 	add.w	r3, r7, #20
 8002c22:	4619      	mov	r1, r3
 8002c24:	4809      	ldr	r0, [pc, #36]	; (8002c4c <HAL_UART_MspInit+0x9c>)
 8002c26:	f000 fa75 	bl	8003114 <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	2100      	movs	r1, #0
 8002c2e:	2052      	movs	r0, #82	; 0x52
 8002c30:	f000 f9a9 	bl	8002f86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8002c34:	2052      	movs	r0, #82	; 0x52
 8002c36:	f000 f9c2 	bl	8002fbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }
}
 8002c3a:	bf00      	nop
 8002c3c:	3728      	adds	r7, #40	; 0x28
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	40007800 	.word	0x40007800
 8002c48:	40023800 	.word	0x40023800
 8002c4c:	40021400 	.word	0x40021400

08002c50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002c50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c88 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002c54:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002c56:	e003      	b.n	8002c60 <LoopCopyDataInit>

08002c58 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002c58:	4b0c      	ldr	r3, [pc, #48]	; (8002c8c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002c5a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002c5c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002c5e:	3104      	adds	r1, #4

08002c60 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002c60:	480b      	ldr	r0, [pc, #44]	; (8002c90 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002c62:	4b0c      	ldr	r3, [pc, #48]	; (8002c94 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002c64:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002c66:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002c68:	d3f6      	bcc.n	8002c58 <CopyDataInit>
  ldr  r2, =_sbss
 8002c6a:	4a0b      	ldr	r2, [pc, #44]	; (8002c98 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002c6c:	e002      	b.n	8002c74 <LoopFillZerobss>

08002c6e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002c6e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002c70:	f842 3b04 	str.w	r3, [r2], #4

08002c74 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002c74:	4b09      	ldr	r3, [pc, #36]	; (8002c9c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002c76:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002c78:	d3f9      	bcc.n	8002c6e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002c7a:	f7ff fbff 	bl	800247c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c7e:	f004 fbb5 	bl	80073ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c82:	f7fe fc4f 	bl	8001524 <main>
  bx  lr    
 8002c86:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002c88:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002c8c:	08007484 	.word	0x08007484
  ldr  r0, =_sdata
 8002c90:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002c94:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8002c98:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8002c9c:	20000274 	.word	0x20000274

08002ca0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ca0:	e7fe      	b.n	8002ca0 <ADC_IRQHandler>
	...

08002ca4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ca8:	4b0e      	ldr	r3, [pc, #56]	; (8002ce4 <HAL_Init+0x40>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a0d      	ldr	r2, [pc, #52]	; (8002ce4 <HAL_Init+0x40>)
 8002cae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cb2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002cb4:	4b0b      	ldr	r3, [pc, #44]	; (8002ce4 <HAL_Init+0x40>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a0a      	ldr	r2, [pc, #40]	; (8002ce4 <HAL_Init+0x40>)
 8002cba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cbe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cc0:	4b08      	ldr	r3, [pc, #32]	; (8002ce4 <HAL_Init+0x40>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a07      	ldr	r2, [pc, #28]	; (8002ce4 <HAL_Init+0x40>)
 8002cc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ccc:	2003      	movs	r0, #3
 8002cce:	f000 f94f 	bl	8002f70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cd2:	2000      	movs	r0, #0
 8002cd4:	f000 f808 	bl	8002ce8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cd8:	f7ff fb5c 	bl	8002394 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	40023c00 	.word	0x40023c00

08002ce8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002cf0:	4b12      	ldr	r3, [pc, #72]	; (8002d3c <HAL_InitTick+0x54>)
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	4b12      	ldr	r3, [pc, #72]	; (8002d40 <HAL_InitTick+0x58>)
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d06:	4618      	mov	r0, r3
 8002d08:	f000 f967 	bl	8002fda <HAL_SYSTICK_Config>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d001      	beq.n	8002d16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e00e      	b.n	8002d34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2b0f      	cmp	r3, #15
 8002d1a:	d80a      	bhi.n	8002d32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	6879      	ldr	r1, [r7, #4]
 8002d20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d24:	f000 f92f 	bl	8002f86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d28:	4a06      	ldr	r2, [pc, #24]	; (8002d44 <HAL_InitTick+0x5c>)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	e000      	b.n	8002d34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3708      	adds	r7, #8
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	20000004 	.word	0x20000004
 8002d40:	2000000c 	.word	0x2000000c
 8002d44:	20000008 	.word	0x20000008

08002d48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d4c:	4b06      	ldr	r3, [pc, #24]	; (8002d68 <HAL_IncTick+0x20>)
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	461a      	mov	r2, r3
 8002d52:	4b06      	ldr	r3, [pc, #24]	; (8002d6c <HAL_IncTick+0x24>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4413      	add	r3, r2
 8002d58:	4a04      	ldr	r2, [pc, #16]	; (8002d6c <HAL_IncTick+0x24>)
 8002d5a:	6013      	str	r3, [r2, #0]
}
 8002d5c:	bf00      	nop
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	2000000c 	.word	0x2000000c
 8002d6c:	20000270 	.word	0x20000270

08002d70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0
  return uwTick;
 8002d74:	4b03      	ldr	r3, [pc, #12]	; (8002d84 <HAL_GetTick+0x14>)
 8002d76:	681b      	ldr	r3, [r3, #0]
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	20000270 	.word	0x20000270

08002d88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d90:	f7ff ffee 	bl	8002d70 <HAL_GetTick>
 8002d94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002da0:	d005      	beq.n	8002dae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002da2:	4b0a      	ldr	r3, [pc, #40]	; (8002dcc <HAL_Delay+0x44>)
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	461a      	mov	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	4413      	add	r3, r2
 8002dac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002dae:	bf00      	nop
 8002db0:	f7ff ffde 	bl	8002d70 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	68fa      	ldr	r2, [r7, #12]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d8f7      	bhi.n	8002db0 <HAL_Delay+0x28>
  {
  }
}
 8002dc0:	bf00      	nop
 8002dc2:	bf00      	nop
 8002dc4:	3710      	adds	r7, #16
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	2000000c 	.word	0x2000000c

08002dd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b085      	sub	sp, #20
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f003 0307 	and.w	r3, r3, #7
 8002dde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002de0:	4b0c      	ldr	r3, [pc, #48]	; (8002e14 <__NVIC_SetPriorityGrouping+0x44>)
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002de6:	68ba      	ldr	r2, [r7, #8]
 8002de8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002dec:	4013      	ands	r3, r2
 8002dee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002df8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002dfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e02:	4a04      	ldr	r2, [pc, #16]	; (8002e14 <__NVIC_SetPriorityGrouping+0x44>)
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	60d3      	str	r3, [r2, #12]
}
 8002e08:	bf00      	nop
 8002e0a:	3714      	adds	r7, #20
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr
 8002e14:	e000ed00 	.word	0xe000ed00

08002e18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e1c:	4b04      	ldr	r3, [pc, #16]	; (8002e30 <__NVIC_GetPriorityGrouping+0x18>)
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	0a1b      	lsrs	r3, r3, #8
 8002e22:	f003 0307 	and.w	r3, r3, #7
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr
 8002e30:	e000ed00 	.word	0xe000ed00

08002e34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	db0b      	blt.n	8002e5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e46:	79fb      	ldrb	r3, [r7, #7]
 8002e48:	f003 021f 	and.w	r2, r3, #31
 8002e4c:	4907      	ldr	r1, [pc, #28]	; (8002e6c <__NVIC_EnableIRQ+0x38>)
 8002e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e52:	095b      	lsrs	r3, r3, #5
 8002e54:	2001      	movs	r0, #1
 8002e56:	fa00 f202 	lsl.w	r2, r0, r2
 8002e5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e5e:	bf00      	nop
 8002e60:	370c      	adds	r7, #12
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	e000e100 	.word	0xe000e100

08002e70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	4603      	mov	r3, r0
 8002e78:	6039      	str	r1, [r7, #0]
 8002e7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	db0a      	blt.n	8002e9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	b2da      	uxtb	r2, r3
 8002e88:	490c      	ldr	r1, [pc, #48]	; (8002ebc <__NVIC_SetPriority+0x4c>)
 8002e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e8e:	0112      	lsls	r2, r2, #4
 8002e90:	b2d2      	uxtb	r2, r2
 8002e92:	440b      	add	r3, r1
 8002e94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e98:	e00a      	b.n	8002eb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	b2da      	uxtb	r2, r3
 8002e9e:	4908      	ldr	r1, [pc, #32]	; (8002ec0 <__NVIC_SetPriority+0x50>)
 8002ea0:	79fb      	ldrb	r3, [r7, #7]
 8002ea2:	f003 030f 	and.w	r3, r3, #15
 8002ea6:	3b04      	subs	r3, #4
 8002ea8:	0112      	lsls	r2, r2, #4
 8002eaa:	b2d2      	uxtb	r2, r2
 8002eac:	440b      	add	r3, r1
 8002eae:	761a      	strb	r2, [r3, #24]
}
 8002eb0:	bf00      	nop
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr
 8002ebc:	e000e100 	.word	0xe000e100
 8002ec0:	e000ed00 	.word	0xe000ed00

08002ec4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b089      	sub	sp, #36	; 0x24
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f003 0307 	and.w	r3, r3, #7
 8002ed6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	f1c3 0307 	rsb	r3, r3, #7
 8002ede:	2b04      	cmp	r3, #4
 8002ee0:	bf28      	it	cs
 8002ee2:	2304      	movcs	r3, #4
 8002ee4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	3304      	adds	r3, #4
 8002eea:	2b06      	cmp	r3, #6
 8002eec:	d902      	bls.n	8002ef4 <NVIC_EncodePriority+0x30>
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	3b03      	subs	r3, #3
 8002ef2:	e000      	b.n	8002ef6 <NVIC_EncodePriority+0x32>
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ef8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	fa02 f303 	lsl.w	r3, r2, r3
 8002f02:	43da      	mvns	r2, r3
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	401a      	ands	r2, r3
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	fa01 f303 	lsl.w	r3, r1, r3
 8002f16:	43d9      	mvns	r1, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f1c:	4313      	orrs	r3, r2
         );
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3724      	adds	r7, #36	; 0x24
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
	...

08002f2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	3b01      	subs	r3, #1
 8002f38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f3c:	d301      	bcc.n	8002f42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e00f      	b.n	8002f62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f42:	4a0a      	ldr	r2, [pc, #40]	; (8002f6c <SysTick_Config+0x40>)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	3b01      	subs	r3, #1
 8002f48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f4a:	210f      	movs	r1, #15
 8002f4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f50:	f7ff ff8e 	bl	8002e70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f54:	4b05      	ldr	r3, [pc, #20]	; (8002f6c <SysTick_Config+0x40>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f5a:	4b04      	ldr	r3, [pc, #16]	; (8002f6c <SysTick_Config+0x40>)
 8002f5c:	2207      	movs	r2, #7
 8002f5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3708      	adds	r7, #8
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	e000e010 	.word	0xe000e010

08002f70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f7ff ff29 	bl	8002dd0 <__NVIC_SetPriorityGrouping>
}
 8002f7e:	bf00      	nop
 8002f80:	3708      	adds	r7, #8
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f86:	b580      	push	{r7, lr}
 8002f88:	b086      	sub	sp, #24
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	60b9      	str	r1, [r7, #8]
 8002f90:	607a      	str	r2, [r7, #4]
 8002f92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f94:	2300      	movs	r3, #0
 8002f96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f98:	f7ff ff3e 	bl	8002e18 <__NVIC_GetPriorityGrouping>
 8002f9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	68b9      	ldr	r1, [r7, #8]
 8002fa2:	6978      	ldr	r0, [r7, #20]
 8002fa4:	f7ff ff8e 	bl	8002ec4 <NVIC_EncodePriority>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fae:	4611      	mov	r1, r2
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f7ff ff5d 	bl	8002e70 <__NVIC_SetPriority>
}
 8002fb6:	bf00      	nop
 8002fb8:	3718      	adds	r7, #24
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b082      	sub	sp, #8
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f7ff ff31 	bl	8002e34 <__NVIC_EnableIRQ>
}
 8002fd2:	bf00      	nop
 8002fd4:	3708      	adds	r7, #8
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}

08002fda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b082      	sub	sp, #8
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f7ff ffa2 	bl	8002f2c <SysTick_Config>
 8002fe8:	4603      	mov	r3, r0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3708      	adds	r7, #8
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}

08002ff2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b082      	sub	sp, #8
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d101      	bne.n	8003004 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e014      	b.n	800302e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	791b      	ldrb	r3, [r3, #4]
 8003008:	b2db      	uxtb	r3, r3
 800300a:	2b00      	cmp	r3, #0
 800300c:	d105      	bne.n	800301a <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f7fe f91b 	bl	8001250 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2202      	movs	r2, #2
 800301e:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2201      	movs	r2, #1
 800302a:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	3708      	adds	r7, #8
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}

08003036 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8003036:	b480      	push	{r7}
 8003038:	b087      	sub	sp, #28
 800303a:	af00      	add	r7, sp, #0
 800303c:	60f8      	str	r0, [r7, #12]
 800303e:	60b9      	str	r1, [r7, #8]
 8003040:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8003042:	2300      	movs	r3, #0
 8003044:	617b      	str	r3, [r7, #20]
 8003046:	2300      	movs	r3, #0
 8003048:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	795b      	ldrb	r3, [r3, #5]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d101      	bne.n	8003056 <HAL_DAC_ConfigChannel+0x20>
 8003052:	2302      	movs	r3, #2
 8003054:	e036      	b.n	80030c4 <HAL_DAC_ConfigChannel+0x8e>
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2201      	movs	r2, #1
 800305a:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2202      	movs	r2, #2
 8003060:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 800306a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	fa02 f303 	lsl.w	r3, r2, r3
 8003074:	43db      	mvns	r3, r3
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	4013      	ands	r3, r2
 800307a:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	4313      	orrs	r3, r2
 8003086:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8003088:	693a      	ldr	r2, [r7, #16]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	fa02 f303 	lsl.w	r3, r2, r3
 8003090:	697a      	ldr	r2, [r7, #20]
 8003092:	4313      	orrs	r3, r2
 8003094:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	697a      	ldr	r2, [r7, #20]
 800309c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	6819      	ldr	r1, [r3, #0]
 80030a4:	22c0      	movs	r2, #192	; 0xc0
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ac:	43da      	mvns	r2, r3
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	400a      	ands	r2, r1
 80030b4:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2201      	movs	r2, #1
 80030ba:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2200      	movs	r2, #0
 80030c0:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	371c      	adds	r7, #28
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d004      	beq.n	80030ee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2280      	movs	r2, #128	; 0x80
 80030e8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e00c      	b.n	8003108 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2205      	movs	r2, #5
 80030f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f022 0201 	bic.w	r2, r2, #1
 8003104:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003106:	2300      	movs	r3, #0
}
 8003108:	4618      	mov	r0, r3
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr

08003114 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003114:	b480      	push	{r7}
 8003116:	b089      	sub	sp, #36	; 0x24
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800311e:	2300      	movs	r3, #0
 8003120:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003122:	2300      	movs	r3, #0
 8003124:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003126:	2300      	movs	r3, #0
 8003128:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800312a:	2300      	movs	r3, #0
 800312c:	61fb      	str	r3, [r7, #28]
 800312e:	e177      	b.n	8003420 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003130:	2201      	movs	r2, #1
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	fa02 f303 	lsl.w	r3, r2, r3
 8003138:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	697a      	ldr	r2, [r7, #20]
 8003140:	4013      	ands	r3, r2
 8003142:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003144:	693a      	ldr	r2, [r7, #16]
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	429a      	cmp	r2, r3
 800314a:	f040 8166 	bne.w	800341a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d00b      	beq.n	800316e <HAL_GPIO_Init+0x5a>
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	2b02      	cmp	r3, #2
 800315c:	d007      	beq.n	800316e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003162:	2b11      	cmp	r3, #17
 8003164:	d003      	beq.n	800316e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	2b12      	cmp	r3, #18
 800316c:	d130      	bne.n	80031d0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	005b      	lsls	r3, r3, #1
 8003178:	2203      	movs	r2, #3
 800317a:	fa02 f303 	lsl.w	r3, r2, r3
 800317e:	43db      	mvns	r3, r3
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	4013      	ands	r3, r2
 8003184:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	68da      	ldr	r2, [r3, #12]
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	005b      	lsls	r3, r3, #1
 800318e:	fa02 f303 	lsl.w	r3, r2, r3
 8003192:	69ba      	ldr	r2, [r7, #24]
 8003194:	4313      	orrs	r3, r2
 8003196:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	69ba      	ldr	r2, [r7, #24]
 800319c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031a4:	2201      	movs	r2, #1
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ac:	43db      	mvns	r3, r3
 80031ae:	69ba      	ldr	r2, [r7, #24]
 80031b0:	4013      	ands	r3, r2
 80031b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	091b      	lsrs	r3, r3, #4
 80031ba:	f003 0201 	and.w	r2, r3, #1
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	fa02 f303 	lsl.w	r3, r2, r3
 80031c4:	69ba      	ldr	r2, [r7, #24]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	2203      	movs	r2, #3
 80031dc:	fa02 f303 	lsl.w	r3, r2, r3
 80031e0:	43db      	mvns	r3, r3
 80031e2:	69ba      	ldr	r2, [r7, #24]
 80031e4:	4013      	ands	r3, r2
 80031e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	689a      	ldr	r2, [r3, #8]
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	005b      	lsls	r3, r3, #1
 80031f0:	fa02 f303 	lsl.w	r3, r2, r3
 80031f4:	69ba      	ldr	r2, [r7, #24]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	69ba      	ldr	r2, [r7, #24]
 80031fe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	2b02      	cmp	r3, #2
 8003206:	d003      	beq.n	8003210 <HAL_GPIO_Init+0xfc>
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	2b12      	cmp	r3, #18
 800320e:	d123      	bne.n	8003258 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	08da      	lsrs	r2, r3, #3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	3208      	adds	r2, #8
 8003218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800321c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	f003 0307 	and.w	r3, r3, #7
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	220f      	movs	r2, #15
 8003228:	fa02 f303 	lsl.w	r3, r2, r3
 800322c:	43db      	mvns	r3, r3
 800322e:	69ba      	ldr	r2, [r7, #24]
 8003230:	4013      	ands	r3, r2
 8003232:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	691a      	ldr	r2, [r3, #16]
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	f003 0307 	and.w	r3, r3, #7
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	fa02 f303 	lsl.w	r3, r2, r3
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	4313      	orrs	r3, r2
 8003248:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	08da      	lsrs	r2, r3, #3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	3208      	adds	r2, #8
 8003252:	69b9      	ldr	r1, [r7, #24]
 8003254:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	005b      	lsls	r3, r3, #1
 8003262:	2203      	movs	r2, #3
 8003264:	fa02 f303 	lsl.w	r3, r2, r3
 8003268:	43db      	mvns	r3, r3
 800326a:	69ba      	ldr	r2, [r7, #24]
 800326c:	4013      	ands	r3, r2
 800326e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f003 0203 	and.w	r2, r3, #3
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	005b      	lsls	r3, r3, #1
 800327c:	fa02 f303 	lsl.w	r3, r2, r3
 8003280:	69ba      	ldr	r2, [r7, #24]
 8003282:	4313      	orrs	r3, r2
 8003284:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003294:	2b00      	cmp	r3, #0
 8003296:	f000 80c0 	beq.w	800341a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800329a:	2300      	movs	r3, #0
 800329c:	60fb      	str	r3, [r7, #12]
 800329e:	4b66      	ldr	r3, [pc, #408]	; (8003438 <HAL_GPIO_Init+0x324>)
 80032a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a2:	4a65      	ldr	r2, [pc, #404]	; (8003438 <HAL_GPIO_Init+0x324>)
 80032a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032a8:	6453      	str	r3, [r2, #68]	; 0x44
 80032aa:	4b63      	ldr	r3, [pc, #396]	; (8003438 <HAL_GPIO_Init+0x324>)
 80032ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032b2:	60fb      	str	r3, [r7, #12]
 80032b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032b6:	4a61      	ldr	r2, [pc, #388]	; (800343c <HAL_GPIO_Init+0x328>)
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	089b      	lsrs	r3, r3, #2
 80032bc:	3302      	adds	r3, #2
 80032be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	f003 0303 	and.w	r3, r3, #3
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	220f      	movs	r2, #15
 80032ce:	fa02 f303 	lsl.w	r3, r2, r3
 80032d2:	43db      	mvns	r3, r3
 80032d4:	69ba      	ldr	r2, [r7, #24]
 80032d6:	4013      	ands	r3, r2
 80032d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a58      	ldr	r2, [pc, #352]	; (8003440 <HAL_GPIO_Init+0x32c>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d037      	beq.n	8003352 <HAL_GPIO_Init+0x23e>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a57      	ldr	r2, [pc, #348]	; (8003444 <HAL_GPIO_Init+0x330>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d031      	beq.n	800334e <HAL_GPIO_Init+0x23a>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a56      	ldr	r2, [pc, #344]	; (8003448 <HAL_GPIO_Init+0x334>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d02b      	beq.n	800334a <HAL_GPIO_Init+0x236>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a55      	ldr	r2, [pc, #340]	; (800344c <HAL_GPIO_Init+0x338>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d025      	beq.n	8003346 <HAL_GPIO_Init+0x232>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a54      	ldr	r2, [pc, #336]	; (8003450 <HAL_GPIO_Init+0x33c>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d01f      	beq.n	8003342 <HAL_GPIO_Init+0x22e>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a53      	ldr	r2, [pc, #332]	; (8003454 <HAL_GPIO_Init+0x340>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d019      	beq.n	800333e <HAL_GPIO_Init+0x22a>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a52      	ldr	r2, [pc, #328]	; (8003458 <HAL_GPIO_Init+0x344>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d013      	beq.n	800333a <HAL_GPIO_Init+0x226>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a51      	ldr	r2, [pc, #324]	; (800345c <HAL_GPIO_Init+0x348>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d00d      	beq.n	8003336 <HAL_GPIO_Init+0x222>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a50      	ldr	r2, [pc, #320]	; (8003460 <HAL_GPIO_Init+0x34c>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d007      	beq.n	8003332 <HAL_GPIO_Init+0x21e>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a4f      	ldr	r2, [pc, #316]	; (8003464 <HAL_GPIO_Init+0x350>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d101      	bne.n	800332e <HAL_GPIO_Init+0x21a>
 800332a:	2309      	movs	r3, #9
 800332c:	e012      	b.n	8003354 <HAL_GPIO_Init+0x240>
 800332e:	230a      	movs	r3, #10
 8003330:	e010      	b.n	8003354 <HAL_GPIO_Init+0x240>
 8003332:	2308      	movs	r3, #8
 8003334:	e00e      	b.n	8003354 <HAL_GPIO_Init+0x240>
 8003336:	2307      	movs	r3, #7
 8003338:	e00c      	b.n	8003354 <HAL_GPIO_Init+0x240>
 800333a:	2306      	movs	r3, #6
 800333c:	e00a      	b.n	8003354 <HAL_GPIO_Init+0x240>
 800333e:	2305      	movs	r3, #5
 8003340:	e008      	b.n	8003354 <HAL_GPIO_Init+0x240>
 8003342:	2304      	movs	r3, #4
 8003344:	e006      	b.n	8003354 <HAL_GPIO_Init+0x240>
 8003346:	2303      	movs	r3, #3
 8003348:	e004      	b.n	8003354 <HAL_GPIO_Init+0x240>
 800334a:	2302      	movs	r3, #2
 800334c:	e002      	b.n	8003354 <HAL_GPIO_Init+0x240>
 800334e:	2301      	movs	r3, #1
 8003350:	e000      	b.n	8003354 <HAL_GPIO_Init+0x240>
 8003352:	2300      	movs	r3, #0
 8003354:	69fa      	ldr	r2, [r7, #28]
 8003356:	f002 0203 	and.w	r2, r2, #3
 800335a:	0092      	lsls	r2, r2, #2
 800335c:	4093      	lsls	r3, r2
 800335e:	69ba      	ldr	r2, [r7, #24]
 8003360:	4313      	orrs	r3, r2
 8003362:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003364:	4935      	ldr	r1, [pc, #212]	; (800343c <HAL_GPIO_Init+0x328>)
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	089b      	lsrs	r3, r3, #2
 800336a:	3302      	adds	r3, #2
 800336c:	69ba      	ldr	r2, [r7, #24]
 800336e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003372:	4b3d      	ldr	r3, [pc, #244]	; (8003468 <HAL_GPIO_Init+0x354>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	43db      	mvns	r3, r3
 800337c:	69ba      	ldr	r2, [r7, #24]
 800337e:	4013      	ands	r3, r2
 8003380:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d003      	beq.n	8003396 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800338e:	69ba      	ldr	r2, [r7, #24]
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	4313      	orrs	r3, r2
 8003394:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003396:	4a34      	ldr	r2, [pc, #208]	; (8003468 <HAL_GPIO_Init+0x354>)
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800339c:	4b32      	ldr	r3, [pc, #200]	; (8003468 <HAL_GPIO_Init+0x354>)
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	43db      	mvns	r3, r3
 80033a6:	69ba      	ldr	r2, [r7, #24]
 80033a8:	4013      	ands	r3, r2
 80033aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d003      	beq.n	80033c0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80033b8:	69ba      	ldr	r2, [r7, #24]
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	4313      	orrs	r3, r2
 80033be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033c0:	4a29      	ldr	r2, [pc, #164]	; (8003468 <HAL_GPIO_Init+0x354>)
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033c6:	4b28      	ldr	r3, [pc, #160]	; (8003468 <HAL_GPIO_Init+0x354>)
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	43db      	mvns	r3, r3
 80033d0:	69ba      	ldr	r2, [r7, #24]
 80033d2:	4013      	ands	r3, r2
 80033d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d003      	beq.n	80033ea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80033e2:	69ba      	ldr	r2, [r7, #24]
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033ea:	4a1f      	ldr	r2, [pc, #124]	; (8003468 <HAL_GPIO_Init+0x354>)
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033f0:	4b1d      	ldr	r3, [pc, #116]	; (8003468 <HAL_GPIO_Init+0x354>)
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	43db      	mvns	r3, r3
 80033fa:	69ba      	ldr	r2, [r7, #24]
 80033fc:	4013      	ands	r3, r2
 80033fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003408:	2b00      	cmp	r3, #0
 800340a:	d003      	beq.n	8003414 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800340c:	69ba      	ldr	r2, [r7, #24]
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	4313      	orrs	r3, r2
 8003412:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003414:	4a14      	ldr	r2, [pc, #80]	; (8003468 <HAL_GPIO_Init+0x354>)
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	3301      	adds	r3, #1
 800341e:	61fb      	str	r3, [r7, #28]
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	2b0f      	cmp	r3, #15
 8003424:	f67f ae84 	bls.w	8003130 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003428:	bf00      	nop
 800342a:	bf00      	nop
 800342c:	3724      	adds	r7, #36	; 0x24
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
 8003436:	bf00      	nop
 8003438:	40023800 	.word	0x40023800
 800343c:	40013800 	.word	0x40013800
 8003440:	40020000 	.word	0x40020000
 8003444:	40020400 	.word	0x40020400
 8003448:	40020800 	.word	0x40020800
 800344c:	40020c00 	.word	0x40020c00
 8003450:	40021000 	.word	0x40021000
 8003454:	40021400 	.word	0x40021400
 8003458:	40021800 	.word	0x40021800
 800345c:	40021c00 	.word	0x40021c00
 8003460:	40022000 	.word	0x40022000
 8003464:	40022400 	.word	0x40022400
 8003468:	40013c00 	.word	0x40013c00

0800346c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800346c:	b480      	push	{r7}
 800346e:	b085      	sub	sp, #20
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	460b      	mov	r3, r1
 8003476:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	691a      	ldr	r2, [r3, #16]
 800347c:	887b      	ldrh	r3, [r7, #2]
 800347e:	4013      	ands	r3, r2
 8003480:	2b00      	cmp	r3, #0
 8003482:	d002      	beq.n	800348a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003484:	2301      	movs	r3, #1
 8003486:	73fb      	strb	r3, [r7, #15]
 8003488:	e001      	b.n	800348e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800348a:	2300      	movs	r3, #0
 800348c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800348e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003490:	4618      	mov	r0, r3
 8003492:	3714      	adds	r7, #20
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	460b      	mov	r3, r1
 80034a6:	807b      	strh	r3, [r7, #2]
 80034a8:	4613      	mov	r3, r2
 80034aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034ac:	787b      	ldrb	r3, [r7, #1]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d003      	beq.n	80034ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034b2:	887a      	ldrh	r2, [r7, #2]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80034b8:	e003      	b.n	80034c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80034ba:	887b      	ldrh	r3, [r7, #2]
 80034bc:	041a      	lsls	r2, r3, #16
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	619a      	str	r2, [r3, #24]
}
 80034c2:	bf00      	nop
 80034c4:	370c      	adds	r7, #12
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
	...

080034d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d101      	bne.n	80034e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e12b      	b.n	800373a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d106      	bne.n	80034fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f7fd ffcc 	bl	8001494 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2224      	movs	r2, #36	; 0x24
 8003500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f022 0201 	bic.w	r2, r2, #1
 8003512:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003522:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003532:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003534:	f001 fcbc 	bl	8004eb0 <HAL_RCC_GetPCLK1Freq>
 8003538:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	4a81      	ldr	r2, [pc, #516]	; (8003744 <HAL_I2C_Init+0x274>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d807      	bhi.n	8003554 <HAL_I2C_Init+0x84>
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	4a80      	ldr	r2, [pc, #512]	; (8003748 <HAL_I2C_Init+0x278>)
 8003548:	4293      	cmp	r3, r2
 800354a:	bf94      	ite	ls
 800354c:	2301      	movls	r3, #1
 800354e:	2300      	movhi	r3, #0
 8003550:	b2db      	uxtb	r3, r3
 8003552:	e006      	b.n	8003562 <HAL_I2C_Init+0x92>
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	4a7d      	ldr	r2, [pc, #500]	; (800374c <HAL_I2C_Init+0x27c>)
 8003558:	4293      	cmp	r3, r2
 800355a:	bf94      	ite	ls
 800355c:	2301      	movls	r3, #1
 800355e:	2300      	movhi	r3, #0
 8003560:	b2db      	uxtb	r3, r3
 8003562:	2b00      	cmp	r3, #0
 8003564:	d001      	beq.n	800356a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e0e7      	b.n	800373a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	4a78      	ldr	r2, [pc, #480]	; (8003750 <HAL_I2C_Init+0x280>)
 800356e:	fba2 2303 	umull	r2, r3, r2, r3
 8003572:	0c9b      	lsrs	r3, r3, #18
 8003574:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	68ba      	ldr	r2, [r7, #8]
 8003586:	430a      	orrs	r2, r1
 8003588:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	6a1b      	ldr	r3, [r3, #32]
 8003590:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	4a6a      	ldr	r2, [pc, #424]	; (8003744 <HAL_I2C_Init+0x274>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d802      	bhi.n	80035a4 <HAL_I2C_Init+0xd4>
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	3301      	adds	r3, #1
 80035a2:	e009      	b.n	80035b8 <HAL_I2C_Init+0xe8>
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80035aa:	fb02 f303 	mul.w	r3, r2, r3
 80035ae:	4a69      	ldr	r2, [pc, #420]	; (8003754 <HAL_I2C_Init+0x284>)
 80035b0:	fba2 2303 	umull	r2, r3, r2, r3
 80035b4:	099b      	lsrs	r3, r3, #6
 80035b6:	3301      	adds	r3, #1
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	6812      	ldr	r2, [r2, #0]
 80035bc:	430b      	orrs	r3, r1
 80035be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	69db      	ldr	r3, [r3, #28]
 80035c6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80035ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	495c      	ldr	r1, [pc, #368]	; (8003744 <HAL_I2C_Init+0x274>)
 80035d4:	428b      	cmp	r3, r1
 80035d6:	d819      	bhi.n	800360c <HAL_I2C_Init+0x13c>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	1e59      	subs	r1, r3, #1
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	005b      	lsls	r3, r3, #1
 80035e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80035e6:	1c59      	adds	r1, r3, #1
 80035e8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80035ec:	400b      	ands	r3, r1
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00a      	beq.n	8003608 <HAL_I2C_Init+0x138>
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	1e59      	subs	r1, r3, #1
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	005b      	lsls	r3, r3, #1
 80035fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8003600:	3301      	adds	r3, #1
 8003602:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003606:	e051      	b.n	80036ac <HAL_I2C_Init+0x1dc>
 8003608:	2304      	movs	r3, #4
 800360a:	e04f      	b.n	80036ac <HAL_I2C_Init+0x1dc>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d111      	bne.n	8003638 <HAL_I2C_Init+0x168>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	1e58      	subs	r0, r3, #1
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6859      	ldr	r1, [r3, #4]
 800361c:	460b      	mov	r3, r1
 800361e:	005b      	lsls	r3, r3, #1
 8003620:	440b      	add	r3, r1
 8003622:	fbb0 f3f3 	udiv	r3, r0, r3
 8003626:	3301      	adds	r3, #1
 8003628:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800362c:	2b00      	cmp	r3, #0
 800362e:	bf0c      	ite	eq
 8003630:	2301      	moveq	r3, #1
 8003632:	2300      	movne	r3, #0
 8003634:	b2db      	uxtb	r3, r3
 8003636:	e012      	b.n	800365e <HAL_I2C_Init+0x18e>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	1e58      	subs	r0, r3, #1
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6859      	ldr	r1, [r3, #4]
 8003640:	460b      	mov	r3, r1
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	440b      	add	r3, r1
 8003646:	0099      	lsls	r1, r3, #2
 8003648:	440b      	add	r3, r1
 800364a:	fbb0 f3f3 	udiv	r3, r0, r3
 800364e:	3301      	adds	r3, #1
 8003650:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003654:	2b00      	cmp	r3, #0
 8003656:	bf0c      	ite	eq
 8003658:	2301      	moveq	r3, #1
 800365a:	2300      	movne	r3, #0
 800365c:	b2db      	uxtb	r3, r3
 800365e:	2b00      	cmp	r3, #0
 8003660:	d001      	beq.n	8003666 <HAL_I2C_Init+0x196>
 8003662:	2301      	movs	r3, #1
 8003664:	e022      	b.n	80036ac <HAL_I2C_Init+0x1dc>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d10e      	bne.n	800368c <HAL_I2C_Init+0x1bc>
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	1e58      	subs	r0, r3, #1
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6859      	ldr	r1, [r3, #4]
 8003676:	460b      	mov	r3, r1
 8003678:	005b      	lsls	r3, r3, #1
 800367a:	440b      	add	r3, r1
 800367c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003680:	3301      	adds	r3, #1
 8003682:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003686:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800368a:	e00f      	b.n	80036ac <HAL_I2C_Init+0x1dc>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	1e58      	subs	r0, r3, #1
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6859      	ldr	r1, [r3, #4]
 8003694:	460b      	mov	r3, r1
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	440b      	add	r3, r1
 800369a:	0099      	lsls	r1, r3, #2
 800369c:	440b      	add	r3, r1
 800369e:	fbb0 f3f3 	udiv	r3, r0, r3
 80036a2:	3301      	adds	r3, #1
 80036a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80036ac:	6879      	ldr	r1, [r7, #4]
 80036ae:	6809      	ldr	r1, [r1, #0]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	69da      	ldr	r2, [r3, #28]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a1b      	ldr	r3, [r3, #32]
 80036c6:	431a      	orrs	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	430a      	orrs	r2, r1
 80036ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80036da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	6911      	ldr	r1, [r2, #16]
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	68d2      	ldr	r2, [r2, #12]
 80036e6:	4311      	orrs	r1, r2
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	6812      	ldr	r2, [r2, #0]
 80036ec:	430b      	orrs	r3, r1
 80036ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	695a      	ldr	r2, [r3, #20]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	699b      	ldr	r3, [r3, #24]
 8003702:	431a      	orrs	r2, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	430a      	orrs	r2, r1
 800370a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f042 0201 	orr.w	r2, r2, #1
 800371a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2220      	movs	r2, #32
 8003726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3710      	adds	r7, #16
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	000186a0 	.word	0x000186a0
 8003748:	001e847f 	.word	0x001e847f
 800374c:	003d08ff 	.word	0x003d08ff
 8003750:	431bde83 	.word	0x431bde83
 8003754:	10624dd3 	.word	0x10624dd3

08003758 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b088      	sub	sp, #32
 800375c:	af02      	add	r7, sp, #8
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	4608      	mov	r0, r1
 8003762:	4611      	mov	r1, r2
 8003764:	461a      	mov	r2, r3
 8003766:	4603      	mov	r3, r0
 8003768:	817b      	strh	r3, [r7, #10]
 800376a:	460b      	mov	r3, r1
 800376c:	813b      	strh	r3, [r7, #8]
 800376e:	4613      	mov	r3, r2
 8003770:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003772:	f7ff fafd 	bl	8002d70 <HAL_GetTick>
 8003776:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800377e:	b2db      	uxtb	r3, r3
 8003780:	2b20      	cmp	r3, #32
 8003782:	f040 80d9 	bne.w	8003938 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	9300      	str	r3, [sp, #0]
 800378a:	2319      	movs	r3, #25
 800378c:	2201      	movs	r2, #1
 800378e:	496d      	ldr	r1, [pc, #436]	; (8003944 <HAL_I2C_Mem_Write+0x1ec>)
 8003790:	68f8      	ldr	r0, [r7, #12]
 8003792:	f000 fc7f 	bl	8004094 <I2C_WaitOnFlagUntilTimeout>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d001      	beq.n	80037a0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800379c:	2302      	movs	r3, #2
 800379e:	e0cc      	b.n	800393a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d101      	bne.n	80037ae <HAL_I2C_Mem_Write+0x56>
 80037aa:	2302      	movs	r3, #2
 80037ac:	e0c5      	b.n	800393a <HAL_I2C_Mem_Write+0x1e2>
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2201      	movs	r2, #1
 80037b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0301 	and.w	r3, r3, #1
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d007      	beq.n	80037d4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f042 0201 	orr.w	r2, r2, #1
 80037d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2221      	movs	r2, #33	; 0x21
 80037e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2240      	movs	r2, #64	; 0x40
 80037f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6a3a      	ldr	r2, [r7, #32]
 80037fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003804:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800380a:	b29a      	uxth	r2, r3
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	4a4d      	ldr	r2, [pc, #308]	; (8003948 <HAL_I2C_Mem_Write+0x1f0>)
 8003814:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003816:	88f8      	ldrh	r0, [r7, #6]
 8003818:	893a      	ldrh	r2, [r7, #8]
 800381a:	8979      	ldrh	r1, [r7, #10]
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	9301      	str	r3, [sp, #4]
 8003820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003822:	9300      	str	r3, [sp, #0]
 8003824:	4603      	mov	r3, r0
 8003826:	68f8      	ldr	r0, [r7, #12]
 8003828:	f000 fab6 	bl	8003d98 <I2C_RequestMemoryWrite>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d052      	beq.n	80038d8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e081      	b.n	800393a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003836:	697a      	ldr	r2, [r7, #20]
 8003838:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800383a:	68f8      	ldr	r0, [r7, #12]
 800383c:	f000 fd00 	bl	8004240 <I2C_WaitOnTXEFlagUntilTimeout>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d00d      	beq.n	8003862 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384a:	2b04      	cmp	r3, #4
 800384c:	d107      	bne.n	800385e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800385c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e06b      	b.n	800393a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003866:	781a      	ldrb	r2, [r3, #0]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003872:	1c5a      	adds	r2, r3, #1
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800387c:	3b01      	subs	r3, #1
 800387e:	b29a      	uxth	r2, r3
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003888:	b29b      	uxth	r3, r3
 800388a:	3b01      	subs	r3, #1
 800388c:	b29a      	uxth	r2, r3
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	695b      	ldr	r3, [r3, #20]
 8003898:	f003 0304 	and.w	r3, r3, #4
 800389c:	2b04      	cmp	r3, #4
 800389e:	d11b      	bne.n	80038d8 <HAL_I2C_Mem_Write+0x180>
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d017      	beq.n	80038d8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ac:	781a      	ldrb	r2, [r3, #0]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b8:	1c5a      	adds	r2, r3, #1
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038c2:	3b01      	subs	r3, #1
 80038c4:	b29a      	uxth	r2, r3
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	3b01      	subs	r3, #1
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d1aa      	bne.n	8003836 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038e0:	697a      	ldr	r2, [r7, #20]
 80038e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038e4:	68f8      	ldr	r0, [r7, #12]
 80038e6:	f000 fcec 	bl	80042c2 <I2C_WaitOnBTFFlagUntilTimeout>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d00d      	beq.n	800390c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f4:	2b04      	cmp	r3, #4
 80038f6:	d107      	bne.n	8003908 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003906:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e016      	b.n	800393a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800391a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2220      	movs	r2, #32
 8003920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003934:	2300      	movs	r3, #0
 8003936:	e000      	b.n	800393a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003938:	2302      	movs	r3, #2
  }
}
 800393a:	4618      	mov	r0, r3
 800393c:	3718      	adds	r7, #24
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	00100002 	.word	0x00100002
 8003948:	ffff0000 	.word	0xffff0000

0800394c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b08c      	sub	sp, #48	; 0x30
 8003950:	af02      	add	r7, sp, #8
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	4608      	mov	r0, r1
 8003956:	4611      	mov	r1, r2
 8003958:	461a      	mov	r2, r3
 800395a:	4603      	mov	r3, r0
 800395c:	817b      	strh	r3, [r7, #10]
 800395e:	460b      	mov	r3, r1
 8003960:	813b      	strh	r3, [r7, #8]
 8003962:	4613      	mov	r3, r2
 8003964:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003966:	f7ff fa03 	bl	8002d70 <HAL_GetTick>
 800396a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003972:	b2db      	uxtb	r3, r3
 8003974:	2b20      	cmp	r3, #32
 8003976:	f040 8208 	bne.w	8003d8a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800397a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397c:	9300      	str	r3, [sp, #0]
 800397e:	2319      	movs	r3, #25
 8003980:	2201      	movs	r2, #1
 8003982:	497b      	ldr	r1, [pc, #492]	; (8003b70 <HAL_I2C_Mem_Read+0x224>)
 8003984:	68f8      	ldr	r0, [r7, #12]
 8003986:	f000 fb85 	bl	8004094 <I2C_WaitOnFlagUntilTimeout>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d001      	beq.n	8003994 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003990:	2302      	movs	r3, #2
 8003992:	e1fb      	b.n	8003d8c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800399a:	2b01      	cmp	r3, #1
 800399c:	d101      	bne.n	80039a2 <HAL_I2C_Mem_Read+0x56>
 800399e:	2302      	movs	r3, #2
 80039a0:	e1f4      	b.n	8003d8c <HAL_I2C_Mem_Read+0x440>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2201      	movs	r2, #1
 80039a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0301 	and.w	r3, r3, #1
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d007      	beq.n	80039c8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f042 0201 	orr.w	r2, r2, #1
 80039c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2222      	movs	r2, #34	; 0x22
 80039dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2240      	movs	r2, #64	; 0x40
 80039e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80039f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039fe:	b29a      	uxth	r2, r3
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	4a5b      	ldr	r2, [pc, #364]	; (8003b74 <HAL_I2C_Mem_Read+0x228>)
 8003a08:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a0a:	88f8      	ldrh	r0, [r7, #6]
 8003a0c:	893a      	ldrh	r2, [r7, #8]
 8003a0e:	8979      	ldrh	r1, [r7, #10]
 8003a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a12:	9301      	str	r3, [sp, #4]
 8003a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a16:	9300      	str	r3, [sp, #0]
 8003a18:	4603      	mov	r3, r0
 8003a1a:	68f8      	ldr	r0, [r7, #12]
 8003a1c:	f000 fa52 	bl	8003ec4 <I2C_RequestMemoryRead>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d001      	beq.n	8003a2a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e1b0      	b.n	8003d8c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d113      	bne.n	8003a5a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a32:	2300      	movs	r3, #0
 8003a34:	623b      	str	r3, [r7, #32]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	695b      	ldr	r3, [r3, #20]
 8003a3c:	623b      	str	r3, [r7, #32]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	699b      	ldr	r3, [r3, #24]
 8003a44:	623b      	str	r3, [r7, #32]
 8003a46:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a56:	601a      	str	r2, [r3, #0]
 8003a58:	e184      	b.n	8003d64 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d11b      	bne.n	8003a9a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a70:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a72:	2300      	movs	r3, #0
 8003a74:	61fb      	str	r3, [r7, #28]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	695b      	ldr	r3, [r3, #20]
 8003a7c:	61fb      	str	r3, [r7, #28]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	699b      	ldr	r3, [r3, #24]
 8003a84:	61fb      	str	r3, [r7, #28]
 8003a86:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a96:	601a      	str	r2, [r3, #0]
 8003a98:	e164      	b.n	8003d64 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d11b      	bne.n	8003ada <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ab0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ac0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	61bb      	str	r3, [r7, #24]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	695b      	ldr	r3, [r3, #20]
 8003acc:	61bb      	str	r3, [r7, #24]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	699b      	ldr	r3, [r3, #24]
 8003ad4:	61bb      	str	r3, [r7, #24]
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	e144      	b.n	8003d64 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ada:	2300      	movs	r3, #0
 8003adc:	617b      	str	r3, [r7, #20]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	695b      	ldr	r3, [r3, #20]
 8003ae4:	617b      	str	r3, [r7, #20]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	699b      	ldr	r3, [r3, #24]
 8003aec:	617b      	str	r3, [r7, #20]
 8003aee:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003af0:	e138      	b.n	8003d64 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003af6:	2b03      	cmp	r3, #3
 8003af8:	f200 80f1 	bhi.w	8003cde <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d123      	bne.n	8003b4c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b06:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003b08:	68f8      	ldr	r0, [r7, #12]
 8003b0a:	f000 fc1b 	bl	8004344 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d001      	beq.n	8003b18 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e139      	b.n	8003d8c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	691a      	ldr	r2, [r3, #16]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b22:	b2d2      	uxtb	r2, r2
 8003b24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2a:	1c5a      	adds	r2, r3, #1
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b34:	3b01      	subs	r3, #1
 8003b36:	b29a      	uxth	r2, r3
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	3b01      	subs	r3, #1
 8003b44:	b29a      	uxth	r2, r3
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b4a:	e10b      	b.n	8003d64 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d14e      	bne.n	8003bf2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b56:	9300      	str	r3, [sp, #0]
 8003b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	4906      	ldr	r1, [pc, #24]	; (8003b78 <HAL_I2C_Mem_Read+0x22c>)
 8003b5e:	68f8      	ldr	r0, [r7, #12]
 8003b60:	f000 fa98 	bl	8004094 <I2C_WaitOnFlagUntilTimeout>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d008      	beq.n	8003b7c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e10e      	b.n	8003d8c <HAL_I2C_Mem_Read+0x440>
 8003b6e:	bf00      	nop
 8003b70:	00100002 	.word	0x00100002
 8003b74:	ffff0000 	.word	0xffff0000
 8003b78:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	691a      	ldr	r2, [r3, #16]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b96:	b2d2      	uxtb	r2, r2
 8003b98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9e:	1c5a      	adds	r2, r3, #1
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ba8:	3b01      	subs	r3, #1
 8003baa:	b29a      	uxth	r2, r3
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	3b01      	subs	r3, #1
 8003bb8:	b29a      	uxth	r2, r3
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	691a      	ldr	r2, [r3, #16]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc8:	b2d2      	uxtb	r2, r2
 8003bca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd0:	1c5a      	adds	r2, r3, #1
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	b29a      	uxth	r2, r3
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	3b01      	subs	r3, #1
 8003bea:	b29a      	uxth	r2, r3
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003bf0:	e0b8      	b.n	8003d64 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf4:	9300      	str	r3, [sp, #0]
 8003bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	4966      	ldr	r1, [pc, #408]	; (8003d94 <HAL_I2C_Mem_Read+0x448>)
 8003bfc:	68f8      	ldr	r0, [r7, #12]
 8003bfe:	f000 fa49 	bl	8004094 <I2C_WaitOnFlagUntilTimeout>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d001      	beq.n	8003c0c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e0bf      	b.n	8003d8c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	691a      	ldr	r2, [r3, #16]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c26:	b2d2      	uxtb	r2, r2
 8003c28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2e:	1c5a      	adds	r2, r3, #1
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	b29a      	uxth	r2, r3
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	3b01      	subs	r3, #1
 8003c48:	b29a      	uxth	r2, r3
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c50:	9300      	str	r3, [sp, #0]
 8003c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c54:	2200      	movs	r2, #0
 8003c56:	494f      	ldr	r1, [pc, #316]	; (8003d94 <HAL_I2C_Mem_Read+0x448>)
 8003c58:	68f8      	ldr	r0, [r7, #12]
 8003c5a:	f000 fa1b 	bl	8004094 <I2C_WaitOnFlagUntilTimeout>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d001      	beq.n	8003c68 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e091      	b.n	8003d8c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	691a      	ldr	r2, [r3, #16]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c82:	b2d2      	uxtb	r2, r2
 8003c84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8a:	1c5a      	adds	r2, r3, #1
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c94:	3b01      	subs	r3, #1
 8003c96:	b29a      	uxth	r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	b29a      	uxth	r2, r3
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	691a      	ldr	r2, [r3, #16]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb4:	b2d2      	uxtb	r2, r2
 8003cb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbc:	1c5a      	adds	r2, r3, #1
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cc6:	3b01      	subs	r3, #1
 8003cc8:	b29a      	uxth	r2, r3
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	3b01      	subs	r3, #1
 8003cd6:	b29a      	uxth	r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003cdc:	e042      	b.n	8003d64 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ce0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003ce2:	68f8      	ldr	r0, [r7, #12]
 8003ce4:	f000 fb2e 	bl	8004344 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d001      	beq.n	8003cf2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e04c      	b.n	8003d8c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	691a      	ldr	r2, [r3, #16]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfc:	b2d2      	uxtb	r2, r2
 8003cfe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d04:	1c5a      	adds	r2, r3, #1
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	b29a      	uxth	r2, r3
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	3b01      	subs	r3, #1
 8003d1e:	b29a      	uxth	r2, r3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	695b      	ldr	r3, [r3, #20]
 8003d2a:	f003 0304 	and.w	r3, r3, #4
 8003d2e:	2b04      	cmp	r3, #4
 8003d30:	d118      	bne.n	8003d64 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	691a      	ldr	r2, [r3, #16]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3c:	b2d2      	uxtb	r2, r2
 8003d3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d44:	1c5a      	adds	r2, r3, #1
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	b29a      	uxth	r2, r3
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	3b01      	subs	r3, #1
 8003d5e:	b29a      	uxth	r2, r3
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	f47f aec2 	bne.w	8003af2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2220      	movs	r2, #32
 8003d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003d86:	2300      	movs	r3, #0
 8003d88:	e000      	b.n	8003d8c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003d8a:	2302      	movs	r3, #2
  }
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3728      	adds	r7, #40	; 0x28
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	00010004 	.word	0x00010004

08003d98 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b088      	sub	sp, #32
 8003d9c:	af02      	add	r7, sp, #8
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	4608      	mov	r0, r1
 8003da2:	4611      	mov	r1, r2
 8003da4:	461a      	mov	r2, r3
 8003da6:	4603      	mov	r3, r0
 8003da8:	817b      	strh	r3, [r7, #10]
 8003daa:	460b      	mov	r3, r1
 8003dac:	813b      	strh	r3, [r7, #8]
 8003dae:	4613      	mov	r3, r2
 8003db0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003dc0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc4:	9300      	str	r3, [sp, #0]
 8003dc6:	6a3b      	ldr	r3, [r7, #32]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003dce:	68f8      	ldr	r0, [r7, #12]
 8003dd0:	f000 f960 	bl	8004094 <I2C_WaitOnFlagUntilTimeout>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d00d      	beq.n	8003df6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003de8:	d103      	bne.n	8003df2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003df0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e05f      	b.n	8003eb6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003df6:	897b      	ldrh	r3, [r7, #10]
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e04:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e08:	6a3a      	ldr	r2, [r7, #32]
 8003e0a:	492d      	ldr	r1, [pc, #180]	; (8003ec0 <I2C_RequestMemoryWrite+0x128>)
 8003e0c:	68f8      	ldr	r0, [r7, #12]
 8003e0e:	f000 f998 	bl	8004142 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d001      	beq.n	8003e1c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e04c      	b.n	8003eb6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	617b      	str	r3, [r7, #20]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	695b      	ldr	r3, [r3, #20]
 8003e26:	617b      	str	r3, [r7, #20]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	617b      	str	r3, [r7, #20]
 8003e30:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e34:	6a39      	ldr	r1, [r7, #32]
 8003e36:	68f8      	ldr	r0, [r7, #12]
 8003e38:	f000 fa02 	bl	8004240 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00d      	beq.n	8003e5e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e46:	2b04      	cmp	r3, #4
 8003e48:	d107      	bne.n	8003e5a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e58:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e02b      	b.n	8003eb6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e5e:	88fb      	ldrh	r3, [r7, #6]
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d105      	bne.n	8003e70 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e64:	893b      	ldrh	r3, [r7, #8]
 8003e66:	b2da      	uxtb	r2, r3
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	611a      	str	r2, [r3, #16]
 8003e6e:	e021      	b.n	8003eb4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003e70:	893b      	ldrh	r3, [r7, #8]
 8003e72:	0a1b      	lsrs	r3, r3, #8
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	b2da      	uxtb	r2, r3
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e80:	6a39      	ldr	r1, [r7, #32]
 8003e82:	68f8      	ldr	r0, [r7, #12]
 8003e84:	f000 f9dc 	bl	8004240 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d00d      	beq.n	8003eaa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e92:	2b04      	cmp	r3, #4
 8003e94:	d107      	bne.n	8003ea6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ea4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e005      	b.n	8003eb6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003eaa:	893b      	ldrh	r3, [r7, #8]
 8003eac:	b2da      	uxtb	r2, r3
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3718      	adds	r7, #24
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	00010002 	.word	0x00010002

08003ec4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b088      	sub	sp, #32
 8003ec8:	af02      	add	r7, sp, #8
 8003eca:	60f8      	str	r0, [r7, #12]
 8003ecc:	4608      	mov	r0, r1
 8003ece:	4611      	mov	r1, r2
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	817b      	strh	r3, [r7, #10]
 8003ed6:	460b      	mov	r3, r1
 8003ed8:	813b      	strh	r3, [r7, #8]
 8003eda:	4613      	mov	r3, r2
 8003edc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003eec:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003efc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f00:	9300      	str	r3, [sp, #0]
 8003f02:	6a3b      	ldr	r3, [r7, #32]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f0a:	68f8      	ldr	r0, [r7, #12]
 8003f0c:	f000 f8c2 	bl	8004094 <I2C_WaitOnFlagUntilTimeout>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00d      	beq.n	8003f32 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f24:	d103      	bne.n	8003f2e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f2c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e0aa      	b.n	8004088 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f32:	897b      	ldrh	r3, [r7, #10]
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	461a      	mov	r2, r3
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f40:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f44:	6a3a      	ldr	r2, [r7, #32]
 8003f46:	4952      	ldr	r1, [pc, #328]	; (8004090 <I2C_RequestMemoryRead+0x1cc>)
 8003f48:	68f8      	ldr	r0, [r7, #12]
 8003f4a:	f000 f8fa 	bl	8004142 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d001      	beq.n	8003f58 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e097      	b.n	8004088 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f58:	2300      	movs	r3, #0
 8003f5a:	617b      	str	r3, [r7, #20]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	695b      	ldr	r3, [r3, #20]
 8003f62:	617b      	str	r3, [r7, #20]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	617b      	str	r3, [r7, #20]
 8003f6c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f70:	6a39      	ldr	r1, [r7, #32]
 8003f72:	68f8      	ldr	r0, [r7, #12]
 8003f74:	f000 f964 	bl	8004240 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d00d      	beq.n	8003f9a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f82:	2b04      	cmp	r3, #4
 8003f84:	d107      	bne.n	8003f96 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f94:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e076      	b.n	8004088 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f9a:	88fb      	ldrh	r3, [r7, #6]
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d105      	bne.n	8003fac <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003fa0:	893b      	ldrh	r3, [r7, #8]
 8003fa2:	b2da      	uxtb	r2, r3
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	611a      	str	r2, [r3, #16]
 8003faa:	e021      	b.n	8003ff0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003fac:	893b      	ldrh	r3, [r7, #8]
 8003fae:	0a1b      	lsrs	r3, r3, #8
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	b2da      	uxtb	r2, r3
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fbc:	6a39      	ldr	r1, [r7, #32]
 8003fbe:	68f8      	ldr	r0, [r7, #12]
 8003fc0:	f000 f93e 	bl	8004240 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00d      	beq.n	8003fe6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fce:	2b04      	cmp	r3, #4
 8003fd0:	d107      	bne.n	8003fe2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fe0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e050      	b.n	8004088 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003fe6:	893b      	ldrh	r3, [r7, #8]
 8003fe8:	b2da      	uxtb	r2, r3
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ff0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ff2:	6a39      	ldr	r1, [r7, #32]
 8003ff4:	68f8      	ldr	r0, [r7, #12]
 8003ff6:	f000 f923 	bl	8004240 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d00d      	beq.n	800401c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004004:	2b04      	cmp	r3, #4
 8004006:	d107      	bne.n	8004018 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004016:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e035      	b.n	8004088 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800402a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800402c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402e:	9300      	str	r3, [sp, #0]
 8004030:	6a3b      	ldr	r3, [r7, #32]
 8004032:	2200      	movs	r2, #0
 8004034:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004038:	68f8      	ldr	r0, [r7, #12]
 800403a:	f000 f82b 	bl	8004094 <I2C_WaitOnFlagUntilTimeout>
 800403e:	4603      	mov	r3, r0
 8004040:	2b00      	cmp	r3, #0
 8004042:	d00d      	beq.n	8004060 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800404e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004052:	d103      	bne.n	800405c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f44f 7200 	mov.w	r2, #512	; 0x200
 800405a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e013      	b.n	8004088 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004060:	897b      	ldrh	r3, [r7, #10]
 8004062:	b2db      	uxtb	r3, r3
 8004064:	f043 0301 	orr.w	r3, r3, #1
 8004068:	b2da      	uxtb	r2, r3
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004072:	6a3a      	ldr	r2, [r7, #32]
 8004074:	4906      	ldr	r1, [pc, #24]	; (8004090 <I2C_RequestMemoryRead+0x1cc>)
 8004076:	68f8      	ldr	r0, [r7, #12]
 8004078:	f000 f863 	bl	8004142 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d001      	beq.n	8004086 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e000      	b.n	8004088 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004086:	2300      	movs	r3, #0
}
 8004088:	4618      	mov	r0, r3
 800408a:	3718      	adds	r7, #24
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	00010002 	.word	0x00010002

08004094 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	603b      	str	r3, [r7, #0]
 80040a0:	4613      	mov	r3, r2
 80040a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040a4:	e025      	b.n	80040f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040ac:	d021      	beq.n	80040f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040ae:	f7fe fe5f 	bl	8002d70 <HAL_GetTick>
 80040b2:	4602      	mov	r2, r0
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	683a      	ldr	r2, [r7, #0]
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d302      	bcc.n	80040c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d116      	bne.n	80040f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2200      	movs	r2, #0
 80040c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2220      	movs	r2, #32
 80040ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040de:	f043 0220 	orr.w	r2, r3, #32
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e023      	b.n	800413a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	0c1b      	lsrs	r3, r3, #16
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d10d      	bne.n	8004118 <I2C_WaitOnFlagUntilTimeout+0x84>
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	695b      	ldr	r3, [r3, #20]
 8004102:	43da      	mvns	r2, r3
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	4013      	ands	r3, r2
 8004108:	b29b      	uxth	r3, r3
 800410a:	2b00      	cmp	r3, #0
 800410c:	bf0c      	ite	eq
 800410e:	2301      	moveq	r3, #1
 8004110:	2300      	movne	r3, #0
 8004112:	b2db      	uxtb	r3, r3
 8004114:	461a      	mov	r2, r3
 8004116:	e00c      	b.n	8004132 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	699b      	ldr	r3, [r3, #24]
 800411e:	43da      	mvns	r2, r3
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	4013      	ands	r3, r2
 8004124:	b29b      	uxth	r3, r3
 8004126:	2b00      	cmp	r3, #0
 8004128:	bf0c      	ite	eq
 800412a:	2301      	moveq	r3, #1
 800412c:	2300      	movne	r3, #0
 800412e:	b2db      	uxtb	r3, r3
 8004130:	461a      	mov	r2, r3
 8004132:	79fb      	ldrb	r3, [r7, #7]
 8004134:	429a      	cmp	r2, r3
 8004136:	d0b6      	beq.n	80040a6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004138:	2300      	movs	r3, #0
}
 800413a:	4618      	mov	r0, r3
 800413c:	3710      	adds	r7, #16
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}

08004142 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004142:	b580      	push	{r7, lr}
 8004144:	b084      	sub	sp, #16
 8004146:	af00      	add	r7, sp, #0
 8004148:	60f8      	str	r0, [r7, #12]
 800414a:	60b9      	str	r1, [r7, #8]
 800414c:	607a      	str	r2, [r7, #4]
 800414e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004150:	e051      	b.n	80041f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	695b      	ldr	r3, [r3, #20]
 8004158:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800415c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004160:	d123      	bne.n	80041aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004170:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800417a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2200      	movs	r2, #0
 8004180:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2220      	movs	r2, #32
 8004186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004196:	f043 0204 	orr.w	r2, r3, #4
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e046      	b.n	8004238 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041b0:	d021      	beq.n	80041f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041b2:	f7fe fddd 	bl	8002d70 <HAL_GetTick>
 80041b6:	4602      	mov	r2, r0
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	429a      	cmp	r2, r3
 80041c0:	d302      	bcc.n	80041c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d116      	bne.n	80041f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2200      	movs	r2, #0
 80041cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2220      	movs	r2, #32
 80041d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e2:	f043 0220 	orr.w	r2, r3, #32
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e020      	b.n	8004238 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	0c1b      	lsrs	r3, r3, #16
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d10c      	bne.n	800421a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	695b      	ldr	r3, [r3, #20]
 8004206:	43da      	mvns	r2, r3
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	4013      	ands	r3, r2
 800420c:	b29b      	uxth	r3, r3
 800420e:	2b00      	cmp	r3, #0
 8004210:	bf14      	ite	ne
 8004212:	2301      	movne	r3, #1
 8004214:	2300      	moveq	r3, #0
 8004216:	b2db      	uxtb	r3, r3
 8004218:	e00b      	b.n	8004232 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	699b      	ldr	r3, [r3, #24]
 8004220:	43da      	mvns	r2, r3
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	4013      	ands	r3, r2
 8004226:	b29b      	uxth	r3, r3
 8004228:	2b00      	cmp	r3, #0
 800422a:	bf14      	ite	ne
 800422c:	2301      	movne	r3, #1
 800422e:	2300      	moveq	r3, #0
 8004230:	b2db      	uxtb	r3, r3
 8004232:	2b00      	cmp	r3, #0
 8004234:	d18d      	bne.n	8004152 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004236:	2300      	movs	r3, #0
}
 8004238:	4618      	mov	r0, r3
 800423a:	3710      	adds	r7, #16
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	60b9      	str	r1, [r7, #8]
 800424a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800424c:	e02d      	b.n	80042aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800424e:	68f8      	ldr	r0, [r7, #12]
 8004250:	f000 f8ce 	bl	80043f0 <I2C_IsAcknowledgeFailed>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d001      	beq.n	800425e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e02d      	b.n	80042ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004264:	d021      	beq.n	80042aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004266:	f7fe fd83 	bl	8002d70 <HAL_GetTick>
 800426a:	4602      	mov	r2, r0
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	68ba      	ldr	r2, [r7, #8]
 8004272:	429a      	cmp	r2, r3
 8004274:	d302      	bcc.n	800427c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d116      	bne.n	80042aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2220      	movs	r2, #32
 8004286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2200      	movs	r2, #0
 800428e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004296:	f043 0220 	orr.w	r2, r3, #32
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e007      	b.n	80042ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	695b      	ldr	r3, [r3, #20]
 80042b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042b4:	2b80      	cmp	r3, #128	; 0x80
 80042b6:	d1ca      	bne.n	800424e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3710      	adds	r7, #16
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}

080042c2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042c2:	b580      	push	{r7, lr}
 80042c4:	b084      	sub	sp, #16
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	60f8      	str	r0, [r7, #12]
 80042ca:	60b9      	str	r1, [r7, #8]
 80042cc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80042ce:	e02d      	b.n	800432c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80042d0:	68f8      	ldr	r0, [r7, #12]
 80042d2:	f000 f88d 	bl	80043f0 <I2C_IsAcknowledgeFailed>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d001      	beq.n	80042e0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e02d      	b.n	800433c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042e6:	d021      	beq.n	800432c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042e8:	f7fe fd42 	bl	8002d70 <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	68ba      	ldr	r2, [r7, #8]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d302      	bcc.n	80042fe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d116      	bne.n	800432c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2200      	movs	r2, #0
 8004302:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2220      	movs	r2, #32
 8004308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2200      	movs	r2, #0
 8004310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004318:	f043 0220 	orr.w	r2, r3, #32
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e007      	b.n	800433c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	695b      	ldr	r3, [r3, #20]
 8004332:	f003 0304 	and.w	r3, r3, #4
 8004336:	2b04      	cmp	r3, #4
 8004338:	d1ca      	bne.n	80042d0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800433a:	2300      	movs	r3, #0
}
 800433c:	4618      	mov	r0, r3
 800433e:	3710      	adds	r7, #16
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}

08004344 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b084      	sub	sp, #16
 8004348:	af00      	add	r7, sp, #0
 800434a:	60f8      	str	r0, [r7, #12]
 800434c:	60b9      	str	r1, [r7, #8]
 800434e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004350:	e042      	b.n	80043d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	695b      	ldr	r3, [r3, #20]
 8004358:	f003 0310 	and.w	r3, r3, #16
 800435c:	2b10      	cmp	r3, #16
 800435e:	d119      	bne.n	8004394 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f06f 0210 	mvn.w	r2, #16
 8004368:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2200      	movs	r2, #0
 800436e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2220      	movs	r2, #32
 8004374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2200      	movs	r2, #0
 800437c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2200      	movs	r2, #0
 800438c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e029      	b.n	80043e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004394:	f7fe fcec 	bl	8002d70 <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	68ba      	ldr	r2, [r7, #8]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d302      	bcc.n	80043aa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d116      	bne.n	80043d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2200      	movs	r2, #0
 80043ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2220      	movs	r2, #32
 80043b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c4:	f043 0220 	orr.w	r2, r3, #32
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e007      	b.n	80043e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	695b      	ldr	r3, [r3, #20]
 80043de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043e2:	2b40      	cmp	r3, #64	; 0x40
 80043e4:	d1b5      	bne.n	8004352 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80043e6:	2300      	movs	r3, #0
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3710      	adds	r7, #16
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	695b      	ldr	r3, [r3, #20]
 80043fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004402:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004406:	d11b      	bne.n	8004440 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004410:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2220      	movs	r2, #32
 800441c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442c:	f043 0204 	orr.w	r2, r3, #4
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e000      	b.n	8004442 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	370c      	adds	r7, #12
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr

0800444e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800444e:	b480      	push	{r7}
 8004450:	b083      	sub	sp, #12
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
 8004456:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800445e:	b2db      	uxtb	r3, r3
 8004460:	2b20      	cmp	r3, #32
 8004462:	d129      	bne.n	80044b8 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2224      	movs	r2, #36	; 0x24
 8004468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f022 0201 	bic.w	r2, r2, #1
 800447a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f022 0210 	bic.w	r2, r2, #16
 800448a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	683a      	ldr	r2, [r7, #0]
 8004498:	430a      	orrs	r2, r1
 800449a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f042 0201 	orr.w	r2, r2, #1
 80044aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2220      	movs	r2, #32
 80044b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80044b4:	2300      	movs	r3, #0
 80044b6:	e000      	b.n	80044ba <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80044b8:	2302      	movs	r3, #2
  }
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	370c      	adds	r7, #12
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr

080044c6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80044c6:	b480      	push	{r7}
 80044c8:	b085      	sub	sp, #20
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
 80044ce:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80044d0:	2300      	movs	r3, #0
 80044d2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	2b20      	cmp	r3, #32
 80044de:	d12a      	bne.n	8004536 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2224      	movs	r2, #36	; 0x24
 80044e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f022 0201 	bic.w	r2, r2, #1
 80044f6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fe:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004500:	89fb      	ldrh	r3, [r7, #14]
 8004502:	f023 030f 	bic.w	r3, r3, #15
 8004506:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	b29a      	uxth	r2, r3
 800450c:	89fb      	ldrh	r3, [r7, #14]
 800450e:	4313      	orrs	r3, r2
 8004510:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	89fa      	ldrh	r2, [r7, #14]
 8004518:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f042 0201 	orr.w	r2, r2, #1
 8004528:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2220      	movs	r2, #32
 800452e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004532:	2300      	movs	r3, #0
 8004534:	e000      	b.n	8004538 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004536:	2302      	movs	r3, #2
  }
}
 8004538:	4618      	mov	r0, r3
 800453a:	3714      	adds	r7, #20
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr

08004544 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b082      	sub	sp, #8
 8004548:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800454a:	2300      	movs	r3, #0
 800454c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800454e:	2300      	movs	r3, #0
 8004550:	603b      	str	r3, [r7, #0]
 8004552:	4b20      	ldr	r3, [pc, #128]	; (80045d4 <HAL_PWREx_EnableOverDrive+0x90>)
 8004554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004556:	4a1f      	ldr	r2, [pc, #124]	; (80045d4 <HAL_PWREx_EnableOverDrive+0x90>)
 8004558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800455c:	6413      	str	r3, [r2, #64]	; 0x40
 800455e:	4b1d      	ldr	r3, [pc, #116]	; (80045d4 <HAL_PWREx_EnableOverDrive+0x90>)
 8004560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004566:	603b      	str	r3, [r7, #0]
 8004568:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800456a:	4b1b      	ldr	r3, [pc, #108]	; (80045d8 <HAL_PWREx_EnableOverDrive+0x94>)
 800456c:	2201      	movs	r2, #1
 800456e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004570:	f7fe fbfe 	bl	8002d70 <HAL_GetTick>
 8004574:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004576:	e009      	b.n	800458c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004578:	f7fe fbfa 	bl	8002d70 <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004586:	d901      	bls.n	800458c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	e01f      	b.n	80045cc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800458c:	4b13      	ldr	r3, [pc, #76]	; (80045dc <HAL_PWREx_EnableOverDrive+0x98>)
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004594:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004598:	d1ee      	bne.n	8004578 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800459a:	4b11      	ldr	r3, [pc, #68]	; (80045e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800459c:	2201      	movs	r2, #1
 800459e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80045a0:	f7fe fbe6 	bl	8002d70 <HAL_GetTick>
 80045a4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80045a6:	e009      	b.n	80045bc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80045a8:	f7fe fbe2 	bl	8002d70 <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80045b6:	d901      	bls.n	80045bc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	e007      	b.n	80045cc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80045bc:	4b07      	ldr	r3, [pc, #28]	; (80045dc <HAL_PWREx_EnableOverDrive+0x98>)
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80045c8:	d1ee      	bne.n	80045a8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80045ca:	2300      	movs	r3, #0
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3708      	adds	r7, #8
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	40023800 	.word	0x40023800
 80045d8:	420e0040 	.word	0x420e0040
 80045dc:	40007000 	.word	0x40007000
 80045e0:	420e0044 	.word	0x420e0044

080045e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b086      	sub	sp, #24
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d101      	bne.n	80045f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e25e      	b.n	8004ab4 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0301 	and.w	r3, r3, #1
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d075      	beq.n	80046ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004602:	4b88      	ldr	r3, [pc, #544]	; (8004824 <HAL_RCC_OscConfig+0x240>)
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	f003 030c 	and.w	r3, r3, #12
 800460a:	2b04      	cmp	r3, #4
 800460c:	d00c      	beq.n	8004628 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800460e:	4b85      	ldr	r3, [pc, #532]	; (8004824 <HAL_RCC_OscConfig+0x240>)
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004616:	2b08      	cmp	r3, #8
 8004618:	d112      	bne.n	8004640 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800461a:	4b82      	ldr	r3, [pc, #520]	; (8004824 <HAL_RCC_OscConfig+0x240>)
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004622:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004626:	d10b      	bne.n	8004640 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004628:	4b7e      	ldr	r3, [pc, #504]	; (8004824 <HAL_RCC_OscConfig+0x240>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004630:	2b00      	cmp	r3, #0
 8004632:	d05b      	beq.n	80046ec <HAL_RCC_OscConfig+0x108>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d157      	bne.n	80046ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e239      	b.n	8004ab4 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004648:	d106      	bne.n	8004658 <HAL_RCC_OscConfig+0x74>
 800464a:	4b76      	ldr	r3, [pc, #472]	; (8004824 <HAL_RCC_OscConfig+0x240>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a75      	ldr	r2, [pc, #468]	; (8004824 <HAL_RCC_OscConfig+0x240>)
 8004650:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004654:	6013      	str	r3, [r2, #0]
 8004656:	e01d      	b.n	8004694 <HAL_RCC_OscConfig+0xb0>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004660:	d10c      	bne.n	800467c <HAL_RCC_OscConfig+0x98>
 8004662:	4b70      	ldr	r3, [pc, #448]	; (8004824 <HAL_RCC_OscConfig+0x240>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a6f      	ldr	r2, [pc, #444]	; (8004824 <HAL_RCC_OscConfig+0x240>)
 8004668:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800466c:	6013      	str	r3, [r2, #0]
 800466e:	4b6d      	ldr	r3, [pc, #436]	; (8004824 <HAL_RCC_OscConfig+0x240>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a6c      	ldr	r2, [pc, #432]	; (8004824 <HAL_RCC_OscConfig+0x240>)
 8004674:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004678:	6013      	str	r3, [r2, #0]
 800467a:	e00b      	b.n	8004694 <HAL_RCC_OscConfig+0xb0>
 800467c:	4b69      	ldr	r3, [pc, #420]	; (8004824 <HAL_RCC_OscConfig+0x240>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a68      	ldr	r2, [pc, #416]	; (8004824 <HAL_RCC_OscConfig+0x240>)
 8004682:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004686:	6013      	str	r3, [r2, #0]
 8004688:	4b66      	ldr	r3, [pc, #408]	; (8004824 <HAL_RCC_OscConfig+0x240>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a65      	ldr	r2, [pc, #404]	; (8004824 <HAL_RCC_OscConfig+0x240>)
 800468e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004692:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d013      	beq.n	80046c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800469c:	f7fe fb68 	bl	8002d70 <HAL_GetTick>
 80046a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046a2:	e008      	b.n	80046b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046a4:	f7fe fb64 	bl	8002d70 <HAL_GetTick>
 80046a8:	4602      	mov	r2, r0
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	2b64      	cmp	r3, #100	; 0x64
 80046b0:	d901      	bls.n	80046b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	e1fe      	b.n	8004ab4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046b6:	4b5b      	ldr	r3, [pc, #364]	; (8004824 <HAL_RCC_OscConfig+0x240>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d0f0      	beq.n	80046a4 <HAL_RCC_OscConfig+0xc0>
 80046c2:	e014      	b.n	80046ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046c4:	f7fe fb54 	bl	8002d70 <HAL_GetTick>
 80046c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046ca:	e008      	b.n	80046de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046cc:	f7fe fb50 	bl	8002d70 <HAL_GetTick>
 80046d0:	4602      	mov	r2, r0
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	2b64      	cmp	r3, #100	; 0x64
 80046d8:	d901      	bls.n	80046de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e1ea      	b.n	8004ab4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046de:	4b51      	ldr	r3, [pc, #324]	; (8004824 <HAL_RCC_OscConfig+0x240>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d1f0      	bne.n	80046cc <HAL_RCC_OscConfig+0xe8>
 80046ea:	e000      	b.n	80046ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 0302 	and.w	r3, r3, #2
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d063      	beq.n	80047c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80046fa:	4b4a      	ldr	r3, [pc, #296]	; (8004824 <HAL_RCC_OscConfig+0x240>)
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	f003 030c 	and.w	r3, r3, #12
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00b      	beq.n	800471e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004706:	4b47      	ldr	r3, [pc, #284]	; (8004824 <HAL_RCC_OscConfig+0x240>)
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800470e:	2b08      	cmp	r3, #8
 8004710:	d11c      	bne.n	800474c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004712:	4b44      	ldr	r3, [pc, #272]	; (8004824 <HAL_RCC_OscConfig+0x240>)
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d116      	bne.n	800474c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800471e:	4b41      	ldr	r3, [pc, #260]	; (8004824 <HAL_RCC_OscConfig+0x240>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 0302 	and.w	r3, r3, #2
 8004726:	2b00      	cmp	r3, #0
 8004728:	d005      	beq.n	8004736 <HAL_RCC_OscConfig+0x152>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	2b01      	cmp	r3, #1
 8004730:	d001      	beq.n	8004736 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e1be      	b.n	8004ab4 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004736:	4b3b      	ldr	r3, [pc, #236]	; (8004824 <HAL_RCC_OscConfig+0x240>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	691b      	ldr	r3, [r3, #16]
 8004742:	00db      	lsls	r3, r3, #3
 8004744:	4937      	ldr	r1, [pc, #220]	; (8004824 <HAL_RCC_OscConfig+0x240>)
 8004746:	4313      	orrs	r3, r2
 8004748:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800474a:	e03a      	b.n	80047c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d020      	beq.n	8004796 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004754:	4b34      	ldr	r3, [pc, #208]	; (8004828 <HAL_RCC_OscConfig+0x244>)
 8004756:	2201      	movs	r2, #1
 8004758:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800475a:	f7fe fb09 	bl	8002d70 <HAL_GetTick>
 800475e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004760:	e008      	b.n	8004774 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004762:	f7fe fb05 	bl	8002d70 <HAL_GetTick>
 8004766:	4602      	mov	r2, r0
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	1ad3      	subs	r3, r2, r3
 800476c:	2b02      	cmp	r3, #2
 800476e:	d901      	bls.n	8004774 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004770:	2303      	movs	r3, #3
 8004772:	e19f      	b.n	8004ab4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004774:	4b2b      	ldr	r3, [pc, #172]	; (8004824 <HAL_RCC_OscConfig+0x240>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0302 	and.w	r3, r3, #2
 800477c:	2b00      	cmp	r3, #0
 800477e:	d0f0      	beq.n	8004762 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004780:	4b28      	ldr	r3, [pc, #160]	; (8004824 <HAL_RCC_OscConfig+0x240>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	00db      	lsls	r3, r3, #3
 800478e:	4925      	ldr	r1, [pc, #148]	; (8004824 <HAL_RCC_OscConfig+0x240>)
 8004790:	4313      	orrs	r3, r2
 8004792:	600b      	str	r3, [r1, #0]
 8004794:	e015      	b.n	80047c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004796:	4b24      	ldr	r3, [pc, #144]	; (8004828 <HAL_RCC_OscConfig+0x244>)
 8004798:	2200      	movs	r2, #0
 800479a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800479c:	f7fe fae8 	bl	8002d70 <HAL_GetTick>
 80047a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047a2:	e008      	b.n	80047b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047a4:	f7fe fae4 	bl	8002d70 <HAL_GetTick>
 80047a8:	4602      	mov	r2, r0
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d901      	bls.n	80047b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80047b2:	2303      	movs	r3, #3
 80047b4:	e17e      	b.n	8004ab4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047b6:	4b1b      	ldr	r3, [pc, #108]	; (8004824 <HAL_RCC_OscConfig+0x240>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 0302 	and.w	r3, r3, #2
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d1f0      	bne.n	80047a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0308 	and.w	r3, r3, #8
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d036      	beq.n	800483c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	695b      	ldr	r3, [r3, #20]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d016      	beq.n	8004804 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047d6:	4b15      	ldr	r3, [pc, #84]	; (800482c <HAL_RCC_OscConfig+0x248>)
 80047d8:	2201      	movs	r2, #1
 80047da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047dc:	f7fe fac8 	bl	8002d70 <HAL_GetTick>
 80047e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047e2:	e008      	b.n	80047f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047e4:	f7fe fac4 	bl	8002d70 <HAL_GetTick>
 80047e8:	4602      	mov	r2, r0
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d901      	bls.n	80047f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80047f2:	2303      	movs	r3, #3
 80047f4:	e15e      	b.n	8004ab4 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047f6:	4b0b      	ldr	r3, [pc, #44]	; (8004824 <HAL_RCC_OscConfig+0x240>)
 80047f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047fa:	f003 0302 	and.w	r3, r3, #2
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d0f0      	beq.n	80047e4 <HAL_RCC_OscConfig+0x200>
 8004802:	e01b      	b.n	800483c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004804:	4b09      	ldr	r3, [pc, #36]	; (800482c <HAL_RCC_OscConfig+0x248>)
 8004806:	2200      	movs	r2, #0
 8004808:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800480a:	f7fe fab1 	bl	8002d70 <HAL_GetTick>
 800480e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004810:	e00e      	b.n	8004830 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004812:	f7fe faad 	bl	8002d70 <HAL_GetTick>
 8004816:	4602      	mov	r2, r0
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	2b02      	cmp	r3, #2
 800481e:	d907      	bls.n	8004830 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004820:	2303      	movs	r3, #3
 8004822:	e147      	b.n	8004ab4 <HAL_RCC_OscConfig+0x4d0>
 8004824:	40023800 	.word	0x40023800
 8004828:	42470000 	.word	0x42470000
 800482c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004830:	4b88      	ldr	r3, [pc, #544]	; (8004a54 <HAL_RCC_OscConfig+0x470>)
 8004832:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004834:	f003 0302 	and.w	r3, r3, #2
 8004838:	2b00      	cmp	r3, #0
 800483a:	d1ea      	bne.n	8004812 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0304 	and.w	r3, r3, #4
 8004844:	2b00      	cmp	r3, #0
 8004846:	f000 8097 	beq.w	8004978 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800484a:	2300      	movs	r3, #0
 800484c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800484e:	4b81      	ldr	r3, [pc, #516]	; (8004a54 <HAL_RCC_OscConfig+0x470>)
 8004850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004856:	2b00      	cmp	r3, #0
 8004858:	d10f      	bne.n	800487a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800485a:	2300      	movs	r3, #0
 800485c:	60bb      	str	r3, [r7, #8]
 800485e:	4b7d      	ldr	r3, [pc, #500]	; (8004a54 <HAL_RCC_OscConfig+0x470>)
 8004860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004862:	4a7c      	ldr	r2, [pc, #496]	; (8004a54 <HAL_RCC_OscConfig+0x470>)
 8004864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004868:	6413      	str	r3, [r2, #64]	; 0x40
 800486a:	4b7a      	ldr	r3, [pc, #488]	; (8004a54 <HAL_RCC_OscConfig+0x470>)
 800486c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004872:	60bb      	str	r3, [r7, #8]
 8004874:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004876:	2301      	movs	r3, #1
 8004878:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800487a:	4b77      	ldr	r3, [pc, #476]	; (8004a58 <HAL_RCC_OscConfig+0x474>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004882:	2b00      	cmp	r3, #0
 8004884:	d118      	bne.n	80048b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004886:	4b74      	ldr	r3, [pc, #464]	; (8004a58 <HAL_RCC_OscConfig+0x474>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a73      	ldr	r2, [pc, #460]	; (8004a58 <HAL_RCC_OscConfig+0x474>)
 800488c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004890:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004892:	f7fe fa6d 	bl	8002d70 <HAL_GetTick>
 8004896:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004898:	e008      	b.n	80048ac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800489a:	f7fe fa69 	bl	8002d70 <HAL_GetTick>
 800489e:	4602      	mov	r2, r0
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d901      	bls.n	80048ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80048a8:	2303      	movs	r3, #3
 80048aa:	e103      	b.n	8004ab4 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048ac:	4b6a      	ldr	r3, [pc, #424]	; (8004a58 <HAL_RCC_OscConfig+0x474>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d0f0      	beq.n	800489a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d106      	bne.n	80048ce <HAL_RCC_OscConfig+0x2ea>
 80048c0:	4b64      	ldr	r3, [pc, #400]	; (8004a54 <HAL_RCC_OscConfig+0x470>)
 80048c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048c4:	4a63      	ldr	r2, [pc, #396]	; (8004a54 <HAL_RCC_OscConfig+0x470>)
 80048c6:	f043 0301 	orr.w	r3, r3, #1
 80048ca:	6713      	str	r3, [r2, #112]	; 0x70
 80048cc:	e01c      	b.n	8004908 <HAL_RCC_OscConfig+0x324>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	2b05      	cmp	r3, #5
 80048d4:	d10c      	bne.n	80048f0 <HAL_RCC_OscConfig+0x30c>
 80048d6:	4b5f      	ldr	r3, [pc, #380]	; (8004a54 <HAL_RCC_OscConfig+0x470>)
 80048d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048da:	4a5e      	ldr	r2, [pc, #376]	; (8004a54 <HAL_RCC_OscConfig+0x470>)
 80048dc:	f043 0304 	orr.w	r3, r3, #4
 80048e0:	6713      	str	r3, [r2, #112]	; 0x70
 80048e2:	4b5c      	ldr	r3, [pc, #368]	; (8004a54 <HAL_RCC_OscConfig+0x470>)
 80048e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048e6:	4a5b      	ldr	r2, [pc, #364]	; (8004a54 <HAL_RCC_OscConfig+0x470>)
 80048e8:	f043 0301 	orr.w	r3, r3, #1
 80048ec:	6713      	str	r3, [r2, #112]	; 0x70
 80048ee:	e00b      	b.n	8004908 <HAL_RCC_OscConfig+0x324>
 80048f0:	4b58      	ldr	r3, [pc, #352]	; (8004a54 <HAL_RCC_OscConfig+0x470>)
 80048f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048f4:	4a57      	ldr	r2, [pc, #348]	; (8004a54 <HAL_RCC_OscConfig+0x470>)
 80048f6:	f023 0301 	bic.w	r3, r3, #1
 80048fa:	6713      	str	r3, [r2, #112]	; 0x70
 80048fc:	4b55      	ldr	r3, [pc, #340]	; (8004a54 <HAL_RCC_OscConfig+0x470>)
 80048fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004900:	4a54      	ldr	r2, [pc, #336]	; (8004a54 <HAL_RCC_OscConfig+0x470>)
 8004902:	f023 0304 	bic.w	r3, r3, #4
 8004906:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d015      	beq.n	800493c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004910:	f7fe fa2e 	bl	8002d70 <HAL_GetTick>
 8004914:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004916:	e00a      	b.n	800492e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004918:	f7fe fa2a 	bl	8002d70 <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	f241 3288 	movw	r2, #5000	; 0x1388
 8004926:	4293      	cmp	r3, r2
 8004928:	d901      	bls.n	800492e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	e0c2      	b.n	8004ab4 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800492e:	4b49      	ldr	r3, [pc, #292]	; (8004a54 <HAL_RCC_OscConfig+0x470>)
 8004930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004932:	f003 0302 	and.w	r3, r3, #2
 8004936:	2b00      	cmp	r3, #0
 8004938:	d0ee      	beq.n	8004918 <HAL_RCC_OscConfig+0x334>
 800493a:	e014      	b.n	8004966 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800493c:	f7fe fa18 	bl	8002d70 <HAL_GetTick>
 8004940:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004942:	e00a      	b.n	800495a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004944:	f7fe fa14 	bl	8002d70 <HAL_GetTick>
 8004948:	4602      	mov	r2, r0
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004952:	4293      	cmp	r3, r2
 8004954:	d901      	bls.n	800495a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e0ac      	b.n	8004ab4 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800495a:	4b3e      	ldr	r3, [pc, #248]	; (8004a54 <HAL_RCC_OscConfig+0x470>)
 800495c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800495e:	f003 0302 	and.w	r3, r3, #2
 8004962:	2b00      	cmp	r3, #0
 8004964:	d1ee      	bne.n	8004944 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004966:	7dfb      	ldrb	r3, [r7, #23]
 8004968:	2b01      	cmp	r3, #1
 800496a:	d105      	bne.n	8004978 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800496c:	4b39      	ldr	r3, [pc, #228]	; (8004a54 <HAL_RCC_OscConfig+0x470>)
 800496e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004970:	4a38      	ldr	r2, [pc, #224]	; (8004a54 <HAL_RCC_OscConfig+0x470>)
 8004972:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004976:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	699b      	ldr	r3, [r3, #24]
 800497c:	2b00      	cmp	r3, #0
 800497e:	f000 8098 	beq.w	8004ab2 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004982:	4b34      	ldr	r3, [pc, #208]	; (8004a54 <HAL_RCC_OscConfig+0x470>)
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	f003 030c 	and.w	r3, r3, #12
 800498a:	2b08      	cmp	r3, #8
 800498c:	d05c      	beq.n	8004a48 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	699b      	ldr	r3, [r3, #24]
 8004992:	2b02      	cmp	r3, #2
 8004994:	d141      	bne.n	8004a1a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004996:	4b31      	ldr	r3, [pc, #196]	; (8004a5c <HAL_RCC_OscConfig+0x478>)
 8004998:	2200      	movs	r2, #0
 800499a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800499c:	f7fe f9e8 	bl	8002d70 <HAL_GetTick>
 80049a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049a2:	e008      	b.n	80049b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049a4:	f7fe f9e4 	bl	8002d70 <HAL_GetTick>
 80049a8:	4602      	mov	r2, r0
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	2b02      	cmp	r3, #2
 80049b0:	d901      	bls.n	80049b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e07e      	b.n	8004ab4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049b6:	4b27      	ldr	r3, [pc, #156]	; (8004a54 <HAL_RCC_OscConfig+0x470>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d1f0      	bne.n	80049a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	69da      	ldr	r2, [r3, #28]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a1b      	ldr	r3, [r3, #32]
 80049ca:	431a      	orrs	r2, r3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d0:	019b      	lsls	r3, r3, #6
 80049d2:	431a      	orrs	r2, r3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d8:	085b      	lsrs	r3, r3, #1
 80049da:	3b01      	subs	r3, #1
 80049dc:	041b      	lsls	r3, r3, #16
 80049de:	431a      	orrs	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e4:	061b      	lsls	r3, r3, #24
 80049e6:	491b      	ldr	r1, [pc, #108]	; (8004a54 <HAL_RCC_OscConfig+0x470>)
 80049e8:	4313      	orrs	r3, r2
 80049ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049ec:	4b1b      	ldr	r3, [pc, #108]	; (8004a5c <HAL_RCC_OscConfig+0x478>)
 80049ee:	2201      	movs	r2, #1
 80049f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049f2:	f7fe f9bd 	bl	8002d70 <HAL_GetTick>
 80049f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049f8:	e008      	b.n	8004a0c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049fa:	f7fe f9b9 	bl	8002d70 <HAL_GetTick>
 80049fe:	4602      	mov	r2, r0
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	1ad3      	subs	r3, r2, r3
 8004a04:	2b02      	cmp	r3, #2
 8004a06:	d901      	bls.n	8004a0c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004a08:	2303      	movs	r3, #3
 8004a0a:	e053      	b.n	8004ab4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a0c:	4b11      	ldr	r3, [pc, #68]	; (8004a54 <HAL_RCC_OscConfig+0x470>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d0f0      	beq.n	80049fa <HAL_RCC_OscConfig+0x416>
 8004a18:	e04b      	b.n	8004ab2 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a1a:	4b10      	ldr	r3, [pc, #64]	; (8004a5c <HAL_RCC_OscConfig+0x478>)
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a20:	f7fe f9a6 	bl	8002d70 <HAL_GetTick>
 8004a24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a26:	e008      	b.n	8004a3a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a28:	f7fe f9a2 	bl	8002d70 <HAL_GetTick>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	2b02      	cmp	r3, #2
 8004a34:	d901      	bls.n	8004a3a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	e03c      	b.n	8004ab4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a3a:	4b06      	ldr	r3, [pc, #24]	; (8004a54 <HAL_RCC_OscConfig+0x470>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d1f0      	bne.n	8004a28 <HAL_RCC_OscConfig+0x444>
 8004a46:	e034      	b.n	8004ab2 <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	699b      	ldr	r3, [r3, #24]
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d107      	bne.n	8004a60 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e02f      	b.n	8004ab4 <HAL_RCC_OscConfig+0x4d0>
 8004a54:	40023800 	.word	0x40023800
 8004a58:	40007000 	.word	0x40007000
 8004a5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a60:	4b16      	ldr	r3, [pc, #88]	; (8004abc <HAL_RCC_OscConfig+0x4d8>)
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	69db      	ldr	r3, [r3, #28]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d11c      	bne.n	8004aae <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d115      	bne.n	8004aae <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004a82:	68fa      	ldr	r2, [r7, #12]
 8004a84:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004a88:	4013      	ands	r3, r2
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d10d      	bne.n	8004aae <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d106      	bne.n	8004aae <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d001      	beq.n	8004ab2 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e000      	b.n	8004ab4 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 8004ab2:	2300      	movs	r3, #0
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3718      	adds	r7, #24
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	40023800 	.word	0x40023800

08004ac0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b084      	sub	sp, #16
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d101      	bne.n	8004ad4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e0cc      	b.n	8004c6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ad4:	4b68      	ldr	r3, [pc, #416]	; (8004c78 <HAL_RCC_ClockConfig+0x1b8>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 030f 	and.w	r3, r3, #15
 8004adc:	683a      	ldr	r2, [r7, #0]
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d90c      	bls.n	8004afc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ae2:	4b65      	ldr	r3, [pc, #404]	; (8004c78 <HAL_RCC_ClockConfig+0x1b8>)
 8004ae4:	683a      	ldr	r2, [r7, #0]
 8004ae6:	b2d2      	uxtb	r2, r2
 8004ae8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aea:	4b63      	ldr	r3, [pc, #396]	; (8004c78 <HAL_RCC_ClockConfig+0x1b8>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 030f 	and.w	r3, r3, #15
 8004af2:	683a      	ldr	r2, [r7, #0]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d001      	beq.n	8004afc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e0b8      	b.n	8004c6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0302 	and.w	r3, r3, #2
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d020      	beq.n	8004b4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 0304 	and.w	r3, r3, #4
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d005      	beq.n	8004b20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b14:	4b59      	ldr	r3, [pc, #356]	; (8004c7c <HAL_RCC_ClockConfig+0x1bc>)
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	4a58      	ldr	r2, [pc, #352]	; (8004c7c <HAL_RCC_ClockConfig+0x1bc>)
 8004b1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004b1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0308 	and.w	r3, r3, #8
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d005      	beq.n	8004b38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b2c:	4b53      	ldr	r3, [pc, #332]	; (8004c7c <HAL_RCC_ClockConfig+0x1bc>)
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	4a52      	ldr	r2, [pc, #328]	; (8004c7c <HAL_RCC_ClockConfig+0x1bc>)
 8004b32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004b36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b38:	4b50      	ldr	r3, [pc, #320]	; (8004c7c <HAL_RCC_ClockConfig+0x1bc>)
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	494d      	ldr	r1, [pc, #308]	; (8004c7c <HAL_RCC_ClockConfig+0x1bc>)
 8004b46:	4313      	orrs	r3, r2
 8004b48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 0301 	and.w	r3, r3, #1
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d044      	beq.n	8004be0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d107      	bne.n	8004b6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b5e:	4b47      	ldr	r3, [pc, #284]	; (8004c7c <HAL_RCC_ClockConfig+0x1bc>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d119      	bne.n	8004b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e07f      	b.n	8004c6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	d003      	beq.n	8004b7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b7a:	2b03      	cmp	r3, #3
 8004b7c:	d107      	bne.n	8004b8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b7e:	4b3f      	ldr	r3, [pc, #252]	; (8004c7c <HAL_RCC_ClockConfig+0x1bc>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d109      	bne.n	8004b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e06f      	b.n	8004c6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b8e:	4b3b      	ldr	r3, [pc, #236]	; (8004c7c <HAL_RCC_ClockConfig+0x1bc>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 0302 	and.w	r3, r3, #2
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d101      	bne.n	8004b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e067      	b.n	8004c6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b9e:	4b37      	ldr	r3, [pc, #220]	; (8004c7c <HAL_RCC_ClockConfig+0x1bc>)
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	f023 0203 	bic.w	r2, r3, #3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	4934      	ldr	r1, [pc, #208]	; (8004c7c <HAL_RCC_ClockConfig+0x1bc>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004bb0:	f7fe f8de 	bl	8002d70 <HAL_GetTick>
 8004bb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bb6:	e00a      	b.n	8004bce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bb8:	f7fe f8da 	bl	8002d70 <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d901      	bls.n	8004bce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e04f      	b.n	8004c6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bce:	4b2b      	ldr	r3, [pc, #172]	; (8004c7c <HAL_RCC_ClockConfig+0x1bc>)
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	f003 020c 	and.w	r2, r3, #12
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d1eb      	bne.n	8004bb8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004be0:	4b25      	ldr	r3, [pc, #148]	; (8004c78 <HAL_RCC_ClockConfig+0x1b8>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 030f 	and.w	r3, r3, #15
 8004be8:	683a      	ldr	r2, [r7, #0]
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d20c      	bcs.n	8004c08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bee:	4b22      	ldr	r3, [pc, #136]	; (8004c78 <HAL_RCC_ClockConfig+0x1b8>)
 8004bf0:	683a      	ldr	r2, [r7, #0]
 8004bf2:	b2d2      	uxtb	r2, r2
 8004bf4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bf6:	4b20      	ldr	r3, [pc, #128]	; (8004c78 <HAL_RCC_ClockConfig+0x1b8>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 030f 	and.w	r3, r3, #15
 8004bfe:	683a      	ldr	r2, [r7, #0]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d001      	beq.n	8004c08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e032      	b.n	8004c6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0304 	and.w	r3, r3, #4
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d008      	beq.n	8004c26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c14:	4b19      	ldr	r3, [pc, #100]	; (8004c7c <HAL_RCC_ClockConfig+0x1bc>)
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	4916      	ldr	r1, [pc, #88]	; (8004c7c <HAL_RCC_ClockConfig+0x1bc>)
 8004c22:	4313      	orrs	r3, r2
 8004c24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0308 	and.w	r3, r3, #8
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d009      	beq.n	8004c46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c32:	4b12      	ldr	r3, [pc, #72]	; (8004c7c <HAL_RCC_ClockConfig+0x1bc>)
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	00db      	lsls	r3, r3, #3
 8004c40:	490e      	ldr	r1, [pc, #56]	; (8004c7c <HAL_RCC_ClockConfig+0x1bc>)
 8004c42:	4313      	orrs	r3, r2
 8004c44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c46:	f000 f821 	bl	8004c8c <HAL_RCC_GetSysClockFreq>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	4b0b      	ldr	r3, [pc, #44]	; (8004c7c <HAL_RCC_ClockConfig+0x1bc>)
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	091b      	lsrs	r3, r3, #4
 8004c52:	f003 030f 	and.w	r3, r3, #15
 8004c56:	490a      	ldr	r1, [pc, #40]	; (8004c80 <HAL_RCC_ClockConfig+0x1c0>)
 8004c58:	5ccb      	ldrb	r3, [r1, r3]
 8004c5a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c5e:	4a09      	ldr	r2, [pc, #36]	; (8004c84 <HAL_RCC_ClockConfig+0x1c4>)
 8004c60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004c62:	4b09      	ldr	r3, [pc, #36]	; (8004c88 <HAL_RCC_ClockConfig+0x1c8>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4618      	mov	r0, r3
 8004c68:	f7fe f83e 	bl	8002ce8 <HAL_InitTick>

  return HAL_OK;
 8004c6c:	2300      	movs	r3, #0
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3710      	adds	r7, #16
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	40023c00 	.word	0x40023c00
 8004c7c:	40023800 	.word	0x40023800
 8004c80:	0800745c 	.word	0x0800745c
 8004c84:	20000004 	.word	0x20000004
 8004c88:	20000008 	.word	0x20000008

08004c8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c90:	b094      	sub	sp, #80	; 0x50
 8004c92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004c94:	2300      	movs	r3, #0
 8004c96:	647b      	str	r3, [r7, #68]	; 0x44
 8004c98:	2300      	movs	r3, #0
 8004c9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ca4:	4b79      	ldr	r3, [pc, #484]	; (8004e8c <HAL_RCC_GetSysClockFreq+0x200>)
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	f003 030c 	and.w	r3, r3, #12
 8004cac:	2b08      	cmp	r3, #8
 8004cae:	d00d      	beq.n	8004ccc <HAL_RCC_GetSysClockFreq+0x40>
 8004cb0:	2b08      	cmp	r3, #8
 8004cb2:	f200 80e1 	bhi.w	8004e78 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d002      	beq.n	8004cc0 <HAL_RCC_GetSysClockFreq+0x34>
 8004cba:	2b04      	cmp	r3, #4
 8004cbc:	d003      	beq.n	8004cc6 <HAL_RCC_GetSysClockFreq+0x3a>
 8004cbe:	e0db      	b.n	8004e78 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004cc0:	4b73      	ldr	r3, [pc, #460]	; (8004e90 <HAL_RCC_GetSysClockFreq+0x204>)
 8004cc2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004cc4:	e0db      	b.n	8004e7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004cc6:	4b73      	ldr	r3, [pc, #460]	; (8004e94 <HAL_RCC_GetSysClockFreq+0x208>)
 8004cc8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004cca:	e0d8      	b.n	8004e7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ccc:	4b6f      	ldr	r3, [pc, #444]	; (8004e8c <HAL_RCC_GetSysClockFreq+0x200>)
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cd4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004cd6:	4b6d      	ldr	r3, [pc, #436]	; (8004e8c <HAL_RCC_GetSysClockFreq+0x200>)
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d063      	beq.n	8004daa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ce2:	4b6a      	ldr	r3, [pc, #424]	; (8004e8c <HAL_RCC_GetSysClockFreq+0x200>)
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	099b      	lsrs	r3, r3, #6
 8004ce8:	2200      	movs	r2, #0
 8004cea:	63bb      	str	r3, [r7, #56]	; 0x38
 8004cec:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cf4:	633b      	str	r3, [r7, #48]	; 0x30
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	637b      	str	r3, [r7, #52]	; 0x34
 8004cfa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004cfe:	4622      	mov	r2, r4
 8004d00:	462b      	mov	r3, r5
 8004d02:	f04f 0000 	mov.w	r0, #0
 8004d06:	f04f 0100 	mov.w	r1, #0
 8004d0a:	0159      	lsls	r1, r3, #5
 8004d0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d10:	0150      	lsls	r0, r2, #5
 8004d12:	4602      	mov	r2, r0
 8004d14:	460b      	mov	r3, r1
 8004d16:	4621      	mov	r1, r4
 8004d18:	1a51      	subs	r1, r2, r1
 8004d1a:	6139      	str	r1, [r7, #16]
 8004d1c:	4629      	mov	r1, r5
 8004d1e:	eb63 0301 	sbc.w	r3, r3, r1
 8004d22:	617b      	str	r3, [r7, #20]
 8004d24:	f04f 0200 	mov.w	r2, #0
 8004d28:	f04f 0300 	mov.w	r3, #0
 8004d2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d30:	4659      	mov	r1, fp
 8004d32:	018b      	lsls	r3, r1, #6
 8004d34:	4651      	mov	r1, sl
 8004d36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d3a:	4651      	mov	r1, sl
 8004d3c:	018a      	lsls	r2, r1, #6
 8004d3e:	4651      	mov	r1, sl
 8004d40:	ebb2 0801 	subs.w	r8, r2, r1
 8004d44:	4659      	mov	r1, fp
 8004d46:	eb63 0901 	sbc.w	r9, r3, r1
 8004d4a:	f04f 0200 	mov.w	r2, #0
 8004d4e:	f04f 0300 	mov.w	r3, #0
 8004d52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d5e:	4690      	mov	r8, r2
 8004d60:	4699      	mov	r9, r3
 8004d62:	4623      	mov	r3, r4
 8004d64:	eb18 0303 	adds.w	r3, r8, r3
 8004d68:	60bb      	str	r3, [r7, #8]
 8004d6a:	462b      	mov	r3, r5
 8004d6c:	eb49 0303 	adc.w	r3, r9, r3
 8004d70:	60fb      	str	r3, [r7, #12]
 8004d72:	f04f 0200 	mov.w	r2, #0
 8004d76:	f04f 0300 	mov.w	r3, #0
 8004d7a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004d7e:	4629      	mov	r1, r5
 8004d80:	024b      	lsls	r3, r1, #9
 8004d82:	4621      	mov	r1, r4
 8004d84:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004d88:	4621      	mov	r1, r4
 8004d8a:	024a      	lsls	r2, r1, #9
 8004d8c:	4610      	mov	r0, r2
 8004d8e:	4619      	mov	r1, r3
 8004d90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d92:	2200      	movs	r2, #0
 8004d94:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d96:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d98:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d9c:	f7fb fe44 	bl	8000a28 <__aeabi_uldivmod>
 8004da0:	4602      	mov	r2, r0
 8004da2:	460b      	mov	r3, r1
 8004da4:	4613      	mov	r3, r2
 8004da6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004da8:	e058      	b.n	8004e5c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004daa:	4b38      	ldr	r3, [pc, #224]	; (8004e8c <HAL_RCC_GetSysClockFreq+0x200>)
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	099b      	lsrs	r3, r3, #6
 8004db0:	2200      	movs	r2, #0
 8004db2:	4618      	mov	r0, r3
 8004db4:	4611      	mov	r1, r2
 8004db6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004dba:	623b      	str	r3, [r7, #32]
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	627b      	str	r3, [r7, #36]	; 0x24
 8004dc0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004dc4:	4642      	mov	r2, r8
 8004dc6:	464b      	mov	r3, r9
 8004dc8:	f04f 0000 	mov.w	r0, #0
 8004dcc:	f04f 0100 	mov.w	r1, #0
 8004dd0:	0159      	lsls	r1, r3, #5
 8004dd2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004dd6:	0150      	lsls	r0, r2, #5
 8004dd8:	4602      	mov	r2, r0
 8004dda:	460b      	mov	r3, r1
 8004ddc:	4641      	mov	r1, r8
 8004dde:	ebb2 0a01 	subs.w	sl, r2, r1
 8004de2:	4649      	mov	r1, r9
 8004de4:	eb63 0b01 	sbc.w	fp, r3, r1
 8004de8:	f04f 0200 	mov.w	r2, #0
 8004dec:	f04f 0300 	mov.w	r3, #0
 8004df0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004df4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004df8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004dfc:	ebb2 040a 	subs.w	r4, r2, sl
 8004e00:	eb63 050b 	sbc.w	r5, r3, fp
 8004e04:	f04f 0200 	mov.w	r2, #0
 8004e08:	f04f 0300 	mov.w	r3, #0
 8004e0c:	00eb      	lsls	r3, r5, #3
 8004e0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e12:	00e2      	lsls	r2, r4, #3
 8004e14:	4614      	mov	r4, r2
 8004e16:	461d      	mov	r5, r3
 8004e18:	4643      	mov	r3, r8
 8004e1a:	18e3      	adds	r3, r4, r3
 8004e1c:	603b      	str	r3, [r7, #0]
 8004e1e:	464b      	mov	r3, r9
 8004e20:	eb45 0303 	adc.w	r3, r5, r3
 8004e24:	607b      	str	r3, [r7, #4]
 8004e26:	f04f 0200 	mov.w	r2, #0
 8004e2a:	f04f 0300 	mov.w	r3, #0
 8004e2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e32:	4629      	mov	r1, r5
 8004e34:	028b      	lsls	r3, r1, #10
 8004e36:	4621      	mov	r1, r4
 8004e38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e3c:	4621      	mov	r1, r4
 8004e3e:	028a      	lsls	r2, r1, #10
 8004e40:	4610      	mov	r0, r2
 8004e42:	4619      	mov	r1, r3
 8004e44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e46:	2200      	movs	r2, #0
 8004e48:	61bb      	str	r3, [r7, #24]
 8004e4a:	61fa      	str	r2, [r7, #28]
 8004e4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e50:	f7fb fdea 	bl	8000a28 <__aeabi_uldivmod>
 8004e54:	4602      	mov	r2, r0
 8004e56:	460b      	mov	r3, r1
 8004e58:	4613      	mov	r3, r2
 8004e5a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004e5c:	4b0b      	ldr	r3, [pc, #44]	; (8004e8c <HAL_RCC_GetSysClockFreq+0x200>)
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	0c1b      	lsrs	r3, r3, #16
 8004e62:	f003 0303 	and.w	r3, r3, #3
 8004e66:	3301      	adds	r3, #1
 8004e68:	005b      	lsls	r3, r3, #1
 8004e6a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004e6c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e74:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e76:	e002      	b.n	8004e7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e78:	4b05      	ldr	r3, [pc, #20]	; (8004e90 <HAL_RCC_GetSysClockFreq+0x204>)
 8004e7a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3750      	adds	r7, #80	; 0x50
 8004e84:	46bd      	mov	sp, r7
 8004e86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e8a:	bf00      	nop
 8004e8c:	40023800 	.word	0x40023800
 8004e90:	00f42400 	.word	0x00f42400
 8004e94:	007a1200 	.word	0x007a1200

08004e98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e9c:	4b03      	ldr	r3, [pc, #12]	; (8004eac <HAL_RCC_GetHCLKFreq+0x14>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr
 8004eaa:	bf00      	nop
 8004eac:	20000004 	.word	0x20000004

08004eb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004eb4:	f7ff fff0 	bl	8004e98 <HAL_RCC_GetHCLKFreq>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	4b05      	ldr	r3, [pc, #20]	; (8004ed0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	0a9b      	lsrs	r3, r3, #10
 8004ec0:	f003 0307 	and.w	r3, r3, #7
 8004ec4:	4903      	ldr	r1, [pc, #12]	; (8004ed4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ec6:	5ccb      	ldrb	r3, [r1, r3]
 8004ec8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	bd80      	pop	{r7, pc}
 8004ed0:	40023800 	.word	0x40023800
 8004ed4:	0800746c 	.word	0x0800746c

08004ed8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004edc:	f7ff ffdc 	bl	8004e98 <HAL_RCC_GetHCLKFreq>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	4b05      	ldr	r3, [pc, #20]	; (8004ef8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	0b5b      	lsrs	r3, r3, #13
 8004ee8:	f003 0307 	and.w	r3, r3, #7
 8004eec:	4903      	ldr	r1, [pc, #12]	; (8004efc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004eee:	5ccb      	ldrb	r3, [r1, r3]
 8004ef0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	40023800 	.word	0x40023800
 8004efc:	0800746c 	.word	0x0800746c

08004f00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b082      	sub	sp, #8
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d101      	bne.n	8004f12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e01d      	b.n	8004f4e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d106      	bne.n	8004f2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f7fd fcc4 	bl	80028b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2202      	movs	r2, #2
 8004f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	3304      	adds	r3, #4
 8004f3c:	4619      	mov	r1, r3
 8004f3e:	4610      	mov	r0, r2
 8004f40:	f000 fcae 	bl	80058a0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3708      	adds	r7, #8
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}

08004f56 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004f56:	b480      	push	{r7}
 8004f58:	b085      	sub	sp, #20
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2202      	movs	r2, #2
 8004f62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	f003 0307 	and.w	r3, r3, #7
 8004f70:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2b06      	cmp	r3, #6
 8004f76:	d007      	beq.n	8004f88 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f042 0201 	orr.w	r2, r2, #1
 8004f86:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3714      	adds	r7, #20
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr

08004f9e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f9e:	b480      	push	{r7}
 8004fa0:	b085      	sub	sp, #20
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	68da      	ldr	r2, [r3, #12]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f042 0201 	orr.w	r2, r2, #1
 8004fb4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	f003 0307 	and.w	r3, r3, #7
 8004fc0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2b06      	cmp	r3, #6
 8004fc6:	d007      	beq.n	8004fd8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f042 0201 	orr.w	r2, r2, #1
 8004fd6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3714      	adds	r7, #20
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr

08004fe6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004fe6:	b580      	push	{r7, lr}
 8004fe8:	b082      	sub	sp, #8
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d101      	bne.n	8004ff8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e01d      	b.n	8005034 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	2b00      	cmp	r3, #0
 8005002:	d106      	bne.n	8005012 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f000 f815 	bl	800503c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2202      	movs	r2, #2
 8005016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	3304      	adds	r3, #4
 8005022:	4619      	mov	r1, r3
 8005024:	4610      	mov	r0, r2
 8005026:	f000 fc3b 	bl	80058a0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2201      	movs	r2, #1
 800502e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005032:	2300      	movs	r3, #0
}
 8005034:	4618      	mov	r0, r3
 8005036:	3708      	adds	r7, #8
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}

0800503c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005044:	bf00      	nop
 8005046:	370c      	adds	r7, #12
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b084      	sub	sp, #16
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	2201      	movs	r2, #1
 8005060:	6839      	ldr	r1, [r7, #0]
 8005062:	4618      	mov	r0, r3
 8005064:	f001 f830 	bl	80060c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a15      	ldr	r2, [pc, #84]	; (80050c4 <HAL_TIM_PWM_Start+0x74>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d004      	beq.n	800507c <HAL_TIM_PWM_Start+0x2c>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a14      	ldr	r2, [pc, #80]	; (80050c8 <HAL_TIM_PWM_Start+0x78>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d101      	bne.n	8005080 <HAL_TIM_PWM_Start+0x30>
 800507c:	2301      	movs	r3, #1
 800507e:	e000      	b.n	8005082 <HAL_TIM_PWM_Start+0x32>
 8005080:	2300      	movs	r3, #0
 8005082:	2b00      	cmp	r3, #0
 8005084:	d007      	beq.n	8005096 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005094:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	f003 0307 	and.w	r3, r3, #7
 80050a0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2b06      	cmp	r3, #6
 80050a6:	d007      	beq.n	80050b8 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f042 0201 	orr.w	r2, r2, #1
 80050b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050b8:	2300      	movs	r3, #0
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3710      	adds	r7, #16
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}
 80050c2:	bf00      	nop
 80050c4:	40010000 	.word	0x40010000
 80050c8:	40010400 	.word	0x40010400

080050cc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b082      	sub	sp, #8
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d101      	bne.n	80050de <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e01d      	b.n	800511a <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d106      	bne.n	80050f8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 f815 	bl	8005122 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2202      	movs	r2, #2
 80050fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	3304      	adds	r3, #4
 8005108:	4619      	mov	r1, r3
 800510a:	4610      	mov	r0, r2
 800510c:	f000 fbc8 	bl	80058a0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005118:	2300      	movs	r3, #0
}
 800511a:	4618      	mov	r0, r3
 800511c:	3708      	adds	r7, #8
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}

08005122 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005122:	b480      	push	{r7}
 8005124:	b083      	sub	sp, #12
 8005126:	af00      	add	r7, sp, #0
 8005128:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800512a:	bf00      	nop
 800512c:	370c      	adds	r7, #12
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
	...

08005138 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	2b0c      	cmp	r3, #12
 8005146:	d841      	bhi.n	80051cc <HAL_TIM_IC_Start_IT+0x94>
 8005148:	a201      	add	r2, pc, #4	; (adr r2, 8005150 <HAL_TIM_IC_Start_IT+0x18>)
 800514a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800514e:	bf00      	nop
 8005150:	08005185 	.word	0x08005185
 8005154:	080051cd 	.word	0x080051cd
 8005158:	080051cd 	.word	0x080051cd
 800515c:	080051cd 	.word	0x080051cd
 8005160:	08005197 	.word	0x08005197
 8005164:	080051cd 	.word	0x080051cd
 8005168:	080051cd 	.word	0x080051cd
 800516c:	080051cd 	.word	0x080051cd
 8005170:	080051a9 	.word	0x080051a9
 8005174:	080051cd 	.word	0x080051cd
 8005178:	080051cd 	.word	0x080051cd
 800517c:	080051cd 	.word	0x080051cd
 8005180:	080051bb 	.word	0x080051bb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	68da      	ldr	r2, [r3, #12]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f042 0202 	orr.w	r2, r2, #2
 8005192:	60da      	str	r2, [r3, #12]
      break;
 8005194:	e01b      	b.n	80051ce <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	68da      	ldr	r2, [r3, #12]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f042 0204 	orr.w	r2, r2, #4
 80051a4:	60da      	str	r2, [r3, #12]
      break;
 80051a6:	e012      	b.n	80051ce <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68da      	ldr	r2, [r3, #12]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f042 0208 	orr.w	r2, r2, #8
 80051b6:	60da      	str	r2, [r3, #12]
      break;
 80051b8:	e009      	b.n	80051ce <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	68da      	ldr	r2, [r3, #12]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f042 0210 	orr.w	r2, r2, #16
 80051c8:	60da      	str	r2, [r3, #12]
      break;
 80051ca:	e000      	b.n	80051ce <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 80051cc:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2201      	movs	r2, #1
 80051d4:	6839      	ldr	r1, [r7, #0]
 80051d6:	4618      	mov	r0, r3
 80051d8:	f000 ff76 	bl	80060c8 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	f003 0307 	and.w	r3, r3, #7
 80051e6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2b06      	cmp	r3, #6
 80051ec:	d007      	beq.n	80051fe <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f042 0201 	orr.w	r2, r2, #1
 80051fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051fe:	2300      	movs	r3, #0
}
 8005200:	4618      	mov	r0, r3
 8005202:	3710      	adds	r7, #16
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}

08005208 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b082      	sub	sp, #8
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	f003 0302 	and.w	r3, r3, #2
 800521a:	2b02      	cmp	r3, #2
 800521c:	d122      	bne.n	8005264 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	f003 0302 	and.w	r3, r3, #2
 8005228:	2b02      	cmp	r3, #2
 800522a:	d11b      	bne.n	8005264 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f06f 0202 	mvn.w	r2, #2
 8005234:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2201      	movs	r2, #1
 800523a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	699b      	ldr	r3, [r3, #24]
 8005242:	f003 0303 	and.w	r3, r3, #3
 8005246:	2b00      	cmp	r3, #0
 8005248:	d003      	beq.n	8005252 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f7fc facc 	bl	80017e8 <HAL_TIM_IC_CaptureCallback>
 8005250:	e005      	b.n	800525e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 fb06 	bl	8005864 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f000 fb0d 	bl	8005878 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	691b      	ldr	r3, [r3, #16]
 800526a:	f003 0304 	and.w	r3, r3, #4
 800526e:	2b04      	cmp	r3, #4
 8005270:	d122      	bne.n	80052b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	f003 0304 	and.w	r3, r3, #4
 800527c:	2b04      	cmp	r3, #4
 800527e:	d11b      	bne.n	80052b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f06f 0204 	mvn.w	r2, #4
 8005288:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2202      	movs	r2, #2
 800528e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	699b      	ldr	r3, [r3, #24]
 8005296:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800529a:	2b00      	cmp	r3, #0
 800529c:	d003      	beq.n	80052a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f7fc faa2 	bl	80017e8 <HAL_TIM_IC_CaptureCallback>
 80052a4:	e005      	b.n	80052b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 fadc 	bl	8005864 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f000 fae3 	bl	8005878 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	f003 0308 	and.w	r3, r3, #8
 80052c2:	2b08      	cmp	r3, #8
 80052c4:	d122      	bne.n	800530c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	f003 0308 	and.w	r3, r3, #8
 80052d0:	2b08      	cmp	r3, #8
 80052d2:	d11b      	bne.n	800530c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f06f 0208 	mvn.w	r2, #8
 80052dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2204      	movs	r2, #4
 80052e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	69db      	ldr	r3, [r3, #28]
 80052ea:	f003 0303 	and.w	r3, r3, #3
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d003      	beq.n	80052fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f7fc fa78 	bl	80017e8 <HAL_TIM_IC_CaptureCallback>
 80052f8:	e005      	b.n	8005306 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 fab2 	bl	8005864 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f000 fab9 	bl	8005878 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	f003 0310 	and.w	r3, r3, #16
 8005316:	2b10      	cmp	r3, #16
 8005318:	d122      	bne.n	8005360 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	f003 0310 	and.w	r3, r3, #16
 8005324:	2b10      	cmp	r3, #16
 8005326:	d11b      	bne.n	8005360 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f06f 0210 	mvn.w	r2, #16
 8005330:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2208      	movs	r2, #8
 8005336:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	69db      	ldr	r3, [r3, #28]
 800533e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005342:	2b00      	cmp	r3, #0
 8005344:	d003      	beq.n	800534e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f7fc fa4e 	bl	80017e8 <HAL_TIM_IC_CaptureCallback>
 800534c:	e005      	b.n	800535a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 fa88 	bl	8005864 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f000 fa8f 	bl	8005878 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	f003 0301 	and.w	r3, r3, #1
 800536a:	2b01      	cmp	r3, #1
 800536c:	d10e      	bne.n	800538c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	f003 0301 	and.w	r3, r3, #1
 8005378:	2b01      	cmp	r3, #1
 800537a:	d107      	bne.n	800538c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f06f 0201 	mvn.w	r2, #1
 8005384:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f7fc fa14 	bl	80017b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	691b      	ldr	r3, [r3, #16]
 8005392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005396:	2b80      	cmp	r3, #128	; 0x80
 8005398:	d10e      	bne.n	80053b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053a4:	2b80      	cmp	r3, #128	; 0x80
 80053a6:	d107      	bne.n	80053b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80053b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f000 ff34 	bl	8006220 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053c2:	2b40      	cmp	r3, #64	; 0x40
 80053c4:	d10e      	bne.n	80053e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053d0:	2b40      	cmp	r3, #64	; 0x40
 80053d2:	d107      	bne.n	80053e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80053dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f000 fa54 	bl	800588c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	f003 0320 	and.w	r3, r3, #32
 80053ee:	2b20      	cmp	r3, #32
 80053f0:	d10e      	bne.n	8005410 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	f003 0320 	and.w	r3, r3, #32
 80053fc:	2b20      	cmp	r3, #32
 80053fe:	d107      	bne.n	8005410 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f06f 0220 	mvn.w	r2, #32
 8005408:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f000 fefe 	bl	800620c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005410:	bf00      	nop
 8005412:	3708      	adds	r7, #8
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800542a:	2b01      	cmp	r3, #1
 800542c:	d101      	bne.n	8005432 <HAL_TIM_IC_ConfigChannel+0x1a>
 800542e:	2302      	movs	r3, #2
 8005430:	e08a      	b.n	8005548 <HAL_TIM_IC_ConfigChannel+0x130>
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2201      	movs	r2, #1
 8005436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2202      	movs	r2, #2
 800543e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d11b      	bne.n	8005480 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6818      	ldr	r0, [r3, #0]
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	6819      	ldr	r1, [r3, #0]
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	685a      	ldr	r2, [r3, #4]
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	f000 fc72 	bl	8005d40 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	699a      	ldr	r2, [r3, #24]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f022 020c 	bic.w	r2, r2, #12
 800546a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	6999      	ldr	r1, [r3, #24]
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	689a      	ldr	r2, [r3, #8]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	430a      	orrs	r2, r1
 800547c:	619a      	str	r2, [r3, #24]
 800547e:	e05a      	b.n	8005536 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2b04      	cmp	r3, #4
 8005484:	d11c      	bne.n	80054c0 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6818      	ldr	r0, [r3, #0]
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	6819      	ldr	r1, [r3, #0]
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	685a      	ldr	r2, [r3, #4]
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	68db      	ldr	r3, [r3, #12]
 8005496:	f000 fcf6 	bl	8005e86 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	699a      	ldr	r2, [r3, #24]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80054a8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	6999      	ldr	r1, [r3, #24]
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	021a      	lsls	r2, r3, #8
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	430a      	orrs	r2, r1
 80054bc:	619a      	str	r2, [r3, #24]
 80054be:	e03a      	b.n	8005536 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2b08      	cmp	r3, #8
 80054c4:	d11b      	bne.n	80054fe <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	6818      	ldr	r0, [r3, #0]
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	6819      	ldr	r1, [r3, #0]
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	685a      	ldr	r2, [r3, #4]
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	f000 fd43 	bl	8005f60 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	69da      	ldr	r2, [r3, #28]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f022 020c 	bic.w	r2, r2, #12
 80054e8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	69d9      	ldr	r1, [r3, #28]
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	689a      	ldr	r2, [r3, #8]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	430a      	orrs	r2, r1
 80054fa:	61da      	str	r2, [r3, #28]
 80054fc:	e01b      	b.n	8005536 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	6818      	ldr	r0, [r3, #0]
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	6819      	ldr	r1, [r3, #0]
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	685a      	ldr	r2, [r3, #4]
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	68db      	ldr	r3, [r3, #12]
 800550e:	f000 fd63 	bl	8005fd8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	69da      	ldr	r2, [r3, #28]
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005520:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	69d9      	ldr	r1, [r3, #28]
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	021a      	lsls	r2, r3, #8
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	430a      	orrs	r2, r1
 8005534:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2201      	movs	r2, #1
 800553a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2200      	movs	r2, #0
 8005542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005546:	2300      	movs	r3, #0
}
 8005548:	4618      	mov	r0, r3
 800554a:	3710      	adds	r7, #16
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}

08005550 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b084      	sub	sp, #16
 8005554:	af00      	add	r7, sp, #0
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	60b9      	str	r1, [r7, #8]
 800555a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005562:	2b01      	cmp	r3, #1
 8005564:	d101      	bne.n	800556a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005566:	2302      	movs	r3, #2
 8005568:	e0b4      	b.n	80056d4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2201      	movs	r2, #1
 800556e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2202      	movs	r2, #2
 8005576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2b0c      	cmp	r3, #12
 800557e:	f200 809f 	bhi.w	80056c0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8005582:	a201      	add	r2, pc, #4	; (adr r2, 8005588 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005588:	080055bd 	.word	0x080055bd
 800558c:	080056c1 	.word	0x080056c1
 8005590:	080056c1 	.word	0x080056c1
 8005594:	080056c1 	.word	0x080056c1
 8005598:	080055fd 	.word	0x080055fd
 800559c:	080056c1 	.word	0x080056c1
 80055a0:	080056c1 	.word	0x080056c1
 80055a4:	080056c1 	.word	0x080056c1
 80055a8:	0800563f 	.word	0x0800563f
 80055ac:	080056c1 	.word	0x080056c1
 80055b0:	080056c1 	.word	0x080056c1
 80055b4:	080056c1 	.word	0x080056c1
 80055b8:	0800567f 	.word	0x0800567f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	68b9      	ldr	r1, [r7, #8]
 80055c2:	4618      	mov	r0, r3
 80055c4:	f000 fa0c 	bl	80059e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	699a      	ldr	r2, [r3, #24]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f042 0208 	orr.w	r2, r2, #8
 80055d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	699a      	ldr	r2, [r3, #24]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f022 0204 	bic.w	r2, r2, #4
 80055e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	6999      	ldr	r1, [r3, #24]
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	691a      	ldr	r2, [r3, #16]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	430a      	orrs	r2, r1
 80055f8:	619a      	str	r2, [r3, #24]
      break;
 80055fa:	e062      	b.n	80056c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	68b9      	ldr	r1, [r7, #8]
 8005602:	4618      	mov	r0, r3
 8005604:	f000 fa5c 	bl	8005ac0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	699a      	ldr	r2, [r3, #24]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005616:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	699a      	ldr	r2, [r3, #24]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005626:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	6999      	ldr	r1, [r3, #24]
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	691b      	ldr	r3, [r3, #16]
 8005632:	021a      	lsls	r2, r3, #8
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	430a      	orrs	r2, r1
 800563a:	619a      	str	r2, [r3, #24]
      break;
 800563c:	e041      	b.n	80056c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68b9      	ldr	r1, [r7, #8]
 8005644:	4618      	mov	r0, r3
 8005646:	f000 fab1 	bl	8005bac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	69da      	ldr	r2, [r3, #28]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f042 0208 	orr.w	r2, r2, #8
 8005658:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	69da      	ldr	r2, [r3, #28]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f022 0204 	bic.w	r2, r2, #4
 8005668:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	69d9      	ldr	r1, [r3, #28]
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	691a      	ldr	r2, [r3, #16]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	430a      	orrs	r2, r1
 800567a:	61da      	str	r2, [r3, #28]
      break;
 800567c:	e021      	b.n	80056c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	68b9      	ldr	r1, [r7, #8]
 8005684:	4618      	mov	r0, r3
 8005686:	f000 fb05 	bl	8005c94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	69da      	ldr	r2, [r3, #28]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005698:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	69da      	ldr	r2, [r3, #28]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	69d9      	ldr	r1, [r3, #28]
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	691b      	ldr	r3, [r3, #16]
 80056b4:	021a      	lsls	r2, r3, #8
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	430a      	orrs	r2, r1
 80056bc:	61da      	str	r2, [r3, #28]
      break;
 80056be:	e000      	b.n	80056c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80056c0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2201      	movs	r2, #1
 80056c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056d2:	2300      	movs	r3, #0
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3710      	adds	r7, #16
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}

080056dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d101      	bne.n	80056f4 <HAL_TIM_ConfigClockSource+0x18>
 80056f0:	2302      	movs	r3, #2
 80056f2:	e0b3      	b.n	800585c <HAL_TIM_ConfigClockSource+0x180>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2202      	movs	r2, #2
 8005700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005712:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800571a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	68fa      	ldr	r2, [r7, #12]
 8005722:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800572c:	d03e      	beq.n	80057ac <HAL_TIM_ConfigClockSource+0xd0>
 800572e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005732:	f200 8087 	bhi.w	8005844 <HAL_TIM_ConfigClockSource+0x168>
 8005736:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800573a:	f000 8085 	beq.w	8005848 <HAL_TIM_ConfigClockSource+0x16c>
 800573e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005742:	d87f      	bhi.n	8005844 <HAL_TIM_ConfigClockSource+0x168>
 8005744:	2b70      	cmp	r3, #112	; 0x70
 8005746:	d01a      	beq.n	800577e <HAL_TIM_ConfigClockSource+0xa2>
 8005748:	2b70      	cmp	r3, #112	; 0x70
 800574a:	d87b      	bhi.n	8005844 <HAL_TIM_ConfigClockSource+0x168>
 800574c:	2b60      	cmp	r3, #96	; 0x60
 800574e:	d050      	beq.n	80057f2 <HAL_TIM_ConfigClockSource+0x116>
 8005750:	2b60      	cmp	r3, #96	; 0x60
 8005752:	d877      	bhi.n	8005844 <HAL_TIM_ConfigClockSource+0x168>
 8005754:	2b50      	cmp	r3, #80	; 0x50
 8005756:	d03c      	beq.n	80057d2 <HAL_TIM_ConfigClockSource+0xf6>
 8005758:	2b50      	cmp	r3, #80	; 0x50
 800575a:	d873      	bhi.n	8005844 <HAL_TIM_ConfigClockSource+0x168>
 800575c:	2b40      	cmp	r3, #64	; 0x40
 800575e:	d058      	beq.n	8005812 <HAL_TIM_ConfigClockSource+0x136>
 8005760:	2b40      	cmp	r3, #64	; 0x40
 8005762:	d86f      	bhi.n	8005844 <HAL_TIM_ConfigClockSource+0x168>
 8005764:	2b30      	cmp	r3, #48	; 0x30
 8005766:	d064      	beq.n	8005832 <HAL_TIM_ConfigClockSource+0x156>
 8005768:	2b30      	cmp	r3, #48	; 0x30
 800576a:	d86b      	bhi.n	8005844 <HAL_TIM_ConfigClockSource+0x168>
 800576c:	2b20      	cmp	r3, #32
 800576e:	d060      	beq.n	8005832 <HAL_TIM_ConfigClockSource+0x156>
 8005770:	2b20      	cmp	r3, #32
 8005772:	d867      	bhi.n	8005844 <HAL_TIM_ConfigClockSource+0x168>
 8005774:	2b00      	cmp	r3, #0
 8005776:	d05c      	beq.n	8005832 <HAL_TIM_ConfigClockSource+0x156>
 8005778:	2b10      	cmp	r3, #16
 800577a:	d05a      	beq.n	8005832 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800577c:	e062      	b.n	8005844 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6818      	ldr	r0, [r3, #0]
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	6899      	ldr	r1, [r3, #8]
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	685a      	ldr	r2, [r3, #4]
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	f000 fc7b 	bl	8006088 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80057a0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	68fa      	ldr	r2, [r7, #12]
 80057a8:	609a      	str	r2, [r3, #8]
      break;
 80057aa:	e04e      	b.n	800584a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6818      	ldr	r0, [r3, #0]
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	6899      	ldr	r1, [r3, #8]
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	685a      	ldr	r2, [r3, #4]
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	f000 fc64 	bl	8006088 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	689a      	ldr	r2, [r3, #8]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80057ce:	609a      	str	r2, [r3, #8]
      break;
 80057d0:	e03b      	b.n	800584a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6818      	ldr	r0, [r3, #0]
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	6859      	ldr	r1, [r3, #4]
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	461a      	mov	r2, r3
 80057e0:	f000 fb22 	bl	8005e28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2150      	movs	r1, #80	; 0x50
 80057ea:	4618      	mov	r0, r3
 80057ec:	f000 fc31 	bl	8006052 <TIM_ITRx_SetConfig>
      break;
 80057f0:	e02b      	b.n	800584a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6818      	ldr	r0, [r3, #0]
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	6859      	ldr	r1, [r3, #4]
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	461a      	mov	r2, r3
 8005800:	f000 fb7e 	bl	8005f00 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	2160      	movs	r1, #96	; 0x60
 800580a:	4618      	mov	r0, r3
 800580c:	f000 fc21 	bl	8006052 <TIM_ITRx_SetConfig>
      break;
 8005810:	e01b      	b.n	800584a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6818      	ldr	r0, [r3, #0]
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	6859      	ldr	r1, [r3, #4]
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	461a      	mov	r2, r3
 8005820:	f000 fb02 	bl	8005e28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	2140      	movs	r1, #64	; 0x40
 800582a:	4618      	mov	r0, r3
 800582c:	f000 fc11 	bl	8006052 <TIM_ITRx_SetConfig>
      break;
 8005830:	e00b      	b.n	800584a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4619      	mov	r1, r3
 800583c:	4610      	mov	r0, r2
 800583e:	f000 fc08 	bl	8006052 <TIM_ITRx_SetConfig>
      break;
 8005842:	e002      	b.n	800584a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005844:	bf00      	nop
 8005846:	e000      	b.n	800584a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005848:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2201      	movs	r2, #1
 800584e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800585a:	2300      	movs	r3, #0
}
 800585c:	4618      	mov	r0, r3
 800585e:	3710      	adds	r7, #16
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}

08005864 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800586c:	bf00      	nop
 800586e:	370c      	adds	r7, #12
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005880:	bf00      	nop
 8005882:	370c      	adds	r7, #12
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800588c:	b480      	push	{r7}
 800588e:	b083      	sub	sp, #12
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005894:	bf00      	nop
 8005896:	370c      	adds	r7, #12
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr

080058a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b085      	sub	sp, #20
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4a40      	ldr	r2, [pc, #256]	; (80059b4 <TIM_Base_SetConfig+0x114>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d013      	beq.n	80058e0 <TIM_Base_SetConfig+0x40>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058be:	d00f      	beq.n	80058e0 <TIM_Base_SetConfig+0x40>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4a3d      	ldr	r2, [pc, #244]	; (80059b8 <TIM_Base_SetConfig+0x118>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d00b      	beq.n	80058e0 <TIM_Base_SetConfig+0x40>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4a3c      	ldr	r2, [pc, #240]	; (80059bc <TIM_Base_SetConfig+0x11c>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d007      	beq.n	80058e0 <TIM_Base_SetConfig+0x40>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a3b      	ldr	r2, [pc, #236]	; (80059c0 <TIM_Base_SetConfig+0x120>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d003      	beq.n	80058e0 <TIM_Base_SetConfig+0x40>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4a3a      	ldr	r2, [pc, #232]	; (80059c4 <TIM_Base_SetConfig+0x124>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d108      	bne.n	80058f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4a2f      	ldr	r2, [pc, #188]	; (80059b4 <TIM_Base_SetConfig+0x114>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d02b      	beq.n	8005952 <TIM_Base_SetConfig+0xb2>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005900:	d027      	beq.n	8005952 <TIM_Base_SetConfig+0xb2>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a2c      	ldr	r2, [pc, #176]	; (80059b8 <TIM_Base_SetConfig+0x118>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d023      	beq.n	8005952 <TIM_Base_SetConfig+0xb2>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a2b      	ldr	r2, [pc, #172]	; (80059bc <TIM_Base_SetConfig+0x11c>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d01f      	beq.n	8005952 <TIM_Base_SetConfig+0xb2>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a2a      	ldr	r2, [pc, #168]	; (80059c0 <TIM_Base_SetConfig+0x120>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d01b      	beq.n	8005952 <TIM_Base_SetConfig+0xb2>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a29      	ldr	r2, [pc, #164]	; (80059c4 <TIM_Base_SetConfig+0x124>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d017      	beq.n	8005952 <TIM_Base_SetConfig+0xb2>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4a28      	ldr	r2, [pc, #160]	; (80059c8 <TIM_Base_SetConfig+0x128>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d013      	beq.n	8005952 <TIM_Base_SetConfig+0xb2>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4a27      	ldr	r2, [pc, #156]	; (80059cc <TIM_Base_SetConfig+0x12c>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d00f      	beq.n	8005952 <TIM_Base_SetConfig+0xb2>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a26      	ldr	r2, [pc, #152]	; (80059d0 <TIM_Base_SetConfig+0x130>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d00b      	beq.n	8005952 <TIM_Base_SetConfig+0xb2>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a25      	ldr	r2, [pc, #148]	; (80059d4 <TIM_Base_SetConfig+0x134>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d007      	beq.n	8005952 <TIM_Base_SetConfig+0xb2>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a24      	ldr	r2, [pc, #144]	; (80059d8 <TIM_Base_SetConfig+0x138>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d003      	beq.n	8005952 <TIM_Base_SetConfig+0xb2>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a23      	ldr	r2, [pc, #140]	; (80059dc <TIM_Base_SetConfig+0x13c>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d108      	bne.n	8005964 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005958:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	68db      	ldr	r3, [r3, #12]
 800595e:	68fa      	ldr	r2, [r7, #12]
 8005960:	4313      	orrs	r3, r2
 8005962:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	695b      	ldr	r3, [r3, #20]
 800596e:	4313      	orrs	r3, r2
 8005970:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	68fa      	ldr	r2, [r7, #12]
 8005976:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	689a      	ldr	r2, [r3, #8]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a0a      	ldr	r2, [pc, #40]	; (80059b4 <TIM_Base_SetConfig+0x114>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d003      	beq.n	8005998 <TIM_Base_SetConfig+0xf8>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a0c      	ldr	r2, [pc, #48]	; (80059c4 <TIM_Base_SetConfig+0x124>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d103      	bne.n	80059a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	691a      	ldr	r2, [r3, #16]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	615a      	str	r2, [r3, #20]
}
 80059a6:	bf00      	nop
 80059a8:	3714      	adds	r7, #20
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr
 80059b2:	bf00      	nop
 80059b4:	40010000 	.word	0x40010000
 80059b8:	40000400 	.word	0x40000400
 80059bc:	40000800 	.word	0x40000800
 80059c0:	40000c00 	.word	0x40000c00
 80059c4:	40010400 	.word	0x40010400
 80059c8:	40014000 	.word	0x40014000
 80059cc:	40014400 	.word	0x40014400
 80059d0:	40014800 	.word	0x40014800
 80059d4:	40001800 	.word	0x40001800
 80059d8:	40001c00 	.word	0x40001c00
 80059dc:	40002000 	.word	0x40002000

080059e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b087      	sub	sp, #28
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a1b      	ldr	r3, [r3, #32]
 80059ee:	f023 0201 	bic.w	r2, r3, #1
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6a1b      	ldr	r3, [r3, #32]
 80059fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	699b      	ldr	r3, [r3, #24]
 8005a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f023 0303 	bic.w	r3, r3, #3
 8005a16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	68fa      	ldr	r2, [r7, #12]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	f023 0302 	bic.w	r3, r3, #2
 8005a28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	697a      	ldr	r2, [r7, #20]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	4a20      	ldr	r2, [pc, #128]	; (8005ab8 <TIM_OC1_SetConfig+0xd8>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d003      	beq.n	8005a44 <TIM_OC1_SetConfig+0x64>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	4a1f      	ldr	r2, [pc, #124]	; (8005abc <TIM_OC1_SetConfig+0xdc>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d10c      	bne.n	8005a5e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	f023 0308 	bic.w	r3, r3, #8
 8005a4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	697a      	ldr	r2, [r7, #20]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	f023 0304 	bic.w	r3, r3, #4
 8005a5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4a15      	ldr	r2, [pc, #84]	; (8005ab8 <TIM_OC1_SetConfig+0xd8>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d003      	beq.n	8005a6e <TIM_OC1_SetConfig+0x8e>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4a14      	ldr	r2, [pc, #80]	; (8005abc <TIM_OC1_SetConfig+0xdc>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d111      	bne.n	8005a92 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	695b      	ldr	r3, [r3, #20]
 8005a82:	693a      	ldr	r2, [r7, #16]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	699b      	ldr	r3, [r3, #24]
 8005a8c:	693a      	ldr	r2, [r7, #16]
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	693a      	ldr	r2, [r7, #16]
 8005a96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	68fa      	ldr	r2, [r7, #12]
 8005a9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	685a      	ldr	r2, [r3, #4]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	697a      	ldr	r2, [r7, #20]
 8005aaa:	621a      	str	r2, [r3, #32]
}
 8005aac:	bf00      	nop
 8005aae:	371c      	adds	r7, #28
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr
 8005ab8:	40010000 	.word	0x40010000
 8005abc:	40010400 	.word	0x40010400

08005ac0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b087      	sub	sp, #28
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6a1b      	ldr	r3, [r3, #32]
 8005ace:	f023 0210 	bic.w	r2, r3, #16
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6a1b      	ldr	r3, [r3, #32]
 8005ada:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	699b      	ldr	r3, [r3, #24]
 8005ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005aee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005af6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	021b      	lsls	r3, r3, #8
 8005afe:	68fa      	ldr	r2, [r7, #12]
 8005b00:	4313      	orrs	r3, r2
 8005b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	f023 0320 	bic.w	r3, r3, #32
 8005b0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	011b      	lsls	r3, r3, #4
 8005b12:	697a      	ldr	r2, [r7, #20]
 8005b14:	4313      	orrs	r3, r2
 8005b16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	4a22      	ldr	r2, [pc, #136]	; (8005ba4 <TIM_OC2_SetConfig+0xe4>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d003      	beq.n	8005b28 <TIM_OC2_SetConfig+0x68>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	4a21      	ldr	r2, [pc, #132]	; (8005ba8 <TIM_OC2_SetConfig+0xe8>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d10d      	bne.n	8005b44 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	011b      	lsls	r3, r3, #4
 8005b36:	697a      	ldr	r2, [r7, #20]
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b42:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	4a17      	ldr	r2, [pc, #92]	; (8005ba4 <TIM_OC2_SetConfig+0xe4>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d003      	beq.n	8005b54 <TIM_OC2_SetConfig+0x94>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	4a16      	ldr	r2, [pc, #88]	; (8005ba8 <TIM_OC2_SetConfig+0xe8>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d113      	bne.n	8005b7c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	695b      	ldr	r3, [r3, #20]
 8005b68:	009b      	lsls	r3, r3, #2
 8005b6a:	693a      	ldr	r2, [r7, #16]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	699b      	ldr	r3, [r3, #24]
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	693a      	ldr	r2, [r7, #16]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	693a      	ldr	r2, [r7, #16]
 8005b80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	68fa      	ldr	r2, [r7, #12]
 8005b86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	685a      	ldr	r2, [r3, #4]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	697a      	ldr	r2, [r7, #20]
 8005b94:	621a      	str	r2, [r3, #32]
}
 8005b96:	bf00      	nop
 8005b98:	371c      	adds	r7, #28
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr
 8005ba2:	bf00      	nop
 8005ba4:	40010000 	.word	0x40010000
 8005ba8:	40010400 	.word	0x40010400

08005bac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b087      	sub	sp, #28
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6a1b      	ldr	r3, [r3, #32]
 8005bba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6a1b      	ldr	r3, [r3, #32]
 8005bc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	69db      	ldr	r3, [r3, #28]
 8005bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f023 0303 	bic.w	r3, r3, #3
 8005be2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	68fa      	ldr	r2, [r7, #12]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005bf4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	021b      	lsls	r3, r3, #8
 8005bfc:	697a      	ldr	r2, [r7, #20]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	4a21      	ldr	r2, [pc, #132]	; (8005c8c <TIM_OC3_SetConfig+0xe0>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d003      	beq.n	8005c12 <TIM_OC3_SetConfig+0x66>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4a20      	ldr	r2, [pc, #128]	; (8005c90 <TIM_OC3_SetConfig+0xe4>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d10d      	bne.n	8005c2e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	68db      	ldr	r3, [r3, #12]
 8005c1e:	021b      	lsls	r3, r3, #8
 8005c20:	697a      	ldr	r2, [r7, #20]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4a16      	ldr	r2, [pc, #88]	; (8005c8c <TIM_OC3_SetConfig+0xe0>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d003      	beq.n	8005c3e <TIM_OC3_SetConfig+0x92>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a15      	ldr	r2, [pc, #84]	; (8005c90 <TIM_OC3_SetConfig+0xe4>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d113      	bne.n	8005c66 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	695b      	ldr	r3, [r3, #20]
 8005c52:	011b      	lsls	r3, r3, #4
 8005c54:	693a      	ldr	r2, [r7, #16]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	699b      	ldr	r3, [r3, #24]
 8005c5e:	011b      	lsls	r3, r3, #4
 8005c60:	693a      	ldr	r2, [r7, #16]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	693a      	ldr	r2, [r7, #16]
 8005c6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	68fa      	ldr	r2, [r7, #12]
 8005c70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	685a      	ldr	r2, [r3, #4]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	697a      	ldr	r2, [r7, #20]
 8005c7e:	621a      	str	r2, [r3, #32]
}
 8005c80:	bf00      	nop
 8005c82:	371c      	adds	r7, #28
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr
 8005c8c:	40010000 	.word	0x40010000
 8005c90:	40010400 	.word	0x40010400

08005c94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b087      	sub	sp, #28
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6a1b      	ldr	r3, [r3, #32]
 8005ca2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a1b      	ldr	r3, [r3, #32]
 8005cae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	69db      	ldr	r3, [r3, #28]
 8005cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	021b      	lsls	r3, r3, #8
 8005cd2:	68fa      	ldr	r2, [r7, #12]
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005cde:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	031b      	lsls	r3, r3, #12
 8005ce6:	693a      	ldr	r2, [r7, #16]
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	4a12      	ldr	r2, [pc, #72]	; (8005d38 <TIM_OC4_SetConfig+0xa4>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d003      	beq.n	8005cfc <TIM_OC4_SetConfig+0x68>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4a11      	ldr	r2, [pc, #68]	; (8005d3c <TIM_OC4_SetConfig+0xa8>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d109      	bne.n	8005d10 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d02:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	695b      	ldr	r3, [r3, #20]
 8005d08:	019b      	lsls	r3, r3, #6
 8005d0a:	697a      	ldr	r2, [r7, #20]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	697a      	ldr	r2, [r7, #20]
 8005d14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	68fa      	ldr	r2, [r7, #12]
 8005d1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	685a      	ldr	r2, [r3, #4]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	693a      	ldr	r2, [r7, #16]
 8005d28:	621a      	str	r2, [r3, #32]
}
 8005d2a:	bf00      	nop
 8005d2c:	371c      	adds	r7, #28
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr
 8005d36:	bf00      	nop
 8005d38:	40010000 	.word	0x40010000
 8005d3c:	40010400 	.word	0x40010400

08005d40 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b087      	sub	sp, #28
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	60f8      	str	r0, [r7, #12]
 8005d48:	60b9      	str	r1, [r7, #8]
 8005d4a:	607a      	str	r2, [r7, #4]
 8005d4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	6a1b      	ldr	r3, [r3, #32]
 8005d52:	f023 0201 	bic.w	r2, r3, #1
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	699b      	ldr	r3, [r3, #24]
 8005d5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	6a1b      	ldr	r3, [r3, #32]
 8005d64:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	4a28      	ldr	r2, [pc, #160]	; (8005e0c <TIM_TI1_SetConfig+0xcc>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d01b      	beq.n	8005da6 <TIM_TI1_SetConfig+0x66>
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d74:	d017      	beq.n	8005da6 <TIM_TI1_SetConfig+0x66>
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	4a25      	ldr	r2, [pc, #148]	; (8005e10 <TIM_TI1_SetConfig+0xd0>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d013      	beq.n	8005da6 <TIM_TI1_SetConfig+0x66>
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	4a24      	ldr	r2, [pc, #144]	; (8005e14 <TIM_TI1_SetConfig+0xd4>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d00f      	beq.n	8005da6 <TIM_TI1_SetConfig+0x66>
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	4a23      	ldr	r2, [pc, #140]	; (8005e18 <TIM_TI1_SetConfig+0xd8>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d00b      	beq.n	8005da6 <TIM_TI1_SetConfig+0x66>
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	4a22      	ldr	r2, [pc, #136]	; (8005e1c <TIM_TI1_SetConfig+0xdc>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d007      	beq.n	8005da6 <TIM_TI1_SetConfig+0x66>
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	4a21      	ldr	r2, [pc, #132]	; (8005e20 <TIM_TI1_SetConfig+0xe0>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d003      	beq.n	8005da6 <TIM_TI1_SetConfig+0x66>
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	4a20      	ldr	r2, [pc, #128]	; (8005e24 <TIM_TI1_SetConfig+0xe4>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d101      	bne.n	8005daa <TIM_TI1_SetConfig+0x6a>
 8005da6:	2301      	movs	r3, #1
 8005da8:	e000      	b.n	8005dac <TIM_TI1_SetConfig+0x6c>
 8005daa:	2300      	movs	r3, #0
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d008      	beq.n	8005dc2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	f023 0303 	bic.w	r3, r3, #3
 8005db6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005db8:	697a      	ldr	r2, [r7, #20]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	617b      	str	r3, [r7, #20]
 8005dc0:	e003      	b.n	8005dca <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	f043 0301 	orr.w	r3, r3, #1
 8005dc8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005dd0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	011b      	lsls	r3, r3, #4
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	697a      	ldr	r2, [r7, #20]
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	f023 030a 	bic.w	r3, r3, #10
 8005de4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	f003 030a 	and.w	r3, r3, #10
 8005dec:	693a      	ldr	r2, [r7, #16]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	697a      	ldr	r2, [r7, #20]
 8005df6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	693a      	ldr	r2, [r7, #16]
 8005dfc:	621a      	str	r2, [r3, #32]
}
 8005dfe:	bf00      	nop
 8005e00:	371c      	adds	r7, #28
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr
 8005e0a:	bf00      	nop
 8005e0c:	40010000 	.word	0x40010000
 8005e10:	40000400 	.word	0x40000400
 8005e14:	40000800 	.word	0x40000800
 8005e18:	40000c00 	.word	0x40000c00
 8005e1c:	40010400 	.word	0x40010400
 8005e20:	40014000 	.word	0x40014000
 8005e24:	40001800 	.word	0x40001800

08005e28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b087      	sub	sp, #28
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	60b9      	str	r1, [r7, #8]
 8005e32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6a1b      	ldr	r3, [r3, #32]
 8005e38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	6a1b      	ldr	r3, [r3, #32]
 8005e3e:	f023 0201 	bic.w	r2, r3, #1
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	699b      	ldr	r3, [r3, #24]
 8005e4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	011b      	lsls	r3, r3, #4
 8005e58:	693a      	ldr	r2, [r7, #16]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	f023 030a 	bic.w	r3, r3, #10
 8005e64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e66:	697a      	ldr	r2, [r7, #20]
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	693a      	ldr	r2, [r7, #16]
 8005e72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	697a      	ldr	r2, [r7, #20]
 8005e78:	621a      	str	r2, [r3, #32]
}
 8005e7a:	bf00      	nop
 8005e7c:	371c      	adds	r7, #28
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr

08005e86 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005e86:	b480      	push	{r7}
 8005e88:	b087      	sub	sp, #28
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	60f8      	str	r0, [r7, #12]
 8005e8e:	60b9      	str	r1, [r7, #8]
 8005e90:	607a      	str	r2, [r7, #4]
 8005e92:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	6a1b      	ldr	r3, [r3, #32]
 8005e98:	f023 0210 	bic.w	r2, r3, #16
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	699b      	ldr	r3, [r3, #24]
 8005ea4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6a1b      	ldr	r3, [r3, #32]
 8005eaa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005eb2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	021b      	lsls	r3, r3, #8
 8005eb8:	697a      	ldr	r2, [r7, #20]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ec4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	031b      	lsls	r3, r3, #12
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	697a      	ldr	r2, [r7, #20]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005ed8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	011b      	lsls	r3, r3, #4
 8005ede:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005ee2:	693a      	ldr	r2, [r7, #16]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	697a      	ldr	r2, [r7, #20]
 8005eec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	693a      	ldr	r2, [r7, #16]
 8005ef2:	621a      	str	r2, [r3, #32]
}
 8005ef4:	bf00      	nop
 8005ef6:	371c      	adds	r7, #28
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr

08005f00 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b087      	sub	sp, #28
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	60f8      	str	r0, [r7, #12]
 8005f08:	60b9      	str	r1, [r7, #8]
 8005f0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	6a1b      	ldr	r3, [r3, #32]
 8005f10:	f023 0210 	bic.w	r2, r3, #16
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	699b      	ldr	r3, [r3, #24]
 8005f1c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	6a1b      	ldr	r3, [r3, #32]
 8005f22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f2a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	031b      	lsls	r3, r3, #12
 8005f30:	697a      	ldr	r2, [r7, #20]
 8005f32:	4313      	orrs	r3, r2
 8005f34:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005f3c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	011b      	lsls	r3, r3, #4
 8005f42:	693a      	ldr	r2, [r7, #16]
 8005f44:	4313      	orrs	r3, r2
 8005f46:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	697a      	ldr	r2, [r7, #20]
 8005f4c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	693a      	ldr	r2, [r7, #16]
 8005f52:	621a      	str	r2, [r3, #32]
}
 8005f54:	bf00      	nop
 8005f56:	371c      	adds	r7, #28
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr

08005f60 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b087      	sub	sp, #28
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	60f8      	str	r0, [r7, #12]
 8005f68:	60b9      	str	r1, [r7, #8]
 8005f6a:	607a      	str	r2, [r7, #4]
 8005f6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	6a1b      	ldr	r3, [r3, #32]
 8005f72:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	69db      	ldr	r3, [r3, #28]
 8005f7e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6a1b      	ldr	r3, [r3, #32]
 8005f84:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	f023 0303 	bic.w	r3, r3, #3
 8005f8c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005f8e:	697a      	ldr	r2, [r7, #20]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	4313      	orrs	r3, r2
 8005f94:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f9c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	011b      	lsls	r3, r3, #4
 8005fa2:	b2db      	uxtb	r3, r3
 8005fa4:	697a      	ldr	r2, [r7, #20]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005fb0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	021b      	lsls	r3, r3, #8
 8005fb6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005fba:	693a      	ldr	r2, [r7, #16]
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	697a      	ldr	r2, [r7, #20]
 8005fc4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	693a      	ldr	r2, [r7, #16]
 8005fca:	621a      	str	r2, [r3, #32]
}
 8005fcc:	bf00      	nop
 8005fce:	371c      	adds	r7, #28
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd6:	4770      	bx	lr

08005fd8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b087      	sub	sp, #28
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	60f8      	str	r0, [r7, #12]
 8005fe0:	60b9      	str	r1, [r7, #8]
 8005fe2:	607a      	str	r2, [r7, #4]
 8005fe4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	6a1b      	ldr	r3, [r3, #32]
 8005fea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	69db      	ldr	r3, [r3, #28]
 8005ff6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	6a1b      	ldr	r3, [r3, #32]
 8005ffc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006004:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	021b      	lsls	r3, r3, #8
 800600a:	697a      	ldr	r2, [r7, #20]
 800600c:	4313      	orrs	r3, r2
 800600e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006016:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	031b      	lsls	r3, r3, #12
 800601c:	b29b      	uxth	r3, r3
 800601e:	697a      	ldr	r2, [r7, #20]
 8006020:	4313      	orrs	r3, r2
 8006022:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800602a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	031b      	lsls	r3, r3, #12
 8006030:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006034:	693a      	ldr	r2, [r7, #16]
 8006036:	4313      	orrs	r3, r2
 8006038:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	697a      	ldr	r2, [r7, #20]
 800603e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	693a      	ldr	r2, [r7, #16]
 8006044:	621a      	str	r2, [r3, #32]
}
 8006046:	bf00      	nop
 8006048:	371c      	adds	r7, #28
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr

08006052 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006052:	b480      	push	{r7}
 8006054:	b085      	sub	sp, #20
 8006056:	af00      	add	r7, sp, #0
 8006058:	6078      	str	r0, [r7, #4]
 800605a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006068:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800606a:	683a      	ldr	r2, [r7, #0]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	4313      	orrs	r3, r2
 8006070:	f043 0307 	orr.w	r3, r3, #7
 8006074:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	68fa      	ldr	r2, [r7, #12]
 800607a:	609a      	str	r2, [r3, #8]
}
 800607c:	bf00      	nop
 800607e:	3714      	adds	r7, #20
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr

08006088 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006088:	b480      	push	{r7}
 800608a:	b087      	sub	sp, #28
 800608c:	af00      	add	r7, sp, #0
 800608e:	60f8      	str	r0, [r7, #12]
 8006090:	60b9      	str	r1, [r7, #8]
 8006092:	607a      	str	r2, [r7, #4]
 8006094:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	021a      	lsls	r2, r3, #8
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	431a      	orrs	r2, r3
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	4313      	orrs	r3, r2
 80060b0:	697a      	ldr	r2, [r7, #20]
 80060b2:	4313      	orrs	r3, r2
 80060b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	697a      	ldr	r2, [r7, #20]
 80060ba:	609a      	str	r2, [r3, #8]
}
 80060bc:	bf00      	nop
 80060be:	371c      	adds	r7, #28
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr

080060c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b087      	sub	sp, #28
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	60f8      	str	r0, [r7, #12]
 80060d0:	60b9      	str	r1, [r7, #8]
 80060d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	f003 031f 	and.w	r3, r3, #31
 80060da:	2201      	movs	r2, #1
 80060dc:	fa02 f303 	lsl.w	r3, r2, r3
 80060e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	6a1a      	ldr	r2, [r3, #32]
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	43db      	mvns	r3, r3
 80060ea:	401a      	ands	r2, r3
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	6a1a      	ldr	r2, [r3, #32]
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	f003 031f 	and.w	r3, r3, #31
 80060fa:	6879      	ldr	r1, [r7, #4]
 80060fc:	fa01 f303 	lsl.w	r3, r1, r3
 8006100:	431a      	orrs	r2, r3
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	621a      	str	r2, [r3, #32]
}
 8006106:	bf00      	nop
 8006108:	371c      	adds	r7, #28
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr
	...

08006114 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006114:	b480      	push	{r7}
 8006116:	b085      	sub	sp, #20
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006124:	2b01      	cmp	r3, #1
 8006126:	d101      	bne.n	800612c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006128:	2302      	movs	r3, #2
 800612a:	e05a      	b.n	80061e2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2201      	movs	r2, #1
 8006130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2202      	movs	r2, #2
 8006138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006152:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	68fa      	ldr	r2, [r7, #12]
 800615a:	4313      	orrs	r3, r2
 800615c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	68fa      	ldr	r2, [r7, #12]
 8006164:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a21      	ldr	r2, [pc, #132]	; (80061f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d022      	beq.n	80061b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006178:	d01d      	beq.n	80061b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a1d      	ldr	r2, [pc, #116]	; (80061f4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d018      	beq.n	80061b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a1b      	ldr	r2, [pc, #108]	; (80061f8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d013      	beq.n	80061b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a1a      	ldr	r2, [pc, #104]	; (80061fc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d00e      	beq.n	80061b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a18      	ldr	r2, [pc, #96]	; (8006200 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d009      	beq.n	80061b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a17      	ldr	r2, [pc, #92]	; (8006204 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d004      	beq.n	80061b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a15      	ldr	r2, [pc, #84]	; (8006208 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d10c      	bne.n	80061d0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	68ba      	ldr	r2, [r7, #8]
 80061c4:	4313      	orrs	r3, r2
 80061c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	68ba      	ldr	r2, [r7, #8]
 80061ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2201      	movs	r2, #1
 80061d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2200      	movs	r2, #0
 80061dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061e0:	2300      	movs	r3, #0
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3714      	adds	r7, #20
 80061e6:	46bd      	mov	sp, r7
 80061e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ec:	4770      	bx	lr
 80061ee:	bf00      	nop
 80061f0:	40010000 	.word	0x40010000
 80061f4:	40000400 	.word	0x40000400
 80061f8:	40000800 	.word	0x40000800
 80061fc:	40000c00 	.word	0x40000c00
 8006200:	40010400 	.word	0x40010400
 8006204:	40014000 	.word	0x40014000
 8006208:	40001800 	.word	0x40001800

0800620c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800620c:	b480      	push	{r7}
 800620e:	b083      	sub	sp, #12
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006214:	bf00      	nop
 8006216:	370c      	adds	r7, #12
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr

08006220 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006220:	b480      	push	{r7}
 8006222:	b083      	sub	sp, #12
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006228:	bf00      	nop
 800622a:	370c      	adds	r7, #12
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr

08006234 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b082      	sub	sp, #8
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d101      	bne.n	8006246 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	e03f      	b.n	80062c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800624c:	b2db      	uxtb	r3, r3
 800624e:	2b00      	cmp	r3, #0
 8006250:	d106      	bne.n	8006260 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f7fc fca8 	bl	8002bb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2224      	movs	r2, #36	; 0x24
 8006264:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	68da      	ldr	r2, [r3, #12]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006276:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f000 fbe9 	bl	8006a50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	691a      	ldr	r2, [r3, #16]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800628c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	695a      	ldr	r2, [r3, #20]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800629c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	68da      	ldr	r2, [r3, #12]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80062ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2220      	movs	r2, #32
 80062b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2220      	movs	r2, #32
 80062c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80062c4:	2300      	movs	r3, #0
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3708      	adds	r7, #8
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}

080062ce <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062ce:	b580      	push	{r7, lr}
 80062d0:	b088      	sub	sp, #32
 80062d2:	af02      	add	r7, sp, #8
 80062d4:	60f8      	str	r0, [r7, #12]
 80062d6:	60b9      	str	r1, [r7, #8]
 80062d8:	603b      	str	r3, [r7, #0]
 80062da:	4613      	mov	r3, r2
 80062dc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80062de:	2300      	movs	r3, #0
 80062e0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	2b20      	cmp	r3, #32
 80062ec:	f040 8090 	bne.w	8006410 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d002      	beq.n	80062fc <HAL_UART_Receive+0x2e>
 80062f6:	88fb      	ldrh	r3, [r7, #6]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d101      	bne.n	8006300 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	e088      	b.n	8006412 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006306:	2b01      	cmp	r3, #1
 8006308:	d101      	bne.n	800630e <HAL_UART_Receive+0x40>
 800630a:	2302      	movs	r3, #2
 800630c:	e081      	b.n	8006412 <HAL_UART_Receive+0x144>
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2201      	movs	r2, #1
 8006312:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2200      	movs	r2, #0
 800631a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2222      	movs	r2, #34	; 0x22
 8006320:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006324:	f7fc fd24 	bl	8002d70 <HAL_GetTick>
 8006328:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	88fa      	ldrh	r2, [r7, #6]
 800632e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	88fa      	ldrh	r2, [r7, #6]
 8006334:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2200      	movs	r2, #0
 800633a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800633e:	e05c      	b.n	80063fa <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006344:	b29b      	uxth	r3, r3
 8006346:	3b01      	subs	r3, #1
 8006348:	b29a      	uxth	r2, r3
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006356:	d12b      	bne.n	80063b0 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	9300      	str	r3, [sp, #0]
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	2200      	movs	r2, #0
 8006360:	2120      	movs	r1, #32
 8006362:	68f8      	ldr	r0, [r7, #12]
 8006364:	f000 fa08 	bl	8006778 <UART_WaitOnFlagUntilTimeout>
 8006368:	4603      	mov	r3, r0
 800636a:	2b00      	cmp	r3, #0
 800636c:	d001      	beq.n	8006372 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 800636e:	2303      	movs	r3, #3
 8006370:	e04f      	b.n	8006412 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	691b      	ldr	r3, [r3, #16]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d10c      	bne.n	8006398 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	b29b      	uxth	r3, r3
 8006386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800638a:	b29a      	uxth	r2, r3
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	3302      	adds	r3, #2
 8006394:	60bb      	str	r3, [r7, #8]
 8006396:	e030      	b.n	80063fa <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	b29b      	uxth	r3, r3
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	b29a      	uxth	r2, r3
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	3301      	adds	r3, #1
 80063ac:	60bb      	str	r3, [r7, #8]
 80063ae:	e024      	b.n	80063fa <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	9300      	str	r3, [sp, #0]
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	2200      	movs	r2, #0
 80063b8:	2120      	movs	r1, #32
 80063ba:	68f8      	ldr	r0, [r7, #12]
 80063bc:	f000 f9dc 	bl	8006778 <UART_WaitOnFlagUntilTimeout>
 80063c0:	4603      	mov	r3, r0
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d001      	beq.n	80063ca <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 80063c6:	2303      	movs	r3, #3
 80063c8:	e023      	b.n	8006412 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	691b      	ldr	r3, [r3, #16]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d108      	bne.n	80063e4 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	6859      	ldr	r1, [r3, #4]
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	1c5a      	adds	r2, r3, #1
 80063dc:	60ba      	str	r2, [r7, #8]
 80063de:	b2ca      	uxtb	r2, r1
 80063e0:	701a      	strb	r2, [r3, #0]
 80063e2:	e00a      	b.n	80063fa <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	b2da      	uxtb	r2, r3
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	1c59      	adds	r1, r3, #1
 80063f0:	60b9      	str	r1, [r7, #8]
 80063f2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80063f6:	b2d2      	uxtb	r2, r2
 80063f8:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80063fe:	b29b      	uxth	r3, r3
 8006400:	2b00      	cmp	r3, #0
 8006402:	d19d      	bne.n	8006340 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2220      	movs	r2, #32
 8006408:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 800640c:	2300      	movs	r3, #0
 800640e:	e000      	b.n	8006412 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8006410:	2302      	movs	r3, #2
  }
}
 8006412:	4618      	mov	r0, r3
 8006414:	3718      	adds	r7, #24
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}

0800641a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800641a:	b480      	push	{r7}
 800641c:	b085      	sub	sp, #20
 800641e:	af00      	add	r7, sp, #0
 8006420:	60f8      	str	r0, [r7, #12]
 8006422:	60b9      	str	r1, [r7, #8]
 8006424:	4613      	mov	r3, r2
 8006426:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800642e:	b2db      	uxtb	r3, r3
 8006430:	2b20      	cmp	r3, #32
 8006432:	d130      	bne.n	8006496 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d002      	beq.n	8006440 <HAL_UART_Transmit_IT+0x26>
 800643a:	88fb      	ldrh	r3, [r7, #6]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d101      	bne.n	8006444 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8006440:	2301      	movs	r3, #1
 8006442:	e029      	b.n	8006498 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800644a:	2b01      	cmp	r3, #1
 800644c:	d101      	bne.n	8006452 <HAL_UART_Transmit_IT+0x38>
 800644e:	2302      	movs	r3, #2
 8006450:	e022      	b.n	8006498 <HAL_UART_Transmit_IT+0x7e>
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2201      	movs	r2, #1
 8006456:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	68ba      	ldr	r2, [r7, #8]
 800645e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	88fa      	ldrh	r2, [r7, #6]
 8006464:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	88fa      	ldrh	r2, [r7, #6]
 800646a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2200      	movs	r2, #0
 8006470:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2221      	movs	r2, #33	; 0x21
 8006476:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2200      	movs	r2, #0
 800647e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	68da      	ldr	r2, [r3, #12]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006490:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006492:	2300      	movs	r3, #0
 8006494:	e000      	b.n	8006498 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8006496:	2302      	movs	r3, #2
  }
}
 8006498:	4618      	mov	r0, r3
 800649a:	3714      	adds	r7, #20
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr

080064a4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b085      	sub	sp, #20
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	60f8      	str	r0, [r7, #12]
 80064ac:	60b9      	str	r1, [r7, #8]
 80064ae:	4613      	mov	r3, r2
 80064b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	2b20      	cmp	r3, #32
 80064bc:	d140      	bne.n	8006540 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d002      	beq.n	80064ca <HAL_UART_Receive_IT+0x26>
 80064c4:	88fb      	ldrh	r3, [r7, #6]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d101      	bne.n	80064ce <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80064ca:	2301      	movs	r3, #1
 80064cc:	e039      	b.n	8006542 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d101      	bne.n	80064dc <HAL_UART_Receive_IT+0x38>
 80064d8:	2302      	movs	r3, #2
 80064da:	e032      	b.n	8006542 <HAL_UART_Receive_IT+0x9e>
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2201      	movs	r2, #1
 80064e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	68ba      	ldr	r2, [r7, #8]
 80064e8:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	88fa      	ldrh	r2, [r7, #6]
 80064ee:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	88fa      	ldrh	r2, [r7, #6]
 80064f4:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2200      	movs	r2, #0
 80064fa:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2222      	movs	r2, #34	; 0x22
 8006500:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2200      	movs	r2, #0
 8006508:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	68da      	ldr	r2, [r3, #12]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800651a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	695a      	ldr	r2, [r3, #20]
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f042 0201 	orr.w	r2, r2, #1
 800652a:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	68da      	ldr	r2, [r3, #12]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f042 0220 	orr.w	r2, r2, #32
 800653a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800653c:	2300      	movs	r3, #0
 800653e:	e000      	b.n	8006542 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8006540:	2302      	movs	r3, #2
  }
}
 8006542:	4618      	mov	r0, r3
 8006544:	3714      	adds	r7, #20
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr
	...

08006550 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b088      	sub	sp, #32
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	68db      	ldr	r3, [r3, #12]
 8006566:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	695b      	ldr	r3, [r3, #20]
 800656e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006570:	2300      	movs	r3, #0
 8006572:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006574:	2300      	movs	r3, #0
 8006576:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006578:	69fb      	ldr	r3, [r7, #28]
 800657a:	f003 030f 	and.w	r3, r3, #15
 800657e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d10d      	bne.n	80065a2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006586:	69fb      	ldr	r3, [r7, #28]
 8006588:	f003 0320 	and.w	r3, r3, #32
 800658c:	2b00      	cmp	r3, #0
 800658e:	d008      	beq.n	80065a2 <HAL_UART_IRQHandler+0x52>
 8006590:	69bb      	ldr	r3, [r7, #24]
 8006592:	f003 0320 	and.w	r3, r3, #32
 8006596:	2b00      	cmp	r3, #0
 8006598:	d003      	beq.n	80065a2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 f9d6 	bl	800694c <UART_Receive_IT>
      return;
 80065a0:	e0d0      	b.n	8006744 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	f000 80b0 	beq.w	800670a <HAL_UART_IRQHandler+0x1ba>
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	f003 0301 	and.w	r3, r3, #1
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d105      	bne.n	80065c0 <HAL_UART_IRQHandler+0x70>
 80065b4:	69bb      	ldr	r3, [r7, #24]
 80065b6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	f000 80a5 	beq.w	800670a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80065c0:	69fb      	ldr	r3, [r7, #28]
 80065c2:	f003 0301 	and.w	r3, r3, #1
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d00a      	beq.n	80065e0 <HAL_UART_IRQHandler+0x90>
 80065ca:	69bb      	ldr	r3, [r7, #24]
 80065cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d005      	beq.n	80065e0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065d8:	f043 0201 	orr.w	r2, r3, #1
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80065e0:	69fb      	ldr	r3, [r7, #28]
 80065e2:	f003 0304 	and.w	r3, r3, #4
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d00a      	beq.n	8006600 <HAL_UART_IRQHandler+0xb0>
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	f003 0301 	and.w	r3, r3, #1
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d005      	beq.n	8006600 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065f8:	f043 0202 	orr.w	r2, r3, #2
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006600:	69fb      	ldr	r3, [r7, #28]
 8006602:	f003 0302 	and.w	r3, r3, #2
 8006606:	2b00      	cmp	r3, #0
 8006608:	d00a      	beq.n	8006620 <HAL_UART_IRQHandler+0xd0>
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	f003 0301 	and.w	r3, r3, #1
 8006610:	2b00      	cmp	r3, #0
 8006612:	d005      	beq.n	8006620 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006618:	f043 0204 	orr.w	r2, r3, #4
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006620:	69fb      	ldr	r3, [r7, #28]
 8006622:	f003 0308 	and.w	r3, r3, #8
 8006626:	2b00      	cmp	r3, #0
 8006628:	d00f      	beq.n	800664a <HAL_UART_IRQHandler+0xfa>
 800662a:	69bb      	ldr	r3, [r7, #24]
 800662c:	f003 0320 	and.w	r3, r3, #32
 8006630:	2b00      	cmp	r3, #0
 8006632:	d104      	bne.n	800663e <HAL_UART_IRQHandler+0xee>
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	f003 0301 	and.w	r3, r3, #1
 800663a:	2b00      	cmp	r3, #0
 800663c:	d005      	beq.n	800664a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006642:	f043 0208 	orr.w	r2, r3, #8
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800664e:	2b00      	cmp	r3, #0
 8006650:	d077      	beq.n	8006742 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006652:	69fb      	ldr	r3, [r7, #28]
 8006654:	f003 0320 	and.w	r3, r3, #32
 8006658:	2b00      	cmp	r3, #0
 800665a:	d007      	beq.n	800666c <HAL_UART_IRQHandler+0x11c>
 800665c:	69bb      	ldr	r3, [r7, #24]
 800665e:	f003 0320 	and.w	r3, r3, #32
 8006662:	2b00      	cmp	r3, #0
 8006664:	d002      	beq.n	800666c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f000 f970 	bl	800694c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	695b      	ldr	r3, [r3, #20]
 8006672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006676:	2b40      	cmp	r3, #64	; 0x40
 8006678:	bf0c      	ite	eq
 800667a:	2301      	moveq	r3, #1
 800667c:	2300      	movne	r3, #0
 800667e:	b2db      	uxtb	r3, r3
 8006680:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006686:	f003 0308 	and.w	r3, r3, #8
 800668a:	2b00      	cmp	r3, #0
 800668c:	d102      	bne.n	8006694 <HAL_UART_IRQHandler+0x144>
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d031      	beq.n	80066f8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f000 f8b9 	bl	800680c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	695b      	ldr	r3, [r3, #20]
 80066a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066a4:	2b40      	cmp	r3, #64	; 0x40
 80066a6:	d123      	bne.n	80066f0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	695a      	ldr	r2, [r3, #20]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066b6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d013      	beq.n	80066e8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066c4:	4a21      	ldr	r2, [pc, #132]	; (800674c <HAL_UART_IRQHandler+0x1fc>)
 80066c6:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066cc:	4618      	mov	r0, r3
 80066ce:	f7fc fcff 	bl	80030d0 <HAL_DMA_Abort_IT>
 80066d2:	4603      	mov	r3, r0
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d016      	beq.n	8006706 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80066e2:	4610      	mov	r0, r2
 80066e4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066e6:	e00e      	b.n	8006706 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f000 f83b 	bl	8006764 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066ee:	e00a      	b.n	8006706 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f000 f837 	bl	8006764 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066f6:	e006      	b.n	8006706 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f000 f833 	bl	8006764 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2200      	movs	r2, #0
 8006702:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8006704:	e01d      	b.n	8006742 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006706:	bf00      	nop
    return;
 8006708:	e01b      	b.n	8006742 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800670a:	69fb      	ldr	r3, [r7, #28]
 800670c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006710:	2b00      	cmp	r3, #0
 8006712:	d008      	beq.n	8006726 <HAL_UART_IRQHandler+0x1d6>
 8006714:	69bb      	ldr	r3, [r7, #24]
 8006716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800671a:	2b00      	cmp	r3, #0
 800671c:	d003      	beq.n	8006726 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f000 f8a6 	bl	8006870 <UART_Transmit_IT>
    return;
 8006724:	e00e      	b.n	8006744 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006726:	69fb      	ldr	r3, [r7, #28]
 8006728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800672c:	2b00      	cmp	r3, #0
 800672e:	d009      	beq.n	8006744 <HAL_UART_IRQHandler+0x1f4>
 8006730:	69bb      	ldr	r3, [r7, #24]
 8006732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006736:	2b00      	cmp	r3, #0
 8006738:	d004      	beq.n	8006744 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f000 f8ee 	bl	800691c <UART_EndTransmit_IT>
    return;
 8006740:	e000      	b.n	8006744 <HAL_UART_IRQHandler+0x1f4>
    return;
 8006742:	bf00      	nop
  }
}
 8006744:	3720      	adds	r7, #32
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}
 800674a:	bf00      	nop
 800674c:	08006849 	.word	0x08006849

08006750 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006750:	b480      	push	{r7}
 8006752:	b083      	sub	sp, #12
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006758:	bf00      	nop
 800675a:	370c      	adds	r7, #12
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr

08006764 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006764:	b480      	push	{r7}
 8006766:	b083      	sub	sp, #12
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800676c:	bf00      	nop
 800676e:	370c      	adds	r7, #12
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr

08006778 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b084      	sub	sp, #16
 800677c:	af00      	add	r7, sp, #0
 800677e:	60f8      	str	r0, [r7, #12]
 8006780:	60b9      	str	r1, [r7, #8]
 8006782:	603b      	str	r3, [r7, #0]
 8006784:	4613      	mov	r3, r2
 8006786:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006788:	e02c      	b.n	80067e4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800678a:	69bb      	ldr	r3, [r7, #24]
 800678c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006790:	d028      	beq.n	80067e4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006792:	69bb      	ldr	r3, [r7, #24]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d007      	beq.n	80067a8 <UART_WaitOnFlagUntilTimeout+0x30>
 8006798:	f7fc faea 	bl	8002d70 <HAL_GetTick>
 800679c:	4602      	mov	r2, r0
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	1ad3      	subs	r3, r2, r3
 80067a2:	69ba      	ldr	r2, [r7, #24]
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d21d      	bcs.n	80067e4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	68da      	ldr	r2, [r3, #12]
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80067b6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	695a      	ldr	r2, [r3, #20]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f022 0201 	bic.w	r2, r2, #1
 80067c6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2220      	movs	r2, #32
 80067cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2220      	movs	r2, #32
 80067d4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2200      	movs	r2, #0
 80067dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80067e0:	2303      	movs	r3, #3
 80067e2:	e00f      	b.n	8006804 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	4013      	ands	r3, r2
 80067ee:	68ba      	ldr	r2, [r7, #8]
 80067f0:	429a      	cmp	r2, r3
 80067f2:	bf0c      	ite	eq
 80067f4:	2301      	moveq	r3, #1
 80067f6:	2300      	movne	r3, #0
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	461a      	mov	r2, r3
 80067fc:	79fb      	ldrb	r3, [r7, #7]
 80067fe:	429a      	cmp	r2, r3
 8006800:	d0c3      	beq.n	800678a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006802:	2300      	movs	r3, #0
}
 8006804:	4618      	mov	r0, r3
 8006806:	3710      	adds	r7, #16
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}

0800680c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800680c:	b480      	push	{r7}
 800680e:	b083      	sub	sp, #12
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	68da      	ldr	r2, [r3, #12]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006822:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	695a      	ldr	r2, [r3, #20]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f022 0201 	bic.w	r2, r2, #1
 8006832:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2220      	movs	r2, #32
 8006838:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800683c:	bf00      	nop
 800683e:	370c      	adds	r7, #12
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr

08006848 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006854:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2200      	movs	r2, #0
 800685a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2200      	movs	r2, #0
 8006860:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006862:	68f8      	ldr	r0, [r7, #12]
 8006864:	f7ff ff7e 	bl	8006764 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006868:	bf00      	nop
 800686a:	3710      	adds	r7, #16
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}

08006870 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006870:	b480      	push	{r7}
 8006872:	b085      	sub	sp, #20
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800687e:	b2db      	uxtb	r3, r3
 8006880:	2b21      	cmp	r3, #33	; 0x21
 8006882:	d144      	bne.n	800690e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800688c:	d11a      	bne.n	80068c4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6a1b      	ldr	r3, [r3, #32]
 8006892:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	881b      	ldrh	r3, [r3, #0]
 8006898:	461a      	mov	r2, r3
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80068a2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	691b      	ldr	r3, [r3, #16]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d105      	bne.n	80068b8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6a1b      	ldr	r3, [r3, #32]
 80068b0:	1c9a      	adds	r2, r3, #2
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	621a      	str	r2, [r3, #32]
 80068b6:	e00e      	b.n	80068d6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6a1b      	ldr	r3, [r3, #32]
 80068bc:	1c5a      	adds	r2, r3, #1
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	621a      	str	r2, [r3, #32]
 80068c2:	e008      	b.n	80068d6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6a1b      	ldr	r3, [r3, #32]
 80068c8:	1c59      	adds	r1, r3, #1
 80068ca:	687a      	ldr	r2, [r7, #4]
 80068cc:	6211      	str	r1, [r2, #32]
 80068ce:	781a      	ldrb	r2, [r3, #0]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80068da:	b29b      	uxth	r3, r3
 80068dc:	3b01      	subs	r3, #1
 80068de:	b29b      	uxth	r3, r3
 80068e0:	687a      	ldr	r2, [r7, #4]
 80068e2:	4619      	mov	r1, r3
 80068e4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d10f      	bne.n	800690a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	68da      	ldr	r2, [r3, #12]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80068f8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	68da      	ldr	r2, [r3, #12]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006908:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800690a:	2300      	movs	r3, #0
 800690c:	e000      	b.n	8006910 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800690e:	2302      	movs	r3, #2
  }
}
 8006910:	4618      	mov	r0, r3
 8006912:	3714      	adds	r7, #20
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr

0800691c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b082      	sub	sp, #8
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	68da      	ldr	r2, [r3, #12]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006932:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2220      	movs	r2, #32
 8006938:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f7ff ff07 	bl	8006750 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006942:	2300      	movs	r3, #0
}
 8006944:	4618      	mov	r0, r3
 8006946:	3708      	adds	r7, #8
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b084      	sub	sp, #16
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800695a:	b2db      	uxtb	r3, r3
 800695c:	2b22      	cmp	r3, #34	; 0x22
 800695e:	d171      	bne.n	8006a44 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006968:	d123      	bne.n	80069b2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800696e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	691b      	ldr	r3, [r3, #16]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d10e      	bne.n	8006996 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	b29b      	uxth	r3, r3
 8006980:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006984:	b29a      	uxth	r2, r3
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800698e:	1c9a      	adds	r2, r3, #2
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	629a      	str	r2, [r3, #40]	; 0x28
 8006994:	e029      	b.n	80069ea <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	b29b      	uxth	r3, r3
 800699e:	b2db      	uxtb	r3, r3
 80069a0:	b29a      	uxth	r2, r3
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069aa:	1c5a      	adds	r2, r3, #1
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	629a      	str	r2, [r3, #40]	; 0x28
 80069b0:	e01b      	b.n	80069ea <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	691b      	ldr	r3, [r3, #16]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d10a      	bne.n	80069d0 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	6858      	ldr	r0, [r3, #4]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069c4:	1c59      	adds	r1, r3, #1
 80069c6:	687a      	ldr	r2, [r7, #4]
 80069c8:	6291      	str	r1, [r2, #40]	; 0x28
 80069ca:	b2c2      	uxtb	r2, r0
 80069cc:	701a      	strb	r2, [r3, #0]
 80069ce:	e00c      	b.n	80069ea <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	b2da      	uxtb	r2, r3
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069dc:	1c58      	adds	r0, r3, #1
 80069de:	6879      	ldr	r1, [r7, #4]
 80069e0:	6288      	str	r0, [r1, #40]	; 0x28
 80069e2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80069e6:	b2d2      	uxtb	r2, r2
 80069e8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	3b01      	subs	r3, #1
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	687a      	ldr	r2, [r7, #4]
 80069f6:	4619      	mov	r1, r3
 80069f8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d120      	bne.n	8006a40 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	68da      	ldr	r2, [r3, #12]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f022 0220 	bic.w	r2, r2, #32
 8006a0c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	68da      	ldr	r2, [r3, #12]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a1c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	695a      	ldr	r2, [r3, #20]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f022 0201 	bic.w	r2, r2, #1
 8006a2c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2220      	movs	r2, #32
 8006a32:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f7fa ff04 	bl	8001844 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	e002      	b.n	8006a46 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006a40:	2300      	movs	r3, #0
 8006a42:	e000      	b.n	8006a46 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006a44:	2302      	movs	r3, #2
  }
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3710      	adds	r7, #16
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}
	...

08006a50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a54:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a5e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	691b      	ldr	r3, [r3, #16]
 8006a66:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006a6a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006a6e:	68d9      	ldr	r1, [r3, #12]
 8006a70:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	ea40 0301 	orr.w	r3, r0, r1
 8006a7a:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006a7c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006a80:	689a      	ldr	r2, [r3, #8]
 8006a82:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006a86:	691b      	ldr	r3, [r3, #16]
 8006a88:	431a      	orrs	r2, r3
 8006a8a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006a8e:	695b      	ldr	r3, [r3, #20]
 8006a90:	431a      	orrs	r2, r3
 8006a92:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006a96:	69db      	ldr	r3, [r3, #28]
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 8006a9e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	68db      	ldr	r3, [r3, #12]
 8006aa6:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006aaa:	f021 010c 	bic.w	r1, r1, #12
 8006aae:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006ab2:	681a      	ldr	r2, [r3, #0]
 8006ab4:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8006ab8:	430b      	orrs	r3, r1
 8006aba:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006abc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	695b      	ldr	r3, [r3, #20]
 8006ac4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006ac8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006acc:	6999      	ldr	r1, [r3, #24]
 8006ace:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	ea40 0301 	orr.w	r3, r0, r1
 8006ad8:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ada:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006ade:	69db      	ldr	r3, [r3, #28]
 8006ae0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ae4:	f040 824a 	bne.w	8006f7c <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006ae8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006aec:	681a      	ldr	r2, [r3, #0]
 8006aee:	4b96      	ldr	r3, [pc, #600]	; (8006d48 <UART_SetConfig+0x2f8>)
 8006af0:	429a      	cmp	r2, r3
 8006af2:	d006      	beq.n	8006b02 <UART_SetConfig+0xb2>
 8006af4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006af8:	681a      	ldr	r2, [r3, #0]
 8006afa:	4b94      	ldr	r3, [pc, #592]	; (8006d4c <UART_SetConfig+0x2fc>)
 8006afc:	429a      	cmp	r2, r3
 8006afe:	f040 8129 	bne.w	8006d54 <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006b02:	f7fe f9e9 	bl	8004ed8 <HAL_RCC_GetPCLK2Freq>
 8006b06:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006b0a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8006b14:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 8006b18:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 8006b1c:	4622      	mov	r2, r4
 8006b1e:	462b      	mov	r3, r5
 8006b20:	1891      	adds	r1, r2, r2
 8006b22:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8006b26:	415b      	adcs	r3, r3
 8006b28:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006b2c:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8006b30:	4621      	mov	r1, r4
 8006b32:	1851      	adds	r1, r2, r1
 8006b34:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8006b38:	4629      	mov	r1, r5
 8006b3a:	414b      	adcs	r3, r1
 8006b3c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006b40:	f04f 0200 	mov.w	r2, #0
 8006b44:	f04f 0300 	mov.w	r3, #0
 8006b48:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 8006b4c:	4649      	mov	r1, r9
 8006b4e:	00cb      	lsls	r3, r1, #3
 8006b50:	4641      	mov	r1, r8
 8006b52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b56:	4641      	mov	r1, r8
 8006b58:	00ca      	lsls	r2, r1, #3
 8006b5a:	4610      	mov	r0, r2
 8006b5c:	4619      	mov	r1, r3
 8006b5e:	4603      	mov	r3, r0
 8006b60:	4622      	mov	r2, r4
 8006b62:	189b      	adds	r3, r3, r2
 8006b64:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8006b68:	462b      	mov	r3, r5
 8006b6a:	460a      	mov	r2, r1
 8006b6c:	eb42 0303 	adc.w	r3, r2, r3
 8006b70:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8006b74:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8006b80:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 8006b84:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 8006b88:	460b      	mov	r3, r1
 8006b8a:	18db      	adds	r3, r3, r3
 8006b8c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006b90:	4613      	mov	r3, r2
 8006b92:	eb42 0303 	adc.w	r3, r2, r3
 8006b96:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006b9a:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8006b9e:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8006ba2:	f7f9 ff41 	bl	8000a28 <__aeabi_uldivmod>
 8006ba6:	4602      	mov	r2, r0
 8006ba8:	460b      	mov	r3, r1
 8006baa:	4b69      	ldr	r3, [pc, #420]	; (8006d50 <UART_SetConfig+0x300>)
 8006bac:	fba3 2302 	umull	r2, r3, r3, r2
 8006bb0:	095b      	lsrs	r3, r3, #5
 8006bb2:	011c      	lsls	r4, r3, #4
 8006bb4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006bb8:	2200      	movs	r2, #0
 8006bba:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8006bbe:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8006bc2:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 8006bc6:	4642      	mov	r2, r8
 8006bc8:	464b      	mov	r3, r9
 8006bca:	1891      	adds	r1, r2, r2
 8006bcc:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8006bd0:	415b      	adcs	r3, r3
 8006bd2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006bd6:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8006bda:	4641      	mov	r1, r8
 8006bdc:	1851      	adds	r1, r2, r1
 8006bde:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8006be2:	4649      	mov	r1, r9
 8006be4:	414b      	adcs	r3, r1
 8006be6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006bea:	f04f 0200 	mov.w	r2, #0
 8006bee:	f04f 0300 	mov.w	r3, #0
 8006bf2:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 8006bf6:	4659      	mov	r1, fp
 8006bf8:	00cb      	lsls	r3, r1, #3
 8006bfa:	4651      	mov	r1, sl
 8006bfc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c00:	4651      	mov	r1, sl
 8006c02:	00ca      	lsls	r2, r1, #3
 8006c04:	4610      	mov	r0, r2
 8006c06:	4619      	mov	r1, r3
 8006c08:	4603      	mov	r3, r0
 8006c0a:	4642      	mov	r2, r8
 8006c0c:	189b      	adds	r3, r3, r2
 8006c0e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8006c12:	464b      	mov	r3, r9
 8006c14:	460a      	mov	r2, r1
 8006c16:	eb42 0303 	adc.w	r3, r2, r3
 8006c1a:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8006c1e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	2200      	movs	r2, #0
 8006c26:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8006c2a:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 8006c2e:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 8006c32:	460b      	mov	r3, r1
 8006c34:	18db      	adds	r3, r3, r3
 8006c36:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006c3a:	4613      	mov	r3, r2
 8006c3c:	eb42 0303 	adc.w	r3, r2, r3
 8006c40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006c44:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8006c48:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 8006c4c:	f7f9 feec 	bl	8000a28 <__aeabi_uldivmod>
 8006c50:	4602      	mov	r2, r0
 8006c52:	460b      	mov	r3, r1
 8006c54:	4611      	mov	r1, r2
 8006c56:	4b3e      	ldr	r3, [pc, #248]	; (8006d50 <UART_SetConfig+0x300>)
 8006c58:	fba3 2301 	umull	r2, r3, r3, r1
 8006c5c:	095b      	lsrs	r3, r3, #5
 8006c5e:	2264      	movs	r2, #100	; 0x64
 8006c60:	fb02 f303 	mul.w	r3, r2, r3
 8006c64:	1acb      	subs	r3, r1, r3
 8006c66:	00db      	lsls	r3, r3, #3
 8006c68:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006c6c:	4b38      	ldr	r3, [pc, #224]	; (8006d50 <UART_SetConfig+0x300>)
 8006c6e:	fba3 2302 	umull	r2, r3, r3, r2
 8006c72:	095b      	lsrs	r3, r3, #5
 8006c74:	005b      	lsls	r3, r3, #1
 8006c76:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006c7a:	441c      	add	r4, r3
 8006c7c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006c80:	2200      	movs	r2, #0
 8006c82:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8006c86:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 8006c8a:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 8006c8e:	4642      	mov	r2, r8
 8006c90:	464b      	mov	r3, r9
 8006c92:	1891      	adds	r1, r2, r2
 8006c94:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8006c98:	415b      	adcs	r3, r3
 8006c9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006c9e:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8006ca2:	4641      	mov	r1, r8
 8006ca4:	1851      	adds	r1, r2, r1
 8006ca6:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8006caa:	4649      	mov	r1, r9
 8006cac:	414b      	adcs	r3, r1
 8006cae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006cb2:	f04f 0200 	mov.w	r2, #0
 8006cb6:	f04f 0300 	mov.w	r3, #0
 8006cba:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 8006cbe:	4659      	mov	r1, fp
 8006cc0:	00cb      	lsls	r3, r1, #3
 8006cc2:	4651      	mov	r1, sl
 8006cc4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006cc8:	4651      	mov	r1, sl
 8006cca:	00ca      	lsls	r2, r1, #3
 8006ccc:	4610      	mov	r0, r2
 8006cce:	4619      	mov	r1, r3
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	4642      	mov	r2, r8
 8006cd4:	189b      	adds	r3, r3, r2
 8006cd6:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8006cda:	464b      	mov	r3, r9
 8006cdc:	460a      	mov	r2, r1
 8006cde:	eb42 0303 	adc.w	r3, r2, r3
 8006ce2:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8006ce6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	2200      	movs	r2, #0
 8006cee:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8006cf2:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 8006cf6:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 8006cfa:	460b      	mov	r3, r1
 8006cfc:	18db      	adds	r3, r3, r3
 8006cfe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006d02:	4613      	mov	r3, r2
 8006d04:	eb42 0303 	adc.w	r3, r2, r3
 8006d08:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006d0c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8006d10:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 8006d14:	f7f9 fe88 	bl	8000a28 <__aeabi_uldivmod>
 8006d18:	4602      	mov	r2, r0
 8006d1a:	460b      	mov	r3, r1
 8006d1c:	4b0c      	ldr	r3, [pc, #48]	; (8006d50 <UART_SetConfig+0x300>)
 8006d1e:	fba3 1302 	umull	r1, r3, r3, r2
 8006d22:	095b      	lsrs	r3, r3, #5
 8006d24:	2164      	movs	r1, #100	; 0x64
 8006d26:	fb01 f303 	mul.w	r3, r1, r3
 8006d2a:	1ad3      	subs	r3, r2, r3
 8006d2c:	00db      	lsls	r3, r3, #3
 8006d2e:	3332      	adds	r3, #50	; 0x32
 8006d30:	4a07      	ldr	r2, [pc, #28]	; (8006d50 <UART_SetConfig+0x300>)
 8006d32:	fba2 2303 	umull	r2, r3, r2, r3
 8006d36:	095b      	lsrs	r3, r3, #5
 8006d38:	f003 0207 	and.w	r2, r3, #7
 8006d3c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4422      	add	r2, r4
 8006d44:	609a      	str	r2, [r3, #8]
 8006d46:	e349      	b.n	80073dc <UART_SetConfig+0x98c>
 8006d48:	40011000 	.word	0x40011000
 8006d4c:	40011400 	.word	0x40011400
 8006d50:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006d54:	f7fe f8ac 	bl	8004eb0 <HAL_RCC_GetPCLK1Freq>
 8006d58:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006d5c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006d60:	2200      	movs	r2, #0
 8006d62:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8006d66:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 8006d6a:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 8006d6e:	4622      	mov	r2, r4
 8006d70:	462b      	mov	r3, r5
 8006d72:	1891      	adds	r1, r2, r2
 8006d74:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8006d78:	415b      	adcs	r3, r3
 8006d7a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006d7e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8006d82:	4621      	mov	r1, r4
 8006d84:	eb12 0a01 	adds.w	sl, r2, r1
 8006d88:	4629      	mov	r1, r5
 8006d8a:	eb43 0b01 	adc.w	fp, r3, r1
 8006d8e:	f04f 0200 	mov.w	r2, #0
 8006d92:	f04f 0300 	mov.w	r3, #0
 8006d96:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006d9a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006d9e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006da2:	4692      	mov	sl, r2
 8006da4:	469b      	mov	fp, r3
 8006da6:	4623      	mov	r3, r4
 8006da8:	eb1a 0303 	adds.w	r3, sl, r3
 8006dac:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8006db0:	462b      	mov	r3, r5
 8006db2:	eb4b 0303 	adc.w	r3, fp, r3
 8006db6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8006dba:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8006dc6:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8006dca:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 8006dce:	460b      	mov	r3, r1
 8006dd0:	18db      	adds	r3, r3, r3
 8006dd2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006dd6:	4613      	mov	r3, r2
 8006dd8:	eb42 0303 	adc.w	r3, r2, r3
 8006ddc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006de0:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8006de4:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 8006de8:	f7f9 fe1e 	bl	8000a28 <__aeabi_uldivmod>
 8006dec:	4602      	mov	r2, r0
 8006dee:	460b      	mov	r3, r1
 8006df0:	4b61      	ldr	r3, [pc, #388]	; (8006f78 <UART_SetConfig+0x528>)
 8006df2:	fba3 2302 	umull	r2, r3, r3, r2
 8006df6:	095b      	lsrs	r3, r3, #5
 8006df8:	011c      	lsls	r4, r3, #4
 8006dfa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8006e04:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 8006e08:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 8006e0c:	4642      	mov	r2, r8
 8006e0e:	464b      	mov	r3, r9
 8006e10:	1891      	adds	r1, r2, r2
 8006e12:	67b9      	str	r1, [r7, #120]	; 0x78
 8006e14:	415b      	adcs	r3, r3
 8006e16:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006e18:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8006e1c:	4641      	mov	r1, r8
 8006e1e:	1851      	adds	r1, r2, r1
 8006e20:	6739      	str	r1, [r7, #112]	; 0x70
 8006e22:	4649      	mov	r1, r9
 8006e24:	414b      	adcs	r3, r1
 8006e26:	677b      	str	r3, [r7, #116]	; 0x74
 8006e28:	f04f 0200 	mov.w	r2, #0
 8006e2c:	f04f 0300 	mov.w	r3, #0
 8006e30:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 8006e34:	4659      	mov	r1, fp
 8006e36:	00cb      	lsls	r3, r1, #3
 8006e38:	4651      	mov	r1, sl
 8006e3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e3e:	4651      	mov	r1, sl
 8006e40:	00ca      	lsls	r2, r1, #3
 8006e42:	4610      	mov	r0, r2
 8006e44:	4619      	mov	r1, r3
 8006e46:	4603      	mov	r3, r0
 8006e48:	4642      	mov	r2, r8
 8006e4a:	189b      	adds	r3, r3, r2
 8006e4c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8006e50:	464b      	mov	r3, r9
 8006e52:	460a      	mov	r2, r1
 8006e54:	eb42 0303 	adc.w	r3, r2, r3
 8006e58:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8006e5c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	2200      	movs	r2, #0
 8006e64:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8006e68:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 8006e6c:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 8006e70:	460b      	mov	r3, r1
 8006e72:	18db      	adds	r3, r3, r3
 8006e74:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e76:	4613      	mov	r3, r2
 8006e78:	eb42 0303 	adc.w	r3, r2, r3
 8006e7c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006e7e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8006e82:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8006e86:	f7f9 fdcf 	bl	8000a28 <__aeabi_uldivmod>
 8006e8a:	4602      	mov	r2, r0
 8006e8c:	460b      	mov	r3, r1
 8006e8e:	4611      	mov	r1, r2
 8006e90:	4b39      	ldr	r3, [pc, #228]	; (8006f78 <UART_SetConfig+0x528>)
 8006e92:	fba3 2301 	umull	r2, r3, r3, r1
 8006e96:	095b      	lsrs	r3, r3, #5
 8006e98:	2264      	movs	r2, #100	; 0x64
 8006e9a:	fb02 f303 	mul.w	r3, r2, r3
 8006e9e:	1acb      	subs	r3, r1, r3
 8006ea0:	00db      	lsls	r3, r3, #3
 8006ea2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006ea6:	4b34      	ldr	r3, [pc, #208]	; (8006f78 <UART_SetConfig+0x528>)
 8006ea8:	fba3 2302 	umull	r2, r3, r3, r2
 8006eac:	095b      	lsrs	r3, r3, #5
 8006eae:	005b      	lsls	r3, r3, #1
 8006eb0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006eb4:	441c      	add	r4, r3
 8006eb6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006eba:	2200      	movs	r2, #0
 8006ebc:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8006ec0:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8006ec4:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 8006ec8:	4642      	mov	r2, r8
 8006eca:	464b      	mov	r3, r9
 8006ecc:	1891      	adds	r1, r2, r2
 8006ece:	6639      	str	r1, [r7, #96]	; 0x60
 8006ed0:	415b      	adcs	r3, r3
 8006ed2:	667b      	str	r3, [r7, #100]	; 0x64
 8006ed4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8006ed8:	4641      	mov	r1, r8
 8006eda:	1851      	adds	r1, r2, r1
 8006edc:	65b9      	str	r1, [r7, #88]	; 0x58
 8006ede:	4649      	mov	r1, r9
 8006ee0:	414b      	adcs	r3, r1
 8006ee2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ee4:	f04f 0200 	mov.w	r2, #0
 8006ee8:	f04f 0300 	mov.w	r3, #0
 8006eec:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8006ef0:	4659      	mov	r1, fp
 8006ef2:	00cb      	lsls	r3, r1, #3
 8006ef4:	4651      	mov	r1, sl
 8006ef6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006efa:	4651      	mov	r1, sl
 8006efc:	00ca      	lsls	r2, r1, #3
 8006efe:	4610      	mov	r0, r2
 8006f00:	4619      	mov	r1, r3
 8006f02:	4603      	mov	r3, r0
 8006f04:	4642      	mov	r2, r8
 8006f06:	189b      	adds	r3, r3, r2
 8006f08:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8006f0c:	464b      	mov	r3, r9
 8006f0e:	460a      	mov	r2, r1
 8006f10:	eb42 0303 	adc.w	r3, r2, r3
 8006f14:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8006f18:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8006f24:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 8006f28:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 8006f2c:	460b      	mov	r3, r1
 8006f2e:	18db      	adds	r3, r3, r3
 8006f30:	653b      	str	r3, [r7, #80]	; 0x50
 8006f32:	4613      	mov	r3, r2
 8006f34:	eb42 0303 	adc.w	r3, r2, r3
 8006f38:	657b      	str	r3, [r7, #84]	; 0x54
 8006f3a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006f3e:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8006f42:	f7f9 fd71 	bl	8000a28 <__aeabi_uldivmod>
 8006f46:	4602      	mov	r2, r0
 8006f48:	460b      	mov	r3, r1
 8006f4a:	4b0b      	ldr	r3, [pc, #44]	; (8006f78 <UART_SetConfig+0x528>)
 8006f4c:	fba3 1302 	umull	r1, r3, r3, r2
 8006f50:	095b      	lsrs	r3, r3, #5
 8006f52:	2164      	movs	r1, #100	; 0x64
 8006f54:	fb01 f303 	mul.w	r3, r1, r3
 8006f58:	1ad3      	subs	r3, r2, r3
 8006f5a:	00db      	lsls	r3, r3, #3
 8006f5c:	3332      	adds	r3, #50	; 0x32
 8006f5e:	4a06      	ldr	r2, [pc, #24]	; (8006f78 <UART_SetConfig+0x528>)
 8006f60:	fba2 2303 	umull	r2, r3, r2, r3
 8006f64:	095b      	lsrs	r3, r3, #5
 8006f66:	f003 0207 	and.w	r2, r3, #7
 8006f6a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4422      	add	r2, r4
 8006f72:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006f74:	e232      	b.n	80073dc <UART_SetConfig+0x98c>
 8006f76:	bf00      	nop
 8006f78:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006f7c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006f80:	681a      	ldr	r2, [r3, #0]
 8006f82:	4b8d      	ldr	r3, [pc, #564]	; (80071b8 <UART_SetConfig+0x768>)
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d006      	beq.n	8006f96 <UART_SetConfig+0x546>
 8006f88:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006f8c:	681a      	ldr	r2, [r3, #0]
 8006f8e:	4b8b      	ldr	r3, [pc, #556]	; (80071bc <UART_SetConfig+0x76c>)
 8006f90:	429a      	cmp	r2, r3
 8006f92:	f040 8117 	bne.w	80071c4 <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006f96:	f7fd ff9f 	bl	8004ed8 <HAL_RCC_GetPCLK2Freq>
 8006f9a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006f9e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8006fa8:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8006fac:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8006fb0:	4622      	mov	r2, r4
 8006fb2:	462b      	mov	r3, r5
 8006fb4:	1891      	adds	r1, r2, r2
 8006fb6:	64b9      	str	r1, [r7, #72]	; 0x48
 8006fb8:	415b      	adcs	r3, r3
 8006fba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006fbc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006fc0:	4621      	mov	r1, r4
 8006fc2:	eb12 0801 	adds.w	r8, r2, r1
 8006fc6:	4629      	mov	r1, r5
 8006fc8:	eb43 0901 	adc.w	r9, r3, r1
 8006fcc:	f04f 0200 	mov.w	r2, #0
 8006fd0:	f04f 0300 	mov.w	r3, #0
 8006fd4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006fd8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006fdc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006fe0:	4690      	mov	r8, r2
 8006fe2:	4699      	mov	r9, r3
 8006fe4:	4623      	mov	r3, r4
 8006fe6:	eb18 0303 	adds.w	r3, r8, r3
 8006fea:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8006fee:	462b      	mov	r3, r5
 8006ff0:	eb49 0303 	adc.w	r3, r9, r3
 8006ff4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8006ff8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	2200      	movs	r2, #0
 8007000:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8007004:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8007008:	f04f 0200 	mov.w	r2, #0
 800700c:	f04f 0300 	mov.w	r3, #0
 8007010:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 8007014:	4629      	mov	r1, r5
 8007016:	008b      	lsls	r3, r1, #2
 8007018:	4621      	mov	r1, r4
 800701a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800701e:	4621      	mov	r1, r4
 8007020:	008a      	lsls	r2, r1, #2
 8007022:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 8007026:	f7f9 fcff 	bl	8000a28 <__aeabi_uldivmod>
 800702a:	4602      	mov	r2, r0
 800702c:	460b      	mov	r3, r1
 800702e:	4b64      	ldr	r3, [pc, #400]	; (80071c0 <UART_SetConfig+0x770>)
 8007030:	fba3 2302 	umull	r2, r3, r3, r2
 8007034:	095b      	lsrs	r3, r3, #5
 8007036:	011c      	lsls	r4, r3, #4
 8007038:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800703c:	2200      	movs	r2, #0
 800703e:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8007042:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8007046:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 800704a:	4642      	mov	r2, r8
 800704c:	464b      	mov	r3, r9
 800704e:	1891      	adds	r1, r2, r2
 8007050:	6439      	str	r1, [r7, #64]	; 0x40
 8007052:	415b      	adcs	r3, r3
 8007054:	647b      	str	r3, [r7, #68]	; 0x44
 8007056:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800705a:	4641      	mov	r1, r8
 800705c:	1851      	adds	r1, r2, r1
 800705e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007060:	4649      	mov	r1, r9
 8007062:	414b      	adcs	r3, r1
 8007064:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007066:	f04f 0200 	mov.w	r2, #0
 800706a:	f04f 0300 	mov.w	r3, #0
 800706e:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 8007072:	4659      	mov	r1, fp
 8007074:	00cb      	lsls	r3, r1, #3
 8007076:	4651      	mov	r1, sl
 8007078:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800707c:	4651      	mov	r1, sl
 800707e:	00ca      	lsls	r2, r1, #3
 8007080:	4610      	mov	r0, r2
 8007082:	4619      	mov	r1, r3
 8007084:	4603      	mov	r3, r0
 8007086:	4642      	mov	r2, r8
 8007088:	189b      	adds	r3, r3, r2
 800708a:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 800708e:	464b      	mov	r3, r9
 8007090:	460a      	mov	r2, r1
 8007092:	eb42 0303 	adc.w	r3, r2, r3
 8007096:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800709a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	2200      	movs	r2, #0
 80070a2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80070a6:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 80070aa:	f04f 0200 	mov.w	r2, #0
 80070ae:	f04f 0300 	mov.w	r3, #0
 80070b2:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 80070b6:	4649      	mov	r1, r9
 80070b8:	008b      	lsls	r3, r1, #2
 80070ba:	4641      	mov	r1, r8
 80070bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80070c0:	4641      	mov	r1, r8
 80070c2:	008a      	lsls	r2, r1, #2
 80070c4:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 80070c8:	f7f9 fcae 	bl	8000a28 <__aeabi_uldivmod>
 80070cc:	4602      	mov	r2, r0
 80070ce:	460b      	mov	r3, r1
 80070d0:	4b3b      	ldr	r3, [pc, #236]	; (80071c0 <UART_SetConfig+0x770>)
 80070d2:	fba3 1302 	umull	r1, r3, r3, r2
 80070d6:	095b      	lsrs	r3, r3, #5
 80070d8:	2164      	movs	r1, #100	; 0x64
 80070da:	fb01 f303 	mul.w	r3, r1, r3
 80070de:	1ad3      	subs	r3, r2, r3
 80070e0:	011b      	lsls	r3, r3, #4
 80070e2:	3332      	adds	r3, #50	; 0x32
 80070e4:	4a36      	ldr	r2, [pc, #216]	; (80071c0 <UART_SetConfig+0x770>)
 80070e6:	fba2 2303 	umull	r2, r3, r2, r3
 80070ea:	095b      	lsrs	r3, r3, #5
 80070ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80070f0:	441c      	add	r4, r3
 80070f2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80070f6:	2200      	movs	r2, #0
 80070f8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80070fc:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8007100:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 8007104:	4642      	mov	r2, r8
 8007106:	464b      	mov	r3, r9
 8007108:	1891      	adds	r1, r2, r2
 800710a:	6339      	str	r1, [r7, #48]	; 0x30
 800710c:	415b      	adcs	r3, r3
 800710e:	637b      	str	r3, [r7, #52]	; 0x34
 8007110:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007114:	4641      	mov	r1, r8
 8007116:	1851      	adds	r1, r2, r1
 8007118:	62b9      	str	r1, [r7, #40]	; 0x28
 800711a:	4649      	mov	r1, r9
 800711c:	414b      	adcs	r3, r1
 800711e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007120:	f04f 0200 	mov.w	r2, #0
 8007124:	f04f 0300 	mov.w	r3, #0
 8007128:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 800712c:	4659      	mov	r1, fp
 800712e:	00cb      	lsls	r3, r1, #3
 8007130:	4651      	mov	r1, sl
 8007132:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007136:	4651      	mov	r1, sl
 8007138:	00ca      	lsls	r2, r1, #3
 800713a:	4610      	mov	r0, r2
 800713c:	4619      	mov	r1, r3
 800713e:	4603      	mov	r3, r0
 8007140:	4642      	mov	r2, r8
 8007142:	189b      	adds	r3, r3, r2
 8007144:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007148:	464b      	mov	r3, r9
 800714a:	460a      	mov	r2, r1
 800714c:	eb42 0303 	adc.w	r3, r2, r3
 8007150:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8007154:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	2200      	movs	r2, #0
 800715c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007160:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8007164:	f04f 0200 	mov.w	r2, #0
 8007168:	f04f 0300 	mov.w	r3, #0
 800716c:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 8007170:	4649      	mov	r1, r9
 8007172:	008b      	lsls	r3, r1, #2
 8007174:	4641      	mov	r1, r8
 8007176:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800717a:	4641      	mov	r1, r8
 800717c:	008a      	lsls	r2, r1, #2
 800717e:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8007182:	f7f9 fc51 	bl	8000a28 <__aeabi_uldivmod>
 8007186:	4602      	mov	r2, r0
 8007188:	460b      	mov	r3, r1
 800718a:	4b0d      	ldr	r3, [pc, #52]	; (80071c0 <UART_SetConfig+0x770>)
 800718c:	fba3 1302 	umull	r1, r3, r3, r2
 8007190:	095b      	lsrs	r3, r3, #5
 8007192:	2164      	movs	r1, #100	; 0x64
 8007194:	fb01 f303 	mul.w	r3, r1, r3
 8007198:	1ad3      	subs	r3, r2, r3
 800719a:	011b      	lsls	r3, r3, #4
 800719c:	3332      	adds	r3, #50	; 0x32
 800719e:	4a08      	ldr	r2, [pc, #32]	; (80071c0 <UART_SetConfig+0x770>)
 80071a0:	fba2 2303 	umull	r2, r3, r2, r3
 80071a4:	095b      	lsrs	r3, r3, #5
 80071a6:	f003 020f 	and.w	r2, r3, #15
 80071aa:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4422      	add	r2, r4
 80071b2:	609a      	str	r2, [r3, #8]
 80071b4:	e112      	b.n	80073dc <UART_SetConfig+0x98c>
 80071b6:	bf00      	nop
 80071b8:	40011000 	.word	0x40011000
 80071bc:	40011400 	.word	0x40011400
 80071c0:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 80071c4:	f7fd fe74 	bl	8004eb0 <HAL_RCC_GetPCLK1Freq>
 80071c8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80071cc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80071d0:	2200      	movs	r2, #0
 80071d2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80071d6:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80071da:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 80071de:	4642      	mov	r2, r8
 80071e0:	464b      	mov	r3, r9
 80071e2:	1891      	adds	r1, r2, r2
 80071e4:	6239      	str	r1, [r7, #32]
 80071e6:	415b      	adcs	r3, r3
 80071e8:	627b      	str	r3, [r7, #36]	; 0x24
 80071ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80071ee:	4641      	mov	r1, r8
 80071f0:	1854      	adds	r4, r2, r1
 80071f2:	4649      	mov	r1, r9
 80071f4:	eb43 0501 	adc.w	r5, r3, r1
 80071f8:	f04f 0200 	mov.w	r2, #0
 80071fc:	f04f 0300 	mov.w	r3, #0
 8007200:	00eb      	lsls	r3, r5, #3
 8007202:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007206:	00e2      	lsls	r2, r4, #3
 8007208:	4614      	mov	r4, r2
 800720a:	461d      	mov	r5, r3
 800720c:	4643      	mov	r3, r8
 800720e:	18e3      	adds	r3, r4, r3
 8007210:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007214:	464b      	mov	r3, r9
 8007216:	eb45 0303 	adc.w	r3, r5, r3
 800721a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800721e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	2200      	movs	r2, #0
 8007226:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800722a:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800722e:	f04f 0200 	mov.w	r2, #0
 8007232:	f04f 0300 	mov.w	r3, #0
 8007236:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 800723a:	4629      	mov	r1, r5
 800723c:	008b      	lsls	r3, r1, #2
 800723e:	4621      	mov	r1, r4
 8007240:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007244:	4621      	mov	r1, r4
 8007246:	008a      	lsls	r2, r1, #2
 8007248:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 800724c:	f7f9 fbec 	bl	8000a28 <__aeabi_uldivmod>
 8007250:	4602      	mov	r2, r0
 8007252:	460b      	mov	r3, r1
 8007254:	4b64      	ldr	r3, [pc, #400]	; (80073e8 <UART_SetConfig+0x998>)
 8007256:	fba3 2302 	umull	r2, r3, r3, r2
 800725a:	095b      	lsrs	r3, r3, #5
 800725c:	011c      	lsls	r4, r3, #4
 800725e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007262:	2200      	movs	r2, #0
 8007264:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007268:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 800726c:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 8007270:	4642      	mov	r2, r8
 8007272:	464b      	mov	r3, r9
 8007274:	1891      	adds	r1, r2, r2
 8007276:	61b9      	str	r1, [r7, #24]
 8007278:	415b      	adcs	r3, r3
 800727a:	61fb      	str	r3, [r7, #28]
 800727c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007280:	4641      	mov	r1, r8
 8007282:	1851      	adds	r1, r2, r1
 8007284:	6139      	str	r1, [r7, #16]
 8007286:	4649      	mov	r1, r9
 8007288:	414b      	adcs	r3, r1
 800728a:	617b      	str	r3, [r7, #20]
 800728c:	f04f 0200 	mov.w	r2, #0
 8007290:	f04f 0300 	mov.w	r3, #0
 8007294:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007298:	4659      	mov	r1, fp
 800729a:	00cb      	lsls	r3, r1, #3
 800729c:	4651      	mov	r1, sl
 800729e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80072a2:	4651      	mov	r1, sl
 80072a4:	00ca      	lsls	r2, r1, #3
 80072a6:	4610      	mov	r0, r2
 80072a8:	4619      	mov	r1, r3
 80072aa:	4603      	mov	r3, r0
 80072ac:	4642      	mov	r2, r8
 80072ae:	189b      	adds	r3, r3, r2
 80072b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80072b4:	464b      	mov	r3, r9
 80072b6:	460a      	mov	r2, r1
 80072b8:	eb42 0303 	adc.w	r3, r2, r3
 80072bc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80072c0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80072c4:	685b      	ldr	r3, [r3, #4]
 80072c6:	2200      	movs	r2, #0
 80072c8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80072cc:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80072d0:	f04f 0200 	mov.w	r2, #0
 80072d4:	f04f 0300 	mov.w	r3, #0
 80072d8:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 80072dc:	4649      	mov	r1, r9
 80072de:	008b      	lsls	r3, r1, #2
 80072e0:	4641      	mov	r1, r8
 80072e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80072e6:	4641      	mov	r1, r8
 80072e8:	008a      	lsls	r2, r1, #2
 80072ea:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 80072ee:	f7f9 fb9b 	bl	8000a28 <__aeabi_uldivmod>
 80072f2:	4602      	mov	r2, r0
 80072f4:	460b      	mov	r3, r1
 80072f6:	4b3c      	ldr	r3, [pc, #240]	; (80073e8 <UART_SetConfig+0x998>)
 80072f8:	fba3 1302 	umull	r1, r3, r3, r2
 80072fc:	095b      	lsrs	r3, r3, #5
 80072fe:	2164      	movs	r1, #100	; 0x64
 8007300:	fb01 f303 	mul.w	r3, r1, r3
 8007304:	1ad3      	subs	r3, r2, r3
 8007306:	011b      	lsls	r3, r3, #4
 8007308:	3332      	adds	r3, #50	; 0x32
 800730a:	4a37      	ldr	r2, [pc, #220]	; (80073e8 <UART_SetConfig+0x998>)
 800730c:	fba2 2303 	umull	r2, r3, r2, r3
 8007310:	095b      	lsrs	r3, r3, #5
 8007312:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007316:	441c      	add	r4, r3
 8007318:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800731c:	2200      	movs	r2, #0
 800731e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007322:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007326:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 800732a:	4642      	mov	r2, r8
 800732c:	464b      	mov	r3, r9
 800732e:	1891      	adds	r1, r2, r2
 8007330:	60b9      	str	r1, [r7, #8]
 8007332:	415b      	adcs	r3, r3
 8007334:	60fb      	str	r3, [r7, #12]
 8007336:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800733a:	4641      	mov	r1, r8
 800733c:	1851      	adds	r1, r2, r1
 800733e:	6039      	str	r1, [r7, #0]
 8007340:	4649      	mov	r1, r9
 8007342:	414b      	adcs	r3, r1
 8007344:	607b      	str	r3, [r7, #4]
 8007346:	f04f 0200 	mov.w	r2, #0
 800734a:	f04f 0300 	mov.w	r3, #0
 800734e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007352:	4659      	mov	r1, fp
 8007354:	00cb      	lsls	r3, r1, #3
 8007356:	4651      	mov	r1, sl
 8007358:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800735c:	4651      	mov	r1, sl
 800735e:	00ca      	lsls	r2, r1, #3
 8007360:	4610      	mov	r0, r2
 8007362:	4619      	mov	r1, r3
 8007364:	4603      	mov	r3, r0
 8007366:	4642      	mov	r2, r8
 8007368:	189b      	adds	r3, r3, r2
 800736a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800736e:	464b      	mov	r3, r9
 8007370:	460a      	mov	r2, r1
 8007372:	eb42 0303 	adc.w	r3, r2, r3
 8007376:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800737a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	2200      	movs	r2, #0
 8007382:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007386:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800738a:	f04f 0200 	mov.w	r2, #0
 800738e:	f04f 0300 	mov.w	r3, #0
 8007392:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8007396:	4649      	mov	r1, r9
 8007398:	008b      	lsls	r3, r1, #2
 800739a:	4641      	mov	r1, r8
 800739c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80073a0:	4641      	mov	r1, r8
 80073a2:	008a      	lsls	r2, r1, #2
 80073a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80073a8:	f7f9 fb3e 	bl	8000a28 <__aeabi_uldivmod>
 80073ac:	4602      	mov	r2, r0
 80073ae:	460b      	mov	r3, r1
 80073b0:	4b0d      	ldr	r3, [pc, #52]	; (80073e8 <UART_SetConfig+0x998>)
 80073b2:	fba3 1302 	umull	r1, r3, r3, r2
 80073b6:	095b      	lsrs	r3, r3, #5
 80073b8:	2164      	movs	r1, #100	; 0x64
 80073ba:	fb01 f303 	mul.w	r3, r1, r3
 80073be:	1ad3      	subs	r3, r2, r3
 80073c0:	011b      	lsls	r3, r3, #4
 80073c2:	3332      	adds	r3, #50	; 0x32
 80073c4:	4a08      	ldr	r2, [pc, #32]	; (80073e8 <UART_SetConfig+0x998>)
 80073c6:	fba2 2303 	umull	r2, r3, r2, r3
 80073ca:	095b      	lsrs	r3, r3, #5
 80073cc:	f003 020f 	and.w	r2, r3, #15
 80073d0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4422      	add	r2, r4
 80073d8:	609a      	str	r2, [r3, #8]
}
 80073da:	e7ff      	b.n	80073dc <UART_SetConfig+0x98c>
 80073dc:	bf00      	nop
 80073de:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80073e2:	46bd      	mov	sp, r7
 80073e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80073e8:	51eb851f 	.word	0x51eb851f

080073ec <__libc_init_array>:
 80073ec:	b570      	push	{r4, r5, r6, lr}
 80073ee:	4d0d      	ldr	r5, [pc, #52]	; (8007424 <__libc_init_array+0x38>)
 80073f0:	4c0d      	ldr	r4, [pc, #52]	; (8007428 <__libc_init_array+0x3c>)
 80073f2:	1b64      	subs	r4, r4, r5
 80073f4:	10a4      	asrs	r4, r4, #2
 80073f6:	2600      	movs	r6, #0
 80073f8:	42a6      	cmp	r6, r4
 80073fa:	d109      	bne.n	8007410 <__libc_init_array+0x24>
 80073fc:	4d0b      	ldr	r5, [pc, #44]	; (800742c <__libc_init_array+0x40>)
 80073fe:	4c0c      	ldr	r4, [pc, #48]	; (8007430 <__libc_init_array+0x44>)
 8007400:	f000 f820 	bl	8007444 <_init>
 8007404:	1b64      	subs	r4, r4, r5
 8007406:	10a4      	asrs	r4, r4, #2
 8007408:	2600      	movs	r6, #0
 800740a:	42a6      	cmp	r6, r4
 800740c:	d105      	bne.n	800741a <__libc_init_array+0x2e>
 800740e:	bd70      	pop	{r4, r5, r6, pc}
 8007410:	f855 3b04 	ldr.w	r3, [r5], #4
 8007414:	4798      	blx	r3
 8007416:	3601      	adds	r6, #1
 8007418:	e7ee      	b.n	80073f8 <__libc_init_array+0xc>
 800741a:	f855 3b04 	ldr.w	r3, [r5], #4
 800741e:	4798      	blx	r3
 8007420:	3601      	adds	r6, #1
 8007422:	e7f2      	b.n	800740a <__libc_init_array+0x1e>
 8007424:	0800747c 	.word	0x0800747c
 8007428:	0800747c 	.word	0x0800747c
 800742c:	0800747c 	.word	0x0800747c
 8007430:	08007480 	.word	0x08007480

08007434 <memset>:
 8007434:	4402      	add	r2, r0
 8007436:	4603      	mov	r3, r0
 8007438:	4293      	cmp	r3, r2
 800743a:	d100      	bne.n	800743e <memset+0xa>
 800743c:	4770      	bx	lr
 800743e:	f803 1b01 	strb.w	r1, [r3], #1
 8007442:	e7f9      	b.n	8007438 <memset+0x4>

08007444 <_init>:
 8007444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007446:	bf00      	nop
 8007448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800744a:	bc08      	pop	{r3}
 800744c:	469e      	mov	lr, r3
 800744e:	4770      	bx	lr

08007450 <_fini>:
 8007450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007452:	bf00      	nop
 8007454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007456:	bc08      	pop	{r3}
 8007458:	469e      	mov	lr, r3
 800745a:	4770      	bx	lr
