
robot_core_STM32F429IGT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073e8  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08007598  08007598  00017598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075d0  080075d0  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080075d0  080075d0  000175d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080075d8  080075d8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075d8  080075d8  000175d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080075dc  080075dc  000175dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080075e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  20000010  080075f0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000284  080075f0  00020284  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001254c  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000028c3  00000000  00000000  0003258c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001100  00000000  00000000  00034e50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fc0  00000000  00000000  00035f50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003b57  00000000  00000000  00036f10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e96b  00000000  00000000  0003aa67  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dd217  00000000  00000000  000493d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001265e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000480c  00000000  00000000  00126664  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000010 	.word	0x20000010
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007580 	.word	0x08007580

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000014 	.word	0x20000014
 80001ec:	08007580 	.word	0x08007580

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032e:	f1a4 0401 	sub.w	r4, r4, #1
 8000332:	d1e9      	bne.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__aeabi_d2f>:
 800098c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000990:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000994:	bf24      	itt	cs
 8000996:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800099a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800099e:	d90d      	bls.n	80009bc <__aeabi_d2f+0x30>
 80009a0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009a4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009a8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009ac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009b0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009b4:	bf08      	it	eq
 80009b6:	f020 0001 	biceq.w	r0, r0, #1
 80009ba:	4770      	bx	lr
 80009bc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009c0:	d121      	bne.n	8000a06 <__aeabi_d2f+0x7a>
 80009c2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009c6:	bfbc      	itt	lt
 80009c8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009cc:	4770      	bxlt	lr
 80009ce:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009d2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009d6:	f1c2 0218 	rsb	r2, r2, #24
 80009da:	f1c2 0c20 	rsb	ip, r2, #32
 80009de:	fa10 f30c 	lsls.w	r3, r0, ip
 80009e2:	fa20 f002 	lsr.w	r0, r0, r2
 80009e6:	bf18      	it	ne
 80009e8:	f040 0001 	orrne.w	r0, r0, #1
 80009ec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009f0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009f4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009f8:	ea40 000c 	orr.w	r0, r0, ip
 80009fc:	fa23 f302 	lsr.w	r3, r3, r2
 8000a00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a04:	e7cc      	b.n	80009a0 <__aeabi_d2f+0x14>
 8000a06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a0a:	d107      	bne.n	8000a1c <__aeabi_d2f+0x90>
 8000a0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a10:	bf1e      	ittt	ne
 8000a12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a1a:	4770      	bxne	lr
 8000a1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop

08000a2c <__aeabi_uldivmod>:
 8000a2c:	b953      	cbnz	r3, 8000a44 <__aeabi_uldivmod+0x18>
 8000a2e:	b94a      	cbnz	r2, 8000a44 <__aeabi_uldivmod+0x18>
 8000a30:	2900      	cmp	r1, #0
 8000a32:	bf08      	it	eq
 8000a34:	2800      	cmpeq	r0, #0
 8000a36:	bf1c      	itt	ne
 8000a38:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a3c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a40:	f000 b972 	b.w	8000d28 <__aeabi_idiv0>
 8000a44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a4c:	f000 f806 	bl	8000a5c <__udivmoddi4>
 8000a50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a58:	b004      	add	sp, #16
 8000a5a:	4770      	bx	lr

08000a5c <__udivmoddi4>:
 8000a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a60:	9e08      	ldr	r6, [sp, #32]
 8000a62:	4604      	mov	r4, r0
 8000a64:	4688      	mov	r8, r1
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d14b      	bne.n	8000b02 <__udivmoddi4+0xa6>
 8000a6a:	428a      	cmp	r2, r1
 8000a6c:	4615      	mov	r5, r2
 8000a6e:	d967      	bls.n	8000b40 <__udivmoddi4+0xe4>
 8000a70:	fab2 f282 	clz	r2, r2
 8000a74:	b14a      	cbz	r2, 8000a8a <__udivmoddi4+0x2e>
 8000a76:	f1c2 0720 	rsb	r7, r2, #32
 8000a7a:	fa01 f302 	lsl.w	r3, r1, r2
 8000a7e:	fa20 f707 	lsr.w	r7, r0, r7
 8000a82:	4095      	lsls	r5, r2
 8000a84:	ea47 0803 	orr.w	r8, r7, r3
 8000a88:	4094      	lsls	r4, r2
 8000a8a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a8e:	0c23      	lsrs	r3, r4, #16
 8000a90:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a94:	fa1f fc85 	uxth.w	ip, r5
 8000a98:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a9c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000aa0:	fb07 f10c 	mul.w	r1, r7, ip
 8000aa4:	4299      	cmp	r1, r3
 8000aa6:	d909      	bls.n	8000abc <__udivmoddi4+0x60>
 8000aa8:	18eb      	adds	r3, r5, r3
 8000aaa:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000aae:	f080 811b 	bcs.w	8000ce8 <__udivmoddi4+0x28c>
 8000ab2:	4299      	cmp	r1, r3
 8000ab4:	f240 8118 	bls.w	8000ce8 <__udivmoddi4+0x28c>
 8000ab8:	3f02      	subs	r7, #2
 8000aba:	442b      	add	r3, r5
 8000abc:	1a5b      	subs	r3, r3, r1
 8000abe:	b2a4      	uxth	r4, r4
 8000ac0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ac4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ac8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000acc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ad0:	45a4      	cmp	ip, r4
 8000ad2:	d909      	bls.n	8000ae8 <__udivmoddi4+0x8c>
 8000ad4:	192c      	adds	r4, r5, r4
 8000ad6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ada:	f080 8107 	bcs.w	8000cec <__udivmoddi4+0x290>
 8000ade:	45a4      	cmp	ip, r4
 8000ae0:	f240 8104 	bls.w	8000cec <__udivmoddi4+0x290>
 8000ae4:	3802      	subs	r0, #2
 8000ae6:	442c      	add	r4, r5
 8000ae8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000aec:	eba4 040c 	sub.w	r4, r4, ip
 8000af0:	2700      	movs	r7, #0
 8000af2:	b11e      	cbz	r6, 8000afc <__udivmoddi4+0xa0>
 8000af4:	40d4      	lsrs	r4, r2
 8000af6:	2300      	movs	r3, #0
 8000af8:	e9c6 4300 	strd	r4, r3, [r6]
 8000afc:	4639      	mov	r1, r7
 8000afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b02:	428b      	cmp	r3, r1
 8000b04:	d909      	bls.n	8000b1a <__udivmoddi4+0xbe>
 8000b06:	2e00      	cmp	r6, #0
 8000b08:	f000 80eb 	beq.w	8000ce2 <__udivmoddi4+0x286>
 8000b0c:	2700      	movs	r7, #0
 8000b0e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b12:	4638      	mov	r0, r7
 8000b14:	4639      	mov	r1, r7
 8000b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b1a:	fab3 f783 	clz	r7, r3
 8000b1e:	2f00      	cmp	r7, #0
 8000b20:	d147      	bne.n	8000bb2 <__udivmoddi4+0x156>
 8000b22:	428b      	cmp	r3, r1
 8000b24:	d302      	bcc.n	8000b2c <__udivmoddi4+0xd0>
 8000b26:	4282      	cmp	r2, r0
 8000b28:	f200 80fa 	bhi.w	8000d20 <__udivmoddi4+0x2c4>
 8000b2c:	1a84      	subs	r4, r0, r2
 8000b2e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b32:	2001      	movs	r0, #1
 8000b34:	4698      	mov	r8, r3
 8000b36:	2e00      	cmp	r6, #0
 8000b38:	d0e0      	beq.n	8000afc <__udivmoddi4+0xa0>
 8000b3a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b3e:	e7dd      	b.n	8000afc <__udivmoddi4+0xa0>
 8000b40:	b902      	cbnz	r2, 8000b44 <__udivmoddi4+0xe8>
 8000b42:	deff      	udf	#255	; 0xff
 8000b44:	fab2 f282 	clz	r2, r2
 8000b48:	2a00      	cmp	r2, #0
 8000b4a:	f040 808f 	bne.w	8000c6c <__udivmoddi4+0x210>
 8000b4e:	1b49      	subs	r1, r1, r5
 8000b50:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b54:	fa1f f885 	uxth.w	r8, r5
 8000b58:	2701      	movs	r7, #1
 8000b5a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b5e:	0c23      	lsrs	r3, r4, #16
 8000b60:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b68:	fb08 f10c 	mul.w	r1, r8, ip
 8000b6c:	4299      	cmp	r1, r3
 8000b6e:	d907      	bls.n	8000b80 <__udivmoddi4+0x124>
 8000b70:	18eb      	adds	r3, r5, r3
 8000b72:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000b76:	d202      	bcs.n	8000b7e <__udivmoddi4+0x122>
 8000b78:	4299      	cmp	r1, r3
 8000b7a:	f200 80cd 	bhi.w	8000d18 <__udivmoddi4+0x2bc>
 8000b7e:	4684      	mov	ip, r0
 8000b80:	1a59      	subs	r1, r3, r1
 8000b82:	b2a3      	uxth	r3, r4
 8000b84:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b88:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b8c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b90:	fb08 f800 	mul.w	r8, r8, r0
 8000b94:	45a0      	cmp	r8, r4
 8000b96:	d907      	bls.n	8000ba8 <__udivmoddi4+0x14c>
 8000b98:	192c      	adds	r4, r5, r4
 8000b9a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0x14a>
 8000ba0:	45a0      	cmp	r8, r4
 8000ba2:	f200 80b6 	bhi.w	8000d12 <__udivmoddi4+0x2b6>
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	eba4 0408 	sub.w	r4, r4, r8
 8000bac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bb0:	e79f      	b.n	8000af2 <__udivmoddi4+0x96>
 8000bb2:	f1c7 0c20 	rsb	ip, r7, #32
 8000bb6:	40bb      	lsls	r3, r7
 8000bb8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000bbc:	ea4e 0e03 	orr.w	lr, lr, r3
 8000bc0:	fa01 f407 	lsl.w	r4, r1, r7
 8000bc4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000bc8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000bcc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000bd0:	4325      	orrs	r5, r4
 8000bd2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000bd6:	0c2c      	lsrs	r4, r5, #16
 8000bd8:	fb08 3319 	mls	r3, r8, r9, r3
 8000bdc:	fa1f fa8e 	uxth.w	sl, lr
 8000be0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000be4:	fb09 f40a 	mul.w	r4, r9, sl
 8000be8:	429c      	cmp	r4, r3
 8000bea:	fa02 f207 	lsl.w	r2, r2, r7
 8000bee:	fa00 f107 	lsl.w	r1, r0, r7
 8000bf2:	d90b      	bls.n	8000c0c <__udivmoddi4+0x1b0>
 8000bf4:	eb1e 0303 	adds.w	r3, lr, r3
 8000bf8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000bfc:	f080 8087 	bcs.w	8000d0e <__udivmoddi4+0x2b2>
 8000c00:	429c      	cmp	r4, r3
 8000c02:	f240 8084 	bls.w	8000d0e <__udivmoddi4+0x2b2>
 8000c06:	f1a9 0902 	sub.w	r9, r9, #2
 8000c0a:	4473      	add	r3, lr
 8000c0c:	1b1b      	subs	r3, r3, r4
 8000c0e:	b2ad      	uxth	r5, r5
 8000c10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c14:	fb08 3310 	mls	r3, r8, r0, r3
 8000c18:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c1c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c20:	45a2      	cmp	sl, r4
 8000c22:	d908      	bls.n	8000c36 <__udivmoddi4+0x1da>
 8000c24:	eb1e 0404 	adds.w	r4, lr, r4
 8000c28:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c2c:	d26b      	bcs.n	8000d06 <__udivmoddi4+0x2aa>
 8000c2e:	45a2      	cmp	sl, r4
 8000c30:	d969      	bls.n	8000d06 <__udivmoddi4+0x2aa>
 8000c32:	3802      	subs	r0, #2
 8000c34:	4474      	add	r4, lr
 8000c36:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c3e:	eba4 040a 	sub.w	r4, r4, sl
 8000c42:	454c      	cmp	r4, r9
 8000c44:	46c2      	mov	sl, r8
 8000c46:	464b      	mov	r3, r9
 8000c48:	d354      	bcc.n	8000cf4 <__udivmoddi4+0x298>
 8000c4a:	d051      	beq.n	8000cf0 <__udivmoddi4+0x294>
 8000c4c:	2e00      	cmp	r6, #0
 8000c4e:	d069      	beq.n	8000d24 <__udivmoddi4+0x2c8>
 8000c50:	ebb1 050a 	subs.w	r5, r1, sl
 8000c54:	eb64 0403 	sbc.w	r4, r4, r3
 8000c58:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c5c:	40fd      	lsrs	r5, r7
 8000c5e:	40fc      	lsrs	r4, r7
 8000c60:	ea4c 0505 	orr.w	r5, ip, r5
 8000c64:	e9c6 5400 	strd	r5, r4, [r6]
 8000c68:	2700      	movs	r7, #0
 8000c6a:	e747      	b.n	8000afc <__udivmoddi4+0xa0>
 8000c6c:	f1c2 0320 	rsb	r3, r2, #32
 8000c70:	fa20 f703 	lsr.w	r7, r0, r3
 8000c74:	4095      	lsls	r5, r2
 8000c76:	fa01 f002 	lsl.w	r0, r1, r2
 8000c7a:	fa21 f303 	lsr.w	r3, r1, r3
 8000c7e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c82:	4338      	orrs	r0, r7
 8000c84:	0c01      	lsrs	r1, r0, #16
 8000c86:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c8a:	fa1f f885 	uxth.w	r8, r5
 8000c8e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c92:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c96:	fb07 f308 	mul.w	r3, r7, r8
 8000c9a:	428b      	cmp	r3, r1
 8000c9c:	fa04 f402 	lsl.w	r4, r4, r2
 8000ca0:	d907      	bls.n	8000cb2 <__udivmoddi4+0x256>
 8000ca2:	1869      	adds	r1, r5, r1
 8000ca4:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000ca8:	d22f      	bcs.n	8000d0a <__udivmoddi4+0x2ae>
 8000caa:	428b      	cmp	r3, r1
 8000cac:	d92d      	bls.n	8000d0a <__udivmoddi4+0x2ae>
 8000cae:	3f02      	subs	r7, #2
 8000cb0:	4429      	add	r1, r5
 8000cb2:	1acb      	subs	r3, r1, r3
 8000cb4:	b281      	uxth	r1, r0
 8000cb6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cba:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cbe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc2:	fb00 f308 	mul.w	r3, r0, r8
 8000cc6:	428b      	cmp	r3, r1
 8000cc8:	d907      	bls.n	8000cda <__udivmoddi4+0x27e>
 8000cca:	1869      	adds	r1, r5, r1
 8000ccc:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000cd0:	d217      	bcs.n	8000d02 <__udivmoddi4+0x2a6>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d915      	bls.n	8000d02 <__udivmoddi4+0x2a6>
 8000cd6:	3802      	subs	r0, #2
 8000cd8:	4429      	add	r1, r5
 8000cda:	1ac9      	subs	r1, r1, r3
 8000cdc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000ce0:	e73b      	b.n	8000b5a <__udivmoddi4+0xfe>
 8000ce2:	4637      	mov	r7, r6
 8000ce4:	4630      	mov	r0, r6
 8000ce6:	e709      	b.n	8000afc <__udivmoddi4+0xa0>
 8000ce8:	4607      	mov	r7, r0
 8000cea:	e6e7      	b.n	8000abc <__udivmoddi4+0x60>
 8000cec:	4618      	mov	r0, r3
 8000cee:	e6fb      	b.n	8000ae8 <__udivmoddi4+0x8c>
 8000cf0:	4541      	cmp	r1, r8
 8000cf2:	d2ab      	bcs.n	8000c4c <__udivmoddi4+0x1f0>
 8000cf4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000cf8:	eb69 020e 	sbc.w	r2, r9, lr
 8000cfc:	3801      	subs	r0, #1
 8000cfe:	4613      	mov	r3, r2
 8000d00:	e7a4      	b.n	8000c4c <__udivmoddi4+0x1f0>
 8000d02:	4660      	mov	r0, ip
 8000d04:	e7e9      	b.n	8000cda <__udivmoddi4+0x27e>
 8000d06:	4618      	mov	r0, r3
 8000d08:	e795      	b.n	8000c36 <__udivmoddi4+0x1da>
 8000d0a:	4667      	mov	r7, ip
 8000d0c:	e7d1      	b.n	8000cb2 <__udivmoddi4+0x256>
 8000d0e:	4681      	mov	r9, r0
 8000d10:	e77c      	b.n	8000c0c <__udivmoddi4+0x1b0>
 8000d12:	3802      	subs	r0, #2
 8000d14:	442c      	add	r4, r5
 8000d16:	e747      	b.n	8000ba8 <__udivmoddi4+0x14c>
 8000d18:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d1c:	442b      	add	r3, r5
 8000d1e:	e72f      	b.n	8000b80 <__udivmoddi4+0x124>
 8000d20:	4638      	mov	r0, r7
 8000d22:	e708      	b.n	8000b36 <__udivmoddi4+0xda>
 8000d24:	4637      	mov	r7, r6
 8000d26:	e6e9      	b.n	8000afc <__udivmoddi4+0xa0>

08000d28 <__aeabi_idiv0>:
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop

08000d2c <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8000d32:	463b      	mov	r3, r7
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000d3a:	4b14      	ldr	r3, [pc, #80]	; (8000d8c <MX_DAC_Init+0x60>)
 8000d3c:	4a14      	ldr	r2, [pc, #80]	; (8000d90 <MX_DAC_Init+0x64>)
 8000d3e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000d40:	4812      	ldr	r0, [pc, #72]	; (8000d8c <MX_DAC_Init+0x60>)
 8000d42:	f002 fa00 	bl	8003146 <HAL_DAC_Init>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000d4c:	f001 f9ee 	bl	800212c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000d50:	2300      	movs	r3, #0
 8000d52:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000d54:	2300      	movs	r3, #0
 8000d56:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000d58:	463b      	mov	r3, r7
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	480b      	ldr	r0, [pc, #44]	; (8000d8c <MX_DAC_Init+0x60>)
 8000d60:	f002 fa13 	bl	800318a <HAL_DAC_ConfigChannel>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000d6a:	f001 f9df 	bl	800212c <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000d6e:	463b      	mov	r3, r7
 8000d70:	2210      	movs	r2, #16
 8000d72:	4619      	mov	r1, r3
 8000d74:	4805      	ldr	r0, [pc, #20]	; (8000d8c <MX_DAC_Init+0x60>)
 8000d76:	f002 fa08 	bl	800318a <HAL_DAC_ConfigChannel>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8000d80:	f001 f9d4 	bl	800212c <Error_Handler>
  }

}
 8000d84:	bf00      	nop
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	20000054 	.word	0x20000054
 8000d90:	40007400 	.word	0x40007400

08000d94 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b08a      	sub	sp, #40	; 0x28
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9c:	f107 0314 	add.w	r3, r7, #20
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	60da      	str	r2, [r3, #12]
 8000daa:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a17      	ldr	r2, [pc, #92]	; (8000e10 <HAL_DAC_MspInit+0x7c>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d127      	bne.n	8000e06 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	613b      	str	r3, [r7, #16]
 8000dba:	4b16      	ldr	r3, [pc, #88]	; (8000e14 <HAL_DAC_MspInit+0x80>)
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbe:	4a15      	ldr	r2, [pc, #84]	; (8000e14 <HAL_DAC_MspInit+0x80>)
 8000dc0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc6:	4b13      	ldr	r3, [pc, #76]	; (8000e14 <HAL_DAC_MspInit+0x80>)
 8000dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000dce:	613b      	str	r3, [r7, #16]
 8000dd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60fb      	str	r3, [r7, #12]
 8000dd6:	4b0f      	ldr	r3, [pc, #60]	; (8000e14 <HAL_DAC_MspInit+0x80>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	4a0e      	ldr	r2, [pc, #56]	; (8000e14 <HAL_DAC_MspInit+0x80>)
 8000ddc:	f043 0301 	orr.w	r3, r3, #1
 8000de0:	6313      	str	r3, [r2, #48]	; 0x30
 8000de2:	4b0c      	ldr	r3, [pc, #48]	; (8000e14 <HAL_DAC_MspInit+0x80>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	f003 0301 	and.w	r3, r3, #1
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000dee:	2330      	movs	r3, #48	; 0x30
 8000df0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000df2:	2303      	movs	r3, #3
 8000df4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfa:	f107 0314 	add.w	r3, r7, #20
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4805      	ldr	r0, [pc, #20]	; (8000e18 <HAL_DAC_MspInit+0x84>)
 8000e02:	f002 fa31 	bl	8003268 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8000e06:	bf00      	nop
 8000e08:	3728      	adds	r7, #40	; 0x28
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40007400 	.word	0x40007400
 8000e14:	40023800 	.word	0x40023800
 8000e18:	40020000 	.word	0x40020000

08000e1c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b08c      	sub	sp, #48	; 0x30
 8000e20:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e22:	f107 031c 	add.w	r3, r7, #28
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	605a      	str	r2, [r3, #4]
 8000e2c:	609a      	str	r2, [r3, #8]
 8000e2e:	60da      	str	r2, [r3, #12]
 8000e30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	61bb      	str	r3, [r7, #24]
 8000e36:	4b45      	ldr	r3, [pc, #276]	; (8000f4c <MX_GPIO_Init+0x130>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	4a44      	ldr	r2, [pc, #272]	; (8000f4c <MX_GPIO_Init+0x130>)
 8000e3c:	f043 0320 	orr.w	r3, r3, #32
 8000e40:	6313      	str	r3, [r2, #48]	; 0x30
 8000e42:	4b42      	ldr	r3, [pc, #264]	; (8000f4c <MX_GPIO_Init+0x130>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	f003 0320 	and.w	r3, r3, #32
 8000e4a:	61bb      	str	r3, [r7, #24]
 8000e4c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	617b      	str	r3, [r7, #20]
 8000e52:	4b3e      	ldr	r3, [pc, #248]	; (8000f4c <MX_GPIO_Init+0x130>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	4a3d      	ldr	r2, [pc, #244]	; (8000f4c <MX_GPIO_Init+0x130>)
 8000e58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5e:	4b3b      	ldr	r3, [pc, #236]	; (8000f4c <MX_GPIO_Init+0x130>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e66:	617b      	str	r3, [r7, #20]
 8000e68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	613b      	str	r3, [r7, #16]
 8000e6e:	4b37      	ldr	r3, [pc, #220]	; (8000f4c <MX_GPIO_Init+0x130>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	4a36      	ldr	r2, [pc, #216]	; (8000f4c <MX_GPIO_Init+0x130>)
 8000e74:	f043 0301 	orr.w	r3, r3, #1
 8000e78:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7a:	4b34      	ldr	r3, [pc, #208]	; (8000f4c <MX_GPIO_Init+0x130>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	f003 0301 	and.w	r3, r3, #1
 8000e82:	613b      	str	r3, [r7, #16]
 8000e84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	60fb      	str	r3, [r7, #12]
 8000e8a:	4b30      	ldr	r3, [pc, #192]	; (8000f4c <MX_GPIO_Init+0x130>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	4a2f      	ldr	r2, [pc, #188]	; (8000f4c <MX_GPIO_Init+0x130>)
 8000e90:	f043 0308 	orr.w	r3, r3, #8
 8000e94:	6313      	str	r3, [r2, #48]	; 0x30
 8000e96:	4b2d      	ldr	r3, [pc, #180]	; (8000f4c <MX_GPIO_Init+0x130>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	f003 0308 	and.w	r3, r3, #8
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60bb      	str	r3, [r7, #8]
 8000ea6:	4b29      	ldr	r3, [pc, #164]	; (8000f4c <MX_GPIO_Init+0x130>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	4a28      	ldr	r2, [pc, #160]	; (8000f4c <MX_GPIO_Init+0x130>)
 8000eac:	f043 0304 	orr.w	r3, r3, #4
 8000eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb2:	4b26      	ldr	r3, [pc, #152]	; (8000f4c <MX_GPIO_Init+0x130>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	f003 0304 	and.w	r3, r3, #4
 8000eba:	60bb      	str	r3, [r7, #8]
 8000ebc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	607b      	str	r3, [r7, #4]
 8000ec2:	4b22      	ldr	r3, [pc, #136]	; (8000f4c <MX_GPIO_Init+0x130>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	4a21      	ldr	r2, [pc, #132]	; (8000f4c <MX_GPIO_Init+0x130>)
 8000ec8:	f043 0302 	orr.w	r3, r3, #2
 8000ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ece:	4b1f      	ldr	r3, [pc, #124]	; (8000f4c <MX_GPIO_Init+0x130>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	f003 0302 	and.w	r3, r3, #2
 8000ed6:	607b      	str	r3, [r7, #4]
 8000ed8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_in4_Pin|OUT_in3_Pin|OUT_in2_Pin, GPIO_PIN_RESET);
 8000eda:	2200      	movs	r2, #0
 8000edc:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8000ee0:	481b      	ldr	r0, [pc, #108]	; (8000f50 <MX_GPIO_Init+0x134>)
 8000ee2:	f002 fb83 	bl	80035ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, GPIO_PIN_RESET);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2101      	movs	r1, #1
 8000eea:	481a      	ldr	r0, [pc, #104]	; (8000f54 <MX_GPIO_Init+0x138>)
 8000eec:	f002 fb7e 	bl	80035ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = OUT_in4_Pin|OUT_in3_Pin|OUT_in2_Pin;
 8000ef0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000ef4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efe:	2300      	movs	r3, #0
 8000f00:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f02:	f107 031c 	add.w	r3, r7, #28
 8000f06:	4619      	mov	r1, r3
 8000f08:	4811      	ldr	r0, [pc, #68]	; (8000f50 <MX_GPIO_Init+0x134>)
 8000f0a:	f002 f9ad 	bl	8003268 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OUT_in1_Pin;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f12:	2301      	movs	r3, #1
 8000f14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OUT_in1_GPIO_Port, &GPIO_InitStruct);
 8000f1e:	f107 031c 	add.w	r3, r7, #28
 8000f22:	4619      	mov	r1, r3
 8000f24:	480b      	ldr	r0, [pc, #44]	; (8000f54 <MX_GPIO_Init+0x138>)
 8000f26:	f002 f99f 	bl	8003268 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = IN_sensorL_Pin|IN_sensorR_Pin;
 8000f2a:	230a      	movs	r3, #10
 8000f2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f32:	2301      	movs	r3, #1
 8000f34:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f36:	f107 031c 	add.w	r3, r7, #28
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4805      	ldr	r0, [pc, #20]	; (8000f54 <MX_GPIO_Init+0x138>)
 8000f3e:	f002 f993 	bl	8003268 <HAL_GPIO_Init>

}
 8000f42:	bf00      	nop
 8000f44:	3730      	adds	r7, #48	; 0x30
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40023800 	.word	0x40023800
 8000f50:	40020800 	.word	0x40020800
 8000f54:	40020c00 	.word	0x40020c00

08000f58 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000f5c:	4b1b      	ldr	r3, [pc, #108]	; (8000fcc <MX_I2C1_Init+0x74>)
 8000f5e:	4a1c      	ldr	r2, [pc, #112]	; (8000fd0 <MX_I2C1_Init+0x78>)
 8000f60:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000f62:	4b1a      	ldr	r3, [pc, #104]	; (8000fcc <MX_I2C1_Init+0x74>)
 8000f64:	4a1b      	ldr	r2, [pc, #108]	; (8000fd4 <MX_I2C1_Init+0x7c>)
 8000f66:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f68:	4b18      	ldr	r3, [pc, #96]	; (8000fcc <MX_I2C1_Init+0x74>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f6e:	4b17      	ldr	r3, [pc, #92]	; (8000fcc <MX_I2C1_Init+0x74>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f74:	4b15      	ldr	r3, [pc, #84]	; (8000fcc <MX_I2C1_Init+0x74>)
 8000f76:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f7a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f7c:	4b13      	ldr	r3, [pc, #76]	; (8000fcc <MX_I2C1_Init+0x74>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f82:	4b12      	ldr	r3, [pc, #72]	; (8000fcc <MX_I2C1_Init+0x74>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f88:	4b10      	ldr	r3, [pc, #64]	; (8000fcc <MX_I2C1_Init+0x74>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f8e:	4b0f      	ldr	r3, [pc, #60]	; (8000fcc <MX_I2C1_Init+0x74>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f94:	480d      	ldr	r0, [pc, #52]	; (8000fcc <MX_I2C1_Init+0x74>)
 8000f96:	f002 fb43 	bl	8003620 <HAL_I2C_Init>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000fa0:	f001 f8c4 	bl	800212c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	4809      	ldr	r0, [pc, #36]	; (8000fcc <MX_I2C1_Init+0x74>)
 8000fa8:	f003 faed 	bl	8004586 <HAL_I2CEx_ConfigAnalogFilter>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000fb2:	f001 f8bb 	bl	800212c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	4804      	ldr	r0, [pc, #16]	; (8000fcc <MX_I2C1_Init+0x74>)
 8000fba:	f003 fb20 	bl	80045fe <HAL_I2CEx_ConfigDigitalFilter>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000fc4:	f001 f8b2 	bl	800212c <Error_Handler>
  }

}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	20000068 	.word	0x20000068
 8000fd0:	40005400 	.word	0x40005400
 8000fd4:	00061a80 	.word	0x00061a80

08000fd8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b08a      	sub	sp, #40	; 0x28
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe0:	f107 0314 	add.w	r3, r7, #20
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
 8000fee:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a19      	ldr	r2, [pc, #100]	; (800105c <HAL_I2C_MspInit+0x84>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d12b      	bne.n	8001052 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	613b      	str	r3, [r7, #16]
 8000ffe:	4b18      	ldr	r3, [pc, #96]	; (8001060 <HAL_I2C_MspInit+0x88>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	4a17      	ldr	r2, [pc, #92]	; (8001060 <HAL_I2C_MspInit+0x88>)
 8001004:	f043 0302 	orr.w	r3, r3, #2
 8001008:	6313      	str	r3, [r2, #48]	; 0x30
 800100a:	4b15      	ldr	r3, [pc, #84]	; (8001060 <HAL_I2C_MspInit+0x88>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	f003 0302 	and.w	r3, r3, #2
 8001012:	613b      	str	r3, [r7, #16]
 8001014:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001016:	23c0      	movs	r3, #192	; 0xc0
 8001018:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800101a:	2312      	movs	r3, #18
 800101c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800101e:	2301      	movs	r3, #1
 8001020:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001022:	2303      	movs	r3, #3
 8001024:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001026:	2304      	movs	r3, #4
 8001028:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800102a:	f107 0314 	add.w	r3, r7, #20
 800102e:	4619      	mov	r1, r3
 8001030:	480c      	ldr	r0, [pc, #48]	; (8001064 <HAL_I2C_MspInit+0x8c>)
 8001032:	f002 f919 	bl	8003268 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	60fb      	str	r3, [r7, #12]
 800103a:	4b09      	ldr	r3, [pc, #36]	; (8001060 <HAL_I2C_MspInit+0x88>)
 800103c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103e:	4a08      	ldr	r2, [pc, #32]	; (8001060 <HAL_I2C_MspInit+0x88>)
 8001040:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001044:	6413      	str	r3, [r2, #64]	; 0x40
 8001046:	4b06      	ldr	r3, [pc, #24]	; (8001060 <HAL_I2C_MspInit+0x88>)
 8001048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001052:	bf00      	nop
 8001054:	3728      	adds	r7, #40	; 0x28
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40005400 	.word	0x40005400
 8001060:	40023800 	.word	0x40023800
 8001064:	40020400 	.word	0x40020400

08001068 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800106c:	f001 fec6 	bl	8002dfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001070:	f000 f8da 	bl	8001228 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001074:	f7ff fed2 	bl	8000e1c <MX_GPIO_Init>
  MX_DAC_Init();
 8001078:	f7ff fe58 	bl	8000d2c <MX_DAC_Init>
  MX_TIM2_Init();
 800107c:	f001 fac0 	bl	8002600 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001080:	f001 fb10 	bl	80026a4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001084:	f001 fb62 	bl	800274c <MX_TIM4_Init>
  MX_TIM5_Init();
 8001088:	f001 fbe0 	bl	800284c <MX_TIM5_Init>
  MX_UART7_Init();
 800108c:	f001 fe12 	bl	8002cb4 <MX_UART7_Init>
  MX_TIM7_Init();
 8001090:	f001 fc86 	bl	80029a0 <MX_TIM7_Init>
  MX_I2C1_Init();
 8001094:	f7ff ff60 	bl	8000f58 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim7); //desborda cada 10 ms.
 8001098:	4853      	ldr	r0, [pc, #332]	; (80011e8 <main+0x180>)
 800109a:	f003 fff0 	bl	800507e <HAL_TIM_Base_Start_IT>

  HAL_TIM_Base_Start(&htim2); //encoder R.
 800109e:	4853      	ldr	r0, [pc, #332]	; (80011ec <main+0x184>)
 80010a0:	f003 ffc9 	bl	8005036 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3); //encoder L.
 80010a4:	4852      	ldr	r0, [pc, #328]	; (80011f0 <main+0x188>)
 80010a6:	f003 ffc6 	bl	8005036 <HAL_TIM_Base_Start>

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1); //rueda izquierda.
 80010aa:	2100      	movs	r1, #0
 80010ac:	4851      	ldr	r0, [pc, #324]	; (80011f4 <main+0x18c>)
 80010ae:	f004 f83f 	bl	8005130 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2); //rueda derecha.
 80010b2:	2104      	movs	r1, #4
 80010b4:	484f      	ldr	r0, [pc, #316]	; (80011f4 <main+0x18c>)
 80010b6:	f004 f83b 	bl	8005130 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start(&htim5); //control del SR-04.
 80010ba:	484f      	ldr	r0, [pc, #316]	; (80011f8 <main+0x190>)
 80010bc:	f003 ffbb 	bl	8005036 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1); //para el pulso del trigger.
 80010c0:	2100      	movs	r1, #0
 80010c2:	484d      	ldr	r0, [pc, #308]	; (80011f8 <main+0x190>)
 80010c4:	f004 f834 	bl	8005130 <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_3); //para capturar el eco (flanco ascendente).
 80010c8:	2108      	movs	r1, #8
 80010ca:	484b      	ldr	r0, [pc, #300]	; (80011f8 <main+0x190>)
 80010cc:	f004 f8a4 	bl	8005218 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_4); //para capturar el eco (flanco descendente).
 80010d0:	210c      	movs	r1, #12
 80010d2:	4849      	ldr	r0, [pc, #292]	; (80011f8 <main+0x190>)
 80010d4:	f004 f8a0 	bl	8005218 <HAL_TIM_IC_Start_IT>

  mpu9265_Init(&hi2c1);
 80010d8:	4848      	ldr	r0, [pc, #288]	; (80011fc <main+0x194>)
 80010da:	f001 f82f 	bl	800213c <mpu9265_Init>


  HAL_UART_Receive(&huart7, rxUart, 4, 500);
 80010de:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80010e2:	2204      	movs	r2, #4
 80010e4:	4946      	ldr	r1, [pc, #280]	; (8001200 <main+0x198>)
 80010e6:	4847      	ldr	r0, [pc, #284]	; (8001204 <main+0x19c>)
 80010e8:	f005 f955 	bl	8006396 <HAL_UART_Receive>

  if (rxUart[0] == HOLA){
 80010ec:	4b44      	ldr	r3, [pc, #272]	; (8001200 <main+0x198>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d11d      	bne.n	8001130 <main+0xc8>

	  if (!rxUart[3]){
 80010f4:	4b42      	ldr	r3, [pc, #264]	; (8001200 <main+0x198>)
 80010f6:	78db      	ldrb	r3, [r3, #3]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d10b      	bne.n	8001114 <main+0xac>
		  txUart[0] = CMD_ERROR;
 80010fc:	4b42      	ldr	r3, [pc, #264]	; (8001208 <main+0x1a0>)
 80010fe:	2204      	movs	r2, #4
 8001100:	701a      	strb	r2, [r3, #0]
		  txUart[3] = '\0';
 8001102:	4b41      	ldr	r3, [pc, #260]	; (8001208 <main+0x1a0>)
 8001104:	2200      	movs	r2, #0
 8001106:	70da      	strb	r2, [r3, #3]
		  HAL_UART_Transmit_IT(&huart7, txUart, 4);
 8001108:	2204      	movs	r2, #4
 800110a:	493f      	ldr	r1, [pc, #252]	; (8001208 <main+0x1a0>)
 800110c:	483d      	ldr	r0, [pc, #244]	; (8001204 <main+0x19c>)
 800110e:	f005 f9e8 	bl	80064e2 <HAL_UART_Transmit_IT>
 8001112:	e00d      	b.n	8001130 <main+0xc8>
	  } else {
		  esp01Presente = 1;
 8001114:	4b3d      	ldr	r3, [pc, #244]	; (800120c <main+0x1a4>)
 8001116:	2201      	movs	r2, #1
 8001118:	701a      	strb	r2, [r3, #0]
		  txUart[0] = HOLA;
 800111a:	4b3b      	ldr	r3, [pc, #236]	; (8001208 <main+0x1a0>)
 800111c:	2201      	movs	r2, #1
 800111e:	701a      	strb	r2, [r3, #0]
		  txUart[3] = '\0';
 8001120:	4b39      	ldr	r3, [pc, #228]	; (8001208 <main+0x1a0>)
 8001122:	2200      	movs	r2, #0
 8001124:	70da      	strb	r2, [r3, #3]
		  HAL_UART_Transmit_IT(&huart7, txUart, 4);
 8001126:	2204      	movs	r2, #4
 8001128:	4937      	ldr	r1, [pc, #220]	; (8001208 <main+0x1a0>)
 800112a:	4836      	ldr	r0, [pc, #216]	; (8001204 <main+0x19c>)
 800112c:	f005 f9d9 	bl	80064e2 <HAL_UART_Transmit_IT>
	  }

  }

  HAL_UART_Receive_IT(&huart7, rxUart, 4);
 8001130:	2204      	movs	r2, #4
 8001132:	4933      	ldr	r1, [pc, #204]	; (8001200 <main+0x198>)
 8001134:	4833      	ldr	r0, [pc, #204]	; (8001204 <main+0x19c>)
 8001136:	f005 fa19 	bl	800656c <HAL_UART_Receive_IT>

  if (!esp01Presente) {
 800113a:	4b34      	ldr	r3, [pc, #208]	; (800120c <main+0x1a4>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d103      	bne.n	800114a <main+0xe2>
	  modoFuncionamiento = AUTOMATICO;
 8001142:	4b33      	ldr	r3, [pc, #204]	; (8001210 <main+0x1a8>)
 8001144:	2200      	movs	r2, #0
 8001146:	701a      	strb	r2, [r3, #0]
 8001148:	e002      	b.n	8001150 <main+0xe8>
  }else{
	  modoFuncionamiento = MANUAL;
 800114a:	4b31      	ldr	r3, [pc, #196]	; (8001210 <main+0x1a8>)
 800114c:	2201      	movs	r2, #1
 800114e:	701a      	strb	r2, [r3, #0]
		  }
	  }
	  last_button = read_button;
	  */

	  if (flag_cmd != 0){
 8001150:	4b30      	ldr	r3, [pc, #192]	; (8001214 <main+0x1ac>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d004      	beq.n	8001162 <main+0xfa>
		  check_rxUart();
 8001158:	f000 fdf2 	bl	8001d40 <check_rxUart>
		  flag_cmd = 0;
 800115c:	4b2d      	ldr	r3, [pc, #180]	; (8001214 <main+0x1ac>)
 800115e:	2200      	movs	r2, #0
 8001160:	701a      	strb	r2, [r3, #0]
	  }

	  SR_04();
 8001162:	f000 f92b 	bl	80013bc <SR_04>
	  sensores();
 8001166:	f000 f96f 	bl	8001448 <sensores>
	  modo_funcionamiento();
 800116a:	f000 ffc9 	bl	8002100 <modo_funcionamiento>

	  if (desbordeTIM7 > 21){
 800116e:	4b2a      	ldr	r3, [pc, #168]	; (8001218 <main+0x1b0>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2b15      	cmp	r3, #21
 8001174:	d90a      	bls.n	800118c <main+0x124>
		  flag_encoders = 1;
 8001176:	4b29      	ldr	r3, [pc, #164]	; (800121c <main+0x1b4>)
 8001178:	2201      	movs	r2, #1
 800117a:	701a      	strb	r2, [r3, #0]
		  desbordeTIM7 = 0;
 800117c:	4b26      	ldr	r3, [pc, #152]	; (8001218 <main+0x1b0>)
 800117e:	2200      	movs	r2, #0
 8001180:	701a      	strb	r2, [r3, #0]

		  TRIG_SR04;
 8001182:	4b1d      	ldr	r3, [pc, #116]	; (80011f8 <main+0x190>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f06f 020a 	mvn.w	r2, #10
 800118a:	625a      	str	r2, [r3, #36]	; 0x24
	  }

	  if (desbordeTIM7 != 0){
 800118c:	4b22      	ldr	r3, [pc, #136]	; (8001218 <main+0x1b0>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d0dd      	beq.n	8001150 <main+0xe8>
		  periodo_Encoder += desbordeTIM7;
 8001194:	4b22      	ldr	r3, [pc, #136]	; (8001220 <main+0x1b8>)
 8001196:	781a      	ldrb	r2, [r3, #0]
 8001198:	4b1f      	ldr	r3, [pc, #124]	; (8001218 <main+0x1b0>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	4413      	add	r3, r2
 800119e:	b2da      	uxtb	r2, r3
 80011a0:	4b1f      	ldr	r3, [pc, #124]	; (8001220 <main+0x1b8>)
 80011a2:	701a      	strb	r2, [r3, #0]
		  periodo_SR04 += desbordeTIM7;
 80011a4:	4b1f      	ldr	r3, [pc, #124]	; (8001224 <main+0x1bc>)
 80011a6:	781a      	ldrb	r2, [r3, #0]
 80011a8:	4b1b      	ldr	r3, [pc, #108]	; (8001218 <main+0x1b0>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	4413      	add	r3, r2
 80011ae:	b2da      	uxtb	r2, r3
 80011b0:	4b1c      	ldr	r3, [pc, #112]	; (8001224 <main+0x1bc>)
 80011b2:	701a      	strb	r2, [r3, #0]
		  desbordeTIM7 = 0;
 80011b4:	4b18      	ldr	r3, [pc, #96]	; (8001218 <main+0x1b0>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	701a      	strb	r2, [r3, #0]
		  if (periodo_Encoder > 21){ // en 10 * ms
 80011ba:	4b19      	ldr	r3, [pc, #100]	; (8001220 <main+0x1b8>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	2b15      	cmp	r3, #21
 80011c0:	d905      	bls.n	80011ce <main+0x166>
			  flag_encoders = 1;
 80011c2:	4b16      	ldr	r3, [pc, #88]	; (800121c <main+0x1b4>)
 80011c4:	2201      	movs	r2, #1
 80011c6:	701a      	strb	r2, [r3, #0]
			  periodo_Encoder = 0;
 80011c8:	4b15      	ldr	r3, [pc, #84]	; (8001220 <main+0x1b8>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	701a      	strb	r2, [r3, #0]
		  }
		  if (periodo_SR04 > 21){
 80011ce:	4b15      	ldr	r3, [pc, #84]	; (8001224 <main+0x1bc>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	2b15      	cmp	r3, #21
 80011d4:	d9bc      	bls.n	8001150 <main+0xe8>
			  TRIG_SR04;
 80011d6:	4b08      	ldr	r3, [pc, #32]	; (80011f8 <main+0x190>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f06f 020a 	mvn.w	r2, #10
 80011de:	625a      	str	r2, [r3, #36]	; 0x24
			  periodo_SR04 = 0;
 80011e0:	4b10      	ldr	r3, [pc, #64]	; (8001224 <main+0x1bc>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	701a      	strb	r2, [r3, #0]
	  if (flag_cmd != 0){
 80011e6:	e7b3      	b.n	8001150 <main+0xe8>
 80011e8:	20000200 	.word	0x20000200
 80011ec:	200001c0 	.word	0x200001c0
 80011f0:	20000180 	.word	0x20000180
 80011f4:	20000100 	.word	0x20000100
 80011f8:	20000140 	.word	0x20000140
 80011fc:	20000068 	.word	0x20000068
 8001200:	200000c4 	.word	0x200000c4
 8001204:	20000240 	.word	0x20000240
 8001208:	200000c8 	.word	0x200000c8
 800120c:	2000002d 	.word	0x2000002d
 8001210:	20000000 	.word	0x20000000
 8001214:	2000002c 	.word	0x2000002c
 8001218:	20000039 	.word	0x20000039
 800121c:	2000004e 	.word	0x2000004e
 8001220:	2000003a 	.word	0x2000003a
 8001224:	2000003b 	.word	0x2000003b

08001228 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b094      	sub	sp, #80	; 0x50
 800122c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800122e:	f107 0320 	add.w	r3, r7, #32
 8001232:	2230      	movs	r2, #48	; 0x30
 8001234:	2100      	movs	r1, #0
 8001236:	4618      	mov	r0, r3
 8001238:	f006 f80e 	bl	8007258 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800123c:	f107 030c 	add.w	r3, r7, #12
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
 800124a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800124c:	2300      	movs	r3, #0
 800124e:	60bb      	str	r3, [r7, #8]
 8001250:	4b2c      	ldr	r3, [pc, #176]	; (8001304 <SystemClock_Config+0xdc>)
 8001252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001254:	4a2b      	ldr	r2, [pc, #172]	; (8001304 <SystemClock_Config+0xdc>)
 8001256:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800125a:	6413      	str	r3, [r2, #64]	; 0x40
 800125c:	4b29      	ldr	r3, [pc, #164]	; (8001304 <SystemClock_Config+0xdc>)
 800125e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001260:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001264:	60bb      	str	r3, [r7, #8]
 8001266:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001268:	2300      	movs	r3, #0
 800126a:	607b      	str	r3, [r7, #4]
 800126c:	4b26      	ldr	r3, [pc, #152]	; (8001308 <SystemClock_Config+0xe0>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a25      	ldr	r2, [pc, #148]	; (8001308 <SystemClock_Config+0xe0>)
 8001272:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001276:	6013      	str	r3, [r2, #0]
 8001278:	4b23      	ldr	r3, [pc, #140]	; (8001308 <SystemClock_Config+0xe0>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001280:	607b      	str	r3, [r7, #4]
 8001282:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001284:	2309      	movs	r3, #9
 8001286:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001288:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800128c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800128e:	2301      	movs	r3, #1
 8001290:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001292:	2302      	movs	r3, #2
 8001294:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001296:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800129a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800129c:	2304      	movs	r3, #4
 800129e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80012a0:	23b4      	movs	r3, #180	; 0xb4
 80012a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012a4:	2302      	movs	r3, #2
 80012a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012a8:	2304      	movs	r3, #4
 80012aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012ac:	f107 0320 	add.w	r3, r7, #32
 80012b0:	4618      	mov	r0, r3
 80012b2:	f003 fa33 	bl	800471c <HAL_RCC_OscConfig>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80012bc:	f000 ff36 	bl	800212c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80012c0:	f003 f9dc 	bl	800467c <HAL_PWREx_EnableOverDrive>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80012ca:	f000 ff2f 	bl	800212c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012ce:	230f      	movs	r3, #15
 80012d0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012d2:	2302      	movs	r3, #2
 80012d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012d6:	2300      	movs	r3, #0
 80012d8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012da:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012e4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012e6:	f107 030c 	add.w	r3, r7, #12
 80012ea:	2105      	movs	r1, #5
 80012ec:	4618      	mov	r0, r3
 80012ee:	f003 fc85 	bl	8004bfc <HAL_RCC_ClockConfig>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80012f8:	f000 ff18 	bl	800212c <Error_Handler>
  }
}
 80012fc:	bf00      	nop
 80012fe:	3750      	adds	r7, #80	; 0x50
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40023800 	.word	0x40023800
 8001308:	40007000 	.word	0x40007000

0800130c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
	if (htim->Instance==TIM7){
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a07      	ldr	r2, [pc, #28]	; (8001338 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d105      	bne.n	800132a <HAL_TIM_PeriodElapsedCallback+0x1e>
		desbordeTIM7++;
 800131e:	4b07      	ldr	r3, [pc, #28]	; (800133c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	3301      	adds	r3, #1
 8001324:	b2da      	uxtb	r2, r3
 8001326:	4b05      	ldr	r3, [pc, #20]	; (800133c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001328:	701a      	strb	r2, [r3, #0]
	}
}
 800132a:	bf00      	nop
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	40001400 	.word	0x40001400
 800133c:	20000039 	.word	0x20000039

08001340 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3){
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	7f1b      	ldrb	r3, [r3, #28]
 800134c:	2b04      	cmp	r3, #4
 800134e:	d10a      	bne.n	8001366 <HAL_TIM_IC_CaptureCallback+0x26>
		ic1 = htim->Instance->CCR3;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001356:	4a0e      	ldr	r2, [pc, #56]	; (8001390 <HAL_TIM_IC_CaptureCallback+0x50>)
 8001358:	6013      	str	r3, [r2, #0]
		flancoEco++;
 800135a:	4b0e      	ldr	r3, [pc, #56]	; (8001394 <HAL_TIM_IC_CaptureCallback+0x54>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	3301      	adds	r3, #1
 8001360:	b2da      	uxtb	r2, r3
 8001362:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <HAL_TIM_IC_CaptureCallback+0x54>)
 8001364:	701a      	strb	r2, [r3, #0]
	}

	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4){
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	7f1b      	ldrb	r3, [r3, #28]
 800136a:	2b08      	cmp	r3, #8
 800136c:	d10a      	bne.n	8001384 <HAL_TIM_IC_CaptureCallback+0x44>
		ic2 = htim->Instance->CCR4;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001374:	4a08      	ldr	r2, [pc, #32]	; (8001398 <HAL_TIM_IC_CaptureCallback+0x58>)
 8001376:	6013      	str	r3, [r2, #0]
		flancoEco++;
 8001378:	4b06      	ldr	r3, [pc, #24]	; (8001394 <HAL_TIM_IC_CaptureCallback+0x54>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	3301      	adds	r3, #1
 800137e:	b2da      	uxtb	r2, r3
 8001380:	4b04      	ldr	r3, [pc, #16]	; (8001394 <HAL_TIM_IC_CaptureCallback+0x54>)
 8001382:	701a      	strb	r2, [r3, #0]
	}
}
 8001384:	bf00      	nop
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr
 8001390:	2000003c 	.word	0x2000003c
 8001394:	20000044 	.word	0x20000044
 8001398:	20000040 	.word	0x20000040

0800139c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
	flag_cmd = 1;
 80013a4:	4b04      	ldr	r3, [pc, #16]	; (80013b8 <HAL_UART_RxCpltCallback+0x1c>)
 80013a6:	2201      	movs	r2, #1
 80013a8:	701a      	strb	r2, [r3, #0]
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	2000002c 	.word	0x2000002c

080013bc <SR_04>:


void SR_04 (void){
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0

	switch (flancoEco){
 80013c0:	4b1b      	ldr	r3, [pc, #108]	; (8001430 <SR_04+0x74>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	db29      	blt.n	800141c <SR_04+0x60>
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	dd2c      	ble.n	8001426 <SR_04+0x6a>
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d125      	bne.n	800141c <SR_04+0x60>
		case 0:
		case 1:
			return;
		case 2:
			cuentaPulsos = (int32_t)(ic2 - ic1);
 80013d0:	4b18      	ldr	r3, [pc, #96]	; (8001434 <SR_04+0x78>)
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	4b18      	ldr	r3, [pc, #96]	; (8001438 <SR_04+0x7c>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	461a      	mov	r2, r3
 80013dc:	4b17      	ldr	r3, [pc, #92]	; (800143c <SR_04+0x80>)
 80013de:	601a      	str	r2, [r3, #0]
			if (cuentaPulsos < 23310){
 80013e0:	4b16      	ldr	r3, [pc, #88]	; (800143c <SR_04+0x80>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f645 320d 	movw	r2, #23309	; 0x5b0d
 80013e8:	4293      	cmp	r3, r2
 80013ea:	dc0f      	bgt.n	800140c <SR_04+0x50>
				distanciaSR04 = cuentaPulsos * 34 / 2000;
 80013ec:	4b13      	ldr	r3, [pc, #76]	; (800143c <SR_04+0x80>)
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	4613      	mov	r3, r2
 80013f2:	011b      	lsls	r3, r3, #4
 80013f4:	4413      	add	r3, r2
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	4a11      	ldr	r2, [pc, #68]	; (8001440 <SR_04+0x84>)
 80013fa:	fb82 1203 	smull	r1, r2, r2, r3
 80013fe:	11d2      	asrs	r2, r2, #7
 8001400:	17db      	asrs	r3, r3, #31
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	b29a      	uxth	r2, r3
 8001406:	4b0f      	ldr	r3, [pc, #60]	; (8001444 <SR_04+0x88>)
 8001408:	801a      	strh	r2, [r3, #0]
 800140a:	e003      	b.n	8001414 <SR_04+0x58>
			}else{
				distanciaSR04 = 400;
 800140c:	4b0d      	ldr	r3, [pc, #52]	; (8001444 <SR_04+0x88>)
 800140e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001412:	801a      	strh	r2, [r3, #0]
			}
			flancoEco = 0;
 8001414:	4b06      	ldr	r3, [pc, #24]	; (8001430 <SR_04+0x74>)
 8001416:	2200      	movs	r2, #0
 8001418:	701a      	strb	r2, [r3, #0]
		break;
 800141a:	e005      	b.n	8001428 <SR_04+0x6c>
		default:
			flancoEco = 0;
 800141c:	4b04      	ldr	r3, [pc, #16]	; (8001430 <SR_04+0x74>)
 800141e:	2200      	movs	r2, #0
 8001420:	701a      	strb	r2, [r3, #0]
		break;
 8001422:	bf00      	nop
 8001424:	e000      	b.n	8001428 <SR_04+0x6c>
			return;
 8001426:	bf00      	nop
	} //end switch flancoEco

} //end SR_04()
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	20000044 	.word	0x20000044
 8001434:	20000040 	.word	0x20000040
 8001438:	2000003c 	.word	0x2000003c
 800143c:	20000048 	.word	0x20000048
 8001440:	10624dd3 	.word	0x10624dd3
 8001444:	2000004c 	.word	0x2000004c

08001448 <sensores>:

void sensores (void){
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
	//sensores_dist = SI << 2 | SF << 1 | SD (logica negativa)
	SI = (HAL_GPIO_ReadPin(IN_sensorL_GPIO_Port, IN_sensorL_Pin)) ;
 800144c:	2102      	movs	r1, #2
 800144e:	4817      	ldr	r0, [pc, #92]	; (80014ac <sensores+0x64>)
 8001450:	f002 f8b4 	bl	80035bc <HAL_GPIO_ReadPin>
 8001454:	4603      	mov	r3, r0
 8001456:	461a      	mov	r2, r3
 8001458:	4b15      	ldr	r3, [pc, #84]	; (80014b0 <sensores+0x68>)
 800145a:	701a      	strb	r2, [r3, #0]
	SD = HAL_GPIO_ReadPin(IN_sensorR_GPIO_Port, IN_sensorR_Pin);
 800145c:	2108      	movs	r1, #8
 800145e:	4813      	ldr	r0, [pc, #76]	; (80014ac <sensores+0x64>)
 8001460:	f002 f8ac 	bl	80035bc <HAL_GPIO_ReadPin>
 8001464:	4603      	mov	r3, r0
 8001466:	461a      	mov	r2, r3
 8001468:	4b12      	ldr	r3, [pc, #72]	; (80014b4 <sensores+0x6c>)
 800146a:	701a      	strb	r2, [r3, #0]
	if (distanciaSR04 < 25) SF = 0; else SF = 1;
 800146c:	4b12      	ldr	r3, [pc, #72]	; (80014b8 <sensores+0x70>)
 800146e:	881b      	ldrh	r3, [r3, #0]
 8001470:	2b18      	cmp	r3, #24
 8001472:	d803      	bhi.n	800147c <sensores+0x34>
 8001474:	4b11      	ldr	r3, [pc, #68]	; (80014bc <sensores+0x74>)
 8001476:	2200      	movs	r2, #0
 8001478:	701a      	strb	r2, [r3, #0]
 800147a:	e002      	b.n	8001482 <sensores+0x3a>
 800147c:	4b0f      	ldr	r3, [pc, #60]	; (80014bc <sensores+0x74>)
 800147e:	2201      	movs	r2, #1
 8001480:	701a      	strb	r2, [r3, #0]

	sensores_dist = SI << 2 | SF << 1 | SD;
 8001482:	4b0b      	ldr	r3, [pc, #44]	; (80014b0 <sensores+0x68>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	b25a      	sxtb	r2, r3
 800148a:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <sensores+0x74>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	b25b      	sxtb	r3, r3
 8001492:	4313      	orrs	r3, r2
 8001494:	b25a      	sxtb	r2, r3
 8001496:	4b07      	ldr	r3, [pc, #28]	; (80014b4 <sensores+0x6c>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	b25b      	sxtb	r3, r3
 800149c:	4313      	orrs	r3, r2
 800149e:	b25b      	sxtb	r3, r3
 80014a0:	b2da      	uxtb	r2, r3
 80014a2:	4b07      	ldr	r3, [pc, #28]	; (80014c0 <sensores+0x78>)
 80014a4:	701a      	strb	r2, [r3, #0]
} //end sensores()
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40020c00 	.word	0x40020c00
 80014b0:	200000cd 	.word	0x200000cd
 80014b4:	200000cc 	.word	0x200000cc
 80014b8:	2000004c 	.word	0x2000004c
 80014bc:	200000c2 	.word	0x200000c2
 80014c0:	20000038 	.word	0x20000038

080014c4 <movimientoLibre>:
	velLFinal = abs(vl);
	velRFinal = abs(vr);

} //end velocidades()

void movimientoLibre (void){
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0

	if (avance_cant != 0) avance_cant = 0;
 80014c8:	4bba      	ldr	r3, [pc, #744]	; (80017b4 <movimientoLibre+0x2f0>)
 80014ca:	881b      	ldrh	r3, [r3, #0]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d002      	beq.n	80014d6 <movimientoLibre+0x12>
 80014d0:	4bb8      	ldr	r3, [pc, #736]	; (80017b4 <movimientoLibre+0x2f0>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	801a      	strh	r2, [r3, #0]
	if (retroceso_cant != 0) retroceso_cant = 0;
 80014d6:	4bb8      	ldr	r3, [pc, #736]	; (80017b8 <movimientoLibre+0x2f4>)
 80014d8:	881b      	ldrh	r3, [r3, #0]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d002      	beq.n	80014e4 <movimientoLibre+0x20>
 80014de:	4bb6      	ldr	r3, [pc, #728]	; (80017b8 <movimientoLibre+0x2f4>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	801a      	strh	r2, [r3, #0]
	if (giroIzq_cant != 0) giroIzq_cant = 0;
 80014e4:	4bb5      	ldr	r3, [pc, #724]	; (80017bc <movimientoLibre+0x2f8>)
 80014e6:	881b      	ldrh	r3, [r3, #0]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d002      	beq.n	80014f2 <movimientoLibre+0x2e>
 80014ec:	4bb3      	ldr	r3, [pc, #716]	; (80017bc <movimientoLibre+0x2f8>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	801a      	strh	r2, [r3, #0]
	if (giroDer_cant != 0) giroDer_cant = 0;
 80014f2:	4bb3      	ldr	r3, [pc, #716]	; (80017c0 <movimientoLibre+0x2fc>)
 80014f4:	881b      	ldrh	r3, [r3, #0]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d002      	beq.n	8001500 <movimientoLibre+0x3c>
 80014fa:	4bb1      	ldr	r3, [pc, #708]	; (80017c0 <movimientoLibre+0x2fc>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	801a      	strh	r2, [r3, #0]

	switch (status_movimiento) {
 8001500:	4bb0      	ldr	r3, [pc, #704]	; (80017c4 <movimientoLibre+0x300>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	2b06      	cmp	r3, #6
 8001506:	f200 816f 	bhi.w	80017e8 <movimientoLibre+0x324>
 800150a:	a201      	add	r2, pc, #4	; (adr r2, 8001510 <movimientoLibre+0x4c>)
 800150c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001510:	0800152d 	.word	0x0800152d
 8001514:	08001575 	.word	0x08001575
 8001518:	080016b1 	.word	0x080016b1
 800151c:	080015fd 	.word	0x080015fd
 8001520:	08001657 	.word	0x08001657
 8001524:	080016f3 	.word	0x080016f3
 8001528:	08001759 	.word	0x08001759
		case QUIETO:

			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 0);
 800152c:	2200      	movs	r2, #0
 800152e:	2101      	movs	r1, #1
 8001530:	48a5      	ldr	r0, [pc, #660]	; (80017c8 <movimientoLibre+0x304>)
 8001532:	f002 f85b 	bl	80035ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 0);
 8001536:	2200      	movs	r2, #0
 8001538:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800153c:	48a3      	ldr	r0, [pc, #652]	; (80017cc <movimientoLibre+0x308>)
 800153e:	f002 f855 	bl	80035ec <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 0);
 8001542:	2200      	movs	r2, #0
 8001544:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001548:	48a0      	ldr	r0, [pc, #640]	; (80017cc <movimientoLibre+0x308>)
 800154a:	f002 f84f 	bl	80035ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 0);
 800154e:	2200      	movs	r2, #0
 8001550:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001554:	489d      	ldr	r0, [pc, #628]	; (80017cc <movimientoLibre+0x308>)
 8001556:	f002 f849 	bl	80035ec <HAL_GPIO_WritePin>

			velL = 0;
 800155a:	4b9d      	ldr	r3, [pc, #628]	; (80017d0 <movimientoLibre+0x30c>)
 800155c:	2200      	movs	r2, #0
 800155e:	701a      	strb	r2, [r3, #0]
			velR = 0;
 8001560:	4b9c      	ldr	r3, [pc, #624]	; (80017d4 <movimientoLibre+0x310>)
 8001562:	2200      	movs	r2, #0
 8001564:	701a      	strb	r2, [r3, #0]
			periodo_Encoder = 0;
 8001566:	4b9c      	ldr	r3, [pc, #624]	; (80017d8 <movimientoLibre+0x314>)
 8001568:	2200      	movs	r2, #0
 800156a:	701a      	strb	r2, [r3, #0]

			status_movimiento = AVANZANDO;
 800156c:	4b95      	ldr	r3, [pc, #596]	; (80017c4 <movimientoLibre+0x300>)
 800156e:	2201      	movs	r2, #1
 8001570:	701a      	strb	r2, [r3, #0]
		break;
 8001572:	e13a      	b.n	80017ea <movimientoLibre+0x326>
		case AVANZANDO:

			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 1);
 8001574:	2201      	movs	r2, #1
 8001576:	2101      	movs	r1, #1
 8001578:	4893      	ldr	r0, [pc, #588]	; (80017c8 <movimientoLibre+0x304>)
 800157a:	f002 f837 	bl	80035ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 1);
 800157e:	2201      	movs	r2, #1
 8001580:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001584:	4891      	ldr	r0, [pc, #580]	; (80017cc <movimientoLibre+0x308>)
 8001586:	f002 f831 	bl	80035ec <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 0);
 800158a:	2200      	movs	r2, #0
 800158c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001590:	488e      	ldr	r0, [pc, #568]	; (80017cc <movimientoLibre+0x308>)
 8001592:	f002 f82b 	bl	80035ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 0);
 8001596:	2200      	movs	r2, #0
 8001598:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800159c:	488b      	ldr	r0, [pc, #556]	; (80017cc <movimientoLibre+0x308>)
 800159e:	f002 f825 	bl	80035ec <HAL_GPIO_WritePin>

			velL = 5;
 80015a2:	4b8b      	ldr	r3, [pc, #556]	; (80017d0 <movimientoLibre+0x30c>)
 80015a4:	2205      	movs	r2, #5
 80015a6:	701a      	strb	r2, [r3, #0]
			velR = 5;
 80015a8:	4b8a      	ldr	r3, [pc, #552]	; (80017d4 <movimientoLibre+0x310>)
 80015aa:	2205      	movs	r2, #5
 80015ac:	701a      	strb	r2, [r3, #0]

			switch (sensores_dist) {
 80015ae:	4b8b      	ldr	r3, [pc, #556]	; (80017dc <movimientoLibre+0x318>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	2b06      	cmp	r3, #6
 80015b4:	d820      	bhi.n	80015f8 <movimientoLibre+0x134>
 80015b6:	a201      	add	r2, pc, #4	; (adr r2, 80015bc <movimientoLibre+0xf8>)
 80015b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015bc:	080015e1 	.word	0x080015e1
 80015c0:	080015f1 	.word	0x080015f1
 80015c4:	080015f9 	.word	0x080015f9
 80015c8:	080015e9 	.word	0x080015e9
 80015cc:	080015e1 	.word	0x080015e1
 80015d0:	080015e1 	.word	0x080015e1
 80015d4:	080015d9 	.word	0x080015d9
				case 0b110:
					//agregado para prueba
					//status_movimiento = PIVOTE_IZQ_AVAN;
					status_movimiento = ROTANDO_IZQ;
 80015d8:	4b7a      	ldr	r3, [pc, #488]	; (80017c4 <movimientoLibre+0x300>)
 80015da:	2203      	movs	r2, #3
 80015dc:	701a      	strb	r2, [r3, #0]

				break;
 80015de:	e00c      	b.n	80015fa <movimientoLibre+0x136>
				case 0b101:
				case 0b100:
				case 0b000:
					status_movimiento = ROTANDO_IZQ;
 80015e0:	4b78      	ldr	r3, [pc, #480]	; (80017c4 <movimientoLibre+0x300>)
 80015e2:	2203      	movs	r2, #3
 80015e4:	701a      	strb	r2, [r3, #0]
				break;
 80015e6:	e008      	b.n	80015fa <movimientoLibre+0x136>
				case 0b011:
					//agregado para prueba
					//status_movimiento = PIVOTE_DER_AVAN;
					status_movimiento = ROTANDO_DER;
 80015e8:	4b76      	ldr	r3, [pc, #472]	; (80017c4 <movimientoLibre+0x300>)
 80015ea:	2204      	movs	r2, #4
 80015ec:	701a      	strb	r2, [r3, #0]
				break;
 80015ee:	e004      	b.n	80015fa <movimientoLibre+0x136>
				case 0b001:
					status_movimiento = ROTANDO_DER;
 80015f0:	4b74      	ldr	r3, [pc, #464]	; (80017c4 <movimientoLibre+0x300>)
 80015f2:	2204      	movs	r2, #4
 80015f4:	701a      	strb	r2, [r3, #0]
				break;
 80015f6:	e000      	b.n	80015fa <movimientoLibre+0x136>
				default:
				break;
 80015f8:	bf00      	nop
			} //end switch sensores_dist

		break;
 80015fa:	e0f6      	b.n	80017ea <movimientoLibre+0x326>
		case ROTANDO_IZQ:

			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 0);
 80015fc:	2200      	movs	r2, #0
 80015fe:	2101      	movs	r1, #1
 8001600:	4871      	ldr	r0, [pc, #452]	; (80017c8 <movimientoLibre+0x304>)
 8001602:	f001 fff3 	bl	80035ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 1);
 8001606:	2201      	movs	r2, #1
 8001608:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800160c:	486f      	ldr	r0, [pc, #444]	; (80017cc <movimientoLibre+0x308>)
 800160e:	f001 ffed 	bl	80035ec <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 1);
 8001612:	2201      	movs	r2, #1
 8001614:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001618:	486c      	ldr	r0, [pc, #432]	; (80017cc <movimientoLibre+0x308>)
 800161a:	f001 ffe7 	bl	80035ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 0);
 800161e:	2200      	movs	r2, #0
 8001620:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001624:	4869      	ldr	r0, [pc, #420]	; (80017cc <movimientoLibre+0x308>)
 8001626:	f001 ffe1 	bl	80035ec <HAL_GPIO_WritePin>

			velL = 5;
 800162a:	4b69      	ldr	r3, [pc, #420]	; (80017d0 <movimientoLibre+0x30c>)
 800162c:	2205      	movs	r2, #5
 800162e:	701a      	strb	r2, [r3, #0]
			velR = 5;
 8001630:	4b68      	ldr	r3, [pc, #416]	; (80017d4 <movimientoLibre+0x310>)
 8001632:	2205      	movs	r2, #5
 8001634:	701a      	strb	r2, [r3, #0]

			switch (sensores_dist){
 8001636:	4b69      	ldr	r3, [pc, #420]	; (80017dc <movimientoLibre+0x318>)
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	2b03      	cmp	r3, #3
 800163c:	d006      	beq.n	800164c <movimientoLibre+0x188>
 800163e:	2b07      	cmp	r3, #7
 8001640:	d000      	beq.n	8001644 <movimientoLibre+0x180>
					status_movimiento = AVANZANDO;
					break;
				case 0b011:
					status_movimiento = ROTANDO_DER;
				default:
					break;
 8001642:	e006      	b.n	8001652 <movimientoLibre+0x18e>
					status_movimiento = AVANZANDO;
 8001644:	4b5f      	ldr	r3, [pc, #380]	; (80017c4 <movimientoLibre+0x300>)
 8001646:	2201      	movs	r2, #1
 8001648:	701a      	strb	r2, [r3, #0]
					break;
 800164a:	e003      	b.n	8001654 <movimientoLibre+0x190>
					status_movimiento = ROTANDO_DER;
 800164c:	4b5d      	ldr	r3, [pc, #372]	; (80017c4 <movimientoLibre+0x300>)
 800164e:	2204      	movs	r2, #4
 8001650:	701a      	strb	r2, [r3, #0]
					break;
 8001652:	bf00      	nop
			} //end switch sensores_dist

		break;
 8001654:	e0c9      	b.n	80017ea <movimientoLibre+0x326>
		case ROTANDO_DER:
			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 1);
 8001656:	2201      	movs	r2, #1
 8001658:	2101      	movs	r1, #1
 800165a:	485b      	ldr	r0, [pc, #364]	; (80017c8 <movimientoLibre+0x304>)
 800165c:	f001 ffc6 	bl	80035ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 0);
 8001660:	2200      	movs	r2, #0
 8001662:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001666:	4859      	ldr	r0, [pc, #356]	; (80017cc <movimientoLibre+0x308>)
 8001668:	f001 ffc0 	bl	80035ec <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 0);
 800166c:	2200      	movs	r2, #0
 800166e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001672:	4856      	ldr	r0, [pc, #344]	; (80017cc <movimientoLibre+0x308>)
 8001674:	f001 ffba 	bl	80035ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 1);
 8001678:	2201      	movs	r2, #1
 800167a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800167e:	4853      	ldr	r0, [pc, #332]	; (80017cc <movimientoLibre+0x308>)
 8001680:	f001 ffb4 	bl	80035ec <HAL_GPIO_WritePin>

			velL = 5;
 8001684:	4b52      	ldr	r3, [pc, #328]	; (80017d0 <movimientoLibre+0x30c>)
 8001686:	2205      	movs	r2, #5
 8001688:	701a      	strb	r2, [r3, #0]
			velR = 5;
 800168a:	4b52      	ldr	r3, [pc, #328]	; (80017d4 <movimientoLibre+0x310>)
 800168c:	2205      	movs	r2, #5
 800168e:	701a      	strb	r2, [r3, #0]

			switch (sensores_dist){
 8001690:	4b52      	ldr	r3, [pc, #328]	; (80017dc <movimientoLibre+0x318>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	2b06      	cmp	r3, #6
 8001696:	d006      	beq.n	80016a6 <movimientoLibre+0x1e2>
 8001698:	2b07      	cmp	r3, #7
 800169a:	d000      	beq.n	800169e <movimientoLibre+0x1da>
					status_movimiento = AVANZANDO;
					break;
				case 0b110:
					status_movimiento = ROTANDO_IZQ;
				default:
					break;
 800169c:	e006      	b.n	80016ac <movimientoLibre+0x1e8>
					status_movimiento = AVANZANDO;
 800169e:	4b49      	ldr	r3, [pc, #292]	; (80017c4 <movimientoLibre+0x300>)
 80016a0:	2201      	movs	r2, #1
 80016a2:	701a      	strb	r2, [r3, #0]
					break;
 80016a4:	e003      	b.n	80016ae <movimientoLibre+0x1ea>
					status_movimiento = ROTANDO_IZQ;
 80016a6:	4b47      	ldr	r3, [pc, #284]	; (80017c4 <movimientoLibre+0x300>)
 80016a8:	2203      	movs	r2, #3
 80016aa:	701a      	strb	r2, [r3, #0]
					break;
 80016ac:	bf00      	nop
			} //end switch sensores_dist

		break;
 80016ae:	e09c      	b.n	80017ea <movimientoLibre+0x326>
		case RETROCEDIENDO:
			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 0);
 80016b0:	2200      	movs	r2, #0
 80016b2:	2101      	movs	r1, #1
 80016b4:	4844      	ldr	r0, [pc, #272]	; (80017c8 <movimientoLibre+0x304>)
 80016b6:	f001 ff99 	bl	80035ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 0);
 80016ba:	2200      	movs	r2, #0
 80016bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016c0:	4842      	ldr	r0, [pc, #264]	; (80017cc <movimientoLibre+0x308>)
 80016c2:	f001 ff93 	bl	80035ec <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 1);
 80016c6:	2201      	movs	r2, #1
 80016c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016cc:	483f      	ldr	r0, [pc, #252]	; (80017cc <movimientoLibre+0x308>)
 80016ce:	f001 ff8d 	bl	80035ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 1);
 80016d2:	2201      	movs	r2, #1
 80016d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016d8:	483c      	ldr	r0, [pc, #240]	; (80017cc <movimientoLibre+0x308>)
 80016da:	f001 ff87 	bl	80035ec <HAL_GPIO_WritePin>

			velL = 5;
 80016de:	4b3c      	ldr	r3, [pc, #240]	; (80017d0 <movimientoLibre+0x30c>)
 80016e0:	2205      	movs	r2, #5
 80016e2:	701a      	strb	r2, [r3, #0]
			velR = 5;
 80016e4:	4b3b      	ldr	r3, [pc, #236]	; (80017d4 <movimientoLibre+0x310>)
 80016e6:	2205      	movs	r2, #5
 80016e8:	701a      	strb	r2, [r3, #0]

			status_movimiento = AVANZANDO;
 80016ea:	4b36      	ldr	r3, [pc, #216]	; (80017c4 <movimientoLibre+0x300>)
 80016ec:	2201      	movs	r2, #1
 80016ee:	701a      	strb	r2, [r3, #0]
			break;
 80016f0:	e07b      	b.n	80017ea <movimientoLibre+0x326>
		case PIVOTE_IZQ_AVAN:
			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 0);
 80016f2:	2200      	movs	r2, #0
 80016f4:	2101      	movs	r1, #1
 80016f6:	4834      	ldr	r0, [pc, #208]	; (80017c8 <movimientoLibre+0x304>)
 80016f8:	f001 ff78 	bl	80035ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 1);
 80016fc:	2201      	movs	r2, #1
 80016fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001702:	4832      	ldr	r0, [pc, #200]	; (80017cc <movimientoLibre+0x308>)
 8001704:	f001 ff72 	bl	80035ec <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 0);
 8001708:	2200      	movs	r2, #0
 800170a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800170e:	482f      	ldr	r0, [pc, #188]	; (80017cc <movimientoLibre+0x308>)
 8001710:	f001 ff6c 	bl	80035ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 0);
 8001714:	2200      	movs	r2, #0
 8001716:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800171a:	482c      	ldr	r0, [pc, #176]	; (80017cc <movimientoLibre+0x308>)
 800171c:	f001 ff66 	bl	80035ec <HAL_GPIO_WritePin>

			velL = 0;
 8001720:	4b2b      	ldr	r3, [pc, #172]	; (80017d0 <movimientoLibre+0x30c>)
 8001722:	2200      	movs	r2, #0
 8001724:	701a      	strb	r2, [r3, #0]
			velR = 5;
 8001726:	4b2b      	ldr	r3, [pc, #172]	; (80017d4 <movimientoLibre+0x310>)
 8001728:	2205      	movs	r2, #5
 800172a:	701a      	strb	r2, [r3, #0]

			switch (sensores_dist){
 800172c:	4b2b      	ldr	r3, [pc, #172]	; (80017dc <movimientoLibre+0x318>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	2b04      	cmp	r3, #4
 8001732:	d00c      	beq.n	800174e <movimientoLibre+0x28a>
 8001734:	2b07      	cmp	r3, #7
 8001736:	d002      	beq.n	800173e <movimientoLibre+0x27a>
 8001738:	2b03      	cmp	r3, #3
 800173a:	d004      	beq.n	8001746 <movimientoLibre+0x282>
					status_movimiento = ROTANDO_DER;
				break;
				case 0b100:
					status_movimiento = ROTANDO_IZQ;
				default:
				break;
 800173c:	e00a      	b.n	8001754 <movimientoLibre+0x290>
					status_movimiento = AVANZANDO;
 800173e:	4b21      	ldr	r3, [pc, #132]	; (80017c4 <movimientoLibre+0x300>)
 8001740:	2201      	movs	r2, #1
 8001742:	701a      	strb	r2, [r3, #0]
				break;
 8001744:	e007      	b.n	8001756 <movimientoLibre+0x292>
					status_movimiento = ROTANDO_DER;
 8001746:	4b1f      	ldr	r3, [pc, #124]	; (80017c4 <movimientoLibre+0x300>)
 8001748:	2204      	movs	r2, #4
 800174a:	701a      	strb	r2, [r3, #0]
				break;
 800174c:	e003      	b.n	8001756 <movimientoLibre+0x292>
					status_movimiento = ROTANDO_IZQ;
 800174e:	4b1d      	ldr	r3, [pc, #116]	; (80017c4 <movimientoLibre+0x300>)
 8001750:	2203      	movs	r2, #3
 8001752:	701a      	strb	r2, [r3, #0]
				break;
 8001754:	bf00      	nop
			} //end switch sensores_dist

		break;
 8001756:	e048      	b.n	80017ea <movimientoLibre+0x326>
		case PIVOTE_DER_AVAN:
			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 1);
 8001758:	2201      	movs	r2, #1
 800175a:	2101      	movs	r1, #1
 800175c:	481a      	ldr	r0, [pc, #104]	; (80017c8 <movimientoLibre+0x304>)
 800175e:	f001 ff45 	bl	80035ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 0);
 8001762:	2200      	movs	r2, #0
 8001764:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001768:	4818      	ldr	r0, [pc, #96]	; (80017cc <movimientoLibre+0x308>)
 800176a:	f001 ff3f 	bl	80035ec <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 0);
 800176e:	2200      	movs	r2, #0
 8001770:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001774:	4815      	ldr	r0, [pc, #84]	; (80017cc <movimientoLibre+0x308>)
 8001776:	f001 ff39 	bl	80035ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 0);
 800177a:	2200      	movs	r2, #0
 800177c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001780:	4812      	ldr	r0, [pc, #72]	; (80017cc <movimientoLibre+0x308>)
 8001782:	f001 ff33 	bl	80035ec <HAL_GPIO_WritePin>

			velL = 5;
 8001786:	4b12      	ldr	r3, [pc, #72]	; (80017d0 <movimientoLibre+0x30c>)
 8001788:	2205      	movs	r2, #5
 800178a:	701a      	strb	r2, [r3, #0]
			velR = 0;
 800178c:	4b11      	ldr	r3, [pc, #68]	; (80017d4 <movimientoLibre+0x310>)
 800178e:	2200      	movs	r2, #0
 8001790:	701a      	strb	r2, [r3, #0]

			switch (sensores_dist){
 8001792:	4b12      	ldr	r3, [pc, #72]	; (80017dc <movimientoLibre+0x318>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	2b06      	cmp	r3, #6
 8001798:	d008      	beq.n	80017ac <movimientoLibre+0x2e8>
 800179a:	2b07      	cmp	r3, #7
 800179c:	d002      	beq.n	80017a4 <movimientoLibre+0x2e0>
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d01e      	beq.n	80017e0 <movimientoLibre+0x31c>
					status_movimiento = ROTANDO_IZQ;
				break;
				case 0b001:
					status_movimiento = ROTANDO_DER;
				default:
				break;
 80017a2:	e020      	b.n	80017e6 <movimientoLibre+0x322>
					status_movimiento = AVANZANDO;
 80017a4:	4b07      	ldr	r3, [pc, #28]	; (80017c4 <movimientoLibre+0x300>)
 80017a6:	2201      	movs	r2, #1
 80017a8:	701a      	strb	r2, [r3, #0]
				break;
 80017aa:	e01d      	b.n	80017e8 <movimientoLibre+0x324>
					status_movimiento = ROTANDO_IZQ;
 80017ac:	4b05      	ldr	r3, [pc, #20]	; (80017c4 <movimientoLibre+0x300>)
 80017ae:	2203      	movs	r2, #3
 80017b0:	701a      	strb	r2, [r3, #0]
				break;
 80017b2:	e019      	b.n	80017e8 <movimientoLibre+0x324>
 80017b4:	20000030 	.word	0x20000030
 80017b8:	20000032 	.word	0x20000032
 80017bc:	20000034 	.word	0x20000034
 80017c0:	20000036 	.word	0x20000036
 80017c4:	2000002e 	.word	0x2000002e
 80017c8:	40020c00 	.word	0x40020c00
 80017cc:	40020800 	.word	0x40020800
 80017d0:	20000001 	.word	0x20000001
 80017d4:	20000002 	.word	0x20000002
 80017d8:	2000003a 	.word	0x2000003a
 80017dc:	20000038 	.word	0x20000038
					status_movimiento = ROTANDO_DER;
 80017e0:	4b03      	ldr	r3, [pc, #12]	; (80017f0 <movimientoLibre+0x32c>)
 80017e2:	2204      	movs	r2, #4
 80017e4:	701a      	strb	r2, [r3, #0]
				break;
 80017e6:	bf00      	nop
			} //end switch sensores_dist

		default:
		break;
 80017e8:	bf00      	nop

	} //fin switch status_movimiento

} //fin movimientoLibre()
 80017ea:	bf00      	nop
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	2000002e 	.word	0x2000002e

080017f4 <movimientoRC>:

void movimientoRC (void){
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0

	if (!avance_cant && !retroceso_cant && !giroIzq_cant && !giroDer_cant ){
 80017f8:	4b9d      	ldr	r3, [pc, #628]	; (8001a70 <movimientoRC+0x27c>)
 80017fa:	881b      	ldrh	r3, [r3, #0]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d10e      	bne.n	800181e <movimientoRC+0x2a>
 8001800:	4b9c      	ldr	r3, [pc, #624]	; (8001a74 <movimientoRC+0x280>)
 8001802:	881b      	ldrh	r3, [r3, #0]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d10a      	bne.n	800181e <movimientoRC+0x2a>
 8001808:	4b9b      	ldr	r3, [pc, #620]	; (8001a78 <movimientoRC+0x284>)
 800180a:	881b      	ldrh	r3, [r3, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d106      	bne.n	800181e <movimientoRC+0x2a>
 8001810:	4b9a      	ldr	r3, [pc, #616]	; (8001a7c <movimientoRC+0x288>)
 8001812:	881b      	ldrh	r3, [r3, #0]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d102      	bne.n	800181e <movimientoRC+0x2a>
		status_movimiento = QUIETO;
 8001818:	4b99      	ldr	r3, [pc, #612]	; (8001a80 <movimientoRC+0x28c>)
 800181a:	2200      	movs	r2, #0
 800181c:	701a      	strb	r2, [r3, #0]
	}

	switch (status_movimiento) {
 800181e:	4b98      	ldr	r3, [pc, #608]	; (8001a80 <movimientoRC+0x28c>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	2b05      	cmp	r3, #5
 8001824:	f200 81f5 	bhi.w	8001c12 <movimientoRC+0x41e>
 8001828:	a201      	add	r2, pc, #4	; (adr r2, 8001830 <movimientoRC+0x3c>)
 800182a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800182e:	bf00      	nop
 8001830:	08001849 	.word	0x08001849
 8001834:	080018f5 	.word	0x080018f5
 8001838:	08001b59 	.word	0x08001b59
 800183c:	080019b3 	.word	0x080019b3
 8001840:	08001a9d 	.word	0x08001a9d
 8001844:	08001c13 	.word	0x08001c13
		case QUIETO:

			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 0);
 8001848:	2200      	movs	r2, #0
 800184a:	2101      	movs	r1, #1
 800184c:	488d      	ldr	r0, [pc, #564]	; (8001a84 <movimientoRC+0x290>)
 800184e:	f001 fecd 	bl	80035ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 0);
 8001852:	2200      	movs	r2, #0
 8001854:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001858:	488b      	ldr	r0, [pc, #556]	; (8001a88 <movimientoRC+0x294>)
 800185a:	f001 fec7 	bl	80035ec <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 0);
 800185e:	2200      	movs	r2, #0
 8001860:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001864:	4888      	ldr	r0, [pc, #544]	; (8001a88 <movimientoRC+0x294>)
 8001866:	f001 fec1 	bl	80035ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 0);
 800186a:	2200      	movs	r2, #0
 800186c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001870:	4885      	ldr	r0, [pc, #532]	; (8001a88 <movimientoRC+0x294>)
 8001872:	f001 febb 	bl	80035ec <HAL_GPIO_WritePin>

			velL = 0;
 8001876:	4b85      	ldr	r3, [pc, #532]	; (8001a8c <movimientoRC+0x298>)
 8001878:	2200      	movs	r2, #0
 800187a:	701a      	strb	r2, [r3, #0]
			velR = 0;
 800187c:	4b84      	ldr	r3, [pc, #528]	; (8001a90 <movimientoRC+0x29c>)
 800187e:	2200      	movs	r2, #0
 8001880:	701a      	strb	r2, [r3, #0]

			if (avance_cant != 0){
 8001882:	4b7b      	ldr	r3, [pc, #492]	; (8001a70 <movimientoRC+0x27c>)
 8001884:	881b      	ldrh	r3, [r3, #0]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d009      	beq.n	800189e <movimientoRC+0xaa>
				acum_encoderL = 0;
 800188a:	4b82      	ldr	r3, [pc, #520]	; (8001a94 <movimientoRC+0x2a0>)
 800188c:	2200      	movs	r2, #0
 800188e:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 8001890:	4b81      	ldr	r3, [pc, #516]	; (8001a98 <movimientoRC+0x2a4>)
 8001892:	2200      	movs	r2, #0
 8001894:	801a      	strh	r2, [r3, #0]
				status_movimiento = AVANZANDO;
 8001896:	4b7a      	ldr	r3, [pc, #488]	; (8001a80 <movimientoRC+0x28c>)
 8001898:	2201      	movs	r2, #1
 800189a:	701a      	strb	r2, [r3, #0]
				break;
 800189c:	e1cc      	b.n	8001c38 <movimientoRC+0x444>
			}

			if (retroceso_cant != 0){
 800189e:	4b75      	ldr	r3, [pc, #468]	; (8001a74 <movimientoRC+0x280>)
 80018a0:	881b      	ldrh	r3, [r3, #0]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d009      	beq.n	80018ba <movimientoRC+0xc6>
				acum_encoderL = 0;
 80018a6:	4b7b      	ldr	r3, [pc, #492]	; (8001a94 <movimientoRC+0x2a0>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 80018ac:	4b7a      	ldr	r3, [pc, #488]	; (8001a98 <movimientoRC+0x2a4>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	801a      	strh	r2, [r3, #0]
				status_movimiento = RETROCEDIENDO;
 80018b2:	4b73      	ldr	r3, [pc, #460]	; (8001a80 <movimientoRC+0x28c>)
 80018b4:	2202      	movs	r2, #2
 80018b6:	701a      	strb	r2, [r3, #0]
				break;
 80018b8:	e1be      	b.n	8001c38 <movimientoRC+0x444>
			}

			if (giroIzq_cant != 0){
 80018ba:	4b6f      	ldr	r3, [pc, #444]	; (8001a78 <movimientoRC+0x284>)
 80018bc:	881b      	ldrh	r3, [r3, #0]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d009      	beq.n	80018d6 <movimientoRC+0xe2>
				acum_encoderL = 0;
 80018c2:	4b74      	ldr	r3, [pc, #464]	; (8001a94 <movimientoRC+0x2a0>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 80018c8:	4b73      	ldr	r3, [pc, #460]	; (8001a98 <movimientoRC+0x2a4>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	801a      	strh	r2, [r3, #0]
				status_movimiento = ROTANDO_IZQ;
 80018ce:	4b6c      	ldr	r3, [pc, #432]	; (8001a80 <movimientoRC+0x28c>)
 80018d0:	2203      	movs	r2, #3
 80018d2:	701a      	strb	r2, [r3, #0]
				break;
 80018d4:	e1b0      	b.n	8001c38 <movimientoRC+0x444>
			}

			if (giroDer_cant != 0){
 80018d6:	4b69      	ldr	r3, [pc, #420]	; (8001a7c <movimientoRC+0x288>)
 80018d8:	881b      	ldrh	r3, [r3, #0]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	f000 819b 	beq.w	8001c16 <movimientoRC+0x422>
				acum_encoderL = 0;
 80018e0:	4b6c      	ldr	r3, [pc, #432]	; (8001a94 <movimientoRC+0x2a0>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 80018e6:	4b6c      	ldr	r3, [pc, #432]	; (8001a98 <movimientoRC+0x2a4>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	801a      	strh	r2, [r3, #0]
				status_movimiento = ROTANDO_DER;
 80018ec:	4b64      	ldr	r3, [pc, #400]	; (8001a80 <movimientoRC+0x28c>)
 80018ee:	2204      	movs	r2, #4
 80018f0:	701a      	strb	r2, [r3, #0]
				break;
 80018f2:	e1a1      	b.n	8001c38 <movimientoRC+0x444>
			}

		break;
		case AVANZANDO:

			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 1);
 80018f4:	2201      	movs	r2, #1
 80018f6:	2101      	movs	r1, #1
 80018f8:	4862      	ldr	r0, [pc, #392]	; (8001a84 <movimientoRC+0x290>)
 80018fa:	f001 fe77 	bl	80035ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 1);
 80018fe:	2201      	movs	r2, #1
 8001900:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001904:	4860      	ldr	r0, [pc, #384]	; (8001a88 <movimientoRC+0x294>)
 8001906:	f001 fe71 	bl	80035ec <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 0);
 800190a:	2200      	movs	r2, #0
 800190c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001910:	485d      	ldr	r0, [pc, #372]	; (8001a88 <movimientoRC+0x294>)
 8001912:	f001 fe6b 	bl	80035ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 0);
 8001916:	2200      	movs	r2, #0
 8001918:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800191c:	485a      	ldr	r0, [pc, #360]	; (8001a88 <movimientoRC+0x294>)
 800191e:	f001 fe65 	bl	80035ec <HAL_GPIO_WritePin>

			velL = 5;
 8001922:	4b5a      	ldr	r3, [pc, #360]	; (8001a8c <movimientoRC+0x298>)
 8001924:	2205      	movs	r2, #5
 8001926:	701a      	strb	r2, [r3, #0]
			velR = 5;
 8001928:	4b59      	ldr	r3, [pc, #356]	; (8001a90 <movimientoRC+0x29c>)
 800192a:	2205      	movs	r2, #5
 800192c:	701a      	strb	r2, [r3, #0]

			encoders();
 800192e:	f000 f99b 	bl	8001c68 <encoders>

			if (avance_cant > ((acum_encoderL + acum_encoderR) >> 1) ) break;
 8001932:	4b4f      	ldr	r3, [pc, #316]	; (8001a70 <movimientoRC+0x27c>)
 8001934:	881b      	ldrh	r3, [r3, #0]
 8001936:	461a      	mov	r2, r3
 8001938:	4b56      	ldr	r3, [pc, #344]	; (8001a94 <movimientoRC+0x2a0>)
 800193a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800193e:	4619      	mov	r1, r3
 8001940:	4b55      	ldr	r3, [pc, #340]	; (8001a98 <movimientoRC+0x2a4>)
 8001942:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001946:	440b      	add	r3, r1
 8001948:	105b      	asrs	r3, r3, #1
 800194a:	429a      	cmp	r2, r3
 800194c:	f300 8165 	bgt.w	8001c1a <movimientoRC+0x426>

			avance_cant = 0;
 8001950:	4b47      	ldr	r3, [pc, #284]	; (8001a70 <movimientoRC+0x27c>)
 8001952:	2200      	movs	r2, #0
 8001954:	801a      	strh	r2, [r3, #0]

			status_movimiento = QUIETO;
 8001956:	4b4a      	ldr	r3, [pc, #296]	; (8001a80 <movimientoRC+0x28c>)
 8001958:	2200      	movs	r2, #0
 800195a:	701a      	strb	r2, [r3, #0]

			if (retroceso_cant != 0){
 800195c:	4b45      	ldr	r3, [pc, #276]	; (8001a74 <movimientoRC+0x280>)
 800195e:	881b      	ldrh	r3, [r3, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d009      	beq.n	8001978 <movimientoRC+0x184>
				acum_encoderL = 0;
 8001964:	4b4b      	ldr	r3, [pc, #300]	; (8001a94 <movimientoRC+0x2a0>)
 8001966:	2200      	movs	r2, #0
 8001968:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 800196a:	4b4b      	ldr	r3, [pc, #300]	; (8001a98 <movimientoRC+0x2a4>)
 800196c:	2200      	movs	r2, #0
 800196e:	801a      	strh	r2, [r3, #0]
				status_movimiento = RETROCEDIENDO;
 8001970:	4b43      	ldr	r3, [pc, #268]	; (8001a80 <movimientoRC+0x28c>)
 8001972:	2202      	movs	r2, #2
 8001974:	701a      	strb	r2, [r3, #0]
				break;
 8001976:	e15f      	b.n	8001c38 <movimientoRC+0x444>
			}

			if (giroIzq_cant != 0){
 8001978:	4b3f      	ldr	r3, [pc, #252]	; (8001a78 <movimientoRC+0x284>)
 800197a:	881b      	ldrh	r3, [r3, #0]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d009      	beq.n	8001994 <movimientoRC+0x1a0>
				acum_encoderL = 0;
 8001980:	4b44      	ldr	r3, [pc, #272]	; (8001a94 <movimientoRC+0x2a0>)
 8001982:	2200      	movs	r2, #0
 8001984:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 8001986:	4b44      	ldr	r3, [pc, #272]	; (8001a98 <movimientoRC+0x2a4>)
 8001988:	2200      	movs	r2, #0
 800198a:	801a      	strh	r2, [r3, #0]
				status_movimiento = ROTANDO_IZQ;
 800198c:	4b3c      	ldr	r3, [pc, #240]	; (8001a80 <movimientoRC+0x28c>)
 800198e:	2203      	movs	r2, #3
 8001990:	701a      	strb	r2, [r3, #0]
				break;
 8001992:	e151      	b.n	8001c38 <movimientoRC+0x444>
			}

			if (giroDer_cant != 0){
 8001994:	4b39      	ldr	r3, [pc, #228]	; (8001a7c <movimientoRC+0x288>)
 8001996:	881b      	ldrh	r3, [r3, #0]
 8001998:	2b00      	cmp	r3, #0
 800199a:	f000 8140 	beq.w	8001c1e <movimientoRC+0x42a>
				acum_encoderL = 0;
 800199e:	4b3d      	ldr	r3, [pc, #244]	; (8001a94 <movimientoRC+0x2a0>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 80019a4:	4b3c      	ldr	r3, [pc, #240]	; (8001a98 <movimientoRC+0x2a4>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	801a      	strh	r2, [r3, #0]
				status_movimiento = ROTANDO_DER;
 80019aa:	4b35      	ldr	r3, [pc, #212]	; (8001a80 <movimientoRC+0x28c>)
 80019ac:	2204      	movs	r2, #4
 80019ae:	701a      	strb	r2, [r3, #0]
				break;
 80019b0:	e142      	b.n	8001c38 <movimientoRC+0x444>
			}

		break;
		case ROTANDO_IZQ:

			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 0);
 80019b2:	2200      	movs	r2, #0
 80019b4:	2101      	movs	r1, #1
 80019b6:	4833      	ldr	r0, [pc, #204]	; (8001a84 <movimientoRC+0x290>)
 80019b8:	f001 fe18 	bl	80035ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 1);
 80019bc:	2201      	movs	r2, #1
 80019be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019c2:	4831      	ldr	r0, [pc, #196]	; (8001a88 <movimientoRC+0x294>)
 80019c4:	f001 fe12 	bl	80035ec <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 1);
 80019c8:	2201      	movs	r2, #1
 80019ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019ce:	482e      	ldr	r0, [pc, #184]	; (8001a88 <movimientoRC+0x294>)
 80019d0:	f001 fe0c 	bl	80035ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 0);
 80019d4:	2200      	movs	r2, #0
 80019d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019da:	482b      	ldr	r0, [pc, #172]	; (8001a88 <movimientoRC+0x294>)
 80019dc:	f001 fe06 	bl	80035ec <HAL_GPIO_WritePin>

			velL = 5;
 80019e0:	4b2a      	ldr	r3, [pc, #168]	; (8001a8c <movimientoRC+0x298>)
 80019e2:	2205      	movs	r2, #5
 80019e4:	701a      	strb	r2, [r3, #0]
			velR = 5;
 80019e6:	4b2a      	ldr	r3, [pc, #168]	; (8001a90 <movimientoRC+0x29c>)
 80019e8:	2205      	movs	r2, #5
 80019ea:	701a      	strb	r2, [r3, #0]

			encoders();
 80019ec:	f000 f93c 	bl	8001c68 <encoders>

			if (giroIzq_cant > ((acum_encoderL + acum_encoderR) >> 1) ) break;
 80019f0:	4b21      	ldr	r3, [pc, #132]	; (8001a78 <movimientoRC+0x284>)
 80019f2:	881b      	ldrh	r3, [r3, #0]
 80019f4:	461a      	mov	r2, r3
 80019f6:	4b27      	ldr	r3, [pc, #156]	; (8001a94 <movimientoRC+0x2a0>)
 80019f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019fc:	4619      	mov	r1, r3
 80019fe:	4b26      	ldr	r3, [pc, #152]	; (8001a98 <movimientoRC+0x2a4>)
 8001a00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a04:	440b      	add	r3, r1
 8001a06:	105b      	asrs	r3, r3, #1
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	f300 810a 	bgt.w	8001c22 <movimientoRC+0x42e>

			giroIzq_cant = 0;
 8001a0e:	4b1a      	ldr	r3, [pc, #104]	; (8001a78 <movimientoRC+0x284>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	801a      	strh	r2, [r3, #0]

			status_movimiento = QUIETO;
 8001a14:	4b1a      	ldr	r3, [pc, #104]	; (8001a80 <movimientoRC+0x28c>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	701a      	strb	r2, [r3, #0]

			if (avance_cant != 0){
 8001a1a:	4b15      	ldr	r3, [pc, #84]	; (8001a70 <movimientoRC+0x27c>)
 8001a1c:	881b      	ldrh	r3, [r3, #0]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d009      	beq.n	8001a36 <movimientoRC+0x242>
				acum_encoderL = 0;
 8001a22:	4b1c      	ldr	r3, [pc, #112]	; (8001a94 <movimientoRC+0x2a0>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 8001a28:	4b1b      	ldr	r3, [pc, #108]	; (8001a98 <movimientoRC+0x2a4>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	801a      	strh	r2, [r3, #0]
				status_movimiento = AVANZANDO;
 8001a2e:	4b14      	ldr	r3, [pc, #80]	; (8001a80 <movimientoRC+0x28c>)
 8001a30:	2201      	movs	r2, #1
 8001a32:	701a      	strb	r2, [r3, #0]
				break;
 8001a34:	e100      	b.n	8001c38 <movimientoRC+0x444>
			}

			if (retroceso_cant != 0){
 8001a36:	4b0f      	ldr	r3, [pc, #60]	; (8001a74 <movimientoRC+0x280>)
 8001a38:	881b      	ldrh	r3, [r3, #0]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d009      	beq.n	8001a52 <movimientoRC+0x25e>
				acum_encoderL = 0;
 8001a3e:	4b15      	ldr	r3, [pc, #84]	; (8001a94 <movimientoRC+0x2a0>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 8001a44:	4b14      	ldr	r3, [pc, #80]	; (8001a98 <movimientoRC+0x2a4>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	801a      	strh	r2, [r3, #0]
				status_movimiento = RETROCEDIENDO;
 8001a4a:	4b0d      	ldr	r3, [pc, #52]	; (8001a80 <movimientoRC+0x28c>)
 8001a4c:	2202      	movs	r2, #2
 8001a4e:	701a      	strb	r2, [r3, #0]
				break;
 8001a50:	e0f2      	b.n	8001c38 <movimientoRC+0x444>
			}

			if (giroDer_cant != 0){
 8001a52:	4b0a      	ldr	r3, [pc, #40]	; (8001a7c <movimientoRC+0x288>)
 8001a54:	881b      	ldrh	r3, [r3, #0]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	f000 80e5 	beq.w	8001c26 <movimientoRC+0x432>
				acum_encoderL = 0;
 8001a5c:	4b0d      	ldr	r3, [pc, #52]	; (8001a94 <movimientoRC+0x2a0>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 8001a62:	4b0d      	ldr	r3, [pc, #52]	; (8001a98 <movimientoRC+0x2a4>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	801a      	strh	r2, [r3, #0]
				status_movimiento = ROTANDO_DER;
 8001a68:	4b05      	ldr	r3, [pc, #20]	; (8001a80 <movimientoRC+0x28c>)
 8001a6a:	2204      	movs	r2, #4
 8001a6c:	701a      	strb	r2, [r3, #0]
				break;
 8001a6e:	e0e3      	b.n	8001c38 <movimientoRC+0x444>
 8001a70:	20000030 	.word	0x20000030
 8001a74:	20000032 	.word	0x20000032
 8001a78:	20000034 	.word	0x20000034
 8001a7c:	20000036 	.word	0x20000036
 8001a80:	2000002e 	.word	0x2000002e
 8001a84:	40020c00 	.word	0x40020c00
 8001a88:	40020800 	.word	0x40020800
 8001a8c:	20000001 	.word	0x20000001
 8001a90:	20000002 	.word	0x20000002
 8001a94:	20000050 	.word	0x20000050
 8001a98:	20000052 	.word	0x20000052
			}

		break;
		case ROTANDO_DER:
			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 1);
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	2101      	movs	r1, #1
 8001aa0:	4866      	ldr	r0, [pc, #408]	; (8001c3c <movimientoRC+0x448>)
 8001aa2:	f001 fda3 	bl	80035ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 0);
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001aac:	4864      	ldr	r0, [pc, #400]	; (8001c40 <movimientoRC+0x44c>)
 8001aae:	f001 fd9d 	bl	80035ec <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 0);
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ab8:	4861      	ldr	r0, [pc, #388]	; (8001c40 <movimientoRC+0x44c>)
 8001aba:	f001 fd97 	bl	80035ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 1);
 8001abe:	2201      	movs	r2, #1
 8001ac0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ac4:	485e      	ldr	r0, [pc, #376]	; (8001c40 <movimientoRC+0x44c>)
 8001ac6:	f001 fd91 	bl	80035ec <HAL_GPIO_WritePin>

			velL = 5;
 8001aca:	4b5e      	ldr	r3, [pc, #376]	; (8001c44 <movimientoRC+0x450>)
 8001acc:	2205      	movs	r2, #5
 8001ace:	701a      	strb	r2, [r3, #0]
			velR = 5;
 8001ad0:	4b5d      	ldr	r3, [pc, #372]	; (8001c48 <movimientoRC+0x454>)
 8001ad2:	2205      	movs	r2, #5
 8001ad4:	701a      	strb	r2, [r3, #0]

			encoders();
 8001ad6:	f000 f8c7 	bl	8001c68 <encoders>

			if (giroDer_cant > ((acum_encoderL + acum_encoderR) >> 1) ) break;
 8001ada:	4b5c      	ldr	r3, [pc, #368]	; (8001c4c <movimientoRC+0x458>)
 8001adc:	881b      	ldrh	r3, [r3, #0]
 8001ade:	461a      	mov	r2, r3
 8001ae0:	4b5b      	ldr	r3, [pc, #364]	; (8001c50 <movimientoRC+0x45c>)
 8001ae2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	4b5a      	ldr	r3, [pc, #360]	; (8001c54 <movimientoRC+0x460>)
 8001aea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aee:	440b      	add	r3, r1
 8001af0:	105b      	asrs	r3, r3, #1
 8001af2:	429a      	cmp	r2, r3
 8001af4:	f300 8099 	bgt.w	8001c2a <movimientoRC+0x436>

			giroDer_cant = 0;
 8001af8:	4b54      	ldr	r3, [pc, #336]	; (8001c4c <movimientoRC+0x458>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	801a      	strh	r2, [r3, #0]

			status_movimiento = QUIETO;
 8001afe:	4b56      	ldr	r3, [pc, #344]	; (8001c58 <movimientoRC+0x464>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	701a      	strb	r2, [r3, #0]

			if (avance_cant != 0){
 8001b04:	4b55      	ldr	r3, [pc, #340]	; (8001c5c <movimientoRC+0x468>)
 8001b06:	881b      	ldrh	r3, [r3, #0]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d009      	beq.n	8001b20 <movimientoRC+0x32c>
				acum_encoderL = 0;
 8001b0c:	4b50      	ldr	r3, [pc, #320]	; (8001c50 <movimientoRC+0x45c>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 8001b12:	4b50      	ldr	r3, [pc, #320]	; (8001c54 <movimientoRC+0x460>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	801a      	strh	r2, [r3, #0]
				status_movimiento = AVANZANDO;
 8001b18:	4b4f      	ldr	r3, [pc, #316]	; (8001c58 <movimientoRC+0x464>)
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	701a      	strb	r2, [r3, #0]
				break;
 8001b1e:	e08b      	b.n	8001c38 <movimientoRC+0x444>
			}

			if (retroceso_cant != 0){
 8001b20:	4b4f      	ldr	r3, [pc, #316]	; (8001c60 <movimientoRC+0x46c>)
 8001b22:	881b      	ldrh	r3, [r3, #0]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d009      	beq.n	8001b3c <movimientoRC+0x348>
				acum_encoderL = 0;
 8001b28:	4b49      	ldr	r3, [pc, #292]	; (8001c50 <movimientoRC+0x45c>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 8001b2e:	4b49      	ldr	r3, [pc, #292]	; (8001c54 <movimientoRC+0x460>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	801a      	strh	r2, [r3, #0]
				status_movimiento = RETROCEDIENDO;
 8001b34:	4b48      	ldr	r3, [pc, #288]	; (8001c58 <movimientoRC+0x464>)
 8001b36:	2202      	movs	r2, #2
 8001b38:	701a      	strb	r2, [r3, #0]
				break;
 8001b3a:	e07d      	b.n	8001c38 <movimientoRC+0x444>
			}

			if (giroIzq_cant != 0){
 8001b3c:	4b49      	ldr	r3, [pc, #292]	; (8001c64 <movimientoRC+0x470>)
 8001b3e:	881b      	ldrh	r3, [r3, #0]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d074      	beq.n	8001c2e <movimientoRC+0x43a>
				acum_encoderL = 0;
 8001b44:	4b42      	ldr	r3, [pc, #264]	; (8001c50 <movimientoRC+0x45c>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 8001b4a:	4b42      	ldr	r3, [pc, #264]	; (8001c54 <movimientoRC+0x460>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	801a      	strh	r2, [r3, #0]
				status_movimiento = ROTANDO_IZQ;
 8001b50:	4b41      	ldr	r3, [pc, #260]	; (8001c58 <movimientoRC+0x464>)
 8001b52:	2203      	movs	r2, #3
 8001b54:	701a      	strb	r2, [r3, #0]
				break;
 8001b56:	e06f      	b.n	8001c38 <movimientoRC+0x444>
			}

		break;
		case RETROCEDIENDO:
			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 0);
 8001b58:	2200      	movs	r2, #0
 8001b5a:	2101      	movs	r1, #1
 8001b5c:	4837      	ldr	r0, [pc, #220]	; (8001c3c <movimientoRC+0x448>)
 8001b5e:	f001 fd45 	bl	80035ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 0);
 8001b62:	2200      	movs	r2, #0
 8001b64:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b68:	4835      	ldr	r0, [pc, #212]	; (8001c40 <movimientoRC+0x44c>)
 8001b6a:	f001 fd3f 	bl	80035ec <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 1);
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b74:	4832      	ldr	r0, [pc, #200]	; (8001c40 <movimientoRC+0x44c>)
 8001b76:	f001 fd39 	bl	80035ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 1);
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b80:	482f      	ldr	r0, [pc, #188]	; (8001c40 <movimientoRC+0x44c>)
 8001b82:	f001 fd33 	bl	80035ec <HAL_GPIO_WritePin>

			velL = 5;
 8001b86:	4b2f      	ldr	r3, [pc, #188]	; (8001c44 <movimientoRC+0x450>)
 8001b88:	2205      	movs	r2, #5
 8001b8a:	701a      	strb	r2, [r3, #0]
			velR = 5;
 8001b8c:	4b2e      	ldr	r3, [pc, #184]	; (8001c48 <movimientoRC+0x454>)
 8001b8e:	2205      	movs	r2, #5
 8001b90:	701a      	strb	r2, [r3, #0]

			encoders();
 8001b92:	f000 f869 	bl	8001c68 <encoders>

			if (retroceso_cant > ((acum_encoderL + acum_encoderR) >> 1) ) break;
 8001b96:	4b32      	ldr	r3, [pc, #200]	; (8001c60 <movimientoRC+0x46c>)
 8001b98:	881b      	ldrh	r3, [r3, #0]
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	4b2c      	ldr	r3, [pc, #176]	; (8001c50 <movimientoRC+0x45c>)
 8001b9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4b2b      	ldr	r3, [pc, #172]	; (8001c54 <movimientoRC+0x460>)
 8001ba6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001baa:	440b      	add	r3, r1
 8001bac:	105b      	asrs	r3, r3, #1
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	dc3f      	bgt.n	8001c32 <movimientoRC+0x43e>

			retroceso_cant = 0;
 8001bb2:	4b2b      	ldr	r3, [pc, #172]	; (8001c60 <movimientoRC+0x46c>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	801a      	strh	r2, [r3, #0]

			status_movimiento = QUIETO;
 8001bb8:	4b27      	ldr	r3, [pc, #156]	; (8001c58 <movimientoRC+0x464>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	701a      	strb	r2, [r3, #0]

			if (avance_cant != 0){
 8001bbe:	4b27      	ldr	r3, [pc, #156]	; (8001c5c <movimientoRC+0x468>)
 8001bc0:	881b      	ldrh	r3, [r3, #0]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d009      	beq.n	8001bda <movimientoRC+0x3e6>
				acum_encoderL = 0;
 8001bc6:	4b22      	ldr	r3, [pc, #136]	; (8001c50 <movimientoRC+0x45c>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 8001bcc:	4b21      	ldr	r3, [pc, #132]	; (8001c54 <movimientoRC+0x460>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	801a      	strh	r2, [r3, #0]
				status_movimiento = AVANZANDO;
 8001bd2:	4b21      	ldr	r3, [pc, #132]	; (8001c58 <movimientoRC+0x464>)
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	701a      	strb	r2, [r3, #0]
				break;
 8001bd8:	e02e      	b.n	8001c38 <movimientoRC+0x444>
			}

			if (giroIzq_cant != 0){
 8001bda:	4b22      	ldr	r3, [pc, #136]	; (8001c64 <movimientoRC+0x470>)
 8001bdc:	881b      	ldrh	r3, [r3, #0]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d009      	beq.n	8001bf6 <movimientoRC+0x402>
				acum_encoderL = 0;
 8001be2:	4b1b      	ldr	r3, [pc, #108]	; (8001c50 <movimientoRC+0x45c>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 8001be8:	4b1a      	ldr	r3, [pc, #104]	; (8001c54 <movimientoRC+0x460>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	801a      	strh	r2, [r3, #0]
				status_movimiento = ROTANDO_IZQ;
 8001bee:	4b1a      	ldr	r3, [pc, #104]	; (8001c58 <movimientoRC+0x464>)
 8001bf0:	2203      	movs	r2, #3
 8001bf2:	701a      	strb	r2, [r3, #0]
				break;
 8001bf4:	e020      	b.n	8001c38 <movimientoRC+0x444>
			}

			if (giroDer_cant != 0){
 8001bf6:	4b15      	ldr	r3, [pc, #84]	; (8001c4c <movimientoRC+0x458>)
 8001bf8:	881b      	ldrh	r3, [r3, #0]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d01b      	beq.n	8001c36 <movimientoRC+0x442>
				acum_encoderL = 0;
 8001bfe:	4b14      	ldr	r3, [pc, #80]	; (8001c50 <movimientoRC+0x45c>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 8001c04:	4b13      	ldr	r3, [pc, #76]	; (8001c54 <movimientoRC+0x460>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	801a      	strh	r2, [r3, #0]
				status_movimiento = ROTANDO_DER;
 8001c0a:	4b13      	ldr	r3, [pc, #76]	; (8001c58 <movimientoRC+0x464>)
 8001c0c:	2204      	movs	r2, #4
 8001c0e:	701a      	strb	r2, [r3, #0]
				break;
 8001c10:	e012      	b.n	8001c38 <movimientoRC+0x444>

		break;
		case PIVOTE_DER_AVAN:

		default:
		break;
 8001c12:	bf00      	nop
 8001c14:	e010      	b.n	8001c38 <movimientoRC+0x444>
		break;
 8001c16:	bf00      	nop
 8001c18:	e00e      	b.n	8001c38 <movimientoRC+0x444>
			if (avance_cant > ((acum_encoderL + acum_encoderR) >> 1) ) break;
 8001c1a:	bf00      	nop
 8001c1c:	e00c      	b.n	8001c38 <movimientoRC+0x444>
		break;
 8001c1e:	bf00      	nop
 8001c20:	e00a      	b.n	8001c38 <movimientoRC+0x444>
			if (giroIzq_cant > ((acum_encoderL + acum_encoderR) >> 1) ) break;
 8001c22:	bf00      	nop
 8001c24:	e008      	b.n	8001c38 <movimientoRC+0x444>
		break;
 8001c26:	bf00      	nop
 8001c28:	e006      	b.n	8001c38 <movimientoRC+0x444>
			if (giroDer_cant > ((acum_encoderL + acum_encoderR) >> 1) ) break;
 8001c2a:	bf00      	nop
 8001c2c:	e004      	b.n	8001c38 <movimientoRC+0x444>
		break;
 8001c2e:	bf00      	nop
 8001c30:	e002      	b.n	8001c38 <movimientoRC+0x444>
			if (retroceso_cant > ((acum_encoderL + acum_encoderR) >> 1) ) break;
 8001c32:	bf00      	nop
 8001c34:	e000      	b.n	8001c38 <movimientoRC+0x444>
		break;
 8001c36:	bf00      	nop

	} //fin switch status_movimiento

} //fin movimientoRC()
 8001c38:	bf00      	nop
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	40020c00 	.word	0x40020c00
 8001c40:	40020800 	.word	0x40020800
 8001c44:	20000001 	.word	0x20000001
 8001c48:	20000002 	.word	0x20000002
 8001c4c:	20000036 	.word	0x20000036
 8001c50:	20000050 	.word	0x20000050
 8001c54:	20000052 	.word	0x20000052
 8001c58:	2000002e 	.word	0x2000002e
 8001c5c:	20000030 	.word	0x20000030
 8001c60:	20000032 	.word	0x20000032
 8001c64:	20000034 	.word	0x20000034

08001c68 <encoders>:

void encoders (void){
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0

	if (!flag_encoders) return;
 8001c6c:	4b2a      	ldr	r3, [pc, #168]	; (8001d18 <encoders+0xb0>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d04b      	beq.n	8001d0c <encoders+0xa4>

	encoderL = __HAL_TIM_GET_COUNTER(&htim3);
 8001c74:	4b29      	ldr	r3, [pc, #164]	; (8001d1c <encoders+0xb4>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7a:	b21a      	sxth	r2, r3
 8001c7c:	4b28      	ldr	r3, [pc, #160]	; (8001d20 <encoders+0xb8>)
 8001c7e:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8001c80:	4b26      	ldr	r3, [pc, #152]	; (8001d1c <encoders+0xb4>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2200      	movs	r2, #0
 8001c86:	625a      	str	r2, [r3, #36]	; 0x24
	encoderR = __HAL_TIM_GET_COUNTER(&htim2);
 8001c88:	4b26      	ldr	r3, [pc, #152]	; (8001d24 <encoders+0xbc>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8e:	b21a      	sxth	r2, r3
 8001c90:	4b25      	ldr	r3, [pc, #148]	; (8001d28 <encoders+0xc0>)
 8001c92:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8001c94:	4b23      	ldr	r3, [pc, #140]	; (8001d24 <encoders+0xbc>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	625a      	str	r2, [r3, #36]	; 0x24
//	}else if (encoderL < velL){
//		if (TIM4->CCR1 < 85)
//			TIM4->CCR1++;
//	}

	TIM4->CCR1 += velL - encoderL;
 8001c9c:	4b23      	ldr	r3, [pc, #140]	; (8001d2c <encoders+0xc4>)
 8001c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ca0:	4a23      	ldr	r2, [pc, #140]	; (8001d30 <encoders+0xc8>)
 8001ca2:	7812      	ldrb	r2, [r2, #0]
 8001ca4:	4611      	mov	r1, r2
 8001ca6:	4a1e      	ldr	r2, [pc, #120]	; (8001d20 <encoders+0xb8>)
 8001ca8:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001cac:	1a8a      	subs	r2, r1, r2
 8001cae:	4611      	mov	r1, r2
 8001cb0:	4a1e      	ldr	r2, [pc, #120]	; (8001d2c <encoders+0xc4>)
 8001cb2:	440b      	add	r3, r1
 8001cb4:	6353      	str	r3, [r2, #52]	; 0x34
//	}else if (encoderR < velR){
//		if (TIM4->CCR2 < 85)
//			TIM4->CCR2++;
//	}

	TIM4->CCR2 += velR - encoderR;
 8001cb6:	4b1d      	ldr	r3, [pc, #116]	; (8001d2c <encoders+0xc4>)
 8001cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cba:	4a1e      	ldr	r2, [pc, #120]	; (8001d34 <encoders+0xcc>)
 8001cbc:	7812      	ldrb	r2, [r2, #0]
 8001cbe:	4611      	mov	r1, r2
 8001cc0:	4a19      	ldr	r2, [pc, #100]	; (8001d28 <encoders+0xc0>)
 8001cc2:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001cc6:	1a8a      	subs	r2, r1, r2
 8001cc8:	4611      	mov	r1, r2
 8001cca:	4a18      	ldr	r2, [pc, #96]	; (8001d2c <encoders+0xc4>)
 8001ccc:	440b      	add	r3, r1
 8001cce:	6393      	str	r3, [r2, #56]	; 0x38
//	if (TIM4->CCR2 < 62) TIM4->CCR2 = 62;
//	if (TIM4->CCR2 > 82) TIM4->CCR2 = 82;

	acum_encoderL += encoderL;
 8001cd0:	4b19      	ldr	r3, [pc, #100]	; (8001d38 <encoders+0xd0>)
 8001cd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	4b11      	ldr	r3, [pc, #68]	; (8001d20 <encoders+0xb8>)
 8001cda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	4413      	add	r3, r2
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	b21a      	sxth	r2, r3
 8001ce6:	4b14      	ldr	r3, [pc, #80]	; (8001d38 <encoders+0xd0>)
 8001ce8:	801a      	strh	r2, [r3, #0]
	acum_encoderR += encoderR;
 8001cea:	4b14      	ldr	r3, [pc, #80]	; (8001d3c <encoders+0xd4>)
 8001cec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cf0:	b29a      	uxth	r2, r3
 8001cf2:	4b0d      	ldr	r3, [pc, #52]	; (8001d28 <encoders+0xc0>)
 8001cf4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	4413      	add	r3, r2
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	b21a      	sxth	r2, r3
 8001d00:	4b0e      	ldr	r3, [pc, #56]	; (8001d3c <encoders+0xd4>)
 8001d02:	801a      	strh	r2, [r3, #0]

	flag_encoders = 0;
 8001d04:	4b04      	ldr	r3, [pc, #16]	; (8001d18 <encoders+0xb0>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	701a      	strb	r2, [r3, #0]
 8001d0a:	e000      	b.n	8001d0e <encoders+0xa6>
	if (!flag_encoders) return;
 8001d0c:	bf00      	nop

} //fin encoders()
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	2000004e 	.word	0x2000004e
 8001d1c:	20000180 	.word	0x20000180
 8001d20:	200000ce 	.word	0x200000ce
 8001d24:	200001c0 	.word	0x200001c0
 8001d28:	200000ec 	.word	0x200000ec
 8001d2c:	40000800 	.word	0x40000800
 8001d30:	20000001 	.word	0x20000001
 8001d34:	20000002 	.word	0x20000002
 8001d38:	20000050 	.word	0x20000050
 8001d3c:	20000052 	.word	0x20000052

08001d40 <check_rxUart>:

	HAL_UART_Transmit(&huart7, txUart, 4, 20);
	HAL_UART_Receive_IT(&huart7, rxUart, 4);
}

void check_rxUart (void){
 8001d40:	b598      	push	{r3, r4, r7, lr}
 8001d42:	af00      	add	r7, sp, #0

	if (rxUart[3] != 0){
 8001d44:	4b8e      	ldr	r3, [pc, #568]	; (8001f80 <check_rxUart+0x240>)
 8001d46:	78db      	ldrb	r3, [r3, #3]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d010      	beq.n	8001d6e <check_rxUart+0x2e>
		txUart[0] = CMD_ERROR;
 8001d4c:	4b8d      	ldr	r3, [pc, #564]	; (8001f84 <check_rxUart+0x244>)
 8001d4e:	2204      	movs	r2, #4
 8001d50:	701a      	strb	r2, [r3, #0]
		txUart[3] = '\0';
 8001d52:	4b8c      	ldr	r3, [pc, #560]	; (8001f84 <check_rxUart+0x244>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	70da      	strb	r2, [r3, #3]
		HAL_UART_Transmit_IT(&huart7, txUart, 4);
 8001d58:	2204      	movs	r2, #4
 8001d5a:	498a      	ldr	r1, [pc, #552]	; (8001f84 <check_rxUart+0x244>)
 8001d5c:	488a      	ldr	r0, [pc, #552]	; (8001f88 <check_rxUart+0x248>)
 8001d5e:	f004 fbc0 	bl	80064e2 <HAL_UART_Transmit_IT>
		HAL_UART_Receive_IT(&huart7, rxUart, 4);
 8001d62:	2204      	movs	r2, #4
 8001d64:	4986      	ldr	r1, [pc, #536]	; (8001f80 <check_rxUart+0x240>)
 8001d66:	4888      	ldr	r0, [pc, #544]	; (8001f88 <check_rxUart+0x248>)
 8001d68:	f004 fc00 	bl	800656c <HAL_UART_Receive_IT>
		return;
 8001d6c:	e1ac      	b.n	80020c8 <check_rxUart+0x388>
	}

	switch (rxUart[0]) {
 8001d6e:	4b84      	ldr	r3, [pc, #528]	; (8001f80 <check_rxUart+0x240>)
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	3b01      	subs	r3, #1
 8001d74:	2b15      	cmp	r3, #21
 8001d76:	f200 81a2 	bhi.w	80020be <check_rxUart+0x37e>
 8001d7a:	a201      	add	r2, pc, #4	; (adr r2, 8001d80 <check_rxUart+0x40>)
 8001d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d80:	08001dd9 	.word	0x08001dd9
 8001d84:	080020bf 	.word	0x080020bf
 8001d88:	080020bf 	.word	0x080020bf
 8001d8c:	080020bf 	.word	0x080020bf
 8001d90:	08001df7 	.word	0x08001df7
 8001d94:	080020bf 	.word	0x080020bf
 8001d98:	080020bf 	.word	0x080020bf
 8001d9c:	080020bf 	.word	0x080020bf
 8001da0:	080020bf 	.word	0x080020bf
 8001da4:	080020bf 	.word	0x080020bf
 8001da8:	080020bf 	.word	0x080020bf
 8001dac:	080020bf 	.word	0x080020bf
 8001db0:	08001e67 	.word	0x08001e67
 8001db4:	08001ed7 	.word	0x08001ed7
 8001db8:	08001f0f 	.word	0x08001f0f
 8001dbc:	08001e9f 	.word	0x08001e9f
 8001dc0:	080020bf 	.word	0x080020bf
 8001dc4:	080020bf 	.word	0x080020bf
 8001dc8:	080020bf 	.word	0x080020bf
 8001dcc:	08001f47 	.word	0x08001f47
 8001dd0:	080020bf 	.word	0x080020bf
 8001dd4:	08001fb1 	.word	0x08001fb1
		case HOLA:
			esp01Presente = 1;
 8001dd8:	4b6c      	ldr	r3, [pc, #432]	; (8001f8c <check_rxUart+0x24c>)
 8001dda:	2201      	movs	r2, #1
 8001ddc:	701a      	strb	r2, [r3, #0]
			txUart[0] = HOLA;
 8001dde:	4b69      	ldr	r3, [pc, #420]	; (8001f84 <check_rxUart+0x244>)
 8001de0:	2201      	movs	r2, #1
 8001de2:	701a      	strb	r2, [r3, #0]
			txUart[3] = '\0';
 8001de4:	4b67      	ldr	r3, [pc, #412]	; (8001f84 <check_rxUart+0x244>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	70da      	strb	r2, [r3, #3]
			HAL_UART_Transmit_IT(&huart7, txUart, 4);
 8001dea:	2204      	movs	r2, #4
 8001dec:	4965      	ldr	r1, [pc, #404]	; (8001f84 <check_rxUart+0x244>)
 8001dee:	4866      	ldr	r0, [pc, #408]	; (8001f88 <check_rxUart+0x248>)
 8001df0:	f004 fb77 	bl	80064e2 <HAL_UART_Transmit_IT>

		break;
 8001df4:	e163      	b.n	80020be <check_rxUart+0x37e>
		case MODO:

			switch (rxUart[1]) {
 8001df6:	4b62      	ldr	r3, [pc, #392]	; (8001f80 <check_rxUart+0x240>)
 8001df8:	785b      	ldrb	r3, [r3, #1]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d002      	beq.n	8001e04 <check_rxUart+0xc4>
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d012      	beq.n	8001e28 <check_rxUart+0xe8>
 8001e02:	e023      	b.n	8001e4c <check_rxUart+0x10c>
				case AUTOMATICO:
					modoFuncionamiento = AUTOMATICO;
 8001e04:	4b62      	ldr	r3, [pc, #392]	; (8001f90 <check_rxUart+0x250>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	701a      	strb	r2, [r3, #0]
					flag_encoders = 0;
 8001e0a:	4b62      	ldr	r3, [pc, #392]	; (8001f94 <check_rxUart+0x254>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	701a      	strb	r2, [r3, #0]
					txUart[0] = OK_;
 8001e10:	4b5c      	ldr	r3, [pc, #368]	; (8001f84 <check_rxUart+0x244>)
 8001e12:	2202      	movs	r2, #2
 8001e14:	701a      	strb	r2, [r3, #0]
					txUart[3] = '\0';
 8001e16:	4b5b      	ldr	r3, [pc, #364]	; (8001f84 <check_rxUart+0x244>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	70da      	strb	r2, [r3, #3]
					HAL_UART_Transmit_IT(&huart7, txUart, 4);
 8001e1c:	2204      	movs	r2, #4
 8001e1e:	4959      	ldr	r1, [pc, #356]	; (8001f84 <check_rxUart+0x244>)
 8001e20:	4859      	ldr	r0, [pc, #356]	; (8001f88 <check_rxUart+0x248>)
 8001e22:	f004 fb5e 	bl	80064e2 <HAL_UART_Transmit_IT>
				break;
 8001e26:	e01d      	b.n	8001e64 <check_rxUart+0x124>
				case MANUAL:
					status_movimiento = QUIETO;
 8001e28:	4b5b      	ldr	r3, [pc, #364]	; (8001f98 <check_rxUart+0x258>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	701a      	strb	r2, [r3, #0]
					modoFuncionamiento = MANUAL;
 8001e2e:	4b58      	ldr	r3, [pc, #352]	; (8001f90 <check_rxUart+0x250>)
 8001e30:	2201      	movs	r2, #1
 8001e32:	701a      	strb	r2, [r3, #0]
					txUart[0] = OK_;
 8001e34:	4b53      	ldr	r3, [pc, #332]	; (8001f84 <check_rxUart+0x244>)
 8001e36:	2202      	movs	r2, #2
 8001e38:	701a      	strb	r2, [r3, #0]
					txUart[3] = '\0';
 8001e3a:	4b52      	ldr	r3, [pc, #328]	; (8001f84 <check_rxUart+0x244>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	70da      	strb	r2, [r3, #3]
					HAL_UART_Transmit_IT(&huart7, txUart, 4);
 8001e40:	2204      	movs	r2, #4
 8001e42:	4950      	ldr	r1, [pc, #320]	; (8001f84 <check_rxUart+0x244>)
 8001e44:	4850      	ldr	r0, [pc, #320]	; (8001f88 <check_rxUart+0x248>)
 8001e46:	f004 fb4c 	bl	80064e2 <HAL_UART_Transmit_IT>
				break;
 8001e4a:	e00b      	b.n	8001e64 <check_rxUart+0x124>
				default:
					txUart[0] = CMD_ERROR;
 8001e4c:	4b4d      	ldr	r3, [pc, #308]	; (8001f84 <check_rxUart+0x244>)
 8001e4e:	2204      	movs	r2, #4
 8001e50:	701a      	strb	r2, [r3, #0]
					txUart[3] = '\0';
 8001e52:	4b4c      	ldr	r3, [pc, #304]	; (8001f84 <check_rxUart+0x244>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	70da      	strb	r2, [r3, #3]
					HAL_UART_Transmit_IT(&huart7, txUart, 4);
 8001e58:	2204      	movs	r2, #4
 8001e5a:	494a      	ldr	r1, [pc, #296]	; (8001f84 <check_rxUart+0x244>)
 8001e5c:	484a      	ldr	r0, [pc, #296]	; (8001f88 <check_rxUart+0x248>)
 8001e5e:	f004 fb40 	bl	80064e2 <HAL_UART_Transmit_IT>
			} //end switch rxUart[1]

		break;
 8001e62:	e12c      	b.n	80020be <check_rxUart+0x37e>
 8001e64:	e12b      	b.n	80020be <check_rxUart+0x37e>
		case AVANCE:
			avance_cant += (uint16_t) (rxUart[2] + (rxUart[1] << 8));
 8001e66:	4b46      	ldr	r3, [pc, #280]	; (8001f80 <check_rxUart+0x240>)
 8001e68:	789b      	ldrb	r3, [r3, #2]
 8001e6a:	b29a      	uxth	r2, r3
 8001e6c:	4b44      	ldr	r3, [pc, #272]	; (8001f80 <check_rxUart+0x240>)
 8001e6e:	785b      	ldrb	r3, [r3, #1]
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	021b      	lsls	r3, r3, #8
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	4413      	add	r3, r2
 8001e78:	b29a      	uxth	r2, r3
 8001e7a:	4b48      	ldr	r3, [pc, #288]	; (8001f9c <check_rxUart+0x25c>)
 8001e7c:	881b      	ldrh	r3, [r3, #0]
 8001e7e:	4413      	add	r3, r2
 8001e80:	b29a      	uxth	r2, r3
 8001e82:	4b46      	ldr	r3, [pc, #280]	; (8001f9c <check_rxUart+0x25c>)
 8001e84:	801a      	strh	r2, [r3, #0]

			txUart[0] = OK_;
 8001e86:	4b3f      	ldr	r3, [pc, #252]	; (8001f84 <check_rxUart+0x244>)
 8001e88:	2202      	movs	r2, #2
 8001e8a:	701a      	strb	r2, [r3, #0]
			txUart[3] = '\0';
 8001e8c:	4b3d      	ldr	r3, [pc, #244]	; (8001f84 <check_rxUart+0x244>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	70da      	strb	r2, [r3, #3]
			HAL_UART_Transmit_IT(&huart7, txUart, 4);
 8001e92:	2204      	movs	r2, #4
 8001e94:	493b      	ldr	r1, [pc, #236]	; (8001f84 <check_rxUart+0x244>)
 8001e96:	483c      	ldr	r0, [pc, #240]	; (8001f88 <check_rxUart+0x248>)
 8001e98:	f004 fb23 	bl	80064e2 <HAL_UART_Transmit_IT>
		break;
 8001e9c:	e10f      	b.n	80020be <check_rxUart+0x37e>
		case RETROCEDE:
			retroceso_cant += (uint16_t) (rxUart[2] + (rxUart[1] << 8));
 8001e9e:	4b38      	ldr	r3, [pc, #224]	; (8001f80 <check_rxUart+0x240>)
 8001ea0:	789b      	ldrb	r3, [r3, #2]
 8001ea2:	b29a      	uxth	r2, r3
 8001ea4:	4b36      	ldr	r3, [pc, #216]	; (8001f80 <check_rxUart+0x240>)
 8001ea6:	785b      	ldrb	r3, [r3, #1]
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	021b      	lsls	r3, r3, #8
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	4413      	add	r3, r2
 8001eb0:	b29a      	uxth	r2, r3
 8001eb2:	4b3b      	ldr	r3, [pc, #236]	; (8001fa0 <check_rxUart+0x260>)
 8001eb4:	881b      	ldrh	r3, [r3, #0]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	b29a      	uxth	r2, r3
 8001eba:	4b39      	ldr	r3, [pc, #228]	; (8001fa0 <check_rxUart+0x260>)
 8001ebc:	801a      	strh	r2, [r3, #0]

			txUart[0] = OK_;
 8001ebe:	4b31      	ldr	r3, [pc, #196]	; (8001f84 <check_rxUart+0x244>)
 8001ec0:	2202      	movs	r2, #2
 8001ec2:	701a      	strb	r2, [r3, #0]
			txUart[3] = '\0';
 8001ec4:	4b2f      	ldr	r3, [pc, #188]	; (8001f84 <check_rxUart+0x244>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	70da      	strb	r2, [r3, #3]
			HAL_UART_Transmit_IT(&huart7, txUart, 4);
 8001eca:	2204      	movs	r2, #4
 8001ecc:	492d      	ldr	r1, [pc, #180]	; (8001f84 <check_rxUart+0x244>)
 8001ece:	482e      	ldr	r0, [pc, #184]	; (8001f88 <check_rxUart+0x248>)
 8001ed0:	f004 fb07 	bl	80064e2 <HAL_UART_Transmit_IT>
			//sprintf(txUart, "RETR");
		break;
 8001ed4:	e0f3      	b.n	80020be <check_rxUart+0x37e>
		case GIRO_IZQ:
			giroIzq_cant += (uint16_t) (rxUart[2] + (rxUart[1] << 8));
 8001ed6:	4b2a      	ldr	r3, [pc, #168]	; (8001f80 <check_rxUart+0x240>)
 8001ed8:	789b      	ldrb	r3, [r3, #2]
 8001eda:	b29a      	uxth	r2, r3
 8001edc:	4b28      	ldr	r3, [pc, #160]	; (8001f80 <check_rxUart+0x240>)
 8001ede:	785b      	ldrb	r3, [r3, #1]
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	021b      	lsls	r3, r3, #8
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	4413      	add	r3, r2
 8001ee8:	b29a      	uxth	r2, r3
 8001eea:	4b2e      	ldr	r3, [pc, #184]	; (8001fa4 <check_rxUart+0x264>)
 8001eec:	881b      	ldrh	r3, [r3, #0]
 8001eee:	4413      	add	r3, r2
 8001ef0:	b29a      	uxth	r2, r3
 8001ef2:	4b2c      	ldr	r3, [pc, #176]	; (8001fa4 <check_rxUart+0x264>)
 8001ef4:	801a      	strh	r2, [r3, #0]

			txUart[0] = OK_;
 8001ef6:	4b23      	ldr	r3, [pc, #140]	; (8001f84 <check_rxUart+0x244>)
 8001ef8:	2202      	movs	r2, #2
 8001efa:	701a      	strb	r2, [r3, #0]
			txUart[3] = '\0';
 8001efc:	4b21      	ldr	r3, [pc, #132]	; (8001f84 <check_rxUart+0x244>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	70da      	strb	r2, [r3, #3]
			HAL_UART_Transmit_IT(&huart7, txUart, 4);
 8001f02:	2204      	movs	r2, #4
 8001f04:	491f      	ldr	r1, [pc, #124]	; (8001f84 <check_rxUart+0x244>)
 8001f06:	4820      	ldr	r0, [pc, #128]	; (8001f88 <check_rxUart+0x248>)
 8001f08:	f004 faeb 	bl	80064e2 <HAL_UART_Transmit_IT>
			//sprintf(txUart, "IZQU");
		break;
 8001f0c:	e0d7      	b.n	80020be <check_rxUart+0x37e>
		case GIRO_DER:
			giroDer_cant += (uint16_t) (rxUart[2] + (rxUart[1] << 8));
 8001f0e:	4b1c      	ldr	r3, [pc, #112]	; (8001f80 <check_rxUart+0x240>)
 8001f10:	789b      	ldrb	r3, [r3, #2]
 8001f12:	b29a      	uxth	r2, r3
 8001f14:	4b1a      	ldr	r3, [pc, #104]	; (8001f80 <check_rxUart+0x240>)
 8001f16:	785b      	ldrb	r3, [r3, #1]
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	021b      	lsls	r3, r3, #8
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	4413      	add	r3, r2
 8001f20:	b29a      	uxth	r2, r3
 8001f22:	4b21      	ldr	r3, [pc, #132]	; (8001fa8 <check_rxUart+0x268>)
 8001f24:	881b      	ldrh	r3, [r3, #0]
 8001f26:	4413      	add	r3, r2
 8001f28:	b29a      	uxth	r2, r3
 8001f2a:	4b1f      	ldr	r3, [pc, #124]	; (8001fa8 <check_rxUart+0x268>)
 8001f2c:	801a      	strh	r2, [r3, #0]

			txUart[0] = OK_;
 8001f2e:	4b15      	ldr	r3, [pc, #84]	; (8001f84 <check_rxUart+0x244>)
 8001f30:	2202      	movs	r2, #2
 8001f32:	701a      	strb	r2, [r3, #0]
			txUart[3] = '\0';
 8001f34:	4b13      	ldr	r3, [pc, #76]	; (8001f84 <check_rxUart+0x244>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	70da      	strb	r2, [r3, #3]
			HAL_UART_Transmit_IT(&huart7, txUart, 4);
 8001f3a:	2204      	movs	r2, #4
 8001f3c:	4911      	ldr	r1, [pc, #68]	; (8001f84 <check_rxUart+0x244>)
 8001f3e:	4812      	ldr	r0, [pc, #72]	; (8001f88 <check_rxUart+0x248>)
 8001f40:	f004 facf 	bl	80064e2 <HAL_UART_Transmit_IT>
			//sprintf(txUart, "DERE");
		break;
 8001f44:	e0bb      	b.n	80020be <check_rxUart+0x37e>
		case VEL_AVANCE:
			mpu9265_Read_Accel(&mpu9265);
 8001f46:	4819      	ldr	r0, [pc, #100]	; (8001fac <check_rxUart+0x26c>)
 8001f48:	f000 fa50 	bl	80023ec <mpu9265_Read_Accel>

			txUart[0] = VEL_AVANCE;
 8001f4c:	4b0d      	ldr	r3, [pc, #52]	; (8001f84 <check_rxUart+0x244>)
 8001f4e:	2214      	movs	r2, #20
 8001f50:	701a      	strb	r2, [r3, #0]
			txUart[1] = (uint8_t)(mpu9265.Accel_X_RAW >> 8);
 8001f52:	4b16      	ldr	r3, [pc, #88]	; (8001fac <check_rxUart+0x26c>)
 8001f54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f58:	121b      	asrs	r3, r3, #8
 8001f5a:	b21b      	sxth	r3, r3
 8001f5c:	b2da      	uxtb	r2, r3
 8001f5e:	4b09      	ldr	r3, [pc, #36]	; (8001f84 <check_rxUart+0x244>)
 8001f60:	705a      	strb	r2, [r3, #1]
			txUart[2] = (uint8_t)(mpu9265.Accel_X_RAW & 0xFF);
 8001f62:	4b12      	ldr	r3, [pc, #72]	; (8001fac <check_rxUart+0x26c>)
 8001f64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f68:	b2da      	uxtb	r2, r3
 8001f6a:	4b06      	ldr	r3, [pc, #24]	; (8001f84 <check_rxUart+0x244>)
 8001f6c:	709a      	strb	r2, [r3, #2]
			txUart[3] = '\0';
 8001f6e:	4b05      	ldr	r3, [pc, #20]	; (8001f84 <check_rxUart+0x244>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	70da      	strb	r2, [r3, #3]
			HAL_UART_Transmit_IT(&huart7, txUart, 4);
 8001f74:	2204      	movs	r2, #4
 8001f76:	4903      	ldr	r1, [pc, #12]	; (8001f84 <check_rxUart+0x244>)
 8001f78:	4803      	ldr	r0, [pc, #12]	; (8001f88 <check_rxUart+0x248>)
 8001f7a:	f004 fab2 	bl	80064e2 <HAL_UART_Transmit_IT>
		break;
 8001f7e:	e09e      	b.n	80020be <check_rxUart+0x37e>
 8001f80:	200000c4 	.word	0x200000c4
 8001f84:	200000c8 	.word	0x200000c8
 8001f88:	20000240 	.word	0x20000240
 8001f8c:	2000002d 	.word	0x2000002d
 8001f90:	20000000 	.word	0x20000000
 8001f94:	2000004e 	.word	0x2000004e
 8001f98:	2000002e 	.word	0x2000002e
 8001f9c:	20000030 	.word	0x20000030
 8001fa0:	20000032 	.word	0x20000032
 8001fa4:	20000034 	.word	0x20000034
 8001fa8:	20000036 	.word	0x20000036
 8001fac:	200000d0 	.word	0x200000d0
		case DIST_GIRO:
			mpu9265_Read_Magnet(&mpu9265);
 8001fb0:	4849      	ldr	r0, [pc, #292]	; (80020d8 <check_rxUart+0x398>)
 8001fb2:	f000 fa4f 	bl	8002454 <mpu9265_Read_Magnet>
			magX = mpu9265.Magnet_X_RAW;
 8001fb6:	4b48      	ldr	r3, [pc, #288]	; (80020d8 <check_rxUart+0x398>)
 8001fb8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001fbc:	ee07 3a90 	vmov	s15, r3
 8001fc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fc4:	4b45      	ldr	r3, [pc, #276]	; (80020dc <check_rxUart+0x39c>)
 8001fc6:	edc3 7a00 	vstr	s15, [r3]
			magY = mpu9265.Magnet_Y_RAW;
 8001fca:	4b43      	ldr	r3, [pc, #268]	; (80020d8 <check_rxUart+0x398>)
 8001fcc:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001fd0:	ee07 3a90 	vmov	s15, r3
 8001fd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fd8:	4b41      	ldr	r3, [pc, #260]	; (80020e0 <check_rxUart+0x3a0>)
 8001fda:	edc3 7a00 	vstr	s15, [r3]

			magX = (float) (mpu9265.Magnet_X_RAW + 388.0); //media empirica
 8001fde:	4b3e      	ldr	r3, [pc, #248]	; (80020d8 <check_rxUart+0x398>)
 8001fe0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7fe fa55 	bl	8000494 <__aeabi_i2d>
 8001fea:	f04f 0200 	mov.w	r2, #0
 8001fee:	4b3d      	ldr	r3, [pc, #244]	; (80020e4 <check_rxUart+0x3a4>)
 8001ff0:	f7fe f904 	bl	80001fc <__adddf3>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	460c      	mov	r4, r1
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	4621      	mov	r1, r4
 8001ffc:	f7fe fcc6 	bl	800098c <__aeabi_d2f>
 8002000:	4602      	mov	r2, r0
 8002002:	4b36      	ldr	r3, [pc, #216]	; (80020dc <check_rxUart+0x39c>)
 8002004:	601a      	str	r2, [r3, #0]
			magY = (float) (mpu9265.Magnet_Y_RAW - 234.0); //media empirica
 8002006:	4b34      	ldr	r3, [pc, #208]	; (80020d8 <check_rxUart+0x398>)
 8002008:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800200c:	4618      	mov	r0, r3
 800200e:	f7fe fa41 	bl	8000494 <__aeabi_i2d>
 8002012:	f04f 0200 	mov.w	r2, #0
 8002016:	4b34      	ldr	r3, [pc, #208]	; (80020e8 <check_rxUart+0x3a8>)
 8002018:	f7fe f8ee 	bl	80001f8 <__aeabi_dsub>
 800201c:	4603      	mov	r3, r0
 800201e:	460c      	mov	r4, r1
 8002020:	4618      	mov	r0, r3
 8002022:	4621      	mov	r1, r4
 8002024:	f7fe fcb2 	bl	800098c <__aeabi_d2f>
 8002028:	4602      	mov	r2, r0
 800202a:	4b2d      	ldr	r3, [pc, #180]	; (80020e0 <check_rxUart+0x3a0>)
 800202c:	601a      	str	r2, [r3, #0]
			direccion_f32 = atan2f(magY, magX);
 800202e:	4b2c      	ldr	r3, [pc, #176]	; (80020e0 <check_rxUart+0x3a0>)
 8002030:	edd3 7a00 	vldr	s15, [r3]
 8002034:	4b29      	ldr	r3, [pc, #164]	; (80020dc <check_rxUart+0x39c>)
 8002036:	ed93 7a00 	vldr	s14, [r3]
 800203a:	eef0 0a47 	vmov.f32	s1, s14
 800203e:	eeb0 0a67 	vmov.f32	s0, s15
 8002042:	f005 f911 	bl	8007268 <atan2f>
 8002046:	eef0 7a40 	vmov.f32	s15, s0
 800204a:	4b28      	ldr	r3, [pc, #160]	; (80020ec <check_rxUart+0x3ac>)
 800204c:	edc3 7a00 	vstr	s15, [r3]
			direccion_f32 *= (180.0/M_PI);
 8002050:	4b26      	ldr	r3, [pc, #152]	; (80020ec <check_rxUart+0x3ac>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4618      	mov	r0, r3
 8002056:	f7fe fa2f 	bl	80004b8 <__aeabi_f2d>
 800205a:	a31d      	add	r3, pc, #116	; (adr r3, 80020d0 <check_rxUart+0x390>)
 800205c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002060:	f7fe fa82 	bl	8000568 <__aeabi_dmul>
 8002064:	4603      	mov	r3, r0
 8002066:	460c      	mov	r4, r1
 8002068:	4618      	mov	r0, r3
 800206a:	4621      	mov	r1, r4
 800206c:	f7fe fc8e 	bl	800098c <__aeabi_d2f>
 8002070:	4602      	mov	r2, r0
 8002072:	4b1e      	ldr	r3, [pc, #120]	; (80020ec <check_rxUart+0x3ac>)
 8002074:	601a      	str	r2, [r3, #0]

			direccion_i16 = direccion_f32;
 8002076:	4b1d      	ldr	r3, [pc, #116]	; (80020ec <check_rxUart+0x3ac>)
 8002078:	edd3 7a00 	vldr	s15, [r3]
 800207c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002080:	ee17 3a90 	vmov	r3, s15
 8002084:	b21a      	sxth	r2, r3
 8002086:	4b1a      	ldr	r3, [pc, #104]	; (80020f0 <check_rxUart+0x3b0>)
 8002088:	801a      	strh	r2, [r3, #0]

			txUart[0] = DIST_GIRO;
 800208a:	4b1a      	ldr	r3, [pc, #104]	; (80020f4 <check_rxUart+0x3b4>)
 800208c:	2216      	movs	r2, #22
 800208e:	701a      	strb	r2, [r3, #0]
			txUart[1] = (uint8_t)(direccion_i16 >> 8);
 8002090:	4b17      	ldr	r3, [pc, #92]	; (80020f0 <check_rxUart+0x3b0>)
 8002092:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002096:	121b      	asrs	r3, r3, #8
 8002098:	b21b      	sxth	r3, r3
 800209a:	b2da      	uxtb	r2, r3
 800209c:	4b15      	ldr	r3, [pc, #84]	; (80020f4 <check_rxUart+0x3b4>)
 800209e:	705a      	strb	r2, [r3, #1]
			txUart[2] = (uint8_t)(direccion_i16 & 0xFF);
 80020a0:	4b13      	ldr	r3, [pc, #76]	; (80020f0 <check_rxUart+0x3b0>)
 80020a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020a6:	b2da      	uxtb	r2, r3
 80020a8:	4b12      	ldr	r3, [pc, #72]	; (80020f4 <check_rxUart+0x3b4>)
 80020aa:	709a      	strb	r2, [r3, #2]
			txUart[3] = '\0';
 80020ac:	4b11      	ldr	r3, [pc, #68]	; (80020f4 <check_rxUart+0x3b4>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	70da      	strb	r2, [r3, #3]
			HAL_UART_Transmit_IT(&huart7, txUart, 4);
 80020b2:	2204      	movs	r2, #4
 80020b4:	490f      	ldr	r1, [pc, #60]	; (80020f4 <check_rxUart+0x3b4>)
 80020b6:	4810      	ldr	r0, [pc, #64]	; (80020f8 <check_rxUart+0x3b8>)
 80020b8:	f004 fa13 	bl	80064e2 <HAL_UART_Transmit_IT>
		break;
 80020bc:	bf00      	nop

	} //end switch rxUart[0]

	HAL_UART_Receive_IT(&huart7, rxUart, 4);
 80020be:	2204      	movs	r2, #4
 80020c0:	490e      	ldr	r1, [pc, #56]	; (80020fc <check_rxUart+0x3bc>)
 80020c2:	480d      	ldr	r0, [pc, #52]	; (80020f8 <check_rxUart+0x3b8>)
 80020c4:	f004 fa52 	bl	800656c <HAL_UART_Receive_IT>

} //end check_rxUart ()
 80020c8:	bd98      	pop	{r3, r4, r7, pc}
 80020ca:	bf00      	nop
 80020cc:	f3af 8000 	nop.w
 80020d0:	1a63c1f8 	.word	0x1a63c1f8
 80020d4:	404ca5dc 	.word	0x404ca5dc
 80020d8:	200000d0 	.word	0x200000d0
 80020dc:	200000e4 	.word	0x200000e4
 80020e0:	200000bc 	.word	0x200000bc
 80020e4:	40784000 	.word	0x40784000
 80020e8:	406d4000 	.word	0x406d4000
 80020ec:	200000e8 	.word	0x200000e8
 80020f0:	200000c0 	.word	0x200000c0
 80020f4:	200000c8 	.word	0x200000c8
 80020f8:	20000240 	.word	0x20000240
 80020fc:	200000c4 	.word	0x200000c4

08002100 <modo_funcionamiento>:

void modo_funcionamiento (void){
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0

	switch (modoFuncionamiento) {
 8002104:	4b08      	ldr	r3, [pc, #32]	; (8002128 <modo_funcionamiento+0x28>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d002      	beq.n	8002112 <modo_funcionamiento+0x12>
 800210c:	2b01      	cmp	r3, #1
 800210e:	d005      	beq.n	800211c <modo_funcionamiento+0x1c>
		break;
		case MANUAL:
			movimientoRC();
		break;
		default:
		break;
 8002110:	e007      	b.n	8002122 <modo_funcionamiento+0x22>
			movimientoLibre();
 8002112:	f7ff f9d7 	bl	80014c4 <movimientoLibre>
			encoders();
 8002116:	f7ff fda7 	bl	8001c68 <encoders>
		break;
 800211a:	e002      	b.n	8002122 <modo_funcionamiento+0x22>
			movimientoRC();
 800211c:	f7ff fb6a 	bl	80017f4 <movimientoRC>
		break;
 8002120:	bf00      	nop
	} //end switch modoFuncionamiento

} //end modo_funcionamiento ()
 8002122:	bf00      	nop
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	20000000 	.word	0x20000000

0800212c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002130:	bf00      	nop
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
	...

0800213c <mpu9265_Init>:





void mpu9265_Init(I2C_HandleTypeDef* i2c_handler){
 800213c:	b590      	push	{r4, r7, lr}
 800213e:	b089      	sub	sp, #36	; 0x24
 8002140:	af04      	add	r7, sp, #16
 8002142:	6078      	str	r0, [r7, #4]
	uint8_t check, data;

	hi2c_mpu = i2c_handler;
 8002144:	4aa3      	ldr	r2, [pc, #652]	; (80023d4 <mpu9265_Init+0x298>)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6013      	str	r3, [r2, #0]

	HAL_I2C_Mem_Read(hi2c_mpu, MPU9250_ADDRESS << 1, WHO_AM_I_MPU9250, 1, &check, 1, 1000);
 800214a:	4ba2      	ldr	r3, [pc, #648]	; (80023d4 <mpu9265_Init+0x298>)
 800214c:	6818      	ldr	r0, [r3, #0]
 800214e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002152:	9302      	str	r3, [sp, #8]
 8002154:	2301      	movs	r3, #1
 8002156:	9301      	str	r3, [sp, #4]
 8002158:	f107 030f 	add.w	r3, r7, #15
 800215c:	9300      	str	r3, [sp, #0]
 800215e:	2301      	movs	r3, #1
 8002160:	2275      	movs	r2, #117	; 0x75
 8002162:	21d0      	movs	r1, #208	; 0xd0
 8002164:	f001 fc8e 	bl	8003a84 <HAL_I2C_Mem_Read>

	if (check == 0X73){ //successfull respond
 8002168:	7bfb      	ldrb	r3, [r7, #15]
 800216a:	2b73      	cmp	r3, #115	; 0x73
 800216c:	d141      	bne.n	80021f2 <mpu9265_Init+0xb6>
		data = 0;
 800216e:	2300      	movs	r3, #0
 8002170:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(hi2c_mpu, MPU9250_ADDRESS << 1, PWR_MGMT_1, 1, &data, 1, 1000); //writing 0 in PWR_MGMT_1 reg to wake it up.
 8002172:	4b98      	ldr	r3, [pc, #608]	; (80023d4 <mpu9265_Init+0x298>)
 8002174:	6818      	ldr	r0, [r3, #0]
 8002176:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800217a:	9302      	str	r3, [sp, #8]
 800217c:	2301      	movs	r3, #1
 800217e:	9301      	str	r3, [sp, #4]
 8002180:	f107 030e 	add.w	r3, r7, #14
 8002184:	9300      	str	r3, [sp, #0]
 8002186:	2301      	movs	r3, #1
 8002188:	226b      	movs	r2, #107	; 0x6b
 800218a:	21d0      	movs	r1, #208	; 0xd0
 800218c:	f001 fb80 	bl	8003890 <HAL_I2C_Mem_Write>

		data = 0X07;
 8002190:	2307      	movs	r3, #7
 8002192:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(hi2c_mpu, MPU9250_ADDRESS << 1, SMPLRT_DIV, 1, &data, 1, 1000); //seting data rate in 1kHz by writing 0x07 in SMPLRT_DIV reg.
 8002194:	4b8f      	ldr	r3, [pc, #572]	; (80023d4 <mpu9265_Init+0x298>)
 8002196:	6818      	ldr	r0, [r3, #0]
 8002198:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800219c:	9302      	str	r3, [sp, #8]
 800219e:	2301      	movs	r3, #1
 80021a0:	9301      	str	r3, [sp, #4]
 80021a2:	f107 030e 	add.w	r3, r7, #14
 80021a6:	9300      	str	r3, [sp, #0]
 80021a8:	2301      	movs	r3, #1
 80021aa:	2219      	movs	r2, #25
 80021ac:	21d0      	movs	r1, #208	; 0xd0
 80021ae:	f001 fb6f 	bl	8003890 <HAL_I2C_Mem_Write>

		data = 0;
 80021b2:	2300      	movs	r3, #0
 80021b4:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(hi2c_mpu, MPU9250_ADDRESS << 1, GYRO_CONFIG, 1, &data, 1, 1000); //SET GYROSCOPIC CONFIGURATION: XG_ST=0; YG_ST=0; ZG_ST=0; FS_SEL=0 -> +/- 250 º/s.
 80021b6:	4b87      	ldr	r3, [pc, #540]	; (80023d4 <mpu9265_Init+0x298>)
 80021b8:	6818      	ldr	r0, [r3, #0]
 80021ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021be:	9302      	str	r3, [sp, #8]
 80021c0:	2301      	movs	r3, #1
 80021c2:	9301      	str	r3, [sp, #4]
 80021c4:	f107 030e 	add.w	r3, r7, #14
 80021c8:	9300      	str	r3, [sp, #0]
 80021ca:	2301      	movs	r3, #1
 80021cc:	221b      	movs	r2, #27
 80021ce:	21d0      	movs	r1, #208	; 0xd0
 80021d0:	f001 fb5e 	bl	8003890 <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Write(hi2c_mpu, MPU9250_ADDRESS << 1, ACCEL_CONFIG, 1, &data, 1, 1000); //SET accelerometer CONFIGURATION: XA_ST=0; YA_ST=0; ZA_ST=0; FS_SEL=0 -> +/- 2g.
 80021d4:	4b7f      	ldr	r3, [pc, #508]	; (80023d4 <mpu9265_Init+0x298>)
 80021d6:	6818      	ldr	r0, [r3, #0]
 80021d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021dc:	9302      	str	r3, [sp, #8]
 80021de:	2301      	movs	r3, #1
 80021e0:	9301      	str	r3, [sp, #4]
 80021e2:	f107 030e 	add.w	r3, r7, #14
 80021e6:	9300      	str	r3, [sp, #0]
 80021e8:	2301      	movs	r3, #1
 80021ea:	221c      	movs	r2, #28
 80021ec:	21d0      	movs	r1, #208	; 0xd0
 80021ee:	f001 fb4f 	bl	8003890 <HAL_I2C_Mem_Write>
	}else{
		//Error_Handler();
	}

	//magnetometer//
	data = 0b10; //i2c bypass bit, in INT_PIN_CFG reg. (made to reach the magnetometer)
 80021f2:	2302      	movs	r3, #2
 80021f4:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(hi2c_mpu, MPU9250_ADDRESS << 1, INT_PIN_CFG, 1, &data, 1, 1000);
 80021f6:	4b77      	ldr	r3, [pc, #476]	; (80023d4 <mpu9265_Init+0x298>)
 80021f8:	6818      	ldr	r0, [r3, #0]
 80021fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021fe:	9302      	str	r3, [sp, #8]
 8002200:	2301      	movs	r3, #1
 8002202:	9301      	str	r3, [sp, #4]
 8002204:	f107 030e 	add.w	r3, r7, #14
 8002208:	9300      	str	r3, [sp, #0]
 800220a:	2301      	movs	r3, #1
 800220c:	2237      	movs	r2, #55	; 0x37
 800220e:	21d0      	movs	r1, #208	; 0xd0
 8002210:	f001 fb3e 	bl	8003890 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Read(hi2c_mpu, AK8963_ADDRESS << 1, WHO_AM_I_AK8963, 1, &check, 1, 1000);
 8002214:	4b6f      	ldr	r3, [pc, #444]	; (80023d4 <mpu9265_Init+0x298>)
 8002216:	6818      	ldr	r0, [r3, #0]
 8002218:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800221c:	9302      	str	r3, [sp, #8]
 800221e:	2301      	movs	r3, #1
 8002220:	9301      	str	r3, [sp, #4]
 8002222:	f107 030f 	add.w	r3, r7, #15
 8002226:	9300      	str	r3, [sp, #0]
 8002228:	2301      	movs	r3, #1
 800222a:	2200      	movs	r2, #0
 800222c:	2118      	movs	r1, #24
 800222e:	f001 fc29 	bl	8003a84 <HAL_I2C_Mem_Read>
	HAL_Delay(1);
 8002232:	2001      	movs	r0, #1
 8002234:	f000 fe54 	bl	8002ee0 <HAL_Delay>
	if (check == 0X48){ //successfull respond
 8002238:	7bfb      	ldrb	r3, [r7, #15]
 800223a:	2b48      	cmp	r3, #72	; 0x48
 800223c:	f040 80c5 	bne.w	80023ca <mpu9265_Init+0x28e>

		//Power down magnetometer
		data = 0x00;
 8002240:	2300      	movs	r3, #0
 8002242:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(hi2c_mpu, AK8963_ADDRESS << 1, AK8963_CNTL, 1, &data, 1, 1000);
 8002244:	4b63      	ldr	r3, [pc, #396]	; (80023d4 <mpu9265_Init+0x298>)
 8002246:	6818      	ldr	r0, [r3, #0]
 8002248:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800224c:	9302      	str	r3, [sp, #8]
 800224e:	2301      	movs	r3, #1
 8002250:	9301      	str	r3, [sp, #4]
 8002252:	f107 030e 	add.w	r3, r7, #14
 8002256:	9300      	str	r3, [sp, #0]
 8002258:	2301      	movs	r3, #1
 800225a:	220a      	movs	r2, #10
 800225c:	2118      	movs	r1, #24
 800225e:	f001 fb17 	bl	8003890 <HAL_I2C_Mem_Write>
		HAL_Delay(100);
 8002262:	2064      	movs	r0, #100	; 0x64
 8002264:	f000 fe3c 	bl	8002ee0 <HAL_Delay>

		//Enter Fuse ROM access mode
		data = 0x0F; //Fuse ROM access mode
 8002268:	230f      	movs	r3, #15
 800226a:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(hi2c_mpu, AK8963_ADDRESS << 1, AK8963_CNTL, 1, &data, 1, 1000); //Control 1 register
 800226c:	4b59      	ldr	r3, [pc, #356]	; (80023d4 <mpu9265_Init+0x298>)
 800226e:	6818      	ldr	r0, [r3, #0]
 8002270:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002274:	9302      	str	r3, [sp, #8]
 8002276:	2301      	movs	r3, #1
 8002278:	9301      	str	r3, [sp, #4]
 800227a:	f107 030e 	add.w	r3, r7, #14
 800227e:	9300      	str	r3, [sp, #0]
 8002280:	2301      	movs	r3, #1
 8002282:	220a      	movs	r2, #10
 8002284:	2118      	movs	r1, #24
 8002286:	f001 fb03 	bl	8003890 <HAL_I2C_Mem_Write>
		HAL_Delay(100);
 800228a:	2064      	movs	r0, #100	; 0x64
 800228c:	f000 fe28 	bl	8002ee0 <HAL_Delay>

		//Read the x-, y-, and z-axis calibration values
		uint8_t rawMagCalData[3];
		HAL_I2C_Mem_Read(hi2c_mpu, AK8963_ADDRESS << 1, AK8963_ASAX, 1, &rawMagCalData[0], 3, 1000); //Sensitivity Adjustment values registers (read-only)
 8002290:	4b50      	ldr	r3, [pc, #320]	; (80023d4 <mpu9265_Init+0x298>)
 8002292:	6818      	ldr	r0, [r3, #0]
 8002294:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002298:	9302      	str	r3, [sp, #8]
 800229a:	2303      	movs	r3, #3
 800229c:	9301      	str	r3, [sp, #4]
 800229e:	f107 0308 	add.w	r3, r7, #8
 80022a2:	9300      	str	r3, [sp, #0]
 80022a4:	2301      	movs	r3, #1
 80022a6:	2210      	movs	r2, #16
 80022a8:	2118      	movs	r1, #24
 80022aa:	f001 fbeb 	bl	8003a84 <HAL_I2C_Mem_Read>
		calMagX =  (float)(rawMagCalData[0] - 128)/256. + 1.;   // Return x-axis sensitivity adjustment values, etc.
 80022ae:	7a3b      	ldrb	r3, [r7, #8]
 80022b0:	3b80      	subs	r3, #128	; 0x80
 80022b2:	ee07 3a90 	vmov	s15, r3
 80022b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022ba:	ee17 0a90 	vmov	r0, s15
 80022be:	f7fe f8fb 	bl	80004b8 <__aeabi_f2d>
 80022c2:	f04f 0200 	mov.w	r2, #0
 80022c6:	4b44      	ldr	r3, [pc, #272]	; (80023d8 <mpu9265_Init+0x29c>)
 80022c8:	f7fe fa78 	bl	80007bc <__aeabi_ddiv>
 80022cc:	4603      	mov	r3, r0
 80022ce:	460c      	mov	r4, r1
 80022d0:	4618      	mov	r0, r3
 80022d2:	4621      	mov	r1, r4
 80022d4:	f04f 0200 	mov.w	r2, #0
 80022d8:	4b40      	ldr	r3, [pc, #256]	; (80023dc <mpu9265_Init+0x2a0>)
 80022da:	f7fd ff8f 	bl	80001fc <__adddf3>
 80022de:	4603      	mov	r3, r0
 80022e0:	460c      	mov	r4, r1
 80022e2:	4618      	mov	r0, r3
 80022e4:	4621      	mov	r1, r4
 80022e6:	f7fe fb51 	bl	800098c <__aeabi_d2f>
 80022ea:	4602      	mov	r2, r0
 80022ec:	4b3c      	ldr	r3, [pc, #240]	; (80023e0 <mpu9265_Init+0x2a4>)
 80022ee:	601a      	str	r2, [r3, #0]
		calMagY =  (float)(rawMagCalData[1] - 128)/256. + 1.;
 80022f0:	7a7b      	ldrb	r3, [r7, #9]
 80022f2:	3b80      	subs	r3, #128	; 0x80
 80022f4:	ee07 3a90 	vmov	s15, r3
 80022f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022fc:	ee17 0a90 	vmov	r0, s15
 8002300:	f7fe f8da 	bl	80004b8 <__aeabi_f2d>
 8002304:	f04f 0200 	mov.w	r2, #0
 8002308:	4b33      	ldr	r3, [pc, #204]	; (80023d8 <mpu9265_Init+0x29c>)
 800230a:	f7fe fa57 	bl	80007bc <__aeabi_ddiv>
 800230e:	4603      	mov	r3, r0
 8002310:	460c      	mov	r4, r1
 8002312:	4618      	mov	r0, r3
 8002314:	4621      	mov	r1, r4
 8002316:	f04f 0200 	mov.w	r2, #0
 800231a:	4b30      	ldr	r3, [pc, #192]	; (80023dc <mpu9265_Init+0x2a0>)
 800231c:	f7fd ff6e 	bl	80001fc <__adddf3>
 8002320:	4603      	mov	r3, r0
 8002322:	460c      	mov	r4, r1
 8002324:	4618      	mov	r0, r3
 8002326:	4621      	mov	r1, r4
 8002328:	f7fe fb30 	bl	800098c <__aeabi_d2f>
 800232c:	4602      	mov	r2, r0
 800232e:	4b2d      	ldr	r3, [pc, #180]	; (80023e4 <mpu9265_Init+0x2a8>)
 8002330:	601a      	str	r2, [r3, #0]
		calMagZ =  (float)(rawMagCalData[2] - 128)/256. + 1.;
 8002332:	7abb      	ldrb	r3, [r7, #10]
 8002334:	3b80      	subs	r3, #128	; 0x80
 8002336:	ee07 3a90 	vmov	s15, r3
 800233a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800233e:	ee17 0a90 	vmov	r0, s15
 8002342:	f7fe f8b9 	bl	80004b8 <__aeabi_f2d>
 8002346:	f04f 0200 	mov.w	r2, #0
 800234a:	4b23      	ldr	r3, [pc, #140]	; (80023d8 <mpu9265_Init+0x29c>)
 800234c:	f7fe fa36 	bl	80007bc <__aeabi_ddiv>
 8002350:	4603      	mov	r3, r0
 8002352:	460c      	mov	r4, r1
 8002354:	4618      	mov	r0, r3
 8002356:	4621      	mov	r1, r4
 8002358:	f04f 0200 	mov.w	r2, #0
 800235c:	4b1f      	ldr	r3, [pc, #124]	; (80023dc <mpu9265_Init+0x2a0>)
 800235e:	f7fd ff4d 	bl	80001fc <__adddf3>
 8002362:	4603      	mov	r3, r0
 8002364:	460c      	mov	r4, r1
 8002366:	4618      	mov	r0, r3
 8002368:	4621      	mov	r1, r4
 800236a:	f7fe fb0f 	bl	800098c <__aeabi_d2f>
 800236e:	4602      	mov	r2, r0
 8002370:	4b1d      	ldr	r3, [pc, #116]	; (80023e8 <mpu9265_Init+0x2ac>)
 8002372:	601a      	str	r2, [r3, #0]
		HAL_Delay(100);
 8002374:	2064      	movs	r0, #100	; 0x64
 8002376:	f000 fdb3 	bl	8002ee0 <HAL_Delay>

		//Power down magnetometer
		data = 0x00;
 800237a:	2300      	movs	r3, #0
 800237c:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(hi2c_mpu, AK8963_ADDRESS << 1, AK8963_CNTL, 1, &data, 1, 1000);
 800237e:	4b15      	ldr	r3, [pc, #84]	; (80023d4 <mpu9265_Init+0x298>)
 8002380:	6818      	ldr	r0, [r3, #0]
 8002382:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002386:	9302      	str	r3, [sp, #8]
 8002388:	2301      	movs	r3, #1
 800238a:	9301      	str	r3, [sp, #4]
 800238c:	f107 030e 	add.w	r3, r7, #14
 8002390:	9300      	str	r3, [sp, #0]
 8002392:	2301      	movs	r3, #1
 8002394:	220a      	movs	r2, #10
 8002396:	2118      	movs	r1, #24
 8002398:	f001 fa7a 	bl	8003890 <HAL_I2C_Mem_Write>
		HAL_Delay(100);
 800239c:	2064      	movs	r0, #100	; 0x64
 800239e:	f000 fd9f 	bl	8002ee0 <HAL_Delay>

		//Set magnetometer data resolution and sample ODR
		data = 0b10010; // 0b10110: 0001 (MSB, 16 bit resolution) 0010 (LSB, 8Hz sample rate (Continuous measurement mode 1) ).
 80023a2:	2312      	movs	r3, #18
 80023a4:	73bb      	strb	r3, [r7, #14]
//		data = 0B10110; // 0b10110: 0001 (MSB, 16 bit resolution) 0110 (LSB, 100Hz sample rate (Continuous measurement mode 2) ).
		HAL_I2C_Mem_Write(hi2c_mpu, AK8963_ADDRESS << 1, AK8963_CNTL, 1, &data, 1, 1000);
 80023a6:	4b0b      	ldr	r3, [pc, #44]	; (80023d4 <mpu9265_Init+0x298>)
 80023a8:	6818      	ldr	r0, [r3, #0]
 80023aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023ae:	9302      	str	r3, [sp, #8]
 80023b0:	2301      	movs	r3, #1
 80023b2:	9301      	str	r3, [sp, #4]
 80023b4:	f107 030e 	add.w	r3, r7, #14
 80023b8:	9300      	str	r3, [sp, #0]
 80023ba:	2301      	movs	r3, #1
 80023bc:	220a      	movs	r2, #10
 80023be:	2118      	movs	r1, #24
 80023c0:	f001 fa66 	bl	8003890 <HAL_I2C_Mem_Write>
		HAL_Delay(100);
 80023c4:	2064      	movs	r0, #100	; 0x64
 80023c6:	f000 fd8b 	bl	8002ee0 <HAL_Delay>
		//Error_Handler();
	}



}
 80023ca:	bf00      	nop
 80023cc:	3714      	adds	r7, #20
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd90      	pop	{r4, r7, pc}
 80023d2:	bf00      	nop
 80023d4:	200000fc 	.word	0x200000fc
 80023d8:	40700000 	.word	0x40700000
 80023dc:	3ff00000 	.word	0x3ff00000
 80023e0:	200000f4 	.word	0x200000f4
 80023e4:	200000f0 	.word	0x200000f0
 80023e8:	200000f8 	.word	0x200000f8

080023ec <mpu9265_Read_Accel>:

void mpu9265_Read_Accel(mpuData_t* mpuData){
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b088      	sub	sp, #32
 80023f0:	af04      	add	r7, sp, #16
 80023f2:	6078      	str	r0, [r7, #4]

	uint8_t data[6];

	HAL_I2C_Mem_Read(hi2c_mpu, MPU9250_ADDRESS << 1, ACCEL_XOUT_H, 1, data, 6, 1000);
 80023f4:	4b16      	ldr	r3, [pc, #88]	; (8002450 <mpu9265_Read_Accel+0x64>)
 80023f6:	6818      	ldr	r0, [r3, #0]
 80023f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023fc:	9302      	str	r3, [sp, #8]
 80023fe:	2306      	movs	r3, #6
 8002400:	9301      	str	r3, [sp, #4]
 8002402:	f107 0308 	add.w	r3, r7, #8
 8002406:	9300      	str	r3, [sp, #0]
 8002408:	2301      	movs	r3, #1
 800240a:	223b      	movs	r2, #59	; 0x3b
 800240c:	21d0      	movs	r1, #208	; 0xd0
 800240e:	f001 fb39 	bl	8003a84 <HAL_I2C_Mem_Read>
	mpuData->Accel_X_RAW = (uint16_t) ( data[0]<<8 | data[1] );
 8002412:	7a3b      	ldrb	r3, [r7, #8]
 8002414:	021b      	lsls	r3, r3, #8
 8002416:	b21a      	sxth	r2, r3
 8002418:	7a7b      	ldrb	r3, [r7, #9]
 800241a:	b21b      	sxth	r3, r3
 800241c:	4313      	orrs	r3, r2
 800241e:	b21a      	sxth	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	801a      	strh	r2, [r3, #0]
	mpuData->Accel_Y_RAW = (uint16_t) ( data[2]<<8 | data[3] );
 8002424:	7abb      	ldrb	r3, [r7, #10]
 8002426:	021b      	lsls	r3, r3, #8
 8002428:	b21a      	sxth	r2, r3
 800242a:	7afb      	ldrb	r3, [r7, #11]
 800242c:	b21b      	sxth	r3, r3
 800242e:	4313      	orrs	r3, r2
 8002430:	b21a      	sxth	r2, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	805a      	strh	r2, [r3, #2]
	mpuData->Accel_Z_RAW = (uint16_t) ( data[4]<<8 | data[5] );
 8002436:	7b3b      	ldrb	r3, [r7, #12]
 8002438:	021b      	lsls	r3, r3, #8
 800243a:	b21a      	sxth	r2, r3
 800243c:	7b7b      	ldrb	r3, [r7, #13]
 800243e:	b21b      	sxth	r3, r3
 8002440:	4313      	orrs	r3, r2
 8002442:	b21a      	sxth	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	809a      	strh	r2, [r3, #4]
}
 8002448:	bf00      	nop
 800244a:	3710      	adds	r7, #16
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	200000fc 	.word	0x200000fc

08002454 <mpu9265_Read_Magnet>:
	mpuData->Gyro_X_RAW = (uint16_t) ( data[0]<<8 | data[1] );
	mpuData->Gyro_Y_RAW = (uint16_t) ( data[2]<<8 | data[3] );
	mpuData->Gyro_Z_RAW = (uint16_t) ( data[4]<<8 | data[5] );
}

void mpu9265_Read_Magnet(mpuData_t* mpuData){
 8002454:	b580      	push	{r7, lr}
 8002456:	b088      	sub	sp, #32
 8002458:	af04      	add	r7, sp, #16
 800245a:	6078      	str	r0, [r7, #4]

	uint8_t ready, data[7];

	HAL_I2C_Mem_Read(hi2c_mpu, AK8963_ADDRESS << 1, AK8963_ST1, 1, &ready, 1, 1000); //bit 0 in "1".
 800245c:	4b22      	ldr	r3, [pc, #136]	; (80024e8 <mpu9265_Read_Magnet+0x94>)
 800245e:	6818      	ldr	r0, [r3, #0]
 8002460:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002464:	9302      	str	r3, [sp, #8]
 8002466:	2301      	movs	r3, #1
 8002468:	9301      	str	r3, [sp, #4]
 800246a:	f107 030f 	add.w	r3, r7, #15
 800246e:	9300      	str	r3, [sp, #0]
 8002470:	2301      	movs	r3, #1
 8002472:	2202      	movs	r2, #2
 8002474:	2118      	movs	r1, #24
 8002476:	f001 fb05 	bl	8003a84 <HAL_I2C_Mem_Read>

	if (ready){ //bit 0 from Status 1 register in "1".
 800247a:	7bfb      	ldrb	r3, [r7, #15]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d02e      	beq.n	80024de <mpu9265_Read_Magnet+0x8a>
		HAL_I2C_Mem_Read(hi2c_mpu, AK8963_ADDRESS << 1, AK8963_XOUT_L, 1, data, 7, 1000);
 8002480:	4b19      	ldr	r3, [pc, #100]	; (80024e8 <mpu9265_Read_Magnet+0x94>)
 8002482:	6818      	ldr	r0, [r3, #0]
 8002484:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002488:	9302      	str	r3, [sp, #8]
 800248a:	2307      	movs	r3, #7
 800248c:	9301      	str	r3, [sp, #4]
 800248e:	f107 0308 	add.w	r3, r7, #8
 8002492:	9300      	str	r3, [sp, #0]
 8002494:	2301      	movs	r3, #1
 8002496:	2203      	movs	r2, #3
 8002498:	2118      	movs	r1, #24
 800249a:	f001 faf3 	bl	8003a84 <HAL_I2C_Mem_Read>
		if (!(data[6] & 0x08)){// Check if magnetic sensor overflow set, if not then report data
 800249e:	7bbb      	ldrb	r3, [r7, #14]
 80024a0:	f003 0308 	and.w	r3, r3, #8
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d11a      	bne.n	80024de <mpu9265_Read_Magnet+0x8a>
			mpuData->Magnet_X_RAW = (uint16_t) ( data[1]<<8 | data[0] );
 80024a8:	7a7b      	ldrb	r3, [r7, #9]
 80024aa:	021b      	lsls	r3, r3, #8
 80024ac:	b21a      	sxth	r2, r3
 80024ae:	7a3b      	ldrb	r3, [r7, #8]
 80024b0:	b21b      	sxth	r3, r3
 80024b2:	4313      	orrs	r3, r2
 80024b4:	b21a      	sxth	r2, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	819a      	strh	r2, [r3, #12]
			mpuData->Magnet_Y_RAW = (uint16_t) ( data[3]<<8 | data[2] );
 80024ba:	7afb      	ldrb	r3, [r7, #11]
 80024bc:	021b      	lsls	r3, r3, #8
 80024be:	b21a      	sxth	r2, r3
 80024c0:	7abb      	ldrb	r3, [r7, #10]
 80024c2:	b21b      	sxth	r3, r3
 80024c4:	4313      	orrs	r3, r2
 80024c6:	b21a      	sxth	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	81da      	strh	r2, [r3, #14]
			mpuData->Magnet_Z_RAW = (uint16_t) ( data[5]<<8 | data[4] );
 80024cc:	7b7b      	ldrb	r3, [r7, #13]
 80024ce:	021b      	lsls	r3, r3, #8
 80024d0:	b21a      	sxth	r2, r3
 80024d2:	7b3b      	ldrb	r3, [r7, #12]
 80024d4:	b21b      	sxth	r3, r3
 80024d6:	4313      	orrs	r3, r2
 80024d8:	b21a      	sxth	r2, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	821a      	strh	r2, [r3, #16]
		}
	}
}
 80024de:	bf00      	nop
 80024e0:	3710      	adds	r7, #16
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	200000fc 	.word	0x200000fc

080024ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024f2:	2300      	movs	r3, #0
 80024f4:	607b      	str	r3, [r7, #4]
 80024f6:	4b10      	ldr	r3, [pc, #64]	; (8002538 <HAL_MspInit+0x4c>)
 80024f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fa:	4a0f      	ldr	r2, [pc, #60]	; (8002538 <HAL_MspInit+0x4c>)
 80024fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002500:	6453      	str	r3, [r2, #68]	; 0x44
 8002502:	4b0d      	ldr	r3, [pc, #52]	; (8002538 <HAL_MspInit+0x4c>)
 8002504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002506:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800250a:	607b      	str	r3, [r7, #4]
 800250c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800250e:	2300      	movs	r3, #0
 8002510:	603b      	str	r3, [r7, #0]
 8002512:	4b09      	ldr	r3, [pc, #36]	; (8002538 <HAL_MspInit+0x4c>)
 8002514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002516:	4a08      	ldr	r2, [pc, #32]	; (8002538 <HAL_MspInit+0x4c>)
 8002518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800251c:	6413      	str	r3, [r2, #64]	; 0x40
 800251e:	4b06      	ldr	r3, [pc, #24]	; (8002538 <HAL_MspInit+0x4c>)
 8002520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002526:	603b      	str	r3, [r7, #0]
 8002528:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800252a:	bf00      	nop
 800252c:	370c      	adds	r7, #12
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	40023800 	.word	0x40023800

0800253c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002540:	bf00      	nop
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr

0800254a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800254a:	b480      	push	{r7}
 800254c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800254e:	e7fe      	b.n	800254e <HardFault_Handler+0x4>

08002550 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002554:	e7fe      	b.n	8002554 <MemManage_Handler+0x4>

08002556 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002556:	b480      	push	{r7}
 8002558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800255a:	e7fe      	b.n	800255a <BusFault_Handler+0x4>

0800255c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002560:	e7fe      	b.n	8002560 <UsageFault_Handler+0x4>

08002562 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002562:	b480      	push	{r7}
 8002564:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002566:	bf00      	nop
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002574:	bf00      	nop
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr

0800257e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800257e:	b480      	push	{r7}
 8002580:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002582:	bf00      	nop
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002590:	f000 fc86 	bl	8002ea0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002594:	bf00      	nop
 8002596:	bd80      	pop	{r7, pc}

08002598 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800259c:	4802      	ldr	r0, [pc, #8]	; (80025a8 <TIM5_IRQHandler+0x10>)
 800259e:	f002 fea3 	bl	80052e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80025a2:	bf00      	nop
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	20000140 	.word	0x20000140

080025ac <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80025b0:	4802      	ldr	r0, [pc, #8]	; (80025bc <TIM7_IRQHandler+0x10>)
 80025b2:	f002 fe99 	bl	80052e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80025b6:	bf00      	nop
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	20000200 	.word	0x20000200

080025c0 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 80025c4:	4802      	ldr	r0, [pc, #8]	; (80025d0 <UART7_IRQHandler+0x10>)
 80025c6:	f004 f827 	bl	8006618 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 80025ca:	bf00      	nop
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	20000240 	.word	0x20000240

080025d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025d8:	4b08      	ldr	r3, [pc, #32]	; (80025fc <SystemInit+0x28>)
 80025da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025de:	4a07      	ldr	r2, [pc, #28]	; (80025fc <SystemInit+0x28>)
 80025e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80025e8:	4b04      	ldr	r3, [pc, #16]	; (80025fc <SystemInit+0x28>)
 80025ea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80025ee:	609a      	str	r2, [r3, #8]
#endif
}
 80025f0:	bf00      	nop
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	e000ed00 	.word	0xe000ed00

08002600 <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b086      	sub	sp, #24
 8002604:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002606:	f107 0308 	add.w	r3, r7, #8
 800260a:	2200      	movs	r2, #0
 800260c:	601a      	str	r2, [r3, #0]
 800260e:	605a      	str	r2, [r3, #4]
 8002610:	609a      	str	r2, [r3, #8]
 8002612:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002614:	463b      	mov	r3, r7
 8002616:	2200      	movs	r2, #0
 8002618:	601a      	str	r2, [r3, #0]
 800261a:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 800261c:	4b20      	ldr	r3, [pc, #128]	; (80026a0 <MX_TIM2_Init+0xa0>)
 800261e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002622:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002624:	4b1e      	ldr	r3, [pc, #120]	; (80026a0 <MX_TIM2_Init+0xa0>)
 8002626:	2200      	movs	r2, #0
 8002628:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800262a:	4b1d      	ldr	r3, [pc, #116]	; (80026a0 <MX_TIM2_Init+0xa0>)
 800262c:	2200      	movs	r2, #0
 800262e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002630:	4b1b      	ldr	r3, [pc, #108]	; (80026a0 <MX_TIM2_Init+0xa0>)
 8002632:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002636:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002638:	4b19      	ldr	r3, [pc, #100]	; (80026a0 <MX_TIM2_Init+0xa0>)
 800263a:	2200      	movs	r2, #0
 800263c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800263e:	4b18      	ldr	r3, [pc, #96]	; (80026a0 <MX_TIM2_Init+0xa0>)
 8002640:	2200      	movs	r2, #0
 8002642:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002644:	4816      	ldr	r0, [pc, #88]	; (80026a0 <MX_TIM2_Init+0xa0>)
 8002646:	f002 fccb 	bl	8004fe0 <HAL_TIM_Base_Init>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d001      	beq.n	8002654 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002650:	f7ff fd6c 	bl	800212c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8002654:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002658:	60bb      	str	r3, [r7, #8]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 800265a:	2300      	movs	r3, #0
 800265c:	60fb      	str	r3, [r7, #12]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 800265e:	2300      	movs	r3, #0
 8002660:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockFilter = 0;
 8002662:	2300      	movs	r3, #0
 8002664:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002666:	f107 0308 	add.w	r3, r7, #8
 800266a:	4619      	mov	r1, r3
 800266c:	480c      	ldr	r0, [pc, #48]	; (80026a0 <MX_TIM2_Init+0xa0>)
 800266e:	f003 f8a5 	bl	80057bc <HAL_TIM_ConfigClockSource>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d001      	beq.n	800267c <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8002678:	f7ff fd58 	bl	800212c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800267c:	2300      	movs	r3, #0
 800267e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002680:	2300      	movs	r3, #0
 8002682:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002684:	463b      	mov	r3, r7
 8002686:	4619      	mov	r1, r3
 8002688:	4805      	ldr	r0, [pc, #20]	; (80026a0 <MX_TIM2_Init+0xa0>)
 800268a:	f003 fda7 	bl	80061dc <HAL_TIMEx_MasterConfigSynchronization>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8002694:	f7ff fd4a 	bl	800212c <Error_Handler>
  }

}
 8002698:	bf00      	nop
 800269a:	3718      	adds	r7, #24
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	200001c0 	.word	0x200001c0

080026a4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b086      	sub	sp, #24
 80026a8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026aa:	f107 0308 	add.w	r3, r7, #8
 80026ae:	2200      	movs	r2, #0
 80026b0:	601a      	str	r2, [r3, #0]
 80026b2:	605a      	str	r2, [r3, #4]
 80026b4:	609a      	str	r2, [r3, #8]
 80026b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026b8:	463b      	mov	r3, r7
 80026ba:	2200      	movs	r2, #0
 80026bc:	601a      	str	r2, [r3, #0]
 80026be:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 80026c0:	4b20      	ldr	r3, [pc, #128]	; (8002744 <MX_TIM3_Init+0xa0>)
 80026c2:	4a21      	ldr	r2, [pc, #132]	; (8002748 <MX_TIM3_Init+0xa4>)
 80026c4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80026c6:	4b1f      	ldr	r3, [pc, #124]	; (8002744 <MX_TIM3_Init+0xa0>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026cc:	4b1d      	ldr	r3, [pc, #116]	; (8002744 <MX_TIM3_Init+0xa0>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80026d2:	4b1c      	ldr	r3, [pc, #112]	; (8002744 <MX_TIM3_Init+0xa0>)
 80026d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026d8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026da:	4b1a      	ldr	r3, [pc, #104]	; (8002744 <MX_TIM3_Init+0xa0>)
 80026dc:	2200      	movs	r2, #0
 80026de:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026e0:	4b18      	ldr	r3, [pc, #96]	; (8002744 <MX_TIM3_Init+0xa0>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80026e6:	4817      	ldr	r0, [pc, #92]	; (8002744 <MX_TIM3_Init+0xa0>)
 80026e8:	f002 fc7a 	bl	8004fe0 <HAL_TIM_Base_Init>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80026f2:	f7ff fd1b 	bl	800212c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 80026f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026fa:	60bb      	str	r3, [r7, #8]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 80026fc:	2300      	movs	r3, #0
 80026fe:	60fb      	str	r3, [r7, #12]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8002700:	2300      	movs	r3, #0
 8002702:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockFilter = 0;
 8002704:	2300      	movs	r3, #0
 8002706:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002708:	f107 0308 	add.w	r3, r7, #8
 800270c:	4619      	mov	r1, r3
 800270e:	480d      	ldr	r0, [pc, #52]	; (8002744 <MX_TIM3_Init+0xa0>)
 8002710:	f003 f854 	bl	80057bc <HAL_TIM_ConfigClockSource>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d001      	beq.n	800271e <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800271a:	f7ff fd07 	bl	800212c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800271e:	2300      	movs	r3, #0
 8002720:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002722:	2300      	movs	r3, #0
 8002724:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002726:	463b      	mov	r3, r7
 8002728:	4619      	mov	r1, r3
 800272a:	4806      	ldr	r0, [pc, #24]	; (8002744 <MX_TIM3_Init+0xa0>)
 800272c:	f003 fd56 	bl	80061dc <HAL_TIMEx_MasterConfigSynchronization>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8002736:	f7ff fcf9 	bl	800212c <Error_Handler>
  }

}
 800273a:	bf00      	nop
 800273c:	3718      	adds	r7, #24
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	20000180 	.word	0x20000180
 8002748:	40000400 	.word	0x40000400

0800274c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b08e      	sub	sp, #56	; 0x38
 8002750:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002752:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002756:	2200      	movs	r2, #0
 8002758:	601a      	str	r2, [r3, #0]
 800275a:	605a      	str	r2, [r3, #4]
 800275c:	609a      	str	r2, [r3, #8]
 800275e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002760:	f107 0320 	add.w	r3, r7, #32
 8002764:	2200      	movs	r2, #0
 8002766:	601a      	str	r2, [r3, #0]
 8002768:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800276a:	1d3b      	adds	r3, r7, #4
 800276c:	2200      	movs	r2, #0
 800276e:	601a      	str	r2, [r3, #0]
 8002770:	605a      	str	r2, [r3, #4]
 8002772:	609a      	str	r2, [r3, #8]
 8002774:	60da      	str	r2, [r3, #12]
 8002776:	611a      	str	r2, [r3, #16]
 8002778:	615a      	str	r2, [r3, #20]
 800277a:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 800277c:	4b31      	ldr	r3, [pc, #196]	; (8002844 <MX_TIM4_Init+0xf8>)
 800277e:	4a32      	ldr	r2, [pc, #200]	; (8002848 <MX_TIM4_Init+0xfc>)
 8002780:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 15-1;
 8002782:	4b30      	ldr	r3, [pc, #192]	; (8002844 <MX_TIM4_Init+0xf8>)
 8002784:	220e      	movs	r2, #14
 8002786:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002788:	4b2e      	ldr	r3, [pc, #184]	; (8002844 <MX_TIM4_Init+0xf8>)
 800278a:	2200      	movs	r2, #0
 800278c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 200-1;
 800278e:	4b2d      	ldr	r3, [pc, #180]	; (8002844 <MX_TIM4_Init+0xf8>)
 8002790:	22c7      	movs	r2, #199	; 0xc7
 8002792:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002794:	4b2b      	ldr	r3, [pc, #172]	; (8002844 <MX_TIM4_Init+0xf8>)
 8002796:	2200      	movs	r2, #0
 8002798:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800279a:	4b2a      	ldr	r3, [pc, #168]	; (8002844 <MX_TIM4_Init+0xf8>)
 800279c:	2200      	movs	r2, #0
 800279e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80027a0:	4828      	ldr	r0, [pc, #160]	; (8002844 <MX_TIM4_Init+0xf8>)
 80027a2:	f002 fc1d 	bl	8004fe0 <HAL_TIM_Base_Init>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 80027ac:	f7ff fcbe 	bl	800212c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027b4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80027b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027ba:	4619      	mov	r1, r3
 80027bc:	4821      	ldr	r0, [pc, #132]	; (8002844 <MX_TIM4_Init+0xf8>)
 80027be:	f002 fffd 	bl	80057bc <HAL_TIM_ConfigClockSource>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 80027c8:	f7ff fcb0 	bl	800212c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80027cc:	481d      	ldr	r0, [pc, #116]	; (8002844 <MX_TIM4_Init+0xf8>)
 80027ce:	f002 fc7a 	bl	80050c6 <HAL_TIM_PWM_Init>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d001      	beq.n	80027dc <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 80027d8:	f7ff fca8 	bl	800212c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027dc:	2300      	movs	r3, #0
 80027de:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027e0:	2300      	movs	r3, #0
 80027e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80027e4:	f107 0320 	add.w	r3, r7, #32
 80027e8:	4619      	mov	r1, r3
 80027ea:	4816      	ldr	r0, [pc, #88]	; (8002844 <MX_TIM4_Init+0xf8>)
 80027ec:	f003 fcf6 	bl	80061dc <HAL_TIMEx_MasterConfigSynchronization>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 80027f6:	f7ff fc99 	bl	800212c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027fa:	2360      	movs	r3, #96	; 0x60
 80027fc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 72-1;
 80027fe:	2347      	movs	r3, #71	; 0x47
 8002800:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002802:	2300      	movs	r3, #0
 8002804:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002806:	2300      	movs	r3, #0
 8002808:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800280a:	1d3b      	adds	r3, r7, #4
 800280c:	2200      	movs	r2, #0
 800280e:	4619      	mov	r1, r3
 8002810:	480c      	ldr	r0, [pc, #48]	; (8002844 <MX_TIM4_Init+0xf8>)
 8002812:	f002 ff0d 	bl	8005630 <HAL_TIM_PWM_ConfigChannel>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d001      	beq.n	8002820 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 800281c:	f7ff fc86 	bl	800212c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002820:	1d3b      	adds	r3, r7, #4
 8002822:	2204      	movs	r2, #4
 8002824:	4619      	mov	r1, r3
 8002826:	4807      	ldr	r0, [pc, #28]	; (8002844 <MX_TIM4_Init+0xf8>)
 8002828:	f002 ff02 	bl	8005630 <HAL_TIM_PWM_ConfigChannel>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <MX_TIM4_Init+0xea>
  {
    Error_Handler();
 8002832:	f7ff fc7b 	bl	800212c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8002836:	4803      	ldr	r0, [pc, #12]	; (8002844 <MX_TIM4_Init+0xf8>)
 8002838:	f000 f9d8 	bl	8002bec <HAL_TIM_MspPostInit>

}
 800283c:	bf00      	nop
 800283e:	3738      	adds	r7, #56	; 0x38
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	20000100 	.word	0x20000100
 8002848:	40000800 	.word	0x40000800

0800284c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b092      	sub	sp, #72	; 0x48
 8002850:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002852:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002856:	2200      	movs	r2, #0
 8002858:	601a      	str	r2, [r3, #0]
 800285a:	605a      	str	r2, [r3, #4]
 800285c:	609a      	str	r2, [r3, #8]
 800285e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002860:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002864:	2200      	movs	r2, #0
 8002866:	601a      	str	r2, [r3, #0]
 8002868:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800286a:	f107 0314 	add.w	r3, r7, #20
 800286e:	2200      	movs	r2, #0
 8002870:	601a      	str	r2, [r3, #0]
 8002872:	605a      	str	r2, [r3, #4]
 8002874:	609a      	str	r2, [r3, #8]
 8002876:	60da      	str	r2, [r3, #12]
 8002878:	611a      	str	r2, [r3, #16]
 800287a:	615a      	str	r2, [r3, #20]
 800287c:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800287e:	1d3b      	adds	r3, r7, #4
 8002880:	2200      	movs	r2, #0
 8002882:	601a      	str	r2, [r3, #0]
 8002884:	605a      	str	r2, [r3, #4]
 8002886:	609a      	str	r2, [r3, #8]
 8002888:	60da      	str	r2, [r3, #12]

  htim5.Instance = TIM5;
 800288a:	4b43      	ldr	r3, [pc, #268]	; (8002998 <MX_TIM5_Init+0x14c>)
 800288c:	4a43      	ldr	r2, [pc, #268]	; (800299c <MX_TIM5_Init+0x150>)
 800288e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 90-1;
 8002890:	4b41      	ldr	r3, [pc, #260]	; (8002998 <MX_TIM5_Init+0x14c>)
 8002892:	2259      	movs	r2, #89	; 0x59
 8002894:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002896:	4b40      	ldr	r3, [pc, #256]	; (8002998 <MX_TIM5_Init+0x14c>)
 8002898:	2200      	movs	r2, #0
 800289a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800289c:	4b3e      	ldr	r3, [pc, #248]	; (8002998 <MX_TIM5_Init+0x14c>)
 800289e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80028a2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028a4:	4b3c      	ldr	r3, [pc, #240]	; (8002998 <MX_TIM5_Init+0x14c>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028aa:	4b3b      	ldr	r3, [pc, #236]	; (8002998 <MX_TIM5_Init+0x14c>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80028b0:	4839      	ldr	r0, [pc, #228]	; (8002998 <MX_TIM5_Init+0x14c>)
 80028b2:	f002 fb95 	bl	8004fe0 <HAL_TIM_Base_Init>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 80028bc:	f7ff fc36 	bl	800212c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028c4:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80028c6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80028ca:	4619      	mov	r1, r3
 80028cc:	4832      	ldr	r0, [pc, #200]	; (8002998 <MX_TIM5_Init+0x14c>)
 80028ce:	f002 ff75 	bl	80057bc <HAL_TIM_ConfigClockSource>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 80028d8:	f7ff fc28 	bl	800212c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80028dc:	482e      	ldr	r0, [pc, #184]	; (8002998 <MX_TIM5_Init+0x14c>)
 80028de:	f002 fbf2 	bl	80050c6 <HAL_TIM_PWM_Init>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <MX_TIM5_Init+0xa0>
  {
    Error_Handler();
 80028e8:	f7ff fc20 	bl	800212c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 80028ec:	482a      	ldr	r0, [pc, #168]	; (8002998 <MX_TIM5_Init+0x14c>)
 80028ee:	f002 fc5d 	bl	80051ac <HAL_TIM_IC_Init>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d001      	beq.n	80028fc <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 80028f8:	f7ff fc18 	bl	800212c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028fc:	2300      	movs	r3, #0
 80028fe:	633b      	str	r3, [r7, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002900:	2300      	movs	r3, #0
 8002902:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002904:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002908:	4619      	mov	r1, r3
 800290a:	4823      	ldr	r0, [pc, #140]	; (8002998 <MX_TIM5_Init+0x14c>)
 800290c:	f003 fc66 	bl	80061dc <HAL_TIMEx_MasterConfigSynchronization>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <MX_TIM5_Init+0xce>
  {
    Error_Handler();
 8002916:	f7ff fc09 	bl	800212c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800291a:	2360      	movs	r3, #96	; 0x60
 800291c:	617b      	str	r3, [r7, #20]
  sConfigOC.Pulse = 0xFFFFFFF5;
 800291e:	f06f 030a 	mvn.w	r3, #10
 8002922:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8002924:	2302      	movs	r3, #2
 8002926:	61fb      	str	r3, [r7, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002928:	2300      	movs	r3, #0
 800292a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800292c:	f107 0314 	add.w	r3, r7, #20
 8002930:	2200      	movs	r2, #0
 8002932:	4619      	mov	r1, r3
 8002934:	4818      	ldr	r0, [pc, #96]	; (8002998 <MX_TIM5_Init+0x14c>)
 8002936:	f002 fe7b 	bl	8005630 <HAL_TIM_PWM_ConfigChannel>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d001      	beq.n	8002944 <MX_TIM5_Init+0xf8>
  {
    Error_Handler();
 8002940:	f7ff fbf4 	bl	800212c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002944:	2300      	movs	r3, #0
 8002946:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002948:	2301      	movs	r3, #1
 800294a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800294c:	2300      	movs	r3, #0
 800294e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8002950:	2300      	movs	r3, #0
 8002952:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002954:	1d3b      	adds	r3, r7, #4
 8002956:	2208      	movs	r2, #8
 8002958:	4619      	mov	r1, r3
 800295a:	480f      	ldr	r0, [pc, #60]	; (8002998 <MX_TIM5_Init+0x14c>)
 800295c:	f002 fdcc 	bl	80054f8 <HAL_TIM_IC_ConfigChannel>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <MX_TIM5_Init+0x11e>
  {
    Error_Handler();
 8002966:	f7ff fbe1 	bl	800212c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800296a:	2302      	movs	r3, #2
 800296c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800296e:	2302      	movs	r3, #2
 8002970:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8002972:	1d3b      	adds	r3, r7, #4
 8002974:	220c      	movs	r2, #12
 8002976:	4619      	mov	r1, r3
 8002978:	4807      	ldr	r0, [pc, #28]	; (8002998 <MX_TIM5_Init+0x14c>)
 800297a:	f002 fdbd 	bl	80054f8 <HAL_TIM_IC_ConfigChannel>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <MX_TIM5_Init+0x13c>
  {
    Error_Handler();
 8002984:	f7ff fbd2 	bl	800212c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim5);
 8002988:	4803      	ldr	r0, [pc, #12]	; (8002998 <MX_TIM5_Init+0x14c>)
 800298a:	f000 f92f 	bl	8002bec <HAL_TIM_MspPostInit>

}
 800298e:	bf00      	nop
 8002990:	3748      	adds	r7, #72	; 0x48
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	20000140 	.word	0x20000140
 800299c:	40000c00 	.word	0x40000c00

080029a0 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029a6:	463b      	mov	r3, r7
 80029a8:	2200      	movs	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]
 80029ac:	605a      	str	r2, [r3, #4]

  htim7.Instance = TIM7;
 80029ae:	4b15      	ldr	r3, [pc, #84]	; (8002a04 <MX_TIM7_Init+0x64>)
 80029b0:	4a15      	ldr	r2, [pc, #84]	; (8002a08 <MX_TIM7_Init+0x68>)
 80029b2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 900-1;
 80029b4:	4b13      	ldr	r3, [pc, #76]	; (8002a04 <MX_TIM7_Init+0x64>)
 80029b6:	f240 3283 	movw	r2, #899	; 0x383
 80029ba:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029bc:	4b11      	ldr	r3, [pc, #68]	; (8002a04 <MX_TIM7_Init+0x64>)
 80029be:	2200      	movs	r2, #0
 80029c0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 80029c2:	4b10      	ldr	r3, [pc, #64]	; (8002a04 <MX_TIM7_Init+0x64>)
 80029c4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80029c8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029ca:	4b0e      	ldr	r3, [pc, #56]	; (8002a04 <MX_TIM7_Init+0x64>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80029d0:	480c      	ldr	r0, [pc, #48]	; (8002a04 <MX_TIM7_Init+0x64>)
 80029d2:	f002 fb05 	bl	8004fe0 <HAL_TIM_Base_Init>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d001      	beq.n	80029e0 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80029dc:	f7ff fba6 	bl	800212c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029e0:	2300      	movs	r3, #0
 80029e2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029e4:	2300      	movs	r3, #0
 80029e6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80029e8:	463b      	mov	r3, r7
 80029ea:	4619      	mov	r1, r3
 80029ec:	4805      	ldr	r0, [pc, #20]	; (8002a04 <MX_TIM7_Init+0x64>)
 80029ee:	f003 fbf5 	bl	80061dc <HAL_TIMEx_MasterConfigSynchronization>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d001      	beq.n	80029fc <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80029f8:	f7ff fb98 	bl	800212c <Error_Handler>
  }

}
 80029fc:	bf00      	nop
 80029fe:	3708      	adds	r7, #8
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	20000200 	.word	0x20000200
 8002a08:	40001400 	.word	0x40001400

08002a0c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b090      	sub	sp, #64	; 0x40
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a18:	2200      	movs	r2, #0
 8002a1a:	601a      	str	r2, [r3, #0]
 8002a1c:	605a      	str	r2, [r3, #4]
 8002a1e:	609a      	str	r2, [r3, #8]
 8002a20:	60da      	str	r2, [r3, #12]
 8002a22:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a2c:	d12d      	bne.n	8002a8a <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a2e:	2300      	movs	r3, #0
 8002a30:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a32:	4b66      	ldr	r3, [pc, #408]	; (8002bcc <HAL_TIM_Base_MspInit+0x1c0>)
 8002a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a36:	4a65      	ldr	r2, [pc, #404]	; (8002bcc <HAL_TIM_Base_MspInit+0x1c0>)
 8002a38:	f043 0301 	orr.w	r3, r3, #1
 8002a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a3e:	4b63      	ldr	r3, [pc, #396]	; (8002bcc <HAL_TIM_Base_MspInit+0x1c0>)
 8002a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a48:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a4e:	4b5f      	ldr	r3, [pc, #380]	; (8002bcc <HAL_TIM_Base_MspInit+0x1c0>)
 8002a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a52:	4a5e      	ldr	r2, [pc, #376]	; (8002bcc <HAL_TIM_Base_MspInit+0x1c0>)
 8002a54:	f043 0301 	orr.w	r3, r3, #1
 8002a58:	6313      	str	r3, [r2, #48]	; 0x30
 8002a5a:	4b5c      	ldr	r3, [pc, #368]	; (8002bcc <HAL_TIM_Base_MspInit+0x1c0>)
 8002a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	627b      	str	r3, [r7, #36]	; 0x24
 8002a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002a66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a70:	2300      	movs	r3, #0
 8002a72:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a74:	2300      	movs	r3, #0
 8002a76:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a80:	4619      	mov	r1, r3
 8002a82:	4853      	ldr	r0, [pc, #332]	; (8002bd0 <HAL_TIM_Base_MspInit+0x1c4>)
 8002a84:	f000 fbf0 	bl	8003268 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8002a88:	e09b      	b.n	8002bc2 <HAL_TIM_Base_MspInit+0x1b6>
  else if(tim_baseHandle->Instance==TIM3)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a51      	ldr	r2, [pc, #324]	; (8002bd4 <HAL_TIM_Base_MspInit+0x1c8>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d12c      	bne.n	8002aee <HAL_TIM_Base_MspInit+0xe2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a94:	2300      	movs	r3, #0
 8002a96:	623b      	str	r3, [r7, #32]
 8002a98:	4b4c      	ldr	r3, [pc, #304]	; (8002bcc <HAL_TIM_Base_MspInit+0x1c0>)
 8002a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9c:	4a4b      	ldr	r2, [pc, #300]	; (8002bcc <HAL_TIM_Base_MspInit+0x1c0>)
 8002a9e:	f043 0302 	orr.w	r3, r3, #2
 8002aa2:	6413      	str	r3, [r2, #64]	; 0x40
 8002aa4:	4b49      	ldr	r3, [pc, #292]	; (8002bcc <HAL_TIM_Base_MspInit+0x1c0>)
 8002aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa8:	f003 0302 	and.w	r3, r3, #2
 8002aac:	623b      	str	r3, [r7, #32]
 8002aae:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	61fb      	str	r3, [r7, #28]
 8002ab4:	4b45      	ldr	r3, [pc, #276]	; (8002bcc <HAL_TIM_Base_MspInit+0x1c0>)
 8002ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab8:	4a44      	ldr	r2, [pc, #272]	; (8002bcc <HAL_TIM_Base_MspInit+0x1c0>)
 8002aba:	f043 0308 	orr.w	r3, r3, #8
 8002abe:	6313      	str	r3, [r2, #48]	; 0x30
 8002ac0:	4b42      	ldr	r3, [pc, #264]	; (8002bcc <HAL_TIM_Base_MspInit+0x1c0>)
 8002ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac4:	f003 0308 	and.w	r3, r3, #8
 8002ac8:	61fb      	str	r3, [r7, #28]
 8002aca:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002acc:	2304      	movs	r3, #4
 8002ace:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad0:	2302      	movs	r3, #2
 8002ad2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002adc:	2302      	movs	r3, #2
 8002ade:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ae0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	483c      	ldr	r0, [pc, #240]	; (8002bd8 <HAL_TIM_Base_MspInit+0x1cc>)
 8002ae8:	f000 fbbe 	bl	8003268 <HAL_GPIO_Init>
}
 8002aec:	e069      	b.n	8002bc2 <HAL_TIM_Base_MspInit+0x1b6>
  else if(tim_baseHandle->Instance==TIM4)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a3a      	ldr	r2, [pc, #232]	; (8002bdc <HAL_TIM_Base_MspInit+0x1d0>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d10e      	bne.n	8002b16 <HAL_TIM_Base_MspInit+0x10a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002af8:	2300      	movs	r3, #0
 8002afa:	61bb      	str	r3, [r7, #24]
 8002afc:	4b33      	ldr	r3, [pc, #204]	; (8002bcc <HAL_TIM_Base_MspInit+0x1c0>)
 8002afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b00:	4a32      	ldr	r2, [pc, #200]	; (8002bcc <HAL_TIM_Base_MspInit+0x1c0>)
 8002b02:	f043 0304 	orr.w	r3, r3, #4
 8002b06:	6413      	str	r3, [r2, #64]	; 0x40
 8002b08:	4b30      	ldr	r3, [pc, #192]	; (8002bcc <HAL_TIM_Base_MspInit+0x1c0>)
 8002b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0c:	f003 0304 	and.w	r3, r3, #4
 8002b10:	61bb      	str	r3, [r7, #24]
 8002b12:	69bb      	ldr	r3, [r7, #24]
}
 8002b14:	e055      	b.n	8002bc2 <HAL_TIM_Base_MspInit+0x1b6>
  else if(tim_baseHandle->Instance==TIM5)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a31      	ldr	r2, [pc, #196]	; (8002be0 <HAL_TIM_Base_MspInit+0x1d4>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d135      	bne.n	8002b8c <HAL_TIM_Base_MspInit+0x180>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002b20:	2300      	movs	r3, #0
 8002b22:	617b      	str	r3, [r7, #20]
 8002b24:	4b29      	ldr	r3, [pc, #164]	; (8002bcc <HAL_TIM_Base_MspInit+0x1c0>)
 8002b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b28:	4a28      	ldr	r2, [pc, #160]	; (8002bcc <HAL_TIM_Base_MspInit+0x1c0>)
 8002b2a:	f043 0308 	orr.w	r3, r3, #8
 8002b2e:	6413      	str	r3, [r2, #64]	; 0x40
 8002b30:	4b26      	ldr	r3, [pc, #152]	; (8002bcc <HAL_TIM_Base_MspInit+0x1c0>)
 8002b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b34:	f003 0308 	and.w	r3, r3, #8
 8002b38:	617b      	str	r3, [r7, #20]
 8002b3a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	613b      	str	r3, [r7, #16]
 8002b40:	4b22      	ldr	r3, [pc, #136]	; (8002bcc <HAL_TIM_Base_MspInit+0x1c0>)
 8002b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b44:	4a21      	ldr	r2, [pc, #132]	; (8002bcc <HAL_TIM_Base_MspInit+0x1c0>)
 8002b46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b4a:	6313      	str	r3, [r2, #48]	; 0x30
 8002b4c:	4b1f      	ldr	r3, [pc, #124]	; (8002bcc <HAL_TIM_Base_MspInit+0x1c0>)
 8002b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b54:	613b      	str	r3, [r7, #16]
 8002b56:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = IC_Eco_Pin;
 8002b58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b5e:	2302      	movs	r3, #2
 8002b60:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b62:	2300      	movs	r3, #0
 8002b64:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b66:	2300      	movs	r3, #0
 8002b68:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002b6a:	2302      	movs	r3, #2
 8002b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(IC_Eco_GPIO_Port, &GPIO_InitStruct);
 8002b6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b72:	4619      	mov	r1, r3
 8002b74:	481b      	ldr	r0, [pc, #108]	; (8002be4 <HAL_TIM_Base_MspInit+0x1d8>)
 8002b76:	f000 fb77 	bl	8003268 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	2100      	movs	r1, #0
 8002b7e:	2032      	movs	r0, #50	; 0x32
 8002b80:	f000 faab 	bl	80030da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002b84:	2032      	movs	r0, #50	; 0x32
 8002b86:	f000 fac4 	bl	8003112 <HAL_NVIC_EnableIRQ>
}
 8002b8a:	e01a      	b.n	8002bc2 <HAL_TIM_Base_MspInit+0x1b6>
  else if(tim_baseHandle->Instance==TIM7)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a15      	ldr	r2, [pc, #84]	; (8002be8 <HAL_TIM_Base_MspInit+0x1dc>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d115      	bne.n	8002bc2 <HAL_TIM_Base_MspInit+0x1b6>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002b96:	2300      	movs	r3, #0
 8002b98:	60fb      	str	r3, [r7, #12]
 8002b9a:	4b0c      	ldr	r3, [pc, #48]	; (8002bcc <HAL_TIM_Base_MspInit+0x1c0>)
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9e:	4a0b      	ldr	r2, [pc, #44]	; (8002bcc <HAL_TIM_Base_MspInit+0x1c0>)
 8002ba0:	f043 0320 	orr.w	r3, r3, #32
 8002ba4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ba6:	4b09      	ldr	r3, [pc, #36]	; (8002bcc <HAL_TIM_Base_MspInit+0x1c0>)
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002baa:	f003 0320 	and.w	r3, r3, #32
 8002bae:	60fb      	str	r3, [r7, #12]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	2100      	movs	r1, #0
 8002bb6:	2037      	movs	r0, #55	; 0x37
 8002bb8:	f000 fa8f 	bl	80030da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002bbc:	2037      	movs	r0, #55	; 0x37
 8002bbe:	f000 faa8 	bl	8003112 <HAL_NVIC_EnableIRQ>
}
 8002bc2:	bf00      	nop
 8002bc4:	3740      	adds	r7, #64	; 0x40
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	40023800 	.word	0x40023800
 8002bd0:	40020000 	.word	0x40020000
 8002bd4:	40000400 	.word	0x40000400
 8002bd8:	40020c00 	.word	0x40020c00
 8002bdc:	40000800 	.word	0x40000800
 8002be0:	40000c00 	.word	0x40000c00
 8002be4:	40021c00 	.word	0x40021c00
 8002be8:	40001400 	.word	0x40001400

08002bec <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b08a      	sub	sp, #40	; 0x28
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bf4:	f107 0314 	add.w	r3, r7, #20
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	605a      	str	r2, [r3, #4]
 8002bfe:	609a      	str	r2, [r3, #8]
 8002c00:	60da      	str	r2, [r3, #12]
 8002c02:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a25      	ldr	r2, [pc, #148]	; (8002ca0 <HAL_TIM_MspPostInit+0xb4>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d11f      	bne.n	8002c4e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c0e:	2300      	movs	r3, #0
 8002c10:	613b      	str	r3, [r7, #16]
 8002c12:	4b24      	ldr	r3, [pc, #144]	; (8002ca4 <HAL_TIM_MspPostInit+0xb8>)
 8002c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c16:	4a23      	ldr	r2, [pc, #140]	; (8002ca4 <HAL_TIM_MspPostInit+0xb8>)
 8002c18:	f043 0308 	orr.w	r3, r3, #8
 8002c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c1e:	4b21      	ldr	r3, [pc, #132]	; (8002ca4 <HAL_TIM_MspPostInit+0xb8>)
 8002c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c22:	f003 0308 	and.w	r3, r3, #8
 8002c26:	613b      	str	r3, [r7, #16]
 8002c28:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = PWM_R_Pin|PWM_L_Pin;
 8002c2a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002c2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c30:	2302      	movs	r3, #2
 8002c32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c34:	2300      	movs	r3, #0
 8002c36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c40:	f107 0314 	add.w	r3, r7, #20
 8002c44:	4619      	mov	r1, r3
 8002c46:	4818      	ldr	r0, [pc, #96]	; (8002ca8 <HAL_TIM_MspPostInit+0xbc>)
 8002c48:	f000 fb0e 	bl	8003268 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002c4c:	e023      	b.n	8002c96 <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM5)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a16      	ldr	r2, [pc, #88]	; (8002cac <HAL_TIM_MspPostInit+0xc0>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d11e      	bne.n	8002c96 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c58:	2300      	movs	r3, #0
 8002c5a:	60fb      	str	r3, [r7, #12]
 8002c5c:	4b11      	ldr	r3, [pc, #68]	; (8002ca4 <HAL_TIM_MspPostInit+0xb8>)
 8002c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c60:	4a10      	ldr	r2, [pc, #64]	; (8002ca4 <HAL_TIM_MspPostInit+0xb8>)
 8002c62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c66:	6313      	str	r3, [r2, #48]	; 0x30
 8002c68:	4b0e      	ldr	r3, [pc, #56]	; (8002ca4 <HAL_TIM_MspPostInit+0xb8>)
 8002c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c70:	60fb      	str	r3, [r7, #12]
 8002c72:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_Trig_Pin;
 8002c74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c7a:	2302      	movs	r3, #2
 8002c7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c82:	2300      	movs	r3, #0
 8002c84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002c86:	2302      	movs	r3, #2
 8002c88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_Trig_GPIO_Port, &GPIO_InitStruct);
 8002c8a:	f107 0314 	add.w	r3, r7, #20
 8002c8e:	4619      	mov	r1, r3
 8002c90:	4807      	ldr	r0, [pc, #28]	; (8002cb0 <HAL_TIM_MspPostInit+0xc4>)
 8002c92:	f000 fae9 	bl	8003268 <HAL_GPIO_Init>
}
 8002c96:	bf00      	nop
 8002c98:	3728      	adds	r7, #40	; 0x28
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	40000800 	.word	0x40000800
 8002ca4:	40023800 	.word	0x40023800
 8002ca8:	40020c00 	.word	0x40020c00
 8002cac:	40000c00 	.word	0x40000c00
 8002cb0:	40021c00 	.word	0x40021c00

08002cb4 <MX_UART7_Init>:

UART_HandleTypeDef huart7;

/* UART7 init function */
void MX_UART7_Init(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	af00      	add	r7, sp, #0

  huart7.Instance = UART7;
 8002cb8:	4b11      	ldr	r3, [pc, #68]	; (8002d00 <MX_UART7_Init+0x4c>)
 8002cba:	4a12      	ldr	r2, [pc, #72]	; (8002d04 <MX_UART7_Init+0x50>)
 8002cbc:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8002cbe:	4b10      	ldr	r3, [pc, #64]	; (8002d00 <MX_UART7_Init+0x4c>)
 8002cc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002cc4:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8002cc6:	4b0e      	ldr	r3, [pc, #56]	; (8002d00 <MX_UART7_Init+0x4c>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8002ccc:	4b0c      	ldr	r3, [pc, #48]	; (8002d00 <MX_UART7_Init+0x4c>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8002cd2:	4b0b      	ldr	r3, [pc, #44]	; (8002d00 <MX_UART7_Init+0x4c>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8002cd8:	4b09      	ldr	r3, [pc, #36]	; (8002d00 <MX_UART7_Init+0x4c>)
 8002cda:	220c      	movs	r2, #12
 8002cdc:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cde:	4b08      	ldr	r3, [pc, #32]	; (8002d00 <MX_UART7_Init+0x4c>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ce4:	4b06      	ldr	r3, [pc, #24]	; (8002d00 <MX_UART7_Init+0x4c>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8002cea:	4805      	ldr	r0, [pc, #20]	; (8002d00 <MX_UART7_Init+0x4c>)
 8002cec:	f003 fb06 	bl	80062fc <HAL_UART_Init>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d001      	beq.n	8002cfa <MX_UART7_Init+0x46>
  {
    Error_Handler();
 8002cf6:	f7ff fa19 	bl	800212c <Error_Handler>
  }

}
 8002cfa:	bf00      	nop
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	20000240 	.word	0x20000240
 8002d04:	40007800 	.word	0x40007800

08002d08 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b08a      	sub	sp, #40	; 0x28
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d10:	f107 0314 	add.w	r3, r7, #20
 8002d14:	2200      	movs	r2, #0
 8002d16:	601a      	str	r2, [r3, #0]
 8002d18:	605a      	str	r2, [r3, #4]
 8002d1a:	609a      	str	r2, [r3, #8]
 8002d1c:	60da      	str	r2, [r3, #12]
 8002d1e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART7)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a1d      	ldr	r2, [pc, #116]	; (8002d9c <HAL_UART_MspInit+0x94>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d133      	bne.n	8002d92 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	613b      	str	r3, [r7, #16]
 8002d2e:	4b1c      	ldr	r3, [pc, #112]	; (8002da0 <HAL_UART_MspInit+0x98>)
 8002d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d32:	4a1b      	ldr	r2, [pc, #108]	; (8002da0 <HAL_UART_MspInit+0x98>)
 8002d34:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002d38:	6413      	str	r3, [r2, #64]	; 0x40
 8002d3a:	4b19      	ldr	r3, [pc, #100]	; (8002da0 <HAL_UART_MspInit+0x98>)
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002d42:	613b      	str	r3, [r7, #16]
 8002d44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d46:	2300      	movs	r3, #0
 8002d48:	60fb      	str	r3, [r7, #12]
 8002d4a:	4b15      	ldr	r3, [pc, #84]	; (8002da0 <HAL_UART_MspInit+0x98>)
 8002d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4e:	4a14      	ldr	r2, [pc, #80]	; (8002da0 <HAL_UART_MspInit+0x98>)
 8002d50:	f043 0320 	orr.w	r3, r3, #32
 8002d54:	6313      	str	r3, [r2, #48]	; 0x30
 8002d56:	4b12      	ldr	r3, [pc, #72]	; (8002da0 <HAL_UART_MspInit+0x98>)
 8002d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5a:	f003 0320 	and.w	r3, r3, #32
 8002d5e:	60fb      	str	r3, [r7, #12]
 8002d60:	68fb      	ldr	r3, [r7, #12]
    /**UART7 GPIO Configuration
    PF6     ------> UART7_RX
    PF7     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002d62:	23c0      	movs	r3, #192	; 0xc0
 8002d64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d66:	2302      	movs	r3, #2
 8002d68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8002d72:	2308      	movs	r3, #8
 8002d74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002d76:	f107 0314 	add.w	r3, r7, #20
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	4809      	ldr	r0, [pc, #36]	; (8002da4 <HAL_UART_MspInit+0x9c>)
 8002d7e:	f000 fa73 	bl	8003268 <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8002d82:	2200      	movs	r2, #0
 8002d84:	2100      	movs	r1, #0
 8002d86:	2052      	movs	r0, #82	; 0x52
 8002d88:	f000 f9a7 	bl	80030da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8002d8c:	2052      	movs	r0, #82	; 0x52
 8002d8e:	f000 f9c0 	bl	8003112 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }
}
 8002d92:	bf00      	nop
 8002d94:	3728      	adds	r7, #40	; 0x28
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	40007800 	.word	0x40007800
 8002da0:	40023800 	.word	0x40023800
 8002da4:	40021400 	.word	0x40021400

08002da8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002da8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002de0 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002dac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002dae:	e003      	b.n	8002db8 <LoopCopyDataInit>

08002db0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002db0:	4b0c      	ldr	r3, [pc, #48]	; (8002de4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002db2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002db4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002db6:	3104      	adds	r1, #4

08002db8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002db8:	480b      	ldr	r0, [pc, #44]	; (8002de8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002dba:	4b0c      	ldr	r3, [pc, #48]	; (8002dec <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002dbc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002dbe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002dc0:	d3f6      	bcc.n	8002db0 <CopyDataInit>
  ldr  r2, =_sbss
 8002dc2:	4a0b      	ldr	r2, [pc, #44]	; (8002df0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002dc4:	e002      	b.n	8002dcc <LoopFillZerobss>

08002dc6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002dc6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002dc8:	f842 3b04 	str.w	r3, [r2], #4

08002dcc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002dcc:	4b09      	ldr	r3, [pc, #36]	; (8002df4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002dce:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002dd0:	d3f9      	bcc.n	8002dc6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002dd2:	f7ff fbff 	bl	80025d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002dd6:	f004 fa1b 	bl	8007210 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002dda:	f7fe f945 	bl	8001068 <main>
  bx  lr    
 8002dde:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002de0:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002de4:	080075e0 	.word	0x080075e0
  ldr  r0, =_sdata
 8002de8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002dec:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8002df0:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8002df4:	20000284 	.word	0x20000284

08002df8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002df8:	e7fe      	b.n	8002df8 <ADC_IRQHandler>
	...

08002dfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e00:	4b0e      	ldr	r3, [pc, #56]	; (8002e3c <HAL_Init+0x40>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a0d      	ldr	r2, [pc, #52]	; (8002e3c <HAL_Init+0x40>)
 8002e06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e0c:	4b0b      	ldr	r3, [pc, #44]	; (8002e3c <HAL_Init+0x40>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a0a      	ldr	r2, [pc, #40]	; (8002e3c <HAL_Init+0x40>)
 8002e12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e18:	4b08      	ldr	r3, [pc, #32]	; (8002e3c <HAL_Init+0x40>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a07      	ldr	r2, [pc, #28]	; (8002e3c <HAL_Init+0x40>)
 8002e1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e24:	2003      	movs	r0, #3
 8002e26:	f000 f94d 	bl	80030c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e2a:	2000      	movs	r0, #0
 8002e2c:	f000 f808 	bl	8002e40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e30:	f7ff fb5c 	bl	80024ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	40023c00 	.word	0x40023c00

08002e40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e48:	4b12      	ldr	r3, [pc, #72]	; (8002e94 <HAL_InitTick+0x54>)
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	4b12      	ldr	r3, [pc, #72]	; (8002e98 <HAL_InitTick+0x58>)
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	4619      	mov	r1, r3
 8002e52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e56:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f000 f965 	bl	800312e <HAL_SYSTICK_Config>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d001      	beq.n	8002e6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e00e      	b.n	8002e8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2b0f      	cmp	r3, #15
 8002e72:	d80a      	bhi.n	8002e8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e74:	2200      	movs	r2, #0
 8002e76:	6879      	ldr	r1, [r7, #4]
 8002e78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e7c:	f000 f92d 	bl	80030da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e80:	4a06      	ldr	r2, [pc, #24]	; (8002e9c <HAL_InitTick+0x5c>)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e86:	2300      	movs	r3, #0
 8002e88:	e000      	b.n	8002e8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3708      	adds	r7, #8
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	20000004 	.word	0x20000004
 8002e98:	2000000c 	.word	0x2000000c
 8002e9c:	20000008 	.word	0x20000008

08002ea0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ea4:	4b06      	ldr	r3, [pc, #24]	; (8002ec0 <HAL_IncTick+0x20>)
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	4b06      	ldr	r3, [pc, #24]	; (8002ec4 <HAL_IncTick+0x24>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4413      	add	r3, r2
 8002eb0:	4a04      	ldr	r2, [pc, #16]	; (8002ec4 <HAL_IncTick+0x24>)
 8002eb2:	6013      	str	r3, [r2, #0]
}
 8002eb4:	bf00      	nop
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	2000000c 	.word	0x2000000c
 8002ec4:	20000280 	.word	0x20000280

08002ec8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
  return uwTick;
 8002ecc:	4b03      	ldr	r3, [pc, #12]	; (8002edc <HAL_GetTick+0x14>)
 8002ece:	681b      	ldr	r3, [r3, #0]
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	20000280 	.word	0x20000280

08002ee0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ee8:	f7ff ffee 	bl	8002ec8 <HAL_GetTick>
 8002eec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ef8:	d005      	beq.n	8002f06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002efa:	4b09      	ldr	r3, [pc, #36]	; (8002f20 <HAL_Delay+0x40>)
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	461a      	mov	r2, r3
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	4413      	add	r3, r2
 8002f04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f06:	bf00      	nop
 8002f08:	f7ff ffde 	bl	8002ec8 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	68fa      	ldr	r2, [r7, #12]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d8f7      	bhi.n	8002f08 <HAL_Delay+0x28>
  {
  }
}
 8002f18:	bf00      	nop
 8002f1a:	3710      	adds	r7, #16
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	2000000c 	.word	0x2000000c

08002f24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b085      	sub	sp, #20
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f003 0307 	and.w	r3, r3, #7
 8002f32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f34:	4b0c      	ldr	r3, [pc, #48]	; (8002f68 <__NVIC_SetPriorityGrouping+0x44>)
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f3a:	68ba      	ldr	r2, [r7, #8]
 8002f3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f40:	4013      	ands	r3, r2
 8002f42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f56:	4a04      	ldr	r2, [pc, #16]	; (8002f68 <__NVIC_SetPriorityGrouping+0x44>)
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	60d3      	str	r3, [r2, #12]
}
 8002f5c:	bf00      	nop
 8002f5e:	3714      	adds	r7, #20
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr
 8002f68:	e000ed00 	.word	0xe000ed00

08002f6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f70:	4b04      	ldr	r3, [pc, #16]	; (8002f84 <__NVIC_GetPriorityGrouping+0x18>)
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	0a1b      	lsrs	r3, r3, #8
 8002f76:	f003 0307 	and.w	r3, r3, #7
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr
 8002f84:	e000ed00 	.word	0xe000ed00

08002f88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	4603      	mov	r3, r0
 8002f90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	db0b      	blt.n	8002fb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f9a:	79fb      	ldrb	r3, [r7, #7]
 8002f9c:	f003 021f 	and.w	r2, r3, #31
 8002fa0:	4907      	ldr	r1, [pc, #28]	; (8002fc0 <__NVIC_EnableIRQ+0x38>)
 8002fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa6:	095b      	lsrs	r3, r3, #5
 8002fa8:	2001      	movs	r0, #1
 8002faa:	fa00 f202 	lsl.w	r2, r0, r2
 8002fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002fb2:	bf00      	nop
 8002fb4:	370c      	adds	r7, #12
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	e000e100 	.word	0xe000e100

08002fc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	4603      	mov	r3, r0
 8002fcc:	6039      	str	r1, [r7, #0]
 8002fce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	db0a      	blt.n	8002fee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	b2da      	uxtb	r2, r3
 8002fdc:	490c      	ldr	r1, [pc, #48]	; (8003010 <__NVIC_SetPriority+0x4c>)
 8002fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe2:	0112      	lsls	r2, r2, #4
 8002fe4:	b2d2      	uxtb	r2, r2
 8002fe6:	440b      	add	r3, r1
 8002fe8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fec:	e00a      	b.n	8003004 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	b2da      	uxtb	r2, r3
 8002ff2:	4908      	ldr	r1, [pc, #32]	; (8003014 <__NVIC_SetPriority+0x50>)
 8002ff4:	79fb      	ldrb	r3, [r7, #7]
 8002ff6:	f003 030f 	and.w	r3, r3, #15
 8002ffa:	3b04      	subs	r3, #4
 8002ffc:	0112      	lsls	r2, r2, #4
 8002ffe:	b2d2      	uxtb	r2, r2
 8003000:	440b      	add	r3, r1
 8003002:	761a      	strb	r2, [r3, #24]
}
 8003004:	bf00      	nop
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr
 8003010:	e000e100 	.word	0xe000e100
 8003014:	e000ed00 	.word	0xe000ed00

08003018 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003018:	b480      	push	{r7}
 800301a:	b089      	sub	sp, #36	; 0x24
 800301c:	af00      	add	r7, sp, #0
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	60b9      	str	r1, [r7, #8]
 8003022:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f003 0307 	and.w	r3, r3, #7
 800302a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	f1c3 0307 	rsb	r3, r3, #7
 8003032:	2b04      	cmp	r3, #4
 8003034:	bf28      	it	cs
 8003036:	2304      	movcs	r3, #4
 8003038:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	3304      	adds	r3, #4
 800303e:	2b06      	cmp	r3, #6
 8003040:	d902      	bls.n	8003048 <NVIC_EncodePriority+0x30>
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	3b03      	subs	r3, #3
 8003046:	e000      	b.n	800304a <NVIC_EncodePriority+0x32>
 8003048:	2300      	movs	r3, #0
 800304a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800304c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	fa02 f303 	lsl.w	r3, r2, r3
 8003056:	43da      	mvns	r2, r3
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	401a      	ands	r2, r3
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003060:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	fa01 f303 	lsl.w	r3, r1, r3
 800306a:	43d9      	mvns	r1, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003070:	4313      	orrs	r3, r2
         );
}
 8003072:	4618      	mov	r0, r3
 8003074:	3724      	adds	r7, #36	; 0x24
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
	...

08003080 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	3b01      	subs	r3, #1
 800308c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003090:	d301      	bcc.n	8003096 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003092:	2301      	movs	r3, #1
 8003094:	e00f      	b.n	80030b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003096:	4a0a      	ldr	r2, [pc, #40]	; (80030c0 <SysTick_Config+0x40>)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	3b01      	subs	r3, #1
 800309c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800309e:	210f      	movs	r1, #15
 80030a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80030a4:	f7ff ff8e 	bl	8002fc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030a8:	4b05      	ldr	r3, [pc, #20]	; (80030c0 <SysTick_Config+0x40>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030ae:	4b04      	ldr	r3, [pc, #16]	; (80030c0 <SysTick_Config+0x40>)
 80030b0:	2207      	movs	r2, #7
 80030b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030b4:	2300      	movs	r3, #0
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3708      	adds	r7, #8
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	e000e010 	.word	0xe000e010

080030c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f7ff ff29 	bl	8002f24 <__NVIC_SetPriorityGrouping>
}
 80030d2:	bf00      	nop
 80030d4:	3708      	adds	r7, #8
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030da:	b580      	push	{r7, lr}
 80030dc:	b086      	sub	sp, #24
 80030de:	af00      	add	r7, sp, #0
 80030e0:	4603      	mov	r3, r0
 80030e2:	60b9      	str	r1, [r7, #8]
 80030e4:	607a      	str	r2, [r7, #4]
 80030e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030e8:	2300      	movs	r3, #0
 80030ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030ec:	f7ff ff3e 	bl	8002f6c <__NVIC_GetPriorityGrouping>
 80030f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	68b9      	ldr	r1, [r7, #8]
 80030f6:	6978      	ldr	r0, [r7, #20]
 80030f8:	f7ff ff8e 	bl	8003018 <NVIC_EncodePriority>
 80030fc:	4602      	mov	r2, r0
 80030fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003102:	4611      	mov	r1, r2
 8003104:	4618      	mov	r0, r3
 8003106:	f7ff ff5d 	bl	8002fc4 <__NVIC_SetPriority>
}
 800310a:	bf00      	nop
 800310c:	3718      	adds	r7, #24
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}

08003112 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003112:	b580      	push	{r7, lr}
 8003114:	b082      	sub	sp, #8
 8003116:	af00      	add	r7, sp, #0
 8003118:	4603      	mov	r3, r0
 800311a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800311c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003120:	4618      	mov	r0, r3
 8003122:	f7ff ff31 	bl	8002f88 <__NVIC_EnableIRQ>
}
 8003126:	bf00      	nop
 8003128:	3708      	adds	r7, #8
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}

0800312e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800312e:	b580      	push	{r7, lr}
 8003130:	b082      	sub	sp, #8
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f7ff ffa2 	bl	8003080 <SysTick_Config>
 800313c:	4603      	mov	r3, r0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3708      	adds	r7, #8
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}

08003146 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8003146:	b580      	push	{r7, lr}
 8003148:	b082      	sub	sp, #8
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d101      	bne.n	8003158 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e014      	b.n	8003182 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	791b      	ldrb	r3, [r3, #4]
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d105      	bne.n	800316e <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f7fd fe13 	bl	8000d94 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2202      	movs	r2, #2
 8003172:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2201      	movs	r2, #1
 800317e:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3708      	adds	r7, #8
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}

0800318a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 800318a:	b480      	push	{r7}
 800318c:	b087      	sub	sp, #28
 800318e:	af00      	add	r7, sp, #0
 8003190:	60f8      	str	r0, [r7, #12]
 8003192:	60b9      	str	r1, [r7, #8]
 8003194:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8003196:	2300      	movs	r3, #0
 8003198:	617b      	str	r3, [r7, #20]
 800319a:	2300      	movs	r3, #0
 800319c:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	795b      	ldrb	r3, [r3, #5]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d101      	bne.n	80031aa <HAL_DAC_ConfigChannel+0x20>
 80031a6:	2302      	movs	r3, #2
 80031a8:	e036      	b.n	8003218 <HAL_DAC_ConfigChannel+0x8e>
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2201      	movs	r2, #1
 80031ae:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2202      	movs	r2, #2
 80031b4:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80031be:	f640 72fe 	movw	r2, #4094	; 0xffe
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	fa02 f303 	lsl.w	r3, r2, r3
 80031c8:	43db      	mvns	r3, r3
 80031ca:	697a      	ldr	r2, [r7, #20]
 80031cc:	4013      	ands	r3, r2
 80031ce:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	4313      	orrs	r3, r2
 80031da:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80031dc:	693a      	ldr	r2, [r7, #16]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	fa02 f303 	lsl.w	r3, r2, r3
 80031e4:	697a      	ldr	r2, [r7, #20]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	697a      	ldr	r2, [r7, #20]
 80031f0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	6819      	ldr	r1, [r3, #0]
 80031f8:	22c0      	movs	r2, #192	; 0xc0
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003200:	43da      	mvns	r2, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	400a      	ands	r2, r1
 8003208:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2201      	movs	r2, #1
 800320e:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2200      	movs	r2, #0
 8003214:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	371c      	adds	r7, #28
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr

08003224 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003232:	b2db      	uxtb	r3, r3
 8003234:	2b02      	cmp	r3, #2
 8003236:	d004      	beq.n	8003242 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2280      	movs	r2, #128	; 0x80
 800323c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e00c      	b.n	800325c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2205      	movs	r2, #5
 8003246:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f022 0201 	bic.w	r2, r2, #1
 8003258:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800325a:	2300      	movs	r3, #0
}
 800325c:	4618      	mov	r0, r3
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003268:	b480      	push	{r7}
 800326a:	b089      	sub	sp, #36	; 0x24
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003272:	2300      	movs	r3, #0
 8003274:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003276:	2300      	movs	r3, #0
 8003278:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800327a:	2300      	movs	r3, #0
 800327c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800327e:	2300      	movs	r3, #0
 8003280:	61fb      	str	r3, [r7, #28]
 8003282:	e177      	b.n	8003574 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003284:	2201      	movs	r2, #1
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	fa02 f303 	lsl.w	r3, r2, r3
 800328c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	697a      	ldr	r2, [r7, #20]
 8003294:	4013      	ands	r3, r2
 8003296:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003298:	693a      	ldr	r2, [r7, #16]
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	429a      	cmp	r2, r3
 800329e:	f040 8166 	bne.w	800356e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d00b      	beq.n	80032c2 <HAL_GPIO_Init+0x5a>
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d007      	beq.n	80032c2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80032b6:	2b11      	cmp	r3, #17
 80032b8:	d003      	beq.n	80032c2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	2b12      	cmp	r3, #18
 80032c0:	d130      	bne.n	8003324 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	005b      	lsls	r3, r3, #1
 80032cc:	2203      	movs	r2, #3
 80032ce:	fa02 f303 	lsl.w	r3, r2, r3
 80032d2:	43db      	mvns	r3, r3
 80032d4:	69ba      	ldr	r2, [r7, #24]
 80032d6:	4013      	ands	r3, r2
 80032d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	68da      	ldr	r2, [r3, #12]
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	005b      	lsls	r3, r3, #1
 80032e2:	fa02 f303 	lsl.w	r3, r2, r3
 80032e6:	69ba      	ldr	r2, [r7, #24]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	69ba      	ldr	r2, [r7, #24]
 80032f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032f8:	2201      	movs	r2, #1
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003300:	43db      	mvns	r3, r3
 8003302:	69ba      	ldr	r2, [r7, #24]
 8003304:	4013      	ands	r3, r2
 8003306:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	091b      	lsrs	r3, r3, #4
 800330e:	f003 0201 	and.w	r2, r3, #1
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	fa02 f303 	lsl.w	r3, r2, r3
 8003318:	69ba      	ldr	r2, [r7, #24]
 800331a:	4313      	orrs	r3, r2
 800331c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	005b      	lsls	r3, r3, #1
 800332e:	2203      	movs	r2, #3
 8003330:	fa02 f303 	lsl.w	r3, r2, r3
 8003334:	43db      	mvns	r3, r3
 8003336:	69ba      	ldr	r2, [r7, #24]
 8003338:	4013      	ands	r3, r2
 800333a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	689a      	ldr	r2, [r3, #8]
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	005b      	lsls	r3, r3, #1
 8003344:	fa02 f303 	lsl.w	r3, r2, r3
 8003348:	69ba      	ldr	r2, [r7, #24]
 800334a:	4313      	orrs	r3, r2
 800334c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	69ba      	ldr	r2, [r7, #24]
 8003352:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	2b02      	cmp	r3, #2
 800335a:	d003      	beq.n	8003364 <HAL_GPIO_Init+0xfc>
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	2b12      	cmp	r3, #18
 8003362:	d123      	bne.n	80033ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	08da      	lsrs	r2, r3, #3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	3208      	adds	r2, #8
 800336c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003370:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	f003 0307 	and.w	r3, r3, #7
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	220f      	movs	r2, #15
 800337c:	fa02 f303 	lsl.w	r3, r2, r3
 8003380:	43db      	mvns	r3, r3
 8003382:	69ba      	ldr	r2, [r7, #24]
 8003384:	4013      	ands	r3, r2
 8003386:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	691a      	ldr	r2, [r3, #16]
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	f003 0307 	and.w	r3, r3, #7
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	fa02 f303 	lsl.w	r3, r2, r3
 8003398:	69ba      	ldr	r2, [r7, #24]
 800339a:	4313      	orrs	r3, r2
 800339c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	08da      	lsrs	r2, r3, #3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	3208      	adds	r2, #8
 80033a6:	69b9      	ldr	r1, [r7, #24]
 80033a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	005b      	lsls	r3, r3, #1
 80033b6:	2203      	movs	r2, #3
 80033b8:	fa02 f303 	lsl.w	r3, r2, r3
 80033bc:	43db      	mvns	r3, r3
 80033be:	69ba      	ldr	r2, [r7, #24]
 80033c0:	4013      	ands	r3, r2
 80033c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f003 0203 	and.w	r2, r3, #3
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	005b      	lsls	r3, r3, #1
 80033d0:	fa02 f303 	lsl.w	r3, r2, r3
 80033d4:	69ba      	ldr	r2, [r7, #24]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	69ba      	ldr	r2, [r7, #24]
 80033de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	f000 80c0 	beq.w	800356e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033ee:	2300      	movs	r3, #0
 80033f0:	60fb      	str	r3, [r7, #12]
 80033f2:	4b65      	ldr	r3, [pc, #404]	; (8003588 <HAL_GPIO_Init+0x320>)
 80033f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f6:	4a64      	ldr	r2, [pc, #400]	; (8003588 <HAL_GPIO_Init+0x320>)
 80033f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033fc:	6453      	str	r3, [r2, #68]	; 0x44
 80033fe:	4b62      	ldr	r3, [pc, #392]	; (8003588 <HAL_GPIO_Init+0x320>)
 8003400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003402:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003406:	60fb      	str	r3, [r7, #12]
 8003408:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800340a:	4a60      	ldr	r2, [pc, #384]	; (800358c <HAL_GPIO_Init+0x324>)
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	089b      	lsrs	r3, r3, #2
 8003410:	3302      	adds	r3, #2
 8003412:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003416:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	f003 0303 	and.w	r3, r3, #3
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	220f      	movs	r2, #15
 8003422:	fa02 f303 	lsl.w	r3, r2, r3
 8003426:	43db      	mvns	r3, r3
 8003428:	69ba      	ldr	r2, [r7, #24]
 800342a:	4013      	ands	r3, r2
 800342c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a57      	ldr	r2, [pc, #348]	; (8003590 <HAL_GPIO_Init+0x328>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d037      	beq.n	80034a6 <HAL_GPIO_Init+0x23e>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a56      	ldr	r2, [pc, #344]	; (8003594 <HAL_GPIO_Init+0x32c>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d031      	beq.n	80034a2 <HAL_GPIO_Init+0x23a>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a55      	ldr	r2, [pc, #340]	; (8003598 <HAL_GPIO_Init+0x330>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d02b      	beq.n	800349e <HAL_GPIO_Init+0x236>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a54      	ldr	r2, [pc, #336]	; (800359c <HAL_GPIO_Init+0x334>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d025      	beq.n	800349a <HAL_GPIO_Init+0x232>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a53      	ldr	r2, [pc, #332]	; (80035a0 <HAL_GPIO_Init+0x338>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d01f      	beq.n	8003496 <HAL_GPIO_Init+0x22e>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a52      	ldr	r2, [pc, #328]	; (80035a4 <HAL_GPIO_Init+0x33c>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d019      	beq.n	8003492 <HAL_GPIO_Init+0x22a>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a51      	ldr	r2, [pc, #324]	; (80035a8 <HAL_GPIO_Init+0x340>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d013      	beq.n	800348e <HAL_GPIO_Init+0x226>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a50      	ldr	r2, [pc, #320]	; (80035ac <HAL_GPIO_Init+0x344>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d00d      	beq.n	800348a <HAL_GPIO_Init+0x222>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a4f      	ldr	r2, [pc, #316]	; (80035b0 <HAL_GPIO_Init+0x348>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d007      	beq.n	8003486 <HAL_GPIO_Init+0x21e>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a4e      	ldr	r2, [pc, #312]	; (80035b4 <HAL_GPIO_Init+0x34c>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d101      	bne.n	8003482 <HAL_GPIO_Init+0x21a>
 800347e:	2309      	movs	r3, #9
 8003480:	e012      	b.n	80034a8 <HAL_GPIO_Init+0x240>
 8003482:	230a      	movs	r3, #10
 8003484:	e010      	b.n	80034a8 <HAL_GPIO_Init+0x240>
 8003486:	2308      	movs	r3, #8
 8003488:	e00e      	b.n	80034a8 <HAL_GPIO_Init+0x240>
 800348a:	2307      	movs	r3, #7
 800348c:	e00c      	b.n	80034a8 <HAL_GPIO_Init+0x240>
 800348e:	2306      	movs	r3, #6
 8003490:	e00a      	b.n	80034a8 <HAL_GPIO_Init+0x240>
 8003492:	2305      	movs	r3, #5
 8003494:	e008      	b.n	80034a8 <HAL_GPIO_Init+0x240>
 8003496:	2304      	movs	r3, #4
 8003498:	e006      	b.n	80034a8 <HAL_GPIO_Init+0x240>
 800349a:	2303      	movs	r3, #3
 800349c:	e004      	b.n	80034a8 <HAL_GPIO_Init+0x240>
 800349e:	2302      	movs	r3, #2
 80034a0:	e002      	b.n	80034a8 <HAL_GPIO_Init+0x240>
 80034a2:	2301      	movs	r3, #1
 80034a4:	e000      	b.n	80034a8 <HAL_GPIO_Init+0x240>
 80034a6:	2300      	movs	r3, #0
 80034a8:	69fa      	ldr	r2, [r7, #28]
 80034aa:	f002 0203 	and.w	r2, r2, #3
 80034ae:	0092      	lsls	r2, r2, #2
 80034b0:	4093      	lsls	r3, r2
 80034b2:	69ba      	ldr	r2, [r7, #24]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034b8:	4934      	ldr	r1, [pc, #208]	; (800358c <HAL_GPIO_Init+0x324>)
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	089b      	lsrs	r3, r3, #2
 80034be:	3302      	adds	r3, #2
 80034c0:	69ba      	ldr	r2, [r7, #24]
 80034c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034c6:	4b3c      	ldr	r3, [pc, #240]	; (80035b8 <HAL_GPIO_Init+0x350>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	43db      	mvns	r3, r3
 80034d0:	69ba      	ldr	r2, [r7, #24]
 80034d2:	4013      	ands	r3, r2
 80034d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d003      	beq.n	80034ea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80034e2:	69ba      	ldr	r2, [r7, #24]
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034ea:	4a33      	ldr	r2, [pc, #204]	; (80035b8 <HAL_GPIO_Init+0x350>)
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80034f0:	4b31      	ldr	r3, [pc, #196]	; (80035b8 <HAL_GPIO_Init+0x350>)
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	43db      	mvns	r3, r3
 80034fa:	69ba      	ldr	r2, [r7, #24]
 80034fc:	4013      	ands	r3, r2
 80034fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d003      	beq.n	8003514 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800350c:	69ba      	ldr	r2, [r7, #24]
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	4313      	orrs	r3, r2
 8003512:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003514:	4a28      	ldr	r2, [pc, #160]	; (80035b8 <HAL_GPIO_Init+0x350>)
 8003516:	69bb      	ldr	r3, [r7, #24]
 8003518:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800351a:	4b27      	ldr	r3, [pc, #156]	; (80035b8 <HAL_GPIO_Init+0x350>)
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	43db      	mvns	r3, r3
 8003524:	69ba      	ldr	r2, [r7, #24]
 8003526:	4013      	ands	r3, r2
 8003528:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d003      	beq.n	800353e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003536:	69ba      	ldr	r2, [r7, #24]
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	4313      	orrs	r3, r2
 800353c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800353e:	4a1e      	ldr	r2, [pc, #120]	; (80035b8 <HAL_GPIO_Init+0x350>)
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003544:	4b1c      	ldr	r3, [pc, #112]	; (80035b8 <HAL_GPIO_Init+0x350>)
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	43db      	mvns	r3, r3
 800354e:	69ba      	ldr	r2, [r7, #24]
 8003550:	4013      	ands	r3, r2
 8003552:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d003      	beq.n	8003568 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003560:	69ba      	ldr	r2, [r7, #24]
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	4313      	orrs	r3, r2
 8003566:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003568:	4a13      	ldr	r2, [pc, #76]	; (80035b8 <HAL_GPIO_Init+0x350>)
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	3301      	adds	r3, #1
 8003572:	61fb      	str	r3, [r7, #28]
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	2b0f      	cmp	r3, #15
 8003578:	f67f ae84 	bls.w	8003284 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800357c:	bf00      	nop
 800357e:	3724      	adds	r7, #36	; 0x24
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr
 8003588:	40023800 	.word	0x40023800
 800358c:	40013800 	.word	0x40013800
 8003590:	40020000 	.word	0x40020000
 8003594:	40020400 	.word	0x40020400
 8003598:	40020800 	.word	0x40020800
 800359c:	40020c00 	.word	0x40020c00
 80035a0:	40021000 	.word	0x40021000
 80035a4:	40021400 	.word	0x40021400
 80035a8:	40021800 	.word	0x40021800
 80035ac:	40021c00 	.word	0x40021c00
 80035b0:	40022000 	.word	0x40022000
 80035b4:	40022400 	.word	0x40022400
 80035b8:	40013c00 	.word	0x40013c00

080035bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80035bc:	b480      	push	{r7}
 80035be:	b085      	sub	sp, #20
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	460b      	mov	r3, r1
 80035c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	691a      	ldr	r2, [r3, #16]
 80035cc:	887b      	ldrh	r3, [r7, #2]
 80035ce:	4013      	ands	r3, r2
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d002      	beq.n	80035da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80035d4:	2301      	movs	r3, #1
 80035d6:	73fb      	strb	r3, [r7, #15]
 80035d8:	e001      	b.n	80035de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80035da:	2300      	movs	r3, #0
 80035dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80035de:	7bfb      	ldrb	r3, [r7, #15]
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3714      	adds	r7, #20
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	460b      	mov	r3, r1
 80035f6:	807b      	strh	r3, [r7, #2]
 80035f8:	4613      	mov	r3, r2
 80035fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035fc:	787b      	ldrb	r3, [r7, #1]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d003      	beq.n	800360a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003602:	887a      	ldrh	r2, [r7, #2]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003608:	e003      	b.n	8003612 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800360a:	887b      	ldrh	r3, [r7, #2]
 800360c:	041a      	lsls	r2, r3, #16
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	619a      	str	r2, [r3, #24]
}
 8003612:	bf00      	nop
 8003614:	370c      	adds	r7, #12
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
	...

08003620 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d101      	bne.n	8003632 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e11f      	b.n	8003872 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003638:	b2db      	uxtb	r3, r3
 800363a:	2b00      	cmp	r3, #0
 800363c:	d106      	bne.n	800364c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f7fd fcc6 	bl	8000fd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2224      	movs	r2, #36	; 0x24
 8003650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f022 0201 	bic.w	r2, r2, #1
 8003662:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003672:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003682:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003684:	f001 fc84 	bl	8004f90 <HAL_RCC_GetPCLK1Freq>
 8003688:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	4a7b      	ldr	r2, [pc, #492]	; (800387c <HAL_I2C_Init+0x25c>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d807      	bhi.n	80036a4 <HAL_I2C_Init+0x84>
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	4a7a      	ldr	r2, [pc, #488]	; (8003880 <HAL_I2C_Init+0x260>)
 8003698:	4293      	cmp	r3, r2
 800369a:	bf94      	ite	ls
 800369c:	2301      	movls	r3, #1
 800369e:	2300      	movhi	r3, #0
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	e006      	b.n	80036b2 <HAL_I2C_Init+0x92>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	4a77      	ldr	r2, [pc, #476]	; (8003884 <HAL_I2C_Init+0x264>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	bf94      	ite	ls
 80036ac:	2301      	movls	r3, #1
 80036ae:	2300      	movhi	r3, #0
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d001      	beq.n	80036ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e0db      	b.n	8003872 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	4a72      	ldr	r2, [pc, #456]	; (8003888 <HAL_I2C_Init+0x268>)
 80036be:	fba2 2303 	umull	r2, r3, r2, r3
 80036c2:	0c9b      	lsrs	r3, r3, #18
 80036c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	68ba      	ldr	r2, [r7, #8]
 80036d6:	430a      	orrs	r2, r1
 80036d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	6a1b      	ldr	r3, [r3, #32]
 80036e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	4a64      	ldr	r2, [pc, #400]	; (800387c <HAL_I2C_Init+0x25c>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d802      	bhi.n	80036f4 <HAL_I2C_Init+0xd4>
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	3301      	adds	r3, #1
 80036f2:	e009      	b.n	8003708 <HAL_I2C_Init+0xe8>
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80036fa:	fb02 f303 	mul.w	r3, r2, r3
 80036fe:	4a63      	ldr	r2, [pc, #396]	; (800388c <HAL_I2C_Init+0x26c>)
 8003700:	fba2 2303 	umull	r2, r3, r2, r3
 8003704:	099b      	lsrs	r3, r3, #6
 8003706:	3301      	adds	r3, #1
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	6812      	ldr	r2, [r2, #0]
 800370c:	430b      	orrs	r3, r1
 800370e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	69db      	ldr	r3, [r3, #28]
 8003716:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800371a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	4956      	ldr	r1, [pc, #344]	; (800387c <HAL_I2C_Init+0x25c>)
 8003724:	428b      	cmp	r3, r1
 8003726:	d80d      	bhi.n	8003744 <HAL_I2C_Init+0x124>
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	1e59      	subs	r1, r3, #1
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	005b      	lsls	r3, r3, #1
 8003732:	fbb1 f3f3 	udiv	r3, r1, r3
 8003736:	3301      	adds	r3, #1
 8003738:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800373c:	2b04      	cmp	r3, #4
 800373e:	bf38      	it	cc
 8003740:	2304      	movcc	r3, #4
 8003742:	e04f      	b.n	80037e4 <HAL_I2C_Init+0x1c4>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d111      	bne.n	8003770 <HAL_I2C_Init+0x150>
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	1e58      	subs	r0, r3, #1
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6859      	ldr	r1, [r3, #4]
 8003754:	460b      	mov	r3, r1
 8003756:	005b      	lsls	r3, r3, #1
 8003758:	440b      	add	r3, r1
 800375a:	fbb0 f3f3 	udiv	r3, r0, r3
 800375e:	3301      	adds	r3, #1
 8003760:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003764:	2b00      	cmp	r3, #0
 8003766:	bf0c      	ite	eq
 8003768:	2301      	moveq	r3, #1
 800376a:	2300      	movne	r3, #0
 800376c:	b2db      	uxtb	r3, r3
 800376e:	e012      	b.n	8003796 <HAL_I2C_Init+0x176>
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	1e58      	subs	r0, r3, #1
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6859      	ldr	r1, [r3, #4]
 8003778:	460b      	mov	r3, r1
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	440b      	add	r3, r1
 800377e:	0099      	lsls	r1, r3, #2
 8003780:	440b      	add	r3, r1
 8003782:	fbb0 f3f3 	udiv	r3, r0, r3
 8003786:	3301      	adds	r3, #1
 8003788:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800378c:	2b00      	cmp	r3, #0
 800378e:	bf0c      	ite	eq
 8003790:	2301      	moveq	r3, #1
 8003792:	2300      	movne	r3, #0
 8003794:	b2db      	uxtb	r3, r3
 8003796:	2b00      	cmp	r3, #0
 8003798:	d001      	beq.n	800379e <HAL_I2C_Init+0x17e>
 800379a:	2301      	movs	r3, #1
 800379c:	e022      	b.n	80037e4 <HAL_I2C_Init+0x1c4>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d10e      	bne.n	80037c4 <HAL_I2C_Init+0x1a4>
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	1e58      	subs	r0, r3, #1
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6859      	ldr	r1, [r3, #4]
 80037ae:	460b      	mov	r3, r1
 80037b0:	005b      	lsls	r3, r3, #1
 80037b2:	440b      	add	r3, r1
 80037b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80037b8:	3301      	adds	r3, #1
 80037ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037c2:	e00f      	b.n	80037e4 <HAL_I2C_Init+0x1c4>
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	1e58      	subs	r0, r3, #1
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6859      	ldr	r1, [r3, #4]
 80037cc:	460b      	mov	r3, r1
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	440b      	add	r3, r1
 80037d2:	0099      	lsls	r1, r3, #2
 80037d4:	440b      	add	r3, r1
 80037d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80037da:	3301      	adds	r3, #1
 80037dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80037e4:	6879      	ldr	r1, [r7, #4]
 80037e6:	6809      	ldr	r1, [r1, #0]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	69da      	ldr	r2, [r3, #28]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a1b      	ldr	r3, [r3, #32]
 80037fe:	431a      	orrs	r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	430a      	orrs	r2, r1
 8003806:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003812:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	6911      	ldr	r1, [r2, #16]
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	68d2      	ldr	r2, [r2, #12]
 800381e:	4311      	orrs	r1, r2
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	6812      	ldr	r2, [r2, #0]
 8003824:	430b      	orrs	r3, r1
 8003826:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	695a      	ldr	r2, [r3, #20]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	431a      	orrs	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	430a      	orrs	r2, r1
 8003842:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f042 0201 	orr.w	r2, r2, #1
 8003852:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2220      	movs	r2, #32
 800385e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3710      	adds	r7, #16
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	000186a0 	.word	0x000186a0
 8003880:	001e847f 	.word	0x001e847f
 8003884:	003d08ff 	.word	0x003d08ff
 8003888:	431bde83 	.word	0x431bde83
 800388c:	10624dd3 	.word	0x10624dd3

08003890 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b088      	sub	sp, #32
 8003894:	af02      	add	r7, sp, #8
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	4608      	mov	r0, r1
 800389a:	4611      	mov	r1, r2
 800389c:	461a      	mov	r2, r3
 800389e:	4603      	mov	r3, r0
 80038a0:	817b      	strh	r3, [r7, #10]
 80038a2:	460b      	mov	r3, r1
 80038a4:	813b      	strh	r3, [r7, #8]
 80038a6:	4613      	mov	r3, r2
 80038a8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80038aa:	f7ff fb0d 	bl	8002ec8 <HAL_GetTick>
 80038ae:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	2b20      	cmp	r3, #32
 80038ba:	f040 80d9 	bne.w	8003a70 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	9300      	str	r3, [sp, #0]
 80038c2:	2319      	movs	r3, #25
 80038c4:	2201      	movs	r2, #1
 80038c6:	496d      	ldr	r1, [pc, #436]	; (8003a7c <HAL_I2C_Mem_Write+0x1ec>)
 80038c8:	68f8      	ldr	r0, [r7, #12]
 80038ca:	f000 fc7f 	bl	80041cc <I2C_WaitOnFlagUntilTimeout>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d001      	beq.n	80038d8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80038d4:	2302      	movs	r3, #2
 80038d6:	e0cc      	b.n	8003a72 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d101      	bne.n	80038e6 <HAL_I2C_Mem_Write+0x56>
 80038e2:	2302      	movs	r3, #2
 80038e4:	e0c5      	b.n	8003a72 <HAL_I2C_Mem_Write+0x1e2>
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2201      	movs	r2, #1
 80038ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0301 	and.w	r3, r3, #1
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d007      	beq.n	800390c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f042 0201 	orr.w	r2, r2, #1
 800390a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800391a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2221      	movs	r2, #33	; 0x21
 8003920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2240      	movs	r2, #64	; 0x40
 8003928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2200      	movs	r2, #0
 8003930:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6a3a      	ldr	r2, [r7, #32]
 8003936:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800393c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003942:	b29a      	uxth	r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	4a4d      	ldr	r2, [pc, #308]	; (8003a80 <HAL_I2C_Mem_Write+0x1f0>)
 800394c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800394e:	88f8      	ldrh	r0, [r7, #6]
 8003950:	893a      	ldrh	r2, [r7, #8]
 8003952:	8979      	ldrh	r1, [r7, #10]
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	9301      	str	r3, [sp, #4]
 8003958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800395a:	9300      	str	r3, [sp, #0]
 800395c:	4603      	mov	r3, r0
 800395e:	68f8      	ldr	r0, [r7, #12]
 8003960:	f000 fab6 	bl	8003ed0 <I2C_RequestMemoryWrite>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d052      	beq.n	8003a10 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e081      	b.n	8003a72 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800396e:	697a      	ldr	r2, [r7, #20]
 8003970:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003972:	68f8      	ldr	r0, [r7, #12]
 8003974:	f000 fd00 	bl	8004378 <I2C_WaitOnTXEFlagUntilTimeout>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d00d      	beq.n	800399a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003982:	2b04      	cmp	r3, #4
 8003984:	d107      	bne.n	8003996 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003994:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e06b      	b.n	8003a72 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399e:	781a      	ldrb	r2, [r3, #0]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039aa:	1c5a      	adds	r2, r3, #1
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039b4:	3b01      	subs	r3, #1
 80039b6:	b29a      	uxth	r2, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	3b01      	subs	r3, #1
 80039c4:	b29a      	uxth	r2, r3
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	695b      	ldr	r3, [r3, #20]
 80039d0:	f003 0304 	and.w	r3, r3, #4
 80039d4:	2b04      	cmp	r3, #4
 80039d6:	d11b      	bne.n	8003a10 <HAL_I2C_Mem_Write+0x180>
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d017      	beq.n	8003a10 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e4:	781a      	ldrb	r2, [r3, #0]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f0:	1c5a      	adds	r2, r3, #1
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039fa:	3b01      	subs	r3, #1
 80039fc:	b29a      	uxth	r2, r3
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	3b01      	subs	r3, #1
 8003a0a:	b29a      	uxth	r2, r3
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d1aa      	bne.n	800396e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a18:	697a      	ldr	r2, [r7, #20]
 8003a1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a1c:	68f8      	ldr	r0, [r7, #12]
 8003a1e:	f000 fcec 	bl	80043fa <I2C_WaitOnBTFFlagUntilTimeout>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d00d      	beq.n	8003a44 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2c:	2b04      	cmp	r3, #4
 8003a2e:	d107      	bne.n	8003a40 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a3e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e016      	b.n	8003a72 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2220      	movs	r2, #32
 8003a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	e000      	b.n	8003a72 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003a70:	2302      	movs	r3, #2
  }
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3718      	adds	r7, #24
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	00100002 	.word	0x00100002
 8003a80:	ffff0000 	.word	0xffff0000

08003a84 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b08c      	sub	sp, #48	; 0x30
 8003a88:	af02      	add	r7, sp, #8
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	4608      	mov	r0, r1
 8003a8e:	4611      	mov	r1, r2
 8003a90:	461a      	mov	r2, r3
 8003a92:	4603      	mov	r3, r0
 8003a94:	817b      	strh	r3, [r7, #10]
 8003a96:	460b      	mov	r3, r1
 8003a98:	813b      	strh	r3, [r7, #8]
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a9e:	f7ff fa13 	bl	8002ec8 <HAL_GetTick>
 8003aa2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	2b20      	cmp	r3, #32
 8003aae:	f040 8208 	bne.w	8003ec2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab4:	9300      	str	r3, [sp, #0]
 8003ab6:	2319      	movs	r3, #25
 8003ab8:	2201      	movs	r2, #1
 8003aba:	497b      	ldr	r1, [pc, #492]	; (8003ca8 <HAL_I2C_Mem_Read+0x224>)
 8003abc:	68f8      	ldr	r0, [r7, #12]
 8003abe:	f000 fb85 	bl	80041cc <I2C_WaitOnFlagUntilTimeout>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d001      	beq.n	8003acc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003ac8:	2302      	movs	r3, #2
 8003aca:	e1fb      	b.n	8003ec4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d101      	bne.n	8003ada <HAL_I2C_Mem_Read+0x56>
 8003ad6:	2302      	movs	r3, #2
 8003ad8:	e1f4      	b.n	8003ec4 <HAL_I2C_Mem_Read+0x440>
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2201      	movs	r2, #1
 8003ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0301 	and.w	r3, r3, #1
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d007      	beq.n	8003b00 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f042 0201 	orr.w	r2, r2, #1
 8003afe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b0e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2222      	movs	r2, #34	; 0x22
 8003b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2240      	movs	r2, #64	; 0x40
 8003b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2200      	movs	r2, #0
 8003b24:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b2a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003b30:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b36:	b29a      	uxth	r2, r3
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	4a5b      	ldr	r2, [pc, #364]	; (8003cac <HAL_I2C_Mem_Read+0x228>)
 8003b40:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b42:	88f8      	ldrh	r0, [r7, #6]
 8003b44:	893a      	ldrh	r2, [r7, #8]
 8003b46:	8979      	ldrh	r1, [r7, #10]
 8003b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4a:	9301      	str	r3, [sp, #4]
 8003b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b4e:	9300      	str	r3, [sp, #0]
 8003b50:	4603      	mov	r3, r0
 8003b52:	68f8      	ldr	r0, [r7, #12]
 8003b54:	f000 fa52 	bl	8003ffc <I2C_RequestMemoryRead>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d001      	beq.n	8003b62 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e1b0      	b.n	8003ec4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d113      	bne.n	8003b92 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	623b      	str	r3, [r7, #32]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	695b      	ldr	r3, [r3, #20]
 8003b74:	623b      	str	r3, [r7, #32]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	699b      	ldr	r3, [r3, #24]
 8003b7c:	623b      	str	r3, [r7, #32]
 8003b7e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b8e:	601a      	str	r2, [r3, #0]
 8003b90:	e184      	b.n	8003e9c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d11b      	bne.n	8003bd2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ba8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003baa:	2300      	movs	r3, #0
 8003bac:	61fb      	str	r3, [r7, #28]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	695b      	ldr	r3, [r3, #20]
 8003bb4:	61fb      	str	r3, [r7, #28]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	699b      	ldr	r3, [r3, #24]
 8003bbc:	61fb      	str	r3, [r7, #28]
 8003bbe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bce:	601a      	str	r2, [r3, #0]
 8003bd0:	e164      	b.n	8003e9c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d11b      	bne.n	8003c12 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003be8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bf8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	61bb      	str	r3, [r7, #24]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	695b      	ldr	r3, [r3, #20]
 8003c04:	61bb      	str	r3, [r7, #24]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	699b      	ldr	r3, [r3, #24]
 8003c0c:	61bb      	str	r3, [r7, #24]
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	e144      	b.n	8003e9c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c12:	2300      	movs	r3, #0
 8003c14:	617b      	str	r3, [r7, #20]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	695b      	ldr	r3, [r3, #20]
 8003c1c:	617b      	str	r3, [r7, #20]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	699b      	ldr	r3, [r3, #24]
 8003c24:	617b      	str	r3, [r7, #20]
 8003c26:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003c28:	e138      	b.n	8003e9c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c2e:	2b03      	cmp	r3, #3
 8003c30:	f200 80f1 	bhi.w	8003e16 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d123      	bne.n	8003c84 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c3e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003c40:	68f8      	ldr	r0, [r7, #12]
 8003c42:	f000 fc1b 	bl	800447c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d001      	beq.n	8003c50 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e139      	b.n	8003ec4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	691a      	ldr	r2, [r3, #16]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5a:	b2d2      	uxtb	r2, r2
 8003c5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c62:	1c5a      	adds	r2, r3, #1
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c6c:	3b01      	subs	r3, #1
 8003c6e:	b29a      	uxth	r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	b29a      	uxth	r2, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c82:	e10b      	b.n	8003e9c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d14e      	bne.n	8003d2a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8e:	9300      	str	r3, [sp, #0]
 8003c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c92:	2200      	movs	r2, #0
 8003c94:	4906      	ldr	r1, [pc, #24]	; (8003cb0 <HAL_I2C_Mem_Read+0x22c>)
 8003c96:	68f8      	ldr	r0, [r7, #12]
 8003c98:	f000 fa98 	bl	80041cc <I2C_WaitOnFlagUntilTimeout>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d008      	beq.n	8003cb4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e10e      	b.n	8003ec4 <HAL_I2C_Mem_Read+0x440>
 8003ca6:	bf00      	nop
 8003ca8:	00100002 	.word	0x00100002
 8003cac:	ffff0000 	.word	0xffff0000
 8003cb0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cc2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	691a      	ldr	r2, [r3, #16]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cce:	b2d2      	uxtb	r2, r2
 8003cd0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd6:	1c5a      	adds	r2, r3, #1
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ce0:	3b01      	subs	r3, #1
 8003ce2:	b29a      	uxth	r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	b29a      	uxth	r2, r3
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	691a      	ldr	r2, [r3, #16]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d00:	b2d2      	uxtb	r2, r2
 8003d02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d08:	1c5a      	adds	r2, r3, #1
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d12:	3b01      	subs	r3, #1
 8003d14:	b29a      	uxth	r2, r3
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	3b01      	subs	r3, #1
 8003d22:	b29a      	uxth	r2, r3
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d28:	e0b8      	b.n	8003e9c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2c:	9300      	str	r3, [sp, #0]
 8003d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d30:	2200      	movs	r2, #0
 8003d32:	4966      	ldr	r1, [pc, #408]	; (8003ecc <HAL_I2C_Mem_Read+0x448>)
 8003d34:	68f8      	ldr	r0, [r7, #12]
 8003d36:	f000 fa49 	bl	80041cc <I2C_WaitOnFlagUntilTimeout>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d001      	beq.n	8003d44 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e0bf      	b.n	8003ec4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	691a      	ldr	r2, [r3, #16]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5e:	b2d2      	uxtb	r2, r2
 8003d60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d66:	1c5a      	adds	r2, r3, #1
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d70:	3b01      	subs	r3, #1
 8003d72:	b29a      	uxth	r2, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d88:	9300      	str	r3, [sp, #0]
 8003d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	494f      	ldr	r1, [pc, #316]	; (8003ecc <HAL_I2C_Mem_Read+0x448>)
 8003d90:	68f8      	ldr	r0, [r7, #12]
 8003d92:	f000 fa1b 	bl	80041cc <I2C_WaitOnFlagUntilTimeout>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d001      	beq.n	8003da0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e091      	b.n	8003ec4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	691a      	ldr	r2, [r3, #16]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dba:	b2d2      	uxtb	r2, r2
 8003dbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc2:	1c5a      	adds	r2, r3, #1
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dcc:	3b01      	subs	r3, #1
 8003dce:	b29a      	uxth	r2, r3
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	b29a      	uxth	r2, r3
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	691a      	ldr	r2, [r3, #16]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dec:	b2d2      	uxtb	r2, r2
 8003dee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df4:	1c5a      	adds	r2, r3, #1
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	b29a      	uxth	r2, r3
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	3b01      	subs	r3, #1
 8003e0e:	b29a      	uxth	r2, r3
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e14:	e042      	b.n	8003e9c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e18:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003e1a:	68f8      	ldr	r0, [r7, #12]
 8003e1c:	f000 fb2e 	bl	800447c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d001      	beq.n	8003e2a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e04c      	b.n	8003ec4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	691a      	ldr	r2, [r3, #16]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e34:	b2d2      	uxtb	r2, r2
 8003e36:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3c:	1c5a      	adds	r2, r3, #1
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e46:	3b01      	subs	r3, #1
 8003e48:	b29a      	uxth	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	3b01      	subs	r3, #1
 8003e56:	b29a      	uxth	r2, r3
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	695b      	ldr	r3, [r3, #20]
 8003e62:	f003 0304 	and.w	r3, r3, #4
 8003e66:	2b04      	cmp	r3, #4
 8003e68:	d118      	bne.n	8003e9c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	691a      	ldr	r2, [r3, #16]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e74:	b2d2      	uxtb	r2, r2
 8003e76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7c:	1c5a      	adds	r2, r3, #1
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e86:	3b01      	subs	r3, #1
 8003e88:	b29a      	uxth	r2, r3
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	3b01      	subs	r3, #1
 8003e96:	b29a      	uxth	r2, r3
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	f47f aec2 	bne.w	8003c2a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2220      	movs	r2, #32
 8003eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	e000      	b.n	8003ec4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003ec2:	2302      	movs	r3, #2
  }
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3728      	adds	r7, #40	; 0x28
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	00010004 	.word	0x00010004

08003ed0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b088      	sub	sp, #32
 8003ed4:	af02      	add	r7, sp, #8
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	4608      	mov	r0, r1
 8003eda:	4611      	mov	r1, r2
 8003edc:	461a      	mov	r2, r3
 8003ede:	4603      	mov	r3, r0
 8003ee0:	817b      	strh	r3, [r7, #10]
 8003ee2:	460b      	mov	r3, r1
 8003ee4:	813b      	strh	r3, [r7, #8]
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ef8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efc:	9300      	str	r3, [sp, #0]
 8003efe:	6a3b      	ldr	r3, [r7, #32]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f06:	68f8      	ldr	r0, [r7, #12]
 8003f08:	f000 f960 	bl	80041cc <I2C_WaitOnFlagUntilTimeout>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d00d      	beq.n	8003f2e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f20:	d103      	bne.n	8003f2a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f28:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e05f      	b.n	8003fee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f2e:	897b      	ldrh	r3, [r7, #10]
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	461a      	mov	r2, r3
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f3c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f40:	6a3a      	ldr	r2, [r7, #32]
 8003f42:	492d      	ldr	r1, [pc, #180]	; (8003ff8 <I2C_RequestMemoryWrite+0x128>)
 8003f44:	68f8      	ldr	r0, [r7, #12]
 8003f46:	f000 f998 	bl	800427a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d001      	beq.n	8003f54 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e04c      	b.n	8003fee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f54:	2300      	movs	r3, #0
 8003f56:	617b      	str	r3, [r7, #20]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	617b      	str	r3, [r7, #20]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	699b      	ldr	r3, [r3, #24]
 8003f66:	617b      	str	r3, [r7, #20]
 8003f68:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f6c:	6a39      	ldr	r1, [r7, #32]
 8003f6e:	68f8      	ldr	r0, [r7, #12]
 8003f70:	f000 fa02 	bl	8004378 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00d      	beq.n	8003f96 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7e:	2b04      	cmp	r3, #4
 8003f80:	d107      	bne.n	8003f92 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f90:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e02b      	b.n	8003fee <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f96:	88fb      	ldrh	r3, [r7, #6]
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d105      	bne.n	8003fa8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f9c:	893b      	ldrh	r3, [r7, #8]
 8003f9e:	b2da      	uxtb	r2, r3
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	611a      	str	r2, [r3, #16]
 8003fa6:	e021      	b.n	8003fec <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003fa8:	893b      	ldrh	r3, [r7, #8]
 8003faa:	0a1b      	lsrs	r3, r3, #8
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	b2da      	uxtb	r2, r3
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fb8:	6a39      	ldr	r1, [r7, #32]
 8003fba:	68f8      	ldr	r0, [r7, #12]
 8003fbc:	f000 f9dc 	bl	8004378 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d00d      	beq.n	8003fe2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fca:	2b04      	cmp	r3, #4
 8003fcc:	d107      	bne.n	8003fde <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fdc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e005      	b.n	8003fee <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003fe2:	893b      	ldrh	r3, [r7, #8]
 8003fe4:	b2da      	uxtb	r2, r3
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003fec:	2300      	movs	r3, #0
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3718      	adds	r7, #24
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	00010002 	.word	0x00010002

08003ffc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b088      	sub	sp, #32
 8004000:	af02      	add	r7, sp, #8
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	4608      	mov	r0, r1
 8004006:	4611      	mov	r1, r2
 8004008:	461a      	mov	r2, r3
 800400a:	4603      	mov	r3, r0
 800400c:	817b      	strh	r3, [r7, #10]
 800400e:	460b      	mov	r3, r1
 8004010:	813b      	strh	r3, [r7, #8]
 8004012:	4613      	mov	r3, r2
 8004014:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004024:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004034:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004038:	9300      	str	r3, [sp, #0]
 800403a:	6a3b      	ldr	r3, [r7, #32]
 800403c:	2200      	movs	r2, #0
 800403e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004042:	68f8      	ldr	r0, [r7, #12]
 8004044:	f000 f8c2 	bl	80041cc <I2C_WaitOnFlagUntilTimeout>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d00d      	beq.n	800406a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004058:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800405c:	d103      	bne.n	8004066 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004064:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e0aa      	b.n	80041c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800406a:	897b      	ldrh	r3, [r7, #10]
 800406c:	b2db      	uxtb	r3, r3
 800406e:	461a      	mov	r2, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004078:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800407a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407c:	6a3a      	ldr	r2, [r7, #32]
 800407e:	4952      	ldr	r1, [pc, #328]	; (80041c8 <I2C_RequestMemoryRead+0x1cc>)
 8004080:	68f8      	ldr	r0, [r7, #12]
 8004082:	f000 f8fa 	bl	800427a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d001      	beq.n	8004090 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e097      	b.n	80041c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004090:	2300      	movs	r3, #0
 8004092:	617b      	str	r3, [r7, #20]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	695b      	ldr	r3, [r3, #20]
 800409a:	617b      	str	r3, [r7, #20]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	699b      	ldr	r3, [r3, #24]
 80040a2:	617b      	str	r3, [r7, #20]
 80040a4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040a8:	6a39      	ldr	r1, [r7, #32]
 80040aa:	68f8      	ldr	r0, [r7, #12]
 80040ac:	f000 f964 	bl	8004378 <I2C_WaitOnTXEFlagUntilTimeout>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00d      	beq.n	80040d2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ba:	2b04      	cmp	r3, #4
 80040bc:	d107      	bne.n	80040ce <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040cc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e076      	b.n	80041c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80040d2:	88fb      	ldrh	r3, [r7, #6]
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d105      	bne.n	80040e4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80040d8:	893b      	ldrh	r3, [r7, #8]
 80040da:	b2da      	uxtb	r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	611a      	str	r2, [r3, #16]
 80040e2:	e021      	b.n	8004128 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80040e4:	893b      	ldrh	r3, [r7, #8]
 80040e6:	0a1b      	lsrs	r3, r3, #8
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	b2da      	uxtb	r2, r3
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040f4:	6a39      	ldr	r1, [r7, #32]
 80040f6:	68f8      	ldr	r0, [r7, #12]
 80040f8:	f000 f93e 	bl	8004378 <I2C_WaitOnTXEFlagUntilTimeout>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d00d      	beq.n	800411e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004106:	2b04      	cmp	r3, #4
 8004108:	d107      	bne.n	800411a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004118:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e050      	b.n	80041c0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800411e:	893b      	ldrh	r3, [r7, #8]
 8004120:	b2da      	uxtb	r2, r3
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004128:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800412a:	6a39      	ldr	r1, [r7, #32]
 800412c:	68f8      	ldr	r0, [r7, #12]
 800412e:	f000 f923 	bl	8004378 <I2C_WaitOnTXEFlagUntilTimeout>
 8004132:	4603      	mov	r3, r0
 8004134:	2b00      	cmp	r3, #0
 8004136:	d00d      	beq.n	8004154 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413c:	2b04      	cmp	r3, #4
 800413e:	d107      	bne.n	8004150 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800414e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e035      	b.n	80041c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004162:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004166:	9300      	str	r3, [sp, #0]
 8004168:	6a3b      	ldr	r3, [r7, #32]
 800416a:	2200      	movs	r2, #0
 800416c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004170:	68f8      	ldr	r0, [r7, #12]
 8004172:	f000 f82b 	bl	80041cc <I2C_WaitOnFlagUntilTimeout>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d00d      	beq.n	8004198 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004186:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800418a:	d103      	bne.n	8004194 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004192:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	e013      	b.n	80041c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004198:	897b      	ldrh	r3, [r7, #10]
 800419a:	b2db      	uxtb	r3, r3
 800419c:	f043 0301 	orr.w	r3, r3, #1
 80041a0:	b2da      	uxtb	r2, r3
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041aa:	6a3a      	ldr	r2, [r7, #32]
 80041ac:	4906      	ldr	r1, [pc, #24]	; (80041c8 <I2C_RequestMemoryRead+0x1cc>)
 80041ae:	68f8      	ldr	r0, [r7, #12]
 80041b0:	f000 f863 	bl	800427a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d001      	beq.n	80041be <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e000      	b.n	80041c0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80041be:	2300      	movs	r3, #0
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3718      	adds	r7, #24
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	00010002 	.word	0x00010002

080041cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	60b9      	str	r1, [r7, #8]
 80041d6:	603b      	str	r3, [r7, #0]
 80041d8:	4613      	mov	r3, r2
 80041da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041dc:	e025      	b.n	800422a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041e4:	d021      	beq.n	800422a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041e6:	f7fe fe6f 	bl	8002ec8 <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	69bb      	ldr	r3, [r7, #24]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	683a      	ldr	r2, [r7, #0]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d302      	bcc.n	80041fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d116      	bne.n	800422a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2200      	movs	r2, #0
 8004200:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2220      	movs	r2, #32
 8004206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2200      	movs	r2, #0
 800420e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004216:	f043 0220 	orr.w	r2, r3, #32
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e023      	b.n	8004272 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	0c1b      	lsrs	r3, r3, #16
 800422e:	b2db      	uxtb	r3, r3
 8004230:	2b01      	cmp	r3, #1
 8004232:	d10d      	bne.n	8004250 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	695b      	ldr	r3, [r3, #20]
 800423a:	43da      	mvns	r2, r3
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	4013      	ands	r3, r2
 8004240:	b29b      	uxth	r3, r3
 8004242:	2b00      	cmp	r3, #0
 8004244:	bf0c      	ite	eq
 8004246:	2301      	moveq	r3, #1
 8004248:	2300      	movne	r3, #0
 800424a:	b2db      	uxtb	r3, r3
 800424c:	461a      	mov	r2, r3
 800424e:	e00c      	b.n	800426a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	699b      	ldr	r3, [r3, #24]
 8004256:	43da      	mvns	r2, r3
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	4013      	ands	r3, r2
 800425c:	b29b      	uxth	r3, r3
 800425e:	2b00      	cmp	r3, #0
 8004260:	bf0c      	ite	eq
 8004262:	2301      	moveq	r3, #1
 8004264:	2300      	movne	r3, #0
 8004266:	b2db      	uxtb	r3, r3
 8004268:	461a      	mov	r2, r3
 800426a:	79fb      	ldrb	r3, [r7, #7]
 800426c:	429a      	cmp	r2, r3
 800426e:	d0b6      	beq.n	80041de <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	3710      	adds	r7, #16
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}

0800427a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800427a:	b580      	push	{r7, lr}
 800427c:	b084      	sub	sp, #16
 800427e:	af00      	add	r7, sp, #0
 8004280:	60f8      	str	r0, [r7, #12]
 8004282:	60b9      	str	r1, [r7, #8]
 8004284:	607a      	str	r2, [r7, #4]
 8004286:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004288:	e051      	b.n	800432e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	695b      	ldr	r3, [r3, #20]
 8004290:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004294:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004298:	d123      	bne.n	80042e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042a8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80042b2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2200      	movs	r2, #0
 80042b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2220      	movs	r2, #32
 80042be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ce:	f043 0204 	orr.w	r2, r3, #4
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e046      	b.n	8004370 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042e8:	d021      	beq.n	800432e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042ea:	f7fe fded 	bl	8002ec8 <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d302      	bcc.n	8004300 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d116      	bne.n	800432e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2200      	movs	r2, #0
 8004304:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2220      	movs	r2, #32
 800430a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431a:	f043 0220 	orr.w	r2, r3, #32
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e020      	b.n	8004370 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	0c1b      	lsrs	r3, r3, #16
 8004332:	b2db      	uxtb	r3, r3
 8004334:	2b01      	cmp	r3, #1
 8004336:	d10c      	bne.n	8004352 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	695b      	ldr	r3, [r3, #20]
 800433e:	43da      	mvns	r2, r3
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	4013      	ands	r3, r2
 8004344:	b29b      	uxth	r3, r3
 8004346:	2b00      	cmp	r3, #0
 8004348:	bf14      	ite	ne
 800434a:	2301      	movne	r3, #1
 800434c:	2300      	moveq	r3, #0
 800434e:	b2db      	uxtb	r3, r3
 8004350:	e00b      	b.n	800436a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	699b      	ldr	r3, [r3, #24]
 8004358:	43da      	mvns	r2, r3
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	4013      	ands	r3, r2
 800435e:	b29b      	uxth	r3, r3
 8004360:	2b00      	cmp	r3, #0
 8004362:	bf14      	ite	ne
 8004364:	2301      	movne	r3, #1
 8004366:	2300      	moveq	r3, #0
 8004368:	b2db      	uxtb	r3, r3
 800436a:	2b00      	cmp	r3, #0
 800436c:	d18d      	bne.n	800428a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800436e:	2300      	movs	r3, #0
}
 8004370:	4618      	mov	r0, r3
 8004372:	3710      	adds	r7, #16
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004384:	e02d      	b.n	80043e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004386:	68f8      	ldr	r0, [r7, #12]
 8004388:	f000 f8ce 	bl	8004528 <I2C_IsAcknowledgeFailed>
 800438c:	4603      	mov	r3, r0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d001      	beq.n	8004396 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e02d      	b.n	80043f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800439c:	d021      	beq.n	80043e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800439e:	f7fe fd93 	bl	8002ec8 <HAL_GetTick>
 80043a2:	4602      	mov	r2, r0
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	68ba      	ldr	r2, [r7, #8]
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d302      	bcc.n	80043b4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d116      	bne.n	80043e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2200      	movs	r2, #0
 80043b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2220      	movs	r2, #32
 80043be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ce:	f043 0220 	orr.w	r2, r3, #32
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2200      	movs	r2, #0
 80043da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e007      	b.n	80043f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	695b      	ldr	r3, [r3, #20]
 80043e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ec:	2b80      	cmp	r3, #128	; 0x80
 80043ee:	d1ca      	bne.n	8004386 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80043f0:	2300      	movs	r3, #0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3710      	adds	r7, #16
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}

080043fa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043fa:	b580      	push	{r7, lr}
 80043fc:	b084      	sub	sp, #16
 80043fe:	af00      	add	r7, sp, #0
 8004400:	60f8      	str	r0, [r7, #12]
 8004402:	60b9      	str	r1, [r7, #8]
 8004404:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004406:	e02d      	b.n	8004464 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004408:	68f8      	ldr	r0, [r7, #12]
 800440a:	f000 f88d 	bl	8004528 <I2C_IsAcknowledgeFailed>
 800440e:	4603      	mov	r3, r0
 8004410:	2b00      	cmp	r3, #0
 8004412:	d001      	beq.n	8004418 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e02d      	b.n	8004474 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800441e:	d021      	beq.n	8004464 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004420:	f7fe fd52 	bl	8002ec8 <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	68ba      	ldr	r2, [r7, #8]
 800442c:	429a      	cmp	r2, r3
 800442e:	d302      	bcc.n	8004436 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d116      	bne.n	8004464 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2200      	movs	r2, #0
 800443a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2220      	movs	r2, #32
 8004440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2200      	movs	r2, #0
 8004448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004450:	f043 0220 	orr.w	r2, r3, #32
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2200      	movs	r2, #0
 800445c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e007      	b.n	8004474 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	695b      	ldr	r3, [r3, #20]
 800446a:	f003 0304 	and.w	r3, r3, #4
 800446e:	2b04      	cmp	r3, #4
 8004470:	d1ca      	bne.n	8004408 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004472:	2300      	movs	r3, #0
}
 8004474:	4618      	mov	r0, r3
 8004476:	3710      	adds	r7, #16
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}

0800447c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	60b9      	str	r1, [r7, #8]
 8004486:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004488:	e042      	b.n	8004510 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	695b      	ldr	r3, [r3, #20]
 8004490:	f003 0310 	and.w	r3, r3, #16
 8004494:	2b10      	cmp	r3, #16
 8004496:	d119      	bne.n	80044cc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f06f 0210 	mvn.w	r2, #16
 80044a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2200      	movs	r2, #0
 80044a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2220      	movs	r2, #32
 80044ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e029      	b.n	8004520 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044cc:	f7fe fcfc 	bl	8002ec8 <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	68ba      	ldr	r2, [r7, #8]
 80044d8:	429a      	cmp	r2, r3
 80044da:	d302      	bcc.n	80044e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d116      	bne.n	8004510 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2200      	movs	r2, #0
 80044e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2220      	movs	r2, #32
 80044ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fc:	f043 0220 	orr.w	r2, r3, #32
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2200      	movs	r2, #0
 8004508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e007      	b.n	8004520 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	695b      	ldr	r3, [r3, #20]
 8004516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800451a:	2b40      	cmp	r3, #64	; 0x40
 800451c:	d1b5      	bne.n	800448a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	3710      	adds	r7, #16
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	695b      	ldr	r3, [r3, #20]
 8004536:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800453a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800453e:	d11b      	bne.n	8004578 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004548:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2220      	movs	r2, #32
 8004554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004564:	f043 0204 	orr.w	r2, r3, #4
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e000      	b.n	800457a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004578:	2300      	movs	r3, #0
}
 800457a:	4618      	mov	r0, r3
 800457c:	370c      	adds	r7, #12
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr

08004586 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004586:	b480      	push	{r7}
 8004588:	b083      	sub	sp, #12
 800458a:	af00      	add	r7, sp, #0
 800458c:	6078      	str	r0, [r7, #4]
 800458e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004596:	b2db      	uxtb	r3, r3
 8004598:	2b20      	cmp	r3, #32
 800459a:	d129      	bne.n	80045f0 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2224      	movs	r2, #36	; 0x24
 80045a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f022 0201 	bic.w	r2, r2, #1
 80045b2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f022 0210 	bic.w	r2, r2, #16
 80045c2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	683a      	ldr	r2, [r7, #0]
 80045d0:	430a      	orrs	r2, r1
 80045d2:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f042 0201 	orr.w	r2, r2, #1
 80045e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2220      	movs	r2, #32
 80045e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80045ec:	2300      	movs	r3, #0
 80045ee:	e000      	b.n	80045f2 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80045f0:	2302      	movs	r3, #2
  }
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	370c      	adds	r7, #12
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr

080045fe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80045fe:	b480      	push	{r7}
 8004600:	b085      	sub	sp, #20
 8004602:	af00      	add	r7, sp, #0
 8004604:	6078      	str	r0, [r7, #4]
 8004606:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004608:	2300      	movs	r3, #0
 800460a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004612:	b2db      	uxtb	r3, r3
 8004614:	2b20      	cmp	r3, #32
 8004616:	d12a      	bne.n	800466e <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2224      	movs	r2, #36	; 0x24
 800461c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f022 0201 	bic.w	r2, r2, #1
 800462e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004636:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004638:	89fb      	ldrh	r3, [r7, #14]
 800463a:	f023 030f 	bic.w	r3, r3, #15
 800463e:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	b29a      	uxth	r2, r3
 8004644:	89fb      	ldrh	r3, [r7, #14]
 8004646:	4313      	orrs	r3, r2
 8004648:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	89fa      	ldrh	r2, [r7, #14]
 8004650:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f042 0201 	orr.w	r2, r2, #1
 8004660:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2220      	movs	r2, #32
 8004666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800466a:	2300      	movs	r3, #0
 800466c:	e000      	b.n	8004670 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800466e:	2302      	movs	r3, #2
  }
}
 8004670:	4618      	mov	r0, r3
 8004672:	3714      	adds	r7, #20
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr

0800467c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b082      	sub	sp, #8
 8004680:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004682:	2300      	movs	r3, #0
 8004684:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004686:	2300      	movs	r3, #0
 8004688:	603b      	str	r3, [r7, #0]
 800468a:	4b20      	ldr	r3, [pc, #128]	; (800470c <HAL_PWREx_EnableOverDrive+0x90>)
 800468c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468e:	4a1f      	ldr	r2, [pc, #124]	; (800470c <HAL_PWREx_EnableOverDrive+0x90>)
 8004690:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004694:	6413      	str	r3, [r2, #64]	; 0x40
 8004696:	4b1d      	ldr	r3, [pc, #116]	; (800470c <HAL_PWREx_EnableOverDrive+0x90>)
 8004698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800469e:	603b      	str	r3, [r7, #0]
 80046a0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80046a2:	4b1b      	ldr	r3, [pc, #108]	; (8004710 <HAL_PWREx_EnableOverDrive+0x94>)
 80046a4:	2201      	movs	r2, #1
 80046a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80046a8:	f7fe fc0e 	bl	8002ec8 <HAL_GetTick>
 80046ac:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80046ae:	e009      	b.n	80046c4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80046b0:	f7fe fc0a 	bl	8002ec8 <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046be:	d901      	bls.n	80046c4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80046c0:	2303      	movs	r3, #3
 80046c2:	e01f      	b.n	8004704 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80046c4:	4b13      	ldr	r3, [pc, #76]	; (8004714 <HAL_PWREx_EnableOverDrive+0x98>)
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046d0:	d1ee      	bne.n	80046b0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80046d2:	4b11      	ldr	r3, [pc, #68]	; (8004718 <HAL_PWREx_EnableOverDrive+0x9c>)
 80046d4:	2201      	movs	r2, #1
 80046d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80046d8:	f7fe fbf6 	bl	8002ec8 <HAL_GetTick>
 80046dc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80046de:	e009      	b.n	80046f4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80046e0:	f7fe fbf2 	bl	8002ec8 <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046ee:	d901      	bls.n	80046f4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e007      	b.n	8004704 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80046f4:	4b07      	ldr	r3, [pc, #28]	; (8004714 <HAL_PWREx_EnableOverDrive+0x98>)
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004700:	d1ee      	bne.n	80046e0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004702:	2300      	movs	r3, #0
}
 8004704:	4618      	mov	r0, r3
 8004706:	3708      	adds	r7, #8
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}
 800470c:	40023800 	.word	0x40023800
 8004710:	420e0040 	.word	0x420e0040
 8004714:	40007000 	.word	0x40007000
 8004718:	420e0044 	.word	0x420e0044

0800471c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b086      	sub	sp, #24
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d101      	bne.n	800472e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e25b      	b.n	8004be6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0301 	and.w	r3, r3, #1
 8004736:	2b00      	cmp	r3, #0
 8004738:	d075      	beq.n	8004826 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800473a:	4ba3      	ldr	r3, [pc, #652]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f003 030c 	and.w	r3, r3, #12
 8004742:	2b04      	cmp	r3, #4
 8004744:	d00c      	beq.n	8004760 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004746:	4ba0      	ldr	r3, [pc, #640]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800474e:	2b08      	cmp	r3, #8
 8004750:	d112      	bne.n	8004778 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004752:	4b9d      	ldr	r3, [pc, #628]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800475a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800475e:	d10b      	bne.n	8004778 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004760:	4b99      	ldr	r3, [pc, #612]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d05b      	beq.n	8004824 <HAL_RCC_OscConfig+0x108>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d157      	bne.n	8004824 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e236      	b.n	8004be6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004780:	d106      	bne.n	8004790 <HAL_RCC_OscConfig+0x74>
 8004782:	4b91      	ldr	r3, [pc, #580]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a90      	ldr	r2, [pc, #576]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 8004788:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800478c:	6013      	str	r3, [r2, #0]
 800478e:	e01d      	b.n	80047cc <HAL_RCC_OscConfig+0xb0>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004798:	d10c      	bne.n	80047b4 <HAL_RCC_OscConfig+0x98>
 800479a:	4b8b      	ldr	r3, [pc, #556]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a8a      	ldr	r2, [pc, #552]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 80047a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047a4:	6013      	str	r3, [r2, #0]
 80047a6:	4b88      	ldr	r3, [pc, #544]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a87      	ldr	r2, [pc, #540]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 80047ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047b0:	6013      	str	r3, [r2, #0]
 80047b2:	e00b      	b.n	80047cc <HAL_RCC_OscConfig+0xb0>
 80047b4:	4b84      	ldr	r3, [pc, #528]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a83      	ldr	r2, [pc, #524]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 80047ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047be:	6013      	str	r3, [r2, #0]
 80047c0:	4b81      	ldr	r3, [pc, #516]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a80      	ldr	r2, [pc, #512]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 80047c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d013      	beq.n	80047fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047d4:	f7fe fb78 	bl	8002ec8 <HAL_GetTick>
 80047d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047da:	e008      	b.n	80047ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047dc:	f7fe fb74 	bl	8002ec8 <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	2b64      	cmp	r3, #100	; 0x64
 80047e8:	d901      	bls.n	80047ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e1fb      	b.n	8004be6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047ee:	4b76      	ldr	r3, [pc, #472]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d0f0      	beq.n	80047dc <HAL_RCC_OscConfig+0xc0>
 80047fa:	e014      	b.n	8004826 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047fc:	f7fe fb64 	bl	8002ec8 <HAL_GetTick>
 8004800:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004802:	e008      	b.n	8004816 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004804:	f7fe fb60 	bl	8002ec8 <HAL_GetTick>
 8004808:	4602      	mov	r2, r0
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	2b64      	cmp	r3, #100	; 0x64
 8004810:	d901      	bls.n	8004816 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e1e7      	b.n	8004be6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004816:	4b6c      	ldr	r3, [pc, #432]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800481e:	2b00      	cmp	r3, #0
 8004820:	d1f0      	bne.n	8004804 <HAL_RCC_OscConfig+0xe8>
 8004822:	e000      	b.n	8004826 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004824:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0302 	and.w	r3, r3, #2
 800482e:	2b00      	cmp	r3, #0
 8004830:	d063      	beq.n	80048fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004832:	4b65      	ldr	r3, [pc, #404]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	f003 030c 	and.w	r3, r3, #12
 800483a:	2b00      	cmp	r3, #0
 800483c:	d00b      	beq.n	8004856 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800483e:	4b62      	ldr	r3, [pc, #392]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004846:	2b08      	cmp	r3, #8
 8004848:	d11c      	bne.n	8004884 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800484a:	4b5f      	ldr	r3, [pc, #380]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d116      	bne.n	8004884 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004856:	4b5c      	ldr	r3, [pc, #368]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0302 	and.w	r3, r3, #2
 800485e:	2b00      	cmp	r3, #0
 8004860:	d005      	beq.n	800486e <HAL_RCC_OscConfig+0x152>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	2b01      	cmp	r3, #1
 8004868:	d001      	beq.n	800486e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e1bb      	b.n	8004be6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800486e:	4b56      	ldr	r3, [pc, #344]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	00db      	lsls	r3, r3, #3
 800487c:	4952      	ldr	r1, [pc, #328]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 800487e:	4313      	orrs	r3, r2
 8004880:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004882:	e03a      	b.n	80048fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d020      	beq.n	80048ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800488c:	4b4f      	ldr	r3, [pc, #316]	; (80049cc <HAL_RCC_OscConfig+0x2b0>)
 800488e:	2201      	movs	r2, #1
 8004890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004892:	f7fe fb19 	bl	8002ec8 <HAL_GetTick>
 8004896:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004898:	e008      	b.n	80048ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800489a:	f7fe fb15 	bl	8002ec8 <HAL_GetTick>
 800489e:	4602      	mov	r2, r0
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d901      	bls.n	80048ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80048a8:	2303      	movs	r3, #3
 80048aa:	e19c      	b.n	8004be6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048ac:	4b46      	ldr	r3, [pc, #280]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0302 	and.w	r3, r3, #2
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d0f0      	beq.n	800489a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048b8:	4b43      	ldr	r3, [pc, #268]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	691b      	ldr	r3, [r3, #16]
 80048c4:	00db      	lsls	r3, r3, #3
 80048c6:	4940      	ldr	r1, [pc, #256]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 80048c8:	4313      	orrs	r3, r2
 80048ca:	600b      	str	r3, [r1, #0]
 80048cc:	e015      	b.n	80048fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048ce:	4b3f      	ldr	r3, [pc, #252]	; (80049cc <HAL_RCC_OscConfig+0x2b0>)
 80048d0:	2200      	movs	r2, #0
 80048d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048d4:	f7fe faf8 	bl	8002ec8 <HAL_GetTick>
 80048d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048da:	e008      	b.n	80048ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048dc:	f7fe faf4 	bl	8002ec8 <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d901      	bls.n	80048ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e17b      	b.n	8004be6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048ee:	4b36      	ldr	r3, [pc, #216]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 0302 	and.w	r3, r3, #2
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d1f0      	bne.n	80048dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0308 	and.w	r3, r3, #8
 8004902:	2b00      	cmp	r3, #0
 8004904:	d030      	beq.n	8004968 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	695b      	ldr	r3, [r3, #20]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d016      	beq.n	800493c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800490e:	4b30      	ldr	r3, [pc, #192]	; (80049d0 <HAL_RCC_OscConfig+0x2b4>)
 8004910:	2201      	movs	r2, #1
 8004912:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004914:	f7fe fad8 	bl	8002ec8 <HAL_GetTick>
 8004918:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800491a:	e008      	b.n	800492e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800491c:	f7fe fad4 	bl	8002ec8 <HAL_GetTick>
 8004920:	4602      	mov	r2, r0
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	2b02      	cmp	r3, #2
 8004928:	d901      	bls.n	800492e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	e15b      	b.n	8004be6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800492e:	4b26      	ldr	r3, [pc, #152]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 8004930:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004932:	f003 0302 	and.w	r3, r3, #2
 8004936:	2b00      	cmp	r3, #0
 8004938:	d0f0      	beq.n	800491c <HAL_RCC_OscConfig+0x200>
 800493a:	e015      	b.n	8004968 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800493c:	4b24      	ldr	r3, [pc, #144]	; (80049d0 <HAL_RCC_OscConfig+0x2b4>)
 800493e:	2200      	movs	r2, #0
 8004940:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004942:	f7fe fac1 	bl	8002ec8 <HAL_GetTick>
 8004946:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004948:	e008      	b.n	800495c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800494a:	f7fe fabd 	bl	8002ec8 <HAL_GetTick>
 800494e:	4602      	mov	r2, r0
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	1ad3      	subs	r3, r2, r3
 8004954:	2b02      	cmp	r3, #2
 8004956:	d901      	bls.n	800495c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004958:	2303      	movs	r3, #3
 800495a:	e144      	b.n	8004be6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800495c:	4b1a      	ldr	r3, [pc, #104]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 800495e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004960:	f003 0302 	and.w	r3, r3, #2
 8004964:	2b00      	cmp	r3, #0
 8004966:	d1f0      	bne.n	800494a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0304 	and.w	r3, r3, #4
 8004970:	2b00      	cmp	r3, #0
 8004972:	f000 80a0 	beq.w	8004ab6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004976:	2300      	movs	r3, #0
 8004978:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800497a:	4b13      	ldr	r3, [pc, #76]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 800497c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d10f      	bne.n	80049a6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004986:	2300      	movs	r3, #0
 8004988:	60bb      	str	r3, [r7, #8]
 800498a:	4b0f      	ldr	r3, [pc, #60]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 800498c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498e:	4a0e      	ldr	r2, [pc, #56]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 8004990:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004994:	6413      	str	r3, [r2, #64]	; 0x40
 8004996:	4b0c      	ldr	r3, [pc, #48]	; (80049c8 <HAL_RCC_OscConfig+0x2ac>)
 8004998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800499e:	60bb      	str	r3, [r7, #8]
 80049a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049a2:	2301      	movs	r3, #1
 80049a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049a6:	4b0b      	ldr	r3, [pc, #44]	; (80049d4 <HAL_RCC_OscConfig+0x2b8>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d121      	bne.n	80049f6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049b2:	4b08      	ldr	r3, [pc, #32]	; (80049d4 <HAL_RCC_OscConfig+0x2b8>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a07      	ldr	r2, [pc, #28]	; (80049d4 <HAL_RCC_OscConfig+0x2b8>)
 80049b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049be:	f7fe fa83 	bl	8002ec8 <HAL_GetTick>
 80049c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049c4:	e011      	b.n	80049ea <HAL_RCC_OscConfig+0x2ce>
 80049c6:	bf00      	nop
 80049c8:	40023800 	.word	0x40023800
 80049cc:	42470000 	.word	0x42470000
 80049d0:	42470e80 	.word	0x42470e80
 80049d4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049d8:	f7fe fa76 	bl	8002ec8 <HAL_GetTick>
 80049dc:	4602      	mov	r2, r0
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	2b02      	cmp	r3, #2
 80049e4:	d901      	bls.n	80049ea <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80049e6:	2303      	movs	r3, #3
 80049e8:	e0fd      	b.n	8004be6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049ea:	4b81      	ldr	r3, [pc, #516]	; (8004bf0 <HAL_RCC_OscConfig+0x4d4>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d0f0      	beq.n	80049d8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d106      	bne.n	8004a0c <HAL_RCC_OscConfig+0x2f0>
 80049fe:	4b7d      	ldr	r3, [pc, #500]	; (8004bf4 <HAL_RCC_OscConfig+0x4d8>)
 8004a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a02:	4a7c      	ldr	r2, [pc, #496]	; (8004bf4 <HAL_RCC_OscConfig+0x4d8>)
 8004a04:	f043 0301 	orr.w	r3, r3, #1
 8004a08:	6713      	str	r3, [r2, #112]	; 0x70
 8004a0a:	e01c      	b.n	8004a46 <HAL_RCC_OscConfig+0x32a>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	2b05      	cmp	r3, #5
 8004a12:	d10c      	bne.n	8004a2e <HAL_RCC_OscConfig+0x312>
 8004a14:	4b77      	ldr	r3, [pc, #476]	; (8004bf4 <HAL_RCC_OscConfig+0x4d8>)
 8004a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a18:	4a76      	ldr	r2, [pc, #472]	; (8004bf4 <HAL_RCC_OscConfig+0x4d8>)
 8004a1a:	f043 0304 	orr.w	r3, r3, #4
 8004a1e:	6713      	str	r3, [r2, #112]	; 0x70
 8004a20:	4b74      	ldr	r3, [pc, #464]	; (8004bf4 <HAL_RCC_OscConfig+0x4d8>)
 8004a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a24:	4a73      	ldr	r2, [pc, #460]	; (8004bf4 <HAL_RCC_OscConfig+0x4d8>)
 8004a26:	f043 0301 	orr.w	r3, r3, #1
 8004a2a:	6713      	str	r3, [r2, #112]	; 0x70
 8004a2c:	e00b      	b.n	8004a46 <HAL_RCC_OscConfig+0x32a>
 8004a2e:	4b71      	ldr	r3, [pc, #452]	; (8004bf4 <HAL_RCC_OscConfig+0x4d8>)
 8004a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a32:	4a70      	ldr	r2, [pc, #448]	; (8004bf4 <HAL_RCC_OscConfig+0x4d8>)
 8004a34:	f023 0301 	bic.w	r3, r3, #1
 8004a38:	6713      	str	r3, [r2, #112]	; 0x70
 8004a3a:	4b6e      	ldr	r3, [pc, #440]	; (8004bf4 <HAL_RCC_OscConfig+0x4d8>)
 8004a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a3e:	4a6d      	ldr	r2, [pc, #436]	; (8004bf4 <HAL_RCC_OscConfig+0x4d8>)
 8004a40:	f023 0304 	bic.w	r3, r3, #4
 8004a44:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d015      	beq.n	8004a7a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a4e:	f7fe fa3b 	bl	8002ec8 <HAL_GetTick>
 8004a52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a54:	e00a      	b.n	8004a6c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a56:	f7fe fa37 	bl	8002ec8 <HAL_GetTick>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	1ad3      	subs	r3, r2, r3
 8004a60:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d901      	bls.n	8004a6c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	e0bc      	b.n	8004be6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a6c:	4b61      	ldr	r3, [pc, #388]	; (8004bf4 <HAL_RCC_OscConfig+0x4d8>)
 8004a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a70:	f003 0302 	and.w	r3, r3, #2
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d0ee      	beq.n	8004a56 <HAL_RCC_OscConfig+0x33a>
 8004a78:	e014      	b.n	8004aa4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a7a:	f7fe fa25 	bl	8002ec8 <HAL_GetTick>
 8004a7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a80:	e00a      	b.n	8004a98 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a82:	f7fe fa21 	bl	8002ec8 <HAL_GetTick>
 8004a86:	4602      	mov	r2, r0
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	1ad3      	subs	r3, r2, r3
 8004a8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d901      	bls.n	8004a98 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004a94:	2303      	movs	r3, #3
 8004a96:	e0a6      	b.n	8004be6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a98:	4b56      	ldr	r3, [pc, #344]	; (8004bf4 <HAL_RCC_OscConfig+0x4d8>)
 8004a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a9c:	f003 0302 	and.w	r3, r3, #2
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d1ee      	bne.n	8004a82 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004aa4:	7dfb      	ldrb	r3, [r7, #23]
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d105      	bne.n	8004ab6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004aaa:	4b52      	ldr	r3, [pc, #328]	; (8004bf4 <HAL_RCC_OscConfig+0x4d8>)
 8004aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aae:	4a51      	ldr	r2, [pc, #324]	; (8004bf4 <HAL_RCC_OscConfig+0x4d8>)
 8004ab0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ab4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	699b      	ldr	r3, [r3, #24]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	f000 8092 	beq.w	8004be4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ac0:	4b4c      	ldr	r3, [pc, #304]	; (8004bf4 <HAL_RCC_OscConfig+0x4d8>)
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	f003 030c 	and.w	r3, r3, #12
 8004ac8:	2b08      	cmp	r3, #8
 8004aca:	d05c      	beq.n	8004b86 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	699b      	ldr	r3, [r3, #24]
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d141      	bne.n	8004b58 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ad4:	4b48      	ldr	r3, [pc, #288]	; (8004bf8 <HAL_RCC_OscConfig+0x4dc>)
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ada:	f7fe f9f5 	bl	8002ec8 <HAL_GetTick>
 8004ade:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ae0:	e008      	b.n	8004af4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ae2:	f7fe f9f1 	bl	8002ec8 <HAL_GetTick>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	1ad3      	subs	r3, r2, r3
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	d901      	bls.n	8004af4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004af0:	2303      	movs	r3, #3
 8004af2:	e078      	b.n	8004be6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004af4:	4b3f      	ldr	r3, [pc, #252]	; (8004bf4 <HAL_RCC_OscConfig+0x4d8>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d1f0      	bne.n	8004ae2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	69da      	ldr	r2, [r3, #28]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6a1b      	ldr	r3, [r3, #32]
 8004b08:	431a      	orrs	r2, r3
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0e:	019b      	lsls	r3, r3, #6
 8004b10:	431a      	orrs	r2, r3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b16:	085b      	lsrs	r3, r3, #1
 8004b18:	3b01      	subs	r3, #1
 8004b1a:	041b      	lsls	r3, r3, #16
 8004b1c:	431a      	orrs	r2, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b22:	061b      	lsls	r3, r3, #24
 8004b24:	4933      	ldr	r1, [pc, #204]	; (8004bf4 <HAL_RCC_OscConfig+0x4d8>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b2a:	4b33      	ldr	r3, [pc, #204]	; (8004bf8 <HAL_RCC_OscConfig+0x4dc>)
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b30:	f7fe f9ca 	bl	8002ec8 <HAL_GetTick>
 8004b34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b36:	e008      	b.n	8004b4a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b38:	f7fe f9c6 	bl	8002ec8 <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d901      	bls.n	8004b4a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e04d      	b.n	8004be6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b4a:	4b2a      	ldr	r3, [pc, #168]	; (8004bf4 <HAL_RCC_OscConfig+0x4d8>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d0f0      	beq.n	8004b38 <HAL_RCC_OscConfig+0x41c>
 8004b56:	e045      	b.n	8004be4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b58:	4b27      	ldr	r3, [pc, #156]	; (8004bf8 <HAL_RCC_OscConfig+0x4dc>)
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b5e:	f7fe f9b3 	bl	8002ec8 <HAL_GetTick>
 8004b62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b64:	e008      	b.n	8004b78 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b66:	f7fe f9af 	bl	8002ec8 <HAL_GetTick>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d901      	bls.n	8004b78 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004b74:	2303      	movs	r3, #3
 8004b76:	e036      	b.n	8004be6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b78:	4b1e      	ldr	r3, [pc, #120]	; (8004bf4 <HAL_RCC_OscConfig+0x4d8>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d1f0      	bne.n	8004b66 <HAL_RCC_OscConfig+0x44a>
 8004b84:	e02e      	b.n	8004be4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	699b      	ldr	r3, [r3, #24]
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d101      	bne.n	8004b92 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e029      	b.n	8004be6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b92:	4b18      	ldr	r3, [pc, #96]	; (8004bf4 <HAL_RCC_OscConfig+0x4d8>)
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	69db      	ldr	r3, [r3, #28]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d11c      	bne.n	8004be0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d115      	bne.n	8004be0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004bb4:	68fa      	ldr	r2, [r7, #12]
 8004bb6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004bba:	4013      	ands	r3, r2
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d10d      	bne.n	8004be0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d106      	bne.n	8004be0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d001      	beq.n	8004be4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e000      	b.n	8004be6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3718      	adds	r7, #24
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	40007000 	.word	0x40007000
 8004bf4:	40023800 	.word	0x40023800
 8004bf8:	42470060 	.word	0x42470060

08004bfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b084      	sub	sp, #16
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d101      	bne.n	8004c10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e0cc      	b.n	8004daa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c10:	4b68      	ldr	r3, [pc, #416]	; (8004db4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 030f 	and.w	r3, r3, #15
 8004c18:	683a      	ldr	r2, [r7, #0]
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d90c      	bls.n	8004c38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c1e:	4b65      	ldr	r3, [pc, #404]	; (8004db4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c20:	683a      	ldr	r2, [r7, #0]
 8004c22:	b2d2      	uxtb	r2, r2
 8004c24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c26:	4b63      	ldr	r3, [pc, #396]	; (8004db4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 030f 	and.w	r3, r3, #15
 8004c2e:	683a      	ldr	r2, [r7, #0]
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d001      	beq.n	8004c38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	e0b8      	b.n	8004daa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 0302 	and.w	r3, r3, #2
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d020      	beq.n	8004c86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0304 	and.w	r3, r3, #4
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d005      	beq.n	8004c5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c50:	4b59      	ldr	r3, [pc, #356]	; (8004db8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	4a58      	ldr	r2, [pc, #352]	; (8004db8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c56:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004c5a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0308 	and.w	r3, r3, #8
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d005      	beq.n	8004c74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c68:	4b53      	ldr	r3, [pc, #332]	; (8004db8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	4a52      	ldr	r2, [pc, #328]	; (8004db8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c6e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c74:	4b50      	ldr	r3, [pc, #320]	; (8004db8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	494d      	ldr	r1, [pc, #308]	; (8004db8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c82:	4313      	orrs	r3, r2
 8004c84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 0301 	and.w	r3, r3, #1
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d044      	beq.n	8004d1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d107      	bne.n	8004caa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c9a:	4b47      	ldr	r3, [pc, #284]	; (8004db8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d119      	bne.n	8004cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e07f      	b.n	8004daa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	d003      	beq.n	8004cba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cb6:	2b03      	cmp	r3, #3
 8004cb8:	d107      	bne.n	8004cca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cba:	4b3f      	ldr	r3, [pc, #252]	; (8004db8 <HAL_RCC_ClockConfig+0x1bc>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d109      	bne.n	8004cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e06f      	b.n	8004daa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cca:	4b3b      	ldr	r3, [pc, #236]	; (8004db8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0302 	and.w	r3, r3, #2
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d101      	bne.n	8004cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e067      	b.n	8004daa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004cda:	4b37      	ldr	r3, [pc, #220]	; (8004db8 <HAL_RCC_ClockConfig+0x1bc>)
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	f023 0203 	bic.w	r2, r3, #3
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	4934      	ldr	r1, [pc, #208]	; (8004db8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004cec:	f7fe f8ec 	bl	8002ec8 <HAL_GetTick>
 8004cf0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cf2:	e00a      	b.n	8004d0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cf4:	f7fe f8e8 	bl	8002ec8 <HAL_GetTick>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d901      	bls.n	8004d0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d06:	2303      	movs	r3, #3
 8004d08:	e04f      	b.n	8004daa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d0a:	4b2b      	ldr	r3, [pc, #172]	; (8004db8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	f003 020c 	and.w	r2, r3, #12
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d1eb      	bne.n	8004cf4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d1c:	4b25      	ldr	r3, [pc, #148]	; (8004db4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 030f 	and.w	r3, r3, #15
 8004d24:	683a      	ldr	r2, [r7, #0]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d20c      	bcs.n	8004d44 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d2a:	4b22      	ldr	r3, [pc, #136]	; (8004db4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d2c:	683a      	ldr	r2, [r7, #0]
 8004d2e:	b2d2      	uxtb	r2, r2
 8004d30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d32:	4b20      	ldr	r3, [pc, #128]	; (8004db4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 030f 	and.w	r3, r3, #15
 8004d3a:	683a      	ldr	r2, [r7, #0]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d001      	beq.n	8004d44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e032      	b.n	8004daa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0304 	and.w	r3, r3, #4
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d008      	beq.n	8004d62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d50:	4b19      	ldr	r3, [pc, #100]	; (8004db8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	4916      	ldr	r1, [pc, #88]	; (8004db8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 0308 	and.w	r3, r3, #8
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d009      	beq.n	8004d82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d6e:	4b12      	ldr	r3, [pc, #72]	; (8004db8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	00db      	lsls	r3, r3, #3
 8004d7c:	490e      	ldr	r1, [pc, #56]	; (8004db8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d82:	f000 f821 	bl	8004dc8 <HAL_RCC_GetSysClockFreq>
 8004d86:	4601      	mov	r1, r0
 8004d88:	4b0b      	ldr	r3, [pc, #44]	; (8004db8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	091b      	lsrs	r3, r3, #4
 8004d8e:	f003 030f 	and.w	r3, r3, #15
 8004d92:	4a0a      	ldr	r2, [pc, #40]	; (8004dbc <HAL_RCC_ClockConfig+0x1c0>)
 8004d94:	5cd3      	ldrb	r3, [r2, r3]
 8004d96:	fa21 f303 	lsr.w	r3, r1, r3
 8004d9a:	4a09      	ldr	r2, [pc, #36]	; (8004dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004d9e:	4b09      	ldr	r3, [pc, #36]	; (8004dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4618      	mov	r0, r3
 8004da4:	f7fe f84c 	bl	8002e40 <HAL_InitTick>

  return HAL_OK;
 8004da8:	2300      	movs	r3, #0
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3710      	adds	r7, #16
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	40023c00 	.word	0x40023c00
 8004db8:	40023800 	.word	0x40023800
 8004dbc:	08007598 	.word	0x08007598
 8004dc0:	20000004 	.word	0x20000004
 8004dc4:	20000008 	.word	0x20000008

08004dc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dca:	b085      	sub	sp, #20
 8004dcc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	607b      	str	r3, [r7, #4]
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	60fb      	str	r3, [r7, #12]
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004dde:	4b63      	ldr	r3, [pc, #396]	; (8004f6c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	f003 030c 	and.w	r3, r3, #12
 8004de6:	2b04      	cmp	r3, #4
 8004de8:	d007      	beq.n	8004dfa <HAL_RCC_GetSysClockFreq+0x32>
 8004dea:	2b08      	cmp	r3, #8
 8004dec:	d008      	beq.n	8004e00 <HAL_RCC_GetSysClockFreq+0x38>
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	f040 80b4 	bne.w	8004f5c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004df4:	4b5e      	ldr	r3, [pc, #376]	; (8004f70 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004df6:	60bb      	str	r3, [r7, #8]
       break;
 8004df8:	e0b3      	b.n	8004f62 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004dfa:	4b5e      	ldr	r3, [pc, #376]	; (8004f74 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004dfc:	60bb      	str	r3, [r7, #8]
      break;
 8004dfe:	e0b0      	b.n	8004f62 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e00:	4b5a      	ldr	r3, [pc, #360]	; (8004f6c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e08:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e0a:	4b58      	ldr	r3, [pc, #352]	; (8004f6c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d04a      	beq.n	8004eac <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e16:	4b55      	ldr	r3, [pc, #340]	; (8004f6c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	099b      	lsrs	r3, r3, #6
 8004e1c:	f04f 0400 	mov.w	r4, #0
 8004e20:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004e24:	f04f 0200 	mov.w	r2, #0
 8004e28:	ea03 0501 	and.w	r5, r3, r1
 8004e2c:	ea04 0602 	and.w	r6, r4, r2
 8004e30:	4629      	mov	r1, r5
 8004e32:	4632      	mov	r2, r6
 8004e34:	f04f 0300 	mov.w	r3, #0
 8004e38:	f04f 0400 	mov.w	r4, #0
 8004e3c:	0154      	lsls	r4, r2, #5
 8004e3e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004e42:	014b      	lsls	r3, r1, #5
 8004e44:	4619      	mov	r1, r3
 8004e46:	4622      	mov	r2, r4
 8004e48:	1b49      	subs	r1, r1, r5
 8004e4a:	eb62 0206 	sbc.w	r2, r2, r6
 8004e4e:	f04f 0300 	mov.w	r3, #0
 8004e52:	f04f 0400 	mov.w	r4, #0
 8004e56:	0194      	lsls	r4, r2, #6
 8004e58:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004e5c:	018b      	lsls	r3, r1, #6
 8004e5e:	1a5b      	subs	r3, r3, r1
 8004e60:	eb64 0402 	sbc.w	r4, r4, r2
 8004e64:	f04f 0100 	mov.w	r1, #0
 8004e68:	f04f 0200 	mov.w	r2, #0
 8004e6c:	00e2      	lsls	r2, r4, #3
 8004e6e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004e72:	00d9      	lsls	r1, r3, #3
 8004e74:	460b      	mov	r3, r1
 8004e76:	4614      	mov	r4, r2
 8004e78:	195b      	adds	r3, r3, r5
 8004e7a:	eb44 0406 	adc.w	r4, r4, r6
 8004e7e:	f04f 0100 	mov.w	r1, #0
 8004e82:	f04f 0200 	mov.w	r2, #0
 8004e86:	0262      	lsls	r2, r4, #9
 8004e88:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004e8c:	0259      	lsls	r1, r3, #9
 8004e8e:	460b      	mov	r3, r1
 8004e90:	4614      	mov	r4, r2
 8004e92:	4618      	mov	r0, r3
 8004e94:	4621      	mov	r1, r4
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f04f 0400 	mov.w	r4, #0
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	4623      	mov	r3, r4
 8004ea0:	f7fb fdc4 	bl	8000a2c <__aeabi_uldivmod>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	460c      	mov	r4, r1
 8004ea8:	60fb      	str	r3, [r7, #12]
 8004eaa:	e049      	b.n	8004f40 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004eac:	4b2f      	ldr	r3, [pc, #188]	; (8004f6c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	099b      	lsrs	r3, r3, #6
 8004eb2:	f04f 0400 	mov.w	r4, #0
 8004eb6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004eba:	f04f 0200 	mov.w	r2, #0
 8004ebe:	ea03 0501 	and.w	r5, r3, r1
 8004ec2:	ea04 0602 	and.w	r6, r4, r2
 8004ec6:	4629      	mov	r1, r5
 8004ec8:	4632      	mov	r2, r6
 8004eca:	f04f 0300 	mov.w	r3, #0
 8004ece:	f04f 0400 	mov.w	r4, #0
 8004ed2:	0154      	lsls	r4, r2, #5
 8004ed4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004ed8:	014b      	lsls	r3, r1, #5
 8004eda:	4619      	mov	r1, r3
 8004edc:	4622      	mov	r2, r4
 8004ede:	1b49      	subs	r1, r1, r5
 8004ee0:	eb62 0206 	sbc.w	r2, r2, r6
 8004ee4:	f04f 0300 	mov.w	r3, #0
 8004ee8:	f04f 0400 	mov.w	r4, #0
 8004eec:	0194      	lsls	r4, r2, #6
 8004eee:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004ef2:	018b      	lsls	r3, r1, #6
 8004ef4:	1a5b      	subs	r3, r3, r1
 8004ef6:	eb64 0402 	sbc.w	r4, r4, r2
 8004efa:	f04f 0100 	mov.w	r1, #0
 8004efe:	f04f 0200 	mov.w	r2, #0
 8004f02:	00e2      	lsls	r2, r4, #3
 8004f04:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004f08:	00d9      	lsls	r1, r3, #3
 8004f0a:	460b      	mov	r3, r1
 8004f0c:	4614      	mov	r4, r2
 8004f0e:	195b      	adds	r3, r3, r5
 8004f10:	eb44 0406 	adc.w	r4, r4, r6
 8004f14:	f04f 0100 	mov.w	r1, #0
 8004f18:	f04f 0200 	mov.w	r2, #0
 8004f1c:	02a2      	lsls	r2, r4, #10
 8004f1e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004f22:	0299      	lsls	r1, r3, #10
 8004f24:	460b      	mov	r3, r1
 8004f26:	4614      	mov	r4, r2
 8004f28:	4618      	mov	r0, r3
 8004f2a:	4621      	mov	r1, r4
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f04f 0400 	mov.w	r4, #0
 8004f32:	461a      	mov	r2, r3
 8004f34:	4623      	mov	r3, r4
 8004f36:	f7fb fd79 	bl	8000a2c <__aeabi_uldivmod>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	460c      	mov	r4, r1
 8004f3e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004f40:	4b0a      	ldr	r3, [pc, #40]	; (8004f6c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	0c1b      	lsrs	r3, r3, #16
 8004f46:	f003 0303 	and.w	r3, r3, #3
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	005b      	lsls	r3, r3, #1
 8004f4e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004f50:	68fa      	ldr	r2, [r7, #12]
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f58:	60bb      	str	r3, [r7, #8]
      break;
 8004f5a:	e002      	b.n	8004f62 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f5c:	4b04      	ldr	r3, [pc, #16]	; (8004f70 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004f5e:	60bb      	str	r3, [r7, #8]
      break;
 8004f60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f62:	68bb      	ldr	r3, [r7, #8]
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3714      	adds	r7, #20
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f6c:	40023800 	.word	0x40023800
 8004f70:	00f42400 	.word	0x00f42400
 8004f74:	007a1200 	.word	0x007a1200

08004f78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f7c:	4b03      	ldr	r3, [pc, #12]	; (8004f8c <HAL_RCC_GetHCLKFreq+0x14>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr
 8004f8a:	bf00      	nop
 8004f8c:	20000004 	.word	0x20000004

08004f90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004f94:	f7ff fff0 	bl	8004f78 <HAL_RCC_GetHCLKFreq>
 8004f98:	4601      	mov	r1, r0
 8004f9a:	4b05      	ldr	r3, [pc, #20]	; (8004fb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	0a9b      	lsrs	r3, r3, #10
 8004fa0:	f003 0307 	and.w	r3, r3, #7
 8004fa4:	4a03      	ldr	r2, [pc, #12]	; (8004fb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fa6:	5cd3      	ldrb	r3, [r2, r3]
 8004fa8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	40023800 	.word	0x40023800
 8004fb4:	080075a8 	.word	0x080075a8

08004fb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004fbc:	f7ff ffdc 	bl	8004f78 <HAL_RCC_GetHCLKFreq>
 8004fc0:	4601      	mov	r1, r0
 8004fc2:	4b05      	ldr	r3, [pc, #20]	; (8004fd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	0b5b      	lsrs	r3, r3, #13
 8004fc8:	f003 0307 	and.w	r3, r3, #7
 8004fcc:	4a03      	ldr	r2, [pc, #12]	; (8004fdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fce:	5cd3      	ldrb	r3, [r2, r3]
 8004fd0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	bd80      	pop	{r7, pc}
 8004fd8:	40023800 	.word	0x40023800
 8004fdc:	080075a8 	.word	0x080075a8

08004fe0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b082      	sub	sp, #8
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d101      	bne.n	8004ff2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e01d      	b.n	800502e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d106      	bne.n	800500c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f7fd fd00 	bl	8002a0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2202      	movs	r2, #2
 8005010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	3304      	adds	r3, #4
 800501c:	4619      	mov	r1, r3
 800501e:	4610      	mov	r0, r2
 8005020:	f000 fca2 	bl	8005968 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800502c:	2300      	movs	r3, #0
}
 800502e:	4618      	mov	r0, r3
 8005030:	3708      	adds	r7, #8
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}

08005036 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005036:	b480      	push	{r7}
 8005038:	b085      	sub	sp, #20
 800503a:	af00      	add	r7, sp, #0
 800503c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2202      	movs	r2, #2
 8005042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	f003 0307 	and.w	r3, r3, #7
 8005050:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2b06      	cmp	r3, #6
 8005056:	d007      	beq.n	8005068 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f042 0201 	orr.w	r2, r2, #1
 8005066:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005070:	2300      	movs	r3, #0
}
 8005072:	4618      	mov	r0, r3
 8005074:	3714      	adds	r7, #20
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr

0800507e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800507e:	b480      	push	{r7}
 8005080:	b085      	sub	sp, #20
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	68da      	ldr	r2, [r3, #12]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f042 0201 	orr.w	r2, r2, #1
 8005094:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	f003 0307 	and.w	r3, r3, #7
 80050a0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2b06      	cmp	r3, #6
 80050a6:	d007      	beq.n	80050b8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f042 0201 	orr.w	r2, r2, #1
 80050b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050b8:	2300      	movs	r3, #0
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3714      	adds	r7, #20
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr

080050c6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80050c6:	b580      	push	{r7, lr}
 80050c8:	b082      	sub	sp, #8
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d101      	bne.n	80050d8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	e01d      	b.n	8005114 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d106      	bne.n	80050f2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f000 f815 	bl	800511c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2202      	movs	r2, #2
 80050f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	3304      	adds	r3, #4
 8005102:	4619      	mov	r1, r3
 8005104:	4610      	mov	r0, r2
 8005106:	f000 fc2f 	bl	8005968 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2201      	movs	r2, #1
 800510e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005112:	2300      	movs	r3, #0
}
 8005114:	4618      	mov	r0, r3
 8005116:	3708      	adds	r7, #8
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005124:	bf00      	nop
 8005126:	370c      	adds	r7, #12
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr

08005130 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b084      	sub	sp, #16
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2201      	movs	r2, #1
 8005140:	6839      	ldr	r1, [r7, #0]
 8005142:	4618      	mov	r0, r3
 8005144:	f001 f824 	bl	8006190 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a15      	ldr	r2, [pc, #84]	; (80051a4 <HAL_TIM_PWM_Start+0x74>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d004      	beq.n	800515c <HAL_TIM_PWM_Start+0x2c>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a14      	ldr	r2, [pc, #80]	; (80051a8 <HAL_TIM_PWM_Start+0x78>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d101      	bne.n	8005160 <HAL_TIM_PWM_Start+0x30>
 800515c:	2301      	movs	r3, #1
 800515e:	e000      	b.n	8005162 <HAL_TIM_PWM_Start+0x32>
 8005160:	2300      	movs	r3, #0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d007      	beq.n	8005176 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005174:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	f003 0307 	and.w	r3, r3, #7
 8005180:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2b06      	cmp	r3, #6
 8005186:	d007      	beq.n	8005198 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f042 0201 	orr.w	r2, r2, #1
 8005196:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005198:	2300      	movs	r3, #0
}
 800519a:	4618      	mov	r0, r3
 800519c:	3710      	adds	r7, #16
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	bf00      	nop
 80051a4:	40010000 	.word	0x40010000
 80051a8:	40010400 	.word	0x40010400

080051ac <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b082      	sub	sp, #8
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d101      	bne.n	80051be <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e01d      	b.n	80051fa <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d106      	bne.n	80051d8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 f815 	bl	8005202 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2202      	movs	r2, #2
 80051dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	3304      	adds	r3, #4
 80051e8:	4619      	mov	r1, r3
 80051ea:	4610      	mov	r0, r2
 80051ec:	f000 fbbc 	bl	8005968 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3708      	adds	r7, #8
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}

08005202 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005202:	b480      	push	{r7}
 8005204:	b083      	sub	sp, #12
 8005206:	af00      	add	r7, sp, #0
 8005208:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800520a:	bf00      	nop
 800520c:	370c      	adds	r7, #12
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr
	...

08005218 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	2b0c      	cmp	r3, #12
 8005226:	d841      	bhi.n	80052ac <HAL_TIM_IC_Start_IT+0x94>
 8005228:	a201      	add	r2, pc, #4	; (adr r2, 8005230 <HAL_TIM_IC_Start_IT+0x18>)
 800522a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800522e:	bf00      	nop
 8005230:	08005265 	.word	0x08005265
 8005234:	080052ad 	.word	0x080052ad
 8005238:	080052ad 	.word	0x080052ad
 800523c:	080052ad 	.word	0x080052ad
 8005240:	08005277 	.word	0x08005277
 8005244:	080052ad 	.word	0x080052ad
 8005248:	080052ad 	.word	0x080052ad
 800524c:	080052ad 	.word	0x080052ad
 8005250:	08005289 	.word	0x08005289
 8005254:	080052ad 	.word	0x080052ad
 8005258:	080052ad 	.word	0x080052ad
 800525c:	080052ad 	.word	0x080052ad
 8005260:	0800529b 	.word	0x0800529b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	68da      	ldr	r2, [r3, #12]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f042 0202 	orr.w	r2, r2, #2
 8005272:	60da      	str	r2, [r3, #12]
      break;
 8005274:	e01b      	b.n	80052ae <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	68da      	ldr	r2, [r3, #12]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f042 0204 	orr.w	r2, r2, #4
 8005284:	60da      	str	r2, [r3, #12]
      break;
 8005286:	e012      	b.n	80052ae <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	68da      	ldr	r2, [r3, #12]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f042 0208 	orr.w	r2, r2, #8
 8005296:	60da      	str	r2, [r3, #12]
      break;
 8005298:	e009      	b.n	80052ae <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	68da      	ldr	r2, [r3, #12]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f042 0210 	orr.w	r2, r2, #16
 80052a8:	60da      	str	r2, [r3, #12]
      break;
 80052aa:	e000      	b.n	80052ae <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 80052ac:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2201      	movs	r2, #1
 80052b4:	6839      	ldr	r1, [r7, #0]
 80052b6:	4618      	mov	r0, r3
 80052b8:	f000 ff6a 	bl	8006190 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	f003 0307 	and.w	r3, r3, #7
 80052c6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2b06      	cmp	r3, #6
 80052cc:	d007      	beq.n	80052de <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f042 0201 	orr.w	r2, r2, #1
 80052dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052de:	2300      	movs	r3, #0
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3710      	adds	r7, #16
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b082      	sub	sp, #8
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	f003 0302 	and.w	r3, r3, #2
 80052fa:	2b02      	cmp	r3, #2
 80052fc:	d122      	bne.n	8005344 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	f003 0302 	and.w	r3, r3, #2
 8005308:	2b02      	cmp	r3, #2
 800530a:	d11b      	bne.n	8005344 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f06f 0202 	mvn.w	r2, #2
 8005314:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2201      	movs	r2, #1
 800531a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	699b      	ldr	r3, [r3, #24]
 8005322:	f003 0303 	and.w	r3, r3, #3
 8005326:	2b00      	cmp	r3, #0
 8005328:	d003      	beq.n	8005332 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f7fc f808 	bl	8001340 <HAL_TIM_IC_CaptureCallback>
 8005330:	e005      	b.n	800533e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 faf9 	bl	800592a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f000 fb00 	bl	800593e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	f003 0304 	and.w	r3, r3, #4
 800534e:	2b04      	cmp	r3, #4
 8005350:	d122      	bne.n	8005398 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	f003 0304 	and.w	r3, r3, #4
 800535c:	2b04      	cmp	r3, #4
 800535e:	d11b      	bne.n	8005398 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f06f 0204 	mvn.w	r2, #4
 8005368:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2202      	movs	r2, #2
 800536e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	699b      	ldr	r3, [r3, #24]
 8005376:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800537a:	2b00      	cmp	r3, #0
 800537c:	d003      	beq.n	8005386 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f7fb ffde 	bl	8001340 <HAL_TIM_IC_CaptureCallback>
 8005384:	e005      	b.n	8005392 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 facf 	bl	800592a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f000 fad6 	bl	800593e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	691b      	ldr	r3, [r3, #16]
 800539e:	f003 0308 	and.w	r3, r3, #8
 80053a2:	2b08      	cmp	r3, #8
 80053a4:	d122      	bne.n	80053ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	f003 0308 	and.w	r3, r3, #8
 80053b0:	2b08      	cmp	r3, #8
 80053b2:	d11b      	bne.n	80053ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f06f 0208 	mvn.w	r2, #8
 80053bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2204      	movs	r2, #4
 80053c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	69db      	ldr	r3, [r3, #28]
 80053ca:	f003 0303 	and.w	r3, r3, #3
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d003      	beq.n	80053da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f7fb ffb4 	bl	8001340 <HAL_TIM_IC_CaptureCallback>
 80053d8:	e005      	b.n	80053e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f000 faa5 	bl	800592a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f000 faac 	bl	800593e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	691b      	ldr	r3, [r3, #16]
 80053f2:	f003 0310 	and.w	r3, r3, #16
 80053f6:	2b10      	cmp	r3, #16
 80053f8:	d122      	bne.n	8005440 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	f003 0310 	and.w	r3, r3, #16
 8005404:	2b10      	cmp	r3, #16
 8005406:	d11b      	bne.n	8005440 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f06f 0210 	mvn.w	r2, #16
 8005410:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2208      	movs	r2, #8
 8005416:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	69db      	ldr	r3, [r3, #28]
 800541e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005422:	2b00      	cmp	r3, #0
 8005424:	d003      	beq.n	800542e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f7fb ff8a 	bl	8001340 <HAL_TIM_IC_CaptureCallback>
 800542c:	e005      	b.n	800543a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f000 fa7b 	bl	800592a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 fa82 	bl	800593e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	f003 0301 	and.w	r3, r3, #1
 800544a:	2b01      	cmp	r3, #1
 800544c:	d10e      	bne.n	800546c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	f003 0301 	and.w	r3, r3, #1
 8005458:	2b01      	cmp	r3, #1
 800545a:	d107      	bne.n	800546c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f06f 0201 	mvn.w	r2, #1
 8005464:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f7fb ff50 	bl	800130c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005476:	2b80      	cmp	r3, #128	; 0x80
 8005478:	d10e      	bne.n	8005498 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005484:	2b80      	cmp	r3, #128	; 0x80
 8005486:	d107      	bne.n	8005498 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005490:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f000 ff28 	bl	80062e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	691b      	ldr	r3, [r3, #16]
 800549e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054a2:	2b40      	cmp	r3, #64	; 0x40
 80054a4:	d10e      	bne.n	80054c4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054b0:	2b40      	cmp	r3, #64	; 0x40
 80054b2:	d107      	bne.n	80054c4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80054bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f000 fa47 	bl	8005952 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	f003 0320 	and.w	r3, r3, #32
 80054ce:	2b20      	cmp	r3, #32
 80054d0:	d10e      	bne.n	80054f0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	f003 0320 	and.w	r3, r3, #32
 80054dc:	2b20      	cmp	r3, #32
 80054de:	d107      	bne.n	80054f0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f06f 0220 	mvn.w	r2, #32
 80054e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f000 fef2 	bl	80062d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054f0:	bf00      	nop
 80054f2:	3708      	adds	r7, #8
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	60f8      	str	r0, [r7, #12]
 8005500:	60b9      	str	r1, [r7, #8]
 8005502:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800550a:	2b01      	cmp	r3, #1
 800550c:	d101      	bne.n	8005512 <HAL_TIM_IC_ConfigChannel+0x1a>
 800550e:	2302      	movs	r3, #2
 8005510:	e08a      	b.n	8005628 <HAL_TIM_IC_ConfigChannel+0x130>
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2201      	movs	r2, #1
 8005516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2202      	movs	r2, #2
 800551e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d11b      	bne.n	8005560 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	6818      	ldr	r0, [r3, #0]
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	6819      	ldr	r1, [r3, #0]
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	685a      	ldr	r2, [r3, #4]
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	68db      	ldr	r3, [r3, #12]
 8005538:	f000 fc66 	bl	8005e08 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	699a      	ldr	r2, [r3, #24]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f022 020c 	bic.w	r2, r2, #12
 800554a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	6999      	ldr	r1, [r3, #24]
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	689a      	ldr	r2, [r3, #8]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	430a      	orrs	r2, r1
 800555c:	619a      	str	r2, [r3, #24]
 800555e:	e05a      	b.n	8005616 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2b04      	cmp	r3, #4
 8005564:	d11c      	bne.n	80055a0 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	6818      	ldr	r0, [r3, #0]
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	6819      	ldr	r1, [r3, #0]
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	685a      	ldr	r2, [r3, #4]
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	f000 fcea 	bl	8005f4e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	699a      	ldr	r2, [r3, #24]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005588:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	6999      	ldr	r1, [r3, #24]
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	021a      	lsls	r2, r3, #8
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	430a      	orrs	r2, r1
 800559c:	619a      	str	r2, [r3, #24]
 800559e:	e03a      	b.n	8005616 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2b08      	cmp	r3, #8
 80055a4:	d11b      	bne.n	80055de <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	6818      	ldr	r0, [r3, #0]
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	6819      	ldr	r1, [r3, #0]
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	685a      	ldr	r2, [r3, #4]
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	68db      	ldr	r3, [r3, #12]
 80055b6:	f000 fd37 	bl	8006028 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	69da      	ldr	r2, [r3, #28]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f022 020c 	bic.w	r2, r2, #12
 80055c8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	69d9      	ldr	r1, [r3, #28]
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	689a      	ldr	r2, [r3, #8]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	430a      	orrs	r2, r1
 80055da:	61da      	str	r2, [r3, #28]
 80055dc:	e01b      	b.n	8005616 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6818      	ldr	r0, [r3, #0]
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	6819      	ldr	r1, [r3, #0]
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	685a      	ldr	r2, [r3, #4]
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	f000 fd57 	bl	80060a0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	69da      	ldr	r2, [r3, #28]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005600:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	69d9      	ldr	r1, [r3, #28]
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	021a      	lsls	r2, r3, #8
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	430a      	orrs	r2, r1
 8005614:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2201      	movs	r2, #1
 800561a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2200      	movs	r2, #0
 8005622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005626:	2300      	movs	r3, #0
}
 8005628:	4618      	mov	r0, r3
 800562a:	3710      	adds	r7, #16
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}

08005630 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	60f8      	str	r0, [r7, #12]
 8005638:	60b9      	str	r1, [r7, #8]
 800563a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005642:	2b01      	cmp	r3, #1
 8005644:	d101      	bne.n	800564a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005646:	2302      	movs	r3, #2
 8005648:	e0b4      	b.n	80057b4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2201      	movs	r2, #1
 800564e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2202      	movs	r2, #2
 8005656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2b0c      	cmp	r3, #12
 800565e:	f200 809f 	bhi.w	80057a0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8005662:	a201      	add	r2, pc, #4	; (adr r2, 8005668 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005668:	0800569d 	.word	0x0800569d
 800566c:	080057a1 	.word	0x080057a1
 8005670:	080057a1 	.word	0x080057a1
 8005674:	080057a1 	.word	0x080057a1
 8005678:	080056dd 	.word	0x080056dd
 800567c:	080057a1 	.word	0x080057a1
 8005680:	080057a1 	.word	0x080057a1
 8005684:	080057a1 	.word	0x080057a1
 8005688:	0800571f 	.word	0x0800571f
 800568c:	080057a1 	.word	0x080057a1
 8005690:	080057a1 	.word	0x080057a1
 8005694:	080057a1 	.word	0x080057a1
 8005698:	0800575f 	.word	0x0800575f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	68b9      	ldr	r1, [r7, #8]
 80056a2:	4618      	mov	r0, r3
 80056a4:	f000 fa00 	bl	8005aa8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	699a      	ldr	r2, [r3, #24]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f042 0208 	orr.w	r2, r2, #8
 80056b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	699a      	ldr	r2, [r3, #24]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f022 0204 	bic.w	r2, r2, #4
 80056c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	6999      	ldr	r1, [r3, #24]
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	691a      	ldr	r2, [r3, #16]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	430a      	orrs	r2, r1
 80056d8:	619a      	str	r2, [r3, #24]
      break;
 80056da:	e062      	b.n	80057a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	68b9      	ldr	r1, [r7, #8]
 80056e2:	4618      	mov	r0, r3
 80056e4:	f000 fa50 	bl	8005b88 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	699a      	ldr	r2, [r3, #24]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	699a      	ldr	r2, [r3, #24]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005706:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	6999      	ldr	r1, [r3, #24]
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	691b      	ldr	r3, [r3, #16]
 8005712:	021a      	lsls	r2, r3, #8
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	430a      	orrs	r2, r1
 800571a:	619a      	str	r2, [r3, #24]
      break;
 800571c:	e041      	b.n	80057a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	68b9      	ldr	r1, [r7, #8]
 8005724:	4618      	mov	r0, r3
 8005726:	f000 faa5 	bl	8005c74 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	69da      	ldr	r2, [r3, #28]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f042 0208 	orr.w	r2, r2, #8
 8005738:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	69da      	ldr	r2, [r3, #28]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f022 0204 	bic.w	r2, r2, #4
 8005748:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	69d9      	ldr	r1, [r3, #28]
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	691a      	ldr	r2, [r3, #16]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	430a      	orrs	r2, r1
 800575a:	61da      	str	r2, [r3, #28]
      break;
 800575c:	e021      	b.n	80057a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	68b9      	ldr	r1, [r7, #8]
 8005764:	4618      	mov	r0, r3
 8005766:	f000 faf9 	bl	8005d5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	69da      	ldr	r2, [r3, #28]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005778:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	69da      	ldr	r2, [r3, #28]
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005788:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	69d9      	ldr	r1, [r3, #28]
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	691b      	ldr	r3, [r3, #16]
 8005794:	021a      	lsls	r2, r3, #8
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	430a      	orrs	r2, r1
 800579c:	61da      	str	r2, [r3, #28]
      break;
 800579e:	e000      	b.n	80057a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80057a0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2201      	movs	r2, #1
 80057a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2200      	movs	r2, #0
 80057ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057b2:	2300      	movs	r3, #0
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3710      	adds	r7, #16
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d101      	bne.n	80057d4 <HAL_TIM_ConfigClockSource+0x18>
 80057d0:	2302      	movs	r3, #2
 80057d2:	e0a6      	b.n	8005922 <HAL_TIM_ConfigClockSource+0x166>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2202      	movs	r2, #2
 80057e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80057f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057fa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	68fa      	ldr	r2, [r7, #12]
 8005802:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	2b40      	cmp	r3, #64	; 0x40
 800580a:	d067      	beq.n	80058dc <HAL_TIM_ConfigClockSource+0x120>
 800580c:	2b40      	cmp	r3, #64	; 0x40
 800580e:	d80b      	bhi.n	8005828 <HAL_TIM_ConfigClockSource+0x6c>
 8005810:	2b10      	cmp	r3, #16
 8005812:	d073      	beq.n	80058fc <HAL_TIM_ConfigClockSource+0x140>
 8005814:	2b10      	cmp	r3, #16
 8005816:	d802      	bhi.n	800581e <HAL_TIM_ConfigClockSource+0x62>
 8005818:	2b00      	cmp	r3, #0
 800581a:	d06f      	beq.n	80058fc <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800581c:	e078      	b.n	8005910 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800581e:	2b20      	cmp	r3, #32
 8005820:	d06c      	beq.n	80058fc <HAL_TIM_ConfigClockSource+0x140>
 8005822:	2b30      	cmp	r3, #48	; 0x30
 8005824:	d06a      	beq.n	80058fc <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005826:	e073      	b.n	8005910 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005828:	2b70      	cmp	r3, #112	; 0x70
 800582a:	d00d      	beq.n	8005848 <HAL_TIM_ConfigClockSource+0x8c>
 800582c:	2b70      	cmp	r3, #112	; 0x70
 800582e:	d804      	bhi.n	800583a <HAL_TIM_ConfigClockSource+0x7e>
 8005830:	2b50      	cmp	r3, #80	; 0x50
 8005832:	d033      	beq.n	800589c <HAL_TIM_ConfigClockSource+0xe0>
 8005834:	2b60      	cmp	r3, #96	; 0x60
 8005836:	d041      	beq.n	80058bc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005838:	e06a      	b.n	8005910 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800583a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800583e:	d066      	beq.n	800590e <HAL_TIM_ConfigClockSource+0x152>
 8005840:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005844:	d017      	beq.n	8005876 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005846:	e063      	b.n	8005910 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6818      	ldr	r0, [r3, #0]
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	6899      	ldr	r1, [r3, #8]
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	685a      	ldr	r2, [r3, #4]
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	f000 fc7a 	bl	8006150 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800586a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	68fa      	ldr	r2, [r7, #12]
 8005872:	609a      	str	r2, [r3, #8]
      break;
 8005874:	e04c      	b.n	8005910 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6818      	ldr	r0, [r3, #0]
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	6899      	ldr	r1, [r3, #8]
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	685a      	ldr	r2, [r3, #4]
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	f000 fc63 	bl	8006150 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	689a      	ldr	r2, [r3, #8]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005898:	609a      	str	r2, [r3, #8]
      break;
 800589a:	e039      	b.n	8005910 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6818      	ldr	r0, [r3, #0]
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	6859      	ldr	r1, [r3, #4]
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	461a      	mov	r2, r3
 80058aa:	f000 fb21 	bl	8005ef0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	2150      	movs	r1, #80	; 0x50
 80058b4:	4618      	mov	r0, r3
 80058b6:	f000 fc30 	bl	800611a <TIM_ITRx_SetConfig>
      break;
 80058ba:	e029      	b.n	8005910 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6818      	ldr	r0, [r3, #0]
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	6859      	ldr	r1, [r3, #4]
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	461a      	mov	r2, r3
 80058ca:	f000 fb7d 	bl	8005fc8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	2160      	movs	r1, #96	; 0x60
 80058d4:	4618      	mov	r0, r3
 80058d6:	f000 fc20 	bl	800611a <TIM_ITRx_SetConfig>
      break;
 80058da:	e019      	b.n	8005910 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6818      	ldr	r0, [r3, #0]
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	6859      	ldr	r1, [r3, #4]
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	461a      	mov	r2, r3
 80058ea:	f000 fb01 	bl	8005ef0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	2140      	movs	r1, #64	; 0x40
 80058f4:	4618      	mov	r0, r3
 80058f6:	f000 fc10 	bl	800611a <TIM_ITRx_SetConfig>
      break;
 80058fa:	e009      	b.n	8005910 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4619      	mov	r1, r3
 8005906:	4610      	mov	r0, r2
 8005908:	f000 fc07 	bl	800611a <TIM_ITRx_SetConfig>
      break;
 800590c:	e000      	b.n	8005910 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800590e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005920:	2300      	movs	r3, #0
}
 8005922:	4618      	mov	r0, r3
 8005924:	3710      	adds	r7, #16
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}

0800592a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800592a:	b480      	push	{r7}
 800592c:	b083      	sub	sp, #12
 800592e:	af00      	add	r7, sp, #0
 8005930:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005932:	bf00      	nop
 8005934:	370c      	adds	r7, #12
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr

0800593e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800593e:	b480      	push	{r7}
 8005940:	b083      	sub	sp, #12
 8005942:	af00      	add	r7, sp, #0
 8005944:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005946:	bf00      	nop
 8005948:	370c      	adds	r7, #12
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr

08005952 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005952:	b480      	push	{r7}
 8005954:	b083      	sub	sp, #12
 8005956:	af00      	add	r7, sp, #0
 8005958:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800595a:	bf00      	nop
 800595c:	370c      	adds	r7, #12
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr
	...

08005968 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005968:	b480      	push	{r7}
 800596a:	b085      	sub	sp, #20
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4a40      	ldr	r2, [pc, #256]	; (8005a7c <TIM_Base_SetConfig+0x114>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d013      	beq.n	80059a8 <TIM_Base_SetConfig+0x40>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005986:	d00f      	beq.n	80059a8 <TIM_Base_SetConfig+0x40>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a3d      	ldr	r2, [pc, #244]	; (8005a80 <TIM_Base_SetConfig+0x118>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d00b      	beq.n	80059a8 <TIM_Base_SetConfig+0x40>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a3c      	ldr	r2, [pc, #240]	; (8005a84 <TIM_Base_SetConfig+0x11c>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d007      	beq.n	80059a8 <TIM_Base_SetConfig+0x40>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4a3b      	ldr	r2, [pc, #236]	; (8005a88 <TIM_Base_SetConfig+0x120>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d003      	beq.n	80059a8 <TIM_Base_SetConfig+0x40>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4a3a      	ldr	r2, [pc, #232]	; (8005a8c <TIM_Base_SetConfig+0x124>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d108      	bne.n	80059ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	68fa      	ldr	r2, [r7, #12]
 80059b6:	4313      	orrs	r3, r2
 80059b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a2f      	ldr	r2, [pc, #188]	; (8005a7c <TIM_Base_SetConfig+0x114>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d02b      	beq.n	8005a1a <TIM_Base_SetConfig+0xb2>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059c8:	d027      	beq.n	8005a1a <TIM_Base_SetConfig+0xb2>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a2c      	ldr	r2, [pc, #176]	; (8005a80 <TIM_Base_SetConfig+0x118>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d023      	beq.n	8005a1a <TIM_Base_SetConfig+0xb2>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a2b      	ldr	r2, [pc, #172]	; (8005a84 <TIM_Base_SetConfig+0x11c>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d01f      	beq.n	8005a1a <TIM_Base_SetConfig+0xb2>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a2a      	ldr	r2, [pc, #168]	; (8005a88 <TIM_Base_SetConfig+0x120>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d01b      	beq.n	8005a1a <TIM_Base_SetConfig+0xb2>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a29      	ldr	r2, [pc, #164]	; (8005a8c <TIM_Base_SetConfig+0x124>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d017      	beq.n	8005a1a <TIM_Base_SetConfig+0xb2>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4a28      	ldr	r2, [pc, #160]	; (8005a90 <TIM_Base_SetConfig+0x128>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d013      	beq.n	8005a1a <TIM_Base_SetConfig+0xb2>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4a27      	ldr	r2, [pc, #156]	; (8005a94 <TIM_Base_SetConfig+0x12c>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d00f      	beq.n	8005a1a <TIM_Base_SetConfig+0xb2>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a26      	ldr	r2, [pc, #152]	; (8005a98 <TIM_Base_SetConfig+0x130>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d00b      	beq.n	8005a1a <TIM_Base_SetConfig+0xb2>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a25      	ldr	r2, [pc, #148]	; (8005a9c <TIM_Base_SetConfig+0x134>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d007      	beq.n	8005a1a <TIM_Base_SetConfig+0xb2>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4a24      	ldr	r2, [pc, #144]	; (8005aa0 <TIM_Base_SetConfig+0x138>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d003      	beq.n	8005a1a <TIM_Base_SetConfig+0xb2>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a23      	ldr	r2, [pc, #140]	; (8005aa4 <TIM_Base_SetConfig+0x13c>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d108      	bne.n	8005a2c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	68fa      	ldr	r2, [r7, #12]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	695b      	ldr	r3, [r3, #20]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	68fa      	ldr	r2, [r7, #12]
 8005a3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	689a      	ldr	r2, [r3, #8]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	4a0a      	ldr	r2, [pc, #40]	; (8005a7c <TIM_Base_SetConfig+0x114>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d003      	beq.n	8005a60 <TIM_Base_SetConfig+0xf8>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4a0c      	ldr	r2, [pc, #48]	; (8005a8c <TIM_Base_SetConfig+0x124>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d103      	bne.n	8005a68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	691a      	ldr	r2, [r3, #16]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	615a      	str	r2, [r3, #20]
}
 8005a6e:	bf00      	nop
 8005a70:	3714      	adds	r7, #20
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr
 8005a7a:	bf00      	nop
 8005a7c:	40010000 	.word	0x40010000
 8005a80:	40000400 	.word	0x40000400
 8005a84:	40000800 	.word	0x40000800
 8005a88:	40000c00 	.word	0x40000c00
 8005a8c:	40010400 	.word	0x40010400
 8005a90:	40014000 	.word	0x40014000
 8005a94:	40014400 	.word	0x40014400
 8005a98:	40014800 	.word	0x40014800
 8005a9c:	40001800 	.word	0x40001800
 8005aa0:	40001c00 	.word	0x40001c00
 8005aa4:	40002000 	.word	0x40002000

08005aa8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b087      	sub	sp, #28
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a1b      	ldr	r3, [r3, #32]
 8005ab6:	f023 0201 	bic.w	r2, r3, #1
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6a1b      	ldr	r3, [r3, #32]
 8005ac2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	699b      	ldr	r3, [r3, #24]
 8005ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ad6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f023 0303 	bic.w	r3, r3, #3
 8005ade:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	68fa      	ldr	r2, [r7, #12]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	f023 0302 	bic.w	r3, r3, #2
 8005af0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	697a      	ldr	r2, [r7, #20]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4a20      	ldr	r2, [pc, #128]	; (8005b80 <TIM_OC1_SetConfig+0xd8>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d003      	beq.n	8005b0c <TIM_OC1_SetConfig+0x64>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	4a1f      	ldr	r2, [pc, #124]	; (8005b84 <TIM_OC1_SetConfig+0xdc>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d10c      	bne.n	8005b26 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	f023 0308 	bic.w	r3, r3, #8
 8005b12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	68db      	ldr	r3, [r3, #12]
 8005b18:	697a      	ldr	r2, [r7, #20]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	f023 0304 	bic.w	r3, r3, #4
 8005b24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4a15      	ldr	r2, [pc, #84]	; (8005b80 <TIM_OC1_SetConfig+0xd8>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d003      	beq.n	8005b36 <TIM_OC1_SetConfig+0x8e>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a14      	ldr	r2, [pc, #80]	; (8005b84 <TIM_OC1_SetConfig+0xdc>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d111      	bne.n	8005b5a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	695b      	ldr	r3, [r3, #20]
 8005b4a:	693a      	ldr	r2, [r7, #16]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	699b      	ldr	r3, [r3, #24]
 8005b54:	693a      	ldr	r2, [r7, #16]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	693a      	ldr	r2, [r7, #16]
 8005b5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	68fa      	ldr	r2, [r7, #12]
 8005b64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	685a      	ldr	r2, [r3, #4]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	697a      	ldr	r2, [r7, #20]
 8005b72:	621a      	str	r2, [r3, #32]
}
 8005b74:	bf00      	nop
 8005b76:	371c      	adds	r7, #28
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr
 8005b80:	40010000 	.word	0x40010000
 8005b84:	40010400 	.word	0x40010400

08005b88 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b087      	sub	sp, #28
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6a1b      	ldr	r3, [r3, #32]
 8005b96:	f023 0210 	bic.w	r2, r3, #16
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6a1b      	ldr	r3, [r3, #32]
 8005ba2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	699b      	ldr	r3, [r3, #24]
 8005bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	021b      	lsls	r3, r3, #8
 8005bc6:	68fa      	ldr	r2, [r7, #12]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	f023 0320 	bic.w	r3, r3, #32
 8005bd2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	011b      	lsls	r3, r3, #4
 8005bda:	697a      	ldr	r2, [r7, #20]
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4a22      	ldr	r2, [pc, #136]	; (8005c6c <TIM_OC2_SetConfig+0xe4>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d003      	beq.n	8005bf0 <TIM_OC2_SetConfig+0x68>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	4a21      	ldr	r2, [pc, #132]	; (8005c70 <TIM_OC2_SetConfig+0xe8>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d10d      	bne.n	8005c0c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bf6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	68db      	ldr	r3, [r3, #12]
 8005bfc:	011b      	lsls	r3, r3, #4
 8005bfe:	697a      	ldr	r2, [r7, #20]
 8005c00:	4313      	orrs	r3, r2
 8005c02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c0a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	4a17      	ldr	r2, [pc, #92]	; (8005c6c <TIM_OC2_SetConfig+0xe4>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d003      	beq.n	8005c1c <TIM_OC2_SetConfig+0x94>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4a16      	ldr	r2, [pc, #88]	; (8005c70 <TIM_OC2_SetConfig+0xe8>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d113      	bne.n	8005c44 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	695b      	ldr	r3, [r3, #20]
 8005c30:	009b      	lsls	r3, r3, #2
 8005c32:	693a      	ldr	r2, [r7, #16]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	699b      	ldr	r3, [r3, #24]
 8005c3c:	009b      	lsls	r3, r3, #2
 8005c3e:	693a      	ldr	r2, [r7, #16]
 8005c40:	4313      	orrs	r3, r2
 8005c42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	693a      	ldr	r2, [r7, #16]
 8005c48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	68fa      	ldr	r2, [r7, #12]
 8005c4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	685a      	ldr	r2, [r3, #4]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	697a      	ldr	r2, [r7, #20]
 8005c5c:	621a      	str	r2, [r3, #32]
}
 8005c5e:	bf00      	nop
 8005c60:	371c      	adds	r7, #28
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr
 8005c6a:	bf00      	nop
 8005c6c:	40010000 	.word	0x40010000
 8005c70:	40010400 	.word	0x40010400

08005c74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b087      	sub	sp, #28
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a1b      	ldr	r3, [r3, #32]
 8005c82:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a1b      	ldr	r3, [r3, #32]
 8005c8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	69db      	ldr	r3, [r3, #28]
 8005c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ca2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f023 0303 	bic.w	r3, r3, #3
 8005caa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	68fa      	ldr	r2, [r7, #12]
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005cbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	021b      	lsls	r3, r3, #8
 8005cc4:	697a      	ldr	r2, [r7, #20]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a21      	ldr	r2, [pc, #132]	; (8005d54 <TIM_OC3_SetConfig+0xe0>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d003      	beq.n	8005cda <TIM_OC3_SetConfig+0x66>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4a20      	ldr	r2, [pc, #128]	; (8005d58 <TIM_OC3_SetConfig+0xe4>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d10d      	bne.n	8005cf6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ce0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	021b      	lsls	r3, r3, #8
 8005ce8:	697a      	ldr	r2, [r7, #20]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005cf4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a16      	ldr	r2, [pc, #88]	; (8005d54 <TIM_OC3_SetConfig+0xe0>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d003      	beq.n	8005d06 <TIM_OC3_SetConfig+0x92>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4a15      	ldr	r2, [pc, #84]	; (8005d58 <TIM_OC3_SetConfig+0xe4>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d113      	bne.n	8005d2e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	695b      	ldr	r3, [r3, #20]
 8005d1a:	011b      	lsls	r3, r3, #4
 8005d1c:	693a      	ldr	r2, [r7, #16]
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	699b      	ldr	r3, [r3, #24]
 8005d26:	011b      	lsls	r3, r3, #4
 8005d28:	693a      	ldr	r2, [r7, #16]
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	693a      	ldr	r2, [r7, #16]
 8005d32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	68fa      	ldr	r2, [r7, #12]
 8005d38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	685a      	ldr	r2, [r3, #4]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	697a      	ldr	r2, [r7, #20]
 8005d46:	621a      	str	r2, [r3, #32]
}
 8005d48:	bf00      	nop
 8005d4a:	371c      	adds	r7, #28
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr
 8005d54:	40010000 	.word	0x40010000
 8005d58:	40010400 	.word	0x40010400

08005d5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b087      	sub	sp, #28
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6a1b      	ldr	r3, [r3, #32]
 8005d6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6a1b      	ldr	r3, [r3, #32]
 8005d76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	69db      	ldr	r3, [r3, #28]
 8005d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	021b      	lsls	r3, r3, #8
 8005d9a:	68fa      	ldr	r2, [r7, #12]
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005da6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	031b      	lsls	r3, r3, #12
 8005dae:	693a      	ldr	r2, [r7, #16]
 8005db0:	4313      	orrs	r3, r2
 8005db2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	4a12      	ldr	r2, [pc, #72]	; (8005e00 <TIM_OC4_SetConfig+0xa4>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d003      	beq.n	8005dc4 <TIM_OC4_SetConfig+0x68>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	4a11      	ldr	r2, [pc, #68]	; (8005e04 <TIM_OC4_SetConfig+0xa8>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d109      	bne.n	8005dd8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005dca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	695b      	ldr	r3, [r3, #20]
 8005dd0:	019b      	lsls	r3, r3, #6
 8005dd2:	697a      	ldr	r2, [r7, #20]
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	697a      	ldr	r2, [r7, #20]
 8005ddc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	68fa      	ldr	r2, [r7, #12]
 8005de2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	685a      	ldr	r2, [r3, #4]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	693a      	ldr	r2, [r7, #16]
 8005df0:	621a      	str	r2, [r3, #32]
}
 8005df2:	bf00      	nop
 8005df4:	371c      	adds	r7, #28
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr
 8005dfe:	bf00      	nop
 8005e00:	40010000 	.word	0x40010000
 8005e04:	40010400 	.word	0x40010400

08005e08 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b087      	sub	sp, #28
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	60b9      	str	r1, [r7, #8]
 8005e12:	607a      	str	r2, [r7, #4]
 8005e14:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	6a1b      	ldr	r3, [r3, #32]
 8005e1a:	f023 0201 	bic.w	r2, r3, #1
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	699b      	ldr	r3, [r3, #24]
 8005e26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	6a1b      	ldr	r3, [r3, #32]
 8005e2c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	4a28      	ldr	r2, [pc, #160]	; (8005ed4 <TIM_TI1_SetConfig+0xcc>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d01b      	beq.n	8005e6e <TIM_TI1_SetConfig+0x66>
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e3c:	d017      	beq.n	8005e6e <TIM_TI1_SetConfig+0x66>
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	4a25      	ldr	r2, [pc, #148]	; (8005ed8 <TIM_TI1_SetConfig+0xd0>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d013      	beq.n	8005e6e <TIM_TI1_SetConfig+0x66>
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	4a24      	ldr	r2, [pc, #144]	; (8005edc <TIM_TI1_SetConfig+0xd4>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d00f      	beq.n	8005e6e <TIM_TI1_SetConfig+0x66>
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	4a23      	ldr	r2, [pc, #140]	; (8005ee0 <TIM_TI1_SetConfig+0xd8>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d00b      	beq.n	8005e6e <TIM_TI1_SetConfig+0x66>
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	4a22      	ldr	r2, [pc, #136]	; (8005ee4 <TIM_TI1_SetConfig+0xdc>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d007      	beq.n	8005e6e <TIM_TI1_SetConfig+0x66>
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	4a21      	ldr	r2, [pc, #132]	; (8005ee8 <TIM_TI1_SetConfig+0xe0>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d003      	beq.n	8005e6e <TIM_TI1_SetConfig+0x66>
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	4a20      	ldr	r2, [pc, #128]	; (8005eec <TIM_TI1_SetConfig+0xe4>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d101      	bne.n	8005e72 <TIM_TI1_SetConfig+0x6a>
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e000      	b.n	8005e74 <TIM_TI1_SetConfig+0x6c>
 8005e72:	2300      	movs	r3, #0
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d008      	beq.n	8005e8a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	f023 0303 	bic.w	r3, r3, #3
 8005e7e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005e80:	697a      	ldr	r2, [r7, #20]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	617b      	str	r3, [r7, #20]
 8005e88:	e003      	b.n	8005e92 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	f043 0301 	orr.w	r3, r3, #1
 8005e90:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e98:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	011b      	lsls	r3, r3, #4
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	697a      	ldr	r2, [r7, #20]
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	f023 030a 	bic.w	r3, r3, #10
 8005eac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	f003 030a 	and.w	r3, r3, #10
 8005eb4:	693a      	ldr	r2, [r7, #16]
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	697a      	ldr	r2, [r7, #20]
 8005ebe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	693a      	ldr	r2, [r7, #16]
 8005ec4:	621a      	str	r2, [r3, #32]
}
 8005ec6:	bf00      	nop
 8005ec8:	371c      	adds	r7, #28
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr
 8005ed2:	bf00      	nop
 8005ed4:	40010000 	.word	0x40010000
 8005ed8:	40000400 	.word	0x40000400
 8005edc:	40000800 	.word	0x40000800
 8005ee0:	40000c00 	.word	0x40000c00
 8005ee4:	40010400 	.word	0x40010400
 8005ee8:	40014000 	.word	0x40014000
 8005eec:	40001800 	.word	0x40001800

08005ef0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b087      	sub	sp, #28
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	60f8      	str	r0, [r7, #12]
 8005ef8:	60b9      	str	r1, [r7, #8]
 8005efa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	6a1b      	ldr	r3, [r3, #32]
 8005f00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	6a1b      	ldr	r3, [r3, #32]
 8005f06:	f023 0201 	bic.w	r2, r3, #1
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	699b      	ldr	r3, [r3, #24]
 8005f12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	011b      	lsls	r3, r3, #4
 8005f20:	693a      	ldr	r2, [r7, #16]
 8005f22:	4313      	orrs	r3, r2
 8005f24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	f023 030a 	bic.w	r3, r3, #10
 8005f2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f2e:	697a      	ldr	r2, [r7, #20]
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	4313      	orrs	r3, r2
 8005f34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	693a      	ldr	r2, [r7, #16]
 8005f3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	697a      	ldr	r2, [r7, #20]
 8005f40:	621a      	str	r2, [r3, #32]
}
 8005f42:	bf00      	nop
 8005f44:	371c      	adds	r7, #28
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr

08005f4e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005f4e:	b480      	push	{r7}
 8005f50:	b087      	sub	sp, #28
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	60f8      	str	r0, [r7, #12]
 8005f56:	60b9      	str	r1, [r7, #8]
 8005f58:	607a      	str	r2, [r7, #4]
 8005f5a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	6a1b      	ldr	r3, [r3, #32]
 8005f60:	f023 0210 	bic.w	r2, r3, #16
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	699b      	ldr	r3, [r3, #24]
 8005f6c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	6a1b      	ldr	r3, [r3, #32]
 8005f72:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f7a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	021b      	lsls	r3, r3, #8
 8005f80:	697a      	ldr	r2, [r7, #20]
 8005f82:	4313      	orrs	r3, r2
 8005f84:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f8c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	031b      	lsls	r3, r3, #12
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	697a      	ldr	r2, [r7, #20]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005fa0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	011b      	lsls	r3, r3, #4
 8005fa6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005faa:	693a      	ldr	r2, [r7, #16]
 8005fac:	4313      	orrs	r3, r2
 8005fae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	697a      	ldr	r2, [r7, #20]
 8005fb4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	693a      	ldr	r2, [r7, #16]
 8005fba:	621a      	str	r2, [r3, #32]
}
 8005fbc:	bf00      	nop
 8005fbe:	371c      	adds	r7, #28
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr

08005fc8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b087      	sub	sp, #28
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	60f8      	str	r0, [r7, #12]
 8005fd0:	60b9      	str	r1, [r7, #8]
 8005fd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6a1b      	ldr	r3, [r3, #32]
 8005fd8:	f023 0210 	bic.w	r2, r3, #16
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	699b      	ldr	r3, [r3, #24]
 8005fe4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	6a1b      	ldr	r3, [r3, #32]
 8005fea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ff2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	031b      	lsls	r3, r3, #12
 8005ff8:	697a      	ldr	r2, [r7, #20]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006004:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	011b      	lsls	r3, r3, #4
 800600a:	693a      	ldr	r2, [r7, #16]
 800600c:	4313      	orrs	r3, r2
 800600e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	697a      	ldr	r2, [r7, #20]
 8006014:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	693a      	ldr	r2, [r7, #16]
 800601a:	621a      	str	r2, [r3, #32]
}
 800601c:	bf00      	nop
 800601e:	371c      	adds	r7, #28
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006028:	b480      	push	{r7}
 800602a:	b087      	sub	sp, #28
 800602c:	af00      	add	r7, sp, #0
 800602e:	60f8      	str	r0, [r7, #12]
 8006030:	60b9      	str	r1, [r7, #8]
 8006032:	607a      	str	r2, [r7, #4]
 8006034:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	6a1b      	ldr	r3, [r3, #32]
 800603a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	69db      	ldr	r3, [r3, #28]
 8006046:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	6a1b      	ldr	r3, [r3, #32]
 800604c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	f023 0303 	bic.w	r3, r3, #3
 8006054:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006056:	697a      	ldr	r2, [r7, #20]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	4313      	orrs	r3, r2
 800605c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006064:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	011b      	lsls	r3, r3, #4
 800606a:	b2db      	uxtb	r3, r3
 800606c:	697a      	ldr	r2, [r7, #20]
 800606e:	4313      	orrs	r3, r2
 8006070:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006078:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	021b      	lsls	r3, r3, #8
 800607e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006082:	693a      	ldr	r2, [r7, #16]
 8006084:	4313      	orrs	r3, r2
 8006086:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	697a      	ldr	r2, [r7, #20]
 800608c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	693a      	ldr	r2, [r7, #16]
 8006092:	621a      	str	r2, [r3, #32]
}
 8006094:	bf00      	nop
 8006096:	371c      	adds	r7, #28
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr

080060a0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b087      	sub	sp, #28
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	60f8      	str	r0, [r7, #12]
 80060a8:	60b9      	str	r1, [r7, #8]
 80060aa:	607a      	str	r2, [r7, #4]
 80060ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	6a1b      	ldr	r3, [r3, #32]
 80060b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	69db      	ldr	r3, [r3, #28]
 80060be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	6a1b      	ldr	r3, [r3, #32]
 80060c4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060cc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	021b      	lsls	r3, r3, #8
 80060d2:	697a      	ldr	r2, [r7, #20]
 80060d4:	4313      	orrs	r3, r2
 80060d6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060de:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	031b      	lsls	r3, r3, #12
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	697a      	ldr	r2, [r7, #20]
 80060e8:	4313      	orrs	r3, r2
 80060ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80060f2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	031b      	lsls	r3, r3, #12
 80060f8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80060fc:	693a      	ldr	r2, [r7, #16]
 80060fe:	4313      	orrs	r3, r2
 8006100:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	697a      	ldr	r2, [r7, #20]
 8006106:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	693a      	ldr	r2, [r7, #16]
 800610c:	621a      	str	r2, [r3, #32]
}
 800610e:	bf00      	nop
 8006110:	371c      	adds	r7, #28
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr

0800611a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800611a:	b480      	push	{r7}
 800611c:	b085      	sub	sp, #20
 800611e:	af00      	add	r7, sp, #0
 8006120:	6078      	str	r0, [r7, #4]
 8006122:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006130:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006132:	683a      	ldr	r2, [r7, #0]
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	4313      	orrs	r3, r2
 8006138:	f043 0307 	orr.w	r3, r3, #7
 800613c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	68fa      	ldr	r2, [r7, #12]
 8006142:	609a      	str	r2, [r3, #8]
}
 8006144:	bf00      	nop
 8006146:	3714      	adds	r7, #20
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr

08006150 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006150:	b480      	push	{r7}
 8006152:	b087      	sub	sp, #28
 8006154:	af00      	add	r7, sp, #0
 8006156:	60f8      	str	r0, [r7, #12]
 8006158:	60b9      	str	r1, [r7, #8]
 800615a:	607a      	str	r2, [r7, #4]
 800615c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800616a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	021a      	lsls	r2, r3, #8
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	431a      	orrs	r2, r3
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	4313      	orrs	r3, r2
 8006178:	697a      	ldr	r2, [r7, #20]
 800617a:	4313      	orrs	r3, r2
 800617c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	697a      	ldr	r2, [r7, #20]
 8006182:	609a      	str	r2, [r3, #8]
}
 8006184:	bf00      	nop
 8006186:	371c      	adds	r7, #28
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr

08006190 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006190:	b480      	push	{r7}
 8006192:	b087      	sub	sp, #28
 8006194:	af00      	add	r7, sp, #0
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	60b9      	str	r1, [r7, #8]
 800619a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	f003 031f 	and.w	r3, r3, #31
 80061a2:	2201      	movs	r2, #1
 80061a4:	fa02 f303 	lsl.w	r3, r2, r3
 80061a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	6a1a      	ldr	r2, [r3, #32]
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	43db      	mvns	r3, r3
 80061b2:	401a      	ands	r2, r3
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6a1a      	ldr	r2, [r3, #32]
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	f003 031f 	and.w	r3, r3, #31
 80061c2:	6879      	ldr	r1, [r7, #4]
 80061c4:	fa01 f303 	lsl.w	r3, r1, r3
 80061c8:	431a      	orrs	r2, r3
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	621a      	str	r2, [r3, #32]
}
 80061ce:	bf00      	nop
 80061d0:	371c      	adds	r7, #28
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr
	...

080061dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061dc:	b480      	push	{r7}
 80061de:	b085      	sub	sp, #20
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d101      	bne.n	80061f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061f0:	2302      	movs	r3, #2
 80061f2:	e05a      	b.n	80062aa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2202      	movs	r2, #2
 8006200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800621a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	68fa      	ldr	r2, [r7, #12]
 8006222:	4313      	orrs	r3, r2
 8006224:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	68fa      	ldr	r2, [r7, #12]
 800622c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a21      	ldr	r2, [pc, #132]	; (80062b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d022      	beq.n	800627e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006240:	d01d      	beq.n	800627e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a1d      	ldr	r2, [pc, #116]	; (80062bc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d018      	beq.n	800627e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a1b      	ldr	r2, [pc, #108]	; (80062c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d013      	beq.n	800627e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a1a      	ldr	r2, [pc, #104]	; (80062c4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d00e      	beq.n	800627e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a18      	ldr	r2, [pc, #96]	; (80062c8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d009      	beq.n	800627e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a17      	ldr	r2, [pc, #92]	; (80062cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d004      	beq.n	800627e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a15      	ldr	r2, [pc, #84]	; (80062d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d10c      	bne.n	8006298 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006284:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	68ba      	ldr	r2, [r7, #8]
 800628c:	4313      	orrs	r3, r2
 800628e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	68ba      	ldr	r2, [r7, #8]
 8006296:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2201      	movs	r2, #1
 800629c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2200      	movs	r2, #0
 80062a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062a8:	2300      	movs	r3, #0
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3714      	adds	r7, #20
 80062ae:	46bd      	mov	sp, r7
 80062b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b4:	4770      	bx	lr
 80062b6:	bf00      	nop
 80062b8:	40010000 	.word	0x40010000
 80062bc:	40000400 	.word	0x40000400
 80062c0:	40000800 	.word	0x40000800
 80062c4:	40000c00 	.word	0x40000c00
 80062c8:	40010400 	.word	0x40010400
 80062cc:	40014000 	.word	0x40014000
 80062d0:	40001800 	.word	0x40001800

080062d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b083      	sub	sp, #12
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80062dc:	bf00      	nop
 80062de:	370c      	adds	r7, #12
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr

080062e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b083      	sub	sp, #12
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80062f0:	bf00      	nop
 80062f2:	370c      	adds	r7, #12
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr

080062fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b082      	sub	sp, #8
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d101      	bne.n	800630e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	e03f      	b.n	800638e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006314:	b2db      	uxtb	r3, r3
 8006316:	2b00      	cmp	r3, #0
 8006318:	d106      	bne.n	8006328 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2200      	movs	r2, #0
 800631e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f7fc fcf0 	bl	8002d08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2224      	movs	r2, #36	; 0x24
 800632c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	68da      	ldr	r2, [r3, #12]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800633e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f000 fbe9 	bl	8006b18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	691a      	ldr	r2, [r3, #16]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006354:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	695a      	ldr	r2, [r3, #20]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006364:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	68da      	ldr	r2, [r3, #12]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006374:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2200      	movs	r2, #0
 800637a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2220      	movs	r2, #32
 8006380:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2220      	movs	r2, #32
 8006388:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800638c:	2300      	movs	r3, #0
}
 800638e:	4618      	mov	r0, r3
 8006390:	3708      	adds	r7, #8
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}

08006396 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006396:	b580      	push	{r7, lr}
 8006398:	b088      	sub	sp, #32
 800639a:	af02      	add	r7, sp, #8
 800639c:	60f8      	str	r0, [r7, #12]
 800639e:	60b9      	str	r1, [r7, #8]
 80063a0:	603b      	str	r3, [r7, #0]
 80063a2:	4613      	mov	r3, r2
 80063a4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80063a6:	2300      	movs	r3, #0
 80063a8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	2b20      	cmp	r3, #32
 80063b4:	f040 8090 	bne.w	80064d8 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d002      	beq.n	80063c4 <HAL_UART_Receive+0x2e>
 80063be:	88fb      	ldrh	r3, [r7, #6]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d101      	bne.n	80063c8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80063c4:	2301      	movs	r3, #1
 80063c6:	e088      	b.n	80064da <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	d101      	bne.n	80063d6 <HAL_UART_Receive+0x40>
 80063d2:	2302      	movs	r3, #2
 80063d4:	e081      	b.n	80064da <HAL_UART_Receive+0x144>
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2201      	movs	r2, #1
 80063da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2200      	movs	r2, #0
 80063e2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2222      	movs	r2, #34	; 0x22
 80063e8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80063ec:	f7fc fd6c 	bl	8002ec8 <HAL_GetTick>
 80063f0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	88fa      	ldrh	r2, [r7, #6]
 80063f6:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	88fa      	ldrh	r2, [r7, #6]
 80063fc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2200      	movs	r2, #0
 8006402:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006406:	e05c      	b.n	80064c2 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800640c:	b29b      	uxth	r3, r3
 800640e:	3b01      	subs	r3, #1
 8006410:	b29a      	uxth	r2, r3
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800641e:	d12b      	bne.n	8006478 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	9300      	str	r3, [sp, #0]
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	2200      	movs	r2, #0
 8006428:	2120      	movs	r1, #32
 800642a:	68f8      	ldr	r0, [r7, #12]
 800642c:	f000 fa08 	bl	8006840 <UART_WaitOnFlagUntilTimeout>
 8006430:	4603      	mov	r3, r0
 8006432:	2b00      	cmp	r3, #0
 8006434:	d001      	beq.n	800643a <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8006436:	2303      	movs	r3, #3
 8006438:	e04f      	b.n	80064da <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	691b      	ldr	r3, [r3, #16]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d10c      	bne.n	8006460 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	b29b      	uxth	r3, r3
 800644e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006452:	b29a      	uxth	r2, r3
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	3302      	adds	r3, #2
 800645c:	60bb      	str	r3, [r7, #8]
 800645e:	e030      	b.n	80064c2 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	b29b      	uxth	r3, r3
 8006468:	b2db      	uxtb	r3, r3
 800646a:	b29a      	uxth	r2, r3
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	3301      	adds	r3, #1
 8006474:	60bb      	str	r3, [r7, #8]
 8006476:	e024      	b.n	80064c2 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	9300      	str	r3, [sp, #0]
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	2200      	movs	r2, #0
 8006480:	2120      	movs	r1, #32
 8006482:	68f8      	ldr	r0, [r7, #12]
 8006484:	f000 f9dc 	bl	8006840 <UART_WaitOnFlagUntilTimeout>
 8006488:	4603      	mov	r3, r0
 800648a:	2b00      	cmp	r3, #0
 800648c:	d001      	beq.n	8006492 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 800648e:	2303      	movs	r3, #3
 8006490:	e023      	b.n	80064da <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	691b      	ldr	r3, [r3, #16]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d108      	bne.n	80064ac <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	6859      	ldr	r1, [r3, #4]
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	1c5a      	adds	r2, r3, #1
 80064a4:	60ba      	str	r2, [r7, #8]
 80064a6:	b2ca      	uxtb	r2, r1
 80064a8:	701a      	strb	r2, [r3, #0]
 80064aa:	e00a      	b.n	80064c2 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	b2da      	uxtb	r2, r3
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	1c59      	adds	r1, r3, #1
 80064b8:	60b9      	str	r1, [r7, #8]
 80064ba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80064be:	b2d2      	uxtb	r2, r2
 80064c0:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d19d      	bne.n	8006408 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2220      	movs	r2, #32
 80064d0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 80064d4:	2300      	movs	r3, #0
 80064d6:	e000      	b.n	80064da <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80064d8:	2302      	movs	r3, #2
  }
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3718      	adds	r7, #24
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}

080064e2 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064e2:	b480      	push	{r7}
 80064e4:	b085      	sub	sp, #20
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	60f8      	str	r0, [r7, #12]
 80064ea:	60b9      	str	r1, [r7, #8]
 80064ec:	4613      	mov	r3, r2
 80064ee:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	2b20      	cmp	r3, #32
 80064fa:	d130      	bne.n	800655e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d002      	beq.n	8006508 <HAL_UART_Transmit_IT+0x26>
 8006502:	88fb      	ldrh	r3, [r7, #6]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d101      	bne.n	800650c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	e029      	b.n	8006560 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006512:	2b01      	cmp	r3, #1
 8006514:	d101      	bne.n	800651a <HAL_UART_Transmit_IT+0x38>
 8006516:	2302      	movs	r3, #2
 8006518:	e022      	b.n	8006560 <HAL_UART_Transmit_IT+0x7e>
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2201      	movs	r2, #1
 800651e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	68ba      	ldr	r2, [r7, #8]
 8006526:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	88fa      	ldrh	r2, [r7, #6]
 800652c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	88fa      	ldrh	r2, [r7, #6]
 8006532:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2200      	movs	r2, #0
 8006538:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2221      	movs	r2, #33	; 0x21
 800653e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2200      	movs	r2, #0
 8006546:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	68da      	ldr	r2, [r3, #12]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006558:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800655a:	2300      	movs	r3, #0
 800655c:	e000      	b.n	8006560 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800655e:	2302      	movs	r3, #2
  }
}
 8006560:	4618      	mov	r0, r3
 8006562:	3714      	adds	r7, #20
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800656c:	b480      	push	{r7}
 800656e:	b085      	sub	sp, #20
 8006570:	af00      	add	r7, sp, #0
 8006572:	60f8      	str	r0, [r7, #12]
 8006574:	60b9      	str	r1, [r7, #8]
 8006576:	4613      	mov	r3, r2
 8006578:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006580:	b2db      	uxtb	r3, r3
 8006582:	2b20      	cmp	r3, #32
 8006584:	d140      	bne.n	8006608 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d002      	beq.n	8006592 <HAL_UART_Receive_IT+0x26>
 800658c:	88fb      	ldrh	r3, [r7, #6]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d101      	bne.n	8006596 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	e039      	b.n	800660a <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800659c:	2b01      	cmp	r3, #1
 800659e:	d101      	bne.n	80065a4 <HAL_UART_Receive_IT+0x38>
 80065a0:	2302      	movs	r3, #2
 80065a2:	e032      	b.n	800660a <HAL_UART_Receive_IT+0x9e>
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2201      	movs	r2, #1
 80065a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	68ba      	ldr	r2, [r7, #8]
 80065b0:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	88fa      	ldrh	r2, [r7, #6]
 80065b6:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	88fa      	ldrh	r2, [r7, #6]
 80065bc:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2200      	movs	r2, #0
 80065c2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2222      	movs	r2, #34	; 0x22
 80065c8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2200      	movs	r2, #0
 80065d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	68da      	ldr	r2, [r3, #12]
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80065e2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	695a      	ldr	r2, [r3, #20]
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f042 0201 	orr.w	r2, r2, #1
 80065f2:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	68da      	ldr	r2, [r3, #12]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f042 0220 	orr.w	r2, r2, #32
 8006602:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006604:	2300      	movs	r3, #0
 8006606:	e000      	b.n	800660a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8006608:	2302      	movs	r3, #2
  }
}
 800660a:	4618      	mov	r0, r3
 800660c:	3714      	adds	r7, #20
 800660e:	46bd      	mov	sp, r7
 8006610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006614:	4770      	bx	lr
	...

08006618 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b088      	sub	sp, #32
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	68db      	ldr	r3, [r3, #12]
 800662e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	695b      	ldr	r3, [r3, #20]
 8006636:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006638:	2300      	movs	r3, #0
 800663a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800663c:	2300      	movs	r3, #0
 800663e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006640:	69fb      	ldr	r3, [r7, #28]
 8006642:	f003 030f 	and.w	r3, r3, #15
 8006646:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d10d      	bne.n	800666a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800664e:	69fb      	ldr	r3, [r7, #28]
 8006650:	f003 0320 	and.w	r3, r3, #32
 8006654:	2b00      	cmp	r3, #0
 8006656:	d008      	beq.n	800666a <HAL_UART_IRQHandler+0x52>
 8006658:	69bb      	ldr	r3, [r7, #24]
 800665a:	f003 0320 	and.w	r3, r3, #32
 800665e:	2b00      	cmp	r3, #0
 8006660:	d003      	beq.n	800666a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f000 f9d6 	bl	8006a14 <UART_Receive_IT>
      return;
 8006668:	e0d1      	b.n	800680e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	2b00      	cmp	r3, #0
 800666e:	f000 80b0 	beq.w	80067d2 <HAL_UART_IRQHandler+0x1ba>
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	f003 0301 	and.w	r3, r3, #1
 8006678:	2b00      	cmp	r3, #0
 800667a:	d105      	bne.n	8006688 <HAL_UART_IRQHandler+0x70>
 800667c:	69bb      	ldr	r3, [r7, #24]
 800667e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006682:	2b00      	cmp	r3, #0
 8006684:	f000 80a5 	beq.w	80067d2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006688:	69fb      	ldr	r3, [r7, #28]
 800668a:	f003 0301 	and.w	r3, r3, #1
 800668e:	2b00      	cmp	r3, #0
 8006690:	d00a      	beq.n	80066a8 <HAL_UART_IRQHandler+0x90>
 8006692:	69bb      	ldr	r3, [r7, #24]
 8006694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006698:	2b00      	cmp	r3, #0
 800669a:	d005      	beq.n	80066a8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066a0:	f043 0201 	orr.w	r2, r3, #1
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80066a8:	69fb      	ldr	r3, [r7, #28]
 80066aa:	f003 0304 	and.w	r3, r3, #4
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d00a      	beq.n	80066c8 <HAL_UART_IRQHandler+0xb0>
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	f003 0301 	and.w	r3, r3, #1
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d005      	beq.n	80066c8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066c0:	f043 0202 	orr.w	r2, r3, #2
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80066c8:	69fb      	ldr	r3, [r7, #28]
 80066ca:	f003 0302 	and.w	r3, r3, #2
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d00a      	beq.n	80066e8 <HAL_UART_IRQHandler+0xd0>
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	f003 0301 	and.w	r3, r3, #1
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d005      	beq.n	80066e8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066e0:	f043 0204 	orr.w	r2, r3, #4
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80066e8:	69fb      	ldr	r3, [r7, #28]
 80066ea:	f003 0308 	and.w	r3, r3, #8
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d00f      	beq.n	8006712 <HAL_UART_IRQHandler+0xfa>
 80066f2:	69bb      	ldr	r3, [r7, #24]
 80066f4:	f003 0320 	and.w	r3, r3, #32
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d104      	bne.n	8006706 <HAL_UART_IRQHandler+0xee>
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	f003 0301 	and.w	r3, r3, #1
 8006702:	2b00      	cmp	r3, #0
 8006704:	d005      	beq.n	8006712 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800670a:	f043 0208 	orr.w	r2, r3, #8
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006716:	2b00      	cmp	r3, #0
 8006718:	d078      	beq.n	800680c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800671a:	69fb      	ldr	r3, [r7, #28]
 800671c:	f003 0320 	and.w	r3, r3, #32
 8006720:	2b00      	cmp	r3, #0
 8006722:	d007      	beq.n	8006734 <HAL_UART_IRQHandler+0x11c>
 8006724:	69bb      	ldr	r3, [r7, #24]
 8006726:	f003 0320 	and.w	r3, r3, #32
 800672a:	2b00      	cmp	r3, #0
 800672c:	d002      	beq.n	8006734 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f000 f970 	bl	8006a14 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	695b      	ldr	r3, [r3, #20]
 800673a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800673e:	2b40      	cmp	r3, #64	; 0x40
 8006740:	bf0c      	ite	eq
 8006742:	2301      	moveq	r3, #1
 8006744:	2300      	movne	r3, #0
 8006746:	b2db      	uxtb	r3, r3
 8006748:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800674e:	f003 0308 	and.w	r3, r3, #8
 8006752:	2b00      	cmp	r3, #0
 8006754:	d102      	bne.n	800675c <HAL_UART_IRQHandler+0x144>
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d031      	beq.n	80067c0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f000 f8b9 	bl	80068d4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	695b      	ldr	r3, [r3, #20]
 8006768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800676c:	2b40      	cmp	r3, #64	; 0x40
 800676e:	d123      	bne.n	80067b8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	695a      	ldr	r2, [r3, #20]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800677e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006784:	2b00      	cmp	r3, #0
 8006786:	d013      	beq.n	80067b0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800678c:	4a21      	ldr	r2, [pc, #132]	; (8006814 <HAL_UART_IRQHandler+0x1fc>)
 800678e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006794:	4618      	mov	r0, r3
 8006796:	f7fc fd45 	bl	8003224 <HAL_DMA_Abort_IT>
 800679a:	4603      	mov	r3, r0
 800679c:	2b00      	cmp	r3, #0
 800679e:	d016      	beq.n	80067ce <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067a6:	687a      	ldr	r2, [r7, #4]
 80067a8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80067aa:	4610      	mov	r0, r2
 80067ac:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067ae:	e00e      	b.n	80067ce <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f000 f83b 	bl	800682c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067b6:	e00a      	b.n	80067ce <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f000 f837 	bl	800682c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067be:	e006      	b.n	80067ce <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f000 f833 	bl	800682c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2200      	movs	r2, #0
 80067ca:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80067cc:	e01e      	b.n	800680c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067ce:	bf00      	nop
    return;
 80067d0:	e01c      	b.n	800680c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80067d2:	69fb      	ldr	r3, [r7, #28]
 80067d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d008      	beq.n	80067ee <HAL_UART_IRQHandler+0x1d6>
 80067dc:	69bb      	ldr	r3, [r7, #24]
 80067de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d003      	beq.n	80067ee <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 f8a6 	bl	8006938 <UART_Transmit_IT>
    return;
 80067ec:	e00f      	b.n	800680e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80067ee:	69fb      	ldr	r3, [r7, #28]
 80067f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d00a      	beq.n	800680e <HAL_UART_IRQHandler+0x1f6>
 80067f8:	69bb      	ldr	r3, [r7, #24]
 80067fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d005      	beq.n	800680e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 f8ee 	bl	80069e4 <UART_EndTransmit_IT>
    return;
 8006808:	bf00      	nop
 800680a:	e000      	b.n	800680e <HAL_UART_IRQHandler+0x1f6>
    return;
 800680c:	bf00      	nop
  }
}
 800680e:	3720      	adds	r7, #32
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}
 8006814:	08006911 	.word	0x08006911

08006818 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006818:	b480      	push	{r7}
 800681a:	b083      	sub	sp, #12
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006820:	bf00      	nop
 8006822:	370c      	adds	r7, #12
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr

0800682c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800682c:	b480      	push	{r7}
 800682e:	b083      	sub	sp, #12
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006834:	bf00      	nop
 8006836:	370c      	adds	r7, #12
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr

08006840 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b084      	sub	sp, #16
 8006844:	af00      	add	r7, sp, #0
 8006846:	60f8      	str	r0, [r7, #12]
 8006848:	60b9      	str	r1, [r7, #8]
 800684a:	603b      	str	r3, [r7, #0]
 800684c:	4613      	mov	r3, r2
 800684e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006850:	e02c      	b.n	80068ac <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006852:	69bb      	ldr	r3, [r7, #24]
 8006854:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006858:	d028      	beq.n	80068ac <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800685a:	69bb      	ldr	r3, [r7, #24]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d007      	beq.n	8006870 <UART_WaitOnFlagUntilTimeout+0x30>
 8006860:	f7fc fb32 	bl	8002ec8 <HAL_GetTick>
 8006864:	4602      	mov	r2, r0
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	1ad3      	subs	r3, r2, r3
 800686a:	69ba      	ldr	r2, [r7, #24]
 800686c:	429a      	cmp	r2, r3
 800686e:	d21d      	bcs.n	80068ac <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	68da      	ldr	r2, [r3, #12]
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800687e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	695a      	ldr	r2, [r3, #20]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f022 0201 	bic.w	r2, r2, #1
 800688e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2220      	movs	r2, #32
 8006894:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2220      	movs	r2, #32
 800689c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2200      	movs	r2, #0
 80068a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80068a8:	2303      	movs	r3, #3
 80068aa:	e00f      	b.n	80068cc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	4013      	ands	r3, r2
 80068b6:	68ba      	ldr	r2, [r7, #8]
 80068b8:	429a      	cmp	r2, r3
 80068ba:	bf0c      	ite	eq
 80068bc:	2301      	moveq	r3, #1
 80068be:	2300      	movne	r3, #0
 80068c0:	b2db      	uxtb	r3, r3
 80068c2:	461a      	mov	r2, r3
 80068c4:	79fb      	ldrb	r3, [r7, #7]
 80068c6:	429a      	cmp	r2, r3
 80068c8:	d0c3      	beq.n	8006852 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80068ca:	2300      	movs	r3, #0
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3710      	adds	r7, #16
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}

080068d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b083      	sub	sp, #12
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	68da      	ldr	r2, [r3, #12]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80068ea:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	695a      	ldr	r2, [r3, #20]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f022 0201 	bic.w	r2, r2, #1
 80068fa:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2220      	movs	r2, #32
 8006900:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006904:	bf00      	nop
 8006906:	370c      	adds	r7, #12
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr

08006910 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b084      	sub	sp, #16
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800691c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2200      	movs	r2, #0
 8006922:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2200      	movs	r2, #0
 8006928:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800692a:	68f8      	ldr	r0, [r7, #12]
 800692c:	f7ff ff7e 	bl	800682c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006930:	bf00      	nop
 8006932:	3710      	adds	r7, #16
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}

08006938 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006938:	b480      	push	{r7}
 800693a:	b085      	sub	sp, #20
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006946:	b2db      	uxtb	r3, r3
 8006948:	2b21      	cmp	r3, #33	; 0x21
 800694a:	d144      	bne.n	80069d6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006954:	d11a      	bne.n	800698c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6a1b      	ldr	r3, [r3, #32]
 800695a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	881b      	ldrh	r3, [r3, #0]
 8006960:	461a      	mov	r2, r3
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800696a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	691b      	ldr	r3, [r3, #16]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d105      	bne.n	8006980 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6a1b      	ldr	r3, [r3, #32]
 8006978:	1c9a      	adds	r2, r3, #2
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	621a      	str	r2, [r3, #32]
 800697e:	e00e      	b.n	800699e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6a1b      	ldr	r3, [r3, #32]
 8006984:	1c5a      	adds	r2, r3, #1
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	621a      	str	r2, [r3, #32]
 800698a:	e008      	b.n	800699e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6a1b      	ldr	r3, [r3, #32]
 8006990:	1c59      	adds	r1, r3, #1
 8006992:	687a      	ldr	r2, [r7, #4]
 8006994:	6211      	str	r1, [r2, #32]
 8006996:	781a      	ldrb	r2, [r3, #0]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	3b01      	subs	r3, #1
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	4619      	mov	r1, r3
 80069ac:	84d1      	strh	r1, [r2, #38]	; 0x26
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d10f      	bne.n	80069d2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	68da      	ldr	r2, [r3, #12]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80069c0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	68da      	ldr	r2, [r3, #12]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069d0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80069d2:	2300      	movs	r3, #0
 80069d4:	e000      	b.n	80069d8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80069d6:	2302      	movs	r3, #2
  }
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3714      	adds	r7, #20
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr

080069e4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b082      	sub	sp, #8
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	68da      	ldr	r2, [r3, #12]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069fa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2220      	movs	r2, #32
 8006a00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f7ff ff07 	bl	8006818 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006a0a:	2300      	movs	r3, #0
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3708      	adds	r7, #8
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}

08006a14 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b084      	sub	sp, #16
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006a22:	b2db      	uxtb	r3, r3
 8006a24:	2b22      	cmp	r3, #34	; 0x22
 8006a26:	d171      	bne.n	8006b0c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a30:	d123      	bne.n	8006a7a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a36:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	691b      	ldr	r3, [r3, #16]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d10e      	bne.n	8006a5e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a4c:	b29a      	uxth	r2, r3
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a56:	1c9a      	adds	r2, r3, #2
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	629a      	str	r2, [r3, #40]	; 0x28
 8006a5c:	e029      	b.n	8006ab2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	b2db      	uxtb	r3, r3
 8006a68:	b29a      	uxth	r2, r3
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a72:	1c5a      	adds	r2, r3, #1
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	629a      	str	r2, [r3, #40]	; 0x28
 8006a78:	e01b      	b.n	8006ab2 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	691b      	ldr	r3, [r3, #16]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d10a      	bne.n	8006a98 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	6858      	ldr	r0, [r3, #4]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a8c:	1c59      	adds	r1, r3, #1
 8006a8e:	687a      	ldr	r2, [r7, #4]
 8006a90:	6291      	str	r1, [r2, #40]	; 0x28
 8006a92:	b2c2      	uxtb	r2, r0
 8006a94:	701a      	strb	r2, [r3, #0]
 8006a96:	e00c      	b.n	8006ab2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	b2da      	uxtb	r2, r3
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aa4:	1c58      	adds	r0, r3, #1
 8006aa6:	6879      	ldr	r1, [r7, #4]
 8006aa8:	6288      	str	r0, [r1, #40]	; 0x28
 8006aaa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006aae:	b2d2      	uxtb	r2, r2
 8006ab0:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	3b01      	subs	r3, #1
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	687a      	ldr	r2, [r7, #4]
 8006abe:	4619      	mov	r1, r3
 8006ac0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d120      	bne.n	8006b08 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	68da      	ldr	r2, [r3, #12]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f022 0220 	bic.w	r2, r2, #32
 8006ad4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	68da      	ldr	r2, [r3, #12]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ae4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	695a      	ldr	r2, [r3, #20]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f022 0201 	bic.w	r2, r2, #1
 8006af4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2220      	movs	r2, #32
 8006afa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f7fa fc4c 	bl	800139c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006b04:	2300      	movs	r3, #0
 8006b06:	e002      	b.n	8006b0e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	e000      	b.n	8006b0e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006b0c:	2302      	movs	r3, #2
  }
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3710      	adds	r7, #16
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}
	...

08006b18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b1c:	b085      	sub	sp, #20
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	691b      	ldr	r3, [r3, #16]
 8006b28:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	68da      	ldr	r2, [r3, #12]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	430a      	orrs	r2, r1
 8006b36:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	689a      	ldr	r2, [r3, #8]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	691b      	ldr	r3, [r3, #16]
 8006b40:	431a      	orrs	r2, r3
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	695b      	ldr	r3, [r3, #20]
 8006b46:	431a      	orrs	r2, r3
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	69db      	ldr	r3, [r3, #28]
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	68db      	ldr	r3, [r3, #12]
 8006b56:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006b5a:	f023 030c 	bic.w	r3, r3, #12
 8006b5e:	687a      	ldr	r2, [r7, #4]
 8006b60:	6812      	ldr	r2, [r2, #0]
 8006b62:	68f9      	ldr	r1, [r7, #12]
 8006b64:	430b      	orrs	r3, r1
 8006b66:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	695b      	ldr	r3, [r3, #20]
 8006b6e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	699a      	ldr	r2, [r3, #24]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	430a      	orrs	r2, r1
 8006b7c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	69db      	ldr	r3, [r3, #28]
 8006b82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b86:	f040 818b 	bne.w	8006ea0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4ac1      	ldr	r2, [pc, #772]	; (8006e94 <UART_SetConfig+0x37c>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d005      	beq.n	8006ba0 <UART_SetConfig+0x88>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4abf      	ldr	r2, [pc, #764]	; (8006e98 <UART_SetConfig+0x380>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	f040 80bd 	bne.w	8006d1a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006ba0:	f7fe fa0a 	bl	8004fb8 <HAL_RCC_GetPCLK2Freq>
 8006ba4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	461d      	mov	r5, r3
 8006baa:	f04f 0600 	mov.w	r6, #0
 8006bae:	46a8      	mov	r8, r5
 8006bb0:	46b1      	mov	r9, r6
 8006bb2:	eb18 0308 	adds.w	r3, r8, r8
 8006bb6:	eb49 0409 	adc.w	r4, r9, r9
 8006bba:	4698      	mov	r8, r3
 8006bbc:	46a1      	mov	r9, r4
 8006bbe:	eb18 0805 	adds.w	r8, r8, r5
 8006bc2:	eb49 0906 	adc.w	r9, r9, r6
 8006bc6:	f04f 0100 	mov.w	r1, #0
 8006bca:	f04f 0200 	mov.w	r2, #0
 8006bce:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006bd2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006bd6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006bda:	4688      	mov	r8, r1
 8006bdc:	4691      	mov	r9, r2
 8006bde:	eb18 0005 	adds.w	r0, r8, r5
 8006be2:	eb49 0106 	adc.w	r1, r9, r6
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	461d      	mov	r5, r3
 8006bec:	f04f 0600 	mov.w	r6, #0
 8006bf0:	196b      	adds	r3, r5, r5
 8006bf2:	eb46 0406 	adc.w	r4, r6, r6
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	4623      	mov	r3, r4
 8006bfa:	f7f9 ff17 	bl	8000a2c <__aeabi_uldivmod>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	460c      	mov	r4, r1
 8006c02:	461a      	mov	r2, r3
 8006c04:	4ba5      	ldr	r3, [pc, #660]	; (8006e9c <UART_SetConfig+0x384>)
 8006c06:	fba3 2302 	umull	r2, r3, r3, r2
 8006c0a:	095b      	lsrs	r3, r3, #5
 8006c0c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	461d      	mov	r5, r3
 8006c14:	f04f 0600 	mov.w	r6, #0
 8006c18:	46a9      	mov	r9, r5
 8006c1a:	46b2      	mov	sl, r6
 8006c1c:	eb19 0309 	adds.w	r3, r9, r9
 8006c20:	eb4a 040a 	adc.w	r4, sl, sl
 8006c24:	4699      	mov	r9, r3
 8006c26:	46a2      	mov	sl, r4
 8006c28:	eb19 0905 	adds.w	r9, r9, r5
 8006c2c:	eb4a 0a06 	adc.w	sl, sl, r6
 8006c30:	f04f 0100 	mov.w	r1, #0
 8006c34:	f04f 0200 	mov.w	r2, #0
 8006c38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c3c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006c40:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006c44:	4689      	mov	r9, r1
 8006c46:	4692      	mov	sl, r2
 8006c48:	eb19 0005 	adds.w	r0, r9, r5
 8006c4c:	eb4a 0106 	adc.w	r1, sl, r6
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	461d      	mov	r5, r3
 8006c56:	f04f 0600 	mov.w	r6, #0
 8006c5a:	196b      	adds	r3, r5, r5
 8006c5c:	eb46 0406 	adc.w	r4, r6, r6
 8006c60:	461a      	mov	r2, r3
 8006c62:	4623      	mov	r3, r4
 8006c64:	f7f9 fee2 	bl	8000a2c <__aeabi_uldivmod>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	460c      	mov	r4, r1
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	4b8b      	ldr	r3, [pc, #556]	; (8006e9c <UART_SetConfig+0x384>)
 8006c70:	fba3 1302 	umull	r1, r3, r3, r2
 8006c74:	095b      	lsrs	r3, r3, #5
 8006c76:	2164      	movs	r1, #100	; 0x64
 8006c78:	fb01 f303 	mul.w	r3, r1, r3
 8006c7c:	1ad3      	subs	r3, r2, r3
 8006c7e:	00db      	lsls	r3, r3, #3
 8006c80:	3332      	adds	r3, #50	; 0x32
 8006c82:	4a86      	ldr	r2, [pc, #536]	; (8006e9c <UART_SetConfig+0x384>)
 8006c84:	fba2 2303 	umull	r2, r3, r2, r3
 8006c88:	095b      	lsrs	r3, r3, #5
 8006c8a:	005b      	lsls	r3, r3, #1
 8006c8c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006c90:	4498      	add	r8, r3
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	461d      	mov	r5, r3
 8006c96:	f04f 0600 	mov.w	r6, #0
 8006c9a:	46a9      	mov	r9, r5
 8006c9c:	46b2      	mov	sl, r6
 8006c9e:	eb19 0309 	adds.w	r3, r9, r9
 8006ca2:	eb4a 040a 	adc.w	r4, sl, sl
 8006ca6:	4699      	mov	r9, r3
 8006ca8:	46a2      	mov	sl, r4
 8006caa:	eb19 0905 	adds.w	r9, r9, r5
 8006cae:	eb4a 0a06 	adc.w	sl, sl, r6
 8006cb2:	f04f 0100 	mov.w	r1, #0
 8006cb6:	f04f 0200 	mov.w	r2, #0
 8006cba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006cbe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006cc2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006cc6:	4689      	mov	r9, r1
 8006cc8:	4692      	mov	sl, r2
 8006cca:	eb19 0005 	adds.w	r0, r9, r5
 8006cce:	eb4a 0106 	adc.w	r1, sl, r6
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	461d      	mov	r5, r3
 8006cd8:	f04f 0600 	mov.w	r6, #0
 8006cdc:	196b      	adds	r3, r5, r5
 8006cde:	eb46 0406 	adc.w	r4, r6, r6
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	4623      	mov	r3, r4
 8006ce6:	f7f9 fea1 	bl	8000a2c <__aeabi_uldivmod>
 8006cea:	4603      	mov	r3, r0
 8006cec:	460c      	mov	r4, r1
 8006cee:	461a      	mov	r2, r3
 8006cf0:	4b6a      	ldr	r3, [pc, #424]	; (8006e9c <UART_SetConfig+0x384>)
 8006cf2:	fba3 1302 	umull	r1, r3, r3, r2
 8006cf6:	095b      	lsrs	r3, r3, #5
 8006cf8:	2164      	movs	r1, #100	; 0x64
 8006cfa:	fb01 f303 	mul.w	r3, r1, r3
 8006cfe:	1ad3      	subs	r3, r2, r3
 8006d00:	00db      	lsls	r3, r3, #3
 8006d02:	3332      	adds	r3, #50	; 0x32
 8006d04:	4a65      	ldr	r2, [pc, #404]	; (8006e9c <UART_SetConfig+0x384>)
 8006d06:	fba2 2303 	umull	r2, r3, r2, r3
 8006d0a:	095b      	lsrs	r3, r3, #5
 8006d0c:	f003 0207 	and.w	r2, r3, #7
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4442      	add	r2, r8
 8006d16:	609a      	str	r2, [r3, #8]
 8006d18:	e26f      	b.n	80071fa <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006d1a:	f7fe f939 	bl	8004f90 <HAL_RCC_GetPCLK1Freq>
 8006d1e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	461d      	mov	r5, r3
 8006d24:	f04f 0600 	mov.w	r6, #0
 8006d28:	46a8      	mov	r8, r5
 8006d2a:	46b1      	mov	r9, r6
 8006d2c:	eb18 0308 	adds.w	r3, r8, r8
 8006d30:	eb49 0409 	adc.w	r4, r9, r9
 8006d34:	4698      	mov	r8, r3
 8006d36:	46a1      	mov	r9, r4
 8006d38:	eb18 0805 	adds.w	r8, r8, r5
 8006d3c:	eb49 0906 	adc.w	r9, r9, r6
 8006d40:	f04f 0100 	mov.w	r1, #0
 8006d44:	f04f 0200 	mov.w	r2, #0
 8006d48:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006d4c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006d50:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006d54:	4688      	mov	r8, r1
 8006d56:	4691      	mov	r9, r2
 8006d58:	eb18 0005 	adds.w	r0, r8, r5
 8006d5c:	eb49 0106 	adc.w	r1, r9, r6
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	461d      	mov	r5, r3
 8006d66:	f04f 0600 	mov.w	r6, #0
 8006d6a:	196b      	adds	r3, r5, r5
 8006d6c:	eb46 0406 	adc.w	r4, r6, r6
 8006d70:	461a      	mov	r2, r3
 8006d72:	4623      	mov	r3, r4
 8006d74:	f7f9 fe5a 	bl	8000a2c <__aeabi_uldivmod>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	460c      	mov	r4, r1
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	4b47      	ldr	r3, [pc, #284]	; (8006e9c <UART_SetConfig+0x384>)
 8006d80:	fba3 2302 	umull	r2, r3, r3, r2
 8006d84:	095b      	lsrs	r3, r3, #5
 8006d86:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	461d      	mov	r5, r3
 8006d8e:	f04f 0600 	mov.w	r6, #0
 8006d92:	46a9      	mov	r9, r5
 8006d94:	46b2      	mov	sl, r6
 8006d96:	eb19 0309 	adds.w	r3, r9, r9
 8006d9a:	eb4a 040a 	adc.w	r4, sl, sl
 8006d9e:	4699      	mov	r9, r3
 8006da0:	46a2      	mov	sl, r4
 8006da2:	eb19 0905 	adds.w	r9, r9, r5
 8006da6:	eb4a 0a06 	adc.w	sl, sl, r6
 8006daa:	f04f 0100 	mov.w	r1, #0
 8006dae:	f04f 0200 	mov.w	r2, #0
 8006db2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006db6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006dba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006dbe:	4689      	mov	r9, r1
 8006dc0:	4692      	mov	sl, r2
 8006dc2:	eb19 0005 	adds.w	r0, r9, r5
 8006dc6:	eb4a 0106 	adc.w	r1, sl, r6
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	461d      	mov	r5, r3
 8006dd0:	f04f 0600 	mov.w	r6, #0
 8006dd4:	196b      	adds	r3, r5, r5
 8006dd6:	eb46 0406 	adc.w	r4, r6, r6
 8006dda:	461a      	mov	r2, r3
 8006ddc:	4623      	mov	r3, r4
 8006dde:	f7f9 fe25 	bl	8000a2c <__aeabi_uldivmod>
 8006de2:	4603      	mov	r3, r0
 8006de4:	460c      	mov	r4, r1
 8006de6:	461a      	mov	r2, r3
 8006de8:	4b2c      	ldr	r3, [pc, #176]	; (8006e9c <UART_SetConfig+0x384>)
 8006dea:	fba3 1302 	umull	r1, r3, r3, r2
 8006dee:	095b      	lsrs	r3, r3, #5
 8006df0:	2164      	movs	r1, #100	; 0x64
 8006df2:	fb01 f303 	mul.w	r3, r1, r3
 8006df6:	1ad3      	subs	r3, r2, r3
 8006df8:	00db      	lsls	r3, r3, #3
 8006dfa:	3332      	adds	r3, #50	; 0x32
 8006dfc:	4a27      	ldr	r2, [pc, #156]	; (8006e9c <UART_SetConfig+0x384>)
 8006dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8006e02:	095b      	lsrs	r3, r3, #5
 8006e04:	005b      	lsls	r3, r3, #1
 8006e06:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006e0a:	4498      	add	r8, r3
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	461d      	mov	r5, r3
 8006e10:	f04f 0600 	mov.w	r6, #0
 8006e14:	46a9      	mov	r9, r5
 8006e16:	46b2      	mov	sl, r6
 8006e18:	eb19 0309 	adds.w	r3, r9, r9
 8006e1c:	eb4a 040a 	adc.w	r4, sl, sl
 8006e20:	4699      	mov	r9, r3
 8006e22:	46a2      	mov	sl, r4
 8006e24:	eb19 0905 	adds.w	r9, r9, r5
 8006e28:	eb4a 0a06 	adc.w	sl, sl, r6
 8006e2c:	f04f 0100 	mov.w	r1, #0
 8006e30:	f04f 0200 	mov.w	r2, #0
 8006e34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006e38:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006e3c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006e40:	4689      	mov	r9, r1
 8006e42:	4692      	mov	sl, r2
 8006e44:	eb19 0005 	adds.w	r0, r9, r5
 8006e48:	eb4a 0106 	adc.w	r1, sl, r6
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	461d      	mov	r5, r3
 8006e52:	f04f 0600 	mov.w	r6, #0
 8006e56:	196b      	adds	r3, r5, r5
 8006e58:	eb46 0406 	adc.w	r4, r6, r6
 8006e5c:	461a      	mov	r2, r3
 8006e5e:	4623      	mov	r3, r4
 8006e60:	f7f9 fde4 	bl	8000a2c <__aeabi_uldivmod>
 8006e64:	4603      	mov	r3, r0
 8006e66:	460c      	mov	r4, r1
 8006e68:	461a      	mov	r2, r3
 8006e6a:	4b0c      	ldr	r3, [pc, #48]	; (8006e9c <UART_SetConfig+0x384>)
 8006e6c:	fba3 1302 	umull	r1, r3, r3, r2
 8006e70:	095b      	lsrs	r3, r3, #5
 8006e72:	2164      	movs	r1, #100	; 0x64
 8006e74:	fb01 f303 	mul.w	r3, r1, r3
 8006e78:	1ad3      	subs	r3, r2, r3
 8006e7a:	00db      	lsls	r3, r3, #3
 8006e7c:	3332      	adds	r3, #50	; 0x32
 8006e7e:	4a07      	ldr	r2, [pc, #28]	; (8006e9c <UART_SetConfig+0x384>)
 8006e80:	fba2 2303 	umull	r2, r3, r2, r3
 8006e84:	095b      	lsrs	r3, r3, #5
 8006e86:	f003 0207 	and.w	r2, r3, #7
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4442      	add	r2, r8
 8006e90:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006e92:	e1b2      	b.n	80071fa <UART_SetConfig+0x6e2>
 8006e94:	40011000 	.word	0x40011000
 8006e98:	40011400 	.word	0x40011400
 8006e9c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4ad7      	ldr	r2, [pc, #860]	; (8007204 <UART_SetConfig+0x6ec>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d005      	beq.n	8006eb6 <UART_SetConfig+0x39e>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4ad6      	ldr	r2, [pc, #856]	; (8007208 <UART_SetConfig+0x6f0>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	f040 80d1 	bne.w	8007058 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006eb6:	f7fe f87f 	bl	8004fb8 <HAL_RCC_GetPCLK2Freq>
 8006eba:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	469a      	mov	sl, r3
 8006ec0:	f04f 0b00 	mov.w	fp, #0
 8006ec4:	46d0      	mov	r8, sl
 8006ec6:	46d9      	mov	r9, fp
 8006ec8:	eb18 0308 	adds.w	r3, r8, r8
 8006ecc:	eb49 0409 	adc.w	r4, r9, r9
 8006ed0:	4698      	mov	r8, r3
 8006ed2:	46a1      	mov	r9, r4
 8006ed4:	eb18 080a 	adds.w	r8, r8, sl
 8006ed8:	eb49 090b 	adc.w	r9, r9, fp
 8006edc:	f04f 0100 	mov.w	r1, #0
 8006ee0:	f04f 0200 	mov.w	r2, #0
 8006ee4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006ee8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006eec:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006ef0:	4688      	mov	r8, r1
 8006ef2:	4691      	mov	r9, r2
 8006ef4:	eb1a 0508 	adds.w	r5, sl, r8
 8006ef8:	eb4b 0609 	adc.w	r6, fp, r9
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	4619      	mov	r1, r3
 8006f02:	f04f 0200 	mov.w	r2, #0
 8006f06:	f04f 0300 	mov.w	r3, #0
 8006f0a:	f04f 0400 	mov.w	r4, #0
 8006f0e:	0094      	lsls	r4, r2, #2
 8006f10:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006f14:	008b      	lsls	r3, r1, #2
 8006f16:	461a      	mov	r2, r3
 8006f18:	4623      	mov	r3, r4
 8006f1a:	4628      	mov	r0, r5
 8006f1c:	4631      	mov	r1, r6
 8006f1e:	f7f9 fd85 	bl	8000a2c <__aeabi_uldivmod>
 8006f22:	4603      	mov	r3, r0
 8006f24:	460c      	mov	r4, r1
 8006f26:	461a      	mov	r2, r3
 8006f28:	4bb8      	ldr	r3, [pc, #736]	; (800720c <UART_SetConfig+0x6f4>)
 8006f2a:	fba3 2302 	umull	r2, r3, r3, r2
 8006f2e:	095b      	lsrs	r3, r3, #5
 8006f30:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	469b      	mov	fp, r3
 8006f38:	f04f 0c00 	mov.w	ip, #0
 8006f3c:	46d9      	mov	r9, fp
 8006f3e:	46e2      	mov	sl, ip
 8006f40:	eb19 0309 	adds.w	r3, r9, r9
 8006f44:	eb4a 040a 	adc.w	r4, sl, sl
 8006f48:	4699      	mov	r9, r3
 8006f4a:	46a2      	mov	sl, r4
 8006f4c:	eb19 090b 	adds.w	r9, r9, fp
 8006f50:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006f54:	f04f 0100 	mov.w	r1, #0
 8006f58:	f04f 0200 	mov.w	r2, #0
 8006f5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006f60:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006f64:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006f68:	4689      	mov	r9, r1
 8006f6a:	4692      	mov	sl, r2
 8006f6c:	eb1b 0509 	adds.w	r5, fp, r9
 8006f70:	eb4c 060a 	adc.w	r6, ip, sl
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	4619      	mov	r1, r3
 8006f7a:	f04f 0200 	mov.w	r2, #0
 8006f7e:	f04f 0300 	mov.w	r3, #0
 8006f82:	f04f 0400 	mov.w	r4, #0
 8006f86:	0094      	lsls	r4, r2, #2
 8006f88:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006f8c:	008b      	lsls	r3, r1, #2
 8006f8e:	461a      	mov	r2, r3
 8006f90:	4623      	mov	r3, r4
 8006f92:	4628      	mov	r0, r5
 8006f94:	4631      	mov	r1, r6
 8006f96:	f7f9 fd49 	bl	8000a2c <__aeabi_uldivmod>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	460c      	mov	r4, r1
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	4b9a      	ldr	r3, [pc, #616]	; (800720c <UART_SetConfig+0x6f4>)
 8006fa2:	fba3 1302 	umull	r1, r3, r3, r2
 8006fa6:	095b      	lsrs	r3, r3, #5
 8006fa8:	2164      	movs	r1, #100	; 0x64
 8006faa:	fb01 f303 	mul.w	r3, r1, r3
 8006fae:	1ad3      	subs	r3, r2, r3
 8006fb0:	011b      	lsls	r3, r3, #4
 8006fb2:	3332      	adds	r3, #50	; 0x32
 8006fb4:	4a95      	ldr	r2, [pc, #596]	; (800720c <UART_SetConfig+0x6f4>)
 8006fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8006fba:	095b      	lsrs	r3, r3, #5
 8006fbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006fc0:	4498      	add	r8, r3
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	469b      	mov	fp, r3
 8006fc6:	f04f 0c00 	mov.w	ip, #0
 8006fca:	46d9      	mov	r9, fp
 8006fcc:	46e2      	mov	sl, ip
 8006fce:	eb19 0309 	adds.w	r3, r9, r9
 8006fd2:	eb4a 040a 	adc.w	r4, sl, sl
 8006fd6:	4699      	mov	r9, r3
 8006fd8:	46a2      	mov	sl, r4
 8006fda:	eb19 090b 	adds.w	r9, r9, fp
 8006fde:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006fe2:	f04f 0100 	mov.w	r1, #0
 8006fe6:	f04f 0200 	mov.w	r2, #0
 8006fea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006fee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006ff2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006ff6:	4689      	mov	r9, r1
 8006ff8:	4692      	mov	sl, r2
 8006ffa:	eb1b 0509 	adds.w	r5, fp, r9
 8006ffe:	eb4c 060a 	adc.w	r6, ip, sl
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	4619      	mov	r1, r3
 8007008:	f04f 0200 	mov.w	r2, #0
 800700c:	f04f 0300 	mov.w	r3, #0
 8007010:	f04f 0400 	mov.w	r4, #0
 8007014:	0094      	lsls	r4, r2, #2
 8007016:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800701a:	008b      	lsls	r3, r1, #2
 800701c:	461a      	mov	r2, r3
 800701e:	4623      	mov	r3, r4
 8007020:	4628      	mov	r0, r5
 8007022:	4631      	mov	r1, r6
 8007024:	f7f9 fd02 	bl	8000a2c <__aeabi_uldivmod>
 8007028:	4603      	mov	r3, r0
 800702a:	460c      	mov	r4, r1
 800702c:	461a      	mov	r2, r3
 800702e:	4b77      	ldr	r3, [pc, #476]	; (800720c <UART_SetConfig+0x6f4>)
 8007030:	fba3 1302 	umull	r1, r3, r3, r2
 8007034:	095b      	lsrs	r3, r3, #5
 8007036:	2164      	movs	r1, #100	; 0x64
 8007038:	fb01 f303 	mul.w	r3, r1, r3
 800703c:	1ad3      	subs	r3, r2, r3
 800703e:	011b      	lsls	r3, r3, #4
 8007040:	3332      	adds	r3, #50	; 0x32
 8007042:	4a72      	ldr	r2, [pc, #456]	; (800720c <UART_SetConfig+0x6f4>)
 8007044:	fba2 2303 	umull	r2, r3, r2, r3
 8007048:	095b      	lsrs	r3, r3, #5
 800704a:	f003 020f 	and.w	r2, r3, #15
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4442      	add	r2, r8
 8007054:	609a      	str	r2, [r3, #8]
 8007056:	e0d0      	b.n	80071fa <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007058:	f7fd ff9a 	bl	8004f90 <HAL_RCC_GetPCLK1Freq>
 800705c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	469a      	mov	sl, r3
 8007062:	f04f 0b00 	mov.w	fp, #0
 8007066:	46d0      	mov	r8, sl
 8007068:	46d9      	mov	r9, fp
 800706a:	eb18 0308 	adds.w	r3, r8, r8
 800706e:	eb49 0409 	adc.w	r4, r9, r9
 8007072:	4698      	mov	r8, r3
 8007074:	46a1      	mov	r9, r4
 8007076:	eb18 080a 	adds.w	r8, r8, sl
 800707a:	eb49 090b 	adc.w	r9, r9, fp
 800707e:	f04f 0100 	mov.w	r1, #0
 8007082:	f04f 0200 	mov.w	r2, #0
 8007086:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800708a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800708e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007092:	4688      	mov	r8, r1
 8007094:	4691      	mov	r9, r2
 8007096:	eb1a 0508 	adds.w	r5, sl, r8
 800709a:	eb4b 0609 	adc.w	r6, fp, r9
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	4619      	mov	r1, r3
 80070a4:	f04f 0200 	mov.w	r2, #0
 80070a8:	f04f 0300 	mov.w	r3, #0
 80070ac:	f04f 0400 	mov.w	r4, #0
 80070b0:	0094      	lsls	r4, r2, #2
 80070b2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80070b6:	008b      	lsls	r3, r1, #2
 80070b8:	461a      	mov	r2, r3
 80070ba:	4623      	mov	r3, r4
 80070bc:	4628      	mov	r0, r5
 80070be:	4631      	mov	r1, r6
 80070c0:	f7f9 fcb4 	bl	8000a2c <__aeabi_uldivmod>
 80070c4:	4603      	mov	r3, r0
 80070c6:	460c      	mov	r4, r1
 80070c8:	461a      	mov	r2, r3
 80070ca:	4b50      	ldr	r3, [pc, #320]	; (800720c <UART_SetConfig+0x6f4>)
 80070cc:	fba3 2302 	umull	r2, r3, r3, r2
 80070d0:	095b      	lsrs	r3, r3, #5
 80070d2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	469b      	mov	fp, r3
 80070da:	f04f 0c00 	mov.w	ip, #0
 80070de:	46d9      	mov	r9, fp
 80070e0:	46e2      	mov	sl, ip
 80070e2:	eb19 0309 	adds.w	r3, r9, r9
 80070e6:	eb4a 040a 	adc.w	r4, sl, sl
 80070ea:	4699      	mov	r9, r3
 80070ec:	46a2      	mov	sl, r4
 80070ee:	eb19 090b 	adds.w	r9, r9, fp
 80070f2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80070f6:	f04f 0100 	mov.w	r1, #0
 80070fa:	f04f 0200 	mov.w	r2, #0
 80070fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007102:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007106:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800710a:	4689      	mov	r9, r1
 800710c:	4692      	mov	sl, r2
 800710e:	eb1b 0509 	adds.w	r5, fp, r9
 8007112:	eb4c 060a 	adc.w	r6, ip, sl
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	4619      	mov	r1, r3
 800711c:	f04f 0200 	mov.w	r2, #0
 8007120:	f04f 0300 	mov.w	r3, #0
 8007124:	f04f 0400 	mov.w	r4, #0
 8007128:	0094      	lsls	r4, r2, #2
 800712a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800712e:	008b      	lsls	r3, r1, #2
 8007130:	461a      	mov	r2, r3
 8007132:	4623      	mov	r3, r4
 8007134:	4628      	mov	r0, r5
 8007136:	4631      	mov	r1, r6
 8007138:	f7f9 fc78 	bl	8000a2c <__aeabi_uldivmod>
 800713c:	4603      	mov	r3, r0
 800713e:	460c      	mov	r4, r1
 8007140:	461a      	mov	r2, r3
 8007142:	4b32      	ldr	r3, [pc, #200]	; (800720c <UART_SetConfig+0x6f4>)
 8007144:	fba3 1302 	umull	r1, r3, r3, r2
 8007148:	095b      	lsrs	r3, r3, #5
 800714a:	2164      	movs	r1, #100	; 0x64
 800714c:	fb01 f303 	mul.w	r3, r1, r3
 8007150:	1ad3      	subs	r3, r2, r3
 8007152:	011b      	lsls	r3, r3, #4
 8007154:	3332      	adds	r3, #50	; 0x32
 8007156:	4a2d      	ldr	r2, [pc, #180]	; (800720c <UART_SetConfig+0x6f4>)
 8007158:	fba2 2303 	umull	r2, r3, r2, r3
 800715c:	095b      	lsrs	r3, r3, #5
 800715e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007162:	4498      	add	r8, r3
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	469b      	mov	fp, r3
 8007168:	f04f 0c00 	mov.w	ip, #0
 800716c:	46d9      	mov	r9, fp
 800716e:	46e2      	mov	sl, ip
 8007170:	eb19 0309 	adds.w	r3, r9, r9
 8007174:	eb4a 040a 	adc.w	r4, sl, sl
 8007178:	4699      	mov	r9, r3
 800717a:	46a2      	mov	sl, r4
 800717c:	eb19 090b 	adds.w	r9, r9, fp
 8007180:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007184:	f04f 0100 	mov.w	r1, #0
 8007188:	f04f 0200 	mov.w	r2, #0
 800718c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007190:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007194:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007198:	4689      	mov	r9, r1
 800719a:	4692      	mov	sl, r2
 800719c:	eb1b 0509 	adds.w	r5, fp, r9
 80071a0:	eb4c 060a 	adc.w	r6, ip, sl
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	4619      	mov	r1, r3
 80071aa:	f04f 0200 	mov.w	r2, #0
 80071ae:	f04f 0300 	mov.w	r3, #0
 80071b2:	f04f 0400 	mov.w	r4, #0
 80071b6:	0094      	lsls	r4, r2, #2
 80071b8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80071bc:	008b      	lsls	r3, r1, #2
 80071be:	461a      	mov	r2, r3
 80071c0:	4623      	mov	r3, r4
 80071c2:	4628      	mov	r0, r5
 80071c4:	4631      	mov	r1, r6
 80071c6:	f7f9 fc31 	bl	8000a2c <__aeabi_uldivmod>
 80071ca:	4603      	mov	r3, r0
 80071cc:	460c      	mov	r4, r1
 80071ce:	461a      	mov	r2, r3
 80071d0:	4b0e      	ldr	r3, [pc, #56]	; (800720c <UART_SetConfig+0x6f4>)
 80071d2:	fba3 1302 	umull	r1, r3, r3, r2
 80071d6:	095b      	lsrs	r3, r3, #5
 80071d8:	2164      	movs	r1, #100	; 0x64
 80071da:	fb01 f303 	mul.w	r3, r1, r3
 80071de:	1ad3      	subs	r3, r2, r3
 80071e0:	011b      	lsls	r3, r3, #4
 80071e2:	3332      	adds	r3, #50	; 0x32
 80071e4:	4a09      	ldr	r2, [pc, #36]	; (800720c <UART_SetConfig+0x6f4>)
 80071e6:	fba2 2303 	umull	r2, r3, r2, r3
 80071ea:	095b      	lsrs	r3, r3, #5
 80071ec:	f003 020f 	and.w	r2, r3, #15
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4442      	add	r2, r8
 80071f6:	609a      	str	r2, [r3, #8]
}
 80071f8:	e7ff      	b.n	80071fa <UART_SetConfig+0x6e2>
 80071fa:	bf00      	nop
 80071fc:	3714      	adds	r7, #20
 80071fe:	46bd      	mov	sp, r7
 8007200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007204:	40011000 	.word	0x40011000
 8007208:	40011400 	.word	0x40011400
 800720c:	51eb851f 	.word	0x51eb851f

08007210 <__libc_init_array>:
 8007210:	b570      	push	{r4, r5, r6, lr}
 8007212:	4e0d      	ldr	r6, [pc, #52]	; (8007248 <__libc_init_array+0x38>)
 8007214:	4c0d      	ldr	r4, [pc, #52]	; (800724c <__libc_init_array+0x3c>)
 8007216:	1ba4      	subs	r4, r4, r6
 8007218:	10a4      	asrs	r4, r4, #2
 800721a:	2500      	movs	r5, #0
 800721c:	42a5      	cmp	r5, r4
 800721e:	d109      	bne.n	8007234 <__libc_init_array+0x24>
 8007220:	4e0b      	ldr	r6, [pc, #44]	; (8007250 <__libc_init_array+0x40>)
 8007222:	4c0c      	ldr	r4, [pc, #48]	; (8007254 <__libc_init_array+0x44>)
 8007224:	f000 f9ac 	bl	8007580 <_init>
 8007228:	1ba4      	subs	r4, r4, r6
 800722a:	10a4      	asrs	r4, r4, #2
 800722c:	2500      	movs	r5, #0
 800722e:	42a5      	cmp	r5, r4
 8007230:	d105      	bne.n	800723e <__libc_init_array+0x2e>
 8007232:	bd70      	pop	{r4, r5, r6, pc}
 8007234:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007238:	4798      	blx	r3
 800723a:	3501      	adds	r5, #1
 800723c:	e7ee      	b.n	800721c <__libc_init_array+0xc>
 800723e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007242:	4798      	blx	r3
 8007244:	3501      	adds	r5, #1
 8007246:	e7f2      	b.n	800722e <__libc_init_array+0x1e>
 8007248:	080075d8 	.word	0x080075d8
 800724c:	080075d8 	.word	0x080075d8
 8007250:	080075d8 	.word	0x080075d8
 8007254:	080075dc 	.word	0x080075dc

08007258 <memset>:
 8007258:	4402      	add	r2, r0
 800725a:	4603      	mov	r3, r0
 800725c:	4293      	cmp	r3, r2
 800725e:	d100      	bne.n	8007262 <memset+0xa>
 8007260:	4770      	bx	lr
 8007262:	f803 1b01 	strb.w	r1, [r3], #1
 8007266:	e7f9      	b.n	800725c <memset+0x4>

08007268 <atan2f>:
 8007268:	f000 b800 	b.w	800726c <__ieee754_atan2f>

0800726c <__ieee754_atan2f>:
 800726c:	ee10 2a90 	vmov	r2, s1
 8007270:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8007274:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8007278:	b510      	push	{r4, lr}
 800727a:	eef0 7a40 	vmov.f32	s15, s0
 800727e:	dc06      	bgt.n	800728e <__ieee754_atan2f+0x22>
 8007280:	ee10 0a10 	vmov	r0, s0
 8007284:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8007288:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800728c:	dd04      	ble.n	8007298 <__ieee754_atan2f+0x2c>
 800728e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8007292:	eeb0 0a67 	vmov.f32	s0, s15
 8007296:	bd10      	pop	{r4, pc}
 8007298:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800729c:	d103      	bne.n	80072a6 <__ieee754_atan2f+0x3a>
 800729e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072a2:	f000 b891 	b.w	80073c8 <atanf>
 80072a6:	1794      	asrs	r4, r2, #30
 80072a8:	f004 0402 	and.w	r4, r4, #2
 80072ac:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80072b0:	b943      	cbnz	r3, 80072c4 <__ieee754_atan2f+0x58>
 80072b2:	2c02      	cmp	r4, #2
 80072b4:	d06e      	beq.n	8007394 <__ieee754_atan2f+0x128>
 80072b6:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800739c <__ieee754_atan2f+0x130>
 80072ba:	2c03      	cmp	r4, #3
 80072bc:	bf08      	it	eq
 80072be:	eef0 7a47 	vmoveq.f32	s15, s14
 80072c2:	e7e6      	b.n	8007292 <__ieee754_atan2f+0x26>
 80072c4:	b941      	cbnz	r1, 80072d8 <__ieee754_atan2f+0x6c>
 80072c6:	eddf 7a36 	vldr	s15, [pc, #216]	; 80073a0 <__ieee754_atan2f+0x134>
 80072ca:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80073a4 <__ieee754_atan2f+0x138>
 80072ce:	2800      	cmp	r0, #0
 80072d0:	bfb8      	it	lt
 80072d2:	eef0 7a47 	vmovlt.f32	s15, s14
 80072d6:	e7dc      	b.n	8007292 <__ieee754_atan2f+0x26>
 80072d8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80072dc:	d122      	bne.n	8007324 <__ieee754_atan2f+0xb8>
 80072de:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80072e2:	d112      	bne.n	800730a <__ieee754_atan2f+0x9e>
 80072e4:	2c02      	cmp	r4, #2
 80072e6:	d00a      	beq.n	80072fe <__ieee754_atan2f+0x92>
 80072e8:	2c03      	cmp	r4, #3
 80072ea:	d00b      	beq.n	8007304 <__ieee754_atan2f+0x98>
 80072ec:	eddf 7a2e 	vldr	s15, [pc, #184]	; 80073a8 <__ieee754_atan2f+0x13c>
 80072f0:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80073ac <__ieee754_atan2f+0x140>
 80072f4:	2c01      	cmp	r4, #1
 80072f6:	bf18      	it	ne
 80072f8:	eef0 7a47 	vmovne.f32	s15, s14
 80072fc:	e7c9      	b.n	8007292 <__ieee754_atan2f+0x26>
 80072fe:	eddf 7a2c 	vldr	s15, [pc, #176]	; 80073b0 <__ieee754_atan2f+0x144>
 8007302:	e7c6      	b.n	8007292 <__ieee754_atan2f+0x26>
 8007304:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80073b4 <__ieee754_atan2f+0x148>
 8007308:	e7c3      	b.n	8007292 <__ieee754_atan2f+0x26>
 800730a:	2c02      	cmp	r4, #2
 800730c:	d042      	beq.n	8007394 <__ieee754_atan2f+0x128>
 800730e:	2c03      	cmp	r4, #3
 8007310:	d005      	beq.n	800731e <__ieee754_atan2f+0xb2>
 8007312:	2c01      	cmp	r4, #1
 8007314:	eddf 7a28 	vldr	s15, [pc, #160]	; 80073b8 <__ieee754_atan2f+0x14c>
 8007318:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80073bc <__ieee754_atan2f+0x150>
 800731c:	e7eb      	b.n	80072f6 <__ieee754_atan2f+0x8a>
 800731e:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800739c <__ieee754_atan2f+0x130>
 8007322:	e7b6      	b.n	8007292 <__ieee754_atan2f+0x26>
 8007324:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007328:	d0cd      	beq.n	80072c6 <__ieee754_atan2f+0x5a>
 800732a:	1a5b      	subs	r3, r3, r1
 800732c:	15db      	asrs	r3, r3, #23
 800732e:	2b3c      	cmp	r3, #60	; 0x3c
 8007330:	dc1a      	bgt.n	8007368 <__ieee754_atan2f+0xfc>
 8007332:	2a00      	cmp	r2, #0
 8007334:	da01      	bge.n	800733a <__ieee754_atan2f+0xce>
 8007336:	333c      	adds	r3, #60	; 0x3c
 8007338:	db19      	blt.n	800736e <__ieee754_atan2f+0x102>
 800733a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800733e:	f000 f917 	bl	8007570 <fabsf>
 8007342:	f000 f841 	bl	80073c8 <atanf>
 8007346:	eef0 7a40 	vmov.f32	s15, s0
 800734a:	2c01      	cmp	r4, #1
 800734c:	d012      	beq.n	8007374 <__ieee754_atan2f+0x108>
 800734e:	2c02      	cmp	r4, #2
 8007350:	d017      	beq.n	8007382 <__ieee754_atan2f+0x116>
 8007352:	2c00      	cmp	r4, #0
 8007354:	d09d      	beq.n	8007292 <__ieee754_atan2f+0x26>
 8007356:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80073c0 <__ieee754_atan2f+0x154>
 800735a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800735e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80073c4 <__ieee754_atan2f+0x158>
 8007362:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007366:	e794      	b.n	8007292 <__ieee754_atan2f+0x26>
 8007368:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80073a0 <__ieee754_atan2f+0x134>
 800736c:	e7ed      	b.n	800734a <__ieee754_atan2f+0xde>
 800736e:	eddf 7a13 	vldr	s15, [pc, #76]	; 80073bc <__ieee754_atan2f+0x150>
 8007372:	e7ea      	b.n	800734a <__ieee754_atan2f+0xde>
 8007374:	ee17 3a90 	vmov	r3, s15
 8007378:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800737c:	ee07 3a90 	vmov	s15, r3
 8007380:	e787      	b.n	8007292 <__ieee754_atan2f+0x26>
 8007382:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80073c0 <__ieee754_atan2f+0x154>
 8007386:	ee77 7a87 	vadd.f32	s15, s15, s14
 800738a:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80073c4 <__ieee754_atan2f+0x158>
 800738e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007392:	e77e      	b.n	8007292 <__ieee754_atan2f+0x26>
 8007394:	eddf 7a0b 	vldr	s15, [pc, #44]	; 80073c4 <__ieee754_atan2f+0x158>
 8007398:	e77b      	b.n	8007292 <__ieee754_atan2f+0x26>
 800739a:	bf00      	nop
 800739c:	c0490fdb 	.word	0xc0490fdb
 80073a0:	3fc90fdb 	.word	0x3fc90fdb
 80073a4:	bfc90fdb 	.word	0xbfc90fdb
 80073a8:	bf490fdb 	.word	0xbf490fdb
 80073ac:	3f490fdb 	.word	0x3f490fdb
 80073b0:	4016cbe4 	.word	0x4016cbe4
 80073b4:	c016cbe4 	.word	0xc016cbe4
 80073b8:	80000000 	.word	0x80000000
 80073bc:	00000000 	.word	0x00000000
 80073c0:	33bbbd2e 	.word	0x33bbbd2e
 80073c4:	40490fdb 	.word	0x40490fdb

080073c8 <atanf>:
 80073c8:	b538      	push	{r3, r4, r5, lr}
 80073ca:	ee10 5a10 	vmov	r5, s0
 80073ce:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80073d2:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 80073d6:	eef0 7a40 	vmov.f32	s15, s0
 80073da:	db10      	blt.n	80073fe <atanf+0x36>
 80073dc:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80073e0:	dd04      	ble.n	80073ec <atanf+0x24>
 80073e2:	ee70 7a00 	vadd.f32	s15, s0, s0
 80073e6:	eeb0 0a67 	vmov.f32	s0, s15
 80073ea:	bd38      	pop	{r3, r4, r5, pc}
 80073ec:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8007524 <atanf+0x15c>
 80073f0:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8007528 <atanf+0x160>
 80073f4:	2d00      	cmp	r5, #0
 80073f6:	bfd8      	it	le
 80073f8:	eef0 7a47 	vmovle.f32	s15, s14
 80073fc:	e7f3      	b.n	80073e6 <atanf+0x1e>
 80073fe:	4b4b      	ldr	r3, [pc, #300]	; (800752c <atanf+0x164>)
 8007400:	429c      	cmp	r4, r3
 8007402:	dc10      	bgt.n	8007426 <atanf+0x5e>
 8007404:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8007408:	da0a      	bge.n	8007420 <atanf+0x58>
 800740a:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8007530 <atanf+0x168>
 800740e:	ee30 7a07 	vadd.f32	s14, s0, s14
 8007412:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007416:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800741a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800741e:	dce2      	bgt.n	80073e6 <atanf+0x1e>
 8007420:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007424:	e013      	b.n	800744e <atanf+0x86>
 8007426:	f000 f8a3 	bl	8007570 <fabsf>
 800742a:	4b42      	ldr	r3, [pc, #264]	; (8007534 <atanf+0x16c>)
 800742c:	429c      	cmp	r4, r3
 800742e:	dc4f      	bgt.n	80074d0 <atanf+0x108>
 8007430:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8007434:	429c      	cmp	r4, r3
 8007436:	dc41      	bgt.n	80074bc <atanf+0xf4>
 8007438:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800743c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8007440:	eea0 7a27 	vfma.f32	s14, s0, s15
 8007444:	2300      	movs	r3, #0
 8007446:	ee30 0a27 	vadd.f32	s0, s0, s15
 800744a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800744e:	1c5a      	adds	r2, r3, #1
 8007450:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8007454:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8007538 <atanf+0x170>
 8007458:	eddf 5a38 	vldr	s11, [pc, #224]	; 800753c <atanf+0x174>
 800745c:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8007540 <atanf+0x178>
 8007460:	ee66 6a06 	vmul.f32	s13, s12, s12
 8007464:	eee6 5a87 	vfma.f32	s11, s13, s14
 8007468:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8007544 <atanf+0x17c>
 800746c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8007470:	eddf 5a35 	vldr	s11, [pc, #212]	; 8007548 <atanf+0x180>
 8007474:	eee7 5a26 	vfma.f32	s11, s14, s13
 8007478:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800754c <atanf+0x184>
 800747c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8007480:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007550 <atanf+0x188>
 8007484:	eee7 5a26 	vfma.f32	s11, s14, s13
 8007488:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8007554 <atanf+0x18c>
 800748c:	eea6 5a87 	vfma.f32	s10, s13, s14
 8007490:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8007558 <atanf+0x190>
 8007494:	eea5 7a26 	vfma.f32	s14, s10, s13
 8007498:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800755c <atanf+0x194>
 800749c:	eea7 5a26 	vfma.f32	s10, s14, s13
 80074a0:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8007560 <atanf+0x198>
 80074a4:	eea5 7a26 	vfma.f32	s14, s10, s13
 80074a8:	ee27 7a26 	vmul.f32	s14, s14, s13
 80074ac:	eea5 7a86 	vfma.f32	s14, s11, s12
 80074b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80074b4:	d121      	bne.n	80074fa <atanf+0x132>
 80074b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80074ba:	e794      	b.n	80073e6 <atanf+0x1e>
 80074bc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80074c0:	ee30 7a67 	vsub.f32	s14, s0, s15
 80074c4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80074c8:	2301      	movs	r3, #1
 80074ca:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80074ce:	e7be      	b.n	800744e <atanf+0x86>
 80074d0:	4b24      	ldr	r3, [pc, #144]	; (8007564 <atanf+0x19c>)
 80074d2:	429c      	cmp	r4, r3
 80074d4:	dc0b      	bgt.n	80074ee <atanf+0x126>
 80074d6:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 80074da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80074de:	eea0 7a27 	vfma.f32	s14, s0, s15
 80074e2:	2302      	movs	r3, #2
 80074e4:	ee70 6a67 	vsub.f32	s13, s0, s15
 80074e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074ec:	e7af      	b.n	800744e <atanf+0x86>
 80074ee:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80074f2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80074f6:	2303      	movs	r3, #3
 80074f8:	e7a9      	b.n	800744e <atanf+0x86>
 80074fa:	4a1b      	ldr	r2, [pc, #108]	; (8007568 <atanf+0x1a0>)
 80074fc:	491b      	ldr	r1, [pc, #108]	; (800756c <atanf+0x1a4>)
 80074fe:	009b      	lsls	r3, r3, #2
 8007500:	441a      	add	r2, r3
 8007502:	440b      	add	r3, r1
 8007504:	edd3 6a00 	vldr	s13, [r3]
 8007508:	ee37 7a66 	vsub.f32	s14, s14, s13
 800750c:	2d00      	cmp	r5, #0
 800750e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007512:	ed92 7a00 	vldr	s14, [r2]
 8007516:	ee77 7a67 	vsub.f32	s15, s14, s15
 800751a:	bfb8      	it	lt
 800751c:	eef1 7a67 	vneglt.f32	s15, s15
 8007520:	e761      	b.n	80073e6 <atanf+0x1e>
 8007522:	bf00      	nop
 8007524:	bfc90fdb 	.word	0xbfc90fdb
 8007528:	3fc90fdb 	.word	0x3fc90fdb
 800752c:	3edfffff 	.word	0x3edfffff
 8007530:	7149f2ca 	.word	0x7149f2ca
 8007534:	3f97ffff 	.word	0x3f97ffff
 8007538:	3c8569d7 	.word	0x3c8569d7
 800753c:	3d4bda59 	.word	0x3d4bda59
 8007540:	bd6ef16b 	.word	0xbd6ef16b
 8007544:	3d886b35 	.word	0x3d886b35
 8007548:	3dba2e6e 	.word	0x3dba2e6e
 800754c:	3e124925 	.word	0x3e124925
 8007550:	3eaaaaab 	.word	0x3eaaaaab
 8007554:	bd15a221 	.word	0xbd15a221
 8007558:	bd9d8795 	.word	0xbd9d8795
 800755c:	bde38e38 	.word	0xbde38e38
 8007560:	be4ccccd 	.word	0xbe4ccccd
 8007564:	401bffff 	.word	0x401bffff
 8007568:	080075b0 	.word	0x080075b0
 800756c:	080075c0 	.word	0x080075c0

08007570 <fabsf>:
 8007570:	ee10 3a10 	vmov	r3, s0
 8007574:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007578:	ee00 3a10 	vmov	s0, r3
 800757c:	4770      	bx	lr
	...

08007580 <_init>:
 8007580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007582:	bf00      	nop
 8007584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007586:	bc08      	pop	{r3}
 8007588:	469e      	mov	lr, r3
 800758a:	4770      	bx	lr

0800758c <_fini>:
 800758c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800758e:	bf00      	nop
 8007590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007592:	bc08      	pop	{r3}
 8007594:	469e      	mov	lr, r3
 8007596:	4770      	bx	lr
