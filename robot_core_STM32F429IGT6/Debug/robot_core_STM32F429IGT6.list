
robot_core_STM32F429IGT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000544c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080055f8  080055f8  000155f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005610  08005610  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005610  08005610  00015610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005618  08005618  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005618  08005618  00015618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800561c  0800561c  0001561c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005620  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  20000010  08005630  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000254  08005630  00020254  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001127e  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000026be  00000000  00000000  000312be  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010b0  00000000  00000000  00033980  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f80  00000000  00000000  00034a30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000241c0  00000000  00000000  000359b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000dfca  00000000  00000000  00059b70  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d8e43  00000000  00000000  00067b3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014097d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004540  00000000  00000000  001409f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000010 	.word	0x20000010
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080055e0 	.word	0x080055e0

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000014 	.word	0x20000014
 80001e8:	080055e0 	.word	0x080055e0

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000200:	f000 b972 	b.w	80004e8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	4688      	mov	r8, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14b      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022a:	428a      	cmp	r2, r1
 800022c:	4615      	mov	r5, r2
 800022e:	d967      	bls.n	8000300 <__udivmoddi4+0xe4>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0720 	rsb	r7, r2, #32
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	fa20 f707 	lsr.w	r7, r0, r7
 8000242:	4095      	lsls	r5, r2
 8000244:	ea47 0803 	orr.w	r8, r7, r3
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbb8 f7fe 	udiv	r7, r8, lr
 8000254:	fa1f fc85 	uxth.w	ip, r5
 8000258:	fb0e 8817 	mls	r8, lr, r7, r8
 800025c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000260:	fb07 f10c 	mul.w	r1, r7, ip
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18eb      	adds	r3, r5, r3
 800026a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800026e:	f080 811b 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8118 	bls.w	80004a8 <__udivmoddi4+0x28c>
 8000278:	3f02      	subs	r7, #2
 800027a:	442b      	add	r3, r5
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0fe 	udiv	r0, r3, lr
 8000284:	fb0e 3310 	mls	r3, lr, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000290:	45a4      	cmp	ip, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	192c      	adds	r4, r5, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800029a:	f080 8107 	bcs.w	80004ac <__udivmoddi4+0x290>
 800029e:	45a4      	cmp	ip, r4
 80002a0:	f240 8104 	bls.w	80004ac <__udivmoddi4+0x290>
 80002a4:	3802      	subs	r0, #2
 80002a6:	442c      	add	r4, r5
 80002a8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002ac:	eba4 040c 	sub.w	r4, r4, ip
 80002b0:	2700      	movs	r7, #0
 80002b2:	b11e      	cbz	r6, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c6 4300 	strd	r4, r3, [r6]
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0xbe>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80eb 	beq.w	80004a2 <__udivmoddi4+0x286>
 80002cc:	2700      	movs	r7, #0
 80002ce:	e9c6 0100 	strd	r0, r1, [r6]
 80002d2:	4638      	mov	r0, r7
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f783 	clz	r7, r3
 80002de:	2f00      	cmp	r7, #0
 80002e0:	d147      	bne.n	8000372 <__udivmoddi4+0x156>
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xd0>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80fa 	bhi.w	80004e0 <__udivmoddi4+0x2c4>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb61 0303 	sbc.w	r3, r1, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	4698      	mov	r8, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d0e0      	beq.n	80002bc <__udivmoddi4+0xa0>
 80002fa:	e9c6 4800 	strd	r4, r8, [r6]
 80002fe:	e7dd      	b.n	80002bc <__udivmoddi4+0xa0>
 8000300:	b902      	cbnz	r2, 8000304 <__udivmoddi4+0xe8>
 8000302:	deff      	udf	#255	; 0xff
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	2a00      	cmp	r2, #0
 800030a:	f040 808f 	bne.w	800042c <__udivmoddi4+0x210>
 800030e:	1b49      	subs	r1, r1, r5
 8000310:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000314:	fa1f f885 	uxth.w	r8, r5
 8000318:	2701      	movs	r7, #1
 800031a:	fbb1 fcfe 	udiv	ip, r1, lr
 800031e:	0c23      	lsrs	r3, r4, #16
 8000320:	fb0e 111c 	mls	r1, lr, ip, r1
 8000324:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000328:	fb08 f10c 	mul.w	r1, r8, ip
 800032c:	4299      	cmp	r1, r3
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x124>
 8000330:	18eb      	adds	r3, r5, r3
 8000332:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4299      	cmp	r1, r3
 800033a:	f200 80cd 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 800033e:	4684      	mov	ip, r0
 8000340:	1a59      	subs	r1, r3, r1
 8000342:	b2a3      	uxth	r3, r4
 8000344:	fbb1 f0fe 	udiv	r0, r1, lr
 8000348:	fb0e 1410 	mls	r4, lr, r0, r1
 800034c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000350:	fb08 f800 	mul.w	r8, r8, r0
 8000354:	45a0      	cmp	r8, r4
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x14c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x14a>
 8000360:	45a0      	cmp	r8, r4
 8000362:	f200 80b6 	bhi.w	80004d2 <__udivmoddi4+0x2b6>
 8000366:	4618      	mov	r0, r3
 8000368:	eba4 0408 	sub.w	r4, r4, r8
 800036c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000370:	e79f      	b.n	80002b2 <__udivmoddi4+0x96>
 8000372:	f1c7 0c20 	rsb	ip, r7, #32
 8000376:	40bb      	lsls	r3, r7
 8000378:	fa22 fe0c 	lsr.w	lr, r2, ip
 800037c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000380:	fa01 f407 	lsl.w	r4, r1, r7
 8000384:	fa20 f50c 	lsr.w	r5, r0, ip
 8000388:	fa21 f30c 	lsr.w	r3, r1, ip
 800038c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000390:	4325      	orrs	r5, r4
 8000392:	fbb3 f9f8 	udiv	r9, r3, r8
 8000396:	0c2c      	lsrs	r4, r5, #16
 8000398:	fb08 3319 	mls	r3, r8, r9, r3
 800039c:	fa1f fa8e 	uxth.w	sl, lr
 80003a0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a4:	fb09 f40a 	mul.w	r4, r9, sl
 80003a8:	429c      	cmp	r4, r3
 80003aa:	fa02 f207 	lsl.w	r2, r2, r7
 80003ae:	fa00 f107 	lsl.w	r1, r0, r7
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1e 0303 	adds.w	r3, lr, r3
 80003b8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003bc:	f080 8087 	bcs.w	80004ce <__udivmoddi4+0x2b2>
 80003c0:	429c      	cmp	r4, r3
 80003c2:	f240 8084 	bls.w	80004ce <__udivmoddi4+0x2b2>
 80003c6:	f1a9 0902 	sub.w	r9, r9, #2
 80003ca:	4473      	add	r3, lr
 80003cc:	1b1b      	subs	r3, r3, r4
 80003ce:	b2ad      	uxth	r5, r5
 80003d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d4:	fb08 3310 	mls	r3, r8, r0, r3
 80003d8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003dc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e0:	45a2      	cmp	sl, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1e 0404 	adds.w	r4, lr, r4
 80003e8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003ec:	d26b      	bcs.n	80004c6 <__udivmoddi4+0x2aa>
 80003ee:	45a2      	cmp	sl, r4
 80003f0:	d969      	bls.n	80004c6 <__udivmoddi4+0x2aa>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4474      	add	r4, lr
 80003f6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fa:	fba0 8902 	umull	r8, r9, r0, r2
 80003fe:	eba4 040a 	sub.w	r4, r4, sl
 8000402:	454c      	cmp	r4, r9
 8000404:	46c2      	mov	sl, r8
 8000406:	464b      	mov	r3, r9
 8000408:	d354      	bcc.n	80004b4 <__udivmoddi4+0x298>
 800040a:	d051      	beq.n	80004b0 <__udivmoddi4+0x294>
 800040c:	2e00      	cmp	r6, #0
 800040e:	d069      	beq.n	80004e4 <__udivmoddi4+0x2c8>
 8000410:	ebb1 050a 	subs.w	r5, r1, sl
 8000414:	eb64 0403 	sbc.w	r4, r4, r3
 8000418:	fa04 fc0c 	lsl.w	ip, r4, ip
 800041c:	40fd      	lsrs	r5, r7
 800041e:	40fc      	lsrs	r4, r7
 8000420:	ea4c 0505 	orr.w	r5, ip, r5
 8000424:	e9c6 5400 	strd	r5, r4, [r6]
 8000428:	2700      	movs	r7, #0
 800042a:	e747      	b.n	80002bc <__udivmoddi4+0xa0>
 800042c:	f1c2 0320 	rsb	r3, r2, #32
 8000430:	fa20 f703 	lsr.w	r7, r0, r3
 8000434:	4095      	lsls	r5, r2
 8000436:	fa01 f002 	lsl.w	r0, r1, r2
 800043a:	fa21 f303 	lsr.w	r3, r1, r3
 800043e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000442:	4338      	orrs	r0, r7
 8000444:	0c01      	lsrs	r1, r0, #16
 8000446:	fbb3 f7fe 	udiv	r7, r3, lr
 800044a:	fa1f f885 	uxth.w	r8, r5
 800044e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000452:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000456:	fb07 f308 	mul.w	r3, r7, r8
 800045a:	428b      	cmp	r3, r1
 800045c:	fa04 f402 	lsl.w	r4, r4, r2
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x256>
 8000462:	1869      	adds	r1, r5, r1
 8000464:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000468:	d22f      	bcs.n	80004ca <__udivmoddi4+0x2ae>
 800046a:	428b      	cmp	r3, r1
 800046c:	d92d      	bls.n	80004ca <__udivmoddi4+0x2ae>
 800046e:	3f02      	subs	r7, #2
 8000470:	4429      	add	r1, r5
 8000472:	1acb      	subs	r3, r1, r3
 8000474:	b281      	uxth	r1, r0
 8000476:	fbb3 f0fe 	udiv	r0, r3, lr
 800047a:	fb0e 3310 	mls	r3, lr, r0, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb00 f308 	mul.w	r3, r0, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x27e>
 800048a:	1869      	adds	r1, r5, r1
 800048c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000490:	d217      	bcs.n	80004c2 <__udivmoddi4+0x2a6>
 8000492:	428b      	cmp	r3, r1
 8000494:	d915      	bls.n	80004c2 <__udivmoddi4+0x2a6>
 8000496:	3802      	subs	r0, #2
 8000498:	4429      	add	r1, r5
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a0:	e73b      	b.n	800031a <__udivmoddi4+0xfe>
 80004a2:	4637      	mov	r7, r6
 80004a4:	4630      	mov	r0, r6
 80004a6:	e709      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a8:	4607      	mov	r7, r0
 80004aa:	e6e7      	b.n	800027c <__udivmoddi4+0x60>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6fb      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004b0:	4541      	cmp	r1, r8
 80004b2:	d2ab      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004b8:	eb69 020e 	sbc.w	r2, r9, lr
 80004bc:	3801      	subs	r0, #1
 80004be:	4613      	mov	r3, r2
 80004c0:	e7a4      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c2:	4660      	mov	r0, ip
 80004c4:	e7e9      	b.n	800049a <__udivmoddi4+0x27e>
 80004c6:	4618      	mov	r0, r3
 80004c8:	e795      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004ca:	4667      	mov	r7, ip
 80004cc:	e7d1      	b.n	8000472 <__udivmoddi4+0x256>
 80004ce:	4681      	mov	r9, r0
 80004d0:	e77c      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d2:	3802      	subs	r0, #2
 80004d4:	442c      	add	r4, r5
 80004d6:	e747      	b.n	8000368 <__udivmoddi4+0x14c>
 80004d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004dc:	442b      	add	r3, r5
 80004de:	e72f      	b.n	8000340 <__udivmoddi4+0x124>
 80004e0:	4638      	mov	r0, r7
 80004e2:	e708      	b.n	80002f6 <__udivmoddi4+0xda>
 80004e4:	4637      	mov	r7, r6
 80004e6:	e6e9      	b.n	80002bc <__udivmoddi4+0xa0>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 80004f2:	463b      	mov	r3, r7
 80004f4:	2200      	movs	r2, #0
 80004f6:	601a      	str	r2, [r3, #0]
 80004f8:	605a      	str	r2, [r3, #4]

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80004fa:	4b14      	ldr	r3, [pc, #80]	; (800054c <MX_DAC_Init+0x60>)
 80004fc:	4a14      	ldr	r2, [pc, #80]	; (8000550 <MX_DAC_Init+0x64>)
 80004fe:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000500:	4812      	ldr	r0, [pc, #72]	; (800054c <MX_DAC_Init+0x60>)
 8000502:	f001 fe56 	bl	80021b2 <HAL_DAC_Init>
 8000506:	4603      	mov	r3, r0
 8000508:	2b00      	cmp	r3, #0
 800050a:	d001      	beq.n	8000510 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800050c:	f001 f83e 	bl	800158c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000510:	2300      	movs	r3, #0
 8000512:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000514:	2300      	movs	r3, #0
 8000516:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000518:	463b      	mov	r3, r7
 800051a:	2200      	movs	r2, #0
 800051c:	4619      	mov	r1, r3
 800051e:	480b      	ldr	r0, [pc, #44]	; (800054c <MX_DAC_Init+0x60>)
 8000520:	f001 fe69 	bl	80021f6 <HAL_DAC_ConfigChannel>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800052a:	f001 f82f 	bl	800158c <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800052e:	463b      	mov	r3, r7
 8000530:	2210      	movs	r2, #16
 8000532:	4619      	mov	r1, r3
 8000534:	4805      	ldr	r0, [pc, #20]	; (800054c <MX_DAC_Init+0x60>)
 8000536:	f001 fe5e 	bl	80021f6 <HAL_DAC_ConfigChannel>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d001      	beq.n	8000544 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8000540:	f001 f824 	bl	800158c <Error_Handler>
  }

}
 8000544:	bf00      	nop
 8000546:	3708      	adds	r7, #8
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	20000054 	.word	0x20000054
 8000550:	40007400 	.word	0x40007400

08000554 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b08a      	sub	sp, #40	; 0x28
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800055c:	f107 0314 	add.w	r3, r7, #20
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
 8000564:	605a      	str	r2, [r3, #4]
 8000566:	609a      	str	r2, [r3, #8]
 8000568:	60da      	str	r2, [r3, #12]
 800056a:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a17      	ldr	r2, [pc, #92]	; (80005d0 <HAL_DAC_MspInit+0x7c>)
 8000572:	4293      	cmp	r3, r2
 8000574:	d127      	bne.n	80005c6 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000576:	2300      	movs	r3, #0
 8000578:	613b      	str	r3, [r7, #16]
 800057a:	4b16      	ldr	r3, [pc, #88]	; (80005d4 <HAL_DAC_MspInit+0x80>)
 800057c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800057e:	4a15      	ldr	r2, [pc, #84]	; (80005d4 <HAL_DAC_MspInit+0x80>)
 8000580:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000584:	6413      	str	r3, [r2, #64]	; 0x40
 8000586:	4b13      	ldr	r3, [pc, #76]	; (80005d4 <HAL_DAC_MspInit+0x80>)
 8000588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800058a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800058e:	613b      	str	r3, [r7, #16]
 8000590:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000592:	2300      	movs	r3, #0
 8000594:	60fb      	str	r3, [r7, #12]
 8000596:	4b0f      	ldr	r3, [pc, #60]	; (80005d4 <HAL_DAC_MspInit+0x80>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059a:	4a0e      	ldr	r2, [pc, #56]	; (80005d4 <HAL_DAC_MspInit+0x80>)
 800059c:	f043 0301 	orr.w	r3, r3, #1
 80005a0:	6313      	str	r3, [r2, #48]	; 0x30
 80005a2:	4b0c      	ldr	r3, [pc, #48]	; (80005d4 <HAL_DAC_MspInit+0x80>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a6:	f003 0301 	and.w	r3, r3, #1
 80005aa:	60fb      	str	r3, [r7, #12]
 80005ac:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80005ae:	2330      	movs	r3, #48	; 0x30
 80005b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005b2:	2303      	movs	r3, #3
 80005b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b6:	2300      	movs	r3, #0
 80005b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ba:	f107 0314 	add.w	r3, r7, #20
 80005be:	4619      	mov	r1, r3
 80005c0:	4805      	ldr	r0, [pc, #20]	; (80005d8 <HAL_DAC_MspInit+0x84>)
 80005c2:	f001 fe87 	bl	80022d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 80005c6:	bf00      	nop
 80005c8:	3728      	adds	r7, #40	; 0x28
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40007400 	.word	0x40007400
 80005d4:	40023800 	.word	0x40023800
 80005d8:	40020000 	.word	0x40020000

080005dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b08c      	sub	sp, #48	; 0x30
 80005e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e2:	f107 031c 	add.w	r3, r7, #28
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
 80005ee:	60da      	str	r2, [r3, #12]
 80005f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005f2:	2300      	movs	r3, #0
 80005f4:	61bb      	str	r3, [r7, #24]
 80005f6:	4b45      	ldr	r3, [pc, #276]	; (800070c <MX_GPIO_Init+0x130>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	4a44      	ldr	r2, [pc, #272]	; (800070c <MX_GPIO_Init+0x130>)
 80005fc:	f043 0320 	orr.w	r3, r3, #32
 8000600:	6313      	str	r3, [r2, #48]	; 0x30
 8000602:	4b42      	ldr	r3, [pc, #264]	; (800070c <MX_GPIO_Init+0x130>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	f003 0320 	and.w	r3, r3, #32
 800060a:	61bb      	str	r3, [r7, #24]
 800060c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800060e:	2300      	movs	r3, #0
 8000610:	617b      	str	r3, [r7, #20]
 8000612:	4b3e      	ldr	r3, [pc, #248]	; (800070c <MX_GPIO_Init+0x130>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	4a3d      	ldr	r2, [pc, #244]	; (800070c <MX_GPIO_Init+0x130>)
 8000618:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800061c:	6313      	str	r3, [r2, #48]	; 0x30
 800061e:	4b3b      	ldr	r3, [pc, #236]	; (800070c <MX_GPIO_Init+0x130>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000626:	617b      	str	r3, [r7, #20]
 8000628:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062a:	2300      	movs	r3, #0
 800062c:	613b      	str	r3, [r7, #16]
 800062e:	4b37      	ldr	r3, [pc, #220]	; (800070c <MX_GPIO_Init+0x130>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	4a36      	ldr	r2, [pc, #216]	; (800070c <MX_GPIO_Init+0x130>)
 8000634:	f043 0301 	orr.w	r3, r3, #1
 8000638:	6313      	str	r3, [r2, #48]	; 0x30
 800063a:	4b34      	ldr	r3, [pc, #208]	; (800070c <MX_GPIO_Init+0x130>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	f003 0301 	and.w	r3, r3, #1
 8000642:	613b      	str	r3, [r7, #16]
 8000644:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000646:	2300      	movs	r3, #0
 8000648:	60fb      	str	r3, [r7, #12]
 800064a:	4b30      	ldr	r3, [pc, #192]	; (800070c <MX_GPIO_Init+0x130>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	4a2f      	ldr	r2, [pc, #188]	; (800070c <MX_GPIO_Init+0x130>)
 8000650:	f043 0308 	orr.w	r3, r3, #8
 8000654:	6313      	str	r3, [r2, #48]	; 0x30
 8000656:	4b2d      	ldr	r3, [pc, #180]	; (800070c <MX_GPIO_Init+0x130>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	f003 0308 	and.w	r3, r3, #8
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000662:	2300      	movs	r3, #0
 8000664:	60bb      	str	r3, [r7, #8]
 8000666:	4b29      	ldr	r3, [pc, #164]	; (800070c <MX_GPIO_Init+0x130>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	4a28      	ldr	r2, [pc, #160]	; (800070c <MX_GPIO_Init+0x130>)
 800066c:	f043 0304 	orr.w	r3, r3, #4
 8000670:	6313      	str	r3, [r2, #48]	; 0x30
 8000672:	4b26      	ldr	r3, [pc, #152]	; (800070c <MX_GPIO_Init+0x130>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	f003 0304 	and.w	r3, r3, #4
 800067a:	60bb      	str	r3, [r7, #8]
 800067c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800067e:	2300      	movs	r3, #0
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	4b22      	ldr	r3, [pc, #136]	; (800070c <MX_GPIO_Init+0x130>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	4a21      	ldr	r2, [pc, #132]	; (800070c <MX_GPIO_Init+0x130>)
 8000688:	f043 0302 	orr.w	r3, r3, #2
 800068c:	6313      	str	r3, [r2, #48]	; 0x30
 800068e:	4b1f      	ldr	r3, [pc, #124]	; (800070c <MX_GPIO_Init+0x130>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	f003 0302 	and.w	r3, r3, #2
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_in4_Pin|OUT_in3_Pin|OUT_in2_Pin, GPIO_PIN_RESET);
 800069a:	2200      	movs	r2, #0
 800069c:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 80006a0:	481b      	ldr	r0, [pc, #108]	; (8000710 <MX_GPIO_Init+0x134>)
 80006a2:	f001 ffd9 	bl	8002658 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, GPIO_PIN_RESET);
 80006a6:	2200      	movs	r2, #0
 80006a8:	2101      	movs	r1, #1
 80006aa:	481a      	ldr	r0, [pc, #104]	; (8000714 <MX_GPIO_Init+0x138>)
 80006ac:	f001 ffd4 	bl	8002658 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = OUT_in4_Pin|OUT_in3_Pin|OUT_in2_Pin;
 80006b0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80006b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b6:	2301      	movs	r3, #1
 80006b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ba:	2300      	movs	r3, #0
 80006bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006be:	2300      	movs	r3, #0
 80006c0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006c2:	f107 031c 	add.w	r3, r7, #28
 80006c6:	4619      	mov	r1, r3
 80006c8:	4811      	ldr	r0, [pc, #68]	; (8000710 <MX_GPIO_Init+0x134>)
 80006ca:	f001 fe03 	bl	80022d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OUT_in1_Pin;
 80006ce:	2301      	movs	r3, #1
 80006d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d2:	2301      	movs	r3, #1
 80006d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d6:	2300      	movs	r3, #0
 80006d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006da:	2300      	movs	r3, #0
 80006dc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OUT_in1_GPIO_Port, &GPIO_InitStruct);
 80006de:	f107 031c 	add.w	r3, r7, #28
 80006e2:	4619      	mov	r1, r3
 80006e4:	480b      	ldr	r0, [pc, #44]	; (8000714 <MX_GPIO_Init+0x138>)
 80006e6:	f001 fdf5 	bl	80022d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = IN_sensorL_Pin|IN_sensorR_Pin;
 80006ea:	230a      	movs	r3, #10
 80006ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ee:	2300      	movs	r3, #0
 80006f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006f2:	2301      	movs	r3, #1
 80006f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006f6:	f107 031c 	add.w	r3, r7, #28
 80006fa:	4619      	mov	r1, r3
 80006fc:	4805      	ldr	r0, [pc, #20]	; (8000714 <MX_GPIO_Init+0x138>)
 80006fe:	f001 fde9 	bl	80022d4 <HAL_GPIO_Init>

}
 8000702:	bf00      	nop
 8000704:	3730      	adds	r7, #48	; 0x30
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40023800 	.word	0x40023800
 8000710:	40020800 	.word	0x40020800
 8000714:	40020c00 	.word	0x40020c00

08000718 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 800071c:	4b1b      	ldr	r3, [pc, #108]	; (800078c <MX_I2C1_Init+0x74>)
 800071e:	4a1c      	ldr	r2, [pc, #112]	; (8000790 <MX_I2C1_Init+0x78>)
 8000720:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000722:	4b1a      	ldr	r3, [pc, #104]	; (800078c <MX_I2C1_Init+0x74>)
 8000724:	4a1b      	ldr	r2, [pc, #108]	; (8000794 <MX_I2C1_Init+0x7c>)
 8000726:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000728:	4b18      	ldr	r3, [pc, #96]	; (800078c <MX_I2C1_Init+0x74>)
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800072e:	4b17      	ldr	r3, [pc, #92]	; (800078c <MX_I2C1_Init+0x74>)
 8000730:	2200      	movs	r2, #0
 8000732:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000734:	4b15      	ldr	r3, [pc, #84]	; (800078c <MX_I2C1_Init+0x74>)
 8000736:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800073a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800073c:	4b13      	ldr	r3, [pc, #76]	; (800078c <MX_I2C1_Init+0x74>)
 800073e:	2200      	movs	r2, #0
 8000740:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000742:	4b12      	ldr	r3, [pc, #72]	; (800078c <MX_I2C1_Init+0x74>)
 8000744:	2200      	movs	r2, #0
 8000746:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000748:	4b10      	ldr	r3, [pc, #64]	; (800078c <MX_I2C1_Init+0x74>)
 800074a:	2200      	movs	r2, #0
 800074c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800074e:	4b0f      	ldr	r3, [pc, #60]	; (800078c <MX_I2C1_Init+0x74>)
 8000750:	2200      	movs	r2, #0
 8000752:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000754:	480d      	ldr	r0, [pc, #52]	; (800078c <MX_I2C1_Init+0x74>)
 8000756:	f001 ff99 	bl	800268c <HAL_I2C_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000760:	f000 ff14 	bl	800158c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000764:	2100      	movs	r1, #0
 8000766:	4809      	ldr	r0, [pc, #36]	; (800078c <MX_I2C1_Init+0x74>)
 8000768:	f002 f8c8 	bl	80028fc <HAL_I2CEx_ConfigAnalogFilter>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000772:	f000 ff0b 	bl	800158c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000776:	2100      	movs	r1, #0
 8000778:	4804      	ldr	r0, [pc, #16]	; (800078c <MX_I2C1_Init+0x74>)
 800077a:	f002 f8fb 	bl	8002974 <HAL_I2CEx_ConfigDigitalFilter>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000784:	f000 ff02 	bl	800158c <Error_Handler>
  }

}
 8000788:	bf00      	nop
 800078a:	bd80      	pop	{r7, pc}
 800078c:	20000068 	.word	0x20000068
 8000790:	40005400 	.word	0x40005400
 8000794:	00061a80 	.word	0x00061a80

08000798 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b08a      	sub	sp, #40	; 0x28
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a0:	f107 0314 	add.w	r3, r7, #20
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
 80007ae:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a19      	ldr	r2, [pc, #100]	; (800081c <HAL_I2C_MspInit+0x84>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d12b      	bne.n	8000812 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	613b      	str	r3, [r7, #16]
 80007be:	4b18      	ldr	r3, [pc, #96]	; (8000820 <HAL_I2C_MspInit+0x88>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a17      	ldr	r2, [pc, #92]	; (8000820 <HAL_I2C_MspInit+0x88>)
 80007c4:	f043 0302 	orr.w	r3, r3, #2
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b15      	ldr	r3, [pc, #84]	; (8000820 <HAL_I2C_MspInit+0x88>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0302 	and.w	r3, r3, #2
 80007d2:	613b      	str	r3, [r7, #16]
 80007d4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80007d6:	23c0      	movs	r3, #192	; 0xc0
 80007d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007da:	2312      	movs	r3, #18
 80007dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007de:	2301      	movs	r3, #1
 80007e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007e2:	2303      	movs	r3, #3
 80007e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007e6:	2304      	movs	r3, #4
 80007e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ea:	f107 0314 	add.w	r3, r7, #20
 80007ee:	4619      	mov	r1, r3
 80007f0:	480c      	ldr	r0, [pc, #48]	; (8000824 <HAL_I2C_MspInit+0x8c>)
 80007f2:	f001 fd6f 	bl	80022d4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	60fb      	str	r3, [r7, #12]
 80007fa:	4b09      	ldr	r3, [pc, #36]	; (8000820 <HAL_I2C_MspInit+0x88>)
 80007fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fe:	4a08      	ldr	r2, [pc, #32]	; (8000820 <HAL_I2C_MspInit+0x88>)
 8000800:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000804:	6413      	str	r3, [r2, #64]	; 0x40
 8000806:	4b06      	ldr	r3, [pc, #24]	; (8000820 <HAL_I2C_MspInit+0x88>)
 8000808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000812:	bf00      	nop
 8000814:	3728      	adds	r7, #40	; 0x28
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40005400 	.word	0x40005400
 8000820:	40023800 	.word	0x40023800
 8000824:	40020400 	.word	0x40020400

08000828 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800082c:	f001 fb3e 	bl	8001eac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000830:	f000 f8a4 	bl	800097c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000834:	f7ff fed2 	bl	80005dc <MX_GPIO_Init>
  MX_DAC_Init();
 8000838:	f7ff fe58 	bl	80004ec <MX_DAC_Init>
  MX_TIM2_Init();
 800083c:	f000 ff38 	bl	80016b0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000840:	f000 ff88 	bl	8001754 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000844:	f000 ffda 	bl	80017fc <MX_TIM4_Init>
  MX_TIM5_Init();
 8000848:	f001 f858 	bl	80018fc <MX_TIM5_Init>
  MX_UART7_Init();
 800084c:	f001 fa8a 	bl	8001d64 <MX_UART7_Init>
  MX_TIM7_Init();
 8000850:	f001 f8fe 	bl	8001a50 <MX_TIM7_Init>
  MX_I2C1_Init();
 8000854:	f7ff ff60 	bl	8000718 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim7); //desborda cada 10 ms.
 8000858:	483b      	ldr	r0, [pc, #236]	; (8000948 <main+0x120>)
 800085a:	f002 fdcc 	bl	80033f6 <HAL_TIM_Base_Start_IT>

  HAL_TIM_Base_Start(&htim2); //encoder.
 800085e:	483b      	ldr	r0, [pc, #236]	; (800094c <main+0x124>)
 8000860:	f002 fda5 	bl	80033ae <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3); //encoder.
 8000864:	483a      	ldr	r0, [pc, #232]	; (8000950 <main+0x128>)
 8000866:	f002 fda2 	bl	80033ae <HAL_TIM_Base_Start>

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1); //rueda izquierda.
 800086a:	2100      	movs	r1, #0
 800086c:	4839      	ldr	r0, [pc, #228]	; (8000954 <main+0x12c>)
 800086e:	f002 fe1b 	bl	80034a8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2); //rueda derecha.
 8000872:	2104      	movs	r1, #4
 8000874:	4837      	ldr	r0, [pc, #220]	; (8000954 <main+0x12c>)
 8000876:	f002 fe17 	bl	80034a8 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start(&htim5); //control del SR-04.
 800087a:	4837      	ldr	r0, [pc, #220]	; (8000958 <main+0x130>)
 800087c:	f002 fd97 	bl	80033ae <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1); //para el pulso del trigger.
 8000880:	2100      	movs	r1, #0
 8000882:	4835      	ldr	r0, [pc, #212]	; (8000958 <main+0x130>)
 8000884:	f002 fe10 	bl	80034a8 <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_3); //para capturar el eco (flanco ascendente).
 8000888:	2108      	movs	r1, #8
 800088a:	4833      	ldr	r0, [pc, #204]	; (8000958 <main+0x130>)
 800088c:	f002 fe80 	bl	8003590 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_4); //para capturar el eco (flanco descendente).
 8000890:	210c      	movs	r1, #12
 8000892:	4831      	ldr	r0, [pc, #196]	; (8000958 <main+0x130>)
 8000894:	f002 fe7c 	bl	8003590 <HAL_TIM_IC_Start_IT>

  HAL_UART_Receive(&huart7, rxUart, 4, 500);
 8000898:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800089c:	2204      	movs	r2, #4
 800089e:	492f      	ldr	r1, [pc, #188]	; (800095c <main+0x134>)
 80008a0:	482f      	ldr	r0, [pc, #188]	; (8000960 <main+0x138>)
 80008a2:	f003 ff34 	bl	800470e <HAL_UART_Receive>

  if (rxUart[0] == HOLA){
 80008a6:	4b2d      	ldr	r3, [pc, #180]	; (800095c <main+0x134>)
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	d11d      	bne.n	80008ea <main+0xc2>

	  if (!rxUart[3]){
 80008ae:	4b2b      	ldr	r3, [pc, #172]	; (800095c <main+0x134>)
 80008b0:	78db      	ldrb	r3, [r3, #3]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d10b      	bne.n	80008ce <main+0xa6>
		  txUart[0] = CMD_ERROR;
 80008b6:	4b2b      	ldr	r3, [pc, #172]	; (8000964 <main+0x13c>)
 80008b8:	2204      	movs	r2, #4
 80008ba:	701a      	strb	r2, [r3, #0]
		  txUart[3] = '\0';
 80008bc:	4b29      	ldr	r3, [pc, #164]	; (8000964 <main+0x13c>)
 80008be:	2200      	movs	r2, #0
 80008c0:	70da      	strb	r2, [r3, #3]
		  HAL_UART_Transmit_IT(&huart7, txUart, 4);
 80008c2:	2204      	movs	r2, #4
 80008c4:	4927      	ldr	r1, [pc, #156]	; (8000964 <main+0x13c>)
 80008c6:	4826      	ldr	r0, [pc, #152]	; (8000960 <main+0x138>)
 80008c8:	f003 ffc7 	bl	800485a <HAL_UART_Transmit_IT>
 80008cc:	e00d      	b.n	80008ea <main+0xc2>
	  } else {
		  esp01Presente = 1;
 80008ce:	4b26      	ldr	r3, [pc, #152]	; (8000968 <main+0x140>)
 80008d0:	2201      	movs	r2, #1
 80008d2:	701a      	strb	r2, [r3, #0]
		  txUart[0] = HOLA;
 80008d4:	4b23      	ldr	r3, [pc, #140]	; (8000964 <main+0x13c>)
 80008d6:	2201      	movs	r2, #1
 80008d8:	701a      	strb	r2, [r3, #0]
		  txUart[3] = '\0';
 80008da:	4b22      	ldr	r3, [pc, #136]	; (8000964 <main+0x13c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	70da      	strb	r2, [r3, #3]
		  HAL_UART_Transmit_IT(&huart7, txUart, 4);
 80008e0:	2204      	movs	r2, #4
 80008e2:	4920      	ldr	r1, [pc, #128]	; (8000964 <main+0x13c>)
 80008e4:	481e      	ldr	r0, [pc, #120]	; (8000960 <main+0x138>)
 80008e6:	f003 ffb8 	bl	800485a <HAL_UART_Transmit_IT>
	  }

  }

  HAL_UART_Receive_IT(&huart7, rxUart, 4);
 80008ea:	2204      	movs	r2, #4
 80008ec:	491b      	ldr	r1, [pc, #108]	; (800095c <main+0x134>)
 80008ee:	481c      	ldr	r0, [pc, #112]	; (8000960 <main+0x138>)
 80008f0:	f003 fff8 	bl	80048e4 <HAL_UART_Receive_IT>

  if (!esp01Presente) {
 80008f4:	4b1c      	ldr	r3, [pc, #112]	; (8000968 <main+0x140>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d103      	bne.n	8000904 <main+0xdc>
	  modoFuncionamiento = AUTOMATICO;
 80008fc:	4b1b      	ldr	r3, [pc, #108]	; (800096c <main+0x144>)
 80008fe:	2200      	movs	r2, #0
 8000900:	701a      	strb	r2, [r3, #0]
 8000902:	e002      	b.n	800090a <main+0xe2>
  }else{
	  modoFuncionamiento = MANUAL;
 8000904:	4b19      	ldr	r3, [pc, #100]	; (800096c <main+0x144>)
 8000906:	2201      	movs	r2, #1
 8000908:	701a      	strb	r2, [r3, #0]
		  }
	  }
	  last_button = read_button;
	  */

	  if (flag_cmd != 0){
 800090a:	4b19      	ldr	r3, [pc, #100]	; (8000970 <main+0x148>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d004      	beq.n	800091c <main+0xf4>
		  check_rxUart();
 8000912:	f000 fd17 	bl	8001344 <check_rxUart>
		  flag_cmd = 0;
 8000916:	4b16      	ldr	r3, [pc, #88]	; (8000970 <main+0x148>)
 8000918:	2200      	movs	r2, #0
 800091a:	701a      	strb	r2, [r3, #0]
	  }

	  SR_04();
 800091c:	f000 f8f8 	bl	8000b10 <SR_04>
	  sensores();
 8000920:	f000 f93c 	bl	8000b9c <sensores>
	  modo_funcionamiento();
 8000924:	f000 fe1c 	bl	8001560 <modo_funcionamiento>

	  if (desbordeTIM7 > 21){
 8000928:	4b12      	ldr	r3, [pc, #72]	; (8000974 <main+0x14c>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	2b15      	cmp	r3, #21
 800092e:	d9ec      	bls.n	800090a <main+0xe2>
		  flag_encoders = 1;
 8000930:	4b11      	ldr	r3, [pc, #68]	; (8000978 <main+0x150>)
 8000932:	2201      	movs	r2, #1
 8000934:	701a      	strb	r2, [r3, #0]
		  desbordeTIM7 = 0;
 8000936:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <main+0x14c>)
 8000938:	2200      	movs	r2, #0
 800093a:	701a      	strb	r2, [r3, #0]

		  TRIG_SR04;
 800093c:	4b06      	ldr	r3, [pc, #24]	; (8000958 <main+0x130>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	f06f 020a 	mvn.w	r2, #10
 8000944:	625a      	str	r2, [r3, #36]	; 0x24
	  if (flag_cmd != 0){
 8000946:	e7e0      	b.n	800090a <main+0xe2>
 8000948:	200001d0 	.word	0x200001d0
 800094c:	20000190 	.word	0x20000190
 8000950:	20000150 	.word	0x20000150
 8000954:	200000d0 	.word	0x200000d0
 8000958:	20000110 	.word	0x20000110
 800095c:	200000c0 	.word	0x200000c0
 8000960:	20000210 	.word	0x20000210
 8000964:	200000c4 	.word	0x200000c4
 8000968:	2000002d 	.word	0x2000002d
 800096c:	20000000 	.word	0x20000000
 8000970:	2000002c 	.word	0x2000002c
 8000974:	20000039 	.word	0x20000039
 8000978:	2000004e 	.word	0x2000004e

0800097c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b094      	sub	sp, #80	; 0x50
 8000980:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000982:	f107 0320 	add.w	r3, r7, #32
 8000986:	2230      	movs	r2, #48	; 0x30
 8000988:	2100      	movs	r1, #0
 800098a:	4618      	mov	r0, r3
 800098c:	f004 fe20 	bl	80055d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000990:	f107 030c 	add.w	r3, r7, #12
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
 800099c:	60da      	str	r2, [r3, #12]
 800099e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a0:	2300      	movs	r3, #0
 80009a2:	60bb      	str	r3, [r7, #8]
 80009a4:	4b2c      	ldr	r3, [pc, #176]	; (8000a58 <SystemClock_Config+0xdc>)
 80009a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a8:	4a2b      	ldr	r2, [pc, #172]	; (8000a58 <SystemClock_Config+0xdc>)
 80009aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ae:	6413      	str	r3, [r2, #64]	; 0x40
 80009b0:	4b29      	ldr	r3, [pc, #164]	; (8000a58 <SystemClock_Config+0xdc>)
 80009b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009b8:	60bb      	str	r3, [r7, #8]
 80009ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009bc:	2300      	movs	r3, #0
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	4b26      	ldr	r3, [pc, #152]	; (8000a5c <SystemClock_Config+0xe0>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a25      	ldr	r2, [pc, #148]	; (8000a5c <SystemClock_Config+0xe0>)
 80009c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009ca:	6013      	str	r3, [r2, #0]
 80009cc:	4b23      	ldr	r3, [pc, #140]	; (8000a5c <SystemClock_Config+0xe0>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009d4:	607b      	str	r3, [r7, #4]
 80009d6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80009d8:	2309      	movs	r3, #9
 80009da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80009e2:	2301      	movs	r3, #1
 80009e4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009e6:	2302      	movs	r3, #2
 80009e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009f0:	2304      	movs	r3, #4
 80009f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80009f4:	23b4      	movs	r3, #180	; 0xb4
 80009f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009f8:	2302      	movs	r3, #2
 80009fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009fc:	2304      	movs	r3, #4
 80009fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a00:	f107 0320 	add.w	r3, r7, #32
 8000a04:	4618      	mov	r0, r3
 8000a06:	f002 f845 	bl	8002a94 <HAL_RCC_OscConfig>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000a10:	f000 fdbc 	bl	800158c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a14:	f001 ffee 	bl	80029f4 <HAL_PWREx_EnableOverDrive>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000a1e:	f000 fdb5 	bl	800158c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a22:	230f      	movs	r3, #15
 8000a24:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a26:	2302      	movs	r3, #2
 8000a28:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a2e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a32:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a38:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a3a:	f107 030c 	add.w	r3, r7, #12
 8000a3e:	2105      	movs	r1, #5
 8000a40:	4618      	mov	r0, r3
 8000a42:	f002 fa97 	bl	8002f74 <HAL_RCC_ClockConfig>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000a4c:	f000 fd9e 	bl	800158c <Error_Handler>
  }
}
 8000a50:	bf00      	nop
 8000a52:	3750      	adds	r7, #80	; 0x50
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	40023800 	.word	0x40023800
 8000a5c:	40007000 	.word	0x40007000

08000a60 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
	if (htim->Instance==TIM7){
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a07      	ldr	r2, [pc, #28]	; (8000a8c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d105      	bne.n	8000a7e <HAL_TIM_PeriodElapsedCallback+0x1e>
		desbordeTIM7++;
 8000a72:	4b07      	ldr	r3, [pc, #28]	; (8000a90 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	3301      	adds	r3, #1
 8000a78:	b2da      	uxtb	r2, r3
 8000a7a:	4b05      	ldr	r3, [pc, #20]	; (8000a90 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000a7c:	701a      	strb	r2, [r3, #0]
	}
}
 8000a7e:	bf00      	nop
 8000a80:	370c      	adds	r7, #12
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	40001400 	.word	0x40001400
 8000a90:	20000039 	.word	0x20000039

08000a94 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3){
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	7f1b      	ldrb	r3, [r3, #28]
 8000aa0:	2b04      	cmp	r3, #4
 8000aa2:	d10a      	bne.n	8000aba <HAL_TIM_IC_CaptureCallback+0x26>
		ic1 = htim->Instance->CCR3;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000aaa:	4a0e      	ldr	r2, [pc, #56]	; (8000ae4 <HAL_TIM_IC_CaptureCallback+0x50>)
 8000aac:	6013      	str	r3, [r2, #0]
		flancoEco++;
 8000aae:	4b0e      	ldr	r3, [pc, #56]	; (8000ae8 <HAL_TIM_IC_CaptureCallback+0x54>)
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	b2da      	uxtb	r2, r3
 8000ab6:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <HAL_TIM_IC_CaptureCallback+0x54>)
 8000ab8:	701a      	strb	r2, [r3, #0]
	}

	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4){
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	7f1b      	ldrb	r3, [r3, #28]
 8000abe:	2b08      	cmp	r3, #8
 8000ac0:	d10a      	bne.n	8000ad8 <HAL_TIM_IC_CaptureCallback+0x44>
		ic2 = htim->Instance->CCR4;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac8:	4a08      	ldr	r2, [pc, #32]	; (8000aec <HAL_TIM_IC_CaptureCallback+0x58>)
 8000aca:	6013      	str	r3, [r2, #0]
		flancoEco++;
 8000acc:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <HAL_TIM_IC_CaptureCallback+0x54>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	b2da      	uxtb	r2, r3
 8000ad4:	4b04      	ldr	r3, [pc, #16]	; (8000ae8 <HAL_TIM_IC_CaptureCallback+0x54>)
 8000ad6:	701a      	strb	r2, [r3, #0]
	}
}
 8000ad8:	bf00      	nop
 8000ada:	370c      	adds	r7, #12
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr
 8000ae4:	2000003c 	.word	0x2000003c
 8000ae8:	20000044 	.word	0x20000044
 8000aec:	20000040 	.word	0x20000040

08000af0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
	flag_cmd = 1;
 8000af8:	4b04      	ldr	r3, [pc, #16]	; (8000b0c <HAL_UART_RxCpltCallback+0x1c>)
 8000afa:	2201      	movs	r2, #1
 8000afc:	701a      	strb	r2, [r3, #0]
}
 8000afe:	bf00      	nop
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	2000002c 	.word	0x2000002c

08000b10 <SR_04>:


void SR_04 (void){
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0

	switch (flancoEco){
 8000b14:	4b1b      	ldr	r3, [pc, #108]	; (8000b84 <SR_04+0x74>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	db29      	blt.n	8000b70 <SR_04+0x60>
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	dd2c      	ble.n	8000b7a <SR_04+0x6a>
 8000b20:	2b02      	cmp	r3, #2
 8000b22:	d125      	bne.n	8000b70 <SR_04+0x60>
		case 0:
		case 1:
			return;
		case 2:
			cuentaPulsos = (int32_t)(ic2 - ic1);
 8000b24:	4b18      	ldr	r3, [pc, #96]	; (8000b88 <SR_04+0x78>)
 8000b26:	681a      	ldr	r2, [r3, #0]
 8000b28:	4b18      	ldr	r3, [pc, #96]	; (8000b8c <SR_04+0x7c>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	1ad3      	subs	r3, r2, r3
 8000b2e:	461a      	mov	r2, r3
 8000b30:	4b17      	ldr	r3, [pc, #92]	; (8000b90 <SR_04+0x80>)
 8000b32:	601a      	str	r2, [r3, #0]
			if (cuentaPulsos < 23310){
 8000b34:	4b16      	ldr	r3, [pc, #88]	; (8000b90 <SR_04+0x80>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	f645 320d 	movw	r2, #23309	; 0x5b0d
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	dc0f      	bgt.n	8000b60 <SR_04+0x50>
				distanciaSR04 = cuentaPulsos * 34 / 2000;
 8000b40:	4b13      	ldr	r3, [pc, #76]	; (8000b90 <SR_04+0x80>)
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	4613      	mov	r3, r2
 8000b46:	011b      	lsls	r3, r3, #4
 8000b48:	4413      	add	r3, r2
 8000b4a:	005b      	lsls	r3, r3, #1
 8000b4c:	4a11      	ldr	r2, [pc, #68]	; (8000b94 <SR_04+0x84>)
 8000b4e:	fb82 1203 	smull	r1, r2, r2, r3
 8000b52:	11d2      	asrs	r2, r2, #7
 8000b54:	17db      	asrs	r3, r3, #31
 8000b56:	1ad3      	subs	r3, r2, r3
 8000b58:	b29a      	uxth	r2, r3
 8000b5a:	4b0f      	ldr	r3, [pc, #60]	; (8000b98 <SR_04+0x88>)
 8000b5c:	801a      	strh	r2, [r3, #0]
 8000b5e:	e003      	b.n	8000b68 <SR_04+0x58>
			}else{
				distanciaSR04 = 400;
 8000b60:	4b0d      	ldr	r3, [pc, #52]	; (8000b98 <SR_04+0x88>)
 8000b62:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000b66:	801a      	strh	r2, [r3, #0]
			}
			flancoEco = 0;
 8000b68:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <SR_04+0x74>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	701a      	strb	r2, [r3, #0]
		break;
 8000b6e:	e005      	b.n	8000b7c <SR_04+0x6c>
		default:
			flancoEco = 0;
 8000b70:	4b04      	ldr	r3, [pc, #16]	; (8000b84 <SR_04+0x74>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	701a      	strb	r2, [r3, #0]
		break;
 8000b76:	bf00      	nop
 8000b78:	e000      	b.n	8000b7c <SR_04+0x6c>
			return;
 8000b7a:	bf00      	nop
	} //end switch flancoEco

} //end SR_04()
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	20000044 	.word	0x20000044
 8000b88:	20000040 	.word	0x20000040
 8000b8c:	2000003c 	.word	0x2000003c
 8000b90:	20000048 	.word	0x20000048
 8000b94:	10624dd3 	.word	0x10624dd3
 8000b98:	2000004c 	.word	0x2000004c

08000b9c <sensores>:

void sensores (void){
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
	//sensores_dist = SI << 2 | SF << 1 | SD (logica negativa)
	SI = (HAL_GPIO_ReadPin(IN_sensorL_GPIO_Port, IN_sensorL_Pin)) ;
 8000ba0:	2102      	movs	r1, #2
 8000ba2:	4817      	ldr	r0, [pc, #92]	; (8000c00 <sensores+0x64>)
 8000ba4:	f001 fd40 	bl	8002628 <HAL_GPIO_ReadPin>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	461a      	mov	r2, r3
 8000bac:	4b15      	ldr	r3, [pc, #84]	; (8000c04 <sensores+0x68>)
 8000bae:	701a      	strb	r2, [r3, #0]
	SD = HAL_GPIO_ReadPin(IN_sensorR_GPIO_Port, IN_sensorR_Pin);
 8000bb0:	2108      	movs	r1, #8
 8000bb2:	4813      	ldr	r0, [pc, #76]	; (8000c00 <sensores+0x64>)
 8000bb4:	f001 fd38 	bl	8002628 <HAL_GPIO_ReadPin>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	461a      	mov	r2, r3
 8000bbc:	4b12      	ldr	r3, [pc, #72]	; (8000c08 <sensores+0x6c>)
 8000bbe:	701a      	strb	r2, [r3, #0]
	if (distanciaSR04 < 25) SF = 0; else SF = 1;
 8000bc0:	4b12      	ldr	r3, [pc, #72]	; (8000c0c <sensores+0x70>)
 8000bc2:	881b      	ldrh	r3, [r3, #0]
 8000bc4:	2b18      	cmp	r3, #24
 8000bc6:	d803      	bhi.n	8000bd0 <sensores+0x34>
 8000bc8:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <sensores+0x74>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	701a      	strb	r2, [r3, #0]
 8000bce:	e002      	b.n	8000bd6 <sensores+0x3a>
 8000bd0:	4b0f      	ldr	r3, [pc, #60]	; (8000c10 <sensores+0x74>)
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	701a      	strb	r2, [r3, #0]

	sensores_dist = SI << 2 | SF << 1 | SD;
 8000bd6:	4b0b      	ldr	r3, [pc, #44]	; (8000c04 <sensores+0x68>)
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	009b      	lsls	r3, r3, #2
 8000bdc:	b25a      	sxtb	r2, r3
 8000bde:	4b0c      	ldr	r3, [pc, #48]	; (8000c10 <sensores+0x74>)
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	b25b      	sxtb	r3, r3
 8000be6:	4313      	orrs	r3, r2
 8000be8:	b25a      	sxtb	r2, r3
 8000bea:	4b07      	ldr	r3, [pc, #28]	; (8000c08 <sensores+0x6c>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	b25b      	sxtb	r3, r3
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	b25b      	sxtb	r3, r3
 8000bf4:	b2da      	uxtb	r2, r3
 8000bf6:	4b07      	ldr	r3, [pc, #28]	; (8000c14 <sensores+0x78>)
 8000bf8:	701a      	strb	r2, [r3, #0]
}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40020c00 	.word	0x40020c00
 8000c04:	200000c9 	.word	0x200000c9
 8000c08:	200000c8 	.word	0x200000c8
 8000c0c:	2000004c 	.word	0x2000004c
 8000c10:	200000bc 	.word	0x200000bc
 8000c14:	20000038 	.word	0x20000038

08000c18 <movimientoLibre>:

void movimientoLibre (void){
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0

	if (avance_cant != 0) avance_cant = 0;
 8000c1c:	4b75      	ldr	r3, [pc, #468]	; (8000df4 <movimientoLibre+0x1dc>)
 8000c1e:	881b      	ldrh	r3, [r3, #0]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d002      	beq.n	8000c2a <movimientoLibre+0x12>
 8000c24:	4b73      	ldr	r3, [pc, #460]	; (8000df4 <movimientoLibre+0x1dc>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	801a      	strh	r2, [r3, #0]
	if (retroceso_cant != 0) retroceso_cant = 0;
 8000c2a:	4b73      	ldr	r3, [pc, #460]	; (8000df8 <movimientoLibre+0x1e0>)
 8000c2c:	881b      	ldrh	r3, [r3, #0]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d002      	beq.n	8000c38 <movimientoLibre+0x20>
 8000c32:	4b71      	ldr	r3, [pc, #452]	; (8000df8 <movimientoLibre+0x1e0>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	801a      	strh	r2, [r3, #0]
	if (giroIzq_cant != 0) giroIzq_cant = 0;
 8000c38:	4b70      	ldr	r3, [pc, #448]	; (8000dfc <movimientoLibre+0x1e4>)
 8000c3a:	881b      	ldrh	r3, [r3, #0]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d002      	beq.n	8000c46 <movimientoLibre+0x2e>
 8000c40:	4b6e      	ldr	r3, [pc, #440]	; (8000dfc <movimientoLibre+0x1e4>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	801a      	strh	r2, [r3, #0]
	if (giroDer_cant != 0) giroDer_cant = 0;
 8000c46:	4b6e      	ldr	r3, [pc, #440]	; (8000e00 <movimientoLibre+0x1e8>)
 8000c48:	881b      	ldrh	r3, [r3, #0]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d002      	beq.n	8000c54 <movimientoLibre+0x3c>
 8000c4e:	4b6c      	ldr	r3, [pc, #432]	; (8000e00 <movimientoLibre+0x1e8>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	801a      	strh	r2, [r3, #0]

	switch (status_movimiento) {
 8000c54:	4b6b      	ldr	r3, [pc, #428]	; (8000e04 <movimientoLibre+0x1ec>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	2b05      	cmp	r3, #5
 8000c5a:	f200 80c7 	bhi.w	8000dec <movimientoLibre+0x1d4>
 8000c5e:	a201      	add	r2, pc, #4	; (adr r2, 8000c64 <movimientoLibre+0x4c>)
 8000c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c64:	08000c7d 	.word	0x08000c7d
 8000c68:	08000cb3 	.word	0x08000cb3
 8000c6c:	08000dbd 	.word	0x08000dbd
 8000c70:	08000d21 	.word	0x08000d21
 8000c74:	08000d6f 	.word	0x08000d6f
 8000c78:	08000ded 	.word	0x08000ded
		case QUIETO:

			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 0);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	2101      	movs	r1, #1
 8000c80:	4861      	ldr	r0, [pc, #388]	; (8000e08 <movimientoLibre+0x1f0>)
 8000c82:	f001 fce9 	bl	8002658 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 0);
 8000c86:	2200      	movs	r2, #0
 8000c88:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c8c:	485f      	ldr	r0, [pc, #380]	; (8000e0c <movimientoLibre+0x1f4>)
 8000c8e:	f001 fce3 	bl	8002658 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 0);
 8000c92:	2200      	movs	r2, #0
 8000c94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c98:	485c      	ldr	r0, [pc, #368]	; (8000e0c <movimientoLibre+0x1f4>)
 8000c9a:	f001 fcdd 	bl	8002658 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 0);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ca4:	4859      	ldr	r0, [pc, #356]	; (8000e0c <movimientoLibre+0x1f4>)
 8000ca6:	f001 fcd7 	bl	8002658 <HAL_GPIO_WritePin>

			status_movimiento = AVANZANDO;
 8000caa:	4b56      	ldr	r3, [pc, #344]	; (8000e04 <movimientoLibre+0x1ec>)
 8000cac:	2201      	movs	r2, #1
 8000cae:	701a      	strb	r2, [r3, #0]
		break;
 8000cb0:	e09d      	b.n	8000dee <movimientoLibre+0x1d6>
		case AVANZANDO:

			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 1);
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	4854      	ldr	r0, [pc, #336]	; (8000e08 <movimientoLibre+0x1f0>)
 8000cb8:	f001 fcce 	bl	8002658 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 1);
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cc2:	4852      	ldr	r0, [pc, #328]	; (8000e0c <movimientoLibre+0x1f4>)
 8000cc4:	f001 fcc8 	bl	8002658 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 0);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cce:	484f      	ldr	r0, [pc, #316]	; (8000e0c <movimientoLibre+0x1f4>)
 8000cd0:	f001 fcc2 	bl	8002658 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 0);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cda:	484c      	ldr	r0, [pc, #304]	; (8000e0c <movimientoLibre+0x1f4>)
 8000cdc:	f001 fcbc 	bl	8002658 <HAL_GPIO_WritePin>

			switch (sensores_dist) {
 8000ce0:	4b4b      	ldr	r3, [pc, #300]	; (8000e10 <movimientoLibre+0x1f8>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	2b06      	cmp	r3, #6
 8000ce6:	d819      	bhi.n	8000d1c <movimientoLibre+0x104>
 8000ce8:	a201      	add	r2, pc, #4	; (adr r2, 8000cf0 <movimientoLibre+0xd8>)
 8000cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cee:	bf00      	nop
 8000cf0:	08000d0d 	.word	0x08000d0d
 8000cf4:	08000d15 	.word	0x08000d15
 8000cf8:	08000d1d 	.word	0x08000d1d
 8000cfc:	08000d15 	.word	0x08000d15
 8000d00:	08000d0d 	.word	0x08000d0d
 8000d04:	08000d0d 	.word	0x08000d0d
 8000d08:	08000d0d 	.word	0x08000d0d
				case 0b110:
				case 0b101:
				case 0b100:
				case 0b000:
					status_movimiento = ROTANDO_IZQ;
 8000d0c:	4b3d      	ldr	r3, [pc, #244]	; (8000e04 <movimientoLibre+0x1ec>)
 8000d0e:	2203      	movs	r2, #3
 8000d10:	701a      	strb	r2, [r3, #0]
					break;
 8000d12:	e004      	b.n	8000d1e <movimientoLibre+0x106>
				case 0b011:
				case 0b001:
					status_movimiento = ROTANDO_DER;
 8000d14:	4b3b      	ldr	r3, [pc, #236]	; (8000e04 <movimientoLibre+0x1ec>)
 8000d16:	2204      	movs	r2, #4
 8000d18:	701a      	strb	r2, [r3, #0]
					break;
 8000d1a:	e000      	b.n	8000d1e <movimientoLibre+0x106>
				default:
					break;
 8000d1c:	bf00      	nop
			} //end switch sensores_dist

		break;
 8000d1e:	e066      	b.n	8000dee <movimientoLibre+0x1d6>
		case ROTANDO_IZQ:

			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 0);
 8000d20:	2200      	movs	r2, #0
 8000d22:	2101      	movs	r1, #1
 8000d24:	4838      	ldr	r0, [pc, #224]	; (8000e08 <movimientoLibre+0x1f0>)
 8000d26:	f001 fc97 	bl	8002658 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 1);
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d30:	4836      	ldr	r0, [pc, #216]	; (8000e0c <movimientoLibre+0x1f4>)
 8000d32:	f001 fc91 	bl	8002658 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 1);
 8000d36:	2201      	movs	r2, #1
 8000d38:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d3c:	4833      	ldr	r0, [pc, #204]	; (8000e0c <movimientoLibre+0x1f4>)
 8000d3e:	f001 fc8b 	bl	8002658 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 0);
 8000d42:	2200      	movs	r2, #0
 8000d44:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d48:	4830      	ldr	r0, [pc, #192]	; (8000e0c <movimientoLibre+0x1f4>)
 8000d4a:	f001 fc85 	bl	8002658 <HAL_GPIO_WritePin>

			switch (sensores_dist){
 8000d4e:	4b30      	ldr	r3, [pc, #192]	; (8000e10 <movimientoLibre+0x1f8>)
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	2b03      	cmp	r3, #3
 8000d54:	d006      	beq.n	8000d64 <movimientoLibre+0x14c>
 8000d56:	2b07      	cmp	r3, #7
 8000d58:	d000      	beq.n	8000d5c <movimientoLibre+0x144>
					status_movimiento = AVANZANDO;
					break;
				case 0b011:
					status_movimiento = ROTANDO_DER;
				default:
					break;
 8000d5a:	e006      	b.n	8000d6a <movimientoLibre+0x152>
					status_movimiento = AVANZANDO;
 8000d5c:	4b29      	ldr	r3, [pc, #164]	; (8000e04 <movimientoLibre+0x1ec>)
 8000d5e:	2201      	movs	r2, #1
 8000d60:	701a      	strb	r2, [r3, #0]
					break;
 8000d62:	e003      	b.n	8000d6c <movimientoLibre+0x154>
					status_movimiento = ROTANDO_DER;
 8000d64:	4b27      	ldr	r3, [pc, #156]	; (8000e04 <movimientoLibre+0x1ec>)
 8000d66:	2204      	movs	r2, #4
 8000d68:	701a      	strb	r2, [r3, #0]
					break;
 8000d6a:	bf00      	nop
			} //end switch sensores_dist

		break;
 8000d6c:	e03f      	b.n	8000dee <movimientoLibre+0x1d6>
		case ROTANDO_DER:
			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 1);
 8000d6e:	2201      	movs	r2, #1
 8000d70:	2101      	movs	r1, #1
 8000d72:	4825      	ldr	r0, [pc, #148]	; (8000e08 <movimientoLibre+0x1f0>)
 8000d74:	f001 fc70 	bl	8002658 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 0);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d7e:	4823      	ldr	r0, [pc, #140]	; (8000e0c <movimientoLibre+0x1f4>)
 8000d80:	f001 fc6a 	bl	8002658 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 0);
 8000d84:	2200      	movs	r2, #0
 8000d86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d8a:	4820      	ldr	r0, [pc, #128]	; (8000e0c <movimientoLibre+0x1f4>)
 8000d8c:	f001 fc64 	bl	8002658 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 1);
 8000d90:	2201      	movs	r2, #1
 8000d92:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d96:	481d      	ldr	r0, [pc, #116]	; (8000e0c <movimientoLibre+0x1f4>)
 8000d98:	f001 fc5e 	bl	8002658 <HAL_GPIO_WritePin>

			switch (sensores_dist){
 8000d9c:	4b1c      	ldr	r3, [pc, #112]	; (8000e10 <movimientoLibre+0x1f8>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	2b06      	cmp	r3, #6
 8000da2:	d006      	beq.n	8000db2 <movimientoLibre+0x19a>
 8000da4:	2b07      	cmp	r3, #7
 8000da6:	d000      	beq.n	8000daa <movimientoLibre+0x192>
					status_movimiento = AVANZANDO;
					break;
				case 0b110:
					status_movimiento = ROTANDO_IZQ;
				default:
					break;
 8000da8:	e006      	b.n	8000db8 <movimientoLibre+0x1a0>
					status_movimiento = AVANZANDO;
 8000daa:	4b16      	ldr	r3, [pc, #88]	; (8000e04 <movimientoLibre+0x1ec>)
 8000dac:	2201      	movs	r2, #1
 8000dae:	701a      	strb	r2, [r3, #0]
					break;
 8000db0:	e003      	b.n	8000dba <movimientoLibre+0x1a2>
					status_movimiento = ROTANDO_IZQ;
 8000db2:	4b14      	ldr	r3, [pc, #80]	; (8000e04 <movimientoLibre+0x1ec>)
 8000db4:	2203      	movs	r2, #3
 8000db6:	701a      	strb	r2, [r3, #0]
					break;
 8000db8:	bf00      	nop
			} //end switch sensores_dist

		break;
 8000dba:	e018      	b.n	8000dee <movimientoLibre+0x1d6>
		case RETROCEDIENDO:
			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 0);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	2101      	movs	r1, #1
 8000dc0:	4811      	ldr	r0, [pc, #68]	; (8000e08 <movimientoLibre+0x1f0>)
 8000dc2:	f001 fc49 	bl	8002658 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 0);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dcc:	480f      	ldr	r0, [pc, #60]	; (8000e0c <movimientoLibre+0x1f4>)
 8000dce:	f001 fc43 	bl	8002658 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 1);
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dd8:	480c      	ldr	r0, [pc, #48]	; (8000e0c <movimientoLibre+0x1f4>)
 8000dda:	f001 fc3d 	bl	8002658 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 1);
 8000dde:	2201      	movs	r2, #1
 8000de0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000de4:	4809      	ldr	r0, [pc, #36]	; (8000e0c <movimientoLibre+0x1f4>)
 8000de6:	f001 fc37 	bl	8002658 <HAL_GPIO_WritePin>
			break;
 8000dea:	e000      	b.n	8000dee <movimientoLibre+0x1d6>

		break;
		case PIVOTE_DER_AVAN:

		default:
		break;
 8000dec:	bf00      	nop

	} //fin switch status_movimiento

} //fin movimientoLibre()
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	20000030 	.word	0x20000030
 8000df8:	20000032 	.word	0x20000032
 8000dfc:	20000034 	.word	0x20000034
 8000e00:	20000036 	.word	0x20000036
 8000e04:	2000002e 	.word	0x2000002e
 8000e08:	40020c00 	.word	0x40020c00
 8000e0c:	40020800 	.word	0x40020800
 8000e10:	20000038 	.word	0x20000038

08000e14 <movimientoRC>:

void movimientoRC (void){
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0

	if (!avance_cant && !retroceso_cant && !giroIzq_cant && !giroDer_cant ){
 8000e18:	4bb2      	ldr	r3, [pc, #712]	; (80010e4 <movimientoRC+0x2d0>)
 8000e1a:	881b      	ldrh	r3, [r3, #0]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d10e      	bne.n	8000e3e <movimientoRC+0x2a>
 8000e20:	4bb1      	ldr	r3, [pc, #708]	; (80010e8 <movimientoRC+0x2d4>)
 8000e22:	881b      	ldrh	r3, [r3, #0]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d10a      	bne.n	8000e3e <movimientoRC+0x2a>
 8000e28:	4bb0      	ldr	r3, [pc, #704]	; (80010ec <movimientoRC+0x2d8>)
 8000e2a:	881b      	ldrh	r3, [r3, #0]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d106      	bne.n	8000e3e <movimientoRC+0x2a>
 8000e30:	4baf      	ldr	r3, [pc, #700]	; (80010f0 <movimientoRC+0x2dc>)
 8000e32:	881b      	ldrh	r3, [r3, #0]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d102      	bne.n	8000e3e <movimientoRC+0x2a>
		status_movimiento = QUIETO;
 8000e38:	4bae      	ldr	r3, [pc, #696]	; (80010f4 <movimientoRC+0x2e0>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	701a      	strb	r2, [r3, #0]
	}

	switch (status_movimiento) {
 8000e3e:	4bad      	ldr	r3, [pc, #692]	; (80010f4 <movimientoRC+0x2e0>)
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	2b05      	cmp	r3, #5
 8000e44:	f200 81d3 	bhi.w	80011ee <movimientoRC+0x3da>
 8000e48:	a201      	add	r2, pc, #4	; (adr r2, 8000e50 <movimientoRC+0x3c>)
 8000e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e4e:	bf00      	nop
 8000e50:	08000e69 	.word	0x08000e69
 8000e54:	08000f09 	.word	0x08000f09
 8000e58:	08001141 	.word	0x08001141
 8000e5c:	08000fbb 	.word	0x08000fbb
 8000e60:	0800106d 	.word	0x0800106d
 8000e64:	080011ef 	.word	0x080011ef
		case QUIETO:

			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 0);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	2101      	movs	r1, #1
 8000e6c:	48a2      	ldr	r0, [pc, #648]	; (80010f8 <movimientoRC+0x2e4>)
 8000e6e:	f001 fbf3 	bl	8002658 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 0);
 8000e72:	2200      	movs	r2, #0
 8000e74:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e78:	48a0      	ldr	r0, [pc, #640]	; (80010fc <movimientoRC+0x2e8>)
 8000e7a:	f001 fbed 	bl	8002658 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 0);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e84:	489d      	ldr	r0, [pc, #628]	; (80010fc <movimientoRC+0x2e8>)
 8000e86:	f001 fbe7 	bl	8002658 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 0);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e90:	489a      	ldr	r0, [pc, #616]	; (80010fc <movimientoRC+0x2e8>)
 8000e92:	f001 fbe1 	bl	8002658 <HAL_GPIO_WritePin>

			if (avance_cant != 0){
 8000e96:	4b93      	ldr	r3, [pc, #588]	; (80010e4 <movimientoRC+0x2d0>)
 8000e98:	881b      	ldrh	r3, [r3, #0]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d009      	beq.n	8000eb2 <movimientoRC+0x9e>
				acum_encoderL = 0;
 8000e9e:	4b98      	ldr	r3, [pc, #608]	; (8001100 <movimientoRC+0x2ec>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 8000ea4:	4b97      	ldr	r3, [pc, #604]	; (8001104 <movimientoRC+0x2f0>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	801a      	strh	r2, [r3, #0]
				status_movimiento = AVANZANDO;
 8000eaa:	4b92      	ldr	r3, [pc, #584]	; (80010f4 <movimientoRC+0x2e0>)
 8000eac:	2201      	movs	r2, #1
 8000eae:	701a      	strb	r2, [r3, #0]
				break;
 8000eb0:	e1b0      	b.n	8001214 <movimientoRC+0x400>
			}

			if (retroceso_cant != 0){
 8000eb2:	4b8d      	ldr	r3, [pc, #564]	; (80010e8 <movimientoRC+0x2d4>)
 8000eb4:	881b      	ldrh	r3, [r3, #0]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d009      	beq.n	8000ece <movimientoRC+0xba>
				acum_encoderL = 0;
 8000eba:	4b91      	ldr	r3, [pc, #580]	; (8001100 <movimientoRC+0x2ec>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 8000ec0:	4b90      	ldr	r3, [pc, #576]	; (8001104 <movimientoRC+0x2f0>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	801a      	strh	r2, [r3, #0]
				status_movimiento = RETROCEDIENDO;
 8000ec6:	4b8b      	ldr	r3, [pc, #556]	; (80010f4 <movimientoRC+0x2e0>)
 8000ec8:	2202      	movs	r2, #2
 8000eca:	701a      	strb	r2, [r3, #0]
				break;
 8000ecc:	e1a2      	b.n	8001214 <movimientoRC+0x400>
			}

			if (giroIzq_cant != 0){
 8000ece:	4b87      	ldr	r3, [pc, #540]	; (80010ec <movimientoRC+0x2d8>)
 8000ed0:	881b      	ldrh	r3, [r3, #0]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d009      	beq.n	8000eea <movimientoRC+0xd6>
				acum_encoderL = 0;
 8000ed6:	4b8a      	ldr	r3, [pc, #552]	; (8001100 <movimientoRC+0x2ec>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 8000edc:	4b89      	ldr	r3, [pc, #548]	; (8001104 <movimientoRC+0x2f0>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	801a      	strh	r2, [r3, #0]
				status_movimiento = ROTANDO_IZQ;
 8000ee2:	4b84      	ldr	r3, [pc, #528]	; (80010f4 <movimientoRC+0x2e0>)
 8000ee4:	2203      	movs	r2, #3
 8000ee6:	701a      	strb	r2, [r3, #0]
				break;
 8000ee8:	e194      	b.n	8001214 <movimientoRC+0x400>
			}

			if (giroDer_cant != 0){
 8000eea:	4b81      	ldr	r3, [pc, #516]	; (80010f0 <movimientoRC+0x2dc>)
 8000eec:	881b      	ldrh	r3, [r3, #0]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	f000 817f 	beq.w	80011f2 <movimientoRC+0x3de>
				acum_encoderL = 0;
 8000ef4:	4b82      	ldr	r3, [pc, #520]	; (8001100 <movimientoRC+0x2ec>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 8000efa:	4b82      	ldr	r3, [pc, #520]	; (8001104 <movimientoRC+0x2f0>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	801a      	strh	r2, [r3, #0]
				status_movimiento = ROTANDO_DER;
 8000f00:	4b7c      	ldr	r3, [pc, #496]	; (80010f4 <movimientoRC+0x2e0>)
 8000f02:	2204      	movs	r2, #4
 8000f04:	701a      	strb	r2, [r3, #0]
				break;
 8000f06:	e185      	b.n	8001214 <movimientoRC+0x400>
			}

		break;
		case AVANZANDO:

			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 1);
 8000f08:	2201      	movs	r2, #1
 8000f0a:	2101      	movs	r1, #1
 8000f0c:	487a      	ldr	r0, [pc, #488]	; (80010f8 <movimientoRC+0x2e4>)
 8000f0e:	f001 fba3 	bl	8002658 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 1);
 8000f12:	2201      	movs	r2, #1
 8000f14:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f18:	4878      	ldr	r0, [pc, #480]	; (80010fc <movimientoRC+0x2e8>)
 8000f1a:	f001 fb9d 	bl	8002658 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 0);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f24:	4875      	ldr	r0, [pc, #468]	; (80010fc <movimientoRC+0x2e8>)
 8000f26:	f001 fb97 	bl	8002658 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 0);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f30:	4872      	ldr	r0, [pc, #456]	; (80010fc <movimientoRC+0x2e8>)
 8000f32:	f001 fb91 	bl	8002658 <HAL_GPIO_WritePin>

			encoders();
 8000f36:	f000 f981 	bl	800123c <encoders>

			if (avance_cant > ((acum_encoderL + acum_encoderR) >> 1) ) break;
 8000f3a:	4b6a      	ldr	r3, [pc, #424]	; (80010e4 <movimientoRC+0x2d0>)
 8000f3c:	881b      	ldrh	r3, [r3, #0]
 8000f3e:	461a      	mov	r2, r3
 8000f40:	4b6f      	ldr	r3, [pc, #444]	; (8001100 <movimientoRC+0x2ec>)
 8000f42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f46:	4619      	mov	r1, r3
 8000f48:	4b6e      	ldr	r3, [pc, #440]	; (8001104 <movimientoRC+0x2f0>)
 8000f4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f4e:	440b      	add	r3, r1
 8000f50:	105b      	asrs	r3, r3, #1
 8000f52:	429a      	cmp	r2, r3
 8000f54:	f300 814f 	bgt.w	80011f6 <movimientoRC+0x3e2>

			avance_cant = 0;
 8000f58:	4b62      	ldr	r3, [pc, #392]	; (80010e4 <movimientoRC+0x2d0>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	801a      	strh	r2, [r3, #0]

			status_movimiento = QUIETO;
 8000f5e:	4b65      	ldr	r3, [pc, #404]	; (80010f4 <movimientoRC+0x2e0>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	701a      	strb	r2, [r3, #0]

			if (retroceso_cant != 0){
 8000f64:	4b60      	ldr	r3, [pc, #384]	; (80010e8 <movimientoRC+0x2d4>)
 8000f66:	881b      	ldrh	r3, [r3, #0]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d009      	beq.n	8000f80 <movimientoRC+0x16c>
				acum_encoderL = 0;
 8000f6c:	4b64      	ldr	r3, [pc, #400]	; (8001100 <movimientoRC+0x2ec>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 8000f72:	4b64      	ldr	r3, [pc, #400]	; (8001104 <movimientoRC+0x2f0>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	801a      	strh	r2, [r3, #0]
				status_movimiento = RETROCEDIENDO;
 8000f78:	4b5e      	ldr	r3, [pc, #376]	; (80010f4 <movimientoRC+0x2e0>)
 8000f7a:	2202      	movs	r2, #2
 8000f7c:	701a      	strb	r2, [r3, #0]
				break;
 8000f7e:	e149      	b.n	8001214 <movimientoRC+0x400>
			}

			if (giroIzq_cant != 0){
 8000f80:	4b5a      	ldr	r3, [pc, #360]	; (80010ec <movimientoRC+0x2d8>)
 8000f82:	881b      	ldrh	r3, [r3, #0]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d009      	beq.n	8000f9c <movimientoRC+0x188>
				acum_encoderL = 0;
 8000f88:	4b5d      	ldr	r3, [pc, #372]	; (8001100 <movimientoRC+0x2ec>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 8000f8e:	4b5d      	ldr	r3, [pc, #372]	; (8001104 <movimientoRC+0x2f0>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	801a      	strh	r2, [r3, #0]
				status_movimiento = ROTANDO_IZQ;
 8000f94:	4b57      	ldr	r3, [pc, #348]	; (80010f4 <movimientoRC+0x2e0>)
 8000f96:	2203      	movs	r2, #3
 8000f98:	701a      	strb	r2, [r3, #0]
				break;
 8000f9a:	e13b      	b.n	8001214 <movimientoRC+0x400>
			}

			if (giroDer_cant != 0){
 8000f9c:	4b54      	ldr	r3, [pc, #336]	; (80010f0 <movimientoRC+0x2dc>)
 8000f9e:	881b      	ldrh	r3, [r3, #0]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	f000 812a 	beq.w	80011fa <movimientoRC+0x3e6>
				acum_encoderL = 0;
 8000fa6:	4b56      	ldr	r3, [pc, #344]	; (8001100 <movimientoRC+0x2ec>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 8000fac:	4b55      	ldr	r3, [pc, #340]	; (8001104 <movimientoRC+0x2f0>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	801a      	strh	r2, [r3, #0]
				status_movimiento = ROTANDO_DER;
 8000fb2:	4b50      	ldr	r3, [pc, #320]	; (80010f4 <movimientoRC+0x2e0>)
 8000fb4:	2204      	movs	r2, #4
 8000fb6:	701a      	strb	r2, [r3, #0]
				break;
 8000fb8:	e12c      	b.n	8001214 <movimientoRC+0x400>
			}

		break;
		case ROTANDO_IZQ:

			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 0);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2101      	movs	r1, #1
 8000fbe:	484e      	ldr	r0, [pc, #312]	; (80010f8 <movimientoRC+0x2e4>)
 8000fc0:	f001 fb4a 	bl	8002658 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 1);
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fca:	484c      	ldr	r0, [pc, #304]	; (80010fc <movimientoRC+0x2e8>)
 8000fcc:	f001 fb44 	bl	8002658 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 1);
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fd6:	4849      	ldr	r0, [pc, #292]	; (80010fc <movimientoRC+0x2e8>)
 8000fd8:	f001 fb3e 	bl	8002658 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 0);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fe2:	4846      	ldr	r0, [pc, #280]	; (80010fc <movimientoRC+0x2e8>)
 8000fe4:	f001 fb38 	bl	8002658 <HAL_GPIO_WritePin>

			encoders();
 8000fe8:	f000 f928 	bl	800123c <encoders>

			if (giroIzq_cant > ((acum_encoderL + acum_encoderR) >> 1) ) break;
 8000fec:	4b3f      	ldr	r3, [pc, #252]	; (80010ec <movimientoRC+0x2d8>)
 8000fee:	881b      	ldrh	r3, [r3, #0]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	4b43      	ldr	r3, [pc, #268]	; (8001100 <movimientoRC+0x2ec>)
 8000ff4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4b42      	ldr	r3, [pc, #264]	; (8001104 <movimientoRC+0x2f0>)
 8000ffc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001000:	440b      	add	r3, r1
 8001002:	105b      	asrs	r3, r3, #1
 8001004:	429a      	cmp	r2, r3
 8001006:	f300 80fa 	bgt.w	80011fe <movimientoRC+0x3ea>

			giroIzq_cant = 0;
 800100a:	4b38      	ldr	r3, [pc, #224]	; (80010ec <movimientoRC+0x2d8>)
 800100c:	2200      	movs	r2, #0
 800100e:	801a      	strh	r2, [r3, #0]

			status_movimiento = QUIETO;
 8001010:	4b38      	ldr	r3, [pc, #224]	; (80010f4 <movimientoRC+0x2e0>)
 8001012:	2200      	movs	r2, #0
 8001014:	701a      	strb	r2, [r3, #0]

			if (avance_cant != 0){
 8001016:	4b33      	ldr	r3, [pc, #204]	; (80010e4 <movimientoRC+0x2d0>)
 8001018:	881b      	ldrh	r3, [r3, #0]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d009      	beq.n	8001032 <movimientoRC+0x21e>
				acum_encoderL = 0;
 800101e:	4b38      	ldr	r3, [pc, #224]	; (8001100 <movimientoRC+0x2ec>)
 8001020:	2200      	movs	r2, #0
 8001022:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 8001024:	4b37      	ldr	r3, [pc, #220]	; (8001104 <movimientoRC+0x2f0>)
 8001026:	2200      	movs	r2, #0
 8001028:	801a      	strh	r2, [r3, #0]
				status_movimiento = AVANZANDO;
 800102a:	4b32      	ldr	r3, [pc, #200]	; (80010f4 <movimientoRC+0x2e0>)
 800102c:	2201      	movs	r2, #1
 800102e:	701a      	strb	r2, [r3, #0]
				break;
 8001030:	e0f0      	b.n	8001214 <movimientoRC+0x400>
			}

			if (retroceso_cant != 0){
 8001032:	4b2d      	ldr	r3, [pc, #180]	; (80010e8 <movimientoRC+0x2d4>)
 8001034:	881b      	ldrh	r3, [r3, #0]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d009      	beq.n	800104e <movimientoRC+0x23a>
				acum_encoderL = 0;
 800103a:	4b31      	ldr	r3, [pc, #196]	; (8001100 <movimientoRC+0x2ec>)
 800103c:	2200      	movs	r2, #0
 800103e:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 8001040:	4b30      	ldr	r3, [pc, #192]	; (8001104 <movimientoRC+0x2f0>)
 8001042:	2200      	movs	r2, #0
 8001044:	801a      	strh	r2, [r3, #0]
				status_movimiento = RETROCEDIENDO;
 8001046:	4b2b      	ldr	r3, [pc, #172]	; (80010f4 <movimientoRC+0x2e0>)
 8001048:	2202      	movs	r2, #2
 800104a:	701a      	strb	r2, [r3, #0]
				break;
 800104c:	e0e2      	b.n	8001214 <movimientoRC+0x400>
			}

			if (giroDer_cant != 0){
 800104e:	4b28      	ldr	r3, [pc, #160]	; (80010f0 <movimientoRC+0x2dc>)
 8001050:	881b      	ldrh	r3, [r3, #0]
 8001052:	2b00      	cmp	r3, #0
 8001054:	f000 80d5 	beq.w	8001202 <movimientoRC+0x3ee>
				acum_encoderL = 0;
 8001058:	4b29      	ldr	r3, [pc, #164]	; (8001100 <movimientoRC+0x2ec>)
 800105a:	2200      	movs	r2, #0
 800105c:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 800105e:	4b29      	ldr	r3, [pc, #164]	; (8001104 <movimientoRC+0x2f0>)
 8001060:	2200      	movs	r2, #0
 8001062:	801a      	strh	r2, [r3, #0]
				status_movimiento = ROTANDO_DER;
 8001064:	4b23      	ldr	r3, [pc, #140]	; (80010f4 <movimientoRC+0x2e0>)
 8001066:	2204      	movs	r2, #4
 8001068:	701a      	strb	r2, [r3, #0]
				break;
 800106a:	e0d3      	b.n	8001214 <movimientoRC+0x400>
			}

		break;
		case ROTANDO_DER:
			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 1);
 800106c:	2201      	movs	r2, #1
 800106e:	2101      	movs	r1, #1
 8001070:	4821      	ldr	r0, [pc, #132]	; (80010f8 <movimientoRC+0x2e4>)
 8001072:	f001 faf1 	bl	8002658 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 0);
 8001076:	2200      	movs	r2, #0
 8001078:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800107c:	481f      	ldr	r0, [pc, #124]	; (80010fc <movimientoRC+0x2e8>)
 800107e:	f001 faeb 	bl	8002658 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 0);
 8001082:	2200      	movs	r2, #0
 8001084:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001088:	481c      	ldr	r0, [pc, #112]	; (80010fc <movimientoRC+0x2e8>)
 800108a:	f001 fae5 	bl	8002658 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 1);
 800108e:	2201      	movs	r2, #1
 8001090:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001094:	4819      	ldr	r0, [pc, #100]	; (80010fc <movimientoRC+0x2e8>)
 8001096:	f001 fadf 	bl	8002658 <HAL_GPIO_WritePin>

			encoders();
 800109a:	f000 f8cf 	bl	800123c <encoders>

			if (giroDer_cant > ((acum_encoderL + acum_encoderR) >> 1) ) break;
 800109e:	4b14      	ldr	r3, [pc, #80]	; (80010f0 <movimientoRC+0x2dc>)
 80010a0:	881b      	ldrh	r3, [r3, #0]
 80010a2:	461a      	mov	r2, r3
 80010a4:	4b16      	ldr	r3, [pc, #88]	; (8001100 <movimientoRC+0x2ec>)
 80010a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010aa:	4619      	mov	r1, r3
 80010ac:	4b15      	ldr	r3, [pc, #84]	; (8001104 <movimientoRC+0x2f0>)
 80010ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010b2:	440b      	add	r3, r1
 80010b4:	105b      	asrs	r3, r3, #1
 80010b6:	429a      	cmp	r2, r3
 80010b8:	f300 80a5 	bgt.w	8001206 <movimientoRC+0x3f2>

			giroDer_cant = 0;
 80010bc:	4b0c      	ldr	r3, [pc, #48]	; (80010f0 <movimientoRC+0x2dc>)
 80010be:	2200      	movs	r2, #0
 80010c0:	801a      	strh	r2, [r3, #0]

			status_movimiento = QUIETO;
 80010c2:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <movimientoRC+0x2e0>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	701a      	strb	r2, [r3, #0]

			if (avance_cant != 0){
 80010c8:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <movimientoRC+0x2d0>)
 80010ca:	881b      	ldrh	r3, [r3, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d01b      	beq.n	8001108 <movimientoRC+0x2f4>
				acum_encoderL = 0;
 80010d0:	4b0b      	ldr	r3, [pc, #44]	; (8001100 <movimientoRC+0x2ec>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 80010d6:	4b0b      	ldr	r3, [pc, #44]	; (8001104 <movimientoRC+0x2f0>)
 80010d8:	2200      	movs	r2, #0
 80010da:	801a      	strh	r2, [r3, #0]
				status_movimiento = AVANZANDO;
 80010dc:	4b05      	ldr	r3, [pc, #20]	; (80010f4 <movimientoRC+0x2e0>)
 80010de:	2201      	movs	r2, #1
 80010e0:	701a      	strb	r2, [r3, #0]
				break;
 80010e2:	e097      	b.n	8001214 <movimientoRC+0x400>
 80010e4:	20000030 	.word	0x20000030
 80010e8:	20000032 	.word	0x20000032
 80010ec:	20000034 	.word	0x20000034
 80010f0:	20000036 	.word	0x20000036
 80010f4:	2000002e 	.word	0x2000002e
 80010f8:	40020c00 	.word	0x40020c00
 80010fc:	40020800 	.word	0x40020800
 8001100:	20000050 	.word	0x20000050
 8001104:	20000052 	.word	0x20000052
			}

			if (retroceso_cant != 0){
 8001108:	4b43      	ldr	r3, [pc, #268]	; (8001218 <movimientoRC+0x404>)
 800110a:	881b      	ldrh	r3, [r3, #0]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d009      	beq.n	8001124 <movimientoRC+0x310>
				acum_encoderL = 0;
 8001110:	4b42      	ldr	r3, [pc, #264]	; (800121c <movimientoRC+0x408>)
 8001112:	2200      	movs	r2, #0
 8001114:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 8001116:	4b42      	ldr	r3, [pc, #264]	; (8001220 <movimientoRC+0x40c>)
 8001118:	2200      	movs	r2, #0
 800111a:	801a      	strh	r2, [r3, #0]
				status_movimiento = RETROCEDIENDO;
 800111c:	4b41      	ldr	r3, [pc, #260]	; (8001224 <movimientoRC+0x410>)
 800111e:	2202      	movs	r2, #2
 8001120:	701a      	strb	r2, [r3, #0]
				break;
 8001122:	e077      	b.n	8001214 <movimientoRC+0x400>
			}

			if (giroIzq_cant != 0){
 8001124:	4b40      	ldr	r3, [pc, #256]	; (8001228 <movimientoRC+0x414>)
 8001126:	881b      	ldrh	r3, [r3, #0]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d06e      	beq.n	800120a <movimientoRC+0x3f6>
				acum_encoderL = 0;
 800112c:	4b3b      	ldr	r3, [pc, #236]	; (800121c <movimientoRC+0x408>)
 800112e:	2200      	movs	r2, #0
 8001130:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 8001132:	4b3b      	ldr	r3, [pc, #236]	; (8001220 <movimientoRC+0x40c>)
 8001134:	2200      	movs	r2, #0
 8001136:	801a      	strh	r2, [r3, #0]
				status_movimiento = ROTANDO_IZQ;
 8001138:	4b3a      	ldr	r3, [pc, #232]	; (8001224 <movimientoRC+0x410>)
 800113a:	2203      	movs	r2, #3
 800113c:	701a      	strb	r2, [r3, #0]
				break;
 800113e:	e069      	b.n	8001214 <movimientoRC+0x400>
			}

		break;
		case RETROCEDIENDO:
			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 0);
 8001140:	2200      	movs	r2, #0
 8001142:	2101      	movs	r1, #1
 8001144:	4839      	ldr	r0, [pc, #228]	; (800122c <movimientoRC+0x418>)
 8001146:	f001 fa87 	bl	8002658 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 0);
 800114a:	2200      	movs	r2, #0
 800114c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001150:	4837      	ldr	r0, [pc, #220]	; (8001230 <movimientoRC+0x41c>)
 8001152:	f001 fa81 	bl	8002658 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 1);
 8001156:	2201      	movs	r2, #1
 8001158:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800115c:	4834      	ldr	r0, [pc, #208]	; (8001230 <movimientoRC+0x41c>)
 800115e:	f001 fa7b 	bl	8002658 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 1);
 8001162:	2201      	movs	r2, #1
 8001164:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001168:	4831      	ldr	r0, [pc, #196]	; (8001230 <movimientoRC+0x41c>)
 800116a:	f001 fa75 	bl	8002658 <HAL_GPIO_WritePin>

			encoders();
 800116e:	f000 f865 	bl	800123c <encoders>

			if (retroceso_cant > ((acum_encoderL + acum_encoderR) >> 1) ) break;
 8001172:	4b29      	ldr	r3, [pc, #164]	; (8001218 <movimientoRC+0x404>)
 8001174:	881b      	ldrh	r3, [r3, #0]
 8001176:	461a      	mov	r2, r3
 8001178:	4b28      	ldr	r3, [pc, #160]	; (800121c <movimientoRC+0x408>)
 800117a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800117e:	4619      	mov	r1, r3
 8001180:	4b27      	ldr	r3, [pc, #156]	; (8001220 <movimientoRC+0x40c>)
 8001182:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001186:	440b      	add	r3, r1
 8001188:	105b      	asrs	r3, r3, #1
 800118a:	429a      	cmp	r2, r3
 800118c:	dc3f      	bgt.n	800120e <movimientoRC+0x3fa>

			retroceso_cant = 0;
 800118e:	4b22      	ldr	r3, [pc, #136]	; (8001218 <movimientoRC+0x404>)
 8001190:	2200      	movs	r2, #0
 8001192:	801a      	strh	r2, [r3, #0]

			status_movimiento = QUIETO;
 8001194:	4b23      	ldr	r3, [pc, #140]	; (8001224 <movimientoRC+0x410>)
 8001196:	2200      	movs	r2, #0
 8001198:	701a      	strb	r2, [r3, #0]

			if (avance_cant != 0){
 800119a:	4b26      	ldr	r3, [pc, #152]	; (8001234 <movimientoRC+0x420>)
 800119c:	881b      	ldrh	r3, [r3, #0]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d009      	beq.n	80011b6 <movimientoRC+0x3a2>
				acum_encoderL = 0;
 80011a2:	4b1e      	ldr	r3, [pc, #120]	; (800121c <movimientoRC+0x408>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 80011a8:	4b1d      	ldr	r3, [pc, #116]	; (8001220 <movimientoRC+0x40c>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	801a      	strh	r2, [r3, #0]
				status_movimiento = AVANZANDO;
 80011ae:	4b1d      	ldr	r3, [pc, #116]	; (8001224 <movimientoRC+0x410>)
 80011b0:	2201      	movs	r2, #1
 80011b2:	701a      	strb	r2, [r3, #0]
				break;
 80011b4:	e02e      	b.n	8001214 <movimientoRC+0x400>
			}

			if (giroIzq_cant != 0){
 80011b6:	4b1c      	ldr	r3, [pc, #112]	; (8001228 <movimientoRC+0x414>)
 80011b8:	881b      	ldrh	r3, [r3, #0]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d009      	beq.n	80011d2 <movimientoRC+0x3be>
				acum_encoderL = 0;
 80011be:	4b17      	ldr	r3, [pc, #92]	; (800121c <movimientoRC+0x408>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 80011c4:	4b16      	ldr	r3, [pc, #88]	; (8001220 <movimientoRC+0x40c>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	801a      	strh	r2, [r3, #0]
				status_movimiento = ROTANDO_IZQ;
 80011ca:	4b16      	ldr	r3, [pc, #88]	; (8001224 <movimientoRC+0x410>)
 80011cc:	2203      	movs	r2, #3
 80011ce:	701a      	strb	r2, [r3, #0]
				break;
 80011d0:	e020      	b.n	8001214 <movimientoRC+0x400>
			}

			if (giroDer_cant != 0){
 80011d2:	4b19      	ldr	r3, [pc, #100]	; (8001238 <movimientoRC+0x424>)
 80011d4:	881b      	ldrh	r3, [r3, #0]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d01b      	beq.n	8001212 <movimientoRC+0x3fe>
				acum_encoderL = 0;
 80011da:	4b10      	ldr	r3, [pc, #64]	; (800121c <movimientoRC+0x408>)
 80011dc:	2200      	movs	r2, #0
 80011de:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 80011e0:	4b0f      	ldr	r3, [pc, #60]	; (8001220 <movimientoRC+0x40c>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	801a      	strh	r2, [r3, #0]
				status_movimiento = ROTANDO_DER;
 80011e6:	4b0f      	ldr	r3, [pc, #60]	; (8001224 <movimientoRC+0x410>)
 80011e8:	2204      	movs	r2, #4
 80011ea:	701a      	strb	r2, [r3, #0]
				break;
 80011ec:	e012      	b.n	8001214 <movimientoRC+0x400>

		break;
		case PIVOTE_DER_AVAN:

		default:
		break;
 80011ee:	bf00      	nop
 80011f0:	e010      	b.n	8001214 <movimientoRC+0x400>
		break;
 80011f2:	bf00      	nop
 80011f4:	e00e      	b.n	8001214 <movimientoRC+0x400>
			if (avance_cant > ((acum_encoderL + acum_encoderR) >> 1) ) break;
 80011f6:	bf00      	nop
 80011f8:	e00c      	b.n	8001214 <movimientoRC+0x400>
		break;
 80011fa:	bf00      	nop
 80011fc:	e00a      	b.n	8001214 <movimientoRC+0x400>
			if (giroIzq_cant > ((acum_encoderL + acum_encoderR) >> 1) ) break;
 80011fe:	bf00      	nop
 8001200:	e008      	b.n	8001214 <movimientoRC+0x400>
		break;
 8001202:	bf00      	nop
 8001204:	e006      	b.n	8001214 <movimientoRC+0x400>
			if (giroDer_cant > ((acum_encoderL + acum_encoderR) >> 1) ) break;
 8001206:	bf00      	nop
 8001208:	e004      	b.n	8001214 <movimientoRC+0x400>
		break;
 800120a:	bf00      	nop
 800120c:	e002      	b.n	8001214 <movimientoRC+0x400>
			if (retroceso_cant > ((acum_encoderL + acum_encoderR) >> 1) ) break;
 800120e:	bf00      	nop
 8001210:	e000      	b.n	8001214 <movimientoRC+0x400>
		break;
 8001212:	bf00      	nop

	} //fin switch status_movimiento

} //fin movimientoRC()
 8001214:	bf00      	nop
 8001216:	bd80      	pop	{r7, pc}
 8001218:	20000032 	.word	0x20000032
 800121c:	20000050 	.word	0x20000050
 8001220:	20000052 	.word	0x20000052
 8001224:	2000002e 	.word	0x2000002e
 8001228:	20000034 	.word	0x20000034
 800122c:	40020c00 	.word	0x40020c00
 8001230:	40020800 	.word	0x40020800
 8001234:	20000030 	.word	0x20000030
 8001238:	20000036 	.word	0x20000036

0800123c <encoders>:

void encoders (void){
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0

	if (!flag_encoders) return;
 8001240:	4b38      	ldr	r3, [pc, #224]	; (8001324 <encoders+0xe8>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d067      	beq.n	8001318 <encoders+0xdc>

	encoderL = __HAL_TIM_GET_COUNTER(&htim3);
 8001248:	4b37      	ldr	r3, [pc, #220]	; (8001328 <encoders+0xec>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800124e:	b21a      	sxth	r2, r3
 8001250:	4b36      	ldr	r3, [pc, #216]	; (800132c <encoders+0xf0>)
 8001252:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8001254:	4b34      	ldr	r3, [pc, #208]	; (8001328 <encoders+0xec>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2200      	movs	r2, #0
 800125a:	625a      	str	r2, [r3, #36]	; 0x24
	encoderR = __HAL_TIM_GET_COUNTER(&htim2);
 800125c:	4b34      	ldr	r3, [pc, #208]	; (8001330 <encoders+0xf4>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001262:	b21a      	sxth	r2, r3
 8001264:	4b33      	ldr	r3, [pc, #204]	; (8001334 <encoders+0xf8>)
 8001266:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8001268:	4b31      	ldr	r3, [pc, #196]	; (8001330 <encoders+0xf4>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2200      	movs	r2, #0
 800126e:	625a      	str	r2, [r3, #36]	; 0x24

	if (encoderL > 5){
 8001270:	4b2e      	ldr	r3, [pc, #184]	; (800132c <encoders+0xf0>)
 8001272:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001276:	2b05      	cmp	r3, #5
 8001278:	dd08      	ble.n	800128c <encoders+0x50>
		if (TIM4->CCR1 > 45)
 800127a:	4b2f      	ldr	r3, [pc, #188]	; (8001338 <encoders+0xfc>)
 800127c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800127e:	2b2d      	cmp	r3, #45	; 0x2d
 8001280:	d911      	bls.n	80012a6 <encoders+0x6a>
			TIM4->CCR1--;
 8001282:	4b2d      	ldr	r3, [pc, #180]	; (8001338 <encoders+0xfc>)
 8001284:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001286:	3a01      	subs	r2, #1
 8001288:	635a      	str	r2, [r3, #52]	; 0x34
 800128a:	e00c      	b.n	80012a6 <encoders+0x6a>
	}else if (encoderL < 5){
 800128c:	4b27      	ldr	r3, [pc, #156]	; (800132c <encoders+0xf0>)
 800128e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001292:	2b04      	cmp	r3, #4
 8001294:	dc07      	bgt.n	80012a6 <encoders+0x6a>
		if (TIM4->CCR1 < 95)
 8001296:	4b28      	ldr	r3, [pc, #160]	; (8001338 <encoders+0xfc>)
 8001298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800129a:	2b5e      	cmp	r3, #94	; 0x5e
 800129c:	d803      	bhi.n	80012a6 <encoders+0x6a>
			TIM4->CCR1++;
 800129e:	4b26      	ldr	r3, [pc, #152]	; (8001338 <encoders+0xfc>)
 80012a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012a2:	3201      	adds	r2, #1
 80012a4:	635a      	str	r2, [r3, #52]	; 0x34
	}

	if (encoderR > 5){
 80012a6:	4b23      	ldr	r3, [pc, #140]	; (8001334 <encoders+0xf8>)
 80012a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012ac:	2b05      	cmp	r3, #5
 80012ae:	dd08      	ble.n	80012c2 <encoders+0x86>
		if (TIM4->CCR2 > 45)
 80012b0:	4b21      	ldr	r3, [pc, #132]	; (8001338 <encoders+0xfc>)
 80012b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012b4:	2b2d      	cmp	r3, #45	; 0x2d
 80012b6:	d911      	bls.n	80012dc <encoders+0xa0>
			TIM4->CCR2--;
 80012b8:	4b1f      	ldr	r3, [pc, #124]	; (8001338 <encoders+0xfc>)
 80012ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80012bc:	3a01      	subs	r2, #1
 80012be:	639a      	str	r2, [r3, #56]	; 0x38
 80012c0:	e00c      	b.n	80012dc <encoders+0xa0>
	}else if (encoderR < 5){
 80012c2:	4b1c      	ldr	r3, [pc, #112]	; (8001334 <encoders+0xf8>)
 80012c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012c8:	2b04      	cmp	r3, #4
 80012ca:	dc07      	bgt.n	80012dc <encoders+0xa0>
		if (TIM4->CCR2 < 95)
 80012cc:	4b1a      	ldr	r3, [pc, #104]	; (8001338 <encoders+0xfc>)
 80012ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012d0:	2b5e      	cmp	r3, #94	; 0x5e
 80012d2:	d803      	bhi.n	80012dc <encoders+0xa0>
			TIM4->CCR2++;
 80012d4:	4b18      	ldr	r3, [pc, #96]	; (8001338 <encoders+0xfc>)
 80012d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80012d8:	3201      	adds	r2, #1
 80012da:	639a      	str	r2, [r3, #56]	; 0x38
	}

	acum_encoderL += encoderL;
 80012dc:	4b17      	ldr	r3, [pc, #92]	; (800133c <encoders+0x100>)
 80012de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012e2:	b29a      	uxth	r2, r3
 80012e4:	4b11      	ldr	r3, [pc, #68]	; (800132c <encoders+0xf0>)
 80012e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	4413      	add	r3, r2
 80012ee:	b29b      	uxth	r3, r3
 80012f0:	b21a      	sxth	r2, r3
 80012f2:	4b12      	ldr	r3, [pc, #72]	; (800133c <encoders+0x100>)
 80012f4:	801a      	strh	r2, [r3, #0]
	acum_encoderR += encoderR;
 80012f6:	4b12      	ldr	r3, [pc, #72]	; (8001340 <encoders+0x104>)
 80012f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012fc:	b29a      	uxth	r2, r3
 80012fe:	4b0d      	ldr	r3, [pc, #52]	; (8001334 <encoders+0xf8>)
 8001300:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001304:	b29b      	uxth	r3, r3
 8001306:	4413      	add	r3, r2
 8001308:	b29b      	uxth	r3, r3
 800130a:	b21a      	sxth	r2, r3
 800130c:	4b0c      	ldr	r3, [pc, #48]	; (8001340 <encoders+0x104>)
 800130e:	801a      	strh	r2, [r3, #0]

	flag_encoders = 0;
 8001310:	4b04      	ldr	r3, [pc, #16]	; (8001324 <encoders+0xe8>)
 8001312:	2200      	movs	r2, #0
 8001314:	701a      	strb	r2, [r3, #0]
 8001316:	e000      	b.n	800131a <encoders+0xde>
	if (!flag_encoders) return;
 8001318:	bf00      	nop

} //fin encoders()
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	2000004e 	.word	0x2000004e
 8001328:	20000150 	.word	0x20000150
 800132c:	200000ca 	.word	0x200000ca
 8001330:	20000190 	.word	0x20000190
 8001334:	200000cc 	.word	0x200000cc
 8001338:	40000800 	.word	0x40000800
 800133c:	20000050 	.word	0x20000050
 8001340:	20000052 	.word	0x20000052

08001344 <check_rxUart>:

	HAL_UART_Transmit(&huart7, txUart, 4, 20);
	HAL_UART_Receive_IT(&huart7, rxUart, 4);
}

void check_rxUart (void){
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0

	if (rxUart[3] != 0){
 8001348:	4b7a      	ldr	r3, [pc, #488]	; (8001534 <check_rxUart+0x1f0>)
 800134a:	78db      	ldrb	r3, [r3, #3]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d010      	beq.n	8001372 <check_rxUart+0x2e>
		txUart[0] = CMD_ERROR;
 8001350:	4b79      	ldr	r3, [pc, #484]	; (8001538 <check_rxUart+0x1f4>)
 8001352:	2204      	movs	r2, #4
 8001354:	701a      	strb	r2, [r3, #0]
		txUart[3] = '\0';
 8001356:	4b78      	ldr	r3, [pc, #480]	; (8001538 <check_rxUart+0x1f4>)
 8001358:	2200      	movs	r2, #0
 800135a:	70da      	strb	r2, [r3, #3]
		HAL_UART_Transmit_IT(&huart7, txUart, 4);
 800135c:	2204      	movs	r2, #4
 800135e:	4976      	ldr	r1, [pc, #472]	; (8001538 <check_rxUart+0x1f4>)
 8001360:	4876      	ldr	r0, [pc, #472]	; (800153c <check_rxUart+0x1f8>)
 8001362:	f003 fa7a 	bl	800485a <HAL_UART_Transmit_IT>
		HAL_UART_Receive_IT(&huart7, rxUart, 4);
 8001366:	2204      	movs	r2, #4
 8001368:	4972      	ldr	r1, [pc, #456]	; (8001534 <check_rxUart+0x1f0>)
 800136a:	4874      	ldr	r0, [pc, #464]	; (800153c <check_rxUart+0x1f8>)
 800136c:	f003 faba 	bl	80048e4 <HAL_UART_Receive_IT>
		return;
 8001370:	e0de      	b.n	8001530 <check_rxUart+0x1ec>
	}

	switch (rxUart[0]) {
 8001372:	4b70      	ldr	r3, [pc, #448]	; (8001534 <check_rxUart+0x1f0>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	3b01      	subs	r3, #1
 8001378:	2b0c      	cmp	r3, #12
 800137a:	f200 80d4 	bhi.w	8001526 <check_rxUart+0x1e2>
 800137e:	a201      	add	r2, pc, #4	; (adr r2, 8001384 <check_rxUart+0x40>)
 8001380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001384:	080013b9 	.word	0x080013b9
 8001388:	08001527 	.word	0x08001527
 800138c:	08001527 	.word	0x08001527
 8001390:	08001527 	.word	0x08001527
 8001394:	080013d7 	.word	0x080013d7
 8001398:	08001527 	.word	0x08001527
 800139c:	08001527 	.word	0x08001527
 80013a0:	08001527 	.word	0x08001527
 80013a4:	08001527 	.word	0x08001527
 80013a8:	08001447 	.word	0x08001447
 80013ac:	080014b7 	.word	0x080014b7
 80013b0:	080014ef 	.word	0x080014ef
 80013b4:	0800147f 	.word	0x0800147f
		case HOLA:
			esp01Presente = 1;
 80013b8:	4b61      	ldr	r3, [pc, #388]	; (8001540 <check_rxUart+0x1fc>)
 80013ba:	2201      	movs	r2, #1
 80013bc:	701a      	strb	r2, [r3, #0]
			txUart[0] = HOLA;
 80013be:	4b5e      	ldr	r3, [pc, #376]	; (8001538 <check_rxUart+0x1f4>)
 80013c0:	2201      	movs	r2, #1
 80013c2:	701a      	strb	r2, [r3, #0]
			txUart[3] = '\0';
 80013c4:	4b5c      	ldr	r3, [pc, #368]	; (8001538 <check_rxUart+0x1f4>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	70da      	strb	r2, [r3, #3]
			HAL_UART_Transmit_IT(&huart7, txUart, 4);
 80013ca:	2204      	movs	r2, #4
 80013cc:	495a      	ldr	r1, [pc, #360]	; (8001538 <check_rxUart+0x1f4>)
 80013ce:	485b      	ldr	r0, [pc, #364]	; (800153c <check_rxUart+0x1f8>)
 80013d0:	f003 fa43 	bl	800485a <HAL_UART_Transmit_IT>

		break;
 80013d4:	e0a7      	b.n	8001526 <check_rxUart+0x1e2>
		case MODO:

			switch (rxUart[1]) {
 80013d6:	4b57      	ldr	r3, [pc, #348]	; (8001534 <check_rxUart+0x1f0>)
 80013d8:	785b      	ldrb	r3, [r3, #1]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d002      	beq.n	80013e4 <check_rxUart+0xa0>
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d012      	beq.n	8001408 <check_rxUart+0xc4>
 80013e2:	e023      	b.n	800142c <check_rxUart+0xe8>
				case AUTOMATICO:
					modoFuncionamiento = AUTOMATICO;
 80013e4:	4b57      	ldr	r3, [pc, #348]	; (8001544 <check_rxUart+0x200>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	701a      	strb	r2, [r3, #0]
					flag_encoders = 0;
 80013ea:	4b57      	ldr	r3, [pc, #348]	; (8001548 <check_rxUart+0x204>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	701a      	strb	r2, [r3, #0]
					txUart[0] = OK;
 80013f0:	4b51      	ldr	r3, [pc, #324]	; (8001538 <check_rxUart+0x1f4>)
 80013f2:	2202      	movs	r2, #2
 80013f4:	701a      	strb	r2, [r3, #0]
					txUart[3] = '\0';
 80013f6:	4b50      	ldr	r3, [pc, #320]	; (8001538 <check_rxUart+0x1f4>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	70da      	strb	r2, [r3, #3]
					HAL_UART_Transmit_IT(&huart7, txUart, 4);
 80013fc:	2204      	movs	r2, #4
 80013fe:	494e      	ldr	r1, [pc, #312]	; (8001538 <check_rxUart+0x1f4>)
 8001400:	484e      	ldr	r0, [pc, #312]	; (800153c <check_rxUart+0x1f8>)
 8001402:	f003 fa2a 	bl	800485a <HAL_UART_Transmit_IT>
				break;
 8001406:	e01d      	b.n	8001444 <check_rxUart+0x100>
				case MANUAL:
					status_movimiento = QUIETO;
 8001408:	4b50      	ldr	r3, [pc, #320]	; (800154c <check_rxUart+0x208>)
 800140a:	2200      	movs	r2, #0
 800140c:	701a      	strb	r2, [r3, #0]
					modoFuncionamiento = MANUAL;
 800140e:	4b4d      	ldr	r3, [pc, #308]	; (8001544 <check_rxUart+0x200>)
 8001410:	2201      	movs	r2, #1
 8001412:	701a      	strb	r2, [r3, #0]
					txUart[0] = OK;
 8001414:	4b48      	ldr	r3, [pc, #288]	; (8001538 <check_rxUart+0x1f4>)
 8001416:	2202      	movs	r2, #2
 8001418:	701a      	strb	r2, [r3, #0]
					txUart[3] = '\0';
 800141a:	4b47      	ldr	r3, [pc, #284]	; (8001538 <check_rxUart+0x1f4>)
 800141c:	2200      	movs	r2, #0
 800141e:	70da      	strb	r2, [r3, #3]
					HAL_UART_Transmit_IT(&huart7, txUart, 4);
 8001420:	2204      	movs	r2, #4
 8001422:	4945      	ldr	r1, [pc, #276]	; (8001538 <check_rxUart+0x1f4>)
 8001424:	4845      	ldr	r0, [pc, #276]	; (800153c <check_rxUart+0x1f8>)
 8001426:	f003 fa18 	bl	800485a <HAL_UART_Transmit_IT>
				break;
 800142a:	e00b      	b.n	8001444 <check_rxUart+0x100>
				default:
					txUart[0] = CMD_ERROR;
 800142c:	4b42      	ldr	r3, [pc, #264]	; (8001538 <check_rxUart+0x1f4>)
 800142e:	2204      	movs	r2, #4
 8001430:	701a      	strb	r2, [r3, #0]
					txUart[3] = '\0';
 8001432:	4b41      	ldr	r3, [pc, #260]	; (8001538 <check_rxUart+0x1f4>)
 8001434:	2200      	movs	r2, #0
 8001436:	70da      	strb	r2, [r3, #3]
					HAL_UART_Transmit_IT(&huart7, txUart, 4);
 8001438:	2204      	movs	r2, #4
 800143a:	493f      	ldr	r1, [pc, #252]	; (8001538 <check_rxUart+0x1f4>)
 800143c:	483f      	ldr	r0, [pc, #252]	; (800153c <check_rxUart+0x1f8>)
 800143e:	f003 fa0c 	bl	800485a <HAL_UART_Transmit_IT>
			} //end switch rxUart[1]

		break;
 8001442:	e070      	b.n	8001526 <check_rxUart+0x1e2>
 8001444:	e06f      	b.n	8001526 <check_rxUart+0x1e2>

		case AVANCE:
			avance_cant += (uint16_t) (rxUart[2] + (rxUart[1] << 8));
 8001446:	4b3b      	ldr	r3, [pc, #236]	; (8001534 <check_rxUart+0x1f0>)
 8001448:	789b      	ldrb	r3, [r3, #2]
 800144a:	b29a      	uxth	r2, r3
 800144c:	4b39      	ldr	r3, [pc, #228]	; (8001534 <check_rxUart+0x1f0>)
 800144e:	785b      	ldrb	r3, [r3, #1]
 8001450:	b29b      	uxth	r3, r3
 8001452:	021b      	lsls	r3, r3, #8
 8001454:	b29b      	uxth	r3, r3
 8001456:	4413      	add	r3, r2
 8001458:	b29a      	uxth	r2, r3
 800145a:	4b3d      	ldr	r3, [pc, #244]	; (8001550 <check_rxUart+0x20c>)
 800145c:	881b      	ldrh	r3, [r3, #0]
 800145e:	4413      	add	r3, r2
 8001460:	b29a      	uxth	r2, r3
 8001462:	4b3b      	ldr	r3, [pc, #236]	; (8001550 <check_rxUart+0x20c>)
 8001464:	801a      	strh	r2, [r3, #0]

			txUart[0] = OK;
 8001466:	4b34      	ldr	r3, [pc, #208]	; (8001538 <check_rxUart+0x1f4>)
 8001468:	2202      	movs	r2, #2
 800146a:	701a      	strb	r2, [r3, #0]
			txUart[3] = '\0';
 800146c:	4b32      	ldr	r3, [pc, #200]	; (8001538 <check_rxUart+0x1f4>)
 800146e:	2200      	movs	r2, #0
 8001470:	70da      	strb	r2, [r3, #3]
			HAL_UART_Transmit_IT(&huart7, txUart, 4);
 8001472:	2204      	movs	r2, #4
 8001474:	4930      	ldr	r1, [pc, #192]	; (8001538 <check_rxUart+0x1f4>)
 8001476:	4831      	ldr	r0, [pc, #196]	; (800153c <check_rxUart+0x1f8>)
 8001478:	f003 f9ef 	bl	800485a <HAL_UART_Transmit_IT>
		break;
 800147c:	e053      	b.n	8001526 <check_rxUart+0x1e2>
		case RETROCEDE:
			retroceso_cant += (uint16_t) (rxUart[2] + (rxUart[1] << 8));
 800147e:	4b2d      	ldr	r3, [pc, #180]	; (8001534 <check_rxUart+0x1f0>)
 8001480:	789b      	ldrb	r3, [r3, #2]
 8001482:	b29a      	uxth	r2, r3
 8001484:	4b2b      	ldr	r3, [pc, #172]	; (8001534 <check_rxUart+0x1f0>)
 8001486:	785b      	ldrb	r3, [r3, #1]
 8001488:	b29b      	uxth	r3, r3
 800148a:	021b      	lsls	r3, r3, #8
 800148c:	b29b      	uxth	r3, r3
 800148e:	4413      	add	r3, r2
 8001490:	b29a      	uxth	r2, r3
 8001492:	4b30      	ldr	r3, [pc, #192]	; (8001554 <check_rxUart+0x210>)
 8001494:	881b      	ldrh	r3, [r3, #0]
 8001496:	4413      	add	r3, r2
 8001498:	b29a      	uxth	r2, r3
 800149a:	4b2e      	ldr	r3, [pc, #184]	; (8001554 <check_rxUart+0x210>)
 800149c:	801a      	strh	r2, [r3, #0]

			txUart[0] = OK;
 800149e:	4b26      	ldr	r3, [pc, #152]	; (8001538 <check_rxUart+0x1f4>)
 80014a0:	2202      	movs	r2, #2
 80014a2:	701a      	strb	r2, [r3, #0]
			txUart[3] = '\0';
 80014a4:	4b24      	ldr	r3, [pc, #144]	; (8001538 <check_rxUart+0x1f4>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	70da      	strb	r2, [r3, #3]
			HAL_UART_Transmit_IT(&huart7, txUart, 4);
 80014aa:	2204      	movs	r2, #4
 80014ac:	4922      	ldr	r1, [pc, #136]	; (8001538 <check_rxUart+0x1f4>)
 80014ae:	4823      	ldr	r0, [pc, #140]	; (800153c <check_rxUart+0x1f8>)
 80014b0:	f003 f9d3 	bl	800485a <HAL_UART_Transmit_IT>
			//sprintf(txUart, "RETR");
		break;
 80014b4:	e037      	b.n	8001526 <check_rxUart+0x1e2>
		case GIRO_IZQ:
			giroIzq_cant += (uint16_t) (rxUart[2] + (rxUart[1] << 8));
 80014b6:	4b1f      	ldr	r3, [pc, #124]	; (8001534 <check_rxUart+0x1f0>)
 80014b8:	789b      	ldrb	r3, [r3, #2]
 80014ba:	b29a      	uxth	r2, r3
 80014bc:	4b1d      	ldr	r3, [pc, #116]	; (8001534 <check_rxUart+0x1f0>)
 80014be:	785b      	ldrb	r3, [r3, #1]
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	021b      	lsls	r3, r3, #8
 80014c4:	b29b      	uxth	r3, r3
 80014c6:	4413      	add	r3, r2
 80014c8:	b29a      	uxth	r2, r3
 80014ca:	4b23      	ldr	r3, [pc, #140]	; (8001558 <check_rxUart+0x214>)
 80014cc:	881b      	ldrh	r3, [r3, #0]
 80014ce:	4413      	add	r3, r2
 80014d0:	b29a      	uxth	r2, r3
 80014d2:	4b21      	ldr	r3, [pc, #132]	; (8001558 <check_rxUart+0x214>)
 80014d4:	801a      	strh	r2, [r3, #0]

			txUart[0] = OK;
 80014d6:	4b18      	ldr	r3, [pc, #96]	; (8001538 <check_rxUart+0x1f4>)
 80014d8:	2202      	movs	r2, #2
 80014da:	701a      	strb	r2, [r3, #0]
			txUart[3] = '\0';
 80014dc:	4b16      	ldr	r3, [pc, #88]	; (8001538 <check_rxUart+0x1f4>)
 80014de:	2200      	movs	r2, #0
 80014e0:	70da      	strb	r2, [r3, #3]
			HAL_UART_Transmit_IT(&huart7, txUart, 4);
 80014e2:	2204      	movs	r2, #4
 80014e4:	4914      	ldr	r1, [pc, #80]	; (8001538 <check_rxUart+0x1f4>)
 80014e6:	4815      	ldr	r0, [pc, #84]	; (800153c <check_rxUart+0x1f8>)
 80014e8:	f003 f9b7 	bl	800485a <HAL_UART_Transmit_IT>
			//sprintf(txUart, "IZQU");
		break;
 80014ec:	e01b      	b.n	8001526 <check_rxUart+0x1e2>
		case GIRO_DER:
			giroDer_cant += (uint16_t) (rxUart[2] + (rxUart[1] << 8));
 80014ee:	4b11      	ldr	r3, [pc, #68]	; (8001534 <check_rxUart+0x1f0>)
 80014f0:	789b      	ldrb	r3, [r3, #2]
 80014f2:	b29a      	uxth	r2, r3
 80014f4:	4b0f      	ldr	r3, [pc, #60]	; (8001534 <check_rxUart+0x1f0>)
 80014f6:	785b      	ldrb	r3, [r3, #1]
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	021b      	lsls	r3, r3, #8
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	4413      	add	r3, r2
 8001500:	b29a      	uxth	r2, r3
 8001502:	4b16      	ldr	r3, [pc, #88]	; (800155c <check_rxUart+0x218>)
 8001504:	881b      	ldrh	r3, [r3, #0]
 8001506:	4413      	add	r3, r2
 8001508:	b29a      	uxth	r2, r3
 800150a:	4b14      	ldr	r3, [pc, #80]	; (800155c <check_rxUart+0x218>)
 800150c:	801a      	strh	r2, [r3, #0]

			txUart[0] = OK;
 800150e:	4b0a      	ldr	r3, [pc, #40]	; (8001538 <check_rxUart+0x1f4>)
 8001510:	2202      	movs	r2, #2
 8001512:	701a      	strb	r2, [r3, #0]
			txUart[3] = '\0';
 8001514:	4b08      	ldr	r3, [pc, #32]	; (8001538 <check_rxUart+0x1f4>)
 8001516:	2200      	movs	r2, #0
 8001518:	70da      	strb	r2, [r3, #3]
			HAL_UART_Transmit_IT(&huart7, txUart, 4);
 800151a:	2204      	movs	r2, #4
 800151c:	4906      	ldr	r1, [pc, #24]	; (8001538 <check_rxUart+0x1f4>)
 800151e:	4807      	ldr	r0, [pc, #28]	; (800153c <check_rxUart+0x1f8>)
 8001520:	f003 f99b 	bl	800485a <HAL_UART_Transmit_IT>
			//sprintf(txUart, "DERE");
		break;
 8001524:	bf00      	nop
	} //end switch rxUart[0]

	HAL_UART_Receive_IT(&huart7, rxUart, 4);
 8001526:	2204      	movs	r2, #4
 8001528:	4902      	ldr	r1, [pc, #8]	; (8001534 <check_rxUart+0x1f0>)
 800152a:	4804      	ldr	r0, [pc, #16]	; (800153c <check_rxUart+0x1f8>)
 800152c:	f003 f9da 	bl	80048e4 <HAL_UART_Receive_IT>

} //end check_rxUart ()
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	200000c0 	.word	0x200000c0
 8001538:	200000c4 	.word	0x200000c4
 800153c:	20000210 	.word	0x20000210
 8001540:	2000002d 	.word	0x2000002d
 8001544:	20000000 	.word	0x20000000
 8001548:	2000004e 	.word	0x2000004e
 800154c:	2000002e 	.word	0x2000002e
 8001550:	20000030 	.word	0x20000030
 8001554:	20000032 	.word	0x20000032
 8001558:	20000034 	.word	0x20000034
 800155c:	20000036 	.word	0x20000036

08001560 <modo_funcionamiento>:

void modo_funcionamiento (void){
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0

	switch (modoFuncionamiento) {
 8001564:	4b08      	ldr	r3, [pc, #32]	; (8001588 <modo_funcionamiento+0x28>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d002      	beq.n	8001572 <modo_funcionamiento+0x12>
 800156c:	2b01      	cmp	r3, #1
 800156e:	d005      	beq.n	800157c <modo_funcionamiento+0x1c>
		break;
		case MANUAL:
			movimientoRC();
		break;
		default:
		break;
 8001570:	e007      	b.n	8001582 <modo_funcionamiento+0x22>
			movimientoLibre();
 8001572:	f7ff fb51 	bl	8000c18 <movimientoLibre>
			encoders();
 8001576:	f7ff fe61 	bl	800123c <encoders>
		break;
 800157a:	e002      	b.n	8001582 <modo_funcionamiento+0x22>
			movimientoRC();
 800157c:	f7ff fc4a 	bl	8000e14 <movimientoRC>
		break;
 8001580:	bf00      	nop
	} //end switch modoFuncionamiento

} //end modo_funcionamiento ()
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	20000000 	.word	0x20000000

0800158c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001590:	bf00      	nop
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
	...

0800159c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	607b      	str	r3, [r7, #4]
 80015a6:	4b10      	ldr	r3, [pc, #64]	; (80015e8 <HAL_MspInit+0x4c>)
 80015a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015aa:	4a0f      	ldr	r2, [pc, #60]	; (80015e8 <HAL_MspInit+0x4c>)
 80015ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015b0:	6453      	str	r3, [r2, #68]	; 0x44
 80015b2:	4b0d      	ldr	r3, [pc, #52]	; (80015e8 <HAL_MspInit+0x4c>)
 80015b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ba:	607b      	str	r3, [r7, #4]
 80015bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	603b      	str	r3, [r7, #0]
 80015c2:	4b09      	ldr	r3, [pc, #36]	; (80015e8 <HAL_MspInit+0x4c>)
 80015c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c6:	4a08      	ldr	r2, [pc, #32]	; (80015e8 <HAL_MspInit+0x4c>)
 80015c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015cc:	6413      	str	r3, [r2, #64]	; 0x40
 80015ce:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <HAL_MspInit+0x4c>)
 80015d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015d6:	603b      	str	r3, [r7, #0]
 80015d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015da:	bf00      	nop
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	40023800 	.word	0x40023800

080015ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80015f0:	bf00      	nop
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr

080015fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015fa:	b480      	push	{r7}
 80015fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015fe:	e7fe      	b.n	80015fe <HardFault_Handler+0x4>

08001600 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001604:	e7fe      	b.n	8001604 <MemManage_Handler+0x4>

08001606 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001606:	b480      	push	{r7}
 8001608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800160a:	e7fe      	b.n	800160a <BusFault_Handler+0x4>

0800160c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001610:	e7fe      	b.n	8001610 <UsageFault_Handler+0x4>

08001612 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001612:	b480      	push	{r7}
 8001614:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001616:	bf00      	nop
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001624:	bf00      	nop
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr

0800162e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800162e:	b480      	push	{r7}
 8001630:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001640:	f000 fc86 	bl	8001f50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001644:	bf00      	nop
 8001646:	bd80      	pop	{r7, pc}

08001648 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800164c:	4802      	ldr	r0, [pc, #8]	; (8001658 <TIM5_IRQHandler+0x10>)
 800164e:	f002 f807 	bl	8003660 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20000110 	.word	0x20000110

0800165c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001660:	4802      	ldr	r0, [pc, #8]	; (800166c <TIM7_IRQHandler+0x10>)
 8001662:	f001 fffd 	bl	8003660 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	200001d0 	.word	0x200001d0

08001670 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8001674:	4802      	ldr	r0, [pc, #8]	; (8001680 <UART7_IRQHandler+0x10>)
 8001676:	f003 f98b 	bl	8004990 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	20000210 	.word	0x20000210

08001684 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001688:	4b08      	ldr	r3, [pc, #32]	; (80016ac <SystemInit+0x28>)
 800168a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800168e:	4a07      	ldr	r2, [pc, #28]	; (80016ac <SystemInit+0x28>)
 8001690:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001694:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001698:	4b04      	ldr	r3, [pc, #16]	; (80016ac <SystemInit+0x28>)
 800169a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800169e:	609a      	str	r2, [r3, #8]
#endif
}
 80016a0:	bf00      	nop
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	e000ed00 	.word	0xe000ed00

080016b0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b086      	sub	sp, #24
 80016b4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016b6:	f107 0308 	add.w	r3, r7, #8
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	605a      	str	r2, [r3, #4]
 80016c0:	609a      	str	r2, [r3, #8]
 80016c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016c4:	463b      	mov	r3, r7
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 80016cc:	4b20      	ldr	r3, [pc, #128]	; (8001750 <MX_TIM2_Init+0xa0>)
 80016ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80016d4:	4b1e      	ldr	r3, [pc, #120]	; (8001750 <MX_TIM2_Init+0xa0>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016da:	4b1d      	ldr	r3, [pc, #116]	; (8001750 <MX_TIM2_Init+0xa0>)
 80016dc:	2200      	movs	r2, #0
 80016de:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80016e0:	4b1b      	ldr	r3, [pc, #108]	; (8001750 <MX_TIM2_Init+0xa0>)
 80016e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016e8:	4b19      	ldr	r3, [pc, #100]	; (8001750 <MX_TIM2_Init+0xa0>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ee:	4b18      	ldr	r3, [pc, #96]	; (8001750 <MX_TIM2_Init+0xa0>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016f4:	4816      	ldr	r0, [pc, #88]	; (8001750 <MX_TIM2_Init+0xa0>)
 80016f6:	f001 fe2f 	bl	8003358 <HAL_TIM_Base_Init>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001700:	f7ff ff44 	bl	800158c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8001704:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001708:	60bb      	str	r3, [r7, #8]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 800170a:	2300      	movs	r3, #0
 800170c:	60fb      	str	r3, [r7, #12]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 800170e:	2300      	movs	r3, #0
 8001710:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockFilter = 0;
 8001712:	2300      	movs	r3, #0
 8001714:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001716:	f107 0308 	add.w	r3, r7, #8
 800171a:	4619      	mov	r1, r3
 800171c:	480c      	ldr	r0, [pc, #48]	; (8001750 <MX_TIM2_Init+0xa0>)
 800171e:	f002 fa09 	bl	8003b34 <HAL_TIM_ConfigClockSource>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8001728:	f7ff ff30 	bl	800158c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800172c:	2300      	movs	r3, #0
 800172e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001730:	2300      	movs	r3, #0
 8001732:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001734:	463b      	mov	r3, r7
 8001736:	4619      	mov	r1, r3
 8001738:	4805      	ldr	r0, [pc, #20]	; (8001750 <MX_TIM2_Init+0xa0>)
 800173a:	f002 ff0b 	bl	8004554 <HAL_TIMEx_MasterConfigSynchronization>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001744:	f7ff ff22 	bl	800158c <Error_Handler>
  }

}
 8001748:	bf00      	nop
 800174a:	3718      	adds	r7, #24
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	20000190 	.word	0x20000190

08001754 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b086      	sub	sp, #24
 8001758:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800175a:	f107 0308 	add.w	r3, r7, #8
 800175e:	2200      	movs	r2, #0
 8001760:	601a      	str	r2, [r3, #0]
 8001762:	605a      	str	r2, [r3, #4]
 8001764:	609a      	str	r2, [r3, #8]
 8001766:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001768:	463b      	mov	r3, r7
 800176a:	2200      	movs	r2, #0
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8001770:	4b20      	ldr	r3, [pc, #128]	; (80017f4 <MX_TIM3_Init+0xa0>)
 8001772:	4a21      	ldr	r2, [pc, #132]	; (80017f8 <MX_TIM3_Init+0xa4>)
 8001774:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001776:	4b1f      	ldr	r3, [pc, #124]	; (80017f4 <MX_TIM3_Init+0xa0>)
 8001778:	2200      	movs	r2, #0
 800177a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800177c:	4b1d      	ldr	r3, [pc, #116]	; (80017f4 <MX_TIM3_Init+0xa0>)
 800177e:	2200      	movs	r2, #0
 8001780:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001782:	4b1c      	ldr	r3, [pc, #112]	; (80017f4 <MX_TIM3_Init+0xa0>)
 8001784:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001788:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800178a:	4b1a      	ldr	r3, [pc, #104]	; (80017f4 <MX_TIM3_Init+0xa0>)
 800178c:	2200      	movs	r2, #0
 800178e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001790:	4b18      	ldr	r3, [pc, #96]	; (80017f4 <MX_TIM3_Init+0xa0>)
 8001792:	2200      	movs	r2, #0
 8001794:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001796:	4817      	ldr	r0, [pc, #92]	; (80017f4 <MX_TIM3_Init+0xa0>)
 8001798:	f001 fdde 	bl	8003358 <HAL_TIM_Base_Init>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80017a2:	f7ff fef3 	bl	800158c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 80017a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017aa:	60bb      	str	r3, [r7, #8]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 80017ac:	2300      	movs	r3, #0
 80017ae:	60fb      	str	r3, [r7, #12]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 80017b0:	2300      	movs	r3, #0
 80017b2:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockFilter = 0;
 80017b4:	2300      	movs	r3, #0
 80017b6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80017b8:	f107 0308 	add.w	r3, r7, #8
 80017bc:	4619      	mov	r1, r3
 80017be:	480d      	ldr	r0, [pc, #52]	; (80017f4 <MX_TIM3_Init+0xa0>)
 80017c0:	f002 f9b8 	bl	8003b34 <HAL_TIM_ConfigClockSource>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80017ca:	f7ff fedf 	bl	800158c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017ce:	2300      	movs	r3, #0
 80017d0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017d2:	2300      	movs	r3, #0
 80017d4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017d6:	463b      	mov	r3, r7
 80017d8:	4619      	mov	r1, r3
 80017da:	4806      	ldr	r0, [pc, #24]	; (80017f4 <MX_TIM3_Init+0xa0>)
 80017dc:	f002 feba 	bl	8004554 <HAL_TIMEx_MasterConfigSynchronization>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80017e6:	f7ff fed1 	bl	800158c <Error_Handler>
  }

}
 80017ea:	bf00      	nop
 80017ec:	3718      	adds	r7, #24
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	20000150 	.word	0x20000150
 80017f8:	40000400 	.word	0x40000400

080017fc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b08e      	sub	sp, #56	; 0x38
 8001800:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001802:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001806:	2200      	movs	r2, #0
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	605a      	str	r2, [r3, #4]
 800180c:	609a      	str	r2, [r3, #8]
 800180e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001810:	f107 0320 	add.w	r3, r7, #32
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800181a:	1d3b      	adds	r3, r7, #4
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	605a      	str	r2, [r3, #4]
 8001822:	609a      	str	r2, [r3, #8]
 8001824:	60da      	str	r2, [r3, #12]
 8001826:	611a      	str	r2, [r3, #16]
 8001828:	615a      	str	r2, [r3, #20]
 800182a:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 800182c:	4b31      	ldr	r3, [pc, #196]	; (80018f4 <MX_TIM4_Init+0xf8>)
 800182e:	4a32      	ldr	r2, [pc, #200]	; (80018f8 <MX_TIM4_Init+0xfc>)
 8001830:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 30-1;
 8001832:	4b30      	ldr	r3, [pc, #192]	; (80018f4 <MX_TIM4_Init+0xf8>)
 8001834:	221d      	movs	r2, #29
 8001836:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001838:	4b2e      	ldr	r3, [pc, #184]	; (80018f4 <MX_TIM4_Init+0xf8>)
 800183a:	2200      	movs	r2, #0
 800183c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 800183e:	4b2d      	ldr	r3, [pc, #180]	; (80018f4 <MX_TIM4_Init+0xf8>)
 8001840:	2263      	movs	r2, #99	; 0x63
 8001842:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001844:	4b2b      	ldr	r3, [pc, #172]	; (80018f4 <MX_TIM4_Init+0xf8>)
 8001846:	2200      	movs	r2, #0
 8001848:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800184a:	4b2a      	ldr	r3, [pc, #168]	; (80018f4 <MX_TIM4_Init+0xf8>)
 800184c:	2200      	movs	r2, #0
 800184e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001850:	4828      	ldr	r0, [pc, #160]	; (80018f4 <MX_TIM4_Init+0xf8>)
 8001852:	f001 fd81 	bl	8003358 <HAL_TIM_Base_Init>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 800185c:	f7ff fe96 	bl	800158c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001860:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001864:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001866:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800186a:	4619      	mov	r1, r3
 800186c:	4821      	ldr	r0, [pc, #132]	; (80018f4 <MX_TIM4_Init+0xf8>)
 800186e:	f002 f961 	bl	8003b34 <HAL_TIM_ConfigClockSource>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8001878:	f7ff fe88 	bl	800158c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800187c:	481d      	ldr	r0, [pc, #116]	; (80018f4 <MX_TIM4_Init+0xf8>)
 800187e:	f001 fdde 	bl	800343e <HAL_TIM_PWM_Init>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8001888:	f7ff fe80 	bl	800158c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800188c:	2300      	movs	r3, #0
 800188e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001890:	2300      	movs	r3, #0
 8001892:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001894:	f107 0320 	add.w	r3, r7, #32
 8001898:	4619      	mov	r1, r3
 800189a:	4816      	ldr	r0, [pc, #88]	; (80018f4 <MX_TIM4_Init+0xf8>)
 800189c:	f002 fe5a 	bl	8004554 <HAL_TIMEx_MasterConfigSynchronization>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 80018a6:	f7ff fe71 	bl	800158c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018aa:	2360      	movs	r3, #96	; 0x60
 80018ac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 72-1;
 80018ae:	2347      	movs	r3, #71	; 0x47
 80018b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018b2:	2300      	movs	r3, #0
 80018b4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018b6:	2300      	movs	r3, #0
 80018b8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018ba:	1d3b      	adds	r3, r7, #4
 80018bc:	2200      	movs	r2, #0
 80018be:	4619      	mov	r1, r3
 80018c0:	480c      	ldr	r0, [pc, #48]	; (80018f4 <MX_TIM4_Init+0xf8>)
 80018c2:	f002 f871 	bl	80039a8 <HAL_TIM_PWM_ConfigChannel>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 80018cc:	f7ff fe5e 	bl	800158c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018d0:	1d3b      	adds	r3, r7, #4
 80018d2:	2204      	movs	r2, #4
 80018d4:	4619      	mov	r1, r3
 80018d6:	4807      	ldr	r0, [pc, #28]	; (80018f4 <MX_TIM4_Init+0xf8>)
 80018d8:	f002 f866 	bl	80039a8 <HAL_TIM_PWM_ConfigChannel>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <MX_TIM4_Init+0xea>
  {
    Error_Handler();
 80018e2:	f7ff fe53 	bl	800158c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 80018e6:	4803      	ldr	r0, [pc, #12]	; (80018f4 <MX_TIM4_Init+0xf8>)
 80018e8:	f000 f9d8 	bl	8001c9c <HAL_TIM_MspPostInit>

}
 80018ec:	bf00      	nop
 80018ee:	3738      	adds	r7, #56	; 0x38
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	200000d0 	.word	0x200000d0
 80018f8:	40000800 	.word	0x40000800

080018fc <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b092      	sub	sp, #72	; 0x48
 8001900:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001902:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	605a      	str	r2, [r3, #4]
 800190c:	609a      	str	r2, [r3, #8]
 800190e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001910:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800191a:	f107 0314 	add.w	r3, r7, #20
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	605a      	str	r2, [r3, #4]
 8001924:	609a      	str	r2, [r3, #8]
 8001926:	60da      	str	r2, [r3, #12]
 8001928:	611a      	str	r2, [r3, #16]
 800192a:	615a      	str	r2, [r3, #20]
 800192c:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800192e:	1d3b      	adds	r3, r7, #4
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	609a      	str	r2, [r3, #8]
 8001938:	60da      	str	r2, [r3, #12]

  htim5.Instance = TIM5;
 800193a:	4b43      	ldr	r3, [pc, #268]	; (8001a48 <MX_TIM5_Init+0x14c>)
 800193c:	4a43      	ldr	r2, [pc, #268]	; (8001a4c <MX_TIM5_Init+0x150>)
 800193e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 90-1;
 8001940:	4b41      	ldr	r3, [pc, #260]	; (8001a48 <MX_TIM5_Init+0x14c>)
 8001942:	2259      	movs	r2, #89	; 0x59
 8001944:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001946:	4b40      	ldr	r3, [pc, #256]	; (8001a48 <MX_TIM5_Init+0x14c>)
 8001948:	2200      	movs	r2, #0
 800194a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800194c:	4b3e      	ldr	r3, [pc, #248]	; (8001a48 <MX_TIM5_Init+0x14c>)
 800194e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001952:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001954:	4b3c      	ldr	r3, [pc, #240]	; (8001a48 <MX_TIM5_Init+0x14c>)
 8001956:	2200      	movs	r2, #0
 8001958:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800195a:	4b3b      	ldr	r3, [pc, #236]	; (8001a48 <MX_TIM5_Init+0x14c>)
 800195c:	2200      	movs	r2, #0
 800195e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001960:	4839      	ldr	r0, [pc, #228]	; (8001a48 <MX_TIM5_Init+0x14c>)
 8001962:	f001 fcf9 	bl	8003358 <HAL_TIM_Base_Init>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 800196c:	f7ff fe0e 	bl	800158c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001970:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001974:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001976:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800197a:	4619      	mov	r1, r3
 800197c:	4832      	ldr	r0, [pc, #200]	; (8001a48 <MX_TIM5_Init+0x14c>)
 800197e:	f002 f8d9 	bl	8003b34 <HAL_TIM_ConfigClockSource>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8001988:	f7ff fe00 	bl	800158c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800198c:	482e      	ldr	r0, [pc, #184]	; (8001a48 <MX_TIM5_Init+0x14c>)
 800198e:	f001 fd56 	bl	800343e <HAL_TIM_PWM_Init>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <MX_TIM5_Init+0xa0>
  {
    Error_Handler();
 8001998:	f7ff fdf8 	bl	800158c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 800199c:	482a      	ldr	r0, [pc, #168]	; (8001a48 <MX_TIM5_Init+0x14c>)
 800199e:	f001 fdc1 	bl	8003524 <HAL_TIM_IC_Init>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 80019a8:	f7ff fdf0 	bl	800158c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019ac:	2300      	movs	r3, #0
 80019ae:	633b      	str	r3, [r7, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019b0:	2300      	movs	r3, #0
 80019b2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80019b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019b8:	4619      	mov	r1, r3
 80019ba:	4823      	ldr	r0, [pc, #140]	; (8001a48 <MX_TIM5_Init+0x14c>)
 80019bc:	f002 fdca 	bl	8004554 <HAL_TIMEx_MasterConfigSynchronization>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_TIM5_Init+0xce>
  {
    Error_Handler();
 80019c6:	f7ff fde1 	bl	800158c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019ca:	2360      	movs	r3, #96	; 0x60
 80019cc:	617b      	str	r3, [r7, #20]
  sConfigOC.Pulse = 0xFFFFFFF5;
 80019ce:	f06f 030a 	mvn.w	r3, #10
 80019d2:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80019d4:	2302      	movs	r3, #2
 80019d6:	61fb      	str	r3, [r7, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019d8:	2300      	movs	r3, #0
 80019da:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019dc:	f107 0314 	add.w	r3, r7, #20
 80019e0:	2200      	movs	r2, #0
 80019e2:	4619      	mov	r1, r3
 80019e4:	4818      	ldr	r0, [pc, #96]	; (8001a48 <MX_TIM5_Init+0x14c>)
 80019e6:	f001 ffdf 	bl	80039a8 <HAL_TIM_PWM_ConfigChannel>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_TIM5_Init+0xf8>
  {
    Error_Handler();
 80019f0:	f7ff fdcc 	bl	800158c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80019f4:	2300      	movs	r3, #0
 80019f6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80019f8:	2301      	movs	r3, #1
 80019fa:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80019fc:	2300      	movs	r3, #0
 80019fe:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001a00:	2300      	movs	r3, #0
 8001a02:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001a04:	1d3b      	adds	r3, r7, #4
 8001a06:	2208      	movs	r2, #8
 8001a08:	4619      	mov	r1, r3
 8001a0a:	480f      	ldr	r0, [pc, #60]	; (8001a48 <MX_TIM5_Init+0x14c>)
 8001a0c:	f001 ff30 	bl	8003870 <HAL_TIM_IC_ConfigChannel>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <MX_TIM5_Init+0x11e>
  {
    Error_Handler();
 8001a16:	f7ff fdb9 	bl	800158c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001a1e:	2302      	movs	r3, #2
 8001a20:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001a22:	1d3b      	adds	r3, r7, #4
 8001a24:	220c      	movs	r2, #12
 8001a26:	4619      	mov	r1, r3
 8001a28:	4807      	ldr	r0, [pc, #28]	; (8001a48 <MX_TIM5_Init+0x14c>)
 8001a2a:	f001 ff21 	bl	8003870 <HAL_TIM_IC_ConfigChannel>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <MX_TIM5_Init+0x13c>
  {
    Error_Handler();
 8001a34:	f7ff fdaa 	bl	800158c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim5);
 8001a38:	4803      	ldr	r0, [pc, #12]	; (8001a48 <MX_TIM5_Init+0x14c>)
 8001a3a:	f000 f92f 	bl	8001c9c <HAL_TIM_MspPostInit>

}
 8001a3e:	bf00      	nop
 8001a40:	3748      	adds	r7, #72	; 0x48
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	20000110 	.word	0x20000110
 8001a4c:	40000c00 	.word	0x40000c00

08001a50 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a56:	463b      	mov	r3, r7
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	605a      	str	r2, [r3, #4]

  htim7.Instance = TIM7;
 8001a5e:	4b15      	ldr	r3, [pc, #84]	; (8001ab4 <MX_TIM7_Init+0x64>)
 8001a60:	4a15      	ldr	r2, [pc, #84]	; (8001ab8 <MX_TIM7_Init+0x68>)
 8001a62:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 900-1;
 8001a64:	4b13      	ldr	r3, [pc, #76]	; (8001ab4 <MX_TIM7_Init+0x64>)
 8001a66:	f240 3283 	movw	r2, #899	; 0x383
 8001a6a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a6c:	4b11      	ldr	r3, [pc, #68]	; (8001ab4 <MX_TIM7_Init+0x64>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 8001a72:	4b10      	ldr	r3, [pc, #64]	; (8001ab4 <MX_TIM7_Init+0x64>)
 8001a74:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a78:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a7a:	4b0e      	ldr	r3, [pc, #56]	; (8001ab4 <MX_TIM7_Init+0x64>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001a80:	480c      	ldr	r0, [pc, #48]	; (8001ab4 <MX_TIM7_Init+0x64>)
 8001a82:	f001 fc69 	bl	8003358 <HAL_TIM_Base_Init>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001a8c:	f7ff fd7e 	bl	800158c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a90:	2300      	movs	r3, #0
 8001a92:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a94:	2300      	movs	r3, #0
 8001a96:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001a98:	463b      	mov	r3, r7
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	4805      	ldr	r0, [pc, #20]	; (8001ab4 <MX_TIM7_Init+0x64>)
 8001a9e:	f002 fd59 	bl	8004554 <HAL_TIMEx_MasterConfigSynchronization>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001aa8:	f7ff fd70 	bl	800158c <Error_Handler>
  }

}
 8001aac:	bf00      	nop
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	200001d0 	.word	0x200001d0
 8001ab8:	40001400 	.word	0x40001400

08001abc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b090      	sub	sp, #64	; 0x40
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	605a      	str	r2, [r3, #4]
 8001ace:	609a      	str	r2, [r3, #8]
 8001ad0:	60da      	str	r2, [r3, #12]
 8001ad2:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001adc:	d12d      	bne.n	8001b3a <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ade:	2300      	movs	r3, #0
 8001ae0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ae2:	4b66      	ldr	r3, [pc, #408]	; (8001c7c <HAL_TIM_Base_MspInit+0x1c0>)
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae6:	4a65      	ldr	r2, [pc, #404]	; (8001c7c <HAL_TIM_Base_MspInit+0x1c0>)
 8001ae8:	f043 0301 	orr.w	r3, r3, #1
 8001aec:	6413      	str	r3, [r2, #64]	; 0x40
 8001aee:	4b63      	ldr	r3, [pc, #396]	; (8001c7c <HAL_TIM_Base_MspInit+0x1c0>)
 8001af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001af8:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	627b      	str	r3, [r7, #36]	; 0x24
 8001afe:	4b5f      	ldr	r3, [pc, #380]	; (8001c7c <HAL_TIM_Base_MspInit+0x1c0>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	4a5e      	ldr	r2, [pc, #376]	; (8001c7c <HAL_TIM_Base_MspInit+0x1c0>)
 8001b04:	f043 0301 	orr.w	r3, r3, #1
 8001b08:	6313      	str	r3, [r2, #48]	; 0x30
 8001b0a:	4b5c      	ldr	r3, [pc, #368]	; (8001c7c <HAL_TIM_Base_MspInit+0x1c0>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	627b      	str	r3, [r7, #36]	; 0x24
 8001b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001b16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b20:	2300      	movs	r3, #0
 8001b22:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b24:	2300      	movs	r3, #0
 8001b26:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b30:	4619      	mov	r1, r3
 8001b32:	4853      	ldr	r0, [pc, #332]	; (8001c80 <HAL_TIM_Base_MspInit+0x1c4>)
 8001b34:	f000 fbce 	bl	80022d4 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8001b38:	e09b      	b.n	8001c72 <HAL_TIM_Base_MspInit+0x1b6>
  else if(tim_baseHandle->Instance==TIM3)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a51      	ldr	r2, [pc, #324]	; (8001c84 <HAL_TIM_Base_MspInit+0x1c8>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d12c      	bne.n	8001b9e <HAL_TIM_Base_MspInit+0xe2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b44:	2300      	movs	r3, #0
 8001b46:	623b      	str	r3, [r7, #32]
 8001b48:	4b4c      	ldr	r3, [pc, #304]	; (8001c7c <HAL_TIM_Base_MspInit+0x1c0>)
 8001b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4c:	4a4b      	ldr	r2, [pc, #300]	; (8001c7c <HAL_TIM_Base_MspInit+0x1c0>)
 8001b4e:	f043 0302 	orr.w	r3, r3, #2
 8001b52:	6413      	str	r3, [r2, #64]	; 0x40
 8001b54:	4b49      	ldr	r3, [pc, #292]	; (8001c7c <HAL_TIM_Base_MspInit+0x1c0>)
 8001b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b58:	f003 0302 	and.w	r3, r3, #2
 8001b5c:	623b      	str	r3, [r7, #32]
 8001b5e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b60:	2300      	movs	r3, #0
 8001b62:	61fb      	str	r3, [r7, #28]
 8001b64:	4b45      	ldr	r3, [pc, #276]	; (8001c7c <HAL_TIM_Base_MspInit+0x1c0>)
 8001b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b68:	4a44      	ldr	r2, [pc, #272]	; (8001c7c <HAL_TIM_Base_MspInit+0x1c0>)
 8001b6a:	f043 0308 	orr.w	r3, r3, #8
 8001b6e:	6313      	str	r3, [r2, #48]	; 0x30
 8001b70:	4b42      	ldr	r3, [pc, #264]	; (8001c7c <HAL_TIM_Base_MspInit+0x1c0>)
 8001b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b74:	f003 0308 	and.w	r3, r3, #8
 8001b78:	61fb      	str	r3, [r7, #28]
 8001b7a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b7c:	2304      	movs	r3, #4
 8001b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b80:	2302      	movs	r3, #2
 8001b82:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b84:	2300      	movs	r3, #0
 8001b86:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b94:	4619      	mov	r1, r3
 8001b96:	483c      	ldr	r0, [pc, #240]	; (8001c88 <HAL_TIM_Base_MspInit+0x1cc>)
 8001b98:	f000 fb9c 	bl	80022d4 <HAL_GPIO_Init>
}
 8001b9c:	e069      	b.n	8001c72 <HAL_TIM_Base_MspInit+0x1b6>
  else if(tim_baseHandle->Instance==TIM4)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a3a      	ldr	r2, [pc, #232]	; (8001c8c <HAL_TIM_Base_MspInit+0x1d0>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d10e      	bne.n	8001bc6 <HAL_TIM_Base_MspInit+0x10a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ba8:	2300      	movs	r3, #0
 8001baa:	61bb      	str	r3, [r7, #24]
 8001bac:	4b33      	ldr	r3, [pc, #204]	; (8001c7c <HAL_TIM_Base_MspInit+0x1c0>)
 8001bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb0:	4a32      	ldr	r2, [pc, #200]	; (8001c7c <HAL_TIM_Base_MspInit+0x1c0>)
 8001bb2:	f043 0304 	orr.w	r3, r3, #4
 8001bb6:	6413      	str	r3, [r2, #64]	; 0x40
 8001bb8:	4b30      	ldr	r3, [pc, #192]	; (8001c7c <HAL_TIM_Base_MspInit+0x1c0>)
 8001bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbc:	f003 0304 	and.w	r3, r3, #4
 8001bc0:	61bb      	str	r3, [r7, #24]
 8001bc2:	69bb      	ldr	r3, [r7, #24]
}
 8001bc4:	e055      	b.n	8001c72 <HAL_TIM_Base_MspInit+0x1b6>
  else if(tim_baseHandle->Instance==TIM5)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a31      	ldr	r2, [pc, #196]	; (8001c90 <HAL_TIM_Base_MspInit+0x1d4>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d135      	bne.n	8001c3c <HAL_TIM_Base_MspInit+0x180>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	617b      	str	r3, [r7, #20]
 8001bd4:	4b29      	ldr	r3, [pc, #164]	; (8001c7c <HAL_TIM_Base_MspInit+0x1c0>)
 8001bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd8:	4a28      	ldr	r2, [pc, #160]	; (8001c7c <HAL_TIM_Base_MspInit+0x1c0>)
 8001bda:	f043 0308 	orr.w	r3, r3, #8
 8001bde:	6413      	str	r3, [r2, #64]	; 0x40
 8001be0:	4b26      	ldr	r3, [pc, #152]	; (8001c7c <HAL_TIM_Base_MspInit+0x1c0>)
 8001be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be4:	f003 0308 	and.w	r3, r3, #8
 8001be8:	617b      	str	r3, [r7, #20]
 8001bea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bec:	2300      	movs	r3, #0
 8001bee:	613b      	str	r3, [r7, #16]
 8001bf0:	4b22      	ldr	r3, [pc, #136]	; (8001c7c <HAL_TIM_Base_MspInit+0x1c0>)
 8001bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf4:	4a21      	ldr	r2, [pc, #132]	; (8001c7c <HAL_TIM_Base_MspInit+0x1c0>)
 8001bf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bfa:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfc:	4b1f      	ldr	r3, [pc, #124]	; (8001c7c <HAL_TIM_Base_MspInit+0x1c0>)
 8001bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c04:	613b      	str	r3, [r7, #16]
 8001c06:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = IC_Eco_Pin;
 8001c08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0e:	2302      	movs	r3, #2
 8001c10:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c12:	2300      	movs	r3, #0
 8001c14:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c16:	2300      	movs	r3, #0
 8001c18:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(IC_Eco_GPIO_Port, &GPIO_InitStruct);
 8001c1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c22:	4619      	mov	r1, r3
 8001c24:	481b      	ldr	r0, [pc, #108]	; (8001c94 <HAL_TIM_Base_MspInit+0x1d8>)
 8001c26:	f000 fb55 	bl	80022d4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	2032      	movs	r0, #50	; 0x32
 8001c30:	f000 fa89 	bl	8002146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001c34:	2032      	movs	r0, #50	; 0x32
 8001c36:	f000 faa2 	bl	800217e <HAL_NVIC_EnableIRQ>
}
 8001c3a:	e01a      	b.n	8001c72 <HAL_TIM_Base_MspInit+0x1b6>
  else if(tim_baseHandle->Instance==TIM7)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a15      	ldr	r2, [pc, #84]	; (8001c98 <HAL_TIM_Base_MspInit+0x1dc>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d115      	bne.n	8001c72 <HAL_TIM_Base_MspInit+0x1b6>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001c46:	2300      	movs	r3, #0
 8001c48:	60fb      	str	r3, [r7, #12]
 8001c4a:	4b0c      	ldr	r3, [pc, #48]	; (8001c7c <HAL_TIM_Base_MspInit+0x1c0>)
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4e:	4a0b      	ldr	r2, [pc, #44]	; (8001c7c <HAL_TIM_Base_MspInit+0x1c0>)
 8001c50:	f043 0320 	orr.w	r3, r3, #32
 8001c54:	6413      	str	r3, [r2, #64]	; 0x40
 8001c56:	4b09      	ldr	r3, [pc, #36]	; (8001c7c <HAL_TIM_Base_MspInit+0x1c0>)
 8001c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5a:	f003 0320 	and.w	r3, r3, #32
 8001c5e:	60fb      	str	r3, [r7, #12]
 8001c60:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001c62:	2200      	movs	r2, #0
 8001c64:	2100      	movs	r1, #0
 8001c66:	2037      	movs	r0, #55	; 0x37
 8001c68:	f000 fa6d 	bl	8002146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001c6c:	2037      	movs	r0, #55	; 0x37
 8001c6e:	f000 fa86 	bl	800217e <HAL_NVIC_EnableIRQ>
}
 8001c72:	bf00      	nop
 8001c74:	3740      	adds	r7, #64	; 0x40
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	40023800 	.word	0x40023800
 8001c80:	40020000 	.word	0x40020000
 8001c84:	40000400 	.word	0x40000400
 8001c88:	40020c00 	.word	0x40020c00
 8001c8c:	40000800 	.word	0x40000800
 8001c90:	40000c00 	.word	0x40000c00
 8001c94:	40021c00 	.word	0x40021c00
 8001c98:	40001400 	.word	0x40001400

08001c9c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b08a      	sub	sp, #40	; 0x28
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca4:	f107 0314 	add.w	r3, r7, #20
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	605a      	str	r2, [r3, #4]
 8001cae:	609a      	str	r2, [r3, #8]
 8001cb0:	60da      	str	r2, [r3, #12]
 8001cb2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a25      	ldr	r2, [pc, #148]	; (8001d50 <HAL_TIM_MspPostInit+0xb4>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d11f      	bne.n	8001cfe <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	613b      	str	r3, [r7, #16]
 8001cc2:	4b24      	ldr	r3, [pc, #144]	; (8001d54 <HAL_TIM_MspPostInit+0xb8>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc6:	4a23      	ldr	r2, [pc, #140]	; (8001d54 <HAL_TIM_MspPostInit+0xb8>)
 8001cc8:	f043 0308 	orr.w	r3, r3, #8
 8001ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cce:	4b21      	ldr	r3, [pc, #132]	; (8001d54 <HAL_TIM_MspPostInit+0xb8>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd2:	f003 0308 	and.w	r3, r3, #8
 8001cd6:	613b      	str	r3, [r7, #16]
 8001cd8:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = PWM_R_Pin|PWM_L_Pin;
 8001cda:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001cde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001cec:	2302      	movs	r3, #2
 8001cee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cf0:	f107 0314 	add.w	r3, r7, #20
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4818      	ldr	r0, [pc, #96]	; (8001d58 <HAL_TIM_MspPostInit+0xbc>)
 8001cf8:	f000 faec 	bl	80022d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001cfc:	e023      	b.n	8001d46 <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM5)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a16      	ldr	r2, [pc, #88]	; (8001d5c <HAL_TIM_MspPostInit+0xc0>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d11e      	bne.n	8001d46 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d08:	2300      	movs	r3, #0
 8001d0a:	60fb      	str	r3, [r7, #12]
 8001d0c:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <HAL_TIM_MspPostInit+0xb8>)
 8001d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d10:	4a10      	ldr	r2, [pc, #64]	; (8001d54 <HAL_TIM_MspPostInit+0xb8>)
 8001d12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d16:	6313      	str	r3, [r2, #48]	; 0x30
 8001d18:	4b0e      	ldr	r3, [pc, #56]	; (8001d54 <HAL_TIM_MspPostInit+0xb8>)
 8001d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d20:	60fb      	str	r3, [r7, #12]
 8001d22:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_Trig_Pin;
 8001d24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d32:	2300      	movs	r3, #0
 8001d34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001d36:	2302      	movs	r3, #2
 8001d38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_Trig_GPIO_Port, &GPIO_InitStruct);
 8001d3a:	f107 0314 	add.w	r3, r7, #20
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4807      	ldr	r0, [pc, #28]	; (8001d60 <HAL_TIM_MspPostInit+0xc4>)
 8001d42:	f000 fac7 	bl	80022d4 <HAL_GPIO_Init>
}
 8001d46:	bf00      	nop
 8001d48:	3728      	adds	r7, #40	; 0x28
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	40000800 	.word	0x40000800
 8001d54:	40023800 	.word	0x40023800
 8001d58:	40020c00 	.word	0x40020c00
 8001d5c:	40000c00 	.word	0x40000c00
 8001d60:	40021c00 	.word	0x40021c00

08001d64 <MX_UART7_Init>:

UART_HandleTypeDef huart7;

/* UART7 init function */
void MX_UART7_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0

  huart7.Instance = UART7;
 8001d68:	4b11      	ldr	r3, [pc, #68]	; (8001db0 <MX_UART7_Init+0x4c>)
 8001d6a:	4a12      	ldr	r2, [pc, #72]	; (8001db4 <MX_UART7_Init+0x50>)
 8001d6c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001d6e:	4b10      	ldr	r3, [pc, #64]	; (8001db0 <MX_UART7_Init+0x4c>)
 8001d70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d74:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001d76:	4b0e      	ldr	r3, [pc, #56]	; (8001db0 <MX_UART7_Init+0x4c>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001d7c:	4b0c      	ldr	r3, [pc, #48]	; (8001db0 <MX_UART7_Init+0x4c>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001d82:	4b0b      	ldr	r3, [pc, #44]	; (8001db0 <MX_UART7_Init+0x4c>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001d88:	4b09      	ldr	r3, [pc, #36]	; (8001db0 <MX_UART7_Init+0x4c>)
 8001d8a:	220c      	movs	r2, #12
 8001d8c:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d8e:	4b08      	ldr	r3, [pc, #32]	; (8001db0 <MX_UART7_Init+0x4c>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d94:	4b06      	ldr	r3, [pc, #24]	; (8001db0 <MX_UART7_Init+0x4c>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001d9a:	4805      	ldr	r0, [pc, #20]	; (8001db0 <MX_UART7_Init+0x4c>)
 8001d9c:	f002 fc6a 	bl	8004674 <HAL_UART_Init>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <MX_UART7_Init+0x46>
  {
    Error_Handler();
 8001da6:	f7ff fbf1 	bl	800158c <Error_Handler>
  }

}
 8001daa:	bf00      	nop
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	20000210 	.word	0x20000210
 8001db4:	40007800 	.word	0x40007800

08001db8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b08a      	sub	sp, #40	; 0x28
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc0:	f107 0314 	add.w	r3, r7, #20
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	605a      	str	r2, [r3, #4]
 8001dca:	609a      	str	r2, [r3, #8]
 8001dcc:	60da      	str	r2, [r3, #12]
 8001dce:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART7)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a1d      	ldr	r2, [pc, #116]	; (8001e4c <HAL_UART_MspInit+0x94>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d133      	bne.n	8001e42 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8001dda:	2300      	movs	r3, #0
 8001ddc:	613b      	str	r3, [r7, #16]
 8001dde:	4b1c      	ldr	r3, [pc, #112]	; (8001e50 <HAL_UART_MspInit+0x98>)
 8001de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de2:	4a1b      	ldr	r2, [pc, #108]	; (8001e50 <HAL_UART_MspInit+0x98>)
 8001de4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001de8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dea:	4b19      	ldr	r3, [pc, #100]	; (8001e50 <HAL_UART_MspInit+0x98>)
 8001dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dee:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001df2:	613b      	str	r3, [r7, #16]
 8001df4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001df6:	2300      	movs	r3, #0
 8001df8:	60fb      	str	r3, [r7, #12]
 8001dfa:	4b15      	ldr	r3, [pc, #84]	; (8001e50 <HAL_UART_MspInit+0x98>)
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfe:	4a14      	ldr	r2, [pc, #80]	; (8001e50 <HAL_UART_MspInit+0x98>)
 8001e00:	f043 0320 	orr.w	r3, r3, #32
 8001e04:	6313      	str	r3, [r2, #48]	; 0x30
 8001e06:	4b12      	ldr	r3, [pc, #72]	; (8001e50 <HAL_UART_MspInit+0x98>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0a:	f003 0320 	and.w	r3, r3, #32
 8001e0e:	60fb      	str	r3, [r7, #12]
 8001e10:	68fb      	ldr	r3, [r7, #12]
    /**UART7 GPIO Configuration
    PF6     ------> UART7_RX
    PF7     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e12:	23c0      	movs	r3, #192	; 0xc0
 8001e14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e16:	2302      	movs	r3, #2
 8001e18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8001e22:	2308      	movs	r3, #8
 8001e24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e26:	f107 0314 	add.w	r3, r7, #20
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	4809      	ldr	r0, [pc, #36]	; (8001e54 <HAL_UART_MspInit+0x9c>)
 8001e2e:	f000 fa51 	bl	80022d4 <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8001e32:	2200      	movs	r2, #0
 8001e34:	2100      	movs	r1, #0
 8001e36:	2052      	movs	r0, #82	; 0x52
 8001e38:	f000 f985 	bl	8002146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8001e3c:	2052      	movs	r0, #82	; 0x52
 8001e3e:	f000 f99e 	bl	800217e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }
}
 8001e42:	bf00      	nop
 8001e44:	3728      	adds	r7, #40	; 0x28
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40007800 	.word	0x40007800
 8001e50:	40023800 	.word	0x40023800
 8001e54:	40021400 	.word	0x40021400

08001e58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001e58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e90 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001e5c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001e5e:	e003      	b.n	8001e68 <LoopCopyDataInit>

08001e60 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001e60:	4b0c      	ldr	r3, [pc, #48]	; (8001e94 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001e62:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001e64:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001e66:	3104      	adds	r1, #4

08001e68 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001e68:	480b      	ldr	r0, [pc, #44]	; (8001e98 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001e6a:	4b0c      	ldr	r3, [pc, #48]	; (8001e9c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001e6c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001e6e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001e70:	d3f6      	bcc.n	8001e60 <CopyDataInit>
  ldr  r2, =_sbss
 8001e72:	4a0b      	ldr	r2, [pc, #44]	; (8001ea0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001e74:	e002      	b.n	8001e7c <LoopFillZerobss>

08001e76 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001e76:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001e78:	f842 3b04 	str.w	r3, [r2], #4

08001e7c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001e7c:	4b09      	ldr	r3, [pc, #36]	; (8001ea4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001e7e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001e80:	d3f9      	bcc.n	8001e76 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001e82:	f7ff fbff 	bl	8001684 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e86:	f003 fb7f 	bl	8005588 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e8a:	f7fe fccd 	bl	8000828 <main>
  bx  lr    
 8001e8e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001e90:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001e94:	08005620 	.word	0x08005620
  ldr  r0, =_sdata
 8001e98:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001e9c:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8001ea0:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8001ea4:	20000254 	.word	0x20000254

08001ea8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ea8:	e7fe      	b.n	8001ea8 <ADC_IRQHandler>
	...

08001eac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001eb0:	4b0e      	ldr	r3, [pc, #56]	; (8001eec <HAL_Init+0x40>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a0d      	ldr	r2, [pc, #52]	; (8001eec <HAL_Init+0x40>)
 8001eb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001eba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ebc:	4b0b      	ldr	r3, [pc, #44]	; (8001eec <HAL_Init+0x40>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a0a      	ldr	r2, [pc, #40]	; (8001eec <HAL_Init+0x40>)
 8001ec2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ec6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ec8:	4b08      	ldr	r3, [pc, #32]	; (8001eec <HAL_Init+0x40>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a07      	ldr	r2, [pc, #28]	; (8001eec <HAL_Init+0x40>)
 8001ece:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ed2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ed4:	2003      	movs	r0, #3
 8001ed6:	f000 f92b 	bl	8002130 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001eda:	2000      	movs	r0, #0
 8001edc:	f000 f808 	bl	8001ef0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ee0:	f7ff fb5c 	bl	800159c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	40023c00 	.word	0x40023c00

08001ef0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ef8:	4b12      	ldr	r3, [pc, #72]	; (8001f44 <HAL_InitTick+0x54>)
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	4b12      	ldr	r3, [pc, #72]	; (8001f48 <HAL_InitTick+0x58>)
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	4619      	mov	r1, r3
 8001f02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f06:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f000 f943 	bl	800219a <HAL_SYSTICK_Config>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e00e      	b.n	8001f3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2b0f      	cmp	r3, #15
 8001f22:	d80a      	bhi.n	8001f3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f24:	2200      	movs	r2, #0
 8001f26:	6879      	ldr	r1, [r7, #4]
 8001f28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f2c:	f000 f90b 	bl	8002146 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f30:	4a06      	ldr	r2, [pc, #24]	; (8001f4c <HAL_InitTick+0x5c>)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f36:	2300      	movs	r3, #0
 8001f38:	e000      	b.n	8001f3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3708      	adds	r7, #8
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	20000004 	.word	0x20000004
 8001f48:	2000000c 	.word	0x2000000c
 8001f4c:	20000008 	.word	0x20000008

08001f50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f54:	4b06      	ldr	r3, [pc, #24]	; (8001f70 <HAL_IncTick+0x20>)
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	461a      	mov	r2, r3
 8001f5a:	4b06      	ldr	r3, [pc, #24]	; (8001f74 <HAL_IncTick+0x24>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4413      	add	r3, r2
 8001f60:	4a04      	ldr	r2, [pc, #16]	; (8001f74 <HAL_IncTick+0x24>)
 8001f62:	6013      	str	r3, [r2, #0]
}
 8001f64:	bf00      	nop
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	2000000c 	.word	0x2000000c
 8001f74:	20000250 	.word	0x20000250

08001f78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f7c:	4b03      	ldr	r3, [pc, #12]	; (8001f8c <HAL_GetTick+0x14>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	20000250 	.word	0x20000250

08001f90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f003 0307 	and.w	r3, r3, #7
 8001f9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fa0:	4b0c      	ldr	r3, [pc, #48]	; (8001fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fa6:	68ba      	ldr	r2, [r7, #8]
 8001fa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fac:	4013      	ands	r3, r2
 8001fae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fc2:	4a04      	ldr	r2, [pc, #16]	; (8001fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	60d3      	str	r3, [r2, #12]
}
 8001fc8:	bf00      	nop
 8001fca:	3714      	adds	r7, #20
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr
 8001fd4:	e000ed00 	.word	0xe000ed00

08001fd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fdc:	4b04      	ldr	r3, [pc, #16]	; (8001ff0 <__NVIC_GetPriorityGrouping+0x18>)
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	0a1b      	lsrs	r3, r3, #8
 8001fe2:	f003 0307 	and.w	r3, r3, #7
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr
 8001ff0:	e000ed00 	.word	0xe000ed00

08001ff4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002002:	2b00      	cmp	r3, #0
 8002004:	db0b      	blt.n	800201e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002006:	79fb      	ldrb	r3, [r7, #7]
 8002008:	f003 021f 	and.w	r2, r3, #31
 800200c:	4907      	ldr	r1, [pc, #28]	; (800202c <__NVIC_EnableIRQ+0x38>)
 800200e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002012:	095b      	lsrs	r3, r3, #5
 8002014:	2001      	movs	r0, #1
 8002016:	fa00 f202 	lsl.w	r2, r0, r2
 800201a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800201e:	bf00      	nop
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	e000e100 	.word	0xe000e100

08002030 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	4603      	mov	r3, r0
 8002038:	6039      	str	r1, [r7, #0]
 800203a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800203c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002040:	2b00      	cmp	r3, #0
 8002042:	db0a      	blt.n	800205a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	b2da      	uxtb	r2, r3
 8002048:	490c      	ldr	r1, [pc, #48]	; (800207c <__NVIC_SetPriority+0x4c>)
 800204a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204e:	0112      	lsls	r2, r2, #4
 8002050:	b2d2      	uxtb	r2, r2
 8002052:	440b      	add	r3, r1
 8002054:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002058:	e00a      	b.n	8002070 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	b2da      	uxtb	r2, r3
 800205e:	4908      	ldr	r1, [pc, #32]	; (8002080 <__NVIC_SetPriority+0x50>)
 8002060:	79fb      	ldrb	r3, [r7, #7]
 8002062:	f003 030f 	and.w	r3, r3, #15
 8002066:	3b04      	subs	r3, #4
 8002068:	0112      	lsls	r2, r2, #4
 800206a:	b2d2      	uxtb	r2, r2
 800206c:	440b      	add	r3, r1
 800206e:	761a      	strb	r2, [r3, #24]
}
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr
 800207c:	e000e100 	.word	0xe000e100
 8002080:	e000ed00 	.word	0xe000ed00

08002084 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002084:	b480      	push	{r7}
 8002086:	b089      	sub	sp, #36	; 0x24
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f003 0307 	and.w	r3, r3, #7
 8002096:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	f1c3 0307 	rsb	r3, r3, #7
 800209e:	2b04      	cmp	r3, #4
 80020a0:	bf28      	it	cs
 80020a2:	2304      	movcs	r3, #4
 80020a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	3304      	adds	r3, #4
 80020aa:	2b06      	cmp	r3, #6
 80020ac:	d902      	bls.n	80020b4 <NVIC_EncodePriority+0x30>
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	3b03      	subs	r3, #3
 80020b2:	e000      	b.n	80020b6 <NVIC_EncodePriority+0x32>
 80020b4:	2300      	movs	r3, #0
 80020b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	fa02 f303 	lsl.w	r3, r2, r3
 80020c2:	43da      	mvns	r2, r3
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	401a      	ands	r2, r3
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	fa01 f303 	lsl.w	r3, r1, r3
 80020d6:	43d9      	mvns	r1, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020dc:	4313      	orrs	r3, r2
         );
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3724      	adds	r7, #36	; 0x24
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
	...

080020ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	3b01      	subs	r3, #1
 80020f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020fc:	d301      	bcc.n	8002102 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020fe:	2301      	movs	r3, #1
 8002100:	e00f      	b.n	8002122 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002102:	4a0a      	ldr	r2, [pc, #40]	; (800212c <SysTick_Config+0x40>)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	3b01      	subs	r3, #1
 8002108:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800210a:	210f      	movs	r1, #15
 800210c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002110:	f7ff ff8e 	bl	8002030 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002114:	4b05      	ldr	r3, [pc, #20]	; (800212c <SysTick_Config+0x40>)
 8002116:	2200      	movs	r2, #0
 8002118:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800211a:	4b04      	ldr	r3, [pc, #16]	; (800212c <SysTick_Config+0x40>)
 800211c:	2207      	movs	r2, #7
 800211e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	e000e010 	.word	0xe000e010

08002130 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f7ff ff29 	bl	8001f90 <__NVIC_SetPriorityGrouping>
}
 800213e:	bf00      	nop
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002146:	b580      	push	{r7, lr}
 8002148:	b086      	sub	sp, #24
 800214a:	af00      	add	r7, sp, #0
 800214c:	4603      	mov	r3, r0
 800214e:	60b9      	str	r1, [r7, #8]
 8002150:	607a      	str	r2, [r7, #4]
 8002152:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002154:	2300      	movs	r3, #0
 8002156:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002158:	f7ff ff3e 	bl	8001fd8 <__NVIC_GetPriorityGrouping>
 800215c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	68b9      	ldr	r1, [r7, #8]
 8002162:	6978      	ldr	r0, [r7, #20]
 8002164:	f7ff ff8e 	bl	8002084 <NVIC_EncodePriority>
 8002168:	4602      	mov	r2, r0
 800216a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800216e:	4611      	mov	r1, r2
 8002170:	4618      	mov	r0, r3
 8002172:	f7ff ff5d 	bl	8002030 <__NVIC_SetPriority>
}
 8002176:	bf00      	nop
 8002178:	3718      	adds	r7, #24
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800217e:	b580      	push	{r7, lr}
 8002180:	b082      	sub	sp, #8
 8002182:	af00      	add	r7, sp, #0
 8002184:	4603      	mov	r3, r0
 8002186:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218c:	4618      	mov	r0, r3
 800218e:	f7ff ff31 	bl	8001ff4 <__NVIC_EnableIRQ>
}
 8002192:	bf00      	nop
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b082      	sub	sp, #8
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f7ff ffa2 	bl	80020ec <SysTick_Config>
 80021a8:	4603      	mov	r3, r0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b082      	sub	sp, #8
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d101      	bne.n	80021c4 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e014      	b.n	80021ee <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	791b      	ldrb	r3, [r3, #4]
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d105      	bne.n	80021da <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f7fe f9bd 	bl	8000554 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2202      	movs	r2, #2
 80021de:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2201      	movs	r2, #1
 80021ea:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80021f6:	b480      	push	{r7}
 80021f8:	b087      	sub	sp, #28
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	60f8      	str	r0, [r7, #12]
 80021fe:	60b9      	str	r1, [r7, #8]
 8002200:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8002202:	2300      	movs	r3, #0
 8002204:	617b      	str	r3, [r7, #20]
 8002206:	2300      	movs	r3, #0
 8002208:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	795b      	ldrb	r3, [r3, #5]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d101      	bne.n	8002216 <HAL_DAC_ConfigChannel+0x20>
 8002212:	2302      	movs	r3, #2
 8002214:	e036      	b.n	8002284 <HAL_DAC_ConfigChannel+0x8e>
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2201      	movs	r2, #1
 800221a:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2202      	movs	r2, #2
 8002220:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 800222a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	43db      	mvns	r3, r3
 8002236:	697a      	ldr	r2, [r7, #20]
 8002238:	4013      	ands	r3, r2
 800223a:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	4313      	orrs	r3, r2
 8002246:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002248:	693a      	ldr	r2, [r7, #16]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	697a      	ldr	r2, [r7, #20]
 8002252:	4313      	orrs	r3, r2
 8002254:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	697a      	ldr	r2, [r7, #20]
 800225c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	6819      	ldr	r1, [r3, #0]
 8002264:	22c0      	movs	r2, #192	; 0xc0
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	43da      	mvns	r2, r3
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	400a      	ands	r2, r1
 8002274:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2201      	movs	r2, #1
 800227a:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2200      	movs	r2, #0
 8002280:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	371c      	adds	r7, #28
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d004      	beq.n	80022ae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2280      	movs	r2, #128	; 0x80
 80022a8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e00c      	b.n	80022c8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2205      	movs	r2, #5
 80022b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f022 0201 	bic.w	r2, r2, #1
 80022c4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80022c6:	2300      	movs	r3, #0
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b089      	sub	sp, #36	; 0x24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022de:	2300      	movs	r3, #0
 80022e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022e2:	2300      	movs	r3, #0
 80022e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022e6:	2300      	movs	r3, #0
 80022e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022ea:	2300      	movs	r3, #0
 80022ec:	61fb      	str	r3, [r7, #28]
 80022ee:	e177      	b.n	80025e0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022f0:	2201      	movs	r2, #1
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	697a      	ldr	r2, [r7, #20]
 8002300:	4013      	ands	r3, r2
 8002302:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002304:	693a      	ldr	r2, [r7, #16]
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	429a      	cmp	r2, r3
 800230a:	f040 8166 	bne.w	80025da <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	2b01      	cmp	r3, #1
 8002314:	d00b      	beq.n	800232e <HAL_GPIO_Init+0x5a>
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	2b02      	cmp	r3, #2
 800231c:	d007      	beq.n	800232e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002322:	2b11      	cmp	r3, #17
 8002324:	d003      	beq.n	800232e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	2b12      	cmp	r3, #18
 800232c:	d130      	bne.n	8002390 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	2203      	movs	r2, #3
 800233a:	fa02 f303 	lsl.w	r3, r2, r3
 800233e:	43db      	mvns	r3, r3
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	4013      	ands	r3, r2
 8002344:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	68da      	ldr	r2, [r3, #12]
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	4313      	orrs	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002364:	2201      	movs	r2, #1
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	43db      	mvns	r3, r3
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	4013      	ands	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	091b      	lsrs	r3, r3, #4
 800237a:	f003 0201 	and.w	r2, r3, #1
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	4313      	orrs	r3, r2
 8002388:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	2203      	movs	r2, #3
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	43db      	mvns	r3, r3
 80023a2:	69ba      	ldr	r2, [r7, #24]
 80023a4:	4013      	ands	r3, r2
 80023a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	689a      	ldr	r2, [r3, #8]
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d003      	beq.n	80023d0 <HAL_GPIO_Init+0xfc>
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	2b12      	cmp	r3, #18
 80023ce:	d123      	bne.n	8002418 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	08da      	lsrs	r2, r3, #3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	3208      	adds	r2, #8
 80023d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	f003 0307 	and.w	r3, r3, #7
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	220f      	movs	r2, #15
 80023e8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ec:	43db      	mvns	r3, r3
 80023ee:	69ba      	ldr	r2, [r7, #24]
 80023f0:	4013      	ands	r3, r2
 80023f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	691a      	ldr	r2, [r3, #16]
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	f003 0307 	and.w	r3, r3, #7
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	fa02 f303 	lsl.w	r3, r2, r3
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	4313      	orrs	r3, r2
 8002408:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	08da      	lsrs	r2, r3, #3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	3208      	adds	r2, #8
 8002412:	69b9      	ldr	r1, [r7, #24]
 8002414:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	2203      	movs	r2, #3
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	43db      	mvns	r3, r3
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	4013      	ands	r3, r2
 800242e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f003 0203 	and.w	r2, r3, #3
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	4313      	orrs	r3, r2
 8002444:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002454:	2b00      	cmp	r3, #0
 8002456:	f000 80c0 	beq.w	80025da <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800245a:	2300      	movs	r3, #0
 800245c:	60fb      	str	r3, [r7, #12]
 800245e:	4b65      	ldr	r3, [pc, #404]	; (80025f4 <HAL_GPIO_Init+0x320>)
 8002460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002462:	4a64      	ldr	r2, [pc, #400]	; (80025f4 <HAL_GPIO_Init+0x320>)
 8002464:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002468:	6453      	str	r3, [r2, #68]	; 0x44
 800246a:	4b62      	ldr	r3, [pc, #392]	; (80025f4 <HAL_GPIO_Init+0x320>)
 800246c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002472:	60fb      	str	r3, [r7, #12]
 8002474:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002476:	4a60      	ldr	r2, [pc, #384]	; (80025f8 <HAL_GPIO_Init+0x324>)
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	089b      	lsrs	r3, r3, #2
 800247c:	3302      	adds	r3, #2
 800247e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002482:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	f003 0303 	and.w	r3, r3, #3
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	220f      	movs	r2, #15
 800248e:	fa02 f303 	lsl.w	r3, r2, r3
 8002492:	43db      	mvns	r3, r3
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	4013      	ands	r3, r2
 8002498:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a57      	ldr	r2, [pc, #348]	; (80025fc <HAL_GPIO_Init+0x328>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d037      	beq.n	8002512 <HAL_GPIO_Init+0x23e>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a56      	ldr	r2, [pc, #344]	; (8002600 <HAL_GPIO_Init+0x32c>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d031      	beq.n	800250e <HAL_GPIO_Init+0x23a>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a55      	ldr	r2, [pc, #340]	; (8002604 <HAL_GPIO_Init+0x330>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d02b      	beq.n	800250a <HAL_GPIO_Init+0x236>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a54      	ldr	r2, [pc, #336]	; (8002608 <HAL_GPIO_Init+0x334>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d025      	beq.n	8002506 <HAL_GPIO_Init+0x232>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a53      	ldr	r2, [pc, #332]	; (800260c <HAL_GPIO_Init+0x338>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d01f      	beq.n	8002502 <HAL_GPIO_Init+0x22e>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a52      	ldr	r2, [pc, #328]	; (8002610 <HAL_GPIO_Init+0x33c>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d019      	beq.n	80024fe <HAL_GPIO_Init+0x22a>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a51      	ldr	r2, [pc, #324]	; (8002614 <HAL_GPIO_Init+0x340>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d013      	beq.n	80024fa <HAL_GPIO_Init+0x226>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a50      	ldr	r2, [pc, #320]	; (8002618 <HAL_GPIO_Init+0x344>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d00d      	beq.n	80024f6 <HAL_GPIO_Init+0x222>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a4f      	ldr	r2, [pc, #316]	; (800261c <HAL_GPIO_Init+0x348>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d007      	beq.n	80024f2 <HAL_GPIO_Init+0x21e>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a4e      	ldr	r2, [pc, #312]	; (8002620 <HAL_GPIO_Init+0x34c>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d101      	bne.n	80024ee <HAL_GPIO_Init+0x21a>
 80024ea:	2309      	movs	r3, #9
 80024ec:	e012      	b.n	8002514 <HAL_GPIO_Init+0x240>
 80024ee:	230a      	movs	r3, #10
 80024f0:	e010      	b.n	8002514 <HAL_GPIO_Init+0x240>
 80024f2:	2308      	movs	r3, #8
 80024f4:	e00e      	b.n	8002514 <HAL_GPIO_Init+0x240>
 80024f6:	2307      	movs	r3, #7
 80024f8:	e00c      	b.n	8002514 <HAL_GPIO_Init+0x240>
 80024fa:	2306      	movs	r3, #6
 80024fc:	e00a      	b.n	8002514 <HAL_GPIO_Init+0x240>
 80024fe:	2305      	movs	r3, #5
 8002500:	e008      	b.n	8002514 <HAL_GPIO_Init+0x240>
 8002502:	2304      	movs	r3, #4
 8002504:	e006      	b.n	8002514 <HAL_GPIO_Init+0x240>
 8002506:	2303      	movs	r3, #3
 8002508:	e004      	b.n	8002514 <HAL_GPIO_Init+0x240>
 800250a:	2302      	movs	r3, #2
 800250c:	e002      	b.n	8002514 <HAL_GPIO_Init+0x240>
 800250e:	2301      	movs	r3, #1
 8002510:	e000      	b.n	8002514 <HAL_GPIO_Init+0x240>
 8002512:	2300      	movs	r3, #0
 8002514:	69fa      	ldr	r2, [r7, #28]
 8002516:	f002 0203 	and.w	r2, r2, #3
 800251a:	0092      	lsls	r2, r2, #2
 800251c:	4093      	lsls	r3, r2
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	4313      	orrs	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002524:	4934      	ldr	r1, [pc, #208]	; (80025f8 <HAL_GPIO_Init+0x324>)
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	089b      	lsrs	r3, r3, #2
 800252a:	3302      	adds	r3, #2
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002532:	4b3c      	ldr	r3, [pc, #240]	; (8002624 <HAL_GPIO_Init+0x350>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	43db      	mvns	r3, r3
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	4013      	ands	r3, r2
 8002540:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d003      	beq.n	8002556 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	4313      	orrs	r3, r2
 8002554:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002556:	4a33      	ldr	r2, [pc, #204]	; (8002624 <HAL_GPIO_Init+0x350>)
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800255c:	4b31      	ldr	r3, [pc, #196]	; (8002624 <HAL_GPIO_Init+0x350>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	43db      	mvns	r3, r3
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	4013      	ands	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d003      	beq.n	8002580 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	4313      	orrs	r3, r2
 800257e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002580:	4a28      	ldr	r2, [pc, #160]	; (8002624 <HAL_GPIO_Init+0x350>)
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002586:	4b27      	ldr	r3, [pc, #156]	; (8002624 <HAL_GPIO_Init+0x350>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	43db      	mvns	r3, r3
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	4013      	ands	r3, r2
 8002594:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d003      	beq.n	80025aa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025aa:	4a1e      	ldr	r2, [pc, #120]	; (8002624 <HAL_GPIO_Init+0x350>)
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025b0:	4b1c      	ldr	r3, [pc, #112]	; (8002624 <HAL_GPIO_Init+0x350>)
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	43db      	mvns	r3, r3
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	4013      	ands	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d003      	beq.n	80025d4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025d4:	4a13      	ldr	r2, [pc, #76]	; (8002624 <HAL_GPIO_Init+0x350>)
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	3301      	adds	r3, #1
 80025de:	61fb      	str	r3, [r7, #28]
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	2b0f      	cmp	r3, #15
 80025e4:	f67f ae84 	bls.w	80022f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025e8:	bf00      	nop
 80025ea:	3724      	adds	r7, #36	; 0x24
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr
 80025f4:	40023800 	.word	0x40023800
 80025f8:	40013800 	.word	0x40013800
 80025fc:	40020000 	.word	0x40020000
 8002600:	40020400 	.word	0x40020400
 8002604:	40020800 	.word	0x40020800
 8002608:	40020c00 	.word	0x40020c00
 800260c:	40021000 	.word	0x40021000
 8002610:	40021400 	.word	0x40021400
 8002614:	40021800 	.word	0x40021800
 8002618:	40021c00 	.word	0x40021c00
 800261c:	40022000 	.word	0x40022000
 8002620:	40022400 	.word	0x40022400
 8002624:	40013c00 	.word	0x40013c00

08002628 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002628:	b480      	push	{r7}
 800262a:	b085      	sub	sp, #20
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	460b      	mov	r3, r1
 8002632:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	691a      	ldr	r2, [r3, #16]
 8002638:	887b      	ldrh	r3, [r7, #2]
 800263a:	4013      	ands	r3, r2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d002      	beq.n	8002646 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002640:	2301      	movs	r3, #1
 8002642:	73fb      	strb	r3, [r7, #15]
 8002644:	e001      	b.n	800264a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002646:	2300      	movs	r3, #0
 8002648:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800264a:	7bfb      	ldrb	r3, [r7, #15]
}
 800264c:	4618      	mov	r0, r3
 800264e:	3714      	adds	r7, #20
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	460b      	mov	r3, r1
 8002662:	807b      	strh	r3, [r7, #2]
 8002664:	4613      	mov	r3, r2
 8002666:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002668:	787b      	ldrb	r3, [r7, #1]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d003      	beq.n	8002676 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800266e:	887a      	ldrh	r2, [r7, #2]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002674:	e003      	b.n	800267e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002676:	887b      	ldrh	r3, [r7, #2]
 8002678:	041a      	lsls	r2, r3, #16
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	619a      	str	r2, [r3, #24]
}
 800267e:	bf00      	nop
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
	...

0800268c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d101      	bne.n	800269e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e11f      	b.n	80028de <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d106      	bne.n	80026b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f7fe f870 	bl	8000798 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2224      	movs	r2, #36	; 0x24
 80026bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f022 0201 	bic.w	r2, r2, #1
 80026ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80026f0:	f000 fe0a 	bl	8003308 <HAL_RCC_GetPCLK1Freq>
 80026f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	4a7b      	ldr	r2, [pc, #492]	; (80028e8 <HAL_I2C_Init+0x25c>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d807      	bhi.n	8002710 <HAL_I2C_Init+0x84>
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	4a7a      	ldr	r2, [pc, #488]	; (80028ec <HAL_I2C_Init+0x260>)
 8002704:	4293      	cmp	r3, r2
 8002706:	bf94      	ite	ls
 8002708:	2301      	movls	r3, #1
 800270a:	2300      	movhi	r3, #0
 800270c:	b2db      	uxtb	r3, r3
 800270e:	e006      	b.n	800271e <HAL_I2C_Init+0x92>
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	4a77      	ldr	r2, [pc, #476]	; (80028f0 <HAL_I2C_Init+0x264>)
 8002714:	4293      	cmp	r3, r2
 8002716:	bf94      	ite	ls
 8002718:	2301      	movls	r3, #1
 800271a:	2300      	movhi	r3, #0
 800271c:	b2db      	uxtb	r3, r3
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e0db      	b.n	80028de <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	4a72      	ldr	r2, [pc, #456]	; (80028f4 <HAL_I2C_Init+0x268>)
 800272a:	fba2 2303 	umull	r2, r3, r2, r3
 800272e:	0c9b      	lsrs	r3, r3, #18
 8002730:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	68ba      	ldr	r2, [r7, #8]
 8002742:	430a      	orrs	r2, r1
 8002744:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	6a1b      	ldr	r3, [r3, #32]
 800274c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	4a64      	ldr	r2, [pc, #400]	; (80028e8 <HAL_I2C_Init+0x25c>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d802      	bhi.n	8002760 <HAL_I2C_Init+0xd4>
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	3301      	adds	r3, #1
 800275e:	e009      	b.n	8002774 <HAL_I2C_Init+0xe8>
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002766:	fb02 f303 	mul.w	r3, r2, r3
 800276a:	4a63      	ldr	r2, [pc, #396]	; (80028f8 <HAL_I2C_Init+0x26c>)
 800276c:	fba2 2303 	umull	r2, r3, r2, r3
 8002770:	099b      	lsrs	r3, r3, #6
 8002772:	3301      	adds	r3, #1
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	6812      	ldr	r2, [r2, #0]
 8002778:	430b      	orrs	r3, r1
 800277a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	69db      	ldr	r3, [r3, #28]
 8002782:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002786:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	4956      	ldr	r1, [pc, #344]	; (80028e8 <HAL_I2C_Init+0x25c>)
 8002790:	428b      	cmp	r3, r1
 8002792:	d80d      	bhi.n	80027b0 <HAL_I2C_Init+0x124>
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	1e59      	subs	r1, r3, #1
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	fbb1 f3f3 	udiv	r3, r1, r3
 80027a2:	3301      	adds	r3, #1
 80027a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027a8:	2b04      	cmp	r3, #4
 80027aa:	bf38      	it	cc
 80027ac:	2304      	movcc	r3, #4
 80027ae:	e04f      	b.n	8002850 <HAL_I2C_Init+0x1c4>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d111      	bne.n	80027dc <HAL_I2C_Init+0x150>
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	1e58      	subs	r0, r3, #1
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6859      	ldr	r1, [r3, #4]
 80027c0:	460b      	mov	r3, r1
 80027c2:	005b      	lsls	r3, r3, #1
 80027c4:	440b      	add	r3, r1
 80027c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80027ca:	3301      	adds	r3, #1
 80027cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	bf0c      	ite	eq
 80027d4:	2301      	moveq	r3, #1
 80027d6:	2300      	movne	r3, #0
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	e012      	b.n	8002802 <HAL_I2C_Init+0x176>
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	1e58      	subs	r0, r3, #1
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6859      	ldr	r1, [r3, #4]
 80027e4:	460b      	mov	r3, r1
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	440b      	add	r3, r1
 80027ea:	0099      	lsls	r1, r3, #2
 80027ec:	440b      	add	r3, r1
 80027ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80027f2:	3301      	adds	r3, #1
 80027f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	bf0c      	ite	eq
 80027fc:	2301      	moveq	r3, #1
 80027fe:	2300      	movne	r3, #0
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <HAL_I2C_Init+0x17e>
 8002806:	2301      	movs	r3, #1
 8002808:	e022      	b.n	8002850 <HAL_I2C_Init+0x1c4>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d10e      	bne.n	8002830 <HAL_I2C_Init+0x1a4>
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	1e58      	subs	r0, r3, #1
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6859      	ldr	r1, [r3, #4]
 800281a:	460b      	mov	r3, r1
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	440b      	add	r3, r1
 8002820:	fbb0 f3f3 	udiv	r3, r0, r3
 8002824:	3301      	adds	r3, #1
 8002826:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800282a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800282e:	e00f      	b.n	8002850 <HAL_I2C_Init+0x1c4>
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	1e58      	subs	r0, r3, #1
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6859      	ldr	r1, [r3, #4]
 8002838:	460b      	mov	r3, r1
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	440b      	add	r3, r1
 800283e:	0099      	lsls	r1, r3, #2
 8002840:	440b      	add	r3, r1
 8002842:	fbb0 f3f3 	udiv	r3, r0, r3
 8002846:	3301      	adds	r3, #1
 8002848:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800284c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002850:	6879      	ldr	r1, [r7, #4]
 8002852:	6809      	ldr	r1, [r1, #0]
 8002854:	4313      	orrs	r3, r2
 8002856:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	69da      	ldr	r2, [r3, #28]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a1b      	ldr	r3, [r3, #32]
 800286a:	431a      	orrs	r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	430a      	orrs	r2, r1
 8002872:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800287e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	6911      	ldr	r1, [r2, #16]
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	68d2      	ldr	r2, [r2, #12]
 800288a:	4311      	orrs	r1, r2
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	6812      	ldr	r2, [r2, #0]
 8002890:	430b      	orrs	r3, r1
 8002892:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	695a      	ldr	r2, [r3, #20]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	699b      	ldr	r3, [r3, #24]
 80028a6:	431a      	orrs	r2, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	430a      	orrs	r2, r1
 80028ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f042 0201 	orr.w	r2, r2, #1
 80028be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2220      	movs	r2, #32
 80028ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3710      	adds	r7, #16
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	000186a0 	.word	0x000186a0
 80028ec:	001e847f 	.word	0x001e847f
 80028f0:	003d08ff 	.word	0x003d08ff
 80028f4:	431bde83 	.word	0x431bde83
 80028f8:	10624dd3 	.word	0x10624dd3

080028fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2b20      	cmp	r3, #32
 8002910:	d129      	bne.n	8002966 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2224      	movs	r2, #36	; 0x24
 8002916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f022 0201 	bic.w	r2, r2, #1
 8002928:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f022 0210 	bic.w	r2, r2, #16
 8002938:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	430a      	orrs	r2, r1
 8002948:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f042 0201 	orr.w	r2, r2, #1
 8002958:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2220      	movs	r2, #32
 800295e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002962:	2300      	movs	r3, #0
 8002964:	e000      	b.n	8002968 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002966:	2302      	movs	r3, #2
  }
}
 8002968:	4618      	mov	r0, r3
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002974:	b480      	push	{r7}
 8002976:	b085      	sub	sp, #20
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800297e:	2300      	movs	r3, #0
 8002980:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002988:	b2db      	uxtb	r3, r3
 800298a:	2b20      	cmp	r3, #32
 800298c:	d12a      	bne.n	80029e4 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2224      	movs	r2, #36	; 0x24
 8002992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f022 0201 	bic.w	r2, r2, #1
 80029a4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ac:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80029ae:	89fb      	ldrh	r3, [r7, #14]
 80029b0:	f023 030f 	bic.w	r3, r3, #15
 80029b4:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	b29a      	uxth	r2, r3
 80029ba:	89fb      	ldrh	r3, [r7, #14]
 80029bc:	4313      	orrs	r3, r2
 80029be:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	89fa      	ldrh	r2, [r7, #14]
 80029c6:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f042 0201 	orr.w	r2, r2, #1
 80029d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2220      	movs	r2, #32
 80029dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80029e0:	2300      	movs	r3, #0
 80029e2:	e000      	b.n	80029e6 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80029e4:	2302      	movs	r3, #2
  }
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3714      	adds	r7, #20
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
	...

080029f4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80029fa:	2300      	movs	r3, #0
 80029fc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80029fe:	2300      	movs	r3, #0
 8002a00:	603b      	str	r3, [r7, #0]
 8002a02:	4b20      	ldr	r3, [pc, #128]	; (8002a84 <HAL_PWREx_EnableOverDrive+0x90>)
 8002a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a06:	4a1f      	ldr	r2, [pc, #124]	; (8002a84 <HAL_PWREx_EnableOverDrive+0x90>)
 8002a08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a0c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a0e:	4b1d      	ldr	r3, [pc, #116]	; (8002a84 <HAL_PWREx_EnableOverDrive+0x90>)
 8002a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a16:	603b      	str	r3, [r7, #0]
 8002a18:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002a1a:	4b1b      	ldr	r3, [pc, #108]	; (8002a88 <HAL_PWREx_EnableOverDrive+0x94>)
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a20:	f7ff faaa 	bl	8001f78 <HAL_GetTick>
 8002a24:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002a26:	e009      	b.n	8002a3c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002a28:	f7ff faa6 	bl	8001f78 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a36:	d901      	bls.n	8002a3c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e01f      	b.n	8002a7c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002a3c:	4b13      	ldr	r3, [pc, #76]	; (8002a8c <HAL_PWREx_EnableOverDrive+0x98>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a48:	d1ee      	bne.n	8002a28 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002a4a:	4b11      	ldr	r3, [pc, #68]	; (8002a90 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a50:	f7ff fa92 	bl	8001f78 <HAL_GetTick>
 8002a54:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002a56:	e009      	b.n	8002a6c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002a58:	f7ff fa8e 	bl	8001f78 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a66:	d901      	bls.n	8002a6c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e007      	b.n	8002a7c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002a6c:	4b07      	ldr	r3, [pc, #28]	; (8002a8c <HAL_PWREx_EnableOverDrive+0x98>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a78:	d1ee      	bne.n	8002a58 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002a7a:	2300      	movs	r3, #0
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3708      	adds	r7, #8
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	40023800 	.word	0x40023800
 8002a88:	420e0040 	.word	0x420e0040
 8002a8c:	40007000 	.word	0x40007000
 8002a90:	420e0044 	.word	0x420e0044

08002a94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b086      	sub	sp, #24
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e25b      	b.n	8002f5e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d075      	beq.n	8002b9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ab2:	4ba3      	ldr	r3, [pc, #652]	; (8002d40 <HAL_RCC_OscConfig+0x2ac>)
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f003 030c 	and.w	r3, r3, #12
 8002aba:	2b04      	cmp	r3, #4
 8002abc:	d00c      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002abe:	4ba0      	ldr	r3, [pc, #640]	; (8002d40 <HAL_RCC_OscConfig+0x2ac>)
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ac6:	2b08      	cmp	r3, #8
 8002ac8:	d112      	bne.n	8002af0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002aca:	4b9d      	ldr	r3, [pc, #628]	; (8002d40 <HAL_RCC_OscConfig+0x2ac>)
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ad2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ad6:	d10b      	bne.n	8002af0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ad8:	4b99      	ldr	r3, [pc, #612]	; (8002d40 <HAL_RCC_OscConfig+0x2ac>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d05b      	beq.n	8002b9c <HAL_RCC_OscConfig+0x108>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d157      	bne.n	8002b9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e236      	b.n	8002f5e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002af8:	d106      	bne.n	8002b08 <HAL_RCC_OscConfig+0x74>
 8002afa:	4b91      	ldr	r3, [pc, #580]	; (8002d40 <HAL_RCC_OscConfig+0x2ac>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a90      	ldr	r2, [pc, #576]	; (8002d40 <HAL_RCC_OscConfig+0x2ac>)
 8002b00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b04:	6013      	str	r3, [r2, #0]
 8002b06:	e01d      	b.n	8002b44 <HAL_RCC_OscConfig+0xb0>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b10:	d10c      	bne.n	8002b2c <HAL_RCC_OscConfig+0x98>
 8002b12:	4b8b      	ldr	r3, [pc, #556]	; (8002d40 <HAL_RCC_OscConfig+0x2ac>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a8a      	ldr	r2, [pc, #552]	; (8002d40 <HAL_RCC_OscConfig+0x2ac>)
 8002b18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b1c:	6013      	str	r3, [r2, #0]
 8002b1e:	4b88      	ldr	r3, [pc, #544]	; (8002d40 <HAL_RCC_OscConfig+0x2ac>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a87      	ldr	r2, [pc, #540]	; (8002d40 <HAL_RCC_OscConfig+0x2ac>)
 8002b24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b28:	6013      	str	r3, [r2, #0]
 8002b2a:	e00b      	b.n	8002b44 <HAL_RCC_OscConfig+0xb0>
 8002b2c:	4b84      	ldr	r3, [pc, #528]	; (8002d40 <HAL_RCC_OscConfig+0x2ac>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a83      	ldr	r2, [pc, #524]	; (8002d40 <HAL_RCC_OscConfig+0x2ac>)
 8002b32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b36:	6013      	str	r3, [r2, #0]
 8002b38:	4b81      	ldr	r3, [pc, #516]	; (8002d40 <HAL_RCC_OscConfig+0x2ac>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a80      	ldr	r2, [pc, #512]	; (8002d40 <HAL_RCC_OscConfig+0x2ac>)
 8002b3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d013      	beq.n	8002b74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b4c:	f7ff fa14 	bl	8001f78 <HAL_GetTick>
 8002b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b52:	e008      	b.n	8002b66 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b54:	f7ff fa10 	bl	8001f78 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b64      	cmp	r3, #100	; 0x64
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e1fb      	b.n	8002f5e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b66:	4b76      	ldr	r3, [pc, #472]	; (8002d40 <HAL_RCC_OscConfig+0x2ac>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d0f0      	beq.n	8002b54 <HAL_RCC_OscConfig+0xc0>
 8002b72:	e014      	b.n	8002b9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b74:	f7ff fa00 	bl	8001f78 <HAL_GetTick>
 8002b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b7a:	e008      	b.n	8002b8e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b7c:	f7ff f9fc 	bl	8001f78 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b64      	cmp	r3, #100	; 0x64
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e1e7      	b.n	8002f5e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b8e:	4b6c      	ldr	r3, [pc, #432]	; (8002d40 <HAL_RCC_OscConfig+0x2ac>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d1f0      	bne.n	8002b7c <HAL_RCC_OscConfig+0xe8>
 8002b9a:	e000      	b.n	8002b9e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d063      	beq.n	8002c72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002baa:	4b65      	ldr	r3, [pc, #404]	; (8002d40 <HAL_RCC_OscConfig+0x2ac>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f003 030c 	and.w	r3, r3, #12
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00b      	beq.n	8002bce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bb6:	4b62      	ldr	r3, [pc, #392]	; (8002d40 <HAL_RCC_OscConfig+0x2ac>)
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bbe:	2b08      	cmp	r3, #8
 8002bc0:	d11c      	bne.n	8002bfc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bc2:	4b5f      	ldr	r3, [pc, #380]	; (8002d40 <HAL_RCC_OscConfig+0x2ac>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d116      	bne.n	8002bfc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bce:	4b5c      	ldr	r3, [pc, #368]	; (8002d40 <HAL_RCC_OscConfig+0x2ac>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d005      	beq.n	8002be6 <HAL_RCC_OscConfig+0x152>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d001      	beq.n	8002be6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e1bb      	b.n	8002f5e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002be6:	4b56      	ldr	r3, [pc, #344]	; (8002d40 <HAL_RCC_OscConfig+0x2ac>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	4952      	ldr	r1, [pc, #328]	; (8002d40 <HAL_RCC_OscConfig+0x2ac>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bfa:	e03a      	b.n	8002c72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d020      	beq.n	8002c46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c04:	4b4f      	ldr	r3, [pc, #316]	; (8002d44 <HAL_RCC_OscConfig+0x2b0>)
 8002c06:	2201      	movs	r2, #1
 8002c08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c0a:	f7ff f9b5 	bl	8001f78 <HAL_GetTick>
 8002c0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c10:	e008      	b.n	8002c24 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c12:	f7ff f9b1 	bl	8001f78 <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d901      	bls.n	8002c24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e19c      	b.n	8002f5e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c24:	4b46      	ldr	r3, [pc, #280]	; (8002d40 <HAL_RCC_OscConfig+0x2ac>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0302 	and.w	r3, r3, #2
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d0f0      	beq.n	8002c12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c30:	4b43      	ldr	r3, [pc, #268]	; (8002d40 <HAL_RCC_OscConfig+0x2ac>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	00db      	lsls	r3, r3, #3
 8002c3e:	4940      	ldr	r1, [pc, #256]	; (8002d40 <HAL_RCC_OscConfig+0x2ac>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	600b      	str	r3, [r1, #0]
 8002c44:	e015      	b.n	8002c72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c46:	4b3f      	ldr	r3, [pc, #252]	; (8002d44 <HAL_RCC_OscConfig+0x2b0>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c4c:	f7ff f994 	bl	8001f78 <HAL_GetTick>
 8002c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c52:	e008      	b.n	8002c66 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c54:	f7ff f990 	bl	8001f78 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e17b      	b.n	8002f5e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c66:	4b36      	ldr	r3, [pc, #216]	; (8002d40 <HAL_RCC_OscConfig+0x2ac>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d1f0      	bne.n	8002c54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0308 	and.w	r3, r3, #8
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d030      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d016      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c86:	4b30      	ldr	r3, [pc, #192]	; (8002d48 <HAL_RCC_OscConfig+0x2b4>)
 8002c88:	2201      	movs	r2, #1
 8002c8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c8c:	f7ff f974 	bl	8001f78 <HAL_GetTick>
 8002c90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c92:	e008      	b.n	8002ca6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c94:	f7ff f970 	bl	8001f78 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e15b      	b.n	8002f5e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ca6:	4b26      	ldr	r3, [pc, #152]	; (8002d40 <HAL_RCC_OscConfig+0x2ac>)
 8002ca8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d0f0      	beq.n	8002c94 <HAL_RCC_OscConfig+0x200>
 8002cb2:	e015      	b.n	8002ce0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cb4:	4b24      	ldr	r3, [pc, #144]	; (8002d48 <HAL_RCC_OscConfig+0x2b4>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cba:	f7ff f95d 	bl	8001f78 <HAL_GetTick>
 8002cbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cc0:	e008      	b.n	8002cd4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cc2:	f7ff f959 	bl	8001f78 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d901      	bls.n	8002cd4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e144      	b.n	8002f5e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cd4:	4b1a      	ldr	r3, [pc, #104]	; (8002d40 <HAL_RCC_OscConfig+0x2ac>)
 8002cd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cd8:	f003 0302 	and.w	r3, r3, #2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d1f0      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0304 	and.w	r3, r3, #4
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	f000 80a0 	beq.w	8002e2e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cf2:	4b13      	ldr	r3, [pc, #76]	; (8002d40 <HAL_RCC_OscConfig+0x2ac>)
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d10f      	bne.n	8002d1e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cfe:	2300      	movs	r3, #0
 8002d00:	60bb      	str	r3, [r7, #8]
 8002d02:	4b0f      	ldr	r3, [pc, #60]	; (8002d40 <HAL_RCC_OscConfig+0x2ac>)
 8002d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d06:	4a0e      	ldr	r2, [pc, #56]	; (8002d40 <HAL_RCC_OscConfig+0x2ac>)
 8002d08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d0c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d0e:	4b0c      	ldr	r3, [pc, #48]	; (8002d40 <HAL_RCC_OscConfig+0x2ac>)
 8002d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d16:	60bb      	str	r3, [r7, #8]
 8002d18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d1e:	4b0b      	ldr	r3, [pc, #44]	; (8002d4c <HAL_RCC_OscConfig+0x2b8>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d121      	bne.n	8002d6e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d2a:	4b08      	ldr	r3, [pc, #32]	; (8002d4c <HAL_RCC_OscConfig+0x2b8>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a07      	ldr	r2, [pc, #28]	; (8002d4c <HAL_RCC_OscConfig+0x2b8>)
 8002d30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d36:	f7ff f91f 	bl	8001f78 <HAL_GetTick>
 8002d3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d3c:	e011      	b.n	8002d62 <HAL_RCC_OscConfig+0x2ce>
 8002d3e:	bf00      	nop
 8002d40:	40023800 	.word	0x40023800
 8002d44:	42470000 	.word	0x42470000
 8002d48:	42470e80 	.word	0x42470e80
 8002d4c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d50:	f7ff f912 	bl	8001f78 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e0fd      	b.n	8002f5e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d62:	4b81      	ldr	r3, [pc, #516]	; (8002f68 <HAL_RCC_OscConfig+0x4d4>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d0f0      	beq.n	8002d50 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d106      	bne.n	8002d84 <HAL_RCC_OscConfig+0x2f0>
 8002d76:	4b7d      	ldr	r3, [pc, #500]	; (8002f6c <HAL_RCC_OscConfig+0x4d8>)
 8002d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d7a:	4a7c      	ldr	r2, [pc, #496]	; (8002f6c <HAL_RCC_OscConfig+0x4d8>)
 8002d7c:	f043 0301 	orr.w	r3, r3, #1
 8002d80:	6713      	str	r3, [r2, #112]	; 0x70
 8002d82:	e01c      	b.n	8002dbe <HAL_RCC_OscConfig+0x32a>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	2b05      	cmp	r3, #5
 8002d8a:	d10c      	bne.n	8002da6 <HAL_RCC_OscConfig+0x312>
 8002d8c:	4b77      	ldr	r3, [pc, #476]	; (8002f6c <HAL_RCC_OscConfig+0x4d8>)
 8002d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d90:	4a76      	ldr	r2, [pc, #472]	; (8002f6c <HAL_RCC_OscConfig+0x4d8>)
 8002d92:	f043 0304 	orr.w	r3, r3, #4
 8002d96:	6713      	str	r3, [r2, #112]	; 0x70
 8002d98:	4b74      	ldr	r3, [pc, #464]	; (8002f6c <HAL_RCC_OscConfig+0x4d8>)
 8002d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d9c:	4a73      	ldr	r2, [pc, #460]	; (8002f6c <HAL_RCC_OscConfig+0x4d8>)
 8002d9e:	f043 0301 	orr.w	r3, r3, #1
 8002da2:	6713      	str	r3, [r2, #112]	; 0x70
 8002da4:	e00b      	b.n	8002dbe <HAL_RCC_OscConfig+0x32a>
 8002da6:	4b71      	ldr	r3, [pc, #452]	; (8002f6c <HAL_RCC_OscConfig+0x4d8>)
 8002da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002daa:	4a70      	ldr	r2, [pc, #448]	; (8002f6c <HAL_RCC_OscConfig+0x4d8>)
 8002dac:	f023 0301 	bic.w	r3, r3, #1
 8002db0:	6713      	str	r3, [r2, #112]	; 0x70
 8002db2:	4b6e      	ldr	r3, [pc, #440]	; (8002f6c <HAL_RCC_OscConfig+0x4d8>)
 8002db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db6:	4a6d      	ldr	r2, [pc, #436]	; (8002f6c <HAL_RCC_OscConfig+0x4d8>)
 8002db8:	f023 0304 	bic.w	r3, r3, #4
 8002dbc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d015      	beq.n	8002df2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc6:	f7ff f8d7 	bl	8001f78 <HAL_GetTick>
 8002dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dcc:	e00a      	b.n	8002de4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dce:	f7ff f8d3 	bl	8001f78 <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d901      	bls.n	8002de4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e0bc      	b.n	8002f5e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002de4:	4b61      	ldr	r3, [pc, #388]	; (8002f6c <HAL_RCC_OscConfig+0x4d8>)
 8002de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de8:	f003 0302 	and.w	r3, r3, #2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d0ee      	beq.n	8002dce <HAL_RCC_OscConfig+0x33a>
 8002df0:	e014      	b.n	8002e1c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002df2:	f7ff f8c1 	bl	8001f78 <HAL_GetTick>
 8002df6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002df8:	e00a      	b.n	8002e10 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dfa:	f7ff f8bd 	bl	8001f78 <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d901      	bls.n	8002e10 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e0a6      	b.n	8002f5e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e10:	4b56      	ldr	r3, [pc, #344]	; (8002f6c <HAL_RCC_OscConfig+0x4d8>)
 8002e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d1ee      	bne.n	8002dfa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e1c:	7dfb      	ldrb	r3, [r7, #23]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d105      	bne.n	8002e2e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e22:	4b52      	ldr	r3, [pc, #328]	; (8002f6c <HAL_RCC_OscConfig+0x4d8>)
 8002e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e26:	4a51      	ldr	r2, [pc, #324]	; (8002f6c <HAL_RCC_OscConfig+0x4d8>)
 8002e28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e2c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	f000 8092 	beq.w	8002f5c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e38:	4b4c      	ldr	r3, [pc, #304]	; (8002f6c <HAL_RCC_OscConfig+0x4d8>)
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f003 030c 	and.w	r3, r3, #12
 8002e40:	2b08      	cmp	r3, #8
 8002e42:	d05c      	beq.n	8002efe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d141      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e4c:	4b48      	ldr	r3, [pc, #288]	; (8002f70 <HAL_RCC_OscConfig+0x4dc>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e52:	f7ff f891 	bl	8001f78 <HAL_GetTick>
 8002e56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e58:	e008      	b.n	8002e6c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e5a:	f7ff f88d 	bl	8001f78 <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d901      	bls.n	8002e6c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e078      	b.n	8002f5e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e6c:	4b3f      	ldr	r3, [pc, #252]	; (8002f6c <HAL_RCC_OscConfig+0x4d8>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d1f0      	bne.n	8002e5a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	69da      	ldr	r2, [r3, #28]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a1b      	ldr	r3, [r3, #32]
 8002e80:	431a      	orrs	r2, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e86:	019b      	lsls	r3, r3, #6
 8002e88:	431a      	orrs	r2, r3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e8e:	085b      	lsrs	r3, r3, #1
 8002e90:	3b01      	subs	r3, #1
 8002e92:	041b      	lsls	r3, r3, #16
 8002e94:	431a      	orrs	r2, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e9a:	061b      	lsls	r3, r3, #24
 8002e9c:	4933      	ldr	r1, [pc, #204]	; (8002f6c <HAL_RCC_OscConfig+0x4d8>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ea2:	4b33      	ldr	r3, [pc, #204]	; (8002f70 <HAL_RCC_OscConfig+0x4dc>)
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea8:	f7ff f866 	bl	8001f78 <HAL_GetTick>
 8002eac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eae:	e008      	b.n	8002ec2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eb0:	f7ff f862 	bl	8001f78 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d901      	bls.n	8002ec2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e04d      	b.n	8002f5e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ec2:	4b2a      	ldr	r3, [pc, #168]	; (8002f6c <HAL_RCC_OscConfig+0x4d8>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d0f0      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x41c>
 8002ece:	e045      	b.n	8002f5c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ed0:	4b27      	ldr	r3, [pc, #156]	; (8002f70 <HAL_RCC_OscConfig+0x4dc>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed6:	f7ff f84f 	bl	8001f78 <HAL_GetTick>
 8002eda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002edc:	e008      	b.n	8002ef0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ede:	f7ff f84b 	bl	8001f78 <HAL_GetTick>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d901      	bls.n	8002ef0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002eec:	2303      	movs	r3, #3
 8002eee:	e036      	b.n	8002f5e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ef0:	4b1e      	ldr	r3, [pc, #120]	; (8002f6c <HAL_RCC_OscConfig+0x4d8>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d1f0      	bne.n	8002ede <HAL_RCC_OscConfig+0x44a>
 8002efc:	e02e      	b.n	8002f5c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d101      	bne.n	8002f0a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e029      	b.n	8002f5e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f0a:	4b18      	ldr	r3, [pc, #96]	; (8002f6c <HAL_RCC_OscConfig+0x4d8>)
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	69db      	ldr	r3, [r3, #28]
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d11c      	bne.n	8002f58 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d115      	bne.n	8002f58 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002f2c:	68fa      	ldr	r2, [r7, #12]
 8002f2e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f32:	4013      	ands	r3, r2
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d10d      	bne.n	8002f58 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d106      	bne.n	8002f58 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d001      	beq.n	8002f5c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e000      	b.n	8002f5e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3718      	adds	r7, #24
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	40007000 	.word	0x40007000
 8002f6c:	40023800 	.word	0x40023800
 8002f70:	42470060 	.word	0x42470060

08002f74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d101      	bne.n	8002f88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e0cc      	b.n	8003122 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f88:	4b68      	ldr	r3, [pc, #416]	; (800312c <HAL_RCC_ClockConfig+0x1b8>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 030f 	and.w	r3, r3, #15
 8002f90:	683a      	ldr	r2, [r7, #0]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d90c      	bls.n	8002fb0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f96:	4b65      	ldr	r3, [pc, #404]	; (800312c <HAL_RCC_ClockConfig+0x1b8>)
 8002f98:	683a      	ldr	r2, [r7, #0]
 8002f9a:	b2d2      	uxtb	r2, r2
 8002f9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f9e:	4b63      	ldr	r3, [pc, #396]	; (800312c <HAL_RCC_ClockConfig+0x1b8>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 030f 	and.w	r3, r3, #15
 8002fa6:	683a      	ldr	r2, [r7, #0]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d001      	beq.n	8002fb0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e0b8      	b.n	8003122 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0302 	and.w	r3, r3, #2
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d020      	beq.n	8002ffe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0304 	and.w	r3, r3, #4
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d005      	beq.n	8002fd4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fc8:	4b59      	ldr	r3, [pc, #356]	; (8003130 <HAL_RCC_ClockConfig+0x1bc>)
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	4a58      	ldr	r2, [pc, #352]	; (8003130 <HAL_RCC_ClockConfig+0x1bc>)
 8002fce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002fd2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0308 	and.w	r3, r3, #8
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d005      	beq.n	8002fec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fe0:	4b53      	ldr	r3, [pc, #332]	; (8003130 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	4a52      	ldr	r2, [pc, #328]	; (8003130 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002fea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fec:	4b50      	ldr	r3, [pc, #320]	; (8003130 <HAL_RCC_ClockConfig+0x1bc>)
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	494d      	ldr	r1, [pc, #308]	; (8003130 <HAL_RCC_ClockConfig+0x1bc>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0301 	and.w	r3, r3, #1
 8003006:	2b00      	cmp	r3, #0
 8003008:	d044      	beq.n	8003094 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d107      	bne.n	8003022 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003012:	4b47      	ldr	r3, [pc, #284]	; (8003130 <HAL_RCC_ClockConfig+0x1bc>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d119      	bne.n	8003052 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e07f      	b.n	8003122 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	2b02      	cmp	r3, #2
 8003028:	d003      	beq.n	8003032 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800302e:	2b03      	cmp	r3, #3
 8003030:	d107      	bne.n	8003042 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003032:	4b3f      	ldr	r3, [pc, #252]	; (8003130 <HAL_RCC_ClockConfig+0x1bc>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d109      	bne.n	8003052 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e06f      	b.n	8003122 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003042:	4b3b      	ldr	r3, [pc, #236]	; (8003130 <HAL_RCC_ClockConfig+0x1bc>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e067      	b.n	8003122 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003052:	4b37      	ldr	r3, [pc, #220]	; (8003130 <HAL_RCC_ClockConfig+0x1bc>)
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f023 0203 	bic.w	r2, r3, #3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	4934      	ldr	r1, [pc, #208]	; (8003130 <HAL_RCC_ClockConfig+0x1bc>)
 8003060:	4313      	orrs	r3, r2
 8003062:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003064:	f7fe ff88 	bl	8001f78 <HAL_GetTick>
 8003068:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800306a:	e00a      	b.n	8003082 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800306c:	f7fe ff84 	bl	8001f78 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	f241 3288 	movw	r2, #5000	; 0x1388
 800307a:	4293      	cmp	r3, r2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e04f      	b.n	8003122 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003082:	4b2b      	ldr	r3, [pc, #172]	; (8003130 <HAL_RCC_ClockConfig+0x1bc>)
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f003 020c 	and.w	r2, r3, #12
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	429a      	cmp	r2, r3
 8003092:	d1eb      	bne.n	800306c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003094:	4b25      	ldr	r3, [pc, #148]	; (800312c <HAL_RCC_ClockConfig+0x1b8>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 030f 	and.w	r3, r3, #15
 800309c:	683a      	ldr	r2, [r7, #0]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d20c      	bcs.n	80030bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030a2:	4b22      	ldr	r3, [pc, #136]	; (800312c <HAL_RCC_ClockConfig+0x1b8>)
 80030a4:	683a      	ldr	r2, [r7, #0]
 80030a6:	b2d2      	uxtb	r2, r2
 80030a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030aa:	4b20      	ldr	r3, [pc, #128]	; (800312c <HAL_RCC_ClockConfig+0x1b8>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 030f 	and.w	r3, r3, #15
 80030b2:	683a      	ldr	r2, [r7, #0]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d001      	beq.n	80030bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e032      	b.n	8003122 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0304 	and.w	r3, r3, #4
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d008      	beq.n	80030da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030c8:	4b19      	ldr	r3, [pc, #100]	; (8003130 <HAL_RCC_ClockConfig+0x1bc>)
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	4916      	ldr	r1, [pc, #88]	; (8003130 <HAL_RCC_ClockConfig+0x1bc>)
 80030d6:	4313      	orrs	r3, r2
 80030d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0308 	and.w	r3, r3, #8
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d009      	beq.n	80030fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030e6:	4b12      	ldr	r3, [pc, #72]	; (8003130 <HAL_RCC_ClockConfig+0x1bc>)
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	00db      	lsls	r3, r3, #3
 80030f4:	490e      	ldr	r1, [pc, #56]	; (8003130 <HAL_RCC_ClockConfig+0x1bc>)
 80030f6:	4313      	orrs	r3, r2
 80030f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030fa:	f000 f821 	bl	8003140 <HAL_RCC_GetSysClockFreq>
 80030fe:	4601      	mov	r1, r0
 8003100:	4b0b      	ldr	r3, [pc, #44]	; (8003130 <HAL_RCC_ClockConfig+0x1bc>)
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	091b      	lsrs	r3, r3, #4
 8003106:	f003 030f 	and.w	r3, r3, #15
 800310a:	4a0a      	ldr	r2, [pc, #40]	; (8003134 <HAL_RCC_ClockConfig+0x1c0>)
 800310c:	5cd3      	ldrb	r3, [r2, r3]
 800310e:	fa21 f303 	lsr.w	r3, r1, r3
 8003112:	4a09      	ldr	r2, [pc, #36]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 8003114:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003116:	4b09      	ldr	r3, [pc, #36]	; (800313c <HAL_RCC_ClockConfig+0x1c8>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4618      	mov	r0, r3
 800311c:	f7fe fee8 	bl	8001ef0 <HAL_InitTick>

  return HAL_OK;
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	3710      	adds	r7, #16
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	40023c00 	.word	0x40023c00
 8003130:	40023800 	.word	0x40023800
 8003134:	080055f8 	.word	0x080055f8
 8003138:	20000004 	.word	0x20000004
 800313c:	20000008 	.word	0x20000008

08003140 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003140:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003142:	b085      	sub	sp, #20
 8003144:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003146:	2300      	movs	r3, #0
 8003148:	607b      	str	r3, [r7, #4]
 800314a:	2300      	movs	r3, #0
 800314c:	60fb      	str	r3, [r7, #12]
 800314e:	2300      	movs	r3, #0
 8003150:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003152:	2300      	movs	r3, #0
 8003154:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003156:	4b63      	ldr	r3, [pc, #396]	; (80032e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f003 030c 	and.w	r3, r3, #12
 800315e:	2b04      	cmp	r3, #4
 8003160:	d007      	beq.n	8003172 <HAL_RCC_GetSysClockFreq+0x32>
 8003162:	2b08      	cmp	r3, #8
 8003164:	d008      	beq.n	8003178 <HAL_RCC_GetSysClockFreq+0x38>
 8003166:	2b00      	cmp	r3, #0
 8003168:	f040 80b4 	bne.w	80032d4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800316c:	4b5e      	ldr	r3, [pc, #376]	; (80032e8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800316e:	60bb      	str	r3, [r7, #8]
       break;
 8003170:	e0b3      	b.n	80032da <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003172:	4b5e      	ldr	r3, [pc, #376]	; (80032ec <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003174:	60bb      	str	r3, [r7, #8]
      break;
 8003176:	e0b0      	b.n	80032da <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003178:	4b5a      	ldr	r3, [pc, #360]	; (80032e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003180:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003182:	4b58      	ldr	r3, [pc, #352]	; (80032e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d04a      	beq.n	8003224 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800318e:	4b55      	ldr	r3, [pc, #340]	; (80032e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	099b      	lsrs	r3, r3, #6
 8003194:	f04f 0400 	mov.w	r4, #0
 8003198:	f240 11ff 	movw	r1, #511	; 0x1ff
 800319c:	f04f 0200 	mov.w	r2, #0
 80031a0:	ea03 0501 	and.w	r5, r3, r1
 80031a4:	ea04 0602 	and.w	r6, r4, r2
 80031a8:	4629      	mov	r1, r5
 80031aa:	4632      	mov	r2, r6
 80031ac:	f04f 0300 	mov.w	r3, #0
 80031b0:	f04f 0400 	mov.w	r4, #0
 80031b4:	0154      	lsls	r4, r2, #5
 80031b6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80031ba:	014b      	lsls	r3, r1, #5
 80031bc:	4619      	mov	r1, r3
 80031be:	4622      	mov	r2, r4
 80031c0:	1b49      	subs	r1, r1, r5
 80031c2:	eb62 0206 	sbc.w	r2, r2, r6
 80031c6:	f04f 0300 	mov.w	r3, #0
 80031ca:	f04f 0400 	mov.w	r4, #0
 80031ce:	0194      	lsls	r4, r2, #6
 80031d0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80031d4:	018b      	lsls	r3, r1, #6
 80031d6:	1a5b      	subs	r3, r3, r1
 80031d8:	eb64 0402 	sbc.w	r4, r4, r2
 80031dc:	f04f 0100 	mov.w	r1, #0
 80031e0:	f04f 0200 	mov.w	r2, #0
 80031e4:	00e2      	lsls	r2, r4, #3
 80031e6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80031ea:	00d9      	lsls	r1, r3, #3
 80031ec:	460b      	mov	r3, r1
 80031ee:	4614      	mov	r4, r2
 80031f0:	195b      	adds	r3, r3, r5
 80031f2:	eb44 0406 	adc.w	r4, r4, r6
 80031f6:	f04f 0100 	mov.w	r1, #0
 80031fa:	f04f 0200 	mov.w	r2, #0
 80031fe:	0262      	lsls	r2, r4, #9
 8003200:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003204:	0259      	lsls	r1, r3, #9
 8003206:	460b      	mov	r3, r1
 8003208:	4614      	mov	r4, r2
 800320a:	4618      	mov	r0, r3
 800320c:	4621      	mov	r1, r4
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f04f 0400 	mov.w	r4, #0
 8003214:	461a      	mov	r2, r3
 8003216:	4623      	mov	r3, r4
 8003218:	f7fc ffe8 	bl	80001ec <__aeabi_uldivmod>
 800321c:	4603      	mov	r3, r0
 800321e:	460c      	mov	r4, r1
 8003220:	60fb      	str	r3, [r7, #12]
 8003222:	e049      	b.n	80032b8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003224:	4b2f      	ldr	r3, [pc, #188]	; (80032e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	099b      	lsrs	r3, r3, #6
 800322a:	f04f 0400 	mov.w	r4, #0
 800322e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003232:	f04f 0200 	mov.w	r2, #0
 8003236:	ea03 0501 	and.w	r5, r3, r1
 800323a:	ea04 0602 	and.w	r6, r4, r2
 800323e:	4629      	mov	r1, r5
 8003240:	4632      	mov	r2, r6
 8003242:	f04f 0300 	mov.w	r3, #0
 8003246:	f04f 0400 	mov.w	r4, #0
 800324a:	0154      	lsls	r4, r2, #5
 800324c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003250:	014b      	lsls	r3, r1, #5
 8003252:	4619      	mov	r1, r3
 8003254:	4622      	mov	r2, r4
 8003256:	1b49      	subs	r1, r1, r5
 8003258:	eb62 0206 	sbc.w	r2, r2, r6
 800325c:	f04f 0300 	mov.w	r3, #0
 8003260:	f04f 0400 	mov.w	r4, #0
 8003264:	0194      	lsls	r4, r2, #6
 8003266:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800326a:	018b      	lsls	r3, r1, #6
 800326c:	1a5b      	subs	r3, r3, r1
 800326e:	eb64 0402 	sbc.w	r4, r4, r2
 8003272:	f04f 0100 	mov.w	r1, #0
 8003276:	f04f 0200 	mov.w	r2, #0
 800327a:	00e2      	lsls	r2, r4, #3
 800327c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003280:	00d9      	lsls	r1, r3, #3
 8003282:	460b      	mov	r3, r1
 8003284:	4614      	mov	r4, r2
 8003286:	195b      	adds	r3, r3, r5
 8003288:	eb44 0406 	adc.w	r4, r4, r6
 800328c:	f04f 0100 	mov.w	r1, #0
 8003290:	f04f 0200 	mov.w	r2, #0
 8003294:	02a2      	lsls	r2, r4, #10
 8003296:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800329a:	0299      	lsls	r1, r3, #10
 800329c:	460b      	mov	r3, r1
 800329e:	4614      	mov	r4, r2
 80032a0:	4618      	mov	r0, r3
 80032a2:	4621      	mov	r1, r4
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f04f 0400 	mov.w	r4, #0
 80032aa:	461a      	mov	r2, r3
 80032ac:	4623      	mov	r3, r4
 80032ae:	f7fc ff9d 	bl	80001ec <__aeabi_uldivmod>
 80032b2:	4603      	mov	r3, r0
 80032b4:	460c      	mov	r4, r1
 80032b6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80032b8:	4b0a      	ldr	r3, [pc, #40]	; (80032e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	0c1b      	lsrs	r3, r3, #16
 80032be:	f003 0303 	and.w	r3, r3, #3
 80032c2:	3301      	adds	r3, #1
 80032c4:	005b      	lsls	r3, r3, #1
 80032c6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80032c8:	68fa      	ldr	r2, [r7, #12]
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d0:	60bb      	str	r3, [r7, #8]
      break;
 80032d2:	e002      	b.n	80032da <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032d4:	4b04      	ldr	r3, [pc, #16]	; (80032e8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80032d6:	60bb      	str	r3, [r7, #8]
      break;
 80032d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032da:	68bb      	ldr	r3, [r7, #8]
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3714      	adds	r7, #20
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032e4:	40023800 	.word	0x40023800
 80032e8:	00f42400 	.word	0x00f42400
 80032ec:	007a1200 	.word	0x007a1200

080032f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032f0:	b480      	push	{r7}
 80032f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032f4:	4b03      	ldr	r3, [pc, #12]	; (8003304 <HAL_RCC_GetHCLKFreq+0x14>)
 80032f6:	681b      	ldr	r3, [r3, #0]
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	20000004 	.word	0x20000004

08003308 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800330c:	f7ff fff0 	bl	80032f0 <HAL_RCC_GetHCLKFreq>
 8003310:	4601      	mov	r1, r0
 8003312:	4b05      	ldr	r3, [pc, #20]	; (8003328 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	0a9b      	lsrs	r3, r3, #10
 8003318:	f003 0307 	and.w	r3, r3, #7
 800331c:	4a03      	ldr	r2, [pc, #12]	; (800332c <HAL_RCC_GetPCLK1Freq+0x24>)
 800331e:	5cd3      	ldrb	r3, [r2, r3]
 8003320:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003324:	4618      	mov	r0, r3
 8003326:	bd80      	pop	{r7, pc}
 8003328:	40023800 	.word	0x40023800
 800332c:	08005608 	.word	0x08005608

08003330 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003334:	f7ff ffdc 	bl	80032f0 <HAL_RCC_GetHCLKFreq>
 8003338:	4601      	mov	r1, r0
 800333a:	4b05      	ldr	r3, [pc, #20]	; (8003350 <HAL_RCC_GetPCLK2Freq+0x20>)
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	0b5b      	lsrs	r3, r3, #13
 8003340:	f003 0307 	and.w	r3, r3, #7
 8003344:	4a03      	ldr	r2, [pc, #12]	; (8003354 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003346:	5cd3      	ldrb	r3, [r2, r3]
 8003348:	fa21 f303 	lsr.w	r3, r1, r3
}
 800334c:	4618      	mov	r0, r3
 800334e:	bd80      	pop	{r7, pc}
 8003350:	40023800 	.word	0x40023800
 8003354:	08005608 	.word	0x08005608

08003358 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d101      	bne.n	800336a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e01d      	b.n	80033a6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d106      	bne.n	8003384 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f7fe fb9c 	bl	8001abc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2202      	movs	r2, #2
 8003388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	3304      	adds	r3, #4
 8003394:	4619      	mov	r1, r3
 8003396:	4610      	mov	r0, r2
 8003398:	f000 fca2 	bl	8003ce0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3708      	adds	r7, #8
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}

080033ae <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80033ae:	b480      	push	{r7}
 80033b0:	b085      	sub	sp, #20
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2202      	movs	r2, #2
 80033ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	f003 0307 	and.w	r3, r3, #7
 80033c8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2b06      	cmp	r3, #6
 80033ce:	d007      	beq.n	80033e0 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f042 0201 	orr.w	r2, r2, #1
 80033de:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3714      	adds	r7, #20
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr

080033f6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033f6:	b480      	push	{r7}
 80033f8:	b085      	sub	sp, #20
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68da      	ldr	r2, [r3, #12]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f042 0201 	orr.w	r2, r2, #1
 800340c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	f003 0307 	and.w	r3, r3, #7
 8003418:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2b06      	cmp	r3, #6
 800341e:	d007      	beq.n	8003430 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f042 0201 	orr.w	r2, r2, #1
 800342e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3714      	adds	r7, #20
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr

0800343e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800343e:	b580      	push	{r7, lr}
 8003440:	b082      	sub	sp, #8
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d101      	bne.n	8003450 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e01d      	b.n	800348c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003456:	b2db      	uxtb	r3, r3
 8003458:	2b00      	cmp	r3, #0
 800345a:	d106      	bne.n	800346a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f000 f815 	bl	8003494 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2202      	movs	r2, #2
 800346e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	3304      	adds	r3, #4
 800347a:	4619      	mov	r1, r3
 800347c:	4610      	mov	r0, r2
 800347e:	f000 fc2f 	bl	8003ce0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2201      	movs	r2, #1
 8003486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800348a:	2300      	movs	r3, #0
}
 800348c:	4618      	mov	r0, r3
 800348e:	3708      	adds	r7, #8
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800349c:	bf00      	nop
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2201      	movs	r2, #1
 80034b8:	6839      	ldr	r1, [r7, #0]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f001 f824 	bl	8004508 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a15      	ldr	r2, [pc, #84]	; (800351c <HAL_TIM_PWM_Start+0x74>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d004      	beq.n	80034d4 <HAL_TIM_PWM_Start+0x2c>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a14      	ldr	r2, [pc, #80]	; (8003520 <HAL_TIM_PWM_Start+0x78>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d101      	bne.n	80034d8 <HAL_TIM_PWM_Start+0x30>
 80034d4:	2301      	movs	r3, #1
 80034d6:	e000      	b.n	80034da <HAL_TIM_PWM_Start+0x32>
 80034d8:	2300      	movs	r3, #0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d007      	beq.n	80034ee <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f003 0307 	and.w	r3, r3, #7
 80034f8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2b06      	cmp	r3, #6
 80034fe:	d007      	beq.n	8003510 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f042 0201 	orr.w	r2, r2, #1
 800350e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3710      	adds	r7, #16
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	40010000 	.word	0x40010000
 8003520:	40010400 	.word	0x40010400

08003524 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d101      	bne.n	8003536 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e01d      	b.n	8003572 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d106      	bne.n	8003550 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 f815 	bl	800357a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2202      	movs	r2, #2
 8003554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	3304      	adds	r3, #4
 8003560:	4619      	mov	r1, r3
 8003562:	4610      	mov	r0, r2
 8003564:	f000 fbbc 	bl	8003ce0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3708      	adds	r7, #8
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800357a:	b480      	push	{r7}
 800357c:	b083      	sub	sp, #12
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003582:	bf00      	nop
 8003584:	370c      	adds	r7, #12
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
	...

08003590 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	2b0c      	cmp	r3, #12
 800359e:	d841      	bhi.n	8003624 <HAL_TIM_IC_Start_IT+0x94>
 80035a0:	a201      	add	r2, pc, #4	; (adr r2, 80035a8 <HAL_TIM_IC_Start_IT+0x18>)
 80035a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035a6:	bf00      	nop
 80035a8:	080035dd 	.word	0x080035dd
 80035ac:	08003625 	.word	0x08003625
 80035b0:	08003625 	.word	0x08003625
 80035b4:	08003625 	.word	0x08003625
 80035b8:	080035ef 	.word	0x080035ef
 80035bc:	08003625 	.word	0x08003625
 80035c0:	08003625 	.word	0x08003625
 80035c4:	08003625 	.word	0x08003625
 80035c8:	08003601 	.word	0x08003601
 80035cc:	08003625 	.word	0x08003625
 80035d0:	08003625 	.word	0x08003625
 80035d4:	08003625 	.word	0x08003625
 80035d8:	08003613 	.word	0x08003613
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68da      	ldr	r2, [r3, #12]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f042 0202 	orr.w	r2, r2, #2
 80035ea:	60da      	str	r2, [r3, #12]
      break;
 80035ec:	e01b      	b.n	8003626 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68da      	ldr	r2, [r3, #12]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f042 0204 	orr.w	r2, r2, #4
 80035fc:	60da      	str	r2, [r3, #12]
      break;
 80035fe:	e012      	b.n	8003626 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68da      	ldr	r2, [r3, #12]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f042 0208 	orr.w	r2, r2, #8
 800360e:	60da      	str	r2, [r3, #12]
      break;
 8003610:	e009      	b.n	8003626 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	68da      	ldr	r2, [r3, #12]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f042 0210 	orr.w	r2, r2, #16
 8003620:	60da      	str	r2, [r3, #12]
      break;
 8003622:	e000      	b.n	8003626 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8003624:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2201      	movs	r2, #1
 800362c:	6839      	ldr	r1, [r7, #0]
 800362e:	4618      	mov	r0, r3
 8003630:	f000 ff6a 	bl	8004508 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f003 0307 	and.w	r3, r3, #7
 800363e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2b06      	cmp	r3, #6
 8003644:	d007      	beq.n	8003656 <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f042 0201 	orr.w	r2, r2, #1
 8003654:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003656:	2300      	movs	r3, #0
}
 8003658:	4618      	mov	r0, r3
 800365a:	3710      	adds	r7, #16
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	f003 0302 	and.w	r3, r3, #2
 8003672:	2b02      	cmp	r3, #2
 8003674:	d122      	bne.n	80036bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	f003 0302 	and.w	r3, r3, #2
 8003680:	2b02      	cmp	r3, #2
 8003682:	d11b      	bne.n	80036bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f06f 0202 	mvn.w	r2, #2
 800368c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2201      	movs	r2, #1
 8003692:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	699b      	ldr	r3, [r3, #24]
 800369a:	f003 0303 	and.w	r3, r3, #3
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d003      	beq.n	80036aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f7fd f9f6 	bl	8000a94 <HAL_TIM_IC_CaptureCallback>
 80036a8:	e005      	b.n	80036b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f000 faf9 	bl	8003ca2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f000 fb00 	bl	8003cb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	f003 0304 	and.w	r3, r3, #4
 80036c6:	2b04      	cmp	r3, #4
 80036c8:	d122      	bne.n	8003710 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	f003 0304 	and.w	r3, r3, #4
 80036d4:	2b04      	cmp	r3, #4
 80036d6:	d11b      	bne.n	8003710 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f06f 0204 	mvn.w	r2, #4
 80036e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2202      	movs	r2, #2
 80036e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	699b      	ldr	r3, [r3, #24]
 80036ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d003      	beq.n	80036fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f7fd f9cc 	bl	8000a94 <HAL_TIM_IC_CaptureCallback>
 80036fc:	e005      	b.n	800370a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f000 facf 	bl	8003ca2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f000 fad6 	bl	8003cb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	f003 0308 	and.w	r3, r3, #8
 800371a:	2b08      	cmp	r3, #8
 800371c:	d122      	bne.n	8003764 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	f003 0308 	and.w	r3, r3, #8
 8003728:	2b08      	cmp	r3, #8
 800372a:	d11b      	bne.n	8003764 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f06f 0208 	mvn.w	r2, #8
 8003734:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2204      	movs	r2, #4
 800373a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	69db      	ldr	r3, [r3, #28]
 8003742:	f003 0303 	and.w	r3, r3, #3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d003      	beq.n	8003752 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f7fd f9a2 	bl	8000a94 <HAL_TIM_IC_CaptureCallback>
 8003750:	e005      	b.n	800375e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 faa5 	bl	8003ca2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f000 faac 	bl	8003cb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	691b      	ldr	r3, [r3, #16]
 800376a:	f003 0310 	and.w	r3, r3, #16
 800376e:	2b10      	cmp	r3, #16
 8003770:	d122      	bne.n	80037b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	f003 0310 	and.w	r3, r3, #16
 800377c:	2b10      	cmp	r3, #16
 800377e:	d11b      	bne.n	80037b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f06f 0210 	mvn.w	r2, #16
 8003788:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2208      	movs	r2, #8
 800378e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	69db      	ldr	r3, [r3, #28]
 8003796:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800379a:	2b00      	cmp	r3, #0
 800379c:	d003      	beq.n	80037a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f7fd f978 	bl	8000a94 <HAL_TIM_IC_CaptureCallback>
 80037a4:	e005      	b.n	80037b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 fa7b 	bl	8003ca2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f000 fa82 	bl	8003cb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	f003 0301 	and.w	r3, r3, #1
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d10e      	bne.n	80037e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	f003 0301 	and.w	r3, r3, #1
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d107      	bne.n	80037e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f06f 0201 	mvn.w	r2, #1
 80037dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f7fd f93e 	bl	8000a60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	691b      	ldr	r3, [r3, #16]
 80037ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ee:	2b80      	cmp	r3, #128	; 0x80
 80037f0:	d10e      	bne.n	8003810 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037fc:	2b80      	cmp	r3, #128	; 0x80
 80037fe:	d107      	bne.n	8003810 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003808:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 ff28 	bl	8004660 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800381a:	2b40      	cmp	r3, #64	; 0x40
 800381c:	d10e      	bne.n	800383c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003828:	2b40      	cmp	r3, #64	; 0x40
 800382a:	d107      	bne.n	800383c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003834:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 fa47 	bl	8003cca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	f003 0320 	and.w	r3, r3, #32
 8003846:	2b20      	cmp	r3, #32
 8003848:	d10e      	bne.n	8003868 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	f003 0320 	and.w	r3, r3, #32
 8003854:	2b20      	cmp	r3, #32
 8003856:	d107      	bne.n	8003868 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f06f 0220 	mvn.w	r2, #32
 8003860:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 fef2 	bl	800464c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003868:	bf00      	nop
 800386a:	3708      	adds	r7, #8
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003882:	2b01      	cmp	r3, #1
 8003884:	d101      	bne.n	800388a <HAL_TIM_IC_ConfigChannel+0x1a>
 8003886:	2302      	movs	r3, #2
 8003888:	e08a      	b.n	80039a0 <HAL_TIM_IC_ConfigChannel+0x130>
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2201      	movs	r2, #1
 800388e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2202      	movs	r2, #2
 8003896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d11b      	bne.n	80038d8 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6818      	ldr	r0, [r3, #0]
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	6819      	ldr	r1, [r3, #0]
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	685a      	ldr	r2, [r3, #4]
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	f000 fc66 	bl	8004180 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	699a      	ldr	r2, [r3, #24]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f022 020c 	bic.w	r2, r2, #12
 80038c2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	6999      	ldr	r1, [r3, #24]
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	689a      	ldr	r2, [r3, #8]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	430a      	orrs	r2, r1
 80038d4:	619a      	str	r2, [r3, #24]
 80038d6:	e05a      	b.n	800398e <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2b04      	cmp	r3, #4
 80038dc:	d11c      	bne.n	8003918 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6818      	ldr	r0, [r3, #0]
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	6819      	ldr	r1, [r3, #0]
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	685a      	ldr	r2, [r3, #4]
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	f000 fcea 	bl	80042c6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	699a      	ldr	r2, [r3, #24]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003900:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	6999      	ldr	r1, [r3, #24]
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	021a      	lsls	r2, r3, #8
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	430a      	orrs	r2, r1
 8003914:	619a      	str	r2, [r3, #24]
 8003916:	e03a      	b.n	800398e <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2b08      	cmp	r3, #8
 800391c:	d11b      	bne.n	8003956 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6818      	ldr	r0, [r3, #0]
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	6819      	ldr	r1, [r3, #0]
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	685a      	ldr	r2, [r3, #4]
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	f000 fd37 	bl	80043a0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	69da      	ldr	r2, [r3, #28]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f022 020c 	bic.w	r2, r2, #12
 8003940:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	69d9      	ldr	r1, [r3, #28]
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	689a      	ldr	r2, [r3, #8]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	430a      	orrs	r2, r1
 8003952:	61da      	str	r2, [r3, #28]
 8003954:	e01b      	b.n	800398e <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6818      	ldr	r0, [r3, #0]
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	6819      	ldr	r1, [r3, #0]
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	685a      	ldr	r2, [r3, #4]
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	f000 fd57 	bl	8004418 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	69da      	ldr	r2, [r3, #28]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003978:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	69d9      	ldr	r1, [r3, #28]
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	021a      	lsls	r2, r3, #8
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	430a      	orrs	r2, r1
 800398c:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2201      	movs	r2, #1
 8003992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800399e:	2300      	movs	r3, #0
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3710      	adds	r7, #16
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d101      	bne.n	80039c2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80039be:	2302      	movs	r3, #2
 80039c0:	e0b4      	b.n	8003b2c <HAL_TIM_PWM_ConfigChannel+0x184>
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2201      	movs	r2, #1
 80039c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2202      	movs	r2, #2
 80039ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2b0c      	cmp	r3, #12
 80039d6:	f200 809f 	bhi.w	8003b18 <HAL_TIM_PWM_ConfigChannel+0x170>
 80039da:	a201      	add	r2, pc, #4	; (adr r2, 80039e0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80039dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e0:	08003a15 	.word	0x08003a15
 80039e4:	08003b19 	.word	0x08003b19
 80039e8:	08003b19 	.word	0x08003b19
 80039ec:	08003b19 	.word	0x08003b19
 80039f0:	08003a55 	.word	0x08003a55
 80039f4:	08003b19 	.word	0x08003b19
 80039f8:	08003b19 	.word	0x08003b19
 80039fc:	08003b19 	.word	0x08003b19
 8003a00:	08003a97 	.word	0x08003a97
 8003a04:	08003b19 	.word	0x08003b19
 8003a08:	08003b19 	.word	0x08003b19
 8003a0c:	08003b19 	.word	0x08003b19
 8003a10:	08003ad7 	.word	0x08003ad7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	68b9      	ldr	r1, [r7, #8]
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f000 fa00 	bl	8003e20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	699a      	ldr	r2, [r3, #24]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f042 0208 	orr.w	r2, r2, #8
 8003a2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	699a      	ldr	r2, [r3, #24]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f022 0204 	bic.w	r2, r2, #4
 8003a3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	6999      	ldr	r1, [r3, #24]
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	691a      	ldr	r2, [r3, #16]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	430a      	orrs	r2, r1
 8003a50:	619a      	str	r2, [r3, #24]
      break;
 8003a52:	e062      	b.n	8003b1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68b9      	ldr	r1, [r7, #8]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f000 fa50 	bl	8003f00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	699a      	ldr	r2, [r3, #24]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	699a      	ldr	r2, [r3, #24]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	6999      	ldr	r1, [r3, #24]
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	021a      	lsls	r2, r3, #8
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	430a      	orrs	r2, r1
 8003a92:	619a      	str	r2, [r3, #24]
      break;
 8003a94:	e041      	b.n	8003b1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68b9      	ldr	r1, [r7, #8]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f000 faa5 	bl	8003fec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	69da      	ldr	r2, [r3, #28]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f042 0208 	orr.w	r2, r2, #8
 8003ab0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	69da      	ldr	r2, [r3, #28]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f022 0204 	bic.w	r2, r2, #4
 8003ac0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	69d9      	ldr	r1, [r3, #28]
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	691a      	ldr	r2, [r3, #16]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	61da      	str	r2, [r3, #28]
      break;
 8003ad4:	e021      	b.n	8003b1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	68b9      	ldr	r1, [r7, #8]
 8003adc:	4618      	mov	r0, r3
 8003ade:	f000 faf9 	bl	80040d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	69da      	ldr	r2, [r3, #28]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003af0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	69da      	ldr	r2, [r3, #28]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	69d9      	ldr	r1, [r3, #28]
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	691b      	ldr	r3, [r3, #16]
 8003b0c:	021a      	lsls	r2, r3, #8
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	430a      	orrs	r2, r1
 8003b14:	61da      	str	r2, [r3, #28]
      break;
 8003b16:	e000      	b.n	8003b1a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003b18:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3710      	adds	r7, #16
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d101      	bne.n	8003b4c <HAL_TIM_ConfigClockSource+0x18>
 8003b48:	2302      	movs	r3, #2
 8003b4a:	e0a6      	b.n	8003c9a <HAL_TIM_ConfigClockSource+0x166>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2202      	movs	r2, #2
 8003b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b6a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b72:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	68fa      	ldr	r2, [r7, #12]
 8003b7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2b40      	cmp	r3, #64	; 0x40
 8003b82:	d067      	beq.n	8003c54 <HAL_TIM_ConfigClockSource+0x120>
 8003b84:	2b40      	cmp	r3, #64	; 0x40
 8003b86:	d80b      	bhi.n	8003ba0 <HAL_TIM_ConfigClockSource+0x6c>
 8003b88:	2b10      	cmp	r3, #16
 8003b8a:	d073      	beq.n	8003c74 <HAL_TIM_ConfigClockSource+0x140>
 8003b8c:	2b10      	cmp	r3, #16
 8003b8e:	d802      	bhi.n	8003b96 <HAL_TIM_ConfigClockSource+0x62>
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d06f      	beq.n	8003c74 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003b94:	e078      	b.n	8003c88 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003b96:	2b20      	cmp	r3, #32
 8003b98:	d06c      	beq.n	8003c74 <HAL_TIM_ConfigClockSource+0x140>
 8003b9a:	2b30      	cmp	r3, #48	; 0x30
 8003b9c:	d06a      	beq.n	8003c74 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003b9e:	e073      	b.n	8003c88 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003ba0:	2b70      	cmp	r3, #112	; 0x70
 8003ba2:	d00d      	beq.n	8003bc0 <HAL_TIM_ConfigClockSource+0x8c>
 8003ba4:	2b70      	cmp	r3, #112	; 0x70
 8003ba6:	d804      	bhi.n	8003bb2 <HAL_TIM_ConfigClockSource+0x7e>
 8003ba8:	2b50      	cmp	r3, #80	; 0x50
 8003baa:	d033      	beq.n	8003c14 <HAL_TIM_ConfigClockSource+0xe0>
 8003bac:	2b60      	cmp	r3, #96	; 0x60
 8003bae:	d041      	beq.n	8003c34 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003bb0:	e06a      	b.n	8003c88 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003bb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bb6:	d066      	beq.n	8003c86 <HAL_TIM_ConfigClockSource+0x152>
 8003bb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bbc:	d017      	beq.n	8003bee <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003bbe:	e063      	b.n	8003c88 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6818      	ldr	r0, [r3, #0]
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	6899      	ldr	r1, [r3, #8]
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	685a      	ldr	r2, [r3, #4]
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	f000 fc7a 	bl	80044c8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003be2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	68fa      	ldr	r2, [r7, #12]
 8003bea:	609a      	str	r2, [r3, #8]
      break;
 8003bec:	e04c      	b.n	8003c88 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6818      	ldr	r0, [r3, #0]
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	6899      	ldr	r1, [r3, #8]
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	685a      	ldr	r2, [r3, #4]
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	f000 fc63 	bl	80044c8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	689a      	ldr	r2, [r3, #8]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c10:	609a      	str	r2, [r3, #8]
      break;
 8003c12:	e039      	b.n	8003c88 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6818      	ldr	r0, [r3, #0]
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	6859      	ldr	r1, [r3, #4]
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	461a      	mov	r2, r3
 8003c22:	f000 fb21 	bl	8004268 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2150      	movs	r1, #80	; 0x50
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f000 fc30 	bl	8004492 <TIM_ITRx_SetConfig>
      break;
 8003c32:	e029      	b.n	8003c88 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6818      	ldr	r0, [r3, #0]
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	6859      	ldr	r1, [r3, #4]
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	461a      	mov	r2, r3
 8003c42:	f000 fb7d 	bl	8004340 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	2160      	movs	r1, #96	; 0x60
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f000 fc20 	bl	8004492 <TIM_ITRx_SetConfig>
      break;
 8003c52:	e019      	b.n	8003c88 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6818      	ldr	r0, [r3, #0]
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	6859      	ldr	r1, [r3, #4]
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	461a      	mov	r2, r3
 8003c62:	f000 fb01 	bl	8004268 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2140      	movs	r1, #64	; 0x40
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f000 fc10 	bl	8004492 <TIM_ITRx_SetConfig>
      break;
 8003c72:	e009      	b.n	8003c88 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	4610      	mov	r0, r2
 8003c80:	f000 fc07 	bl	8004492 <TIM_ITRx_SetConfig>
      break;
 8003c84:	e000      	b.n	8003c88 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003c86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3710      	adds	r7, #16
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}

08003ca2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ca2:	b480      	push	{r7}
 8003ca4:	b083      	sub	sp, #12
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003caa:	bf00      	nop
 8003cac:	370c      	adds	r7, #12
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr

08003cb6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003cb6:	b480      	push	{r7}
 8003cb8:	b083      	sub	sp, #12
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003cbe:	bf00      	nop
 8003cc0:	370c      	adds	r7, #12
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr

08003cca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003cca:	b480      	push	{r7}
 8003ccc:	b083      	sub	sp, #12
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003cd2:	bf00      	nop
 8003cd4:	370c      	adds	r7, #12
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr
	...

08003ce0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b085      	sub	sp, #20
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4a40      	ldr	r2, [pc, #256]	; (8003df4 <TIM_Base_SetConfig+0x114>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d013      	beq.n	8003d20 <TIM_Base_SetConfig+0x40>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cfe:	d00f      	beq.n	8003d20 <TIM_Base_SetConfig+0x40>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	4a3d      	ldr	r2, [pc, #244]	; (8003df8 <TIM_Base_SetConfig+0x118>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d00b      	beq.n	8003d20 <TIM_Base_SetConfig+0x40>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	4a3c      	ldr	r2, [pc, #240]	; (8003dfc <TIM_Base_SetConfig+0x11c>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d007      	beq.n	8003d20 <TIM_Base_SetConfig+0x40>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4a3b      	ldr	r2, [pc, #236]	; (8003e00 <TIM_Base_SetConfig+0x120>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d003      	beq.n	8003d20 <TIM_Base_SetConfig+0x40>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4a3a      	ldr	r2, [pc, #232]	; (8003e04 <TIM_Base_SetConfig+0x124>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d108      	bne.n	8003d32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	68fa      	ldr	r2, [r7, #12]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a2f      	ldr	r2, [pc, #188]	; (8003df4 <TIM_Base_SetConfig+0x114>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d02b      	beq.n	8003d92 <TIM_Base_SetConfig+0xb2>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d40:	d027      	beq.n	8003d92 <TIM_Base_SetConfig+0xb2>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a2c      	ldr	r2, [pc, #176]	; (8003df8 <TIM_Base_SetConfig+0x118>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d023      	beq.n	8003d92 <TIM_Base_SetConfig+0xb2>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a2b      	ldr	r2, [pc, #172]	; (8003dfc <TIM_Base_SetConfig+0x11c>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d01f      	beq.n	8003d92 <TIM_Base_SetConfig+0xb2>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a2a      	ldr	r2, [pc, #168]	; (8003e00 <TIM_Base_SetConfig+0x120>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d01b      	beq.n	8003d92 <TIM_Base_SetConfig+0xb2>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a29      	ldr	r2, [pc, #164]	; (8003e04 <TIM_Base_SetConfig+0x124>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d017      	beq.n	8003d92 <TIM_Base_SetConfig+0xb2>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a28      	ldr	r2, [pc, #160]	; (8003e08 <TIM_Base_SetConfig+0x128>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d013      	beq.n	8003d92 <TIM_Base_SetConfig+0xb2>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a27      	ldr	r2, [pc, #156]	; (8003e0c <TIM_Base_SetConfig+0x12c>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d00f      	beq.n	8003d92 <TIM_Base_SetConfig+0xb2>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a26      	ldr	r2, [pc, #152]	; (8003e10 <TIM_Base_SetConfig+0x130>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d00b      	beq.n	8003d92 <TIM_Base_SetConfig+0xb2>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a25      	ldr	r2, [pc, #148]	; (8003e14 <TIM_Base_SetConfig+0x134>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d007      	beq.n	8003d92 <TIM_Base_SetConfig+0xb2>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a24      	ldr	r2, [pc, #144]	; (8003e18 <TIM_Base_SetConfig+0x138>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d003      	beq.n	8003d92 <TIM_Base_SetConfig+0xb2>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a23      	ldr	r2, [pc, #140]	; (8003e1c <TIM_Base_SetConfig+0x13c>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d108      	bne.n	8003da4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	695b      	ldr	r3, [r3, #20]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	68fa      	ldr	r2, [r7, #12]
 8003db6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	689a      	ldr	r2, [r3, #8]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4a0a      	ldr	r2, [pc, #40]	; (8003df4 <TIM_Base_SetConfig+0x114>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d003      	beq.n	8003dd8 <TIM_Base_SetConfig+0xf8>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	4a0c      	ldr	r2, [pc, #48]	; (8003e04 <TIM_Base_SetConfig+0x124>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d103      	bne.n	8003de0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	691a      	ldr	r2, [r3, #16]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	615a      	str	r2, [r3, #20]
}
 8003de6:	bf00      	nop
 8003de8:	3714      	adds	r7, #20
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop
 8003df4:	40010000 	.word	0x40010000
 8003df8:	40000400 	.word	0x40000400
 8003dfc:	40000800 	.word	0x40000800
 8003e00:	40000c00 	.word	0x40000c00
 8003e04:	40010400 	.word	0x40010400
 8003e08:	40014000 	.word	0x40014000
 8003e0c:	40014400 	.word	0x40014400
 8003e10:	40014800 	.word	0x40014800
 8003e14:	40001800 	.word	0x40001800
 8003e18:	40001c00 	.word	0x40001c00
 8003e1c:	40002000 	.word	0x40002000

08003e20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b087      	sub	sp, #28
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a1b      	ldr	r3, [r3, #32]
 8003e2e:	f023 0201 	bic.w	r2, r3, #1
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a1b      	ldr	r3, [r3, #32]
 8003e3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	699b      	ldr	r3, [r3, #24]
 8003e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f023 0303 	bic.w	r3, r3, #3
 8003e56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	68fa      	ldr	r2, [r7, #12]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	f023 0302 	bic.w	r3, r3, #2
 8003e68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	697a      	ldr	r2, [r7, #20]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a20      	ldr	r2, [pc, #128]	; (8003ef8 <TIM_OC1_SetConfig+0xd8>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d003      	beq.n	8003e84 <TIM_OC1_SetConfig+0x64>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a1f      	ldr	r2, [pc, #124]	; (8003efc <TIM_OC1_SetConfig+0xdc>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d10c      	bne.n	8003e9e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	f023 0308 	bic.w	r3, r3, #8
 8003e8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	697a      	ldr	r2, [r7, #20]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	f023 0304 	bic.w	r3, r3, #4
 8003e9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a15      	ldr	r2, [pc, #84]	; (8003ef8 <TIM_OC1_SetConfig+0xd8>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d003      	beq.n	8003eae <TIM_OC1_SetConfig+0x8e>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a14      	ldr	r2, [pc, #80]	; (8003efc <TIM_OC1_SetConfig+0xdc>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d111      	bne.n	8003ed2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003eb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ebc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	695b      	ldr	r3, [r3, #20]
 8003ec2:	693a      	ldr	r2, [r7, #16]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	699b      	ldr	r3, [r3, #24]
 8003ecc:	693a      	ldr	r2, [r7, #16]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	693a      	ldr	r2, [r7, #16]
 8003ed6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	685a      	ldr	r2, [r3, #4]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	697a      	ldr	r2, [r7, #20]
 8003eea:	621a      	str	r2, [r3, #32]
}
 8003eec:	bf00      	nop
 8003eee:	371c      	adds	r7, #28
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr
 8003ef8:	40010000 	.word	0x40010000
 8003efc:	40010400 	.word	0x40010400

08003f00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b087      	sub	sp, #28
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a1b      	ldr	r3, [r3, #32]
 8003f0e:	f023 0210 	bic.w	r2, r3, #16
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a1b      	ldr	r3, [r3, #32]
 8003f1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	699b      	ldr	r3, [r3, #24]
 8003f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	021b      	lsls	r3, r3, #8
 8003f3e:	68fa      	ldr	r2, [r7, #12]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	f023 0320 	bic.w	r3, r3, #32
 8003f4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	011b      	lsls	r3, r3, #4
 8003f52:	697a      	ldr	r2, [r7, #20]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	4a22      	ldr	r2, [pc, #136]	; (8003fe4 <TIM_OC2_SetConfig+0xe4>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d003      	beq.n	8003f68 <TIM_OC2_SetConfig+0x68>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	4a21      	ldr	r2, [pc, #132]	; (8003fe8 <TIM_OC2_SetConfig+0xe8>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d10d      	bne.n	8003f84 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	011b      	lsls	r3, r3, #4
 8003f76:	697a      	ldr	r2, [r7, #20]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f82:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4a17      	ldr	r2, [pc, #92]	; (8003fe4 <TIM_OC2_SetConfig+0xe4>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d003      	beq.n	8003f94 <TIM_OC2_SetConfig+0x94>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	4a16      	ldr	r2, [pc, #88]	; (8003fe8 <TIM_OC2_SetConfig+0xe8>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d113      	bne.n	8003fbc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003fa2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	695b      	ldr	r3, [r3, #20]
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	693a      	ldr	r2, [r7, #16]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	693a      	ldr	r2, [r7, #16]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	693a      	ldr	r2, [r7, #16]
 8003fc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	68fa      	ldr	r2, [r7, #12]
 8003fc6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	685a      	ldr	r2, [r3, #4]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	697a      	ldr	r2, [r7, #20]
 8003fd4:	621a      	str	r2, [r3, #32]
}
 8003fd6:	bf00      	nop
 8003fd8:	371c      	adds	r7, #28
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr
 8003fe2:	bf00      	nop
 8003fe4:	40010000 	.word	0x40010000
 8003fe8:	40010400 	.word	0x40010400

08003fec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b087      	sub	sp, #28
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a1b      	ldr	r3, [r3, #32]
 8003ffa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a1b      	ldr	r3, [r3, #32]
 8004006:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	69db      	ldr	r3, [r3, #28]
 8004012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800401a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f023 0303 	bic.w	r3, r3, #3
 8004022:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68fa      	ldr	r2, [r7, #12]
 800402a:	4313      	orrs	r3, r2
 800402c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004034:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	021b      	lsls	r3, r3, #8
 800403c:	697a      	ldr	r2, [r7, #20]
 800403e:	4313      	orrs	r3, r2
 8004040:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a21      	ldr	r2, [pc, #132]	; (80040cc <TIM_OC3_SetConfig+0xe0>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d003      	beq.n	8004052 <TIM_OC3_SetConfig+0x66>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a20      	ldr	r2, [pc, #128]	; (80040d0 <TIM_OC3_SetConfig+0xe4>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d10d      	bne.n	800406e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004058:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	021b      	lsls	r3, r3, #8
 8004060:	697a      	ldr	r2, [r7, #20]
 8004062:	4313      	orrs	r3, r2
 8004064:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800406c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a16      	ldr	r2, [pc, #88]	; (80040cc <TIM_OC3_SetConfig+0xe0>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d003      	beq.n	800407e <TIM_OC3_SetConfig+0x92>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a15      	ldr	r2, [pc, #84]	; (80040d0 <TIM_OC3_SetConfig+0xe4>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d113      	bne.n	80040a6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004084:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800408c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	695b      	ldr	r3, [r3, #20]
 8004092:	011b      	lsls	r3, r3, #4
 8004094:	693a      	ldr	r2, [r7, #16]
 8004096:	4313      	orrs	r3, r2
 8004098:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	699b      	ldr	r3, [r3, #24]
 800409e:	011b      	lsls	r3, r3, #4
 80040a0:	693a      	ldr	r2, [r7, #16]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	693a      	ldr	r2, [r7, #16]
 80040aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	68fa      	ldr	r2, [r7, #12]
 80040b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	685a      	ldr	r2, [r3, #4]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	697a      	ldr	r2, [r7, #20]
 80040be:	621a      	str	r2, [r3, #32]
}
 80040c0:	bf00      	nop
 80040c2:	371c      	adds	r7, #28
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr
 80040cc:	40010000 	.word	0x40010000
 80040d0:	40010400 	.word	0x40010400

080040d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b087      	sub	sp, #28
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a1b      	ldr	r3, [r3, #32]
 80040e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a1b      	ldr	r3, [r3, #32]
 80040ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	69db      	ldr	r3, [r3, #28]
 80040fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004102:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800410a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	021b      	lsls	r3, r3, #8
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	4313      	orrs	r3, r2
 8004116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800411e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	031b      	lsls	r3, r3, #12
 8004126:	693a      	ldr	r2, [r7, #16]
 8004128:	4313      	orrs	r3, r2
 800412a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	4a12      	ldr	r2, [pc, #72]	; (8004178 <TIM_OC4_SetConfig+0xa4>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d003      	beq.n	800413c <TIM_OC4_SetConfig+0x68>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4a11      	ldr	r2, [pc, #68]	; (800417c <TIM_OC4_SetConfig+0xa8>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d109      	bne.n	8004150 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004142:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	695b      	ldr	r3, [r3, #20]
 8004148:	019b      	lsls	r3, r3, #6
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	4313      	orrs	r3, r2
 800414e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	697a      	ldr	r2, [r7, #20]
 8004154:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	68fa      	ldr	r2, [r7, #12]
 800415a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	685a      	ldr	r2, [r3, #4]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	693a      	ldr	r2, [r7, #16]
 8004168:	621a      	str	r2, [r3, #32]
}
 800416a:	bf00      	nop
 800416c:	371c      	adds	r7, #28
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	40010000 	.word	0x40010000
 800417c:	40010400 	.word	0x40010400

08004180 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004180:	b480      	push	{r7}
 8004182:	b087      	sub	sp, #28
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	607a      	str	r2, [r7, #4]
 800418c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	6a1b      	ldr	r3, [r3, #32]
 8004192:	f023 0201 	bic.w	r2, r3, #1
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6a1b      	ldr	r3, [r3, #32]
 80041a4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	4a28      	ldr	r2, [pc, #160]	; (800424c <TIM_TI1_SetConfig+0xcc>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d01b      	beq.n	80041e6 <TIM_TI1_SetConfig+0x66>
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041b4:	d017      	beq.n	80041e6 <TIM_TI1_SetConfig+0x66>
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	4a25      	ldr	r2, [pc, #148]	; (8004250 <TIM_TI1_SetConfig+0xd0>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d013      	beq.n	80041e6 <TIM_TI1_SetConfig+0x66>
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	4a24      	ldr	r2, [pc, #144]	; (8004254 <TIM_TI1_SetConfig+0xd4>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d00f      	beq.n	80041e6 <TIM_TI1_SetConfig+0x66>
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	4a23      	ldr	r2, [pc, #140]	; (8004258 <TIM_TI1_SetConfig+0xd8>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d00b      	beq.n	80041e6 <TIM_TI1_SetConfig+0x66>
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	4a22      	ldr	r2, [pc, #136]	; (800425c <TIM_TI1_SetConfig+0xdc>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d007      	beq.n	80041e6 <TIM_TI1_SetConfig+0x66>
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	4a21      	ldr	r2, [pc, #132]	; (8004260 <TIM_TI1_SetConfig+0xe0>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d003      	beq.n	80041e6 <TIM_TI1_SetConfig+0x66>
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	4a20      	ldr	r2, [pc, #128]	; (8004264 <TIM_TI1_SetConfig+0xe4>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d101      	bne.n	80041ea <TIM_TI1_SetConfig+0x6a>
 80041e6:	2301      	movs	r3, #1
 80041e8:	e000      	b.n	80041ec <TIM_TI1_SetConfig+0x6c>
 80041ea:	2300      	movs	r3, #0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d008      	beq.n	8004202 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	f023 0303 	bic.w	r3, r3, #3
 80041f6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80041f8:	697a      	ldr	r2, [r7, #20]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	617b      	str	r3, [r7, #20]
 8004200:	e003      	b.n	800420a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	f043 0301 	orr.w	r3, r3, #1
 8004208:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004210:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	011b      	lsls	r3, r3, #4
 8004216:	b2db      	uxtb	r3, r3
 8004218:	697a      	ldr	r2, [r7, #20]
 800421a:	4313      	orrs	r3, r2
 800421c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	f023 030a 	bic.w	r3, r3, #10
 8004224:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	f003 030a 	and.w	r3, r3, #10
 800422c:	693a      	ldr	r2, [r7, #16]
 800422e:	4313      	orrs	r3, r2
 8004230:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	697a      	ldr	r2, [r7, #20]
 8004236:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	693a      	ldr	r2, [r7, #16]
 800423c:	621a      	str	r2, [r3, #32]
}
 800423e:	bf00      	nop
 8004240:	371c      	adds	r7, #28
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop
 800424c:	40010000 	.word	0x40010000
 8004250:	40000400 	.word	0x40000400
 8004254:	40000800 	.word	0x40000800
 8004258:	40000c00 	.word	0x40000c00
 800425c:	40010400 	.word	0x40010400
 8004260:	40014000 	.word	0x40014000
 8004264:	40001800 	.word	0x40001800

08004268 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004268:	b480      	push	{r7}
 800426a:	b087      	sub	sp, #28
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6a1b      	ldr	r3, [r3, #32]
 8004278:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6a1b      	ldr	r3, [r3, #32]
 800427e:	f023 0201 	bic.w	r2, r3, #1
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004292:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	011b      	lsls	r3, r3, #4
 8004298:	693a      	ldr	r2, [r7, #16]
 800429a:	4313      	orrs	r3, r2
 800429c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	f023 030a 	bic.w	r3, r3, #10
 80042a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80042a6:	697a      	ldr	r2, [r7, #20]
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	693a      	ldr	r2, [r7, #16]
 80042b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	697a      	ldr	r2, [r7, #20]
 80042b8:	621a      	str	r2, [r3, #32]
}
 80042ba:	bf00      	nop
 80042bc:	371c      	adds	r7, #28
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr

080042c6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80042c6:	b480      	push	{r7}
 80042c8:	b087      	sub	sp, #28
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	60f8      	str	r0, [r7, #12]
 80042ce:	60b9      	str	r1, [r7, #8]
 80042d0:	607a      	str	r2, [r7, #4]
 80042d2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6a1b      	ldr	r3, [r3, #32]
 80042d8:	f023 0210 	bic.w	r2, r3, #16
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6a1b      	ldr	r3, [r3, #32]
 80042ea:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042f2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	021b      	lsls	r3, r3, #8
 80042f8:	697a      	ldr	r2, [r7, #20]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004304:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	031b      	lsls	r3, r3, #12
 800430a:	b29b      	uxth	r3, r3
 800430c:	697a      	ldr	r2, [r7, #20]
 800430e:	4313      	orrs	r3, r2
 8004310:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004318:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	011b      	lsls	r3, r3, #4
 800431e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	4313      	orrs	r3, r2
 8004326:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	697a      	ldr	r2, [r7, #20]
 800432c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	693a      	ldr	r2, [r7, #16]
 8004332:	621a      	str	r2, [r3, #32]
}
 8004334:	bf00      	nop
 8004336:	371c      	adds	r7, #28
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004340:	b480      	push	{r7}
 8004342:	b087      	sub	sp, #28
 8004344:	af00      	add	r7, sp, #0
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6a1b      	ldr	r3, [r3, #32]
 8004350:	f023 0210 	bic.w	r2, r3, #16
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	699b      	ldr	r3, [r3, #24]
 800435c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6a1b      	ldr	r3, [r3, #32]
 8004362:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800436a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	031b      	lsls	r3, r3, #12
 8004370:	697a      	ldr	r2, [r7, #20]
 8004372:	4313      	orrs	r3, r2
 8004374:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800437c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	011b      	lsls	r3, r3, #4
 8004382:	693a      	ldr	r2, [r7, #16]
 8004384:	4313      	orrs	r3, r2
 8004386:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	697a      	ldr	r2, [r7, #20]
 800438c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	693a      	ldr	r2, [r7, #16]
 8004392:	621a      	str	r2, [r3, #32]
}
 8004394:	bf00      	nop
 8004396:	371c      	adds	r7, #28
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b087      	sub	sp, #28
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	607a      	str	r2, [r7, #4]
 80043ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6a1b      	ldr	r3, [r3, #32]
 80043b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	69db      	ldr	r3, [r3, #28]
 80043be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6a1b      	ldr	r3, [r3, #32]
 80043c4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	f023 0303 	bic.w	r3, r3, #3
 80043cc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80043ce:	697a      	ldr	r2, [r7, #20]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043dc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	011b      	lsls	r3, r3, #4
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	697a      	ldr	r2, [r7, #20]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80043f0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	021b      	lsls	r3, r3, #8
 80043f6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80043fa:	693a      	ldr	r2, [r7, #16]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	697a      	ldr	r2, [r7, #20]
 8004404:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	693a      	ldr	r2, [r7, #16]
 800440a:	621a      	str	r2, [r3, #32]
}
 800440c:	bf00      	nop
 800440e:	371c      	adds	r7, #28
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr

08004418 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004418:	b480      	push	{r7}
 800441a:	b087      	sub	sp, #28
 800441c:	af00      	add	r7, sp, #0
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	607a      	str	r2, [r7, #4]
 8004424:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6a1b      	ldr	r3, [r3, #32]
 800442a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	69db      	ldr	r3, [r3, #28]
 8004436:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6a1b      	ldr	r3, [r3, #32]
 800443c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004444:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	021b      	lsls	r3, r3, #8
 800444a:	697a      	ldr	r2, [r7, #20]
 800444c:	4313      	orrs	r3, r2
 800444e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004456:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	031b      	lsls	r3, r3, #12
 800445c:	b29b      	uxth	r3, r3
 800445e:	697a      	ldr	r2, [r7, #20]
 8004460:	4313      	orrs	r3, r2
 8004462:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800446a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	031b      	lsls	r3, r3, #12
 8004470:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004474:	693a      	ldr	r2, [r7, #16]
 8004476:	4313      	orrs	r3, r2
 8004478:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	697a      	ldr	r2, [r7, #20]
 800447e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	693a      	ldr	r2, [r7, #16]
 8004484:	621a      	str	r2, [r3, #32]
}
 8004486:	bf00      	nop
 8004488:	371c      	adds	r7, #28
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr

08004492 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004492:	b480      	push	{r7}
 8004494:	b085      	sub	sp, #20
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
 800449a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044aa:	683a      	ldr	r2, [r7, #0]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	f043 0307 	orr.w	r3, r3, #7
 80044b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	68fa      	ldr	r2, [r7, #12]
 80044ba:	609a      	str	r2, [r3, #8]
}
 80044bc:	bf00      	nop
 80044be:	3714      	adds	r7, #20
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b087      	sub	sp, #28
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	60b9      	str	r1, [r7, #8]
 80044d2:	607a      	str	r2, [r7, #4]
 80044d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	021a      	lsls	r2, r3, #8
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	431a      	orrs	r2, r3
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	697a      	ldr	r2, [r7, #20]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	697a      	ldr	r2, [r7, #20]
 80044fa:	609a      	str	r2, [r3, #8]
}
 80044fc:	bf00      	nop
 80044fe:	371c      	adds	r7, #28
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004508:	b480      	push	{r7}
 800450a:	b087      	sub	sp, #28
 800450c:	af00      	add	r7, sp, #0
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	f003 031f 	and.w	r3, r3, #31
 800451a:	2201      	movs	r2, #1
 800451c:	fa02 f303 	lsl.w	r3, r2, r3
 8004520:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6a1a      	ldr	r2, [r3, #32]
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	43db      	mvns	r3, r3
 800452a:	401a      	ands	r2, r3
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6a1a      	ldr	r2, [r3, #32]
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	f003 031f 	and.w	r3, r3, #31
 800453a:	6879      	ldr	r1, [r7, #4]
 800453c:	fa01 f303 	lsl.w	r3, r1, r3
 8004540:	431a      	orrs	r2, r3
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	621a      	str	r2, [r3, #32]
}
 8004546:	bf00      	nop
 8004548:	371c      	adds	r7, #28
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr
	...

08004554 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004554:	b480      	push	{r7}
 8004556:	b085      	sub	sp, #20
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004564:	2b01      	cmp	r3, #1
 8004566:	d101      	bne.n	800456c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004568:	2302      	movs	r3, #2
 800456a:	e05a      	b.n	8004622 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2202      	movs	r2, #2
 8004578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004592:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	68fa      	ldr	r2, [r7, #12]
 800459a:	4313      	orrs	r3, r2
 800459c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	68fa      	ldr	r2, [r7, #12]
 80045a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a21      	ldr	r2, [pc, #132]	; (8004630 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d022      	beq.n	80045f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045b8:	d01d      	beq.n	80045f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a1d      	ldr	r2, [pc, #116]	; (8004634 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d018      	beq.n	80045f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a1b      	ldr	r2, [pc, #108]	; (8004638 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d013      	beq.n	80045f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a1a      	ldr	r2, [pc, #104]	; (800463c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d00e      	beq.n	80045f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a18      	ldr	r2, [pc, #96]	; (8004640 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d009      	beq.n	80045f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a17      	ldr	r2, [pc, #92]	; (8004644 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d004      	beq.n	80045f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a15      	ldr	r2, [pc, #84]	; (8004648 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d10c      	bne.n	8004610 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	68ba      	ldr	r2, [r7, #8]
 8004604:	4313      	orrs	r3, r2
 8004606:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68ba      	ldr	r2, [r7, #8]
 800460e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004620:	2300      	movs	r3, #0
}
 8004622:	4618      	mov	r0, r3
 8004624:	3714      	adds	r7, #20
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr
 800462e:	bf00      	nop
 8004630:	40010000 	.word	0x40010000
 8004634:	40000400 	.word	0x40000400
 8004638:	40000800 	.word	0x40000800
 800463c:	40000c00 	.word	0x40000c00
 8004640:	40010400 	.word	0x40010400
 8004644:	40014000 	.word	0x40014000
 8004648:	40001800 	.word	0x40001800

0800464c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004654:	bf00      	nop
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004668:	bf00      	nop
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d101      	bne.n	8004686 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e03f      	b.n	8004706 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800468c:	b2db      	uxtb	r3, r3
 800468e:	2b00      	cmp	r3, #0
 8004690:	d106      	bne.n	80046a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f7fd fb8c 	bl	8001db8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2224      	movs	r2, #36	; 0x24
 80046a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68da      	ldr	r2, [r3, #12]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f000 fbe9 	bl	8004e90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	691a      	ldr	r2, [r3, #16]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	695a      	ldr	r2, [r3, #20]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	68da      	ldr	r2, [r3, #12]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2220      	movs	r2, #32
 80046f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2220      	movs	r2, #32
 8004700:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	3708      	adds	r7, #8
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}

0800470e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800470e:	b580      	push	{r7, lr}
 8004710:	b088      	sub	sp, #32
 8004712:	af02      	add	r7, sp, #8
 8004714:	60f8      	str	r0, [r7, #12]
 8004716:	60b9      	str	r1, [r7, #8]
 8004718:	603b      	str	r3, [r7, #0]
 800471a:	4613      	mov	r3, r2
 800471c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800471e:	2300      	movs	r3, #0
 8004720:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004728:	b2db      	uxtb	r3, r3
 800472a:	2b20      	cmp	r3, #32
 800472c:	f040 8090 	bne.w	8004850 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d002      	beq.n	800473c <HAL_UART_Receive+0x2e>
 8004736:	88fb      	ldrh	r3, [r7, #6]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d101      	bne.n	8004740 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e088      	b.n	8004852 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004746:	2b01      	cmp	r3, #1
 8004748:	d101      	bne.n	800474e <HAL_UART_Receive+0x40>
 800474a:	2302      	movs	r3, #2
 800474c:	e081      	b.n	8004852 <HAL_UART_Receive+0x144>
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2201      	movs	r2, #1
 8004752:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2200      	movs	r2, #0
 800475a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2222      	movs	r2, #34	; 0x22
 8004760:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004764:	f7fd fc08 	bl	8001f78 <HAL_GetTick>
 8004768:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	88fa      	ldrh	r2, [r7, #6]
 800476e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	88fa      	ldrh	r2, [r7, #6]
 8004774:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2200      	movs	r2, #0
 800477a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800477e:	e05c      	b.n	800483a <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004784:	b29b      	uxth	r3, r3
 8004786:	3b01      	subs	r3, #1
 8004788:	b29a      	uxth	r2, r3
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004796:	d12b      	bne.n	80047f0 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	9300      	str	r3, [sp, #0]
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	2200      	movs	r2, #0
 80047a0:	2120      	movs	r1, #32
 80047a2:	68f8      	ldr	r0, [r7, #12]
 80047a4:	f000 fa08 	bl	8004bb8 <UART_WaitOnFlagUntilTimeout>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d001      	beq.n	80047b2 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e04f      	b.n	8004852 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d10c      	bne.n	80047d8 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047ca:	b29a      	uxth	r2, r3
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	3302      	adds	r3, #2
 80047d4:	60bb      	str	r3, [r7, #8]
 80047d6:	e030      	b.n	800483a <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	b29b      	uxth	r3, r3
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	b29a      	uxth	r2, r3
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	3301      	adds	r3, #1
 80047ec:	60bb      	str	r3, [r7, #8]
 80047ee:	e024      	b.n	800483a <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	9300      	str	r3, [sp, #0]
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	2200      	movs	r2, #0
 80047f8:	2120      	movs	r1, #32
 80047fa:	68f8      	ldr	r0, [r7, #12]
 80047fc:	f000 f9dc 	bl	8004bb8 <UART_WaitOnFlagUntilTimeout>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d001      	beq.n	800480a <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e023      	b.n	8004852 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d108      	bne.n	8004824 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	6859      	ldr	r1, [r3, #4]
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	1c5a      	adds	r2, r3, #1
 800481c:	60ba      	str	r2, [r7, #8]
 800481e:	b2ca      	uxtb	r2, r1
 8004820:	701a      	strb	r2, [r3, #0]
 8004822:	e00a      	b.n	800483a <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	b2da      	uxtb	r2, r3
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	1c59      	adds	r1, r3, #1
 8004830:	60b9      	str	r1, [r7, #8]
 8004832:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004836:	b2d2      	uxtb	r2, r2
 8004838:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800483e:	b29b      	uxth	r3, r3
 8004840:	2b00      	cmp	r3, #0
 8004842:	d19d      	bne.n	8004780 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2220      	movs	r2, #32
 8004848:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 800484c:	2300      	movs	r3, #0
 800484e:	e000      	b.n	8004852 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8004850:	2302      	movs	r3, #2
  }
}
 8004852:	4618      	mov	r0, r3
 8004854:	3718      	adds	r7, #24
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}

0800485a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800485a:	b480      	push	{r7}
 800485c:	b085      	sub	sp, #20
 800485e:	af00      	add	r7, sp, #0
 8004860:	60f8      	str	r0, [r7, #12]
 8004862:	60b9      	str	r1, [r7, #8]
 8004864:	4613      	mov	r3, r2
 8004866:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800486e:	b2db      	uxtb	r3, r3
 8004870:	2b20      	cmp	r3, #32
 8004872:	d130      	bne.n	80048d6 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d002      	beq.n	8004880 <HAL_UART_Transmit_IT+0x26>
 800487a:	88fb      	ldrh	r3, [r7, #6]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d101      	bne.n	8004884 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e029      	b.n	80048d8 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800488a:	2b01      	cmp	r3, #1
 800488c:	d101      	bne.n	8004892 <HAL_UART_Transmit_IT+0x38>
 800488e:	2302      	movs	r3, #2
 8004890:	e022      	b.n	80048d8 <HAL_UART_Transmit_IT+0x7e>
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2201      	movs	r2, #1
 8004896:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	68ba      	ldr	r2, [r7, #8]
 800489e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	88fa      	ldrh	r2, [r7, #6]
 80048a4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	88fa      	ldrh	r2, [r7, #6]
 80048aa:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2200      	movs	r2, #0
 80048b0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2221      	movs	r2, #33	; 0x21
 80048b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68da      	ldr	r2, [r3, #12]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80048d0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80048d2:	2300      	movs	r3, #0
 80048d4:	e000      	b.n	80048d8 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80048d6:	2302      	movs	r3, #2
  }
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3714      	adds	r7, #20
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b085      	sub	sp, #20
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	4613      	mov	r3, r2
 80048f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	2b20      	cmp	r3, #32
 80048fc:	d140      	bne.n	8004980 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d002      	beq.n	800490a <HAL_UART_Receive_IT+0x26>
 8004904:	88fb      	ldrh	r3, [r7, #6]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d101      	bne.n	800490e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e039      	b.n	8004982 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004914:	2b01      	cmp	r3, #1
 8004916:	d101      	bne.n	800491c <HAL_UART_Receive_IT+0x38>
 8004918:	2302      	movs	r3, #2
 800491a:	e032      	b.n	8004982 <HAL_UART_Receive_IT+0x9e>
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	68ba      	ldr	r2, [r7, #8]
 8004928:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	88fa      	ldrh	r2, [r7, #6]
 800492e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	88fa      	ldrh	r2, [r7, #6]
 8004934:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2200      	movs	r2, #0
 800493a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2222      	movs	r2, #34	; 0x22
 8004940:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2200      	movs	r2, #0
 8004948:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	68da      	ldr	r2, [r3, #12]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800495a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	695a      	ldr	r2, [r3, #20]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f042 0201 	orr.w	r2, r2, #1
 800496a:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	68da      	ldr	r2, [r3, #12]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f042 0220 	orr.w	r2, r2, #32
 800497a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800497c:	2300      	movs	r3, #0
 800497e:	e000      	b.n	8004982 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004980:	2302      	movs	r3, #2
  }
}
 8004982:	4618      	mov	r0, r3
 8004984:	3714      	adds	r7, #20
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
	...

08004990 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b088      	sub	sp, #32
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	695b      	ldr	r3, [r3, #20]
 80049ae:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80049b0:	2300      	movs	r3, #0
 80049b2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80049b4:	2300      	movs	r3, #0
 80049b6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	f003 030f 	and.w	r3, r3, #15
 80049be:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d10d      	bne.n	80049e2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	f003 0320 	and.w	r3, r3, #32
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d008      	beq.n	80049e2 <HAL_UART_IRQHandler+0x52>
 80049d0:	69bb      	ldr	r3, [r7, #24]
 80049d2:	f003 0320 	and.w	r3, r3, #32
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d003      	beq.n	80049e2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f000 f9d6 	bl	8004d8c <UART_Receive_IT>
      return;
 80049e0:	e0d1      	b.n	8004b86 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	f000 80b0 	beq.w	8004b4a <HAL_UART_IRQHandler+0x1ba>
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	f003 0301 	and.w	r3, r3, #1
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d105      	bne.n	8004a00 <HAL_UART_IRQHandler+0x70>
 80049f4:	69bb      	ldr	r3, [r7, #24]
 80049f6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	f000 80a5 	beq.w	8004b4a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	f003 0301 	and.w	r3, r3, #1
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d00a      	beq.n	8004a20 <HAL_UART_IRQHandler+0x90>
 8004a0a:	69bb      	ldr	r3, [r7, #24]
 8004a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d005      	beq.n	8004a20 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a18:	f043 0201 	orr.w	r2, r3, #1
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	f003 0304 	and.w	r3, r3, #4
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d00a      	beq.n	8004a40 <HAL_UART_IRQHandler+0xb0>
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	f003 0301 	and.w	r3, r3, #1
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d005      	beq.n	8004a40 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a38:	f043 0202 	orr.w	r2, r3, #2
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	f003 0302 	and.w	r3, r3, #2
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00a      	beq.n	8004a60 <HAL_UART_IRQHandler+0xd0>
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	f003 0301 	and.w	r3, r3, #1
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d005      	beq.n	8004a60 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a58:	f043 0204 	orr.w	r2, r3, #4
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	f003 0308 	and.w	r3, r3, #8
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d00f      	beq.n	8004a8a <HAL_UART_IRQHandler+0xfa>
 8004a6a:	69bb      	ldr	r3, [r7, #24]
 8004a6c:	f003 0320 	and.w	r3, r3, #32
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d104      	bne.n	8004a7e <HAL_UART_IRQHandler+0xee>
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	f003 0301 	and.w	r3, r3, #1
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d005      	beq.n	8004a8a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a82:	f043 0208 	orr.w	r2, r3, #8
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d078      	beq.n	8004b84 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	f003 0320 	and.w	r3, r3, #32
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d007      	beq.n	8004aac <HAL_UART_IRQHandler+0x11c>
 8004a9c:	69bb      	ldr	r3, [r7, #24]
 8004a9e:	f003 0320 	and.w	r3, r3, #32
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d002      	beq.n	8004aac <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 f970 	bl	8004d8c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	695b      	ldr	r3, [r3, #20]
 8004ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ab6:	2b40      	cmp	r3, #64	; 0x40
 8004ab8:	bf0c      	ite	eq
 8004aba:	2301      	moveq	r3, #1
 8004abc:	2300      	movne	r3, #0
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ac6:	f003 0308 	and.w	r3, r3, #8
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d102      	bne.n	8004ad4 <HAL_UART_IRQHandler+0x144>
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d031      	beq.n	8004b38 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f000 f8b9 	bl	8004c4c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	695b      	ldr	r3, [r3, #20]
 8004ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ae4:	2b40      	cmp	r3, #64	; 0x40
 8004ae6:	d123      	bne.n	8004b30 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	695a      	ldr	r2, [r3, #20]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004af6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d013      	beq.n	8004b28 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b04:	4a21      	ldr	r2, [pc, #132]	; (8004b8c <HAL_UART_IRQHandler+0x1fc>)
 8004b06:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f7fd fbbf 	bl	8002290 <HAL_DMA_Abort_IT>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d016      	beq.n	8004b46 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004b22:	4610      	mov	r0, r2
 8004b24:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b26:	e00e      	b.n	8004b46 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f000 f83b 	bl	8004ba4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b2e:	e00a      	b.n	8004b46 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f000 f837 	bl	8004ba4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b36:	e006      	b.n	8004b46 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f000 f833 	bl	8004ba4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004b44:	e01e      	b.n	8004b84 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b46:	bf00      	nop
    return;
 8004b48:	e01c      	b.n	8004b84 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d008      	beq.n	8004b66 <HAL_UART_IRQHandler+0x1d6>
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d003      	beq.n	8004b66 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 f8a6 	bl	8004cb0 <UART_Transmit_IT>
    return;
 8004b64:	e00f      	b.n	8004b86 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d00a      	beq.n	8004b86 <HAL_UART_IRQHandler+0x1f6>
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d005      	beq.n	8004b86 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 f8ee 	bl	8004d5c <UART_EndTransmit_IT>
    return;
 8004b80:	bf00      	nop
 8004b82:	e000      	b.n	8004b86 <HAL_UART_IRQHandler+0x1f6>
    return;
 8004b84:	bf00      	nop
  }
}
 8004b86:	3720      	adds	r7, #32
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	08004c89 	.word	0x08004c89

08004b90 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004b98:	bf00      	nop
 8004b9a:	370c      	adds	r7, #12
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr

08004ba4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004bac:	bf00      	nop
 8004bae:	370c      	adds	r7, #12
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr

08004bb8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	60f8      	str	r0, [r7, #12]
 8004bc0:	60b9      	str	r1, [r7, #8]
 8004bc2:	603b      	str	r3, [r7, #0]
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bc8:	e02c      	b.n	8004c24 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bd0:	d028      	beq.n	8004c24 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d007      	beq.n	8004be8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004bd8:	f7fd f9ce 	bl	8001f78 <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	69ba      	ldr	r2, [r7, #24]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d21d      	bcs.n	8004c24 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68da      	ldr	r2, [r3, #12]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004bf6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	695a      	ldr	r2, [r3, #20]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f022 0201 	bic.w	r2, r2, #1
 8004c06:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2220      	movs	r2, #32
 8004c0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2220      	movs	r2, #32
 8004c14:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004c20:	2303      	movs	r3, #3
 8004c22:	e00f      	b.n	8004c44 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	68ba      	ldr	r2, [r7, #8]
 8004c30:	429a      	cmp	r2, r3
 8004c32:	bf0c      	ite	eq
 8004c34:	2301      	moveq	r3, #1
 8004c36:	2300      	movne	r3, #0
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	79fb      	ldrb	r3, [r7, #7]
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d0c3      	beq.n	8004bca <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c42:	2300      	movs	r3, #0
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3710      	adds	r7, #16
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	68da      	ldr	r2, [r3, #12]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004c62:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	695a      	ldr	r2, [r3, #20]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f022 0201 	bic.w	r2, r2, #1
 8004c72:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2220      	movs	r2, #32
 8004c78:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004c7c:	bf00      	nop
 8004c7e:	370c      	adds	r7, #12
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c94:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ca2:	68f8      	ldr	r0, [r7, #12]
 8004ca4:	f7ff ff7e 	bl	8004ba4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ca8:	bf00      	nop
 8004caa:	3710      	adds	r7, #16
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b085      	sub	sp, #20
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	2b21      	cmp	r3, #33	; 0x21
 8004cc2:	d144      	bne.n	8004d4e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ccc:	d11a      	bne.n	8004d04 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6a1b      	ldr	r3, [r3, #32]
 8004cd2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	881b      	ldrh	r3, [r3, #0]
 8004cd8:	461a      	mov	r2, r3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ce2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	691b      	ldr	r3, [r3, #16]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d105      	bne.n	8004cf8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6a1b      	ldr	r3, [r3, #32]
 8004cf0:	1c9a      	adds	r2, r3, #2
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	621a      	str	r2, [r3, #32]
 8004cf6:	e00e      	b.n	8004d16 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6a1b      	ldr	r3, [r3, #32]
 8004cfc:	1c5a      	adds	r2, r3, #1
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	621a      	str	r2, [r3, #32]
 8004d02:	e008      	b.n	8004d16 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6a1b      	ldr	r3, [r3, #32]
 8004d08:	1c59      	adds	r1, r3, #1
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	6211      	str	r1, [r2, #32]
 8004d0e:	781a      	ldrb	r2, [r3, #0]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	3b01      	subs	r3, #1
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	4619      	mov	r1, r3
 8004d24:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d10f      	bne.n	8004d4a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	68da      	ldr	r2, [r3, #12]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d38:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	68da      	ldr	r2, [r3, #12]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d48:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	e000      	b.n	8004d50 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004d4e:	2302      	movs	r3, #2
  }
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3714      	adds	r7, #20
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr

08004d5c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b082      	sub	sp, #8
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	68da      	ldr	r2, [r3, #12]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d72:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2220      	movs	r2, #32
 8004d78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f7ff ff07 	bl	8004b90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004d82:	2300      	movs	r3, #0
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3708      	adds	r7, #8
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b084      	sub	sp, #16
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	2b22      	cmp	r3, #34	; 0x22
 8004d9e:	d171      	bne.n	8004e84 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004da8:	d123      	bne.n	8004df2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dae:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	691b      	ldr	r3, [r3, #16]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d10e      	bne.n	8004dd6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dc4:	b29a      	uxth	r2, r3
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dce:	1c9a      	adds	r2, r3, #2
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	629a      	str	r2, [r3, #40]	; 0x28
 8004dd4:	e029      	b.n	8004e2a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	b29a      	uxth	r2, r3
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dea:	1c5a      	adds	r2, r3, #1
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	629a      	str	r2, [r3, #40]	; 0x28
 8004df0:	e01b      	b.n	8004e2a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d10a      	bne.n	8004e10 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	6858      	ldr	r0, [r3, #4]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e04:	1c59      	adds	r1, r3, #1
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	6291      	str	r1, [r2, #40]	; 0x28
 8004e0a:	b2c2      	uxtb	r2, r0
 8004e0c:	701a      	strb	r2, [r3, #0]
 8004e0e:	e00c      	b.n	8004e2a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	b2da      	uxtb	r2, r3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e1c:	1c58      	adds	r0, r3, #1
 8004e1e:	6879      	ldr	r1, [r7, #4]
 8004e20:	6288      	str	r0, [r1, #40]	; 0x28
 8004e22:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004e26:	b2d2      	uxtb	r2, r2
 8004e28:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	3b01      	subs	r3, #1
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	4619      	mov	r1, r3
 8004e38:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d120      	bne.n	8004e80 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	68da      	ldr	r2, [r3, #12]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f022 0220 	bic.w	r2, r2, #32
 8004e4c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	68da      	ldr	r2, [r3, #12]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e5c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	695a      	ldr	r2, [r3, #20]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f022 0201 	bic.w	r2, r2, #1
 8004e6c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2220      	movs	r2, #32
 8004e72:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f7fb fe3a 	bl	8000af0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	e002      	b.n	8004e86 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004e80:	2300      	movs	r3, #0
 8004e82:	e000      	b.n	8004e86 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004e84:	2302      	movs	r3, #2
  }
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3710      	adds	r7, #16
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
	...

08004e90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e94:	b085      	sub	sp, #20
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	691b      	ldr	r3, [r3, #16]
 8004ea0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	68da      	ldr	r2, [r3, #12]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	430a      	orrs	r2, r1
 8004eae:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	689a      	ldr	r2, [r3, #8]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	691b      	ldr	r3, [r3, #16]
 8004eb8:	431a      	orrs	r2, r3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	695b      	ldr	r3, [r3, #20]
 8004ebe:	431a      	orrs	r2, r3
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	69db      	ldr	r3, [r3, #28]
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004ed2:	f023 030c 	bic.w	r3, r3, #12
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	6812      	ldr	r2, [r2, #0]
 8004eda:	68f9      	ldr	r1, [r7, #12]
 8004edc:	430b      	orrs	r3, r1
 8004ede:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	695b      	ldr	r3, [r3, #20]
 8004ee6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	699a      	ldr	r2, [r3, #24]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	430a      	orrs	r2, r1
 8004ef4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	69db      	ldr	r3, [r3, #28]
 8004efa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004efe:	f040 818b 	bne.w	8005218 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4ac1      	ldr	r2, [pc, #772]	; (800520c <UART_SetConfig+0x37c>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d005      	beq.n	8004f18 <UART_SetConfig+0x88>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4abf      	ldr	r2, [pc, #764]	; (8005210 <UART_SetConfig+0x380>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	f040 80bd 	bne.w	8005092 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f18:	f7fe fa0a 	bl	8003330 <HAL_RCC_GetPCLK2Freq>
 8004f1c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	461d      	mov	r5, r3
 8004f22:	f04f 0600 	mov.w	r6, #0
 8004f26:	46a8      	mov	r8, r5
 8004f28:	46b1      	mov	r9, r6
 8004f2a:	eb18 0308 	adds.w	r3, r8, r8
 8004f2e:	eb49 0409 	adc.w	r4, r9, r9
 8004f32:	4698      	mov	r8, r3
 8004f34:	46a1      	mov	r9, r4
 8004f36:	eb18 0805 	adds.w	r8, r8, r5
 8004f3a:	eb49 0906 	adc.w	r9, r9, r6
 8004f3e:	f04f 0100 	mov.w	r1, #0
 8004f42:	f04f 0200 	mov.w	r2, #0
 8004f46:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004f4a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004f4e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004f52:	4688      	mov	r8, r1
 8004f54:	4691      	mov	r9, r2
 8004f56:	eb18 0005 	adds.w	r0, r8, r5
 8004f5a:	eb49 0106 	adc.w	r1, r9, r6
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	461d      	mov	r5, r3
 8004f64:	f04f 0600 	mov.w	r6, #0
 8004f68:	196b      	adds	r3, r5, r5
 8004f6a:	eb46 0406 	adc.w	r4, r6, r6
 8004f6e:	461a      	mov	r2, r3
 8004f70:	4623      	mov	r3, r4
 8004f72:	f7fb f93b 	bl	80001ec <__aeabi_uldivmod>
 8004f76:	4603      	mov	r3, r0
 8004f78:	460c      	mov	r4, r1
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	4ba5      	ldr	r3, [pc, #660]	; (8005214 <UART_SetConfig+0x384>)
 8004f7e:	fba3 2302 	umull	r2, r3, r3, r2
 8004f82:	095b      	lsrs	r3, r3, #5
 8004f84:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	461d      	mov	r5, r3
 8004f8c:	f04f 0600 	mov.w	r6, #0
 8004f90:	46a9      	mov	r9, r5
 8004f92:	46b2      	mov	sl, r6
 8004f94:	eb19 0309 	adds.w	r3, r9, r9
 8004f98:	eb4a 040a 	adc.w	r4, sl, sl
 8004f9c:	4699      	mov	r9, r3
 8004f9e:	46a2      	mov	sl, r4
 8004fa0:	eb19 0905 	adds.w	r9, r9, r5
 8004fa4:	eb4a 0a06 	adc.w	sl, sl, r6
 8004fa8:	f04f 0100 	mov.w	r1, #0
 8004fac:	f04f 0200 	mov.w	r2, #0
 8004fb0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004fb4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004fb8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004fbc:	4689      	mov	r9, r1
 8004fbe:	4692      	mov	sl, r2
 8004fc0:	eb19 0005 	adds.w	r0, r9, r5
 8004fc4:	eb4a 0106 	adc.w	r1, sl, r6
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	461d      	mov	r5, r3
 8004fce:	f04f 0600 	mov.w	r6, #0
 8004fd2:	196b      	adds	r3, r5, r5
 8004fd4:	eb46 0406 	adc.w	r4, r6, r6
 8004fd8:	461a      	mov	r2, r3
 8004fda:	4623      	mov	r3, r4
 8004fdc:	f7fb f906 	bl	80001ec <__aeabi_uldivmod>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	460c      	mov	r4, r1
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	4b8b      	ldr	r3, [pc, #556]	; (8005214 <UART_SetConfig+0x384>)
 8004fe8:	fba3 1302 	umull	r1, r3, r3, r2
 8004fec:	095b      	lsrs	r3, r3, #5
 8004fee:	2164      	movs	r1, #100	; 0x64
 8004ff0:	fb01 f303 	mul.w	r3, r1, r3
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	00db      	lsls	r3, r3, #3
 8004ff8:	3332      	adds	r3, #50	; 0x32
 8004ffa:	4a86      	ldr	r2, [pc, #536]	; (8005214 <UART_SetConfig+0x384>)
 8004ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8005000:	095b      	lsrs	r3, r3, #5
 8005002:	005b      	lsls	r3, r3, #1
 8005004:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005008:	4498      	add	r8, r3
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	461d      	mov	r5, r3
 800500e:	f04f 0600 	mov.w	r6, #0
 8005012:	46a9      	mov	r9, r5
 8005014:	46b2      	mov	sl, r6
 8005016:	eb19 0309 	adds.w	r3, r9, r9
 800501a:	eb4a 040a 	adc.w	r4, sl, sl
 800501e:	4699      	mov	r9, r3
 8005020:	46a2      	mov	sl, r4
 8005022:	eb19 0905 	adds.w	r9, r9, r5
 8005026:	eb4a 0a06 	adc.w	sl, sl, r6
 800502a:	f04f 0100 	mov.w	r1, #0
 800502e:	f04f 0200 	mov.w	r2, #0
 8005032:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005036:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800503a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800503e:	4689      	mov	r9, r1
 8005040:	4692      	mov	sl, r2
 8005042:	eb19 0005 	adds.w	r0, r9, r5
 8005046:	eb4a 0106 	adc.w	r1, sl, r6
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	461d      	mov	r5, r3
 8005050:	f04f 0600 	mov.w	r6, #0
 8005054:	196b      	adds	r3, r5, r5
 8005056:	eb46 0406 	adc.w	r4, r6, r6
 800505a:	461a      	mov	r2, r3
 800505c:	4623      	mov	r3, r4
 800505e:	f7fb f8c5 	bl	80001ec <__aeabi_uldivmod>
 8005062:	4603      	mov	r3, r0
 8005064:	460c      	mov	r4, r1
 8005066:	461a      	mov	r2, r3
 8005068:	4b6a      	ldr	r3, [pc, #424]	; (8005214 <UART_SetConfig+0x384>)
 800506a:	fba3 1302 	umull	r1, r3, r3, r2
 800506e:	095b      	lsrs	r3, r3, #5
 8005070:	2164      	movs	r1, #100	; 0x64
 8005072:	fb01 f303 	mul.w	r3, r1, r3
 8005076:	1ad3      	subs	r3, r2, r3
 8005078:	00db      	lsls	r3, r3, #3
 800507a:	3332      	adds	r3, #50	; 0x32
 800507c:	4a65      	ldr	r2, [pc, #404]	; (8005214 <UART_SetConfig+0x384>)
 800507e:	fba2 2303 	umull	r2, r3, r2, r3
 8005082:	095b      	lsrs	r3, r3, #5
 8005084:	f003 0207 	and.w	r2, r3, #7
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4442      	add	r2, r8
 800508e:	609a      	str	r2, [r3, #8]
 8005090:	e26f      	b.n	8005572 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005092:	f7fe f939 	bl	8003308 <HAL_RCC_GetPCLK1Freq>
 8005096:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	461d      	mov	r5, r3
 800509c:	f04f 0600 	mov.w	r6, #0
 80050a0:	46a8      	mov	r8, r5
 80050a2:	46b1      	mov	r9, r6
 80050a4:	eb18 0308 	adds.w	r3, r8, r8
 80050a8:	eb49 0409 	adc.w	r4, r9, r9
 80050ac:	4698      	mov	r8, r3
 80050ae:	46a1      	mov	r9, r4
 80050b0:	eb18 0805 	adds.w	r8, r8, r5
 80050b4:	eb49 0906 	adc.w	r9, r9, r6
 80050b8:	f04f 0100 	mov.w	r1, #0
 80050bc:	f04f 0200 	mov.w	r2, #0
 80050c0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80050c4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80050c8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80050cc:	4688      	mov	r8, r1
 80050ce:	4691      	mov	r9, r2
 80050d0:	eb18 0005 	adds.w	r0, r8, r5
 80050d4:	eb49 0106 	adc.w	r1, r9, r6
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	461d      	mov	r5, r3
 80050de:	f04f 0600 	mov.w	r6, #0
 80050e2:	196b      	adds	r3, r5, r5
 80050e4:	eb46 0406 	adc.w	r4, r6, r6
 80050e8:	461a      	mov	r2, r3
 80050ea:	4623      	mov	r3, r4
 80050ec:	f7fb f87e 	bl	80001ec <__aeabi_uldivmod>
 80050f0:	4603      	mov	r3, r0
 80050f2:	460c      	mov	r4, r1
 80050f4:	461a      	mov	r2, r3
 80050f6:	4b47      	ldr	r3, [pc, #284]	; (8005214 <UART_SetConfig+0x384>)
 80050f8:	fba3 2302 	umull	r2, r3, r3, r2
 80050fc:	095b      	lsrs	r3, r3, #5
 80050fe:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	461d      	mov	r5, r3
 8005106:	f04f 0600 	mov.w	r6, #0
 800510a:	46a9      	mov	r9, r5
 800510c:	46b2      	mov	sl, r6
 800510e:	eb19 0309 	adds.w	r3, r9, r9
 8005112:	eb4a 040a 	adc.w	r4, sl, sl
 8005116:	4699      	mov	r9, r3
 8005118:	46a2      	mov	sl, r4
 800511a:	eb19 0905 	adds.w	r9, r9, r5
 800511e:	eb4a 0a06 	adc.w	sl, sl, r6
 8005122:	f04f 0100 	mov.w	r1, #0
 8005126:	f04f 0200 	mov.w	r2, #0
 800512a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800512e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005132:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005136:	4689      	mov	r9, r1
 8005138:	4692      	mov	sl, r2
 800513a:	eb19 0005 	adds.w	r0, r9, r5
 800513e:	eb4a 0106 	adc.w	r1, sl, r6
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	461d      	mov	r5, r3
 8005148:	f04f 0600 	mov.w	r6, #0
 800514c:	196b      	adds	r3, r5, r5
 800514e:	eb46 0406 	adc.w	r4, r6, r6
 8005152:	461a      	mov	r2, r3
 8005154:	4623      	mov	r3, r4
 8005156:	f7fb f849 	bl	80001ec <__aeabi_uldivmod>
 800515a:	4603      	mov	r3, r0
 800515c:	460c      	mov	r4, r1
 800515e:	461a      	mov	r2, r3
 8005160:	4b2c      	ldr	r3, [pc, #176]	; (8005214 <UART_SetConfig+0x384>)
 8005162:	fba3 1302 	umull	r1, r3, r3, r2
 8005166:	095b      	lsrs	r3, r3, #5
 8005168:	2164      	movs	r1, #100	; 0x64
 800516a:	fb01 f303 	mul.w	r3, r1, r3
 800516e:	1ad3      	subs	r3, r2, r3
 8005170:	00db      	lsls	r3, r3, #3
 8005172:	3332      	adds	r3, #50	; 0x32
 8005174:	4a27      	ldr	r2, [pc, #156]	; (8005214 <UART_SetConfig+0x384>)
 8005176:	fba2 2303 	umull	r2, r3, r2, r3
 800517a:	095b      	lsrs	r3, r3, #5
 800517c:	005b      	lsls	r3, r3, #1
 800517e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005182:	4498      	add	r8, r3
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	461d      	mov	r5, r3
 8005188:	f04f 0600 	mov.w	r6, #0
 800518c:	46a9      	mov	r9, r5
 800518e:	46b2      	mov	sl, r6
 8005190:	eb19 0309 	adds.w	r3, r9, r9
 8005194:	eb4a 040a 	adc.w	r4, sl, sl
 8005198:	4699      	mov	r9, r3
 800519a:	46a2      	mov	sl, r4
 800519c:	eb19 0905 	adds.w	r9, r9, r5
 80051a0:	eb4a 0a06 	adc.w	sl, sl, r6
 80051a4:	f04f 0100 	mov.w	r1, #0
 80051a8:	f04f 0200 	mov.w	r2, #0
 80051ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80051b0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80051b4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80051b8:	4689      	mov	r9, r1
 80051ba:	4692      	mov	sl, r2
 80051bc:	eb19 0005 	adds.w	r0, r9, r5
 80051c0:	eb4a 0106 	adc.w	r1, sl, r6
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	461d      	mov	r5, r3
 80051ca:	f04f 0600 	mov.w	r6, #0
 80051ce:	196b      	adds	r3, r5, r5
 80051d0:	eb46 0406 	adc.w	r4, r6, r6
 80051d4:	461a      	mov	r2, r3
 80051d6:	4623      	mov	r3, r4
 80051d8:	f7fb f808 	bl	80001ec <__aeabi_uldivmod>
 80051dc:	4603      	mov	r3, r0
 80051de:	460c      	mov	r4, r1
 80051e0:	461a      	mov	r2, r3
 80051e2:	4b0c      	ldr	r3, [pc, #48]	; (8005214 <UART_SetConfig+0x384>)
 80051e4:	fba3 1302 	umull	r1, r3, r3, r2
 80051e8:	095b      	lsrs	r3, r3, #5
 80051ea:	2164      	movs	r1, #100	; 0x64
 80051ec:	fb01 f303 	mul.w	r3, r1, r3
 80051f0:	1ad3      	subs	r3, r2, r3
 80051f2:	00db      	lsls	r3, r3, #3
 80051f4:	3332      	adds	r3, #50	; 0x32
 80051f6:	4a07      	ldr	r2, [pc, #28]	; (8005214 <UART_SetConfig+0x384>)
 80051f8:	fba2 2303 	umull	r2, r3, r2, r3
 80051fc:	095b      	lsrs	r3, r3, #5
 80051fe:	f003 0207 	and.w	r2, r3, #7
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4442      	add	r2, r8
 8005208:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800520a:	e1b2      	b.n	8005572 <UART_SetConfig+0x6e2>
 800520c:	40011000 	.word	0x40011000
 8005210:	40011400 	.word	0x40011400
 8005214:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4ad7      	ldr	r2, [pc, #860]	; (800557c <UART_SetConfig+0x6ec>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d005      	beq.n	800522e <UART_SetConfig+0x39e>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4ad6      	ldr	r2, [pc, #856]	; (8005580 <UART_SetConfig+0x6f0>)
 8005228:	4293      	cmp	r3, r2
 800522a:	f040 80d1 	bne.w	80053d0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800522e:	f7fe f87f 	bl	8003330 <HAL_RCC_GetPCLK2Freq>
 8005232:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	469a      	mov	sl, r3
 8005238:	f04f 0b00 	mov.w	fp, #0
 800523c:	46d0      	mov	r8, sl
 800523e:	46d9      	mov	r9, fp
 8005240:	eb18 0308 	adds.w	r3, r8, r8
 8005244:	eb49 0409 	adc.w	r4, r9, r9
 8005248:	4698      	mov	r8, r3
 800524a:	46a1      	mov	r9, r4
 800524c:	eb18 080a 	adds.w	r8, r8, sl
 8005250:	eb49 090b 	adc.w	r9, r9, fp
 8005254:	f04f 0100 	mov.w	r1, #0
 8005258:	f04f 0200 	mov.w	r2, #0
 800525c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005260:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005264:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005268:	4688      	mov	r8, r1
 800526a:	4691      	mov	r9, r2
 800526c:	eb1a 0508 	adds.w	r5, sl, r8
 8005270:	eb4b 0609 	adc.w	r6, fp, r9
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	4619      	mov	r1, r3
 800527a:	f04f 0200 	mov.w	r2, #0
 800527e:	f04f 0300 	mov.w	r3, #0
 8005282:	f04f 0400 	mov.w	r4, #0
 8005286:	0094      	lsls	r4, r2, #2
 8005288:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800528c:	008b      	lsls	r3, r1, #2
 800528e:	461a      	mov	r2, r3
 8005290:	4623      	mov	r3, r4
 8005292:	4628      	mov	r0, r5
 8005294:	4631      	mov	r1, r6
 8005296:	f7fa ffa9 	bl	80001ec <__aeabi_uldivmod>
 800529a:	4603      	mov	r3, r0
 800529c:	460c      	mov	r4, r1
 800529e:	461a      	mov	r2, r3
 80052a0:	4bb8      	ldr	r3, [pc, #736]	; (8005584 <UART_SetConfig+0x6f4>)
 80052a2:	fba3 2302 	umull	r2, r3, r3, r2
 80052a6:	095b      	lsrs	r3, r3, #5
 80052a8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	469b      	mov	fp, r3
 80052b0:	f04f 0c00 	mov.w	ip, #0
 80052b4:	46d9      	mov	r9, fp
 80052b6:	46e2      	mov	sl, ip
 80052b8:	eb19 0309 	adds.w	r3, r9, r9
 80052bc:	eb4a 040a 	adc.w	r4, sl, sl
 80052c0:	4699      	mov	r9, r3
 80052c2:	46a2      	mov	sl, r4
 80052c4:	eb19 090b 	adds.w	r9, r9, fp
 80052c8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80052cc:	f04f 0100 	mov.w	r1, #0
 80052d0:	f04f 0200 	mov.w	r2, #0
 80052d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80052d8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80052dc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80052e0:	4689      	mov	r9, r1
 80052e2:	4692      	mov	sl, r2
 80052e4:	eb1b 0509 	adds.w	r5, fp, r9
 80052e8:	eb4c 060a 	adc.w	r6, ip, sl
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	4619      	mov	r1, r3
 80052f2:	f04f 0200 	mov.w	r2, #0
 80052f6:	f04f 0300 	mov.w	r3, #0
 80052fa:	f04f 0400 	mov.w	r4, #0
 80052fe:	0094      	lsls	r4, r2, #2
 8005300:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005304:	008b      	lsls	r3, r1, #2
 8005306:	461a      	mov	r2, r3
 8005308:	4623      	mov	r3, r4
 800530a:	4628      	mov	r0, r5
 800530c:	4631      	mov	r1, r6
 800530e:	f7fa ff6d 	bl	80001ec <__aeabi_uldivmod>
 8005312:	4603      	mov	r3, r0
 8005314:	460c      	mov	r4, r1
 8005316:	461a      	mov	r2, r3
 8005318:	4b9a      	ldr	r3, [pc, #616]	; (8005584 <UART_SetConfig+0x6f4>)
 800531a:	fba3 1302 	umull	r1, r3, r3, r2
 800531e:	095b      	lsrs	r3, r3, #5
 8005320:	2164      	movs	r1, #100	; 0x64
 8005322:	fb01 f303 	mul.w	r3, r1, r3
 8005326:	1ad3      	subs	r3, r2, r3
 8005328:	011b      	lsls	r3, r3, #4
 800532a:	3332      	adds	r3, #50	; 0x32
 800532c:	4a95      	ldr	r2, [pc, #596]	; (8005584 <UART_SetConfig+0x6f4>)
 800532e:	fba2 2303 	umull	r2, r3, r2, r3
 8005332:	095b      	lsrs	r3, r3, #5
 8005334:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005338:	4498      	add	r8, r3
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	469b      	mov	fp, r3
 800533e:	f04f 0c00 	mov.w	ip, #0
 8005342:	46d9      	mov	r9, fp
 8005344:	46e2      	mov	sl, ip
 8005346:	eb19 0309 	adds.w	r3, r9, r9
 800534a:	eb4a 040a 	adc.w	r4, sl, sl
 800534e:	4699      	mov	r9, r3
 8005350:	46a2      	mov	sl, r4
 8005352:	eb19 090b 	adds.w	r9, r9, fp
 8005356:	eb4a 0a0c 	adc.w	sl, sl, ip
 800535a:	f04f 0100 	mov.w	r1, #0
 800535e:	f04f 0200 	mov.w	r2, #0
 8005362:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005366:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800536a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800536e:	4689      	mov	r9, r1
 8005370:	4692      	mov	sl, r2
 8005372:	eb1b 0509 	adds.w	r5, fp, r9
 8005376:	eb4c 060a 	adc.w	r6, ip, sl
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	4619      	mov	r1, r3
 8005380:	f04f 0200 	mov.w	r2, #0
 8005384:	f04f 0300 	mov.w	r3, #0
 8005388:	f04f 0400 	mov.w	r4, #0
 800538c:	0094      	lsls	r4, r2, #2
 800538e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005392:	008b      	lsls	r3, r1, #2
 8005394:	461a      	mov	r2, r3
 8005396:	4623      	mov	r3, r4
 8005398:	4628      	mov	r0, r5
 800539a:	4631      	mov	r1, r6
 800539c:	f7fa ff26 	bl	80001ec <__aeabi_uldivmod>
 80053a0:	4603      	mov	r3, r0
 80053a2:	460c      	mov	r4, r1
 80053a4:	461a      	mov	r2, r3
 80053a6:	4b77      	ldr	r3, [pc, #476]	; (8005584 <UART_SetConfig+0x6f4>)
 80053a8:	fba3 1302 	umull	r1, r3, r3, r2
 80053ac:	095b      	lsrs	r3, r3, #5
 80053ae:	2164      	movs	r1, #100	; 0x64
 80053b0:	fb01 f303 	mul.w	r3, r1, r3
 80053b4:	1ad3      	subs	r3, r2, r3
 80053b6:	011b      	lsls	r3, r3, #4
 80053b8:	3332      	adds	r3, #50	; 0x32
 80053ba:	4a72      	ldr	r2, [pc, #456]	; (8005584 <UART_SetConfig+0x6f4>)
 80053bc:	fba2 2303 	umull	r2, r3, r2, r3
 80053c0:	095b      	lsrs	r3, r3, #5
 80053c2:	f003 020f 	and.w	r2, r3, #15
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4442      	add	r2, r8
 80053cc:	609a      	str	r2, [r3, #8]
 80053ce:	e0d0      	b.n	8005572 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80053d0:	f7fd ff9a 	bl	8003308 <HAL_RCC_GetPCLK1Freq>
 80053d4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	469a      	mov	sl, r3
 80053da:	f04f 0b00 	mov.w	fp, #0
 80053de:	46d0      	mov	r8, sl
 80053e0:	46d9      	mov	r9, fp
 80053e2:	eb18 0308 	adds.w	r3, r8, r8
 80053e6:	eb49 0409 	adc.w	r4, r9, r9
 80053ea:	4698      	mov	r8, r3
 80053ec:	46a1      	mov	r9, r4
 80053ee:	eb18 080a 	adds.w	r8, r8, sl
 80053f2:	eb49 090b 	adc.w	r9, r9, fp
 80053f6:	f04f 0100 	mov.w	r1, #0
 80053fa:	f04f 0200 	mov.w	r2, #0
 80053fe:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005402:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005406:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800540a:	4688      	mov	r8, r1
 800540c:	4691      	mov	r9, r2
 800540e:	eb1a 0508 	adds.w	r5, sl, r8
 8005412:	eb4b 0609 	adc.w	r6, fp, r9
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	4619      	mov	r1, r3
 800541c:	f04f 0200 	mov.w	r2, #0
 8005420:	f04f 0300 	mov.w	r3, #0
 8005424:	f04f 0400 	mov.w	r4, #0
 8005428:	0094      	lsls	r4, r2, #2
 800542a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800542e:	008b      	lsls	r3, r1, #2
 8005430:	461a      	mov	r2, r3
 8005432:	4623      	mov	r3, r4
 8005434:	4628      	mov	r0, r5
 8005436:	4631      	mov	r1, r6
 8005438:	f7fa fed8 	bl	80001ec <__aeabi_uldivmod>
 800543c:	4603      	mov	r3, r0
 800543e:	460c      	mov	r4, r1
 8005440:	461a      	mov	r2, r3
 8005442:	4b50      	ldr	r3, [pc, #320]	; (8005584 <UART_SetConfig+0x6f4>)
 8005444:	fba3 2302 	umull	r2, r3, r3, r2
 8005448:	095b      	lsrs	r3, r3, #5
 800544a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	469b      	mov	fp, r3
 8005452:	f04f 0c00 	mov.w	ip, #0
 8005456:	46d9      	mov	r9, fp
 8005458:	46e2      	mov	sl, ip
 800545a:	eb19 0309 	adds.w	r3, r9, r9
 800545e:	eb4a 040a 	adc.w	r4, sl, sl
 8005462:	4699      	mov	r9, r3
 8005464:	46a2      	mov	sl, r4
 8005466:	eb19 090b 	adds.w	r9, r9, fp
 800546a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800546e:	f04f 0100 	mov.w	r1, #0
 8005472:	f04f 0200 	mov.w	r2, #0
 8005476:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800547a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800547e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005482:	4689      	mov	r9, r1
 8005484:	4692      	mov	sl, r2
 8005486:	eb1b 0509 	adds.w	r5, fp, r9
 800548a:	eb4c 060a 	adc.w	r6, ip, sl
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	4619      	mov	r1, r3
 8005494:	f04f 0200 	mov.w	r2, #0
 8005498:	f04f 0300 	mov.w	r3, #0
 800549c:	f04f 0400 	mov.w	r4, #0
 80054a0:	0094      	lsls	r4, r2, #2
 80054a2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80054a6:	008b      	lsls	r3, r1, #2
 80054a8:	461a      	mov	r2, r3
 80054aa:	4623      	mov	r3, r4
 80054ac:	4628      	mov	r0, r5
 80054ae:	4631      	mov	r1, r6
 80054b0:	f7fa fe9c 	bl	80001ec <__aeabi_uldivmod>
 80054b4:	4603      	mov	r3, r0
 80054b6:	460c      	mov	r4, r1
 80054b8:	461a      	mov	r2, r3
 80054ba:	4b32      	ldr	r3, [pc, #200]	; (8005584 <UART_SetConfig+0x6f4>)
 80054bc:	fba3 1302 	umull	r1, r3, r3, r2
 80054c0:	095b      	lsrs	r3, r3, #5
 80054c2:	2164      	movs	r1, #100	; 0x64
 80054c4:	fb01 f303 	mul.w	r3, r1, r3
 80054c8:	1ad3      	subs	r3, r2, r3
 80054ca:	011b      	lsls	r3, r3, #4
 80054cc:	3332      	adds	r3, #50	; 0x32
 80054ce:	4a2d      	ldr	r2, [pc, #180]	; (8005584 <UART_SetConfig+0x6f4>)
 80054d0:	fba2 2303 	umull	r2, r3, r2, r3
 80054d4:	095b      	lsrs	r3, r3, #5
 80054d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054da:	4498      	add	r8, r3
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	469b      	mov	fp, r3
 80054e0:	f04f 0c00 	mov.w	ip, #0
 80054e4:	46d9      	mov	r9, fp
 80054e6:	46e2      	mov	sl, ip
 80054e8:	eb19 0309 	adds.w	r3, r9, r9
 80054ec:	eb4a 040a 	adc.w	r4, sl, sl
 80054f0:	4699      	mov	r9, r3
 80054f2:	46a2      	mov	sl, r4
 80054f4:	eb19 090b 	adds.w	r9, r9, fp
 80054f8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80054fc:	f04f 0100 	mov.w	r1, #0
 8005500:	f04f 0200 	mov.w	r2, #0
 8005504:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005508:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800550c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005510:	4689      	mov	r9, r1
 8005512:	4692      	mov	sl, r2
 8005514:	eb1b 0509 	adds.w	r5, fp, r9
 8005518:	eb4c 060a 	adc.w	r6, ip, sl
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	4619      	mov	r1, r3
 8005522:	f04f 0200 	mov.w	r2, #0
 8005526:	f04f 0300 	mov.w	r3, #0
 800552a:	f04f 0400 	mov.w	r4, #0
 800552e:	0094      	lsls	r4, r2, #2
 8005530:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005534:	008b      	lsls	r3, r1, #2
 8005536:	461a      	mov	r2, r3
 8005538:	4623      	mov	r3, r4
 800553a:	4628      	mov	r0, r5
 800553c:	4631      	mov	r1, r6
 800553e:	f7fa fe55 	bl	80001ec <__aeabi_uldivmod>
 8005542:	4603      	mov	r3, r0
 8005544:	460c      	mov	r4, r1
 8005546:	461a      	mov	r2, r3
 8005548:	4b0e      	ldr	r3, [pc, #56]	; (8005584 <UART_SetConfig+0x6f4>)
 800554a:	fba3 1302 	umull	r1, r3, r3, r2
 800554e:	095b      	lsrs	r3, r3, #5
 8005550:	2164      	movs	r1, #100	; 0x64
 8005552:	fb01 f303 	mul.w	r3, r1, r3
 8005556:	1ad3      	subs	r3, r2, r3
 8005558:	011b      	lsls	r3, r3, #4
 800555a:	3332      	adds	r3, #50	; 0x32
 800555c:	4a09      	ldr	r2, [pc, #36]	; (8005584 <UART_SetConfig+0x6f4>)
 800555e:	fba2 2303 	umull	r2, r3, r2, r3
 8005562:	095b      	lsrs	r3, r3, #5
 8005564:	f003 020f 	and.w	r2, r3, #15
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4442      	add	r2, r8
 800556e:	609a      	str	r2, [r3, #8]
}
 8005570:	e7ff      	b.n	8005572 <UART_SetConfig+0x6e2>
 8005572:	bf00      	nop
 8005574:	3714      	adds	r7, #20
 8005576:	46bd      	mov	sp, r7
 8005578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800557c:	40011000 	.word	0x40011000
 8005580:	40011400 	.word	0x40011400
 8005584:	51eb851f 	.word	0x51eb851f

08005588 <__libc_init_array>:
 8005588:	b570      	push	{r4, r5, r6, lr}
 800558a:	4e0d      	ldr	r6, [pc, #52]	; (80055c0 <__libc_init_array+0x38>)
 800558c:	4c0d      	ldr	r4, [pc, #52]	; (80055c4 <__libc_init_array+0x3c>)
 800558e:	1ba4      	subs	r4, r4, r6
 8005590:	10a4      	asrs	r4, r4, #2
 8005592:	2500      	movs	r5, #0
 8005594:	42a5      	cmp	r5, r4
 8005596:	d109      	bne.n	80055ac <__libc_init_array+0x24>
 8005598:	4e0b      	ldr	r6, [pc, #44]	; (80055c8 <__libc_init_array+0x40>)
 800559a:	4c0c      	ldr	r4, [pc, #48]	; (80055cc <__libc_init_array+0x44>)
 800559c:	f000 f820 	bl	80055e0 <_init>
 80055a0:	1ba4      	subs	r4, r4, r6
 80055a2:	10a4      	asrs	r4, r4, #2
 80055a4:	2500      	movs	r5, #0
 80055a6:	42a5      	cmp	r5, r4
 80055a8:	d105      	bne.n	80055b6 <__libc_init_array+0x2e>
 80055aa:	bd70      	pop	{r4, r5, r6, pc}
 80055ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80055b0:	4798      	blx	r3
 80055b2:	3501      	adds	r5, #1
 80055b4:	e7ee      	b.n	8005594 <__libc_init_array+0xc>
 80055b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80055ba:	4798      	blx	r3
 80055bc:	3501      	adds	r5, #1
 80055be:	e7f2      	b.n	80055a6 <__libc_init_array+0x1e>
 80055c0:	08005618 	.word	0x08005618
 80055c4:	08005618 	.word	0x08005618
 80055c8:	08005618 	.word	0x08005618
 80055cc:	0800561c 	.word	0x0800561c

080055d0 <memset>:
 80055d0:	4402      	add	r2, r0
 80055d2:	4603      	mov	r3, r0
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d100      	bne.n	80055da <memset+0xa>
 80055d8:	4770      	bx	lr
 80055da:	f803 1b01 	strb.w	r1, [r3], #1
 80055de:	e7f9      	b.n	80055d4 <memset+0x4>

080055e0 <_init>:
 80055e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055e2:	bf00      	nop
 80055e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055e6:	bc08      	pop	{r3}
 80055e8:	469e      	mov	lr, r3
 80055ea:	4770      	bx	lr

080055ec <_fini>:
 80055ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ee:	bf00      	nop
 80055f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055f2:	bc08      	pop	{r3}
 80055f4:	469e      	mov	lr, r3
 80055f6:	4770      	bx	lr
