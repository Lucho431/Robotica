
robot_core_STM32F429IGT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000731c  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080074cc  080074cc  000174cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800751c  0800751c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800751c  0800751c  0001751c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007524  08007524  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007524  08007524  00017524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007528  08007528  00017528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800752c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  20000010  0800753c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000027c  0800753c  0002027c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012502  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bd0  00000000  00000000  00032542  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001100  00000000  00000000  00035118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fc0  00000000  00000000  00036218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003b7c  00000000  00000000  000371d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013df5  00000000  00000000  0003ad54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd0e9  00000000  00000000  0004eb49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012bc32  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047ec  00000000  00000000  0012bc84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000010 	.word	0x20000010
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080074b4 	.word	0x080074b4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000014 	.word	0x20000014
 80001ec:	080074b4 	.word	0x080074b4

080001f0 <__aeabi_dmul>:
 80001f0:	b570      	push	{r4, r5, r6, lr}
 80001f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001fe:	bf1d      	ittte	ne
 8000200:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000204:	ea94 0f0c 	teqne	r4, ip
 8000208:	ea95 0f0c 	teqne	r5, ip
 800020c:	f000 f8de 	bleq	80003cc <__aeabi_dmul+0x1dc>
 8000210:	442c      	add	r4, r5
 8000212:	ea81 0603 	eor.w	r6, r1, r3
 8000216:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800021a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800021e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000222:	bf18      	it	ne
 8000224:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000228:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800022c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000230:	d038      	beq.n	80002a4 <__aeabi_dmul+0xb4>
 8000232:	fba0 ce02 	umull	ip, lr, r0, r2
 8000236:	f04f 0500 	mov.w	r5, #0
 800023a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800023e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000242:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000246:	f04f 0600 	mov.w	r6, #0
 800024a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800024e:	f09c 0f00 	teq	ip, #0
 8000252:	bf18      	it	ne
 8000254:	f04e 0e01 	orrne.w	lr, lr, #1
 8000258:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800025c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000260:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000264:	d204      	bcs.n	8000270 <__aeabi_dmul+0x80>
 8000266:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800026a:	416d      	adcs	r5, r5
 800026c:	eb46 0606 	adc.w	r6, r6, r6
 8000270:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000274:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000278:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800027c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000280:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000284:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000288:	bf88      	it	hi
 800028a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800028e:	d81e      	bhi.n	80002ce <__aeabi_dmul+0xde>
 8000290:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000294:	bf08      	it	eq
 8000296:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800029a:	f150 0000 	adcs.w	r0, r0, #0
 800029e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002a2:	bd70      	pop	{r4, r5, r6, pc}
 80002a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002a8:	ea46 0101 	orr.w	r1, r6, r1
 80002ac:	ea40 0002 	orr.w	r0, r0, r2
 80002b0:	ea81 0103 	eor.w	r1, r1, r3
 80002b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002b8:	bfc2      	ittt	gt
 80002ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002c2:	bd70      	popgt	{r4, r5, r6, pc}
 80002c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002c8:	f04f 0e00 	mov.w	lr, #0
 80002cc:	3c01      	subs	r4, #1
 80002ce:	f300 80ab 	bgt.w	8000428 <__aeabi_dmul+0x238>
 80002d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002d6:	bfde      	ittt	le
 80002d8:	2000      	movle	r0, #0
 80002da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002de:	bd70      	pople	{r4, r5, r6, pc}
 80002e0:	f1c4 0400 	rsb	r4, r4, #0
 80002e4:	3c20      	subs	r4, #32
 80002e6:	da35      	bge.n	8000354 <__aeabi_dmul+0x164>
 80002e8:	340c      	adds	r4, #12
 80002ea:	dc1b      	bgt.n	8000324 <__aeabi_dmul+0x134>
 80002ec:	f104 0414 	add.w	r4, r4, #20
 80002f0:	f1c4 0520 	rsb	r5, r4, #32
 80002f4:	fa00 f305 	lsl.w	r3, r0, r5
 80002f8:	fa20 f004 	lsr.w	r0, r0, r4
 80002fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000300:	ea40 0002 	orr.w	r0, r0, r2
 8000304:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000308:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800030c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000310:	fa21 f604 	lsr.w	r6, r1, r4
 8000314:	eb42 0106 	adc.w	r1, r2, r6
 8000318:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800031c:	bf08      	it	eq
 800031e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f1c4 040c 	rsb	r4, r4, #12
 8000328:	f1c4 0520 	rsb	r5, r4, #32
 800032c:	fa00 f304 	lsl.w	r3, r0, r4
 8000330:	fa20 f005 	lsr.w	r0, r0, r5
 8000334:	fa01 f204 	lsl.w	r2, r1, r4
 8000338:	ea40 0002 	orr.w	r0, r0, r2
 800033c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000340:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000344:	f141 0100 	adc.w	r1, r1, #0
 8000348:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800034c:	bf08      	it	eq
 800034e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000352:	bd70      	pop	{r4, r5, r6, pc}
 8000354:	f1c4 0520 	rsb	r5, r4, #32
 8000358:	fa00 f205 	lsl.w	r2, r0, r5
 800035c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000360:	fa20 f304 	lsr.w	r3, r0, r4
 8000364:	fa01 f205 	lsl.w	r2, r1, r5
 8000368:	ea43 0302 	orr.w	r3, r3, r2
 800036c:	fa21 f004 	lsr.w	r0, r1, r4
 8000370:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000374:	fa21 f204 	lsr.w	r2, r1, r4
 8000378:	ea20 0002 	bic.w	r0, r0, r2
 800037c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000380:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000384:	bf08      	it	eq
 8000386:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800038a:	bd70      	pop	{r4, r5, r6, pc}
 800038c:	f094 0f00 	teq	r4, #0
 8000390:	d10f      	bne.n	80003b2 <__aeabi_dmul+0x1c2>
 8000392:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000396:	0040      	lsls	r0, r0, #1
 8000398:	eb41 0101 	adc.w	r1, r1, r1
 800039c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003a0:	bf08      	it	eq
 80003a2:	3c01      	subeq	r4, #1
 80003a4:	d0f7      	beq.n	8000396 <__aeabi_dmul+0x1a6>
 80003a6:	ea41 0106 	orr.w	r1, r1, r6
 80003aa:	f095 0f00 	teq	r5, #0
 80003ae:	bf18      	it	ne
 80003b0:	4770      	bxne	lr
 80003b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003b6:	0052      	lsls	r2, r2, #1
 80003b8:	eb43 0303 	adc.w	r3, r3, r3
 80003bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003c0:	bf08      	it	eq
 80003c2:	3d01      	subeq	r5, #1
 80003c4:	d0f7      	beq.n	80003b6 <__aeabi_dmul+0x1c6>
 80003c6:	ea43 0306 	orr.w	r3, r3, r6
 80003ca:	4770      	bx	lr
 80003cc:	ea94 0f0c 	teq	r4, ip
 80003d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003d4:	bf18      	it	ne
 80003d6:	ea95 0f0c 	teqne	r5, ip
 80003da:	d00c      	beq.n	80003f6 <__aeabi_dmul+0x206>
 80003dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e0:	bf18      	it	ne
 80003e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003e6:	d1d1      	bne.n	800038c <__aeabi_dmul+0x19c>
 80003e8:	ea81 0103 	eor.w	r1, r1, r3
 80003ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f0:	f04f 0000 	mov.w	r0, #0
 80003f4:	bd70      	pop	{r4, r5, r6, pc}
 80003f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003fa:	bf06      	itte	eq
 80003fc:	4610      	moveq	r0, r2
 80003fe:	4619      	moveq	r1, r3
 8000400:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000404:	d019      	beq.n	800043a <__aeabi_dmul+0x24a>
 8000406:	ea94 0f0c 	teq	r4, ip
 800040a:	d102      	bne.n	8000412 <__aeabi_dmul+0x222>
 800040c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000410:	d113      	bne.n	800043a <__aeabi_dmul+0x24a>
 8000412:	ea95 0f0c 	teq	r5, ip
 8000416:	d105      	bne.n	8000424 <__aeabi_dmul+0x234>
 8000418:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800041c:	bf1c      	itt	ne
 800041e:	4610      	movne	r0, r2
 8000420:	4619      	movne	r1, r3
 8000422:	d10a      	bne.n	800043a <__aeabi_dmul+0x24a>
 8000424:	ea81 0103 	eor.w	r1, r1, r3
 8000428:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800042c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd70      	pop	{r4, r5, r6, pc}
 800043a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800043e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000442:	bd70      	pop	{r4, r5, r6, pc}

08000444 <__aeabi_drsub>:
 8000444:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000448:	e002      	b.n	8000450 <__adddf3>
 800044a:	bf00      	nop

0800044c <__aeabi_dsub>:
 800044c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000450 <__adddf3>:
 8000450:	b530      	push	{r4, r5, lr}
 8000452:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000456:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800045a:	ea94 0f05 	teq	r4, r5
 800045e:	bf08      	it	eq
 8000460:	ea90 0f02 	teqeq	r0, r2
 8000464:	bf1f      	itttt	ne
 8000466:	ea54 0c00 	orrsne.w	ip, r4, r0
 800046a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800046e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000472:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000476:	f000 80e2 	beq.w	800063e <__adddf3+0x1ee>
 800047a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800047e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000482:	bfb8      	it	lt
 8000484:	426d      	neglt	r5, r5
 8000486:	dd0c      	ble.n	80004a2 <__adddf3+0x52>
 8000488:	442c      	add	r4, r5
 800048a:	ea80 0202 	eor.w	r2, r0, r2
 800048e:	ea81 0303 	eor.w	r3, r1, r3
 8000492:	ea82 0000 	eor.w	r0, r2, r0
 8000496:	ea83 0101 	eor.w	r1, r3, r1
 800049a:	ea80 0202 	eor.w	r2, r0, r2
 800049e:	ea81 0303 	eor.w	r3, r1, r3
 80004a2:	2d36      	cmp	r5, #54	; 0x36
 80004a4:	bf88      	it	hi
 80004a6:	bd30      	pophi	{r4, r5, pc}
 80004a8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004b0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004b4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004b8:	d002      	beq.n	80004c0 <__adddf3+0x70>
 80004ba:	4240      	negs	r0, r0
 80004bc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004c4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004c8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004cc:	d002      	beq.n	80004d4 <__adddf3+0x84>
 80004ce:	4252      	negs	r2, r2
 80004d0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004d4:	ea94 0f05 	teq	r4, r5
 80004d8:	f000 80a7 	beq.w	800062a <__adddf3+0x1da>
 80004dc:	f1a4 0401 	sub.w	r4, r4, #1
 80004e0:	f1d5 0e20 	rsbs	lr, r5, #32
 80004e4:	db0d      	blt.n	8000502 <__adddf3+0xb2>
 80004e6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004ea:	fa22 f205 	lsr.w	r2, r2, r5
 80004ee:	1880      	adds	r0, r0, r2
 80004f0:	f141 0100 	adc.w	r1, r1, #0
 80004f4:	fa03 f20e 	lsl.w	r2, r3, lr
 80004f8:	1880      	adds	r0, r0, r2
 80004fa:	fa43 f305 	asr.w	r3, r3, r5
 80004fe:	4159      	adcs	r1, r3
 8000500:	e00e      	b.n	8000520 <__adddf3+0xd0>
 8000502:	f1a5 0520 	sub.w	r5, r5, #32
 8000506:	f10e 0e20 	add.w	lr, lr, #32
 800050a:	2a01      	cmp	r2, #1
 800050c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000510:	bf28      	it	cs
 8000512:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000516:	fa43 f305 	asr.w	r3, r3, r5
 800051a:	18c0      	adds	r0, r0, r3
 800051c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	d507      	bpl.n	8000536 <__adddf3+0xe6>
 8000526:	f04f 0e00 	mov.w	lr, #0
 800052a:	f1dc 0c00 	rsbs	ip, ip, #0
 800052e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000532:	eb6e 0101 	sbc.w	r1, lr, r1
 8000536:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800053a:	d31b      	bcc.n	8000574 <__adddf3+0x124>
 800053c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000540:	d30c      	bcc.n	800055c <__adddf3+0x10c>
 8000542:	0849      	lsrs	r1, r1, #1
 8000544:	ea5f 0030 	movs.w	r0, r0, rrx
 8000548:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800054c:	f104 0401 	add.w	r4, r4, #1
 8000550:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000554:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000558:	f080 809a 	bcs.w	8000690 <__adddf3+0x240>
 800055c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000560:	bf08      	it	eq
 8000562:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000566:	f150 0000 	adcs.w	r0, r0, #0
 800056a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800056e:	ea41 0105 	orr.w	r1, r1, r5
 8000572:	bd30      	pop	{r4, r5, pc}
 8000574:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000578:	4140      	adcs	r0, r0
 800057a:	eb41 0101 	adc.w	r1, r1, r1
 800057e:	3c01      	subs	r4, #1
 8000580:	bf28      	it	cs
 8000582:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000586:	d2e9      	bcs.n	800055c <__adddf3+0x10c>
 8000588:	f091 0f00 	teq	r1, #0
 800058c:	bf04      	itt	eq
 800058e:	4601      	moveq	r1, r0
 8000590:	2000      	moveq	r0, #0
 8000592:	fab1 f381 	clz	r3, r1
 8000596:	bf08      	it	eq
 8000598:	3320      	addeq	r3, #32
 800059a:	f1a3 030b 	sub.w	r3, r3, #11
 800059e:	f1b3 0220 	subs.w	r2, r3, #32
 80005a2:	da0c      	bge.n	80005be <__adddf3+0x16e>
 80005a4:	320c      	adds	r2, #12
 80005a6:	dd08      	ble.n	80005ba <__adddf3+0x16a>
 80005a8:	f102 0c14 	add.w	ip, r2, #20
 80005ac:	f1c2 020c 	rsb	r2, r2, #12
 80005b0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005b4:	fa21 f102 	lsr.w	r1, r1, r2
 80005b8:	e00c      	b.n	80005d4 <__adddf3+0x184>
 80005ba:	f102 0214 	add.w	r2, r2, #20
 80005be:	bfd8      	it	le
 80005c0:	f1c2 0c20 	rsble	ip, r2, #32
 80005c4:	fa01 f102 	lsl.w	r1, r1, r2
 80005c8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005cc:	bfdc      	itt	le
 80005ce:	ea41 010c 	orrle.w	r1, r1, ip
 80005d2:	4090      	lslle	r0, r2
 80005d4:	1ae4      	subs	r4, r4, r3
 80005d6:	bfa2      	ittt	ge
 80005d8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005dc:	4329      	orrge	r1, r5
 80005de:	bd30      	popge	{r4, r5, pc}
 80005e0:	ea6f 0404 	mvn.w	r4, r4
 80005e4:	3c1f      	subs	r4, #31
 80005e6:	da1c      	bge.n	8000622 <__adddf3+0x1d2>
 80005e8:	340c      	adds	r4, #12
 80005ea:	dc0e      	bgt.n	800060a <__adddf3+0x1ba>
 80005ec:	f104 0414 	add.w	r4, r4, #20
 80005f0:	f1c4 0220 	rsb	r2, r4, #32
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f302 	lsl.w	r3, r1, r2
 80005fc:	ea40 0003 	orr.w	r0, r0, r3
 8000600:	fa21 f304 	lsr.w	r3, r1, r4
 8000604:	ea45 0103 	orr.w	r1, r5, r3
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	f1c4 040c 	rsb	r4, r4, #12
 800060e:	f1c4 0220 	rsb	r2, r4, #32
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 f304 	lsl.w	r3, r1, r4
 800061a:	ea40 0003 	orr.w	r0, r0, r3
 800061e:	4629      	mov	r1, r5
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	fa21 f004 	lsr.w	r0, r1, r4
 8000626:	4629      	mov	r1, r5
 8000628:	bd30      	pop	{r4, r5, pc}
 800062a:	f094 0f00 	teq	r4, #0
 800062e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000632:	bf06      	itte	eq
 8000634:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000638:	3401      	addeq	r4, #1
 800063a:	3d01      	subne	r5, #1
 800063c:	e74e      	b.n	80004dc <__adddf3+0x8c>
 800063e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000642:	bf18      	it	ne
 8000644:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000648:	d029      	beq.n	800069e <__adddf3+0x24e>
 800064a:	ea94 0f05 	teq	r4, r5
 800064e:	bf08      	it	eq
 8000650:	ea90 0f02 	teqeq	r0, r2
 8000654:	d005      	beq.n	8000662 <__adddf3+0x212>
 8000656:	ea54 0c00 	orrs.w	ip, r4, r0
 800065a:	bf04      	itt	eq
 800065c:	4619      	moveq	r1, r3
 800065e:	4610      	moveq	r0, r2
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	ea91 0f03 	teq	r1, r3
 8000666:	bf1e      	ittt	ne
 8000668:	2100      	movne	r1, #0
 800066a:	2000      	movne	r0, #0
 800066c:	bd30      	popne	{r4, r5, pc}
 800066e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000672:	d105      	bne.n	8000680 <__adddf3+0x230>
 8000674:	0040      	lsls	r0, r0, #1
 8000676:	4149      	adcs	r1, r1
 8000678:	bf28      	it	cs
 800067a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd30      	pop	{r4, r5, pc}
 8000680:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000684:	bf3c      	itt	cc
 8000686:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800068a:	bd30      	popcc	{r4, r5, pc}
 800068c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000690:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000694:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000698:	f04f 0000 	mov.w	r0, #0
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006a2:	bf1a      	itte	ne
 80006a4:	4619      	movne	r1, r3
 80006a6:	4610      	movne	r0, r2
 80006a8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006ac:	bf1c      	itt	ne
 80006ae:	460b      	movne	r3, r1
 80006b0:	4602      	movne	r2, r0
 80006b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006b6:	bf06      	itte	eq
 80006b8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006bc:	ea91 0f03 	teqeq	r1, r3
 80006c0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	bf00      	nop

080006c8 <__aeabi_ui2d>:
 80006c8:	f090 0f00 	teq	r0, #0
 80006cc:	bf04      	itt	eq
 80006ce:	2100      	moveq	r1, #0
 80006d0:	4770      	bxeq	lr
 80006d2:	b530      	push	{r4, r5, lr}
 80006d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006dc:	f04f 0500 	mov.w	r5, #0
 80006e0:	f04f 0100 	mov.w	r1, #0
 80006e4:	e750      	b.n	8000588 <__adddf3+0x138>
 80006e6:	bf00      	nop

080006e8 <__aeabi_i2d>:
 80006e8:	f090 0f00 	teq	r0, #0
 80006ec:	bf04      	itt	eq
 80006ee:	2100      	moveq	r1, #0
 80006f0:	4770      	bxeq	lr
 80006f2:	b530      	push	{r4, r5, lr}
 80006f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006fc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000700:	bf48      	it	mi
 8000702:	4240      	negmi	r0, r0
 8000704:	f04f 0100 	mov.w	r1, #0
 8000708:	e73e      	b.n	8000588 <__adddf3+0x138>
 800070a:	bf00      	nop

0800070c <__aeabi_f2d>:
 800070c:	0042      	lsls	r2, r0, #1
 800070e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000712:	ea4f 0131 	mov.w	r1, r1, rrx
 8000716:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800071a:	bf1f      	itttt	ne
 800071c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000720:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000724:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000728:	4770      	bxne	lr
 800072a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800072e:	bf08      	it	eq
 8000730:	4770      	bxeq	lr
 8000732:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000736:	bf04      	itt	eq
 8000738:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800073c:	4770      	bxeq	lr
 800073e:	b530      	push	{r4, r5, lr}
 8000740:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000744:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800074c:	e71c      	b.n	8000588 <__adddf3+0x138>
 800074e:	bf00      	nop

08000750 <__aeabi_ul2d>:
 8000750:	ea50 0201 	orrs.w	r2, r0, r1
 8000754:	bf08      	it	eq
 8000756:	4770      	bxeq	lr
 8000758:	b530      	push	{r4, r5, lr}
 800075a:	f04f 0500 	mov.w	r5, #0
 800075e:	e00a      	b.n	8000776 <__aeabi_l2d+0x16>

08000760 <__aeabi_l2d>:
 8000760:	ea50 0201 	orrs.w	r2, r0, r1
 8000764:	bf08      	it	eq
 8000766:	4770      	bxeq	lr
 8000768:	b530      	push	{r4, r5, lr}
 800076a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800076e:	d502      	bpl.n	8000776 <__aeabi_l2d+0x16>
 8000770:	4240      	negs	r0, r0
 8000772:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000776:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800077a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000782:	f43f aed8 	beq.w	8000536 <__adddf3+0xe6>
 8000786:	f04f 0203 	mov.w	r2, #3
 800078a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800078e:	bf18      	it	ne
 8000790:	3203      	addne	r2, #3
 8000792:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000796:	bf18      	it	ne
 8000798:	3203      	addne	r2, #3
 800079a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800079e:	f1c2 0320 	rsb	r3, r2, #32
 80007a2:	fa00 fc03 	lsl.w	ip, r0, r3
 80007a6:	fa20 f002 	lsr.w	r0, r0, r2
 80007aa:	fa01 fe03 	lsl.w	lr, r1, r3
 80007ae:	ea40 000e 	orr.w	r0, r0, lr
 80007b2:	fa21 f102 	lsr.w	r1, r1, r2
 80007b6:	4414      	add	r4, r2
 80007b8:	e6bd      	b.n	8000536 <__adddf3+0xe6>
 80007ba:	bf00      	nop

080007bc <__aeabi_d2f>:
 80007bc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007c0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007c4:	bf24      	itt	cs
 80007c6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007ca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007ce:	d90d      	bls.n	80007ec <__aeabi_d2f+0x30>
 80007d0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007d4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007d8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007dc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007e0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007e4:	bf08      	it	eq
 80007e6:	f020 0001 	biceq.w	r0, r0, #1
 80007ea:	4770      	bx	lr
 80007ec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007f0:	d121      	bne.n	8000836 <__aeabi_d2f+0x7a>
 80007f2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007f6:	bfbc      	itt	lt
 80007f8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007fc:	4770      	bxlt	lr
 80007fe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000802:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000806:	f1c2 0218 	rsb	r2, r2, #24
 800080a:	f1c2 0c20 	rsb	ip, r2, #32
 800080e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000812:	fa20 f002 	lsr.w	r0, r0, r2
 8000816:	bf18      	it	ne
 8000818:	f040 0001 	orrne.w	r0, r0, #1
 800081c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000820:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000824:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000828:	ea40 000c 	orr.w	r0, r0, ip
 800082c:	fa23 f302 	lsr.w	r3, r3, r2
 8000830:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000834:	e7cc      	b.n	80007d0 <__aeabi_d2f+0x14>
 8000836:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800083a:	d107      	bne.n	800084c <__aeabi_d2f+0x90>
 800083c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000840:	bf1e      	ittt	ne
 8000842:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000846:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800084a:	4770      	bxne	lr
 800084c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000850:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000854:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop

0800085c <__aeabi_uldivmod>:
 800085c:	b953      	cbnz	r3, 8000874 <__aeabi_uldivmod+0x18>
 800085e:	b94a      	cbnz	r2, 8000874 <__aeabi_uldivmod+0x18>
 8000860:	2900      	cmp	r1, #0
 8000862:	bf08      	it	eq
 8000864:	2800      	cmpeq	r0, #0
 8000866:	bf1c      	itt	ne
 8000868:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800086c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000870:	f000 b974 	b.w	8000b5c <__aeabi_idiv0>
 8000874:	f1ad 0c08 	sub.w	ip, sp, #8
 8000878:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800087c:	f000 f806 	bl	800088c <__udivmoddi4>
 8000880:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000884:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000888:	b004      	add	sp, #16
 800088a:	4770      	bx	lr

0800088c <__udivmoddi4>:
 800088c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000890:	9d08      	ldr	r5, [sp, #32]
 8000892:	4604      	mov	r4, r0
 8000894:	468e      	mov	lr, r1
 8000896:	2b00      	cmp	r3, #0
 8000898:	d14d      	bne.n	8000936 <__udivmoddi4+0xaa>
 800089a:	428a      	cmp	r2, r1
 800089c:	4694      	mov	ip, r2
 800089e:	d969      	bls.n	8000974 <__udivmoddi4+0xe8>
 80008a0:	fab2 f282 	clz	r2, r2
 80008a4:	b152      	cbz	r2, 80008bc <__udivmoddi4+0x30>
 80008a6:	fa01 f302 	lsl.w	r3, r1, r2
 80008aa:	f1c2 0120 	rsb	r1, r2, #32
 80008ae:	fa20 f101 	lsr.w	r1, r0, r1
 80008b2:	fa0c fc02 	lsl.w	ip, ip, r2
 80008b6:	ea41 0e03 	orr.w	lr, r1, r3
 80008ba:	4094      	lsls	r4, r2
 80008bc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008c0:	0c21      	lsrs	r1, r4, #16
 80008c2:	fbbe f6f8 	udiv	r6, lr, r8
 80008c6:	fa1f f78c 	uxth.w	r7, ip
 80008ca:	fb08 e316 	mls	r3, r8, r6, lr
 80008ce:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80008d2:	fb06 f107 	mul.w	r1, r6, r7
 80008d6:	4299      	cmp	r1, r3
 80008d8:	d90a      	bls.n	80008f0 <__udivmoddi4+0x64>
 80008da:	eb1c 0303 	adds.w	r3, ip, r3
 80008de:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80008e2:	f080 811f 	bcs.w	8000b24 <__udivmoddi4+0x298>
 80008e6:	4299      	cmp	r1, r3
 80008e8:	f240 811c 	bls.w	8000b24 <__udivmoddi4+0x298>
 80008ec:	3e02      	subs	r6, #2
 80008ee:	4463      	add	r3, ip
 80008f0:	1a5b      	subs	r3, r3, r1
 80008f2:	b2a4      	uxth	r4, r4
 80008f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80008f8:	fb08 3310 	mls	r3, r8, r0, r3
 80008fc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000900:	fb00 f707 	mul.w	r7, r0, r7
 8000904:	42a7      	cmp	r7, r4
 8000906:	d90a      	bls.n	800091e <__udivmoddi4+0x92>
 8000908:	eb1c 0404 	adds.w	r4, ip, r4
 800090c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000910:	f080 810a 	bcs.w	8000b28 <__udivmoddi4+0x29c>
 8000914:	42a7      	cmp	r7, r4
 8000916:	f240 8107 	bls.w	8000b28 <__udivmoddi4+0x29c>
 800091a:	4464      	add	r4, ip
 800091c:	3802      	subs	r0, #2
 800091e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000922:	1be4      	subs	r4, r4, r7
 8000924:	2600      	movs	r6, #0
 8000926:	b11d      	cbz	r5, 8000930 <__udivmoddi4+0xa4>
 8000928:	40d4      	lsrs	r4, r2
 800092a:	2300      	movs	r3, #0
 800092c:	e9c5 4300 	strd	r4, r3, [r5]
 8000930:	4631      	mov	r1, r6
 8000932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000936:	428b      	cmp	r3, r1
 8000938:	d909      	bls.n	800094e <__udivmoddi4+0xc2>
 800093a:	2d00      	cmp	r5, #0
 800093c:	f000 80ef 	beq.w	8000b1e <__udivmoddi4+0x292>
 8000940:	2600      	movs	r6, #0
 8000942:	e9c5 0100 	strd	r0, r1, [r5]
 8000946:	4630      	mov	r0, r6
 8000948:	4631      	mov	r1, r6
 800094a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800094e:	fab3 f683 	clz	r6, r3
 8000952:	2e00      	cmp	r6, #0
 8000954:	d14a      	bne.n	80009ec <__udivmoddi4+0x160>
 8000956:	428b      	cmp	r3, r1
 8000958:	d302      	bcc.n	8000960 <__udivmoddi4+0xd4>
 800095a:	4282      	cmp	r2, r0
 800095c:	f200 80f9 	bhi.w	8000b52 <__udivmoddi4+0x2c6>
 8000960:	1a84      	subs	r4, r0, r2
 8000962:	eb61 0303 	sbc.w	r3, r1, r3
 8000966:	2001      	movs	r0, #1
 8000968:	469e      	mov	lr, r3
 800096a:	2d00      	cmp	r5, #0
 800096c:	d0e0      	beq.n	8000930 <__udivmoddi4+0xa4>
 800096e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000972:	e7dd      	b.n	8000930 <__udivmoddi4+0xa4>
 8000974:	b902      	cbnz	r2, 8000978 <__udivmoddi4+0xec>
 8000976:	deff      	udf	#255	; 0xff
 8000978:	fab2 f282 	clz	r2, r2
 800097c:	2a00      	cmp	r2, #0
 800097e:	f040 8092 	bne.w	8000aa6 <__udivmoddi4+0x21a>
 8000982:	eba1 010c 	sub.w	r1, r1, ip
 8000986:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800098a:	fa1f fe8c 	uxth.w	lr, ip
 800098e:	2601      	movs	r6, #1
 8000990:	0c20      	lsrs	r0, r4, #16
 8000992:	fbb1 f3f7 	udiv	r3, r1, r7
 8000996:	fb07 1113 	mls	r1, r7, r3, r1
 800099a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800099e:	fb0e f003 	mul.w	r0, lr, r3
 80009a2:	4288      	cmp	r0, r1
 80009a4:	d908      	bls.n	80009b8 <__udivmoddi4+0x12c>
 80009a6:	eb1c 0101 	adds.w	r1, ip, r1
 80009aa:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80009ae:	d202      	bcs.n	80009b6 <__udivmoddi4+0x12a>
 80009b0:	4288      	cmp	r0, r1
 80009b2:	f200 80cb 	bhi.w	8000b4c <__udivmoddi4+0x2c0>
 80009b6:	4643      	mov	r3, r8
 80009b8:	1a09      	subs	r1, r1, r0
 80009ba:	b2a4      	uxth	r4, r4
 80009bc:	fbb1 f0f7 	udiv	r0, r1, r7
 80009c0:	fb07 1110 	mls	r1, r7, r0, r1
 80009c4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80009c8:	fb0e fe00 	mul.w	lr, lr, r0
 80009cc:	45a6      	cmp	lr, r4
 80009ce:	d908      	bls.n	80009e2 <__udivmoddi4+0x156>
 80009d0:	eb1c 0404 	adds.w	r4, ip, r4
 80009d4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80009d8:	d202      	bcs.n	80009e0 <__udivmoddi4+0x154>
 80009da:	45a6      	cmp	lr, r4
 80009dc:	f200 80bb 	bhi.w	8000b56 <__udivmoddi4+0x2ca>
 80009e0:	4608      	mov	r0, r1
 80009e2:	eba4 040e 	sub.w	r4, r4, lr
 80009e6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80009ea:	e79c      	b.n	8000926 <__udivmoddi4+0x9a>
 80009ec:	f1c6 0720 	rsb	r7, r6, #32
 80009f0:	40b3      	lsls	r3, r6
 80009f2:	fa22 fc07 	lsr.w	ip, r2, r7
 80009f6:	ea4c 0c03 	orr.w	ip, ip, r3
 80009fa:	fa20 f407 	lsr.w	r4, r0, r7
 80009fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000a02:	431c      	orrs	r4, r3
 8000a04:	40f9      	lsrs	r1, r7
 8000a06:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a0a:	fa00 f306 	lsl.w	r3, r0, r6
 8000a0e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a12:	0c20      	lsrs	r0, r4, #16
 8000a14:	fa1f fe8c 	uxth.w	lr, ip
 8000a18:	fb09 1118 	mls	r1, r9, r8, r1
 8000a1c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a20:	fb08 f00e 	mul.w	r0, r8, lr
 8000a24:	4288      	cmp	r0, r1
 8000a26:	fa02 f206 	lsl.w	r2, r2, r6
 8000a2a:	d90b      	bls.n	8000a44 <__udivmoddi4+0x1b8>
 8000a2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a30:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000a34:	f080 8088 	bcs.w	8000b48 <__udivmoddi4+0x2bc>
 8000a38:	4288      	cmp	r0, r1
 8000a3a:	f240 8085 	bls.w	8000b48 <__udivmoddi4+0x2bc>
 8000a3e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a42:	4461      	add	r1, ip
 8000a44:	1a09      	subs	r1, r1, r0
 8000a46:	b2a4      	uxth	r4, r4
 8000a48:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a4c:	fb09 1110 	mls	r1, r9, r0, r1
 8000a50:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a54:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a58:	458e      	cmp	lr, r1
 8000a5a:	d908      	bls.n	8000a6e <__udivmoddi4+0x1e2>
 8000a5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a60:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000a64:	d26c      	bcs.n	8000b40 <__udivmoddi4+0x2b4>
 8000a66:	458e      	cmp	lr, r1
 8000a68:	d96a      	bls.n	8000b40 <__udivmoddi4+0x2b4>
 8000a6a:	3802      	subs	r0, #2
 8000a6c:	4461      	add	r1, ip
 8000a6e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a72:	fba0 9402 	umull	r9, r4, r0, r2
 8000a76:	eba1 010e 	sub.w	r1, r1, lr
 8000a7a:	42a1      	cmp	r1, r4
 8000a7c:	46c8      	mov	r8, r9
 8000a7e:	46a6      	mov	lr, r4
 8000a80:	d356      	bcc.n	8000b30 <__udivmoddi4+0x2a4>
 8000a82:	d053      	beq.n	8000b2c <__udivmoddi4+0x2a0>
 8000a84:	b15d      	cbz	r5, 8000a9e <__udivmoddi4+0x212>
 8000a86:	ebb3 0208 	subs.w	r2, r3, r8
 8000a8a:	eb61 010e 	sbc.w	r1, r1, lr
 8000a8e:	fa01 f707 	lsl.w	r7, r1, r7
 8000a92:	fa22 f306 	lsr.w	r3, r2, r6
 8000a96:	40f1      	lsrs	r1, r6
 8000a98:	431f      	orrs	r7, r3
 8000a9a:	e9c5 7100 	strd	r7, r1, [r5]
 8000a9e:	2600      	movs	r6, #0
 8000aa0:	4631      	mov	r1, r6
 8000aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aa6:	f1c2 0320 	rsb	r3, r2, #32
 8000aaa:	40d8      	lsrs	r0, r3
 8000aac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ab0:	fa21 f303 	lsr.w	r3, r1, r3
 8000ab4:	4091      	lsls	r1, r2
 8000ab6:	4301      	orrs	r1, r0
 8000ab8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000abc:	fa1f fe8c 	uxth.w	lr, ip
 8000ac0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ac4:	fb07 3610 	mls	r6, r7, r0, r3
 8000ac8:	0c0b      	lsrs	r3, r1, #16
 8000aca:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000ace:	fb00 f60e 	mul.w	r6, r0, lr
 8000ad2:	429e      	cmp	r6, r3
 8000ad4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ad8:	d908      	bls.n	8000aec <__udivmoddi4+0x260>
 8000ada:	eb1c 0303 	adds.w	r3, ip, r3
 8000ade:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ae2:	d22f      	bcs.n	8000b44 <__udivmoddi4+0x2b8>
 8000ae4:	429e      	cmp	r6, r3
 8000ae6:	d92d      	bls.n	8000b44 <__udivmoddi4+0x2b8>
 8000ae8:	3802      	subs	r0, #2
 8000aea:	4463      	add	r3, ip
 8000aec:	1b9b      	subs	r3, r3, r6
 8000aee:	b289      	uxth	r1, r1
 8000af0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000af4:	fb07 3316 	mls	r3, r7, r6, r3
 8000af8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000afc:	fb06 f30e 	mul.w	r3, r6, lr
 8000b00:	428b      	cmp	r3, r1
 8000b02:	d908      	bls.n	8000b16 <__udivmoddi4+0x28a>
 8000b04:	eb1c 0101 	adds.w	r1, ip, r1
 8000b08:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000b0c:	d216      	bcs.n	8000b3c <__udivmoddi4+0x2b0>
 8000b0e:	428b      	cmp	r3, r1
 8000b10:	d914      	bls.n	8000b3c <__udivmoddi4+0x2b0>
 8000b12:	3e02      	subs	r6, #2
 8000b14:	4461      	add	r1, ip
 8000b16:	1ac9      	subs	r1, r1, r3
 8000b18:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b1c:	e738      	b.n	8000990 <__udivmoddi4+0x104>
 8000b1e:	462e      	mov	r6, r5
 8000b20:	4628      	mov	r0, r5
 8000b22:	e705      	b.n	8000930 <__udivmoddi4+0xa4>
 8000b24:	4606      	mov	r6, r0
 8000b26:	e6e3      	b.n	80008f0 <__udivmoddi4+0x64>
 8000b28:	4618      	mov	r0, r3
 8000b2a:	e6f8      	b.n	800091e <__udivmoddi4+0x92>
 8000b2c:	454b      	cmp	r3, r9
 8000b2e:	d2a9      	bcs.n	8000a84 <__udivmoddi4+0x1f8>
 8000b30:	ebb9 0802 	subs.w	r8, r9, r2
 8000b34:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b38:	3801      	subs	r0, #1
 8000b3a:	e7a3      	b.n	8000a84 <__udivmoddi4+0x1f8>
 8000b3c:	4646      	mov	r6, r8
 8000b3e:	e7ea      	b.n	8000b16 <__udivmoddi4+0x28a>
 8000b40:	4620      	mov	r0, r4
 8000b42:	e794      	b.n	8000a6e <__udivmoddi4+0x1e2>
 8000b44:	4640      	mov	r0, r8
 8000b46:	e7d1      	b.n	8000aec <__udivmoddi4+0x260>
 8000b48:	46d0      	mov	r8, sl
 8000b4a:	e77b      	b.n	8000a44 <__udivmoddi4+0x1b8>
 8000b4c:	3b02      	subs	r3, #2
 8000b4e:	4461      	add	r1, ip
 8000b50:	e732      	b.n	80009b8 <__udivmoddi4+0x12c>
 8000b52:	4630      	mov	r0, r6
 8000b54:	e709      	b.n	800096a <__udivmoddi4+0xde>
 8000b56:	4464      	add	r4, ip
 8000b58:	3802      	subs	r0, #2
 8000b5a:	e742      	b.n	80009e2 <__udivmoddi4+0x156>

08000b5c <__aeabi_idiv0>:
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8000b66:	463b      	mov	r3, r7
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000b6e:	4b14      	ldr	r3, [pc, #80]	; (8000bc0 <MX_DAC_Init+0x60>)
 8000b70:	4a14      	ldr	r2, [pc, #80]	; (8000bc4 <MX_DAC_Init+0x64>)
 8000b72:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000b74:	4812      	ldr	r0, [pc, #72]	; (8000bc0 <MX_DAC_Init+0x60>)
 8000b76:	f002 f8f6 	bl	8002d66 <HAL_DAC_Init>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000b80:	f001 f9a2 	bl	8001ec8 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000b84:	2300      	movs	r3, #0
 8000b86:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000b8c:	463b      	mov	r3, r7
 8000b8e:	2200      	movs	r2, #0
 8000b90:	4619      	mov	r1, r3
 8000b92:	480b      	ldr	r0, [pc, #44]	; (8000bc0 <MX_DAC_Init+0x60>)
 8000b94:	f002 f909 	bl	8002daa <HAL_DAC_ConfigChannel>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000b9e:	f001 f993 	bl	8001ec8 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000ba2:	463b      	mov	r3, r7
 8000ba4:	2210      	movs	r2, #16
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4805      	ldr	r0, [pc, #20]	; (8000bc0 <MX_DAC_Init+0x60>)
 8000baa:	f002 f8fe 	bl	8002daa <HAL_DAC_ConfigChannel>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8000bb4:	f001 f988 	bl	8001ec8 <Error_Handler>
  }

}
 8000bb8:	bf00      	nop
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	2000002c 	.word	0x2000002c
 8000bc4:	40007400 	.word	0x40007400

08000bc8 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b08a      	sub	sp, #40	; 0x28
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]
 8000bde:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a17      	ldr	r2, [pc, #92]	; (8000c44 <HAL_DAC_MspInit+0x7c>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d127      	bne.n	8000c3a <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	613b      	str	r3, [r7, #16]
 8000bee:	4b16      	ldr	r3, [pc, #88]	; (8000c48 <HAL_DAC_MspInit+0x80>)
 8000bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf2:	4a15      	ldr	r2, [pc, #84]	; (8000c48 <HAL_DAC_MspInit+0x80>)
 8000bf4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000bf8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bfa:	4b13      	ldr	r3, [pc, #76]	; (8000c48 <HAL_DAC_MspInit+0x80>)
 8000bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c02:	613b      	str	r3, [r7, #16]
 8000c04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	60fb      	str	r3, [r7, #12]
 8000c0a:	4b0f      	ldr	r3, [pc, #60]	; (8000c48 <HAL_DAC_MspInit+0x80>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	4a0e      	ldr	r2, [pc, #56]	; (8000c48 <HAL_DAC_MspInit+0x80>)
 8000c10:	f043 0301 	orr.w	r3, r3, #1
 8000c14:	6313      	str	r3, [r2, #48]	; 0x30
 8000c16:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <HAL_DAC_MspInit+0x80>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	f003 0301 	and.w	r3, r3, #1
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000c22:	2330      	movs	r3, #48	; 0x30
 8000c24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c26:	2303      	movs	r3, #3
 8000c28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2e:	f107 0314 	add.w	r3, r7, #20
 8000c32:	4619      	mov	r1, r3
 8000c34:	4805      	ldr	r0, [pc, #20]	; (8000c4c <HAL_DAC_MspInit+0x84>)
 8000c36:	f002 f927 	bl	8002e88 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8000c3a:	bf00      	nop
 8000c3c:	3728      	adds	r7, #40	; 0x28
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40007400 	.word	0x40007400
 8000c48:	40023800 	.word	0x40023800
 8000c4c:	40020000 	.word	0x40020000

08000c50 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08c      	sub	sp, #48	; 0x30
 8000c54:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c56:	f107 031c 	add.w	r3, r7, #28
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
 8000c5e:	605a      	str	r2, [r3, #4]
 8000c60:	609a      	str	r2, [r3, #8]
 8000c62:	60da      	str	r2, [r3, #12]
 8000c64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	61bb      	str	r3, [r7, #24]
 8000c6a:	4b45      	ldr	r3, [pc, #276]	; (8000d80 <MX_GPIO_Init+0x130>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	4a44      	ldr	r2, [pc, #272]	; (8000d80 <MX_GPIO_Init+0x130>)
 8000c70:	f043 0320 	orr.w	r3, r3, #32
 8000c74:	6313      	str	r3, [r2, #48]	; 0x30
 8000c76:	4b42      	ldr	r3, [pc, #264]	; (8000d80 <MX_GPIO_Init+0x130>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	f003 0320 	and.w	r3, r3, #32
 8000c7e:	61bb      	str	r3, [r7, #24]
 8000c80:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	617b      	str	r3, [r7, #20]
 8000c86:	4b3e      	ldr	r3, [pc, #248]	; (8000d80 <MX_GPIO_Init+0x130>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	4a3d      	ldr	r2, [pc, #244]	; (8000d80 <MX_GPIO_Init+0x130>)
 8000c8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c90:	6313      	str	r3, [r2, #48]	; 0x30
 8000c92:	4b3b      	ldr	r3, [pc, #236]	; (8000d80 <MX_GPIO_Init+0x130>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c9a:	617b      	str	r3, [r7, #20]
 8000c9c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	613b      	str	r3, [r7, #16]
 8000ca2:	4b37      	ldr	r3, [pc, #220]	; (8000d80 <MX_GPIO_Init+0x130>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4a36      	ldr	r2, [pc, #216]	; (8000d80 <MX_GPIO_Init+0x130>)
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4b34      	ldr	r3, [pc, #208]	; (8000d80 <MX_GPIO_Init+0x130>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	613b      	str	r3, [r7, #16]
 8000cb8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60fb      	str	r3, [r7, #12]
 8000cbe:	4b30      	ldr	r3, [pc, #192]	; (8000d80 <MX_GPIO_Init+0x130>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	4a2f      	ldr	r2, [pc, #188]	; (8000d80 <MX_GPIO_Init+0x130>)
 8000cc4:	f043 0308 	orr.w	r3, r3, #8
 8000cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cca:	4b2d      	ldr	r3, [pc, #180]	; (8000d80 <MX_GPIO_Init+0x130>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	f003 0308 	and.w	r3, r3, #8
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60bb      	str	r3, [r7, #8]
 8000cda:	4b29      	ldr	r3, [pc, #164]	; (8000d80 <MX_GPIO_Init+0x130>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	4a28      	ldr	r2, [pc, #160]	; (8000d80 <MX_GPIO_Init+0x130>)
 8000ce0:	f043 0304 	orr.w	r3, r3, #4
 8000ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce6:	4b26      	ldr	r3, [pc, #152]	; (8000d80 <MX_GPIO_Init+0x130>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	f003 0304 	and.w	r3, r3, #4
 8000cee:	60bb      	str	r3, [r7, #8]
 8000cf0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	607b      	str	r3, [r7, #4]
 8000cf6:	4b22      	ldr	r3, [pc, #136]	; (8000d80 <MX_GPIO_Init+0x130>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	4a21      	ldr	r2, [pc, #132]	; (8000d80 <MX_GPIO_Init+0x130>)
 8000cfc:	f043 0302 	orr.w	r3, r3, #2
 8000d00:	6313      	str	r3, [r2, #48]	; 0x30
 8000d02:	4b1f      	ldr	r3, [pc, #124]	; (8000d80 <MX_GPIO_Init+0x130>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	f003 0302 	and.w	r3, r3, #2
 8000d0a:	607b      	str	r3, [r7, #4]
 8000d0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_in4_Pin|OUT_in3_Pin|OUT_in2_Pin, GPIO_PIN_RESET);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8000d14:	481b      	ldr	r0, [pc, #108]	; (8000d84 <MX_GPIO_Init+0x134>)
 8000d16:	f002 fa7b 	bl	8003210 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, GPIO_PIN_RESET);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	481a      	ldr	r0, [pc, #104]	; (8000d88 <MX_GPIO_Init+0x138>)
 8000d20:	f002 fa76 	bl	8003210 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = OUT_in4_Pin|OUT_in3_Pin|OUT_in2_Pin;
 8000d24:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000d28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d32:	2300      	movs	r3, #0
 8000d34:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d36:	f107 031c 	add.w	r3, r7, #28
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4811      	ldr	r0, [pc, #68]	; (8000d84 <MX_GPIO_Init+0x134>)
 8000d3e:	f002 f8a3 	bl	8002e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OUT_in1_Pin;
 8000d42:	2301      	movs	r3, #1
 8000d44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d46:	2301      	movs	r3, #1
 8000d48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OUT_in1_GPIO_Port, &GPIO_InitStruct);
 8000d52:	f107 031c 	add.w	r3, r7, #28
 8000d56:	4619      	mov	r1, r3
 8000d58:	480b      	ldr	r0, [pc, #44]	; (8000d88 <MX_GPIO_Init+0x138>)
 8000d5a:	f002 f895 	bl	8002e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = IN_sensorL_Pin|IN_sensorR_Pin;
 8000d5e:	230a      	movs	r3, #10
 8000d60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d62:	2300      	movs	r3, #0
 8000d64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d66:	2301      	movs	r3, #1
 8000d68:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d6a:	f107 031c 	add.w	r3, r7, #28
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4805      	ldr	r0, [pc, #20]	; (8000d88 <MX_GPIO_Init+0x138>)
 8000d72:	f002 f889 	bl	8002e88 <HAL_GPIO_Init>

}
 8000d76:	bf00      	nop
 8000d78:	3730      	adds	r7, #48	; 0x30
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40023800 	.word	0x40023800
 8000d84:	40020800 	.word	0x40020800
 8000d88:	40020c00 	.word	0x40020c00

08000d8c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000d90:	4b1b      	ldr	r3, [pc, #108]	; (8000e00 <MX_I2C1_Init+0x74>)
 8000d92:	4a1c      	ldr	r2, [pc, #112]	; (8000e04 <MX_I2C1_Init+0x78>)
 8000d94:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000d96:	4b1a      	ldr	r3, [pc, #104]	; (8000e00 <MX_I2C1_Init+0x74>)
 8000d98:	4a1b      	ldr	r2, [pc, #108]	; (8000e08 <MX_I2C1_Init+0x7c>)
 8000d9a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d9c:	4b18      	ldr	r3, [pc, #96]	; (8000e00 <MX_I2C1_Init+0x74>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000da2:	4b17      	ldr	r3, [pc, #92]	; (8000e00 <MX_I2C1_Init+0x74>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000da8:	4b15      	ldr	r3, [pc, #84]	; (8000e00 <MX_I2C1_Init+0x74>)
 8000daa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000dae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000db0:	4b13      	ldr	r3, [pc, #76]	; (8000e00 <MX_I2C1_Init+0x74>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000db6:	4b12      	ldr	r3, [pc, #72]	; (8000e00 <MX_I2C1_Init+0x74>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dbc:	4b10      	ldr	r3, [pc, #64]	; (8000e00 <MX_I2C1_Init+0x74>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dc2:	4b0f      	ldr	r3, [pc, #60]	; (8000e00 <MX_I2C1_Init+0x74>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000dc8:	480d      	ldr	r0, [pc, #52]	; (8000e00 <MX_I2C1_Init+0x74>)
 8000dca:	f002 fa3b 	bl	8003244 <HAL_I2C_Init>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000dd4:	f001 f878 	bl	8001ec8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4809      	ldr	r0, [pc, #36]	; (8000e00 <MX_I2C1_Init+0x74>)
 8000ddc:	f003 f9f1 	bl	80041c2 <HAL_I2CEx_ConfigAnalogFilter>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000de6:	f001 f86f 	bl	8001ec8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000dea:	2100      	movs	r1, #0
 8000dec:	4804      	ldr	r0, [pc, #16]	; (8000e00 <MX_I2C1_Init+0x74>)
 8000dee:	f003 fa24 	bl	800423a <HAL_I2CEx_ConfigDigitalFilter>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000df8:	f001 f866 	bl	8001ec8 <Error_Handler>
  }

}
 8000dfc:	bf00      	nop
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	20000040 	.word	0x20000040
 8000e04:	40005400 	.word	0x40005400
 8000e08:	00061a80 	.word	0x00061a80

08000e0c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b08a      	sub	sp, #40	; 0x28
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e14:	f107 0314 	add.w	r3, r7, #20
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a19      	ldr	r2, [pc, #100]	; (8000e90 <HAL_I2C_MspInit+0x84>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d12b      	bne.n	8000e86 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	613b      	str	r3, [r7, #16]
 8000e32:	4b18      	ldr	r3, [pc, #96]	; (8000e94 <HAL_I2C_MspInit+0x88>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	4a17      	ldr	r2, [pc, #92]	; (8000e94 <HAL_I2C_MspInit+0x88>)
 8000e38:	f043 0302 	orr.w	r3, r3, #2
 8000e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3e:	4b15      	ldr	r3, [pc, #84]	; (8000e94 <HAL_I2C_MspInit+0x88>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	f003 0302 	and.w	r3, r3, #2
 8000e46:	613b      	str	r3, [r7, #16]
 8000e48:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e4a:	23c0      	movs	r3, #192	; 0xc0
 8000e4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e4e:	2312      	movs	r3, #18
 8000e50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e52:	2301      	movs	r3, #1
 8000e54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e56:	2303      	movs	r3, #3
 8000e58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e5a:	2304      	movs	r3, #4
 8000e5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e5e:	f107 0314 	add.w	r3, r7, #20
 8000e62:	4619      	mov	r1, r3
 8000e64:	480c      	ldr	r0, [pc, #48]	; (8000e98 <HAL_I2C_MspInit+0x8c>)
 8000e66:	f002 f80f 	bl	8002e88 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60fb      	str	r3, [r7, #12]
 8000e6e:	4b09      	ldr	r3, [pc, #36]	; (8000e94 <HAL_I2C_MspInit+0x88>)
 8000e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e72:	4a08      	ldr	r2, [pc, #32]	; (8000e94 <HAL_I2C_MspInit+0x88>)
 8000e74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e78:	6413      	str	r3, [r2, #64]	; 0x40
 8000e7a:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <HAL_I2C_MspInit+0x88>)
 8000e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000e86:	bf00      	nop
 8000e88:	3728      	adds	r7, #40	; 0x28
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40005400 	.word	0x40005400
 8000e94:	40023800 	.word	0x40023800
 8000e98:	40020400 	.word	0x40020400

08000e9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ea0:	f001 fdba 	bl	8002a18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ea4:	f000 f8da 	bl	800105c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea8:	f7ff fed2 	bl	8000c50 <MX_GPIO_Init>
  MX_DAC_Init();
 8000eac:	f7ff fe58 	bl	8000b60 <MX_DAC_Init>
  MX_TIM2_Init();
 8000eb0:	f001 f9b4 	bl	800221c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000eb4:	f001 fa04 	bl	80022c0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000eb8:	f001 fa56 	bl	8002368 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000ebc:	f001 fad4 	bl	8002468 <MX_TIM5_Init>
  MX_UART7_Init();
 8000ec0:	f001 fd06 	bl	80028d0 <MX_UART7_Init>
  MX_TIM7_Init();
 8000ec4:	f001 fb7a 	bl	80025bc <MX_TIM7_Init>
  MX_I2C1_Init();
 8000ec8:	f7ff ff60 	bl	8000d8c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim7); //desborda cada 10 ms.
 8000ecc:	4853      	ldr	r0, [pc, #332]	; (800101c <main+0x180>)
 8000ece:	f003 ff20 	bl	8004d12 <HAL_TIM_Base_Start_IT>

  HAL_TIM_Base_Start(&htim2); //encoder R.
 8000ed2:	4853      	ldr	r0, [pc, #332]	; (8001020 <main+0x184>)
 8000ed4:	f003 fef9 	bl	8004cca <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3); //encoder L.
 8000ed8:	4852      	ldr	r0, [pc, #328]	; (8001024 <main+0x188>)
 8000eda:	f003 fef6 	bl	8004cca <HAL_TIM_Base_Start>

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1); //rueda izquierda.
 8000ede:	2100      	movs	r1, #0
 8000ee0:	4851      	ldr	r0, [pc, #324]	; (8001028 <main+0x18c>)
 8000ee2:	f003 ff6f 	bl	8004dc4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2); //rueda derecha.
 8000ee6:	2104      	movs	r1, #4
 8000ee8:	484f      	ldr	r0, [pc, #316]	; (8001028 <main+0x18c>)
 8000eea:	f003 ff6b 	bl	8004dc4 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start(&htim5); //control del SR-04.
 8000eee:	484f      	ldr	r0, [pc, #316]	; (800102c <main+0x190>)
 8000ef0:	f003 feeb 	bl	8004cca <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1); //para el pulso del trigger.
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	484d      	ldr	r0, [pc, #308]	; (800102c <main+0x190>)
 8000ef8:	f003 ff64 	bl	8004dc4 <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_3); //para capturar el eco (flanco ascendente).
 8000efc:	2108      	movs	r1, #8
 8000efe:	484b      	ldr	r0, [pc, #300]	; (800102c <main+0x190>)
 8000f00:	f003 ffd4 	bl	8004eac <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_4); //para capturar el eco (flanco descendente).
 8000f04:	210c      	movs	r1, #12
 8000f06:	4849      	ldr	r0, [pc, #292]	; (800102c <main+0x190>)
 8000f08:	f003 ffd0 	bl	8004eac <HAL_TIM_IC_Start_IT>

  mpu9265_Init(&hi2c1);
 8000f0c:	4848      	ldr	r0, [pc, #288]	; (8001030 <main+0x194>)
 8000f0e:	f000 ffe3 	bl	8001ed8 <mpu9265_Init>


  HAL_UART_Receive(&huart7, rxUart, 4, 500);
 8000f12:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000f16:	2204      	movs	r2, #4
 8000f18:	4946      	ldr	r1, [pc, #280]	; (8001034 <main+0x198>)
 8000f1a:	4847      	ldr	r0, [pc, #284]	; (8001038 <main+0x19c>)
 8000f1c:	f005 f891 	bl	8006042 <HAL_UART_Receive>

  if (rxUart[0] == HOLA){
 8000f20:	4b44      	ldr	r3, [pc, #272]	; (8001034 <main+0x198>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d11d      	bne.n	8000f64 <main+0xc8>

	  if (!rxUart[3]){
 8000f28:	4b42      	ldr	r3, [pc, #264]	; (8001034 <main+0x198>)
 8000f2a:	78db      	ldrb	r3, [r3, #3]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d10b      	bne.n	8000f48 <main+0xac>
		  txUart[0] = CMD_ERROR;
 8000f30:	4b42      	ldr	r3, [pc, #264]	; (800103c <main+0x1a0>)
 8000f32:	2204      	movs	r2, #4
 8000f34:	701a      	strb	r2, [r3, #0]
		  txUart[3] = '\0';
 8000f36:	4b41      	ldr	r3, [pc, #260]	; (800103c <main+0x1a0>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	70da      	strb	r2, [r3, #3]
		  HAL_UART_Transmit_IT(&huart7, txUart, 4);
 8000f3c:	2204      	movs	r2, #4
 8000f3e:	493f      	ldr	r1, [pc, #252]	; (800103c <main+0x1a0>)
 8000f40:	483d      	ldr	r0, [pc, #244]	; (8001038 <main+0x19c>)
 8000f42:	f005 f924 	bl	800618e <HAL_UART_Transmit_IT>
 8000f46:	e00d      	b.n	8000f64 <main+0xc8>
	  } else {
		  esp01Presente = 1;
 8000f48:	4b3d      	ldr	r3, [pc, #244]	; (8001040 <main+0x1a4>)
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	701a      	strb	r2, [r3, #0]
		  txUart[0] = HOLA;
 8000f4e:	4b3b      	ldr	r3, [pc, #236]	; (800103c <main+0x1a0>)
 8000f50:	2201      	movs	r2, #1
 8000f52:	701a      	strb	r2, [r3, #0]
		  txUart[3] = '\0';
 8000f54:	4b39      	ldr	r3, [pc, #228]	; (800103c <main+0x1a0>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	70da      	strb	r2, [r3, #3]
		  HAL_UART_Transmit_IT(&huart7, txUart, 4);
 8000f5a:	2204      	movs	r2, #4
 8000f5c:	4937      	ldr	r1, [pc, #220]	; (800103c <main+0x1a0>)
 8000f5e:	4836      	ldr	r0, [pc, #216]	; (8001038 <main+0x19c>)
 8000f60:	f005 f915 	bl	800618e <HAL_UART_Transmit_IT>
	  }

  }

  HAL_UART_Receive_IT(&huart7, rxUart, 4);
 8000f64:	2204      	movs	r2, #4
 8000f66:	4933      	ldr	r1, [pc, #204]	; (8001034 <main+0x198>)
 8000f68:	4833      	ldr	r0, [pc, #204]	; (8001038 <main+0x19c>)
 8000f6a:	f005 f955 	bl	8006218 <HAL_UART_Receive_IT>

  if (!esp01Presente) {
 8000f6e:	4b34      	ldr	r3, [pc, #208]	; (8001040 <main+0x1a4>)
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d103      	bne.n	8000f7e <main+0xe2>
	  modoFuncionamiento = AUTOMATICO;
 8000f76:	4b33      	ldr	r3, [pc, #204]	; (8001044 <main+0x1a8>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	701a      	strb	r2, [r3, #0]
 8000f7c:	e002      	b.n	8000f84 <main+0xe8>
  }else{
	  modoFuncionamiento = MANUAL;
 8000f7e:	4b31      	ldr	r3, [pc, #196]	; (8001044 <main+0x1a8>)
 8000f80:	2201      	movs	r2, #1
 8000f82:	701a      	strb	r2, [r3, #0]
		  }
	  }
	  last_button = read_button;
	  */

	  if (flag_cmd != 0){
 8000f84:	4b30      	ldr	r3, [pc, #192]	; (8001048 <main+0x1ac>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d004      	beq.n	8000f96 <main+0xfa>
		  check_rxUart();
 8000f8c:	f000 fdd0 	bl	8001b30 <check_rxUart>
		  flag_cmd = 0;
 8000f90:	4b2d      	ldr	r3, [pc, #180]	; (8001048 <main+0x1ac>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	701a      	strb	r2, [r3, #0]
	  }

	  SR_04();
 8000f96:	f000 f92b 	bl	80011f0 <SR_04>
	  sensores();
 8000f9a:	f000 f96f 	bl	800127c <sensores>
	  modo_funcionamiento();
 8000f9e:	f000 ff7d 	bl	8001e9c <modo_funcionamiento>

	  if (desbordeTIM7 > 21){
 8000fa2:	4b2a      	ldr	r3, [pc, #168]	; (800104c <main+0x1b0>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	2b15      	cmp	r3, #21
 8000fa8:	d90a      	bls.n	8000fc0 <main+0x124>
		  flag_encoders = 1;
 8000faa:	4b29      	ldr	r3, [pc, #164]	; (8001050 <main+0x1b4>)
 8000fac:	2201      	movs	r2, #1
 8000fae:	701a      	strb	r2, [r3, #0]
		  desbordeTIM7 = 0;
 8000fb0:	4b26      	ldr	r3, [pc, #152]	; (800104c <main+0x1b0>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	701a      	strb	r2, [r3, #0]

		  TRIG_SR04;
 8000fb6:	4b1d      	ldr	r3, [pc, #116]	; (800102c <main+0x190>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f06f 020a 	mvn.w	r2, #10
 8000fbe:	625a      	str	r2, [r3, #36]	; 0x24
	  }

	  if (desbordeTIM7 != 0){
 8000fc0:	4b22      	ldr	r3, [pc, #136]	; (800104c <main+0x1b0>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d0dd      	beq.n	8000f84 <main+0xe8>
		  periodo_Encoder += desbordeTIM7;
 8000fc8:	4b22      	ldr	r3, [pc, #136]	; (8001054 <main+0x1b8>)
 8000fca:	781a      	ldrb	r2, [r3, #0]
 8000fcc:	4b1f      	ldr	r3, [pc, #124]	; (800104c <main+0x1b0>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	b2da      	uxtb	r2, r3
 8000fd4:	4b1f      	ldr	r3, [pc, #124]	; (8001054 <main+0x1b8>)
 8000fd6:	701a      	strb	r2, [r3, #0]
		  periodo_SR04 += desbordeTIM7;
 8000fd8:	4b1f      	ldr	r3, [pc, #124]	; (8001058 <main+0x1bc>)
 8000fda:	781a      	ldrb	r2, [r3, #0]
 8000fdc:	4b1b      	ldr	r3, [pc, #108]	; (800104c <main+0x1b0>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	b2da      	uxtb	r2, r3
 8000fe4:	4b1c      	ldr	r3, [pc, #112]	; (8001058 <main+0x1bc>)
 8000fe6:	701a      	strb	r2, [r3, #0]
		  desbordeTIM7 = 0;
 8000fe8:	4b18      	ldr	r3, [pc, #96]	; (800104c <main+0x1b0>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	701a      	strb	r2, [r3, #0]
		  if (periodo_Encoder > 21){ // en 10 * ms
 8000fee:	4b19      	ldr	r3, [pc, #100]	; (8001054 <main+0x1b8>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	2b15      	cmp	r3, #21
 8000ff4:	d905      	bls.n	8001002 <main+0x166>
			  flag_encoders = 1;
 8000ff6:	4b16      	ldr	r3, [pc, #88]	; (8001050 <main+0x1b4>)
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	701a      	strb	r2, [r3, #0]
			  periodo_Encoder = 0;
 8000ffc:	4b15      	ldr	r3, [pc, #84]	; (8001054 <main+0x1b8>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	701a      	strb	r2, [r3, #0]
		  }
		  if (periodo_SR04 > 21){
 8001002:	4b15      	ldr	r3, [pc, #84]	; (8001058 <main+0x1bc>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	2b15      	cmp	r3, #21
 8001008:	d9bc      	bls.n	8000f84 <main+0xe8>
			  TRIG_SR04;
 800100a:	4b08      	ldr	r3, [pc, #32]	; (800102c <main+0x190>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f06f 020a 	mvn.w	r2, #10
 8001012:	625a      	str	r2, [r3, #36]	; 0x24
			  periodo_SR04 = 0;
 8001014:	4b10      	ldr	r3, [pc, #64]	; (8001058 <main+0x1bc>)
 8001016:	2200      	movs	r2, #0
 8001018:	701a      	strb	r2, [r3, #0]
	  if (flag_cmd != 0){
 800101a:	e7b3      	b.n	8000f84 <main+0xe8>
 800101c:	200001f8 	.word	0x200001f8
 8001020:	200000f8 	.word	0x200000f8
 8001024:	20000138 	.word	0x20000138
 8001028:	20000178 	.word	0x20000178
 800102c:	200001b8 	.word	0x200001b8
 8001030:	20000040 	.word	0x20000040
 8001034:	20000094 	.word	0x20000094
 8001038:	20000238 	.word	0x20000238
 800103c:	2000009c 	.word	0x2000009c
 8001040:	200000a0 	.word	0x200000a0
 8001044:	20000000 	.word	0x20000000
 8001048:	20000098 	.word	0x20000098
 800104c:	200000d2 	.word	0x200000d2
 8001050:	200000ea 	.word	0x200000ea
 8001054:	200000d3 	.word	0x200000d3
 8001058:	200000d4 	.word	0x200000d4

0800105c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b094      	sub	sp, #80	; 0x50
 8001060:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001062:	f107 0320 	add.w	r3, r7, #32
 8001066:	2230      	movs	r2, #48	; 0x30
 8001068:	2100      	movs	r1, #0
 800106a:	4618      	mov	r0, r3
 800106c:	f006 f89c 	bl	80071a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001070:	f107 030c 	add.w	r3, r7, #12
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
 800107e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001080:	2300      	movs	r3, #0
 8001082:	60bb      	str	r3, [r7, #8]
 8001084:	4b2c      	ldr	r3, [pc, #176]	; (8001138 <SystemClock_Config+0xdc>)
 8001086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001088:	4a2b      	ldr	r2, [pc, #172]	; (8001138 <SystemClock_Config+0xdc>)
 800108a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800108e:	6413      	str	r3, [r2, #64]	; 0x40
 8001090:	4b29      	ldr	r3, [pc, #164]	; (8001138 <SystemClock_Config+0xdc>)
 8001092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001094:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001098:	60bb      	str	r3, [r7, #8]
 800109a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800109c:	2300      	movs	r3, #0
 800109e:	607b      	str	r3, [r7, #4]
 80010a0:	4b26      	ldr	r3, [pc, #152]	; (800113c <SystemClock_Config+0xe0>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a25      	ldr	r2, [pc, #148]	; (800113c <SystemClock_Config+0xe0>)
 80010a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010aa:	6013      	str	r3, [r2, #0]
 80010ac:	4b23      	ldr	r3, [pc, #140]	; (800113c <SystemClock_Config+0xe0>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010b4:	607b      	str	r3, [r7, #4]
 80010b6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80010b8:	2309      	movs	r3, #9
 80010ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80010c2:	2301      	movs	r3, #1
 80010c4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010c6:	2302      	movs	r3, #2
 80010c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010d0:	2304      	movs	r3, #4
 80010d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80010d4:	23b4      	movs	r3, #180	; 0xb4
 80010d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010d8:	2302      	movs	r3, #2
 80010da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010dc:	2304      	movs	r3, #4
 80010de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010e0:	f107 0320 	add.w	r3, r7, #32
 80010e4:	4618      	mov	r0, r3
 80010e6:	f003 f937 	bl	8004358 <HAL_RCC_OscConfig>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80010f0:	f000 feea 	bl	8001ec8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80010f4:	f003 f8e0 	bl	80042b8 <HAL_PWREx_EnableOverDrive>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80010fe:	f000 fee3 	bl	8001ec8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001102:	230f      	movs	r3, #15
 8001104:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001106:	2302      	movs	r3, #2
 8001108:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800110a:	2300      	movs	r3, #0
 800110c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800110e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001112:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001114:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001118:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800111a:	f107 030c 	add.w	r3, r7, #12
 800111e:	2105      	movs	r1, #5
 8001120:	4618      	mov	r0, r3
 8001122:	f003 fb87 	bl	8004834 <HAL_RCC_ClockConfig>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800112c:	f000 fecc 	bl	8001ec8 <Error_Handler>
  }
}
 8001130:	bf00      	nop
 8001132:	3750      	adds	r7, #80	; 0x50
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	40023800 	.word	0x40023800
 800113c:	40007000 	.word	0x40007000

08001140 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
	if (htim->Instance==TIM7){
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a07      	ldr	r2, [pc, #28]	; (800116c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d105      	bne.n	800115e <HAL_TIM_PeriodElapsedCallback+0x1e>
		desbordeTIM7++;
 8001152:	4b07      	ldr	r3, [pc, #28]	; (8001170 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	3301      	adds	r3, #1
 8001158:	b2da      	uxtb	r2, r3
 800115a:	4b05      	ldr	r3, [pc, #20]	; (8001170 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800115c:	701a      	strb	r2, [r3, #0]
	}
}
 800115e:	bf00      	nop
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	40001400 	.word	0x40001400
 8001170:	200000d2 	.word	0x200000d2

08001174 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3){
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	7f1b      	ldrb	r3, [r3, #28]
 8001180:	2b04      	cmp	r3, #4
 8001182:	d10a      	bne.n	800119a <HAL_TIM_IC_CaptureCallback+0x26>
		ic1 = htim->Instance->CCR3;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800118a:	4a0e      	ldr	r2, [pc, #56]	; (80011c4 <HAL_TIM_IC_CaptureCallback+0x50>)
 800118c:	6013      	str	r3, [r2, #0]
		flancoEco++;
 800118e:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <HAL_TIM_IC_CaptureCallback+0x54>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	3301      	adds	r3, #1
 8001194:	b2da      	uxtb	r2, r3
 8001196:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <HAL_TIM_IC_CaptureCallback+0x54>)
 8001198:	701a      	strb	r2, [r3, #0]
	}

	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4){
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	7f1b      	ldrb	r3, [r3, #28]
 800119e:	2b08      	cmp	r3, #8
 80011a0:	d10a      	bne.n	80011b8 <HAL_TIM_IC_CaptureCallback+0x44>
		ic2 = htim->Instance->CCR4;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a8:	4a08      	ldr	r2, [pc, #32]	; (80011cc <HAL_TIM_IC_CaptureCallback+0x58>)
 80011aa:	6013      	str	r3, [r2, #0]
		flancoEco++;
 80011ac:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <HAL_TIM_IC_CaptureCallback+0x54>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	3301      	adds	r3, #1
 80011b2:	b2da      	uxtb	r2, r3
 80011b4:	4b04      	ldr	r3, [pc, #16]	; (80011c8 <HAL_TIM_IC_CaptureCallback+0x54>)
 80011b6:	701a      	strb	r2, [r3, #0]
	}
}
 80011b8:	bf00      	nop
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	200000d8 	.word	0x200000d8
 80011c8:	200000e0 	.word	0x200000e0
 80011cc:	200000dc 	.word	0x200000dc

080011d0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
	flag_cmd = 1;
 80011d8:	4b04      	ldr	r3, [pc, #16]	; (80011ec <HAL_UART_RxCpltCallback+0x1c>)
 80011da:	2201      	movs	r2, #1
 80011dc:	701a      	strb	r2, [r3, #0]
}
 80011de:	bf00      	nop
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	20000098 	.word	0x20000098

080011f0 <SR_04>:


void SR_04 (void){
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0

	switch (flancoEco){
 80011f4:	4b1b      	ldr	r3, [pc, #108]	; (8001264 <SR_04+0x74>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	dc02      	bgt.n	8001202 <SR_04+0x12>
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	da2c      	bge.n	800125a <SR_04+0x6a>
 8001200:	e027      	b.n	8001252 <SR_04+0x62>
 8001202:	2b02      	cmp	r3, #2
 8001204:	d125      	bne.n	8001252 <SR_04+0x62>
		case 0:
		case 1:
			return;
		case 2:
			cuentaPulsos = (int32_t)(ic2 - ic1);
 8001206:	4b18      	ldr	r3, [pc, #96]	; (8001268 <SR_04+0x78>)
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	4b18      	ldr	r3, [pc, #96]	; (800126c <SR_04+0x7c>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	1ad3      	subs	r3, r2, r3
 8001210:	461a      	mov	r2, r3
 8001212:	4b17      	ldr	r3, [pc, #92]	; (8001270 <SR_04+0x80>)
 8001214:	601a      	str	r2, [r3, #0]
			if (cuentaPulsos < 23310){
 8001216:	4b16      	ldr	r3, [pc, #88]	; (8001270 <SR_04+0x80>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f645 320d 	movw	r2, #23309	; 0x5b0d
 800121e:	4293      	cmp	r3, r2
 8001220:	dc0f      	bgt.n	8001242 <SR_04+0x52>
				distanciaSR04 = cuentaPulsos * 34 / 2000;
 8001222:	4b13      	ldr	r3, [pc, #76]	; (8001270 <SR_04+0x80>)
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	4613      	mov	r3, r2
 8001228:	011b      	lsls	r3, r3, #4
 800122a:	4413      	add	r3, r2
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	4a11      	ldr	r2, [pc, #68]	; (8001274 <SR_04+0x84>)
 8001230:	fb82 1203 	smull	r1, r2, r2, r3
 8001234:	11d2      	asrs	r2, r2, #7
 8001236:	17db      	asrs	r3, r3, #31
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	b29a      	uxth	r2, r3
 800123c:	4b0e      	ldr	r3, [pc, #56]	; (8001278 <SR_04+0x88>)
 800123e:	801a      	strh	r2, [r3, #0]
 8001240:	e003      	b.n	800124a <SR_04+0x5a>
			}else{
				distanciaSR04 = 400;
 8001242:	4b0d      	ldr	r3, [pc, #52]	; (8001278 <SR_04+0x88>)
 8001244:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001248:	801a      	strh	r2, [r3, #0]
			}
			flancoEco = 0;
 800124a:	4b06      	ldr	r3, [pc, #24]	; (8001264 <SR_04+0x74>)
 800124c:	2200      	movs	r2, #0
 800124e:	701a      	strb	r2, [r3, #0]
		break;
 8001250:	e004      	b.n	800125c <SR_04+0x6c>
		default:
			flancoEco = 0;
 8001252:	4b04      	ldr	r3, [pc, #16]	; (8001264 <SR_04+0x74>)
 8001254:	2200      	movs	r2, #0
 8001256:	701a      	strb	r2, [r3, #0]
		break;
 8001258:	e000      	b.n	800125c <SR_04+0x6c>
			return;
 800125a:	bf00      	nop
	} //end switch flancoEco

} //end SR_04()
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	200000e0 	.word	0x200000e0
 8001268:	200000dc 	.word	0x200000dc
 800126c:	200000d8 	.word	0x200000d8
 8001270:	200000e4 	.word	0x200000e4
 8001274:	10624dd3 	.word	0x10624dd3
 8001278:	200000e8 	.word	0x200000e8

0800127c <sensores>:

void sensores (void){
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
	//sensores_dist = SI << 2 | SF << 1 | SD (logica negativa)
	SI = (HAL_GPIO_ReadPin(IN_sensorL_GPIO_Port, IN_sensorL_Pin)) ;
 8001280:	2102      	movs	r1, #2
 8001282:	4817      	ldr	r0, [pc, #92]	; (80012e0 <sensores+0x64>)
 8001284:	f001 ffac 	bl	80031e0 <HAL_GPIO_ReadPin>
 8001288:	4603      	mov	r3, r0
 800128a:	461a      	mov	r2, r3
 800128c:	4b15      	ldr	r3, [pc, #84]	; (80012e4 <sensores+0x68>)
 800128e:	701a      	strb	r2, [r3, #0]
	SD = HAL_GPIO_ReadPin(IN_sensorR_GPIO_Port, IN_sensorR_Pin);
 8001290:	2108      	movs	r1, #8
 8001292:	4813      	ldr	r0, [pc, #76]	; (80012e0 <sensores+0x64>)
 8001294:	f001 ffa4 	bl	80031e0 <HAL_GPIO_ReadPin>
 8001298:	4603      	mov	r3, r0
 800129a:	461a      	mov	r2, r3
 800129c:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <sensores+0x6c>)
 800129e:	701a      	strb	r2, [r3, #0]
	if (distanciaSR04 < 25) SF = 0; else SF = 1;
 80012a0:	4b12      	ldr	r3, [pc, #72]	; (80012ec <sensores+0x70>)
 80012a2:	881b      	ldrh	r3, [r3, #0]
 80012a4:	2b18      	cmp	r3, #24
 80012a6:	d803      	bhi.n	80012b0 <sensores+0x34>
 80012a8:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <sensores+0x74>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	701a      	strb	r2, [r3, #0]
 80012ae:	e002      	b.n	80012b6 <sensores+0x3a>
 80012b0:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <sensores+0x74>)
 80012b2:	2201      	movs	r2, #1
 80012b4:	701a      	strb	r2, [r3, #0]

	sensores_dist = SI << 2 | SF << 1 | SD;
 80012b6:	4b0b      	ldr	r3, [pc, #44]	; (80012e4 <sensores+0x68>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	b25a      	sxtb	r2, r3
 80012be:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <sensores+0x74>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	b25b      	sxtb	r3, r3
 80012c6:	4313      	orrs	r3, r2
 80012c8:	b25a      	sxtb	r2, r3
 80012ca:	4b07      	ldr	r3, [pc, #28]	; (80012e8 <sensores+0x6c>)
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	b25b      	sxtb	r3, r3
 80012d0:	4313      	orrs	r3, r2
 80012d2:	b25b      	sxtb	r3, r3
 80012d4:	b2da      	uxtb	r2, r3
 80012d6:	4b07      	ldr	r3, [pc, #28]	; (80012f4 <sensores+0x78>)
 80012d8:	701a      	strb	r2, [r3, #0]
} //end sensores()
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40020c00 	.word	0x40020c00
 80012e4:	200000ba 	.word	0x200000ba
 80012e8:	200000bc 	.word	0x200000bc
 80012ec:	200000e8 	.word	0x200000e8
 80012f0:	200000bb 	.word	0x200000bb
 80012f4:	200000bd 	.word	0x200000bd

080012f8 <movimientoLibre>:
	velLFinal = abs(vl);
	velRFinal = abs(vr);

} //end velocidades()

void movimientoLibre (void){
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0

	if (avance_cant != 0) avance_cant = 0;
 80012fc:	4bb7      	ldr	r3, [pc, #732]	; (80015dc <movimientoLibre+0x2e4>)
 80012fe:	881b      	ldrh	r3, [r3, #0]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d002      	beq.n	800130a <movimientoLibre+0x12>
 8001304:	4bb5      	ldr	r3, [pc, #724]	; (80015dc <movimientoLibre+0x2e4>)
 8001306:	2200      	movs	r2, #0
 8001308:	801a      	strh	r2, [r3, #0]
	if (retroceso_cant != 0) retroceso_cant = 0;
 800130a:	4bb5      	ldr	r3, [pc, #724]	; (80015e0 <movimientoLibre+0x2e8>)
 800130c:	881b      	ldrh	r3, [r3, #0]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d002      	beq.n	8001318 <movimientoLibre+0x20>
 8001312:	4bb3      	ldr	r3, [pc, #716]	; (80015e0 <movimientoLibre+0x2e8>)
 8001314:	2200      	movs	r2, #0
 8001316:	801a      	strh	r2, [r3, #0]
	if (giroIzq_cant != 0) giroIzq_cant = 0;
 8001318:	4bb2      	ldr	r3, [pc, #712]	; (80015e4 <movimientoLibre+0x2ec>)
 800131a:	881b      	ldrh	r3, [r3, #0]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d002      	beq.n	8001326 <movimientoLibre+0x2e>
 8001320:	4bb0      	ldr	r3, [pc, #704]	; (80015e4 <movimientoLibre+0x2ec>)
 8001322:	2200      	movs	r2, #0
 8001324:	801a      	strh	r2, [r3, #0]
	if (giroDer_cant != 0) giroDer_cant = 0;
 8001326:	4bb0      	ldr	r3, [pc, #704]	; (80015e8 <movimientoLibre+0x2f0>)
 8001328:	881b      	ldrh	r3, [r3, #0]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d002      	beq.n	8001334 <movimientoLibre+0x3c>
 800132e:	4bae      	ldr	r3, [pc, #696]	; (80015e8 <movimientoLibre+0x2f0>)
 8001330:	2200      	movs	r2, #0
 8001332:	801a      	strh	r2, [r3, #0]

	switch (status_movimiento) {
 8001334:	4bad      	ldr	r3, [pc, #692]	; (80015ec <movimientoLibre+0x2f4>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2b06      	cmp	r3, #6
 800133a:	f200 8171 	bhi.w	8001620 <movimientoLibre+0x328>
 800133e:	a201      	add	r2, pc, #4	; (adr r2, 8001344 <movimientoLibre+0x4c>)
 8001340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001344:	08001361 	.word	0x08001361
 8001348:	080013a9 	.word	0x080013a9
 800134c:	080014e1 	.word	0x080014e1
 8001350:	08001431 	.word	0x08001431
 8001354:	08001489 	.word	0x08001489
 8001358:	08001523 	.word	0x08001523
 800135c:	0800158d 	.word	0x0800158d
		case QUIETO:

			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 0);
 8001360:	2200      	movs	r2, #0
 8001362:	2101      	movs	r1, #1
 8001364:	48a2      	ldr	r0, [pc, #648]	; (80015f0 <movimientoLibre+0x2f8>)
 8001366:	f001 ff53 	bl	8003210 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 0);
 800136a:	2200      	movs	r2, #0
 800136c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001370:	48a0      	ldr	r0, [pc, #640]	; (80015f4 <movimientoLibre+0x2fc>)
 8001372:	f001 ff4d 	bl	8003210 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 0);
 8001376:	2200      	movs	r2, #0
 8001378:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800137c:	489d      	ldr	r0, [pc, #628]	; (80015f4 <movimientoLibre+0x2fc>)
 800137e:	f001 ff47 	bl	8003210 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 0);
 8001382:	2200      	movs	r2, #0
 8001384:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001388:	489a      	ldr	r0, [pc, #616]	; (80015f4 <movimientoLibre+0x2fc>)
 800138a:	f001 ff41 	bl	8003210 <HAL_GPIO_WritePin>

			velL = 0;
 800138e:	4b9a      	ldr	r3, [pc, #616]	; (80015f8 <movimientoLibre+0x300>)
 8001390:	2200      	movs	r2, #0
 8001392:	701a      	strb	r2, [r3, #0]
			velR = 0;
 8001394:	4b99      	ldr	r3, [pc, #612]	; (80015fc <movimientoLibre+0x304>)
 8001396:	2200      	movs	r2, #0
 8001398:	701a      	strb	r2, [r3, #0]
			periodo_Encoder = 0;
 800139a:	4b99      	ldr	r3, [pc, #612]	; (8001600 <movimientoLibre+0x308>)
 800139c:	2200      	movs	r2, #0
 800139e:	701a      	strb	r2, [r3, #0]

			status_movimiento = AVANZANDO;
 80013a0:	4b92      	ldr	r3, [pc, #584]	; (80015ec <movimientoLibre+0x2f4>)
 80013a2:	2201      	movs	r2, #1
 80013a4:	701a      	strb	r2, [r3, #0]
		break;
 80013a6:	e13c      	b.n	8001622 <movimientoLibre+0x32a>
		case AVANZANDO:

			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 1);
 80013a8:	2201      	movs	r2, #1
 80013aa:	2101      	movs	r1, #1
 80013ac:	4890      	ldr	r0, [pc, #576]	; (80015f0 <movimientoLibre+0x2f8>)
 80013ae:	f001 ff2f 	bl	8003210 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 1);
 80013b2:	2201      	movs	r2, #1
 80013b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013b8:	488e      	ldr	r0, [pc, #568]	; (80015f4 <movimientoLibre+0x2fc>)
 80013ba:	f001 ff29 	bl	8003210 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 0);
 80013be:	2200      	movs	r2, #0
 80013c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013c4:	488b      	ldr	r0, [pc, #556]	; (80015f4 <movimientoLibre+0x2fc>)
 80013c6:	f001 ff23 	bl	8003210 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 0);
 80013ca:	2200      	movs	r2, #0
 80013cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013d0:	4888      	ldr	r0, [pc, #544]	; (80015f4 <movimientoLibre+0x2fc>)
 80013d2:	f001 ff1d 	bl	8003210 <HAL_GPIO_WritePin>

			velL = 5;
 80013d6:	4b88      	ldr	r3, [pc, #544]	; (80015f8 <movimientoLibre+0x300>)
 80013d8:	2205      	movs	r2, #5
 80013da:	701a      	strb	r2, [r3, #0]
			velR = 5;
 80013dc:	4b87      	ldr	r3, [pc, #540]	; (80015fc <movimientoLibre+0x304>)
 80013de:	2205      	movs	r2, #5
 80013e0:	701a      	strb	r2, [r3, #0]

			switch (sensores_dist) {
 80013e2:	4b88      	ldr	r3, [pc, #544]	; (8001604 <movimientoLibre+0x30c>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	2b06      	cmp	r3, #6
 80013e8:	d820      	bhi.n	800142c <movimientoLibre+0x134>
 80013ea:	a201      	add	r2, pc, #4	; (adr r2, 80013f0 <movimientoLibre+0xf8>)
 80013ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013f0:	08001415 	.word	0x08001415
 80013f4:	08001425 	.word	0x08001425
 80013f8:	0800142d 	.word	0x0800142d
 80013fc:	0800141d 	.word	0x0800141d
 8001400:	08001415 	.word	0x08001415
 8001404:	08001415 	.word	0x08001415
 8001408:	0800140d 	.word	0x0800140d
				case 0b110:
					//agregado para prueba
					//status_movimiento = PIVOTE_IZQ_AVAN;
					status_movimiento = ROTANDO_IZQ;
 800140c:	4b77      	ldr	r3, [pc, #476]	; (80015ec <movimientoLibre+0x2f4>)
 800140e:	2203      	movs	r2, #3
 8001410:	701a      	strb	r2, [r3, #0]

				break;
 8001412:	e00c      	b.n	800142e <movimientoLibre+0x136>
				case 0b101:
				case 0b100:
				case 0b000:
					status_movimiento = ROTANDO_IZQ;
 8001414:	4b75      	ldr	r3, [pc, #468]	; (80015ec <movimientoLibre+0x2f4>)
 8001416:	2203      	movs	r2, #3
 8001418:	701a      	strb	r2, [r3, #0]
				break;
 800141a:	e008      	b.n	800142e <movimientoLibre+0x136>
				case 0b011:
					//agregado para prueba
					//status_movimiento = PIVOTE_DER_AVAN;
					status_movimiento = ROTANDO_DER;
 800141c:	4b73      	ldr	r3, [pc, #460]	; (80015ec <movimientoLibre+0x2f4>)
 800141e:	2204      	movs	r2, #4
 8001420:	701a      	strb	r2, [r3, #0]
				break;
 8001422:	e004      	b.n	800142e <movimientoLibre+0x136>
				case 0b001:
					status_movimiento = ROTANDO_DER;
 8001424:	4b71      	ldr	r3, [pc, #452]	; (80015ec <movimientoLibre+0x2f4>)
 8001426:	2204      	movs	r2, #4
 8001428:	701a      	strb	r2, [r3, #0]
				break;
 800142a:	e000      	b.n	800142e <movimientoLibre+0x136>
				default:
				break;
 800142c:	bf00      	nop
			} //end switch sensores_dist

		break;
 800142e:	e0f8      	b.n	8001622 <movimientoLibre+0x32a>
		case ROTANDO_IZQ:

			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 0);
 8001430:	2200      	movs	r2, #0
 8001432:	2101      	movs	r1, #1
 8001434:	486e      	ldr	r0, [pc, #440]	; (80015f0 <movimientoLibre+0x2f8>)
 8001436:	f001 feeb 	bl	8003210 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 1);
 800143a:	2201      	movs	r2, #1
 800143c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001440:	486c      	ldr	r0, [pc, #432]	; (80015f4 <movimientoLibre+0x2fc>)
 8001442:	f001 fee5 	bl	8003210 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 1);
 8001446:	2201      	movs	r2, #1
 8001448:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800144c:	4869      	ldr	r0, [pc, #420]	; (80015f4 <movimientoLibre+0x2fc>)
 800144e:	f001 fedf 	bl	8003210 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 0);
 8001452:	2200      	movs	r2, #0
 8001454:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001458:	4866      	ldr	r0, [pc, #408]	; (80015f4 <movimientoLibre+0x2fc>)
 800145a:	f001 fed9 	bl	8003210 <HAL_GPIO_WritePin>

			velL = 5;
 800145e:	4b66      	ldr	r3, [pc, #408]	; (80015f8 <movimientoLibre+0x300>)
 8001460:	2205      	movs	r2, #5
 8001462:	701a      	strb	r2, [r3, #0]
			velR = 5;
 8001464:	4b65      	ldr	r3, [pc, #404]	; (80015fc <movimientoLibre+0x304>)
 8001466:	2205      	movs	r2, #5
 8001468:	701a      	strb	r2, [r3, #0]

			switch (sensores_dist){
 800146a:	4b66      	ldr	r3, [pc, #408]	; (8001604 <movimientoLibre+0x30c>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	2b03      	cmp	r3, #3
 8001470:	d005      	beq.n	800147e <movimientoLibre+0x186>
 8001472:	2b07      	cmp	r3, #7
 8001474:	d106      	bne.n	8001484 <movimientoLibre+0x18c>
				case 0b111:
					status_movimiento = AVANZANDO;
 8001476:	4b5d      	ldr	r3, [pc, #372]	; (80015ec <movimientoLibre+0x2f4>)
 8001478:	2201      	movs	r2, #1
 800147a:	701a      	strb	r2, [r3, #0]
					break;
 800147c:	e003      	b.n	8001486 <movimientoLibre+0x18e>
				case 0b011:
					status_movimiento = ROTANDO_DER;
 800147e:	4b5b      	ldr	r3, [pc, #364]	; (80015ec <movimientoLibre+0x2f4>)
 8001480:	2204      	movs	r2, #4
 8001482:	701a      	strb	r2, [r3, #0]
				default:
					break;
 8001484:	bf00      	nop
			} //end switch sensores_dist

		break;
 8001486:	e0cc      	b.n	8001622 <movimientoLibre+0x32a>
		case ROTANDO_DER:
			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 1);
 8001488:	2201      	movs	r2, #1
 800148a:	2101      	movs	r1, #1
 800148c:	4858      	ldr	r0, [pc, #352]	; (80015f0 <movimientoLibre+0x2f8>)
 800148e:	f001 febf 	bl	8003210 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 0);
 8001492:	2200      	movs	r2, #0
 8001494:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001498:	4856      	ldr	r0, [pc, #344]	; (80015f4 <movimientoLibre+0x2fc>)
 800149a:	f001 feb9 	bl	8003210 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 0);
 800149e:	2200      	movs	r2, #0
 80014a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014a4:	4853      	ldr	r0, [pc, #332]	; (80015f4 <movimientoLibre+0x2fc>)
 80014a6:	f001 feb3 	bl	8003210 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 1);
 80014aa:	2201      	movs	r2, #1
 80014ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014b0:	4850      	ldr	r0, [pc, #320]	; (80015f4 <movimientoLibre+0x2fc>)
 80014b2:	f001 fead 	bl	8003210 <HAL_GPIO_WritePin>

			velL = 5;
 80014b6:	4b50      	ldr	r3, [pc, #320]	; (80015f8 <movimientoLibre+0x300>)
 80014b8:	2205      	movs	r2, #5
 80014ba:	701a      	strb	r2, [r3, #0]
			velR = 5;
 80014bc:	4b4f      	ldr	r3, [pc, #316]	; (80015fc <movimientoLibre+0x304>)
 80014be:	2205      	movs	r2, #5
 80014c0:	701a      	strb	r2, [r3, #0]

			switch (sensores_dist){
 80014c2:	4b50      	ldr	r3, [pc, #320]	; (8001604 <movimientoLibre+0x30c>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	2b06      	cmp	r3, #6
 80014c8:	d005      	beq.n	80014d6 <movimientoLibre+0x1de>
 80014ca:	2b07      	cmp	r3, #7
 80014cc:	d106      	bne.n	80014dc <movimientoLibre+0x1e4>
				case 0b111:
					status_movimiento = AVANZANDO;
 80014ce:	4b47      	ldr	r3, [pc, #284]	; (80015ec <movimientoLibre+0x2f4>)
 80014d0:	2201      	movs	r2, #1
 80014d2:	701a      	strb	r2, [r3, #0]
					break;
 80014d4:	e003      	b.n	80014de <movimientoLibre+0x1e6>
				case 0b110:
					status_movimiento = ROTANDO_IZQ;
 80014d6:	4b45      	ldr	r3, [pc, #276]	; (80015ec <movimientoLibre+0x2f4>)
 80014d8:	2203      	movs	r2, #3
 80014da:	701a      	strb	r2, [r3, #0]
				default:
					break;
 80014dc:	bf00      	nop
			} //end switch sensores_dist

		break;
 80014de:	e0a0      	b.n	8001622 <movimientoLibre+0x32a>
		case RETROCEDIENDO:
			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 0);
 80014e0:	2200      	movs	r2, #0
 80014e2:	2101      	movs	r1, #1
 80014e4:	4842      	ldr	r0, [pc, #264]	; (80015f0 <movimientoLibre+0x2f8>)
 80014e6:	f001 fe93 	bl	8003210 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 0);
 80014ea:	2200      	movs	r2, #0
 80014ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014f0:	4840      	ldr	r0, [pc, #256]	; (80015f4 <movimientoLibre+0x2fc>)
 80014f2:	f001 fe8d 	bl	8003210 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 1);
 80014f6:	2201      	movs	r2, #1
 80014f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014fc:	483d      	ldr	r0, [pc, #244]	; (80015f4 <movimientoLibre+0x2fc>)
 80014fe:	f001 fe87 	bl	8003210 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 1);
 8001502:	2201      	movs	r2, #1
 8001504:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001508:	483a      	ldr	r0, [pc, #232]	; (80015f4 <movimientoLibre+0x2fc>)
 800150a:	f001 fe81 	bl	8003210 <HAL_GPIO_WritePin>

			velL = 5;
 800150e:	4b3a      	ldr	r3, [pc, #232]	; (80015f8 <movimientoLibre+0x300>)
 8001510:	2205      	movs	r2, #5
 8001512:	701a      	strb	r2, [r3, #0]
			velR = 5;
 8001514:	4b39      	ldr	r3, [pc, #228]	; (80015fc <movimientoLibre+0x304>)
 8001516:	2205      	movs	r2, #5
 8001518:	701a      	strb	r2, [r3, #0]

			status_movimiento = AVANZANDO;
 800151a:	4b34      	ldr	r3, [pc, #208]	; (80015ec <movimientoLibre+0x2f4>)
 800151c:	2201      	movs	r2, #1
 800151e:	701a      	strb	r2, [r3, #0]
			break;
 8001520:	e07f      	b.n	8001622 <movimientoLibre+0x32a>
		case PIVOTE_IZQ_AVAN:
			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 0);
 8001522:	2200      	movs	r2, #0
 8001524:	2101      	movs	r1, #1
 8001526:	4832      	ldr	r0, [pc, #200]	; (80015f0 <movimientoLibre+0x2f8>)
 8001528:	f001 fe72 	bl	8003210 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 1);
 800152c:	2201      	movs	r2, #1
 800152e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001532:	4830      	ldr	r0, [pc, #192]	; (80015f4 <movimientoLibre+0x2fc>)
 8001534:	f001 fe6c 	bl	8003210 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 0);
 8001538:	2200      	movs	r2, #0
 800153a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800153e:	482d      	ldr	r0, [pc, #180]	; (80015f4 <movimientoLibre+0x2fc>)
 8001540:	f001 fe66 	bl	8003210 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 0);
 8001544:	2200      	movs	r2, #0
 8001546:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800154a:	482a      	ldr	r0, [pc, #168]	; (80015f4 <movimientoLibre+0x2fc>)
 800154c:	f001 fe60 	bl	8003210 <HAL_GPIO_WritePin>

			velL = 0;
 8001550:	4b29      	ldr	r3, [pc, #164]	; (80015f8 <movimientoLibre+0x300>)
 8001552:	2200      	movs	r2, #0
 8001554:	701a      	strb	r2, [r3, #0]
			velR = 5;
 8001556:	4b29      	ldr	r3, [pc, #164]	; (80015fc <movimientoLibre+0x304>)
 8001558:	2205      	movs	r2, #5
 800155a:	701a      	strb	r2, [r3, #0]

			switch (sensores_dist){
 800155c:	4b29      	ldr	r3, [pc, #164]	; (8001604 <movimientoLibre+0x30c>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	2b07      	cmp	r3, #7
 8001562:	d006      	beq.n	8001572 <movimientoLibre+0x27a>
 8001564:	2b07      	cmp	r3, #7
 8001566:	dc0f      	bgt.n	8001588 <movimientoLibre+0x290>
 8001568:	2b03      	cmp	r3, #3
 800156a:	d006      	beq.n	800157a <movimientoLibre+0x282>
 800156c:	2b04      	cmp	r3, #4
 800156e:	d008      	beq.n	8001582 <movimientoLibre+0x28a>
					status_movimiento = ROTANDO_DER;
				break;
				case 0b100:
					status_movimiento = ROTANDO_IZQ;
				default:
				break;
 8001570:	e00a      	b.n	8001588 <movimientoLibre+0x290>
					status_movimiento = AVANZANDO;
 8001572:	4b1e      	ldr	r3, [pc, #120]	; (80015ec <movimientoLibre+0x2f4>)
 8001574:	2201      	movs	r2, #1
 8001576:	701a      	strb	r2, [r3, #0]
				break;
 8001578:	e007      	b.n	800158a <movimientoLibre+0x292>
					status_movimiento = ROTANDO_DER;
 800157a:	4b1c      	ldr	r3, [pc, #112]	; (80015ec <movimientoLibre+0x2f4>)
 800157c:	2204      	movs	r2, #4
 800157e:	701a      	strb	r2, [r3, #0]
				break;
 8001580:	e003      	b.n	800158a <movimientoLibre+0x292>
					status_movimiento = ROTANDO_IZQ;
 8001582:	4b1a      	ldr	r3, [pc, #104]	; (80015ec <movimientoLibre+0x2f4>)
 8001584:	2203      	movs	r2, #3
 8001586:	701a      	strb	r2, [r3, #0]
				break;
 8001588:	bf00      	nop
			} //end switch sensores_dist

		break;
 800158a:	e04a      	b.n	8001622 <movimientoLibre+0x32a>
		case PIVOTE_DER_AVAN:
			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 1);
 800158c:	2201      	movs	r2, #1
 800158e:	2101      	movs	r1, #1
 8001590:	4817      	ldr	r0, [pc, #92]	; (80015f0 <movimientoLibre+0x2f8>)
 8001592:	f001 fe3d 	bl	8003210 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 0);
 8001596:	2200      	movs	r2, #0
 8001598:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800159c:	4815      	ldr	r0, [pc, #84]	; (80015f4 <movimientoLibre+0x2fc>)
 800159e:	f001 fe37 	bl	8003210 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 0);
 80015a2:	2200      	movs	r2, #0
 80015a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015a8:	4812      	ldr	r0, [pc, #72]	; (80015f4 <movimientoLibre+0x2fc>)
 80015aa:	f001 fe31 	bl	8003210 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 0);
 80015ae:	2200      	movs	r2, #0
 80015b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015b4:	480f      	ldr	r0, [pc, #60]	; (80015f4 <movimientoLibre+0x2fc>)
 80015b6:	f001 fe2b 	bl	8003210 <HAL_GPIO_WritePin>

			velL = 5;
 80015ba:	4b0f      	ldr	r3, [pc, #60]	; (80015f8 <movimientoLibre+0x300>)
 80015bc:	2205      	movs	r2, #5
 80015be:	701a      	strb	r2, [r3, #0]
			velR = 0;
 80015c0:	4b0e      	ldr	r3, [pc, #56]	; (80015fc <movimientoLibre+0x304>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	701a      	strb	r2, [r3, #0]

			switch (sensores_dist){
 80015c6:	4b0f      	ldr	r3, [pc, #60]	; (8001604 <movimientoLibre+0x30c>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	2b07      	cmp	r3, #7
 80015cc:	d01c      	beq.n	8001608 <movimientoLibre+0x310>
 80015ce:	2b07      	cmp	r3, #7
 80015d0:	dc25      	bgt.n	800161e <movimientoLibre+0x326>
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d020      	beq.n	8001618 <movimientoLibre+0x320>
 80015d6:	2b06      	cmp	r3, #6
 80015d8:	d01a      	beq.n	8001610 <movimientoLibre+0x318>
					status_movimiento = ROTANDO_IZQ;
				break;
				case 0b001:
					status_movimiento = ROTANDO_DER;
				default:
				break;
 80015da:	e020      	b.n	800161e <movimientoLibre+0x326>
 80015dc:	200000b2 	.word	0x200000b2
 80015e0:	200000b4 	.word	0x200000b4
 80015e4:	200000b6 	.word	0x200000b6
 80015e8:	200000b8 	.word	0x200000b8
 80015ec:	200000a1 	.word	0x200000a1
 80015f0:	40020c00 	.word	0x40020c00
 80015f4:	40020800 	.word	0x40020800
 80015f8:	20000001 	.word	0x20000001
 80015fc:	20000002 	.word	0x20000002
 8001600:	200000d3 	.word	0x200000d3
 8001604:	200000bd 	.word	0x200000bd
					status_movimiento = AVANZANDO;
 8001608:	4b07      	ldr	r3, [pc, #28]	; (8001628 <movimientoLibre+0x330>)
 800160a:	2201      	movs	r2, #1
 800160c:	701a      	strb	r2, [r3, #0]
				break;
 800160e:	e007      	b.n	8001620 <movimientoLibre+0x328>
					status_movimiento = ROTANDO_IZQ;
 8001610:	4b05      	ldr	r3, [pc, #20]	; (8001628 <movimientoLibre+0x330>)
 8001612:	2203      	movs	r2, #3
 8001614:	701a      	strb	r2, [r3, #0]
				break;
 8001616:	e003      	b.n	8001620 <movimientoLibre+0x328>
					status_movimiento = ROTANDO_DER;
 8001618:	4b03      	ldr	r3, [pc, #12]	; (8001628 <movimientoLibre+0x330>)
 800161a:	2204      	movs	r2, #4
 800161c:	701a      	strb	r2, [r3, #0]
				break;
 800161e:	bf00      	nop
			} //end switch sensores_dist

		default:
		break;
 8001620:	bf00      	nop

	} //fin switch status_movimiento

} //fin movimientoLibre()
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	200000a1 	.word	0x200000a1

0800162c <movimientoRC>:

void movimientoRC (void){
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0

	if (!avance_cant && !retroceso_cant && !giroIzq_cant && !giroDer_cant ){
 8001630:	4b94      	ldr	r3, [pc, #592]	; (8001884 <movimientoRC+0x258>)
 8001632:	881b      	ldrh	r3, [r3, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d10e      	bne.n	8001656 <movimientoRC+0x2a>
 8001638:	4b93      	ldr	r3, [pc, #588]	; (8001888 <movimientoRC+0x25c>)
 800163a:	881b      	ldrh	r3, [r3, #0]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d10a      	bne.n	8001656 <movimientoRC+0x2a>
 8001640:	4b92      	ldr	r3, [pc, #584]	; (800188c <movimientoRC+0x260>)
 8001642:	881b      	ldrh	r3, [r3, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d106      	bne.n	8001656 <movimientoRC+0x2a>
 8001648:	4b91      	ldr	r3, [pc, #580]	; (8001890 <movimientoRC+0x264>)
 800164a:	881b      	ldrh	r3, [r3, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d102      	bne.n	8001656 <movimientoRC+0x2a>
		status_movimiento = QUIETO;
 8001650:	4b90      	ldr	r3, [pc, #576]	; (8001894 <movimientoRC+0x268>)
 8001652:	2200      	movs	r2, #0
 8001654:	701a      	strb	r2, [r3, #0]
	}

	switch (status_movimiento) {
 8001656:	4b8f      	ldr	r3, [pc, #572]	; (8001894 <movimientoRC+0x268>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	2b05      	cmp	r3, #5
 800165c:	f200 81d3 	bhi.w	8001a06 <movimientoRC+0x3da>
 8001660:	a201      	add	r2, pc, #4	; (adr r2, 8001668 <movimientoRC+0x3c>)
 8001662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001666:	bf00      	nop
 8001668:	08001681 	.word	0x08001681
 800166c:	08001721 	.word	0x08001721
 8001670:	08001959 	.word	0x08001959
 8001674:	080017d3 	.word	0x080017d3
 8001678:	080018a9 	.word	0x080018a9
 800167c:	08001a07 	.word	0x08001a07
		case QUIETO:

			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 0);
 8001680:	2200      	movs	r2, #0
 8001682:	2101      	movs	r1, #1
 8001684:	4884      	ldr	r0, [pc, #528]	; (8001898 <movimientoRC+0x26c>)
 8001686:	f001 fdc3 	bl	8003210 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 0);
 800168a:	2200      	movs	r2, #0
 800168c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001690:	4882      	ldr	r0, [pc, #520]	; (800189c <movimientoRC+0x270>)
 8001692:	f001 fdbd 	bl	8003210 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 0);
 8001696:	2200      	movs	r2, #0
 8001698:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800169c:	487f      	ldr	r0, [pc, #508]	; (800189c <movimientoRC+0x270>)
 800169e:	f001 fdb7 	bl	8003210 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 0);
 80016a2:	2200      	movs	r2, #0
 80016a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016a8:	487c      	ldr	r0, [pc, #496]	; (800189c <movimientoRC+0x270>)
 80016aa:	f001 fdb1 	bl	8003210 <HAL_GPIO_WritePin>

			if (avance_cant != 0){
 80016ae:	4b75      	ldr	r3, [pc, #468]	; (8001884 <movimientoRC+0x258>)
 80016b0:	881b      	ldrh	r3, [r3, #0]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d009      	beq.n	80016ca <movimientoRC+0x9e>
				acum_encoderL = 0;
 80016b6:	4b7a      	ldr	r3, [pc, #488]	; (80018a0 <movimientoRC+0x274>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 80016bc:	4b79      	ldr	r3, [pc, #484]	; (80018a4 <movimientoRC+0x278>)
 80016be:	2200      	movs	r2, #0
 80016c0:	801a      	strh	r2, [r3, #0]
				status_movimiento = AVANZANDO;
 80016c2:	4b74      	ldr	r3, [pc, #464]	; (8001894 <movimientoRC+0x268>)
 80016c4:	2201      	movs	r2, #1
 80016c6:	701a      	strb	r2, [r3, #0]
				break;
 80016c8:	e1b0      	b.n	8001a2c <movimientoRC+0x400>
			}

			if (retroceso_cant != 0){
 80016ca:	4b6f      	ldr	r3, [pc, #444]	; (8001888 <movimientoRC+0x25c>)
 80016cc:	881b      	ldrh	r3, [r3, #0]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d009      	beq.n	80016e6 <movimientoRC+0xba>
				acum_encoderL = 0;
 80016d2:	4b73      	ldr	r3, [pc, #460]	; (80018a0 <movimientoRC+0x274>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 80016d8:	4b72      	ldr	r3, [pc, #456]	; (80018a4 <movimientoRC+0x278>)
 80016da:	2200      	movs	r2, #0
 80016dc:	801a      	strh	r2, [r3, #0]
				status_movimiento = RETROCEDIENDO;
 80016de:	4b6d      	ldr	r3, [pc, #436]	; (8001894 <movimientoRC+0x268>)
 80016e0:	2202      	movs	r2, #2
 80016e2:	701a      	strb	r2, [r3, #0]
				break;
 80016e4:	e1a2      	b.n	8001a2c <movimientoRC+0x400>
			}

			if (giroIzq_cant != 0){
 80016e6:	4b69      	ldr	r3, [pc, #420]	; (800188c <movimientoRC+0x260>)
 80016e8:	881b      	ldrh	r3, [r3, #0]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d009      	beq.n	8001702 <movimientoRC+0xd6>
				acum_encoderL = 0;
 80016ee:	4b6c      	ldr	r3, [pc, #432]	; (80018a0 <movimientoRC+0x274>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 80016f4:	4b6b      	ldr	r3, [pc, #428]	; (80018a4 <movimientoRC+0x278>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	801a      	strh	r2, [r3, #0]
				status_movimiento = ROTANDO_IZQ;
 80016fa:	4b66      	ldr	r3, [pc, #408]	; (8001894 <movimientoRC+0x268>)
 80016fc:	2203      	movs	r2, #3
 80016fe:	701a      	strb	r2, [r3, #0]
				break;
 8001700:	e194      	b.n	8001a2c <movimientoRC+0x400>
			}

			if (giroDer_cant != 0){
 8001702:	4b63      	ldr	r3, [pc, #396]	; (8001890 <movimientoRC+0x264>)
 8001704:	881b      	ldrh	r3, [r3, #0]
 8001706:	2b00      	cmp	r3, #0
 8001708:	f000 817f 	beq.w	8001a0a <movimientoRC+0x3de>
				acum_encoderL = 0;
 800170c:	4b64      	ldr	r3, [pc, #400]	; (80018a0 <movimientoRC+0x274>)
 800170e:	2200      	movs	r2, #0
 8001710:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 8001712:	4b64      	ldr	r3, [pc, #400]	; (80018a4 <movimientoRC+0x278>)
 8001714:	2200      	movs	r2, #0
 8001716:	801a      	strh	r2, [r3, #0]
				status_movimiento = ROTANDO_DER;
 8001718:	4b5e      	ldr	r3, [pc, #376]	; (8001894 <movimientoRC+0x268>)
 800171a:	2204      	movs	r2, #4
 800171c:	701a      	strb	r2, [r3, #0]
				break;
 800171e:	e185      	b.n	8001a2c <movimientoRC+0x400>
			}

		break;
		case AVANZANDO:

			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 1);
 8001720:	2201      	movs	r2, #1
 8001722:	2101      	movs	r1, #1
 8001724:	485c      	ldr	r0, [pc, #368]	; (8001898 <movimientoRC+0x26c>)
 8001726:	f001 fd73 	bl	8003210 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 1);
 800172a:	2201      	movs	r2, #1
 800172c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001730:	485a      	ldr	r0, [pc, #360]	; (800189c <movimientoRC+0x270>)
 8001732:	f001 fd6d 	bl	8003210 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 0);
 8001736:	2200      	movs	r2, #0
 8001738:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800173c:	4857      	ldr	r0, [pc, #348]	; (800189c <movimientoRC+0x270>)
 800173e:	f001 fd67 	bl	8003210 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 0);
 8001742:	2200      	movs	r2, #0
 8001744:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001748:	4854      	ldr	r0, [pc, #336]	; (800189c <movimientoRC+0x270>)
 800174a:	f001 fd61 	bl	8003210 <HAL_GPIO_WritePin>

			encoders();
 800174e:	f000 f981 	bl	8001a54 <encoders>

			if (avance_cant > ((acum_encoderL + acum_encoderR) >> 1) ) break;
 8001752:	4b4c      	ldr	r3, [pc, #304]	; (8001884 <movimientoRC+0x258>)
 8001754:	881b      	ldrh	r3, [r3, #0]
 8001756:	461a      	mov	r2, r3
 8001758:	4b51      	ldr	r3, [pc, #324]	; (80018a0 <movimientoRC+0x274>)
 800175a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800175e:	4619      	mov	r1, r3
 8001760:	4b50      	ldr	r3, [pc, #320]	; (80018a4 <movimientoRC+0x278>)
 8001762:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001766:	440b      	add	r3, r1
 8001768:	105b      	asrs	r3, r3, #1
 800176a:	429a      	cmp	r2, r3
 800176c:	f300 814f 	bgt.w	8001a0e <movimientoRC+0x3e2>

			avance_cant = 0;
 8001770:	4b44      	ldr	r3, [pc, #272]	; (8001884 <movimientoRC+0x258>)
 8001772:	2200      	movs	r2, #0
 8001774:	801a      	strh	r2, [r3, #0]

			status_movimiento = QUIETO;
 8001776:	4b47      	ldr	r3, [pc, #284]	; (8001894 <movimientoRC+0x268>)
 8001778:	2200      	movs	r2, #0
 800177a:	701a      	strb	r2, [r3, #0]

			if (retroceso_cant != 0){
 800177c:	4b42      	ldr	r3, [pc, #264]	; (8001888 <movimientoRC+0x25c>)
 800177e:	881b      	ldrh	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d009      	beq.n	8001798 <movimientoRC+0x16c>
				acum_encoderL = 0;
 8001784:	4b46      	ldr	r3, [pc, #280]	; (80018a0 <movimientoRC+0x274>)
 8001786:	2200      	movs	r2, #0
 8001788:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 800178a:	4b46      	ldr	r3, [pc, #280]	; (80018a4 <movimientoRC+0x278>)
 800178c:	2200      	movs	r2, #0
 800178e:	801a      	strh	r2, [r3, #0]
				status_movimiento = RETROCEDIENDO;
 8001790:	4b40      	ldr	r3, [pc, #256]	; (8001894 <movimientoRC+0x268>)
 8001792:	2202      	movs	r2, #2
 8001794:	701a      	strb	r2, [r3, #0]
				break;
 8001796:	e149      	b.n	8001a2c <movimientoRC+0x400>
			}

			if (giroIzq_cant != 0){
 8001798:	4b3c      	ldr	r3, [pc, #240]	; (800188c <movimientoRC+0x260>)
 800179a:	881b      	ldrh	r3, [r3, #0]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d009      	beq.n	80017b4 <movimientoRC+0x188>
				acum_encoderL = 0;
 80017a0:	4b3f      	ldr	r3, [pc, #252]	; (80018a0 <movimientoRC+0x274>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 80017a6:	4b3f      	ldr	r3, [pc, #252]	; (80018a4 <movimientoRC+0x278>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	801a      	strh	r2, [r3, #0]
				status_movimiento = ROTANDO_IZQ;
 80017ac:	4b39      	ldr	r3, [pc, #228]	; (8001894 <movimientoRC+0x268>)
 80017ae:	2203      	movs	r2, #3
 80017b0:	701a      	strb	r2, [r3, #0]
				break;
 80017b2:	e13b      	b.n	8001a2c <movimientoRC+0x400>
			}

			if (giroDer_cant != 0){
 80017b4:	4b36      	ldr	r3, [pc, #216]	; (8001890 <movimientoRC+0x264>)
 80017b6:	881b      	ldrh	r3, [r3, #0]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	f000 812a 	beq.w	8001a12 <movimientoRC+0x3e6>
				acum_encoderL = 0;
 80017be:	4b38      	ldr	r3, [pc, #224]	; (80018a0 <movimientoRC+0x274>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 80017c4:	4b37      	ldr	r3, [pc, #220]	; (80018a4 <movimientoRC+0x278>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	801a      	strh	r2, [r3, #0]
				status_movimiento = ROTANDO_DER;
 80017ca:	4b32      	ldr	r3, [pc, #200]	; (8001894 <movimientoRC+0x268>)
 80017cc:	2204      	movs	r2, #4
 80017ce:	701a      	strb	r2, [r3, #0]
				break;
 80017d0:	e12c      	b.n	8001a2c <movimientoRC+0x400>
			}

		break;
		case ROTANDO_IZQ:

			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 0);
 80017d2:	2200      	movs	r2, #0
 80017d4:	2101      	movs	r1, #1
 80017d6:	4830      	ldr	r0, [pc, #192]	; (8001898 <movimientoRC+0x26c>)
 80017d8:	f001 fd1a 	bl	8003210 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 1);
 80017dc:	2201      	movs	r2, #1
 80017de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017e2:	482e      	ldr	r0, [pc, #184]	; (800189c <movimientoRC+0x270>)
 80017e4:	f001 fd14 	bl	8003210 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 1);
 80017e8:	2201      	movs	r2, #1
 80017ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017ee:	482b      	ldr	r0, [pc, #172]	; (800189c <movimientoRC+0x270>)
 80017f0:	f001 fd0e 	bl	8003210 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 0);
 80017f4:	2200      	movs	r2, #0
 80017f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017fa:	4828      	ldr	r0, [pc, #160]	; (800189c <movimientoRC+0x270>)
 80017fc:	f001 fd08 	bl	8003210 <HAL_GPIO_WritePin>

			encoders();
 8001800:	f000 f928 	bl	8001a54 <encoders>

			if (giroIzq_cant > ((acum_encoderL + acum_encoderR) >> 1) ) break;
 8001804:	4b21      	ldr	r3, [pc, #132]	; (800188c <movimientoRC+0x260>)
 8001806:	881b      	ldrh	r3, [r3, #0]
 8001808:	461a      	mov	r2, r3
 800180a:	4b25      	ldr	r3, [pc, #148]	; (80018a0 <movimientoRC+0x274>)
 800180c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001810:	4619      	mov	r1, r3
 8001812:	4b24      	ldr	r3, [pc, #144]	; (80018a4 <movimientoRC+0x278>)
 8001814:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001818:	440b      	add	r3, r1
 800181a:	105b      	asrs	r3, r3, #1
 800181c:	429a      	cmp	r2, r3
 800181e:	f300 80fa 	bgt.w	8001a16 <movimientoRC+0x3ea>

			giroIzq_cant = 0;
 8001822:	4b1a      	ldr	r3, [pc, #104]	; (800188c <movimientoRC+0x260>)
 8001824:	2200      	movs	r2, #0
 8001826:	801a      	strh	r2, [r3, #0]

			status_movimiento = QUIETO;
 8001828:	4b1a      	ldr	r3, [pc, #104]	; (8001894 <movimientoRC+0x268>)
 800182a:	2200      	movs	r2, #0
 800182c:	701a      	strb	r2, [r3, #0]

			if (avance_cant != 0){
 800182e:	4b15      	ldr	r3, [pc, #84]	; (8001884 <movimientoRC+0x258>)
 8001830:	881b      	ldrh	r3, [r3, #0]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d009      	beq.n	800184a <movimientoRC+0x21e>
				acum_encoderL = 0;
 8001836:	4b1a      	ldr	r3, [pc, #104]	; (80018a0 <movimientoRC+0x274>)
 8001838:	2200      	movs	r2, #0
 800183a:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 800183c:	4b19      	ldr	r3, [pc, #100]	; (80018a4 <movimientoRC+0x278>)
 800183e:	2200      	movs	r2, #0
 8001840:	801a      	strh	r2, [r3, #0]
				status_movimiento = AVANZANDO;
 8001842:	4b14      	ldr	r3, [pc, #80]	; (8001894 <movimientoRC+0x268>)
 8001844:	2201      	movs	r2, #1
 8001846:	701a      	strb	r2, [r3, #0]
				break;
 8001848:	e0f0      	b.n	8001a2c <movimientoRC+0x400>
			}

			if (retroceso_cant != 0){
 800184a:	4b0f      	ldr	r3, [pc, #60]	; (8001888 <movimientoRC+0x25c>)
 800184c:	881b      	ldrh	r3, [r3, #0]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d009      	beq.n	8001866 <movimientoRC+0x23a>
				acum_encoderL = 0;
 8001852:	4b13      	ldr	r3, [pc, #76]	; (80018a0 <movimientoRC+0x274>)
 8001854:	2200      	movs	r2, #0
 8001856:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 8001858:	4b12      	ldr	r3, [pc, #72]	; (80018a4 <movimientoRC+0x278>)
 800185a:	2200      	movs	r2, #0
 800185c:	801a      	strh	r2, [r3, #0]
				status_movimiento = RETROCEDIENDO;
 800185e:	4b0d      	ldr	r3, [pc, #52]	; (8001894 <movimientoRC+0x268>)
 8001860:	2202      	movs	r2, #2
 8001862:	701a      	strb	r2, [r3, #0]
				break;
 8001864:	e0e2      	b.n	8001a2c <movimientoRC+0x400>
			}

			if (giroDer_cant != 0){
 8001866:	4b0a      	ldr	r3, [pc, #40]	; (8001890 <movimientoRC+0x264>)
 8001868:	881b      	ldrh	r3, [r3, #0]
 800186a:	2b00      	cmp	r3, #0
 800186c:	f000 80d5 	beq.w	8001a1a <movimientoRC+0x3ee>
				acum_encoderL = 0;
 8001870:	4b0b      	ldr	r3, [pc, #44]	; (80018a0 <movimientoRC+0x274>)
 8001872:	2200      	movs	r2, #0
 8001874:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 8001876:	4b0b      	ldr	r3, [pc, #44]	; (80018a4 <movimientoRC+0x278>)
 8001878:	2200      	movs	r2, #0
 800187a:	801a      	strh	r2, [r3, #0]
				status_movimiento = ROTANDO_DER;
 800187c:	4b05      	ldr	r3, [pc, #20]	; (8001894 <movimientoRC+0x268>)
 800187e:	2204      	movs	r2, #4
 8001880:	701a      	strb	r2, [r3, #0]
				break;
 8001882:	e0d3      	b.n	8001a2c <movimientoRC+0x400>
 8001884:	200000b2 	.word	0x200000b2
 8001888:	200000b4 	.word	0x200000b4
 800188c:	200000b6 	.word	0x200000b6
 8001890:	200000b8 	.word	0x200000b8
 8001894:	200000a1 	.word	0x200000a1
 8001898:	40020c00 	.word	0x40020c00
 800189c:	40020800 	.word	0x40020800
 80018a0:	200000f0 	.word	0x200000f0
 80018a4:	200000f2 	.word	0x200000f2
			}

		break;
		case ROTANDO_DER:
			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 1);
 80018a8:	2201      	movs	r2, #1
 80018aa:	2101      	movs	r1, #1
 80018ac:	4860      	ldr	r0, [pc, #384]	; (8001a30 <movimientoRC+0x404>)
 80018ae:	f001 fcaf 	bl	8003210 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 0);
 80018b2:	2200      	movs	r2, #0
 80018b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018b8:	485e      	ldr	r0, [pc, #376]	; (8001a34 <movimientoRC+0x408>)
 80018ba:	f001 fca9 	bl	8003210 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 0);
 80018be:	2200      	movs	r2, #0
 80018c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018c4:	485b      	ldr	r0, [pc, #364]	; (8001a34 <movimientoRC+0x408>)
 80018c6:	f001 fca3 	bl	8003210 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 1);
 80018ca:	2201      	movs	r2, #1
 80018cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018d0:	4858      	ldr	r0, [pc, #352]	; (8001a34 <movimientoRC+0x408>)
 80018d2:	f001 fc9d 	bl	8003210 <HAL_GPIO_WritePin>

			encoders();
 80018d6:	f000 f8bd 	bl	8001a54 <encoders>

			if (giroDer_cant > ((acum_encoderL + acum_encoderR) >> 1) ) break;
 80018da:	4b57      	ldr	r3, [pc, #348]	; (8001a38 <movimientoRC+0x40c>)
 80018dc:	881b      	ldrh	r3, [r3, #0]
 80018de:	461a      	mov	r2, r3
 80018e0:	4b56      	ldr	r3, [pc, #344]	; (8001a3c <movimientoRC+0x410>)
 80018e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018e6:	4619      	mov	r1, r3
 80018e8:	4b55      	ldr	r3, [pc, #340]	; (8001a40 <movimientoRC+0x414>)
 80018ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018ee:	440b      	add	r3, r1
 80018f0:	105b      	asrs	r3, r3, #1
 80018f2:	429a      	cmp	r2, r3
 80018f4:	f300 8093 	bgt.w	8001a1e <movimientoRC+0x3f2>

			giroDer_cant = 0;
 80018f8:	4b4f      	ldr	r3, [pc, #316]	; (8001a38 <movimientoRC+0x40c>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	801a      	strh	r2, [r3, #0]

			status_movimiento = QUIETO;
 80018fe:	4b51      	ldr	r3, [pc, #324]	; (8001a44 <movimientoRC+0x418>)
 8001900:	2200      	movs	r2, #0
 8001902:	701a      	strb	r2, [r3, #0]

			if (avance_cant != 0){
 8001904:	4b50      	ldr	r3, [pc, #320]	; (8001a48 <movimientoRC+0x41c>)
 8001906:	881b      	ldrh	r3, [r3, #0]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d009      	beq.n	8001920 <movimientoRC+0x2f4>
				acum_encoderL = 0;
 800190c:	4b4b      	ldr	r3, [pc, #300]	; (8001a3c <movimientoRC+0x410>)
 800190e:	2200      	movs	r2, #0
 8001910:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 8001912:	4b4b      	ldr	r3, [pc, #300]	; (8001a40 <movimientoRC+0x414>)
 8001914:	2200      	movs	r2, #0
 8001916:	801a      	strh	r2, [r3, #0]
				status_movimiento = AVANZANDO;
 8001918:	4b4a      	ldr	r3, [pc, #296]	; (8001a44 <movimientoRC+0x418>)
 800191a:	2201      	movs	r2, #1
 800191c:	701a      	strb	r2, [r3, #0]
				break;
 800191e:	e085      	b.n	8001a2c <movimientoRC+0x400>
			}

			if (retroceso_cant != 0){
 8001920:	4b4a      	ldr	r3, [pc, #296]	; (8001a4c <movimientoRC+0x420>)
 8001922:	881b      	ldrh	r3, [r3, #0]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d009      	beq.n	800193c <movimientoRC+0x310>
				acum_encoderL = 0;
 8001928:	4b44      	ldr	r3, [pc, #272]	; (8001a3c <movimientoRC+0x410>)
 800192a:	2200      	movs	r2, #0
 800192c:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 800192e:	4b44      	ldr	r3, [pc, #272]	; (8001a40 <movimientoRC+0x414>)
 8001930:	2200      	movs	r2, #0
 8001932:	801a      	strh	r2, [r3, #0]
				status_movimiento = RETROCEDIENDO;
 8001934:	4b43      	ldr	r3, [pc, #268]	; (8001a44 <movimientoRC+0x418>)
 8001936:	2202      	movs	r2, #2
 8001938:	701a      	strb	r2, [r3, #0]
				break;
 800193a:	e077      	b.n	8001a2c <movimientoRC+0x400>
			}

			if (giroIzq_cant != 0){
 800193c:	4b44      	ldr	r3, [pc, #272]	; (8001a50 <movimientoRC+0x424>)
 800193e:	881b      	ldrh	r3, [r3, #0]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d06e      	beq.n	8001a22 <movimientoRC+0x3f6>
				acum_encoderL = 0;
 8001944:	4b3d      	ldr	r3, [pc, #244]	; (8001a3c <movimientoRC+0x410>)
 8001946:	2200      	movs	r2, #0
 8001948:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 800194a:	4b3d      	ldr	r3, [pc, #244]	; (8001a40 <movimientoRC+0x414>)
 800194c:	2200      	movs	r2, #0
 800194e:	801a      	strh	r2, [r3, #0]
				status_movimiento = ROTANDO_IZQ;
 8001950:	4b3c      	ldr	r3, [pc, #240]	; (8001a44 <movimientoRC+0x418>)
 8001952:	2203      	movs	r2, #3
 8001954:	701a      	strb	r2, [r3, #0]
				break;
 8001956:	e069      	b.n	8001a2c <movimientoRC+0x400>
			}

		break;
		case RETROCEDIENDO:
			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 0);
 8001958:	2200      	movs	r2, #0
 800195a:	2101      	movs	r1, #1
 800195c:	4834      	ldr	r0, [pc, #208]	; (8001a30 <movimientoRC+0x404>)
 800195e:	f001 fc57 	bl	8003210 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 0);
 8001962:	2200      	movs	r2, #0
 8001964:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001968:	4832      	ldr	r0, [pc, #200]	; (8001a34 <movimientoRC+0x408>)
 800196a:	f001 fc51 	bl	8003210 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 1);
 800196e:	2201      	movs	r2, #1
 8001970:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001974:	482f      	ldr	r0, [pc, #188]	; (8001a34 <movimientoRC+0x408>)
 8001976:	f001 fc4b 	bl	8003210 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 1);
 800197a:	2201      	movs	r2, #1
 800197c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001980:	482c      	ldr	r0, [pc, #176]	; (8001a34 <movimientoRC+0x408>)
 8001982:	f001 fc45 	bl	8003210 <HAL_GPIO_WritePin>

			encoders();
 8001986:	f000 f865 	bl	8001a54 <encoders>

			if (retroceso_cant > ((acum_encoderL + acum_encoderR) >> 1) ) break;
 800198a:	4b30      	ldr	r3, [pc, #192]	; (8001a4c <movimientoRC+0x420>)
 800198c:	881b      	ldrh	r3, [r3, #0]
 800198e:	461a      	mov	r2, r3
 8001990:	4b2a      	ldr	r3, [pc, #168]	; (8001a3c <movimientoRC+0x410>)
 8001992:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001996:	4619      	mov	r1, r3
 8001998:	4b29      	ldr	r3, [pc, #164]	; (8001a40 <movimientoRC+0x414>)
 800199a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800199e:	440b      	add	r3, r1
 80019a0:	105b      	asrs	r3, r3, #1
 80019a2:	429a      	cmp	r2, r3
 80019a4:	dc3f      	bgt.n	8001a26 <movimientoRC+0x3fa>

			retroceso_cant = 0;
 80019a6:	4b29      	ldr	r3, [pc, #164]	; (8001a4c <movimientoRC+0x420>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	801a      	strh	r2, [r3, #0]

			status_movimiento = QUIETO;
 80019ac:	4b25      	ldr	r3, [pc, #148]	; (8001a44 <movimientoRC+0x418>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	701a      	strb	r2, [r3, #0]

			if (avance_cant != 0){
 80019b2:	4b25      	ldr	r3, [pc, #148]	; (8001a48 <movimientoRC+0x41c>)
 80019b4:	881b      	ldrh	r3, [r3, #0]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d009      	beq.n	80019ce <movimientoRC+0x3a2>
				acum_encoderL = 0;
 80019ba:	4b20      	ldr	r3, [pc, #128]	; (8001a3c <movimientoRC+0x410>)
 80019bc:	2200      	movs	r2, #0
 80019be:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 80019c0:	4b1f      	ldr	r3, [pc, #124]	; (8001a40 <movimientoRC+0x414>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	801a      	strh	r2, [r3, #0]
				status_movimiento = AVANZANDO;
 80019c6:	4b1f      	ldr	r3, [pc, #124]	; (8001a44 <movimientoRC+0x418>)
 80019c8:	2201      	movs	r2, #1
 80019ca:	701a      	strb	r2, [r3, #0]
				break;
 80019cc:	e02e      	b.n	8001a2c <movimientoRC+0x400>
			}

			if (giroIzq_cant != 0){
 80019ce:	4b20      	ldr	r3, [pc, #128]	; (8001a50 <movimientoRC+0x424>)
 80019d0:	881b      	ldrh	r3, [r3, #0]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d009      	beq.n	80019ea <movimientoRC+0x3be>
				acum_encoderL = 0;
 80019d6:	4b19      	ldr	r3, [pc, #100]	; (8001a3c <movimientoRC+0x410>)
 80019d8:	2200      	movs	r2, #0
 80019da:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 80019dc:	4b18      	ldr	r3, [pc, #96]	; (8001a40 <movimientoRC+0x414>)
 80019de:	2200      	movs	r2, #0
 80019e0:	801a      	strh	r2, [r3, #0]
				status_movimiento = ROTANDO_IZQ;
 80019e2:	4b18      	ldr	r3, [pc, #96]	; (8001a44 <movimientoRC+0x418>)
 80019e4:	2203      	movs	r2, #3
 80019e6:	701a      	strb	r2, [r3, #0]
				break;
 80019e8:	e020      	b.n	8001a2c <movimientoRC+0x400>
			}

			if (giroDer_cant != 0){
 80019ea:	4b13      	ldr	r3, [pc, #76]	; (8001a38 <movimientoRC+0x40c>)
 80019ec:	881b      	ldrh	r3, [r3, #0]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d01b      	beq.n	8001a2a <movimientoRC+0x3fe>
				acum_encoderL = 0;
 80019f2:	4b12      	ldr	r3, [pc, #72]	; (8001a3c <movimientoRC+0x410>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 80019f8:	4b11      	ldr	r3, [pc, #68]	; (8001a40 <movimientoRC+0x414>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	801a      	strh	r2, [r3, #0]
				status_movimiento = ROTANDO_DER;
 80019fe:	4b11      	ldr	r3, [pc, #68]	; (8001a44 <movimientoRC+0x418>)
 8001a00:	2204      	movs	r2, #4
 8001a02:	701a      	strb	r2, [r3, #0]
				break;
 8001a04:	e012      	b.n	8001a2c <movimientoRC+0x400>

		break;
		case PIVOTE_DER_AVAN:

		default:
		break;
 8001a06:	bf00      	nop
 8001a08:	e010      	b.n	8001a2c <movimientoRC+0x400>
		break;
 8001a0a:	bf00      	nop
 8001a0c:	e00e      	b.n	8001a2c <movimientoRC+0x400>
			if (avance_cant > ((acum_encoderL + acum_encoderR) >> 1) ) break;
 8001a0e:	bf00      	nop
 8001a10:	e00c      	b.n	8001a2c <movimientoRC+0x400>
		break;
 8001a12:	bf00      	nop
 8001a14:	e00a      	b.n	8001a2c <movimientoRC+0x400>
			if (giroIzq_cant > ((acum_encoderL + acum_encoderR) >> 1) ) break;
 8001a16:	bf00      	nop
 8001a18:	e008      	b.n	8001a2c <movimientoRC+0x400>
		break;
 8001a1a:	bf00      	nop
 8001a1c:	e006      	b.n	8001a2c <movimientoRC+0x400>
			if (giroDer_cant > ((acum_encoderL + acum_encoderR) >> 1) ) break;
 8001a1e:	bf00      	nop
 8001a20:	e004      	b.n	8001a2c <movimientoRC+0x400>
		break;
 8001a22:	bf00      	nop
 8001a24:	e002      	b.n	8001a2c <movimientoRC+0x400>
			if (retroceso_cant > ((acum_encoderL + acum_encoderR) >> 1) ) break;
 8001a26:	bf00      	nop
 8001a28:	e000      	b.n	8001a2c <movimientoRC+0x400>
		break;
 8001a2a:	bf00      	nop

	} //fin switch status_movimiento

} //fin movimientoRC()
 8001a2c:	bf00      	nop
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	40020c00 	.word	0x40020c00
 8001a34:	40020800 	.word	0x40020800
 8001a38:	200000b8 	.word	0x200000b8
 8001a3c:	200000f0 	.word	0x200000f0
 8001a40:	200000f2 	.word	0x200000f2
 8001a44:	200000a1 	.word	0x200000a1
 8001a48:	200000b2 	.word	0x200000b2
 8001a4c:	200000b4 	.word	0x200000b4
 8001a50:	200000b6 	.word	0x200000b6

08001a54 <encoders>:

void encoders (void){
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0

	if (!flag_encoders) return;
 8001a58:	4b2a      	ldr	r3, [pc, #168]	; (8001b04 <encoders+0xb0>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d04b      	beq.n	8001af8 <encoders+0xa4>

	encoderL = __HAL_TIM_GET_COUNTER(&htim3);
 8001a60:	4b29      	ldr	r3, [pc, #164]	; (8001b08 <encoders+0xb4>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a66:	b21a      	sxth	r2, r3
 8001a68:	4b28      	ldr	r3, [pc, #160]	; (8001b0c <encoders+0xb8>)
 8001a6a:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8001a6c:	4b26      	ldr	r3, [pc, #152]	; (8001b08 <encoders+0xb4>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2200      	movs	r2, #0
 8001a72:	625a      	str	r2, [r3, #36]	; 0x24
	encoderR = __HAL_TIM_GET_COUNTER(&htim2);
 8001a74:	4b26      	ldr	r3, [pc, #152]	; (8001b10 <encoders+0xbc>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7a:	b21a      	sxth	r2, r3
 8001a7c:	4b25      	ldr	r3, [pc, #148]	; (8001b14 <encoders+0xc0>)
 8001a7e:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8001a80:	4b23      	ldr	r3, [pc, #140]	; (8001b10 <encoders+0xbc>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2200      	movs	r2, #0
 8001a86:	625a      	str	r2, [r3, #36]	; 0x24
//	}else if (encoderL < velL){
//		if (TIM4->CCR1 < 85)
//			TIM4->CCR1++;
//	}

	TIM4->CCR1 += velL - encoderL;
 8001a88:	4b23      	ldr	r3, [pc, #140]	; (8001b18 <encoders+0xc4>)
 8001a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a8c:	4a23      	ldr	r2, [pc, #140]	; (8001b1c <encoders+0xc8>)
 8001a8e:	7812      	ldrb	r2, [r2, #0]
 8001a90:	4611      	mov	r1, r2
 8001a92:	4a1e      	ldr	r2, [pc, #120]	; (8001b0c <encoders+0xb8>)
 8001a94:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001a98:	1a8a      	subs	r2, r1, r2
 8001a9a:	4611      	mov	r1, r2
 8001a9c:	4a1e      	ldr	r2, [pc, #120]	; (8001b18 <encoders+0xc4>)
 8001a9e:	440b      	add	r3, r1
 8001aa0:	6353      	str	r3, [r2, #52]	; 0x34
//	}else if (encoderR < velR){
//		if (TIM4->CCR2 < 85)
//			TIM4->CCR2++;
//	}

	TIM4->CCR2 += velR - encoderR;
 8001aa2:	4b1d      	ldr	r3, [pc, #116]	; (8001b18 <encoders+0xc4>)
 8001aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aa6:	4a1e      	ldr	r2, [pc, #120]	; (8001b20 <encoders+0xcc>)
 8001aa8:	7812      	ldrb	r2, [r2, #0]
 8001aaa:	4611      	mov	r1, r2
 8001aac:	4a19      	ldr	r2, [pc, #100]	; (8001b14 <encoders+0xc0>)
 8001aae:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001ab2:	1a8a      	subs	r2, r1, r2
 8001ab4:	4611      	mov	r1, r2
 8001ab6:	4a18      	ldr	r2, [pc, #96]	; (8001b18 <encoders+0xc4>)
 8001ab8:	440b      	add	r3, r1
 8001aba:	6393      	str	r3, [r2, #56]	; 0x38

	acum_encoderL += encoderL;
 8001abc:	4b19      	ldr	r3, [pc, #100]	; (8001b24 <encoders+0xd0>)
 8001abe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	4b11      	ldr	r3, [pc, #68]	; (8001b0c <encoders+0xb8>)
 8001ac6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	4413      	add	r3, r2
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	b21a      	sxth	r2, r3
 8001ad2:	4b14      	ldr	r3, [pc, #80]	; (8001b24 <encoders+0xd0>)
 8001ad4:	801a      	strh	r2, [r3, #0]
	acum_encoderR += encoderR;
 8001ad6:	4b14      	ldr	r3, [pc, #80]	; (8001b28 <encoders+0xd4>)
 8001ad8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001adc:	b29a      	uxth	r2, r3
 8001ade:	4b0d      	ldr	r3, [pc, #52]	; (8001b14 <encoders+0xc0>)
 8001ae0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	4413      	add	r3, r2
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	b21a      	sxth	r2, r3
 8001aec:	4b0e      	ldr	r3, [pc, #56]	; (8001b28 <encoders+0xd4>)
 8001aee:	801a      	strh	r2, [r3, #0]

	flag_encoders = 0;
 8001af0:	4b04      	ldr	r3, [pc, #16]	; (8001b04 <encoders+0xb0>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	701a      	strb	r2, [r3, #0]
 8001af6:	e000      	b.n	8001afa <encoders+0xa6>
	if (!flag_encoders) return;
 8001af8:	bf00      	nop

} //fin encoders()
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	200000ea 	.word	0x200000ea
 8001b08:	20000138 	.word	0x20000138
 8001b0c:	200000ec 	.word	0x200000ec
 8001b10:	200000f8 	.word	0x200000f8
 8001b14:	200000ee 	.word	0x200000ee
 8001b18:	40000800 	.word	0x40000800
 8001b1c:	20000001 	.word	0x20000001
 8001b20:	20000002 	.word	0x20000002
 8001b24:	200000f0 	.word	0x200000f0
 8001b28:	200000f2 	.word	0x200000f2
 8001b2c:	00000000 	.word	0x00000000

08001b30 <check_rxUart>:

	HAL_UART_Transmit(&huart7, txUart, 4, 20);
	HAL_UART_Receive_IT(&huart7, rxUart, 4);
}

void check_rxUart (void){
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0

	if (rxUart[3] != 0){
 8001b34:	4b8c      	ldr	r3, [pc, #560]	; (8001d68 <check_rxUart+0x238>)
 8001b36:	78db      	ldrb	r3, [r3, #3]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d010      	beq.n	8001b5e <check_rxUart+0x2e>
		txUart[0] = CMD_ERROR;
 8001b3c:	4b8b      	ldr	r3, [pc, #556]	; (8001d6c <check_rxUart+0x23c>)
 8001b3e:	2204      	movs	r2, #4
 8001b40:	701a      	strb	r2, [r3, #0]
		txUart[3] = '\0';
 8001b42:	4b8a      	ldr	r3, [pc, #552]	; (8001d6c <check_rxUart+0x23c>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	70da      	strb	r2, [r3, #3]
		HAL_UART_Transmit_IT(&huart7, txUart, 4);
 8001b48:	2204      	movs	r2, #4
 8001b4a:	4988      	ldr	r1, [pc, #544]	; (8001d6c <check_rxUart+0x23c>)
 8001b4c:	4888      	ldr	r0, [pc, #544]	; (8001d70 <check_rxUart+0x240>)
 8001b4e:	f004 fb1e 	bl	800618e <HAL_UART_Transmit_IT>
		HAL_UART_Receive_IT(&huart7, rxUart, 4);
 8001b52:	2204      	movs	r2, #4
 8001b54:	4984      	ldr	r1, [pc, #528]	; (8001d68 <check_rxUart+0x238>)
 8001b56:	4886      	ldr	r0, [pc, #536]	; (8001d70 <check_rxUart+0x240>)
 8001b58:	f004 fb5e 	bl	8006218 <HAL_UART_Receive_IT>
		return;
 8001b5c:	e184      	b.n	8001e68 <check_rxUart+0x338>
	}

	switch (rxUart[0]) {
 8001b5e:	4b82      	ldr	r3, [pc, #520]	; (8001d68 <check_rxUart+0x238>)
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	3b01      	subs	r3, #1
 8001b64:	2b13      	cmp	r3, #19
 8001b66:	f200 817a 	bhi.w	8001e5e <check_rxUart+0x32e>
 8001b6a:	a201      	add	r2, pc, #4	; (adr r2, 8001b70 <check_rxUart+0x40>)
 8001b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b70:	08001bc1 	.word	0x08001bc1
 8001b74:	08001e5f 	.word	0x08001e5f
 8001b78:	08001e5f 	.word	0x08001e5f
 8001b7c:	08001e5f 	.word	0x08001e5f
 8001b80:	08001bdf 	.word	0x08001bdf
 8001b84:	08001e5f 	.word	0x08001e5f
 8001b88:	08001e5f 	.word	0x08001e5f
 8001b8c:	08001d99 	.word	0x08001d99
 8001b90:	08001e5f 	.word	0x08001e5f
 8001b94:	08001e5f 	.word	0x08001e5f
 8001b98:	08001e5f 	.word	0x08001e5f
 8001b9c:	08001e5f 	.word	0x08001e5f
 8001ba0:	08001c4f 	.word	0x08001c4f
 8001ba4:	08001cbf 	.word	0x08001cbf
 8001ba8:	08001cf7 	.word	0x08001cf7
 8001bac:	08001c87 	.word	0x08001c87
 8001bb0:	08001e5f 	.word	0x08001e5f
 8001bb4:	08001e5f 	.word	0x08001e5f
 8001bb8:	08001e5f 	.word	0x08001e5f
 8001bbc:	08001d2f 	.word	0x08001d2f
		case HOLA:
			esp01Presente = 1;
 8001bc0:	4b6c      	ldr	r3, [pc, #432]	; (8001d74 <check_rxUart+0x244>)
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	701a      	strb	r2, [r3, #0]
			txUart[0] = HOLA;
 8001bc6:	4b69      	ldr	r3, [pc, #420]	; (8001d6c <check_rxUart+0x23c>)
 8001bc8:	2201      	movs	r2, #1
 8001bca:	701a      	strb	r2, [r3, #0]
			txUart[3] = '\0';
 8001bcc:	4b67      	ldr	r3, [pc, #412]	; (8001d6c <check_rxUart+0x23c>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	70da      	strb	r2, [r3, #3]
			HAL_UART_Transmit_IT(&huart7, txUart, 4);
 8001bd2:	2204      	movs	r2, #4
 8001bd4:	4965      	ldr	r1, [pc, #404]	; (8001d6c <check_rxUart+0x23c>)
 8001bd6:	4866      	ldr	r0, [pc, #408]	; (8001d70 <check_rxUart+0x240>)
 8001bd8:	f004 fad9 	bl	800618e <HAL_UART_Transmit_IT>

		break;
 8001bdc:	e13f      	b.n	8001e5e <check_rxUart+0x32e>
		case MODO:

			switch (rxUart[1]) {
 8001bde:	4b62      	ldr	r3, [pc, #392]	; (8001d68 <check_rxUart+0x238>)
 8001be0:	785b      	ldrb	r3, [r3, #1]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d002      	beq.n	8001bec <check_rxUart+0xbc>
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d012      	beq.n	8001c10 <check_rxUart+0xe0>
 8001bea:	e023      	b.n	8001c34 <check_rxUart+0x104>
				case AUTOMATICO:
					modoFuncionamiento = AUTOMATICO;
 8001bec:	4b62      	ldr	r3, [pc, #392]	; (8001d78 <check_rxUart+0x248>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	701a      	strb	r2, [r3, #0]
					flag_encoders = 0;
 8001bf2:	4b62      	ldr	r3, [pc, #392]	; (8001d7c <check_rxUart+0x24c>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	701a      	strb	r2, [r3, #0]
					txUart[0] = OK_;
 8001bf8:	4b5c      	ldr	r3, [pc, #368]	; (8001d6c <check_rxUart+0x23c>)
 8001bfa:	2202      	movs	r2, #2
 8001bfc:	701a      	strb	r2, [r3, #0]
					txUart[3] = '\0';
 8001bfe:	4b5b      	ldr	r3, [pc, #364]	; (8001d6c <check_rxUart+0x23c>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	70da      	strb	r2, [r3, #3]
					HAL_UART_Transmit_IT(&huart7, txUart, 4);
 8001c04:	2204      	movs	r2, #4
 8001c06:	4959      	ldr	r1, [pc, #356]	; (8001d6c <check_rxUart+0x23c>)
 8001c08:	4859      	ldr	r0, [pc, #356]	; (8001d70 <check_rxUart+0x240>)
 8001c0a:	f004 fac0 	bl	800618e <HAL_UART_Transmit_IT>
				break;
 8001c0e:	e01d      	b.n	8001c4c <check_rxUart+0x11c>
				case MANUAL:
					status_movimiento = QUIETO;
 8001c10:	4b5b      	ldr	r3, [pc, #364]	; (8001d80 <check_rxUart+0x250>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	701a      	strb	r2, [r3, #0]
					modoFuncionamiento = MANUAL;
 8001c16:	4b58      	ldr	r3, [pc, #352]	; (8001d78 <check_rxUart+0x248>)
 8001c18:	2201      	movs	r2, #1
 8001c1a:	701a      	strb	r2, [r3, #0]
					txUart[0] = OK_;
 8001c1c:	4b53      	ldr	r3, [pc, #332]	; (8001d6c <check_rxUart+0x23c>)
 8001c1e:	2202      	movs	r2, #2
 8001c20:	701a      	strb	r2, [r3, #0]
					txUart[3] = '\0';
 8001c22:	4b52      	ldr	r3, [pc, #328]	; (8001d6c <check_rxUart+0x23c>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	70da      	strb	r2, [r3, #3]
					HAL_UART_Transmit_IT(&huart7, txUart, 4);
 8001c28:	2204      	movs	r2, #4
 8001c2a:	4950      	ldr	r1, [pc, #320]	; (8001d6c <check_rxUart+0x23c>)
 8001c2c:	4850      	ldr	r0, [pc, #320]	; (8001d70 <check_rxUart+0x240>)
 8001c2e:	f004 faae 	bl	800618e <HAL_UART_Transmit_IT>
				break;
 8001c32:	e00b      	b.n	8001c4c <check_rxUart+0x11c>
				default:
					txUart[0] = CMD_ERROR;
 8001c34:	4b4d      	ldr	r3, [pc, #308]	; (8001d6c <check_rxUart+0x23c>)
 8001c36:	2204      	movs	r2, #4
 8001c38:	701a      	strb	r2, [r3, #0]
					txUart[3] = '\0';
 8001c3a:	4b4c      	ldr	r3, [pc, #304]	; (8001d6c <check_rxUart+0x23c>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	70da      	strb	r2, [r3, #3]
					HAL_UART_Transmit_IT(&huart7, txUart, 4);
 8001c40:	2204      	movs	r2, #4
 8001c42:	494a      	ldr	r1, [pc, #296]	; (8001d6c <check_rxUart+0x23c>)
 8001c44:	484a      	ldr	r0, [pc, #296]	; (8001d70 <check_rxUart+0x240>)
 8001c46:	f004 faa2 	bl	800618e <HAL_UART_Transmit_IT>
			} //end switch rxUart[1]

		break;
 8001c4a:	e108      	b.n	8001e5e <check_rxUart+0x32e>
 8001c4c:	e107      	b.n	8001e5e <check_rxUart+0x32e>
		case AVANCE:
			avance_cant += (uint16_t) (rxUart[2] + (rxUart[1] << 8));
 8001c4e:	4b46      	ldr	r3, [pc, #280]	; (8001d68 <check_rxUart+0x238>)
 8001c50:	789b      	ldrb	r3, [r3, #2]
 8001c52:	b29a      	uxth	r2, r3
 8001c54:	4b44      	ldr	r3, [pc, #272]	; (8001d68 <check_rxUart+0x238>)
 8001c56:	785b      	ldrb	r3, [r3, #1]
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	021b      	lsls	r3, r3, #8
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	4413      	add	r3, r2
 8001c60:	b29a      	uxth	r2, r3
 8001c62:	4b48      	ldr	r3, [pc, #288]	; (8001d84 <check_rxUart+0x254>)
 8001c64:	881b      	ldrh	r3, [r3, #0]
 8001c66:	4413      	add	r3, r2
 8001c68:	b29a      	uxth	r2, r3
 8001c6a:	4b46      	ldr	r3, [pc, #280]	; (8001d84 <check_rxUart+0x254>)
 8001c6c:	801a      	strh	r2, [r3, #0]

			txUart[0] = OK_;
 8001c6e:	4b3f      	ldr	r3, [pc, #252]	; (8001d6c <check_rxUart+0x23c>)
 8001c70:	2202      	movs	r2, #2
 8001c72:	701a      	strb	r2, [r3, #0]
			txUart[3] = '\0';
 8001c74:	4b3d      	ldr	r3, [pc, #244]	; (8001d6c <check_rxUart+0x23c>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	70da      	strb	r2, [r3, #3]
			HAL_UART_Transmit_IT(&huart7, txUart, 4);
 8001c7a:	2204      	movs	r2, #4
 8001c7c:	493b      	ldr	r1, [pc, #236]	; (8001d6c <check_rxUart+0x23c>)
 8001c7e:	483c      	ldr	r0, [pc, #240]	; (8001d70 <check_rxUart+0x240>)
 8001c80:	f004 fa85 	bl	800618e <HAL_UART_Transmit_IT>
		break;
 8001c84:	e0eb      	b.n	8001e5e <check_rxUart+0x32e>
		case RETROCEDE:
			retroceso_cant += (uint16_t) (rxUart[2] + (rxUart[1] << 8));
 8001c86:	4b38      	ldr	r3, [pc, #224]	; (8001d68 <check_rxUart+0x238>)
 8001c88:	789b      	ldrb	r3, [r3, #2]
 8001c8a:	b29a      	uxth	r2, r3
 8001c8c:	4b36      	ldr	r3, [pc, #216]	; (8001d68 <check_rxUart+0x238>)
 8001c8e:	785b      	ldrb	r3, [r3, #1]
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	021b      	lsls	r3, r3, #8
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	4413      	add	r3, r2
 8001c98:	b29a      	uxth	r2, r3
 8001c9a:	4b3b      	ldr	r3, [pc, #236]	; (8001d88 <check_rxUart+0x258>)
 8001c9c:	881b      	ldrh	r3, [r3, #0]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	b29a      	uxth	r2, r3
 8001ca2:	4b39      	ldr	r3, [pc, #228]	; (8001d88 <check_rxUart+0x258>)
 8001ca4:	801a      	strh	r2, [r3, #0]

			txUart[0] = OK_;
 8001ca6:	4b31      	ldr	r3, [pc, #196]	; (8001d6c <check_rxUart+0x23c>)
 8001ca8:	2202      	movs	r2, #2
 8001caa:	701a      	strb	r2, [r3, #0]
			txUart[3] = '\0';
 8001cac:	4b2f      	ldr	r3, [pc, #188]	; (8001d6c <check_rxUart+0x23c>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	70da      	strb	r2, [r3, #3]
			HAL_UART_Transmit_IT(&huart7, txUart, 4);
 8001cb2:	2204      	movs	r2, #4
 8001cb4:	492d      	ldr	r1, [pc, #180]	; (8001d6c <check_rxUart+0x23c>)
 8001cb6:	482e      	ldr	r0, [pc, #184]	; (8001d70 <check_rxUart+0x240>)
 8001cb8:	f004 fa69 	bl	800618e <HAL_UART_Transmit_IT>
			//sprintf(txUart, "RETR");
		break;
 8001cbc:	e0cf      	b.n	8001e5e <check_rxUart+0x32e>
		case GIRO_IZQ:
			giroIzq_cant += (uint16_t) (rxUart[2] + (rxUart[1] << 8));
 8001cbe:	4b2a      	ldr	r3, [pc, #168]	; (8001d68 <check_rxUart+0x238>)
 8001cc0:	789b      	ldrb	r3, [r3, #2]
 8001cc2:	b29a      	uxth	r2, r3
 8001cc4:	4b28      	ldr	r3, [pc, #160]	; (8001d68 <check_rxUart+0x238>)
 8001cc6:	785b      	ldrb	r3, [r3, #1]
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	021b      	lsls	r3, r3, #8
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	4413      	add	r3, r2
 8001cd0:	b29a      	uxth	r2, r3
 8001cd2:	4b2e      	ldr	r3, [pc, #184]	; (8001d8c <check_rxUart+0x25c>)
 8001cd4:	881b      	ldrh	r3, [r3, #0]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	b29a      	uxth	r2, r3
 8001cda:	4b2c      	ldr	r3, [pc, #176]	; (8001d8c <check_rxUart+0x25c>)
 8001cdc:	801a      	strh	r2, [r3, #0]

			txUart[0] = OK_;
 8001cde:	4b23      	ldr	r3, [pc, #140]	; (8001d6c <check_rxUart+0x23c>)
 8001ce0:	2202      	movs	r2, #2
 8001ce2:	701a      	strb	r2, [r3, #0]
			txUart[3] = '\0';
 8001ce4:	4b21      	ldr	r3, [pc, #132]	; (8001d6c <check_rxUart+0x23c>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	70da      	strb	r2, [r3, #3]
			HAL_UART_Transmit_IT(&huart7, txUart, 4);
 8001cea:	2204      	movs	r2, #4
 8001cec:	491f      	ldr	r1, [pc, #124]	; (8001d6c <check_rxUart+0x23c>)
 8001cee:	4820      	ldr	r0, [pc, #128]	; (8001d70 <check_rxUart+0x240>)
 8001cf0:	f004 fa4d 	bl	800618e <HAL_UART_Transmit_IT>
			//sprintf(txUart, "IZQU");
		break;
 8001cf4:	e0b3      	b.n	8001e5e <check_rxUart+0x32e>
		case GIRO_DER:
			giroDer_cant += (uint16_t) (rxUart[2] + (rxUart[1] << 8));
 8001cf6:	4b1c      	ldr	r3, [pc, #112]	; (8001d68 <check_rxUart+0x238>)
 8001cf8:	789b      	ldrb	r3, [r3, #2]
 8001cfa:	b29a      	uxth	r2, r3
 8001cfc:	4b1a      	ldr	r3, [pc, #104]	; (8001d68 <check_rxUart+0x238>)
 8001cfe:	785b      	ldrb	r3, [r3, #1]
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	021b      	lsls	r3, r3, #8
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	4413      	add	r3, r2
 8001d08:	b29a      	uxth	r2, r3
 8001d0a:	4b21      	ldr	r3, [pc, #132]	; (8001d90 <check_rxUart+0x260>)
 8001d0c:	881b      	ldrh	r3, [r3, #0]
 8001d0e:	4413      	add	r3, r2
 8001d10:	b29a      	uxth	r2, r3
 8001d12:	4b1f      	ldr	r3, [pc, #124]	; (8001d90 <check_rxUart+0x260>)
 8001d14:	801a      	strh	r2, [r3, #0]

			txUart[0] = OK_;
 8001d16:	4b15      	ldr	r3, [pc, #84]	; (8001d6c <check_rxUart+0x23c>)
 8001d18:	2202      	movs	r2, #2
 8001d1a:	701a      	strb	r2, [r3, #0]
			txUart[3] = '\0';
 8001d1c:	4b13      	ldr	r3, [pc, #76]	; (8001d6c <check_rxUart+0x23c>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	70da      	strb	r2, [r3, #3]
			HAL_UART_Transmit_IT(&huart7, txUart, 4);
 8001d22:	2204      	movs	r2, #4
 8001d24:	4911      	ldr	r1, [pc, #68]	; (8001d6c <check_rxUart+0x23c>)
 8001d26:	4812      	ldr	r0, [pc, #72]	; (8001d70 <check_rxUart+0x240>)
 8001d28:	f004 fa31 	bl	800618e <HAL_UART_Transmit_IT>
			//sprintf(txUart, "DERE");
		break;
 8001d2c:	e097      	b.n	8001e5e <check_rxUart+0x32e>
		case VEL_AVANCE:
			mpu9265_Read_Accel(&mpu9265);
 8001d2e:	4819      	ldr	r0, [pc, #100]	; (8001d94 <check_rxUart+0x264>)
 8001d30:	f000 f96a 	bl	8002008 <mpu9265_Read_Accel>

			txUart[0] = VEL_AVANCE;
 8001d34:	4b0d      	ldr	r3, [pc, #52]	; (8001d6c <check_rxUart+0x23c>)
 8001d36:	2214      	movs	r2, #20
 8001d38:	701a      	strb	r2, [r3, #0]
			txUart[1] = (uint8_t)(mpu9265.Accel_X_RAW >> 8);
 8001d3a:	4b16      	ldr	r3, [pc, #88]	; (8001d94 <check_rxUart+0x264>)
 8001d3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d40:	121b      	asrs	r3, r3, #8
 8001d42:	b21b      	sxth	r3, r3
 8001d44:	b2da      	uxtb	r2, r3
 8001d46:	4b09      	ldr	r3, [pc, #36]	; (8001d6c <check_rxUart+0x23c>)
 8001d48:	705a      	strb	r2, [r3, #1]
			txUart[2] = (uint8_t)(mpu9265.Accel_X_RAW & 0xFF);
 8001d4a:	4b12      	ldr	r3, [pc, #72]	; (8001d94 <check_rxUart+0x264>)
 8001d4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d50:	b2da      	uxtb	r2, r3
 8001d52:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <check_rxUart+0x23c>)
 8001d54:	709a      	strb	r2, [r3, #2]
			txUart[3] = '\0';
 8001d56:	4b05      	ldr	r3, [pc, #20]	; (8001d6c <check_rxUart+0x23c>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	70da      	strb	r2, [r3, #3]
			HAL_UART_Transmit_IT(&huart7, txUart, 4);
 8001d5c:	2204      	movs	r2, #4
 8001d5e:	4903      	ldr	r1, [pc, #12]	; (8001d6c <check_rxUart+0x23c>)
 8001d60:	4803      	ldr	r0, [pc, #12]	; (8001d70 <check_rxUart+0x240>)
 8001d62:	f004 fa14 	bl	800618e <HAL_UART_Transmit_IT>
		break;
 8001d66:	e07a      	b.n	8001e5e <check_rxUart+0x32e>
 8001d68:	20000094 	.word	0x20000094
 8001d6c:	2000009c 	.word	0x2000009c
 8001d70:	20000238 	.word	0x20000238
 8001d74:	200000a0 	.word	0x200000a0
 8001d78:	20000000 	.word	0x20000000
 8001d7c:	200000ea 	.word	0x200000ea
 8001d80:	200000a1 	.word	0x200000a1
 8001d84:	200000b2 	.word	0x200000b2
 8001d88:	200000b4 	.word	0x200000b4
 8001d8c:	200000b6 	.word	0x200000b6
 8001d90:	200000b8 	.word	0x200000b8
 8001d94:	200000c0 	.word	0x200000c0
		case COORD_ANG:
			mpu9265_Read_Magnet(&mpu9265);
 8001d98:	4837      	ldr	r0, [pc, #220]	; (8001e78 <check_rxUart+0x348>)
 8001d9a:	f000 f969 	bl	8002070 <mpu9265_Read_Magnet>
			magX = mpu9265.Magnet_X_RAW;
 8001d9e:	4b36      	ldr	r3, [pc, #216]	; (8001e78 <check_rxUart+0x348>)
 8001da0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001da4:	ee07 3a90 	vmov	s15, r3
 8001da8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dac:	4b33      	ldr	r3, [pc, #204]	; (8001e7c <check_rxUart+0x34c>)
 8001dae:	edc3 7a00 	vstr	s15, [r3]
			magY = mpu9265.Magnet_Y_RAW;
 8001db2:	4b31      	ldr	r3, [pc, #196]	; (8001e78 <check_rxUart+0x348>)
 8001db4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001db8:	ee07 3a90 	vmov	s15, r3
 8001dbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dc0:	4b2f      	ldr	r3, [pc, #188]	; (8001e80 <check_rxUart+0x350>)
 8001dc2:	edc3 7a00 	vstr	s15, [r3]

			direccion_f32 = atan2f(magY, magX);
 8001dc6:	4b2e      	ldr	r3, [pc, #184]	; (8001e80 <check_rxUart+0x350>)
 8001dc8:	edd3 7a00 	vldr	s15, [r3]
 8001dcc:	4b2b      	ldr	r3, [pc, #172]	; (8001e7c <check_rxUart+0x34c>)
 8001dce:	ed93 7a00 	vldr	s14, [r3]
 8001dd2:	eef0 0a47 	vmov.f32	s1, s14
 8001dd6:	eeb0 0a67 	vmov.f32	s0, s15
 8001dda:	f005 f9ed 	bl	80071b8 <atan2f>
 8001dde:	eef0 7a40 	vmov.f32	s15, s0
 8001de2:	4b28      	ldr	r3, [pc, #160]	; (8001e84 <check_rxUart+0x354>)
 8001de4:	edc3 7a00 	vstr	s15, [r3]
			direccion_f32 *= (180.0/M_PI);
 8001de8:	4b26      	ldr	r3, [pc, #152]	; (8001e84 <check_rxUart+0x354>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7fe fc8d 	bl	800070c <__aeabi_f2d>
 8001df2:	a31f      	add	r3, pc, #124	; (adr r3, 8001e70 <check_rxUart+0x340>)
 8001df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df8:	f7fe f9fa 	bl	80001f0 <__aeabi_dmul>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	460b      	mov	r3, r1
 8001e00:	4610      	mov	r0, r2
 8001e02:	4619      	mov	r1, r3
 8001e04:	f7fe fcda 	bl	80007bc <__aeabi_d2f>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	4a1e      	ldr	r2, [pc, #120]	; (8001e84 <check_rxUart+0x354>)
 8001e0c:	6013      	str	r3, [r2, #0]
			direccion_i16 = direccion_f32/180;
 8001e0e:	4b1d      	ldr	r3, [pc, #116]	; (8001e84 <check_rxUart+0x354>)
 8001e10:	ed93 7a00 	vldr	s14, [r3]
 8001e14:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8001e88 <check_rxUart+0x358>
 8001e18:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e20:	ee17 3a90 	vmov	r3, s15
 8001e24:	b21a      	sxth	r2, r3
 8001e26:	4b19      	ldr	r3, [pc, #100]	; (8001e8c <check_rxUart+0x35c>)
 8001e28:	801a      	strh	r2, [r3, #0]

			txUart[0] = COORD_ANG;
 8001e2a:	4b19      	ldr	r3, [pc, #100]	; (8001e90 <check_rxUart+0x360>)
 8001e2c:	2208      	movs	r2, #8
 8001e2e:	701a      	strb	r2, [r3, #0]
			txUart[1] = (uint8_t)(direccion_i16 >> 8);
 8001e30:	4b16      	ldr	r3, [pc, #88]	; (8001e8c <check_rxUart+0x35c>)
 8001e32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e36:	121b      	asrs	r3, r3, #8
 8001e38:	b21b      	sxth	r3, r3
 8001e3a:	b2da      	uxtb	r2, r3
 8001e3c:	4b14      	ldr	r3, [pc, #80]	; (8001e90 <check_rxUart+0x360>)
 8001e3e:	705a      	strb	r2, [r3, #1]
			txUart[2] = (uint8_t)(direccion_i16 & 0xFF);
 8001e40:	4b12      	ldr	r3, [pc, #72]	; (8001e8c <check_rxUart+0x35c>)
 8001e42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e46:	b2da      	uxtb	r2, r3
 8001e48:	4b11      	ldr	r3, [pc, #68]	; (8001e90 <check_rxUart+0x360>)
 8001e4a:	709a      	strb	r2, [r3, #2]
			txUart[3] = '\0';
 8001e4c:	4b10      	ldr	r3, [pc, #64]	; (8001e90 <check_rxUart+0x360>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	70da      	strb	r2, [r3, #3]
			HAL_UART_Transmit_IT(&huart7, txUart, 4);
 8001e52:	2204      	movs	r2, #4
 8001e54:	490e      	ldr	r1, [pc, #56]	; (8001e90 <check_rxUart+0x360>)
 8001e56:	480f      	ldr	r0, [pc, #60]	; (8001e94 <check_rxUart+0x364>)
 8001e58:	f004 f999 	bl	800618e <HAL_UART_Transmit_IT>
		break;
 8001e5c:	bf00      	nop

	} //end switch rxUart[0]

	HAL_UART_Receive_IT(&huart7, rxUart, 4);
 8001e5e:	2204      	movs	r2, #4
 8001e60:	490d      	ldr	r1, [pc, #52]	; (8001e98 <check_rxUart+0x368>)
 8001e62:	480c      	ldr	r0, [pc, #48]	; (8001e94 <check_rxUart+0x364>)
 8001e64:	f004 f9d8 	bl	8006218 <HAL_UART_Receive_IT>

} //end check_rxUart ()
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	f3af 8000 	nop.w
 8001e70:	1a63c1f8 	.word	0x1a63c1f8
 8001e74:	404ca5dc 	.word	0x404ca5dc
 8001e78:	200000c0 	.word	0x200000c0
 8001e7c:	200000a4 	.word	0x200000a4
 8001e80:	200000a8 	.word	0x200000a8
 8001e84:	200000ac 	.word	0x200000ac
 8001e88:	43340000 	.word	0x43340000
 8001e8c:	200000b0 	.word	0x200000b0
 8001e90:	2000009c 	.word	0x2000009c
 8001e94:	20000238 	.word	0x20000238
 8001e98:	20000094 	.word	0x20000094

08001e9c <modo_funcionamiento>:

void modo_funcionamiento (void){
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0

	switch (modoFuncionamiento) {
 8001ea0:	4b08      	ldr	r3, [pc, #32]	; (8001ec4 <modo_funcionamiento+0x28>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d002      	beq.n	8001eae <modo_funcionamiento+0x12>
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d005      	beq.n	8001eb8 <modo_funcionamiento+0x1c>
		break;
		case MANUAL:
			movimientoRC();
		break;
		default:
		break;
 8001eac:	e007      	b.n	8001ebe <modo_funcionamiento+0x22>
			movimientoLibre();
 8001eae:	f7ff fa23 	bl	80012f8 <movimientoLibre>
			encoders();
 8001eb2:	f7ff fdcf 	bl	8001a54 <encoders>
		break;
 8001eb6:	e002      	b.n	8001ebe <modo_funcionamiento+0x22>
			movimientoRC();
 8001eb8:	f7ff fbb8 	bl	800162c <movimientoRC>
		break;
 8001ebc:	bf00      	nop
	} //end switch modoFuncionamiento

} //end modo_funcionamiento ()
 8001ebe:	bf00      	nop
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	20000000 	.word	0x20000000

08001ec8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001ecc:	bf00      	nop
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
	...

08001ed8 <mpu9265_Init>:
//#define MPU9250_ADDRESS 0x69  // Device address when ADO = 1
#define AK8963_ADDRESS 0x0C   //  Address of magnetometer

I2C_HandleTypeDef* hi2c_mpu;

void mpu9265_Init(I2C_HandleTypeDef* i2c_handler){
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b088      	sub	sp, #32
 8001edc:	af04      	add	r7, sp, #16
 8001ede:	6078      	str	r0, [r7, #4]
	uint8_t check, data;

	hi2c_mpu = i2c_handler;
 8001ee0:	4a48      	ldr	r2, [pc, #288]	; (8002004 <mpu9265_Init+0x12c>)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6013      	str	r3, [r2, #0]

	HAL_I2C_Mem_Read(hi2c_mpu, MPU9250_ADDRESS << 1, WHO_AM_I_MPU9250, 1, &check, 1, 1000);
 8001ee6:	4b47      	ldr	r3, [pc, #284]	; (8002004 <mpu9265_Init+0x12c>)
 8001ee8:	6818      	ldr	r0, [r3, #0]
 8001eea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eee:	9302      	str	r3, [sp, #8]
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	9301      	str	r3, [sp, #4]
 8001ef4:	f107 030f 	add.w	r3, r7, #15
 8001ef8:	9300      	str	r3, [sp, #0]
 8001efa:	2301      	movs	r3, #1
 8001efc:	2275      	movs	r2, #117	; 0x75
 8001efe:	21d0      	movs	r1, #208	; 0xd0
 8001f00:	f001 fbde 	bl	80036c0 <HAL_I2C_Mem_Read>

	if (check == 0X73){ //successfull respond
 8001f04:	7bfb      	ldrb	r3, [r7, #15]
 8001f06:	2b73      	cmp	r3, #115	; 0x73
 8001f08:	d141      	bne.n	8001f8e <mpu9265_Init+0xb6>
		data = 0;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(hi2c_mpu, MPU9250_ADDRESS << 1, PWR_MGMT_1, 1, &data, 1, 1000); //writing 0 in PWR_MGMT_1 reg to wake it up.
 8001f0e:	4b3d      	ldr	r3, [pc, #244]	; (8002004 <mpu9265_Init+0x12c>)
 8001f10:	6818      	ldr	r0, [r3, #0]
 8001f12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f16:	9302      	str	r3, [sp, #8]
 8001f18:	2301      	movs	r3, #1
 8001f1a:	9301      	str	r3, [sp, #4]
 8001f1c:	f107 030e 	add.w	r3, r7, #14
 8001f20:	9300      	str	r3, [sp, #0]
 8001f22:	2301      	movs	r3, #1
 8001f24:	226b      	movs	r2, #107	; 0x6b
 8001f26:	21d0      	movs	r1, #208	; 0xd0
 8001f28:	f001 fad0 	bl	80034cc <HAL_I2C_Mem_Write>

		data = 0X07;
 8001f2c:	2307      	movs	r3, #7
 8001f2e:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(hi2c_mpu, MPU9250_ADDRESS << 1, SMPLRT_DIV, 1, &data, 1, 1000); //seting data rate in 1kHz by writing 0x07 in SMPLRT_DIV reg.
 8001f30:	4b34      	ldr	r3, [pc, #208]	; (8002004 <mpu9265_Init+0x12c>)
 8001f32:	6818      	ldr	r0, [r3, #0]
 8001f34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f38:	9302      	str	r3, [sp, #8]
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	9301      	str	r3, [sp, #4]
 8001f3e:	f107 030e 	add.w	r3, r7, #14
 8001f42:	9300      	str	r3, [sp, #0]
 8001f44:	2301      	movs	r3, #1
 8001f46:	2219      	movs	r2, #25
 8001f48:	21d0      	movs	r1, #208	; 0xd0
 8001f4a:	f001 fabf 	bl	80034cc <HAL_I2C_Mem_Write>

		data = 0;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(hi2c_mpu, MPU9250_ADDRESS << 1, GYRO_CONFIG, 1, &data, 1, 1000); //SET GYROSCOPIC CONFIGURATION: XG_ST=0; YG_ST=0; ZG_ST=0; FS_SEL=0 -> +/- 250 º/s.
 8001f52:	4b2c      	ldr	r3, [pc, #176]	; (8002004 <mpu9265_Init+0x12c>)
 8001f54:	6818      	ldr	r0, [r3, #0]
 8001f56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f5a:	9302      	str	r3, [sp, #8]
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	9301      	str	r3, [sp, #4]
 8001f60:	f107 030e 	add.w	r3, r7, #14
 8001f64:	9300      	str	r3, [sp, #0]
 8001f66:	2301      	movs	r3, #1
 8001f68:	221b      	movs	r2, #27
 8001f6a:	21d0      	movs	r1, #208	; 0xd0
 8001f6c:	f001 faae 	bl	80034cc <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Write(hi2c_mpu, MPU9250_ADDRESS << 1, ACCEL_CONFIG, 1, &data, 1, 1000); //SET accelerometer CONFIGURATION: XA_ST=0; YA_ST=0; ZA_ST=0; FS_SEL=0 -> +/- 2g.
 8001f70:	4b24      	ldr	r3, [pc, #144]	; (8002004 <mpu9265_Init+0x12c>)
 8001f72:	6818      	ldr	r0, [r3, #0]
 8001f74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f78:	9302      	str	r3, [sp, #8]
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	9301      	str	r3, [sp, #4]
 8001f7e:	f107 030e 	add.w	r3, r7, #14
 8001f82:	9300      	str	r3, [sp, #0]
 8001f84:	2301      	movs	r3, #1
 8001f86:	221c      	movs	r2, #28
 8001f88:	21d0      	movs	r1, #208	; 0xd0
 8001f8a:	f001 fa9f 	bl	80034cc <HAL_I2C_Mem_Write>
	}else{
		//Error_Handler();
	}

	data = 0b10; //i2c bypass bit, in INT_PIN_CFG reg. (made to reach the magnetometer)
 8001f8e:	2302      	movs	r3, #2
 8001f90:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(hi2c_mpu, MPU9250_ADDRESS << 1, INT_PIN_CFG, 1, &data, 1, 1000);
 8001f92:	4b1c      	ldr	r3, [pc, #112]	; (8002004 <mpu9265_Init+0x12c>)
 8001f94:	6818      	ldr	r0, [r3, #0]
 8001f96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f9a:	9302      	str	r3, [sp, #8]
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	9301      	str	r3, [sp, #4]
 8001fa0:	f107 030e 	add.w	r3, r7, #14
 8001fa4:	9300      	str	r3, [sp, #0]
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	2237      	movs	r2, #55	; 0x37
 8001faa:	21d0      	movs	r1, #208	; 0xd0
 8001fac:	f001 fa8e 	bl	80034cc <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Read(hi2c_mpu, AK8963_ADDRESS << 1, WHO_AM_I_AK8963, 1, &check, 1, 1000);
 8001fb0:	4b14      	ldr	r3, [pc, #80]	; (8002004 <mpu9265_Init+0x12c>)
 8001fb2:	6818      	ldr	r0, [r3, #0]
 8001fb4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fb8:	9302      	str	r3, [sp, #8]
 8001fba:	2301      	movs	r3, #1
 8001fbc:	9301      	str	r3, [sp, #4]
 8001fbe:	f107 030f 	add.w	r3, r7, #15
 8001fc2:	9300      	str	r3, [sp, #0]
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	2118      	movs	r1, #24
 8001fca:	f001 fb79 	bl	80036c0 <HAL_I2C_Mem_Read>
	HAL_Delay(1);
 8001fce:	2001      	movs	r0, #1
 8001fd0:	f000 fd94 	bl	8002afc <HAL_Delay>
	if (check == 0X48){ //successfull respond
 8001fd4:	7bfb      	ldrb	r3, [r7, #15]
 8001fd6:	2b48      	cmp	r3, #72	; 0x48
 8001fd8:	d110      	bne.n	8001ffc <mpu9265_Init+0x124>
		data = 0B00110;// 0b10110: 0001 (MSB, 16 bit resolution) 0110 (LSB, 100Hz sample rate).
 8001fda:	2306      	movs	r3, #6
 8001fdc:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(hi2c_mpu, AK8963_ADDRESS << 1, AK8963_CNTL, 1, &data, 1, 1000); //
 8001fde:	4b09      	ldr	r3, [pc, #36]	; (8002004 <mpu9265_Init+0x12c>)
 8001fe0:	6818      	ldr	r0, [r3, #0]
 8001fe2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fe6:	9302      	str	r3, [sp, #8]
 8001fe8:	2301      	movs	r3, #1
 8001fea:	9301      	str	r3, [sp, #4]
 8001fec:	f107 030e 	add.w	r3, r7, #14
 8001ff0:	9300      	str	r3, [sp, #0]
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	220a      	movs	r2, #10
 8001ff6:	2118      	movs	r1, #24
 8001ff8:	f001 fa68 	bl	80034cc <HAL_I2C_Mem_Write>
		//Error_Handler();
	}



}
 8001ffc:	bf00      	nop
 8001ffe:	3710      	adds	r7, #16
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	200000f4 	.word	0x200000f4

08002008 <mpu9265_Read_Accel>:

void mpu9265_Read_Accel(mpuData_t* mpuData){
 8002008:	b580      	push	{r7, lr}
 800200a:	b088      	sub	sp, #32
 800200c:	af04      	add	r7, sp, #16
 800200e:	6078      	str	r0, [r7, #4]

	uint8_t data[6];

	HAL_I2C_Mem_Read(hi2c_mpu, MPU9250_ADDRESS << 1, ACCEL_XOUT_H, 1, data, 6, 1000);
 8002010:	4b16      	ldr	r3, [pc, #88]	; (800206c <mpu9265_Read_Accel+0x64>)
 8002012:	6818      	ldr	r0, [r3, #0]
 8002014:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002018:	9302      	str	r3, [sp, #8]
 800201a:	2306      	movs	r3, #6
 800201c:	9301      	str	r3, [sp, #4]
 800201e:	f107 0308 	add.w	r3, r7, #8
 8002022:	9300      	str	r3, [sp, #0]
 8002024:	2301      	movs	r3, #1
 8002026:	223b      	movs	r2, #59	; 0x3b
 8002028:	21d0      	movs	r1, #208	; 0xd0
 800202a:	f001 fb49 	bl	80036c0 <HAL_I2C_Mem_Read>
	mpuData->Accel_X_RAW = (uint16_t) ( data[0]<<8 | data[1] );
 800202e:	7a3b      	ldrb	r3, [r7, #8]
 8002030:	021b      	lsls	r3, r3, #8
 8002032:	b21a      	sxth	r2, r3
 8002034:	7a7b      	ldrb	r3, [r7, #9]
 8002036:	b21b      	sxth	r3, r3
 8002038:	4313      	orrs	r3, r2
 800203a:	b21a      	sxth	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	801a      	strh	r2, [r3, #0]
	mpuData->Accel_Y_RAW = (uint16_t) ( data[2]<<8 | data[3] );
 8002040:	7abb      	ldrb	r3, [r7, #10]
 8002042:	021b      	lsls	r3, r3, #8
 8002044:	b21a      	sxth	r2, r3
 8002046:	7afb      	ldrb	r3, [r7, #11]
 8002048:	b21b      	sxth	r3, r3
 800204a:	4313      	orrs	r3, r2
 800204c:	b21a      	sxth	r2, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	805a      	strh	r2, [r3, #2]
	mpuData->Accel_Z_RAW = (uint16_t) ( data[4]<<8 | data[5] );
 8002052:	7b3b      	ldrb	r3, [r7, #12]
 8002054:	021b      	lsls	r3, r3, #8
 8002056:	b21a      	sxth	r2, r3
 8002058:	7b7b      	ldrb	r3, [r7, #13]
 800205a:	b21b      	sxth	r3, r3
 800205c:	4313      	orrs	r3, r2
 800205e:	b21a      	sxth	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	809a      	strh	r2, [r3, #4]
}
 8002064:	bf00      	nop
 8002066:	3710      	adds	r7, #16
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	200000f4 	.word	0x200000f4

08002070 <mpu9265_Read_Magnet>:
	mpuData->Gyro_X_RAW = (uint16_t) ( data[0]<<8 | data[1] );
	mpuData->Gyro_Y_RAW = (uint16_t) ( data[2]<<8 | data[3] );
	mpuData->Gyro_Z_RAW = (uint16_t) ( data[4]<<8 | data[5] );
}

void mpu9265_Read_Magnet(mpuData_t* mpuData){
 8002070:	b580      	push	{r7, lr}
 8002072:	b088      	sub	sp, #32
 8002074:	af04      	add	r7, sp, #16
 8002076:	6078      	str	r0, [r7, #4]

	uint8_t ready, data[7];

	HAL_I2C_Mem_Read(hi2c_mpu, AK8963_ADDRESS << 1, AK8963_ST1, 1, &ready, 1, 1000);
 8002078:	4b22      	ldr	r3, [pc, #136]	; (8002104 <mpu9265_Read_Magnet+0x94>)
 800207a:	6818      	ldr	r0, [r3, #0]
 800207c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002080:	9302      	str	r3, [sp, #8]
 8002082:	2301      	movs	r3, #1
 8002084:	9301      	str	r3, [sp, #4]
 8002086:	f107 030f 	add.w	r3, r7, #15
 800208a:	9300      	str	r3, [sp, #0]
 800208c:	2301      	movs	r3, #1
 800208e:	2202      	movs	r2, #2
 8002090:	2118      	movs	r1, #24
 8002092:	f001 fb15 	bl	80036c0 <HAL_I2C_Mem_Read>

	if (ready){
 8002096:	7bfb      	ldrb	r3, [r7, #15]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d02e      	beq.n	80020fa <mpu9265_Read_Magnet+0x8a>
		HAL_I2C_Mem_Read(hi2c_mpu, AK8963_ADDRESS << 1, AK8963_XOUT_L, 1, data, 7, 1000);
 800209c:	4b19      	ldr	r3, [pc, #100]	; (8002104 <mpu9265_Read_Magnet+0x94>)
 800209e:	6818      	ldr	r0, [r3, #0]
 80020a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020a4:	9302      	str	r3, [sp, #8]
 80020a6:	2307      	movs	r3, #7
 80020a8:	9301      	str	r3, [sp, #4]
 80020aa:	f107 0308 	add.w	r3, r7, #8
 80020ae:	9300      	str	r3, [sp, #0]
 80020b0:	2301      	movs	r3, #1
 80020b2:	2203      	movs	r2, #3
 80020b4:	2118      	movs	r1, #24
 80020b6:	f001 fb03 	bl	80036c0 <HAL_I2C_Mem_Read>
		if (!(data[6] & 0x08)){// Check if magnetic sensor overflow set, if not then report data
 80020ba:	7bbb      	ldrb	r3, [r7, #14]
 80020bc:	f003 0308 	and.w	r3, r3, #8
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d11a      	bne.n	80020fa <mpu9265_Read_Magnet+0x8a>
			mpuData->Magnet_X_RAW = (uint16_t) ( data[1]<<8 | data[0] );
 80020c4:	7a7b      	ldrb	r3, [r7, #9]
 80020c6:	021b      	lsls	r3, r3, #8
 80020c8:	b21a      	sxth	r2, r3
 80020ca:	7a3b      	ldrb	r3, [r7, #8]
 80020cc:	b21b      	sxth	r3, r3
 80020ce:	4313      	orrs	r3, r2
 80020d0:	b21a      	sxth	r2, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	819a      	strh	r2, [r3, #12]
			mpuData->Magnet_Y_RAW = (uint16_t) ( data[3]<<8 | data[2] );
 80020d6:	7afb      	ldrb	r3, [r7, #11]
 80020d8:	021b      	lsls	r3, r3, #8
 80020da:	b21a      	sxth	r2, r3
 80020dc:	7abb      	ldrb	r3, [r7, #10]
 80020de:	b21b      	sxth	r3, r3
 80020e0:	4313      	orrs	r3, r2
 80020e2:	b21a      	sxth	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	81da      	strh	r2, [r3, #14]
			mpuData->Magnet_Z_RAW = (uint16_t) ( data[5]<<8 | data[4] );
 80020e8:	7b7b      	ldrb	r3, [r7, #13]
 80020ea:	021b      	lsls	r3, r3, #8
 80020ec:	b21a      	sxth	r2, r3
 80020ee:	7b3b      	ldrb	r3, [r7, #12]
 80020f0:	b21b      	sxth	r3, r3
 80020f2:	4313      	orrs	r3, r2
 80020f4:	b21a      	sxth	r2, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	821a      	strh	r2, [r3, #16]
		}
	}
}
 80020fa:	bf00      	nop
 80020fc:	3710      	adds	r7, #16
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	200000f4 	.word	0x200000f4

08002108 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800210e:	2300      	movs	r3, #0
 8002110:	607b      	str	r3, [r7, #4]
 8002112:	4b10      	ldr	r3, [pc, #64]	; (8002154 <HAL_MspInit+0x4c>)
 8002114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002116:	4a0f      	ldr	r2, [pc, #60]	; (8002154 <HAL_MspInit+0x4c>)
 8002118:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800211c:	6453      	str	r3, [r2, #68]	; 0x44
 800211e:	4b0d      	ldr	r3, [pc, #52]	; (8002154 <HAL_MspInit+0x4c>)
 8002120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002122:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002126:	607b      	str	r3, [r7, #4]
 8002128:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800212a:	2300      	movs	r3, #0
 800212c:	603b      	str	r3, [r7, #0]
 800212e:	4b09      	ldr	r3, [pc, #36]	; (8002154 <HAL_MspInit+0x4c>)
 8002130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002132:	4a08      	ldr	r2, [pc, #32]	; (8002154 <HAL_MspInit+0x4c>)
 8002134:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002138:	6413      	str	r3, [r2, #64]	; 0x40
 800213a:	4b06      	ldr	r3, [pc, #24]	; (8002154 <HAL_MspInit+0x4c>)
 800213c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002142:	603b      	str	r3, [r7, #0]
 8002144:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002146:	bf00      	nop
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	40023800 	.word	0x40023800

08002158 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800215c:	bf00      	nop
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr

08002166 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002166:	b480      	push	{r7}
 8002168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800216a:	e7fe      	b.n	800216a <HardFault_Handler+0x4>

0800216c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002170:	e7fe      	b.n	8002170 <MemManage_Handler+0x4>

08002172 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002172:	b480      	push	{r7}
 8002174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002176:	e7fe      	b.n	8002176 <BusFault_Handler+0x4>

08002178 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800217c:	e7fe      	b.n	800217c <UsageFault_Handler+0x4>

0800217e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800217e:	b480      	push	{r7}
 8002180:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002182:	bf00      	nop
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002190:	bf00      	nop
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr

0800219a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800219a:	b480      	push	{r7}
 800219c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800219e:	bf00      	nop
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021ac:	f000 fc86 	bl	8002abc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021b0:	bf00      	nop
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80021b8:	4802      	ldr	r0, [pc, #8]	; (80021c4 <TIM5_IRQHandler+0x10>)
 80021ba:	f002 fedf 	bl	8004f7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80021be:	bf00      	nop
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	200001b8 	.word	0x200001b8

080021c8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80021cc:	4802      	ldr	r0, [pc, #8]	; (80021d8 <TIM7_IRQHandler+0x10>)
 80021ce:	f002 fed5 	bl	8004f7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80021d2:	bf00      	nop
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	200001f8 	.word	0x200001f8

080021dc <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 80021e0:	4802      	ldr	r0, [pc, #8]	; (80021ec <UART7_IRQHandler+0x10>)
 80021e2:	f004 f86f 	bl	80062c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 80021e6:	bf00      	nop
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	20000238 	.word	0x20000238

080021f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021f4:	4b08      	ldr	r3, [pc, #32]	; (8002218 <SystemInit+0x28>)
 80021f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021fa:	4a07      	ldr	r2, [pc, #28]	; (8002218 <SystemInit+0x28>)
 80021fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002200:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002204:	4b04      	ldr	r3, [pc, #16]	; (8002218 <SystemInit+0x28>)
 8002206:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800220a:	609a      	str	r2, [r3, #8]
#endif
}
 800220c:	bf00      	nop
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	e000ed00 	.word	0xe000ed00

0800221c <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b086      	sub	sp, #24
 8002220:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002222:	f107 0308 	add.w	r3, r7, #8
 8002226:	2200      	movs	r2, #0
 8002228:	601a      	str	r2, [r3, #0]
 800222a:	605a      	str	r2, [r3, #4]
 800222c:	609a      	str	r2, [r3, #8]
 800222e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002230:	463b      	mov	r3, r7
 8002232:	2200      	movs	r2, #0
 8002234:	601a      	str	r2, [r3, #0]
 8002236:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8002238:	4b20      	ldr	r3, [pc, #128]	; (80022bc <MX_TIM2_Init+0xa0>)
 800223a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800223e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002240:	4b1e      	ldr	r3, [pc, #120]	; (80022bc <MX_TIM2_Init+0xa0>)
 8002242:	2200      	movs	r2, #0
 8002244:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002246:	4b1d      	ldr	r3, [pc, #116]	; (80022bc <MX_TIM2_Init+0xa0>)
 8002248:	2200      	movs	r2, #0
 800224a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800224c:	4b1b      	ldr	r3, [pc, #108]	; (80022bc <MX_TIM2_Init+0xa0>)
 800224e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002252:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002254:	4b19      	ldr	r3, [pc, #100]	; (80022bc <MX_TIM2_Init+0xa0>)
 8002256:	2200      	movs	r2, #0
 8002258:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800225a:	4b18      	ldr	r3, [pc, #96]	; (80022bc <MX_TIM2_Init+0xa0>)
 800225c:	2200      	movs	r2, #0
 800225e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002260:	4816      	ldr	r0, [pc, #88]	; (80022bc <MX_TIM2_Init+0xa0>)
 8002262:	f002 fd07 	bl	8004c74 <HAL_TIM_Base_Init>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800226c:	f7ff fe2c 	bl	8001ec8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8002270:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002274:	60bb      	str	r3, [r7, #8]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8002276:	2300      	movs	r3, #0
 8002278:	60fb      	str	r3, [r7, #12]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 800227a:	2300      	movs	r3, #0
 800227c:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockFilter = 0;
 800227e:	2300      	movs	r3, #0
 8002280:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002282:	f107 0308 	add.w	r3, r7, #8
 8002286:	4619      	mov	r1, r3
 8002288:	480c      	ldr	r0, [pc, #48]	; (80022bc <MX_TIM2_Init+0xa0>)
 800228a:	f003 f8e1 	bl	8005450 <HAL_TIM_ConfigClockSource>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8002294:	f7ff fe18 	bl	8001ec8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002298:	2300      	movs	r3, #0
 800229a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800229c:	2300      	movs	r3, #0
 800229e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80022a0:	463b      	mov	r3, r7
 80022a2:	4619      	mov	r1, r3
 80022a4:	4805      	ldr	r0, [pc, #20]	; (80022bc <MX_TIM2_Init+0xa0>)
 80022a6:	f003 fdef 	bl	8005e88 <HAL_TIMEx_MasterConfigSynchronization>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80022b0:	f7ff fe0a 	bl	8001ec8 <Error_Handler>
  }

}
 80022b4:	bf00      	nop
 80022b6:	3718      	adds	r7, #24
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	200000f8 	.word	0x200000f8

080022c0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022c6:	f107 0308 	add.w	r3, r7, #8
 80022ca:	2200      	movs	r2, #0
 80022cc:	601a      	str	r2, [r3, #0]
 80022ce:	605a      	str	r2, [r3, #4]
 80022d0:	609a      	str	r2, [r3, #8]
 80022d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022d4:	463b      	mov	r3, r7
 80022d6:	2200      	movs	r2, #0
 80022d8:	601a      	str	r2, [r3, #0]
 80022da:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 80022dc:	4b20      	ldr	r3, [pc, #128]	; (8002360 <MX_TIM3_Init+0xa0>)
 80022de:	4a21      	ldr	r2, [pc, #132]	; (8002364 <MX_TIM3_Init+0xa4>)
 80022e0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80022e2:	4b1f      	ldr	r3, [pc, #124]	; (8002360 <MX_TIM3_Init+0xa0>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022e8:	4b1d      	ldr	r3, [pc, #116]	; (8002360 <MX_TIM3_Init+0xa0>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80022ee:	4b1c      	ldr	r3, [pc, #112]	; (8002360 <MX_TIM3_Init+0xa0>)
 80022f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022f4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022f6:	4b1a      	ldr	r3, [pc, #104]	; (8002360 <MX_TIM3_Init+0xa0>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022fc:	4b18      	ldr	r3, [pc, #96]	; (8002360 <MX_TIM3_Init+0xa0>)
 80022fe:	2200      	movs	r2, #0
 8002300:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002302:	4817      	ldr	r0, [pc, #92]	; (8002360 <MX_TIM3_Init+0xa0>)
 8002304:	f002 fcb6 	bl	8004c74 <HAL_TIM_Base_Init>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800230e:	f7ff fddb 	bl	8001ec8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8002312:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002316:	60bb      	str	r3, [r7, #8]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8002318:	2300      	movs	r3, #0
 800231a:	60fb      	str	r3, [r7, #12]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 800231c:	2300      	movs	r3, #0
 800231e:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockFilter = 0;
 8002320:	2300      	movs	r3, #0
 8002322:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002324:	f107 0308 	add.w	r3, r7, #8
 8002328:	4619      	mov	r1, r3
 800232a:	480d      	ldr	r0, [pc, #52]	; (8002360 <MX_TIM3_Init+0xa0>)
 800232c:	f003 f890 	bl	8005450 <HAL_TIM_ConfigClockSource>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8002336:	f7ff fdc7 	bl	8001ec8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800233a:	2300      	movs	r3, #0
 800233c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800233e:	2300      	movs	r3, #0
 8002340:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002342:	463b      	mov	r3, r7
 8002344:	4619      	mov	r1, r3
 8002346:	4806      	ldr	r0, [pc, #24]	; (8002360 <MX_TIM3_Init+0xa0>)
 8002348:	f003 fd9e 	bl	8005e88 <HAL_TIMEx_MasterConfigSynchronization>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8002352:	f7ff fdb9 	bl	8001ec8 <Error_Handler>
  }

}
 8002356:	bf00      	nop
 8002358:	3718      	adds	r7, #24
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	20000138 	.word	0x20000138
 8002364:	40000400 	.word	0x40000400

08002368 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b08e      	sub	sp, #56	; 0x38
 800236c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800236e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002372:	2200      	movs	r2, #0
 8002374:	601a      	str	r2, [r3, #0]
 8002376:	605a      	str	r2, [r3, #4]
 8002378:	609a      	str	r2, [r3, #8]
 800237a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800237c:	f107 0320 	add.w	r3, r7, #32
 8002380:	2200      	movs	r2, #0
 8002382:	601a      	str	r2, [r3, #0]
 8002384:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002386:	1d3b      	adds	r3, r7, #4
 8002388:	2200      	movs	r2, #0
 800238a:	601a      	str	r2, [r3, #0]
 800238c:	605a      	str	r2, [r3, #4]
 800238e:	609a      	str	r2, [r3, #8]
 8002390:	60da      	str	r2, [r3, #12]
 8002392:	611a      	str	r2, [r3, #16]
 8002394:	615a      	str	r2, [r3, #20]
 8002396:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8002398:	4b31      	ldr	r3, [pc, #196]	; (8002460 <MX_TIM4_Init+0xf8>)
 800239a:	4a32      	ldr	r2, [pc, #200]	; (8002464 <MX_TIM4_Init+0xfc>)
 800239c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 15-1;
 800239e:	4b30      	ldr	r3, [pc, #192]	; (8002460 <MX_TIM4_Init+0xf8>)
 80023a0:	220e      	movs	r2, #14
 80023a2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023a4:	4b2e      	ldr	r3, [pc, #184]	; (8002460 <MX_TIM4_Init+0xf8>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 200-1;
 80023aa:	4b2d      	ldr	r3, [pc, #180]	; (8002460 <MX_TIM4_Init+0xf8>)
 80023ac:	22c7      	movs	r2, #199	; 0xc7
 80023ae:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023b0:	4b2b      	ldr	r3, [pc, #172]	; (8002460 <MX_TIM4_Init+0xf8>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023b6:	4b2a      	ldr	r3, [pc, #168]	; (8002460 <MX_TIM4_Init+0xf8>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80023bc:	4828      	ldr	r0, [pc, #160]	; (8002460 <MX_TIM4_Init+0xf8>)
 80023be:	f002 fc59 	bl	8004c74 <HAL_TIM_Base_Init>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 80023c8:	f7ff fd7e 	bl	8001ec8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023d0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80023d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023d6:	4619      	mov	r1, r3
 80023d8:	4821      	ldr	r0, [pc, #132]	; (8002460 <MX_TIM4_Init+0xf8>)
 80023da:	f003 f839 	bl	8005450 <HAL_TIM_ConfigClockSource>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 80023e4:	f7ff fd70 	bl	8001ec8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80023e8:	481d      	ldr	r0, [pc, #116]	; (8002460 <MX_TIM4_Init+0xf8>)
 80023ea:	f002 fcb6 	bl	8004d5a <HAL_TIM_PWM_Init>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 80023f4:	f7ff fd68 	bl	8001ec8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023f8:	2300      	movs	r3, #0
 80023fa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023fc:	2300      	movs	r3, #0
 80023fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002400:	f107 0320 	add.w	r3, r7, #32
 8002404:	4619      	mov	r1, r3
 8002406:	4816      	ldr	r0, [pc, #88]	; (8002460 <MX_TIM4_Init+0xf8>)
 8002408:	f003 fd3e 	bl	8005e88 <HAL_TIMEx_MasterConfigSynchronization>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8002412:	f7ff fd59 	bl	8001ec8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002416:	2360      	movs	r3, #96	; 0x60
 8002418:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 72-1;
 800241a:	2347      	movs	r3, #71	; 0x47
 800241c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800241e:	2300      	movs	r3, #0
 8002420:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002422:	2300      	movs	r3, #0
 8002424:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002426:	1d3b      	adds	r3, r7, #4
 8002428:	2200      	movs	r2, #0
 800242a:	4619      	mov	r1, r3
 800242c:	480c      	ldr	r0, [pc, #48]	; (8002460 <MX_TIM4_Init+0xf8>)
 800242e:	f002 ff49 	bl	80052c4 <HAL_TIM_PWM_ConfigChannel>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8002438:	f7ff fd46 	bl	8001ec8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800243c:	1d3b      	adds	r3, r7, #4
 800243e:	2204      	movs	r2, #4
 8002440:	4619      	mov	r1, r3
 8002442:	4807      	ldr	r0, [pc, #28]	; (8002460 <MX_TIM4_Init+0xf8>)
 8002444:	f002 ff3e 	bl	80052c4 <HAL_TIM_PWM_ConfigChannel>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <MX_TIM4_Init+0xea>
  {
    Error_Handler();
 800244e:	f7ff fd3b 	bl	8001ec8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8002452:	4803      	ldr	r0, [pc, #12]	; (8002460 <MX_TIM4_Init+0xf8>)
 8002454:	f000 f9d8 	bl	8002808 <HAL_TIM_MspPostInit>

}
 8002458:	bf00      	nop
 800245a:	3738      	adds	r7, #56	; 0x38
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	20000178 	.word	0x20000178
 8002464:	40000800 	.word	0x40000800

08002468 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b092      	sub	sp, #72	; 0x48
 800246c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800246e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002472:	2200      	movs	r2, #0
 8002474:	601a      	str	r2, [r3, #0]
 8002476:	605a      	str	r2, [r3, #4]
 8002478:	609a      	str	r2, [r3, #8]
 800247a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800247c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002480:	2200      	movs	r2, #0
 8002482:	601a      	str	r2, [r3, #0]
 8002484:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002486:	f107 0314 	add.w	r3, r7, #20
 800248a:	2200      	movs	r2, #0
 800248c:	601a      	str	r2, [r3, #0]
 800248e:	605a      	str	r2, [r3, #4]
 8002490:	609a      	str	r2, [r3, #8]
 8002492:	60da      	str	r2, [r3, #12]
 8002494:	611a      	str	r2, [r3, #16]
 8002496:	615a      	str	r2, [r3, #20]
 8002498:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800249a:	1d3b      	adds	r3, r7, #4
 800249c:	2200      	movs	r2, #0
 800249e:	601a      	str	r2, [r3, #0]
 80024a0:	605a      	str	r2, [r3, #4]
 80024a2:	609a      	str	r2, [r3, #8]
 80024a4:	60da      	str	r2, [r3, #12]

  htim5.Instance = TIM5;
 80024a6:	4b43      	ldr	r3, [pc, #268]	; (80025b4 <MX_TIM5_Init+0x14c>)
 80024a8:	4a43      	ldr	r2, [pc, #268]	; (80025b8 <MX_TIM5_Init+0x150>)
 80024aa:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 90-1;
 80024ac:	4b41      	ldr	r3, [pc, #260]	; (80025b4 <MX_TIM5_Init+0x14c>)
 80024ae:	2259      	movs	r2, #89	; 0x59
 80024b0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024b2:	4b40      	ldr	r3, [pc, #256]	; (80025b4 <MX_TIM5_Init+0x14c>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80024b8:	4b3e      	ldr	r3, [pc, #248]	; (80025b4 <MX_TIM5_Init+0x14c>)
 80024ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80024be:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024c0:	4b3c      	ldr	r3, [pc, #240]	; (80025b4 <MX_TIM5_Init+0x14c>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024c6:	4b3b      	ldr	r3, [pc, #236]	; (80025b4 <MX_TIM5_Init+0x14c>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80024cc:	4839      	ldr	r0, [pc, #228]	; (80025b4 <MX_TIM5_Init+0x14c>)
 80024ce:	f002 fbd1 	bl	8004c74 <HAL_TIM_Base_Init>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 80024d8:	f7ff fcf6 	bl	8001ec8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024e0:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80024e2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80024e6:	4619      	mov	r1, r3
 80024e8:	4832      	ldr	r0, [pc, #200]	; (80025b4 <MX_TIM5_Init+0x14c>)
 80024ea:	f002 ffb1 	bl	8005450 <HAL_TIM_ConfigClockSource>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 80024f4:	f7ff fce8 	bl	8001ec8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80024f8:	482e      	ldr	r0, [pc, #184]	; (80025b4 <MX_TIM5_Init+0x14c>)
 80024fa:	f002 fc2e 	bl	8004d5a <HAL_TIM_PWM_Init>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <MX_TIM5_Init+0xa0>
  {
    Error_Handler();
 8002504:	f7ff fce0 	bl	8001ec8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8002508:	482a      	ldr	r0, [pc, #168]	; (80025b4 <MX_TIM5_Init+0x14c>)
 800250a:	f002 fc99 	bl	8004e40 <HAL_TIM_IC_Init>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8002514:	f7ff fcd8 	bl	8001ec8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002518:	2300      	movs	r3, #0
 800251a:	633b      	str	r3, [r7, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800251c:	2300      	movs	r3, #0
 800251e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002520:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002524:	4619      	mov	r1, r3
 8002526:	4823      	ldr	r0, [pc, #140]	; (80025b4 <MX_TIM5_Init+0x14c>)
 8002528:	f003 fcae 	bl	8005e88 <HAL_TIMEx_MasterConfigSynchronization>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <MX_TIM5_Init+0xce>
  {
    Error_Handler();
 8002532:	f7ff fcc9 	bl	8001ec8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002536:	2360      	movs	r3, #96	; 0x60
 8002538:	617b      	str	r3, [r7, #20]
  sConfigOC.Pulse = 0xFFFFFFF5;
 800253a:	f06f 030a 	mvn.w	r3, #10
 800253e:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8002540:	2302      	movs	r3, #2
 8002542:	61fb      	str	r3, [r7, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002544:	2300      	movs	r3, #0
 8002546:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002548:	f107 0314 	add.w	r3, r7, #20
 800254c:	2200      	movs	r2, #0
 800254e:	4619      	mov	r1, r3
 8002550:	4818      	ldr	r0, [pc, #96]	; (80025b4 <MX_TIM5_Init+0x14c>)
 8002552:	f002 feb7 	bl	80052c4 <HAL_TIM_PWM_ConfigChannel>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <MX_TIM5_Init+0xf8>
  {
    Error_Handler();
 800255c:	f7ff fcb4 	bl	8001ec8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002560:	2300      	movs	r3, #0
 8002562:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002564:	2301      	movs	r3, #1
 8002566:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002568:	2300      	movs	r3, #0
 800256a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800256c:	2300      	movs	r3, #0
 800256e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002570:	1d3b      	adds	r3, r7, #4
 8002572:	2208      	movs	r2, #8
 8002574:	4619      	mov	r1, r3
 8002576:	480f      	ldr	r0, [pc, #60]	; (80025b4 <MX_TIM5_Init+0x14c>)
 8002578:	f002 fe08 	bl	800518c <HAL_TIM_IC_ConfigChannel>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d001      	beq.n	8002586 <MX_TIM5_Init+0x11e>
  {
    Error_Handler();
 8002582:	f7ff fca1 	bl	8001ec8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002586:	2302      	movs	r3, #2
 8002588:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800258a:	2302      	movs	r3, #2
 800258c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800258e:	1d3b      	adds	r3, r7, #4
 8002590:	220c      	movs	r2, #12
 8002592:	4619      	mov	r1, r3
 8002594:	4807      	ldr	r0, [pc, #28]	; (80025b4 <MX_TIM5_Init+0x14c>)
 8002596:	f002 fdf9 	bl	800518c <HAL_TIM_IC_ConfigChannel>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <MX_TIM5_Init+0x13c>
  {
    Error_Handler();
 80025a0:	f7ff fc92 	bl	8001ec8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim5);
 80025a4:	4803      	ldr	r0, [pc, #12]	; (80025b4 <MX_TIM5_Init+0x14c>)
 80025a6:	f000 f92f 	bl	8002808 <HAL_TIM_MspPostInit>

}
 80025aa:	bf00      	nop
 80025ac:	3748      	adds	r7, #72	; 0x48
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	200001b8 	.word	0x200001b8
 80025b8:	40000c00 	.word	0x40000c00

080025bc <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025c2:	463b      	mov	r3, r7
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]
 80025c8:	605a      	str	r2, [r3, #4]

  htim7.Instance = TIM7;
 80025ca:	4b15      	ldr	r3, [pc, #84]	; (8002620 <MX_TIM7_Init+0x64>)
 80025cc:	4a15      	ldr	r2, [pc, #84]	; (8002624 <MX_TIM7_Init+0x68>)
 80025ce:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 900-1;
 80025d0:	4b13      	ldr	r3, [pc, #76]	; (8002620 <MX_TIM7_Init+0x64>)
 80025d2:	f240 3283 	movw	r2, #899	; 0x383
 80025d6:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025d8:	4b11      	ldr	r3, [pc, #68]	; (8002620 <MX_TIM7_Init+0x64>)
 80025da:	2200      	movs	r2, #0
 80025dc:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 80025de:	4b10      	ldr	r3, [pc, #64]	; (8002620 <MX_TIM7_Init+0x64>)
 80025e0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80025e4:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025e6:	4b0e      	ldr	r3, [pc, #56]	; (8002620 <MX_TIM7_Init+0x64>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80025ec:	480c      	ldr	r0, [pc, #48]	; (8002620 <MX_TIM7_Init+0x64>)
 80025ee:	f002 fb41 	bl	8004c74 <HAL_TIM_Base_Init>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80025f8:	f7ff fc66 	bl	8001ec8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025fc:	2300      	movs	r3, #0
 80025fe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002600:	2300      	movs	r3, #0
 8002602:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002604:	463b      	mov	r3, r7
 8002606:	4619      	mov	r1, r3
 8002608:	4805      	ldr	r0, [pc, #20]	; (8002620 <MX_TIM7_Init+0x64>)
 800260a:	f003 fc3d 	bl	8005e88 <HAL_TIMEx_MasterConfigSynchronization>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8002614:	f7ff fc58 	bl	8001ec8 <Error_Handler>
  }

}
 8002618:	bf00      	nop
 800261a:	3708      	adds	r7, #8
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	200001f8 	.word	0x200001f8
 8002624:	40001400 	.word	0x40001400

08002628 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b090      	sub	sp, #64	; 0x40
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002630:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002634:	2200      	movs	r2, #0
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	605a      	str	r2, [r3, #4]
 800263a:	609a      	str	r2, [r3, #8]
 800263c:	60da      	str	r2, [r3, #12]
 800263e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002648:	d12d      	bne.n	80026a6 <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800264a:	2300      	movs	r3, #0
 800264c:	62bb      	str	r3, [r7, #40]	; 0x28
 800264e:	4b66      	ldr	r3, [pc, #408]	; (80027e8 <HAL_TIM_Base_MspInit+0x1c0>)
 8002650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002652:	4a65      	ldr	r2, [pc, #404]	; (80027e8 <HAL_TIM_Base_MspInit+0x1c0>)
 8002654:	f043 0301 	orr.w	r3, r3, #1
 8002658:	6413      	str	r3, [r2, #64]	; 0x40
 800265a:	4b63      	ldr	r3, [pc, #396]	; (80027e8 <HAL_TIM_Base_MspInit+0x1c0>)
 800265c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	62bb      	str	r3, [r7, #40]	; 0x28
 8002664:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002666:	2300      	movs	r3, #0
 8002668:	627b      	str	r3, [r7, #36]	; 0x24
 800266a:	4b5f      	ldr	r3, [pc, #380]	; (80027e8 <HAL_TIM_Base_MspInit+0x1c0>)
 800266c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266e:	4a5e      	ldr	r2, [pc, #376]	; (80027e8 <HAL_TIM_Base_MspInit+0x1c0>)
 8002670:	f043 0301 	orr.w	r3, r3, #1
 8002674:	6313      	str	r3, [r2, #48]	; 0x30
 8002676:	4b5c      	ldr	r3, [pc, #368]	; (80027e8 <HAL_TIM_Base_MspInit+0x1c0>)
 8002678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	627b      	str	r3, [r7, #36]	; 0x24
 8002680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002682:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002686:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002688:	2302      	movs	r3, #2
 800268a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268c:	2300      	movs	r3, #0
 800268e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002690:	2300      	movs	r3, #0
 8002692:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002694:	2301      	movs	r3, #1
 8002696:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002698:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800269c:	4619      	mov	r1, r3
 800269e:	4853      	ldr	r0, [pc, #332]	; (80027ec <HAL_TIM_Base_MspInit+0x1c4>)
 80026a0:	f000 fbf2 	bl	8002e88 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80026a4:	e09b      	b.n	80027de <HAL_TIM_Base_MspInit+0x1b6>
  else if(tim_baseHandle->Instance==TIM3)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a51      	ldr	r2, [pc, #324]	; (80027f0 <HAL_TIM_Base_MspInit+0x1c8>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d12c      	bne.n	800270a <HAL_TIM_Base_MspInit+0xe2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80026b0:	2300      	movs	r3, #0
 80026b2:	623b      	str	r3, [r7, #32]
 80026b4:	4b4c      	ldr	r3, [pc, #304]	; (80027e8 <HAL_TIM_Base_MspInit+0x1c0>)
 80026b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b8:	4a4b      	ldr	r2, [pc, #300]	; (80027e8 <HAL_TIM_Base_MspInit+0x1c0>)
 80026ba:	f043 0302 	orr.w	r3, r3, #2
 80026be:	6413      	str	r3, [r2, #64]	; 0x40
 80026c0:	4b49      	ldr	r3, [pc, #292]	; (80027e8 <HAL_TIM_Base_MspInit+0x1c0>)
 80026c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c4:	f003 0302 	and.w	r3, r3, #2
 80026c8:	623b      	str	r3, [r7, #32]
 80026ca:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80026cc:	2300      	movs	r3, #0
 80026ce:	61fb      	str	r3, [r7, #28]
 80026d0:	4b45      	ldr	r3, [pc, #276]	; (80027e8 <HAL_TIM_Base_MspInit+0x1c0>)
 80026d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d4:	4a44      	ldr	r2, [pc, #272]	; (80027e8 <HAL_TIM_Base_MspInit+0x1c0>)
 80026d6:	f043 0308 	orr.w	r3, r3, #8
 80026da:	6313      	str	r3, [r2, #48]	; 0x30
 80026dc:	4b42      	ldr	r3, [pc, #264]	; (80027e8 <HAL_TIM_Base_MspInit+0x1c0>)
 80026de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e0:	f003 0308 	and.w	r3, r3, #8
 80026e4:	61fb      	str	r3, [r7, #28]
 80026e6:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80026e8:	2304      	movs	r3, #4
 80026ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ec:	2302      	movs	r3, #2
 80026ee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f0:	2300      	movs	r3, #0
 80026f2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026f4:	2300      	movs	r3, #0
 80026f6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80026f8:	2302      	movs	r3, #2
 80026fa:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002700:	4619      	mov	r1, r3
 8002702:	483c      	ldr	r0, [pc, #240]	; (80027f4 <HAL_TIM_Base_MspInit+0x1cc>)
 8002704:	f000 fbc0 	bl	8002e88 <HAL_GPIO_Init>
}
 8002708:	e069      	b.n	80027de <HAL_TIM_Base_MspInit+0x1b6>
  else if(tim_baseHandle->Instance==TIM4)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a3a      	ldr	r2, [pc, #232]	; (80027f8 <HAL_TIM_Base_MspInit+0x1d0>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d10e      	bne.n	8002732 <HAL_TIM_Base_MspInit+0x10a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002714:	2300      	movs	r3, #0
 8002716:	61bb      	str	r3, [r7, #24]
 8002718:	4b33      	ldr	r3, [pc, #204]	; (80027e8 <HAL_TIM_Base_MspInit+0x1c0>)
 800271a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271c:	4a32      	ldr	r2, [pc, #200]	; (80027e8 <HAL_TIM_Base_MspInit+0x1c0>)
 800271e:	f043 0304 	orr.w	r3, r3, #4
 8002722:	6413      	str	r3, [r2, #64]	; 0x40
 8002724:	4b30      	ldr	r3, [pc, #192]	; (80027e8 <HAL_TIM_Base_MspInit+0x1c0>)
 8002726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002728:	f003 0304 	and.w	r3, r3, #4
 800272c:	61bb      	str	r3, [r7, #24]
 800272e:	69bb      	ldr	r3, [r7, #24]
}
 8002730:	e055      	b.n	80027de <HAL_TIM_Base_MspInit+0x1b6>
  else if(tim_baseHandle->Instance==TIM5)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a31      	ldr	r2, [pc, #196]	; (80027fc <HAL_TIM_Base_MspInit+0x1d4>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d135      	bne.n	80027a8 <HAL_TIM_Base_MspInit+0x180>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800273c:	2300      	movs	r3, #0
 800273e:	617b      	str	r3, [r7, #20]
 8002740:	4b29      	ldr	r3, [pc, #164]	; (80027e8 <HAL_TIM_Base_MspInit+0x1c0>)
 8002742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002744:	4a28      	ldr	r2, [pc, #160]	; (80027e8 <HAL_TIM_Base_MspInit+0x1c0>)
 8002746:	f043 0308 	orr.w	r3, r3, #8
 800274a:	6413      	str	r3, [r2, #64]	; 0x40
 800274c:	4b26      	ldr	r3, [pc, #152]	; (80027e8 <HAL_TIM_Base_MspInit+0x1c0>)
 800274e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002750:	f003 0308 	and.w	r3, r3, #8
 8002754:	617b      	str	r3, [r7, #20]
 8002756:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002758:	2300      	movs	r3, #0
 800275a:	613b      	str	r3, [r7, #16]
 800275c:	4b22      	ldr	r3, [pc, #136]	; (80027e8 <HAL_TIM_Base_MspInit+0x1c0>)
 800275e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002760:	4a21      	ldr	r2, [pc, #132]	; (80027e8 <HAL_TIM_Base_MspInit+0x1c0>)
 8002762:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002766:	6313      	str	r3, [r2, #48]	; 0x30
 8002768:	4b1f      	ldr	r3, [pc, #124]	; (80027e8 <HAL_TIM_Base_MspInit+0x1c0>)
 800276a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002770:	613b      	str	r3, [r7, #16]
 8002772:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = IC_Eco_Pin;
 8002774:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002778:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800277a:	2302      	movs	r3, #2
 800277c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277e:	2300      	movs	r3, #0
 8002780:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002782:	2300      	movs	r3, #0
 8002784:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002786:	2302      	movs	r3, #2
 8002788:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(IC_Eco_GPIO_Port, &GPIO_InitStruct);
 800278a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800278e:	4619      	mov	r1, r3
 8002790:	481b      	ldr	r0, [pc, #108]	; (8002800 <HAL_TIM_Base_MspInit+0x1d8>)
 8002792:	f000 fb79 	bl	8002e88 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002796:	2200      	movs	r2, #0
 8002798:	2100      	movs	r1, #0
 800279a:	2032      	movs	r0, #50	; 0x32
 800279c:	f000 faad 	bl	8002cfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80027a0:	2032      	movs	r0, #50	; 0x32
 80027a2:	f000 fac6 	bl	8002d32 <HAL_NVIC_EnableIRQ>
}
 80027a6:	e01a      	b.n	80027de <HAL_TIM_Base_MspInit+0x1b6>
  else if(tim_baseHandle->Instance==TIM7)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a15      	ldr	r2, [pc, #84]	; (8002804 <HAL_TIM_Base_MspInit+0x1dc>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d115      	bne.n	80027de <HAL_TIM_Base_MspInit+0x1b6>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80027b2:	2300      	movs	r3, #0
 80027b4:	60fb      	str	r3, [r7, #12]
 80027b6:	4b0c      	ldr	r3, [pc, #48]	; (80027e8 <HAL_TIM_Base_MspInit+0x1c0>)
 80027b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ba:	4a0b      	ldr	r2, [pc, #44]	; (80027e8 <HAL_TIM_Base_MspInit+0x1c0>)
 80027bc:	f043 0320 	orr.w	r3, r3, #32
 80027c0:	6413      	str	r3, [r2, #64]	; 0x40
 80027c2:	4b09      	ldr	r3, [pc, #36]	; (80027e8 <HAL_TIM_Base_MspInit+0x1c0>)
 80027c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c6:	f003 0320 	and.w	r3, r3, #32
 80027ca:	60fb      	str	r3, [r7, #12]
 80027cc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80027ce:	2200      	movs	r2, #0
 80027d0:	2100      	movs	r1, #0
 80027d2:	2037      	movs	r0, #55	; 0x37
 80027d4:	f000 fa91 	bl	8002cfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80027d8:	2037      	movs	r0, #55	; 0x37
 80027da:	f000 faaa 	bl	8002d32 <HAL_NVIC_EnableIRQ>
}
 80027de:	bf00      	nop
 80027e0:	3740      	adds	r7, #64	; 0x40
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	40023800 	.word	0x40023800
 80027ec:	40020000 	.word	0x40020000
 80027f0:	40000400 	.word	0x40000400
 80027f4:	40020c00 	.word	0x40020c00
 80027f8:	40000800 	.word	0x40000800
 80027fc:	40000c00 	.word	0x40000c00
 8002800:	40021c00 	.word	0x40021c00
 8002804:	40001400 	.word	0x40001400

08002808 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b08a      	sub	sp, #40	; 0x28
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002810:	f107 0314 	add.w	r3, r7, #20
 8002814:	2200      	movs	r2, #0
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	605a      	str	r2, [r3, #4]
 800281a:	609a      	str	r2, [r3, #8]
 800281c:	60da      	str	r2, [r3, #12]
 800281e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a25      	ldr	r2, [pc, #148]	; (80028bc <HAL_TIM_MspPostInit+0xb4>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d11f      	bne.n	800286a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800282a:	2300      	movs	r3, #0
 800282c:	613b      	str	r3, [r7, #16]
 800282e:	4b24      	ldr	r3, [pc, #144]	; (80028c0 <HAL_TIM_MspPostInit+0xb8>)
 8002830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002832:	4a23      	ldr	r2, [pc, #140]	; (80028c0 <HAL_TIM_MspPostInit+0xb8>)
 8002834:	f043 0308 	orr.w	r3, r3, #8
 8002838:	6313      	str	r3, [r2, #48]	; 0x30
 800283a:	4b21      	ldr	r3, [pc, #132]	; (80028c0 <HAL_TIM_MspPostInit+0xb8>)
 800283c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283e:	f003 0308 	and.w	r3, r3, #8
 8002842:	613b      	str	r3, [r7, #16]
 8002844:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = PWM_R_Pin|PWM_L_Pin;
 8002846:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800284a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800284c:	2302      	movs	r3, #2
 800284e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002850:	2300      	movs	r3, #0
 8002852:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002854:	2300      	movs	r3, #0
 8002856:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002858:	2302      	movs	r3, #2
 800285a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800285c:	f107 0314 	add.w	r3, r7, #20
 8002860:	4619      	mov	r1, r3
 8002862:	4818      	ldr	r0, [pc, #96]	; (80028c4 <HAL_TIM_MspPostInit+0xbc>)
 8002864:	f000 fb10 	bl	8002e88 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002868:	e023      	b.n	80028b2 <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM5)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a16      	ldr	r2, [pc, #88]	; (80028c8 <HAL_TIM_MspPostInit+0xc0>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d11e      	bne.n	80028b2 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002874:	2300      	movs	r3, #0
 8002876:	60fb      	str	r3, [r7, #12]
 8002878:	4b11      	ldr	r3, [pc, #68]	; (80028c0 <HAL_TIM_MspPostInit+0xb8>)
 800287a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287c:	4a10      	ldr	r2, [pc, #64]	; (80028c0 <HAL_TIM_MspPostInit+0xb8>)
 800287e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002882:	6313      	str	r3, [r2, #48]	; 0x30
 8002884:	4b0e      	ldr	r3, [pc, #56]	; (80028c0 <HAL_TIM_MspPostInit+0xb8>)
 8002886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002888:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800288c:	60fb      	str	r3, [r7, #12]
 800288e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_Trig_Pin;
 8002890:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002894:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002896:	2302      	movs	r3, #2
 8002898:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289a:	2300      	movs	r3, #0
 800289c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800289e:	2300      	movs	r3, #0
 80028a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80028a2:	2302      	movs	r3, #2
 80028a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_Trig_GPIO_Port, &GPIO_InitStruct);
 80028a6:	f107 0314 	add.w	r3, r7, #20
 80028aa:	4619      	mov	r1, r3
 80028ac:	4807      	ldr	r0, [pc, #28]	; (80028cc <HAL_TIM_MspPostInit+0xc4>)
 80028ae:	f000 faeb 	bl	8002e88 <HAL_GPIO_Init>
}
 80028b2:	bf00      	nop
 80028b4:	3728      	adds	r7, #40	; 0x28
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	40000800 	.word	0x40000800
 80028c0:	40023800 	.word	0x40023800
 80028c4:	40020c00 	.word	0x40020c00
 80028c8:	40000c00 	.word	0x40000c00
 80028cc:	40021c00 	.word	0x40021c00

080028d0 <MX_UART7_Init>:

UART_HandleTypeDef huart7;

/* UART7 init function */
void MX_UART7_Init(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0

  huart7.Instance = UART7;
 80028d4:	4b11      	ldr	r3, [pc, #68]	; (800291c <MX_UART7_Init+0x4c>)
 80028d6:	4a12      	ldr	r2, [pc, #72]	; (8002920 <MX_UART7_Init+0x50>)
 80028d8:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 80028da:	4b10      	ldr	r3, [pc, #64]	; (800291c <MX_UART7_Init+0x4c>)
 80028dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80028e0:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80028e2:	4b0e      	ldr	r3, [pc, #56]	; (800291c <MX_UART7_Init+0x4c>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80028e8:	4b0c      	ldr	r3, [pc, #48]	; (800291c <MX_UART7_Init+0x4c>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80028ee:	4b0b      	ldr	r3, [pc, #44]	; (800291c <MX_UART7_Init+0x4c>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80028f4:	4b09      	ldr	r3, [pc, #36]	; (800291c <MX_UART7_Init+0x4c>)
 80028f6:	220c      	movs	r2, #12
 80028f8:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028fa:	4b08      	ldr	r3, [pc, #32]	; (800291c <MX_UART7_Init+0x4c>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8002900:	4b06      	ldr	r3, [pc, #24]	; (800291c <MX_UART7_Init+0x4c>)
 8002902:	2200      	movs	r2, #0
 8002904:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8002906:	4805      	ldr	r0, [pc, #20]	; (800291c <MX_UART7_Init+0x4c>)
 8002908:	f003 fb4e 	bl	8005fa8 <HAL_UART_Init>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d001      	beq.n	8002916 <MX_UART7_Init+0x46>
  {
    Error_Handler();
 8002912:	f7ff fad9 	bl	8001ec8 <Error_Handler>
  }

}
 8002916:	bf00      	nop
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	20000238 	.word	0x20000238
 8002920:	40007800 	.word	0x40007800

08002924 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b08a      	sub	sp, #40	; 0x28
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800292c:	f107 0314 	add.w	r3, r7, #20
 8002930:	2200      	movs	r2, #0
 8002932:	601a      	str	r2, [r3, #0]
 8002934:	605a      	str	r2, [r3, #4]
 8002936:	609a      	str	r2, [r3, #8]
 8002938:	60da      	str	r2, [r3, #12]
 800293a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART7)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a1d      	ldr	r2, [pc, #116]	; (80029b8 <HAL_UART_MspInit+0x94>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d133      	bne.n	80029ae <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8002946:	2300      	movs	r3, #0
 8002948:	613b      	str	r3, [r7, #16]
 800294a:	4b1c      	ldr	r3, [pc, #112]	; (80029bc <HAL_UART_MspInit+0x98>)
 800294c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294e:	4a1b      	ldr	r2, [pc, #108]	; (80029bc <HAL_UART_MspInit+0x98>)
 8002950:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002954:	6413      	str	r3, [r2, #64]	; 0x40
 8002956:	4b19      	ldr	r3, [pc, #100]	; (80029bc <HAL_UART_MspInit+0x98>)
 8002958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800295e:	613b      	str	r3, [r7, #16]
 8002960:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002962:	2300      	movs	r3, #0
 8002964:	60fb      	str	r3, [r7, #12]
 8002966:	4b15      	ldr	r3, [pc, #84]	; (80029bc <HAL_UART_MspInit+0x98>)
 8002968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296a:	4a14      	ldr	r2, [pc, #80]	; (80029bc <HAL_UART_MspInit+0x98>)
 800296c:	f043 0320 	orr.w	r3, r3, #32
 8002970:	6313      	str	r3, [r2, #48]	; 0x30
 8002972:	4b12      	ldr	r3, [pc, #72]	; (80029bc <HAL_UART_MspInit+0x98>)
 8002974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002976:	f003 0320 	and.w	r3, r3, #32
 800297a:	60fb      	str	r3, [r7, #12]
 800297c:	68fb      	ldr	r3, [r7, #12]
    /**UART7 GPIO Configuration
    PF6     ------> UART7_RX
    PF7     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800297e:	23c0      	movs	r3, #192	; 0xc0
 8002980:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002982:	2302      	movs	r3, #2
 8002984:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002986:	2301      	movs	r3, #1
 8002988:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800298a:	2303      	movs	r3, #3
 800298c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 800298e:	2308      	movs	r3, #8
 8002990:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002992:	f107 0314 	add.w	r3, r7, #20
 8002996:	4619      	mov	r1, r3
 8002998:	4809      	ldr	r0, [pc, #36]	; (80029c0 <HAL_UART_MspInit+0x9c>)
 800299a:	f000 fa75 	bl	8002e88 <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 800299e:	2200      	movs	r2, #0
 80029a0:	2100      	movs	r1, #0
 80029a2:	2052      	movs	r0, #82	; 0x52
 80029a4:	f000 f9a9 	bl	8002cfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 80029a8:	2052      	movs	r0, #82	; 0x52
 80029aa:	f000 f9c2 	bl	8002d32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }
}
 80029ae:	bf00      	nop
 80029b0:	3728      	adds	r7, #40	; 0x28
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	40007800 	.word	0x40007800
 80029bc:	40023800 	.word	0x40023800
 80029c0:	40021400 	.word	0x40021400

080029c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80029c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029fc <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80029c8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80029ca:	e003      	b.n	80029d4 <LoopCopyDataInit>

080029cc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80029cc:	4b0c      	ldr	r3, [pc, #48]	; (8002a00 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80029ce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80029d0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80029d2:	3104      	adds	r1, #4

080029d4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80029d4:	480b      	ldr	r0, [pc, #44]	; (8002a04 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80029d6:	4b0c      	ldr	r3, [pc, #48]	; (8002a08 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80029d8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80029da:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80029dc:	d3f6      	bcc.n	80029cc <CopyDataInit>
  ldr  r2, =_sbss
 80029de:	4a0b      	ldr	r2, [pc, #44]	; (8002a0c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80029e0:	e002      	b.n	80029e8 <LoopFillZerobss>

080029e2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80029e2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80029e4:	f842 3b04 	str.w	r3, [r2], #4

080029e8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80029e8:	4b09      	ldr	r3, [pc, #36]	; (8002a10 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80029ea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80029ec:	d3f9      	bcc.n	80029e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80029ee:	f7ff fbff 	bl	80021f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029f2:	f004 fbb5 	bl	8007160 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029f6:	f7fe fa51 	bl	8000e9c <main>
  bx  lr    
 80029fa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80029fc:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002a00:	0800752c 	.word	0x0800752c
  ldr  r0, =_sdata
 8002a04:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002a08:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8002a0c:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8002a10:	2000027c 	.word	0x2000027c

08002a14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a14:	e7fe      	b.n	8002a14 <ADC_IRQHandler>
	...

08002a18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a1c:	4b0e      	ldr	r3, [pc, #56]	; (8002a58 <HAL_Init+0x40>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a0d      	ldr	r2, [pc, #52]	; (8002a58 <HAL_Init+0x40>)
 8002a22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a28:	4b0b      	ldr	r3, [pc, #44]	; (8002a58 <HAL_Init+0x40>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a0a      	ldr	r2, [pc, #40]	; (8002a58 <HAL_Init+0x40>)
 8002a2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a34:	4b08      	ldr	r3, [pc, #32]	; (8002a58 <HAL_Init+0x40>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a07      	ldr	r2, [pc, #28]	; (8002a58 <HAL_Init+0x40>)
 8002a3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a40:	2003      	movs	r0, #3
 8002a42:	f000 f94f 	bl	8002ce4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a46:	2000      	movs	r0, #0
 8002a48:	f000 f808 	bl	8002a5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a4c:	f7ff fb5c 	bl	8002108 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	40023c00 	.word	0x40023c00

08002a5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a64:	4b12      	ldr	r3, [pc, #72]	; (8002ab0 <HAL_InitTick+0x54>)
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	4b12      	ldr	r3, [pc, #72]	; (8002ab4 <HAL_InitTick+0x58>)
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a72:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f000 f967 	bl	8002d4e <HAL_SYSTICK_Config>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d001      	beq.n	8002a8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e00e      	b.n	8002aa8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2b0f      	cmp	r3, #15
 8002a8e:	d80a      	bhi.n	8002aa6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a90:	2200      	movs	r2, #0
 8002a92:	6879      	ldr	r1, [r7, #4]
 8002a94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a98:	f000 f92f 	bl	8002cfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a9c:	4a06      	ldr	r2, [pc, #24]	; (8002ab8 <HAL_InitTick+0x5c>)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	e000      	b.n	8002aa8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3708      	adds	r7, #8
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	20000004 	.word	0x20000004
 8002ab4:	2000000c 	.word	0x2000000c
 8002ab8:	20000008 	.word	0x20000008

08002abc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ac0:	4b06      	ldr	r3, [pc, #24]	; (8002adc <HAL_IncTick+0x20>)
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	4b06      	ldr	r3, [pc, #24]	; (8002ae0 <HAL_IncTick+0x24>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4413      	add	r3, r2
 8002acc:	4a04      	ldr	r2, [pc, #16]	; (8002ae0 <HAL_IncTick+0x24>)
 8002ace:	6013      	str	r3, [r2, #0]
}
 8002ad0:	bf00      	nop
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	2000000c 	.word	0x2000000c
 8002ae0:	20000278 	.word	0x20000278

08002ae4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ae8:	4b03      	ldr	r3, [pc, #12]	; (8002af8 <HAL_GetTick+0x14>)
 8002aea:	681b      	ldr	r3, [r3, #0]
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	20000278 	.word	0x20000278

08002afc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b04:	f7ff ffee 	bl	8002ae4 <HAL_GetTick>
 8002b08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b14:	d005      	beq.n	8002b22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b16:	4b0a      	ldr	r3, [pc, #40]	; (8002b40 <HAL_Delay+0x44>)
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	4413      	add	r3, r2
 8002b20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b22:	bf00      	nop
 8002b24:	f7ff ffde 	bl	8002ae4 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	68fa      	ldr	r2, [r7, #12]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d8f7      	bhi.n	8002b24 <HAL_Delay+0x28>
  {
  }
}
 8002b34:	bf00      	nop
 8002b36:	bf00      	nop
 8002b38:	3710      	adds	r7, #16
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	2000000c 	.word	0x2000000c

08002b44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b085      	sub	sp, #20
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f003 0307 	and.w	r3, r3, #7
 8002b52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b54:	4b0c      	ldr	r3, [pc, #48]	; (8002b88 <__NVIC_SetPriorityGrouping+0x44>)
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b5a:	68ba      	ldr	r2, [r7, #8]
 8002b5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b60:	4013      	ands	r3, r2
 8002b62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b76:	4a04      	ldr	r2, [pc, #16]	; (8002b88 <__NVIC_SetPriorityGrouping+0x44>)
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	60d3      	str	r3, [r2, #12]
}
 8002b7c:	bf00      	nop
 8002b7e:	3714      	adds	r7, #20
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr
 8002b88:	e000ed00 	.word	0xe000ed00

08002b8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b90:	4b04      	ldr	r3, [pc, #16]	; (8002ba4 <__NVIC_GetPriorityGrouping+0x18>)
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	0a1b      	lsrs	r3, r3, #8
 8002b96:	f003 0307 	and.w	r3, r3, #7
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr
 8002ba4:	e000ed00 	.word	0xe000ed00

08002ba8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	4603      	mov	r3, r0
 8002bb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	db0b      	blt.n	8002bd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bba:	79fb      	ldrb	r3, [r7, #7]
 8002bbc:	f003 021f 	and.w	r2, r3, #31
 8002bc0:	4907      	ldr	r1, [pc, #28]	; (8002be0 <__NVIC_EnableIRQ+0x38>)
 8002bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bc6:	095b      	lsrs	r3, r3, #5
 8002bc8:	2001      	movs	r0, #1
 8002bca:	fa00 f202 	lsl.w	r2, r0, r2
 8002bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002bd2:	bf00      	nop
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	e000e100 	.word	0xe000e100

08002be4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	4603      	mov	r3, r0
 8002bec:	6039      	str	r1, [r7, #0]
 8002bee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	db0a      	blt.n	8002c0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	b2da      	uxtb	r2, r3
 8002bfc:	490c      	ldr	r1, [pc, #48]	; (8002c30 <__NVIC_SetPriority+0x4c>)
 8002bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c02:	0112      	lsls	r2, r2, #4
 8002c04:	b2d2      	uxtb	r2, r2
 8002c06:	440b      	add	r3, r1
 8002c08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c0c:	e00a      	b.n	8002c24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	b2da      	uxtb	r2, r3
 8002c12:	4908      	ldr	r1, [pc, #32]	; (8002c34 <__NVIC_SetPriority+0x50>)
 8002c14:	79fb      	ldrb	r3, [r7, #7]
 8002c16:	f003 030f 	and.w	r3, r3, #15
 8002c1a:	3b04      	subs	r3, #4
 8002c1c:	0112      	lsls	r2, r2, #4
 8002c1e:	b2d2      	uxtb	r2, r2
 8002c20:	440b      	add	r3, r1
 8002c22:	761a      	strb	r2, [r3, #24]
}
 8002c24:	bf00      	nop
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr
 8002c30:	e000e100 	.word	0xe000e100
 8002c34:	e000ed00 	.word	0xe000ed00

08002c38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b089      	sub	sp, #36	; 0x24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f003 0307 	and.w	r3, r3, #7
 8002c4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	f1c3 0307 	rsb	r3, r3, #7
 8002c52:	2b04      	cmp	r3, #4
 8002c54:	bf28      	it	cs
 8002c56:	2304      	movcs	r3, #4
 8002c58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	3304      	adds	r3, #4
 8002c5e:	2b06      	cmp	r3, #6
 8002c60:	d902      	bls.n	8002c68 <NVIC_EncodePriority+0x30>
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	3b03      	subs	r3, #3
 8002c66:	e000      	b.n	8002c6a <NVIC_EncodePriority+0x32>
 8002c68:	2300      	movs	r3, #0
 8002c6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	fa02 f303 	lsl.w	r3, r2, r3
 8002c76:	43da      	mvns	r2, r3
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	401a      	ands	r2, r3
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c80:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	fa01 f303 	lsl.w	r3, r1, r3
 8002c8a:	43d9      	mvns	r1, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c90:	4313      	orrs	r3, r2
         );
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3724      	adds	r7, #36	; 0x24
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
	...

08002ca0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	3b01      	subs	r3, #1
 8002cac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cb0:	d301      	bcc.n	8002cb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e00f      	b.n	8002cd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cb6:	4a0a      	ldr	r2, [pc, #40]	; (8002ce0 <SysTick_Config+0x40>)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cbe:	210f      	movs	r1, #15
 8002cc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002cc4:	f7ff ff8e 	bl	8002be4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cc8:	4b05      	ldr	r3, [pc, #20]	; (8002ce0 <SysTick_Config+0x40>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cce:	4b04      	ldr	r3, [pc, #16]	; (8002ce0 <SysTick_Config+0x40>)
 8002cd0:	2207      	movs	r2, #7
 8002cd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	e000e010 	.word	0xe000e010

08002ce4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f7ff ff29 	bl	8002b44 <__NVIC_SetPriorityGrouping>
}
 8002cf2:	bf00      	nop
 8002cf4:	3708      	adds	r7, #8
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b086      	sub	sp, #24
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	4603      	mov	r3, r0
 8002d02:	60b9      	str	r1, [r7, #8]
 8002d04:	607a      	str	r2, [r7, #4]
 8002d06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d0c:	f7ff ff3e 	bl	8002b8c <__NVIC_GetPriorityGrouping>
 8002d10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	68b9      	ldr	r1, [r7, #8]
 8002d16:	6978      	ldr	r0, [r7, #20]
 8002d18:	f7ff ff8e 	bl	8002c38 <NVIC_EncodePriority>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d22:	4611      	mov	r1, r2
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7ff ff5d 	bl	8002be4 <__NVIC_SetPriority>
}
 8002d2a:	bf00      	nop
 8002d2c:	3718      	adds	r7, #24
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b082      	sub	sp, #8
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	4603      	mov	r3, r0
 8002d3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7ff ff31 	bl	8002ba8 <__NVIC_EnableIRQ>
}
 8002d46:	bf00      	nop
 8002d48:	3708      	adds	r7, #8
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	b082      	sub	sp, #8
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f7ff ffa2 	bl	8002ca0 <SysTick_Config>
 8002d5c:	4603      	mov	r3, r0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3708      	adds	r7, #8
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b082      	sub	sp, #8
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d101      	bne.n	8002d78 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e014      	b.n	8002da2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	791b      	ldrb	r3, [r3, #4]
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d105      	bne.n	8002d8e <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f7fd ff1d 	bl	8000bc8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2202      	movs	r2, #2
 8002d92:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3708      	adds	r7, #8
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}

08002daa <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002daa:	b480      	push	{r7}
 8002dac:	b087      	sub	sp, #28
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	60f8      	str	r0, [r7, #12]
 8002db2:	60b9      	str	r1, [r7, #8]
 8002db4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8002db6:	2300      	movs	r3, #0
 8002db8:	617b      	str	r3, [r7, #20]
 8002dba:	2300      	movs	r3, #0
 8002dbc:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	795b      	ldrb	r3, [r3, #5]
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d101      	bne.n	8002dca <HAL_DAC_ConfigChannel+0x20>
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	e036      	b.n	8002e38 <HAL_DAC_ConfigChannel+0x8e>
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2201      	movs	r2, #1
 8002dce:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2202      	movs	r2, #2
 8002dd4:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8002dde:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	fa02 f303 	lsl.w	r3, r2, r3
 8002de8:	43db      	mvns	r3, r3
 8002dea:	697a      	ldr	r2, [r7, #20]
 8002dec:	4013      	ands	r3, r2
 8002dee:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002dfc:	693a      	ldr	r2, [r7, #16]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	fa02 f303 	lsl.w	r3, r2, r3
 8002e04:	697a      	ldr	r2, [r7, #20]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	697a      	ldr	r2, [r7, #20]
 8002e10:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	6819      	ldr	r1, [r3, #0]
 8002e18:	22c0      	movs	r2, #192	; 0xc0
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e20:	43da      	mvns	r2, r3
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	400a      	ands	r2, r1
 8002e28:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2200      	movs	r2, #0
 8002e34:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002e36:	2300      	movs	r3, #0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	371c      	adds	r7, #28
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d004      	beq.n	8002e62 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2280      	movs	r2, #128	; 0x80
 8002e5c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e00c      	b.n	8002e7c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2205      	movs	r2, #5
 8002e66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f022 0201 	bic.w	r2, r2, #1
 8002e78:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002e7a:	2300      	movs	r3, #0
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	370c      	adds	r7, #12
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr

08002e88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b089      	sub	sp, #36	; 0x24
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e92:	2300      	movs	r3, #0
 8002e94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e96:	2300      	movs	r3, #0
 8002e98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	61fb      	str	r3, [r7, #28]
 8002ea2:	e177      	b.n	8003194 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	697a      	ldr	r2, [r7, #20]
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002eb8:	693a      	ldr	r2, [r7, #16]
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	f040 8166 	bne.w	800318e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d00b      	beq.n	8002ee2 <HAL_GPIO_Init+0x5a>
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d007      	beq.n	8002ee2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ed6:	2b11      	cmp	r3, #17
 8002ed8:	d003      	beq.n	8002ee2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	2b12      	cmp	r3, #18
 8002ee0:	d130      	bne.n	8002f44 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	005b      	lsls	r3, r3, #1
 8002eec:	2203      	movs	r2, #3
 8002eee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef2:	43db      	mvns	r3, r3
 8002ef4:	69ba      	ldr	r2, [r7, #24]
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	68da      	ldr	r2, [r3, #12]
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	005b      	lsls	r3, r3, #1
 8002f02:	fa02 f303 	lsl.w	r3, r2, r3
 8002f06:	69ba      	ldr	r2, [r7, #24]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	69ba      	ldr	r2, [r7, #24]
 8002f10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f18:	2201      	movs	r2, #1
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f20:	43db      	mvns	r3, r3
 8002f22:	69ba      	ldr	r2, [r7, #24]
 8002f24:	4013      	ands	r3, r2
 8002f26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	091b      	lsrs	r3, r3, #4
 8002f2e:	f003 0201 	and.w	r2, r3, #1
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	fa02 f303 	lsl.w	r3, r2, r3
 8002f38:	69ba      	ldr	r2, [r7, #24]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	69ba      	ldr	r2, [r7, #24]
 8002f42:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	2203      	movs	r2, #3
 8002f50:	fa02 f303 	lsl.w	r3, r2, r3
 8002f54:	43db      	mvns	r3, r3
 8002f56:	69ba      	ldr	r2, [r7, #24]
 8002f58:	4013      	ands	r3, r2
 8002f5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	689a      	ldr	r2, [r3, #8]
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	005b      	lsls	r3, r3, #1
 8002f64:	fa02 f303 	lsl.w	r3, r2, r3
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	69ba      	ldr	r2, [r7, #24]
 8002f72:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d003      	beq.n	8002f84 <HAL_GPIO_Init+0xfc>
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	2b12      	cmp	r3, #18
 8002f82:	d123      	bne.n	8002fcc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	08da      	lsrs	r2, r3, #3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	3208      	adds	r2, #8
 8002f8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	f003 0307 	and.w	r3, r3, #7
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	220f      	movs	r2, #15
 8002f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa0:	43db      	mvns	r3, r3
 8002fa2:	69ba      	ldr	r2, [r7, #24]
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	691a      	ldr	r2, [r3, #16]
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	f003 0307 	and.w	r3, r3, #7
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb8:	69ba      	ldr	r2, [r7, #24]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	08da      	lsrs	r2, r3, #3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	3208      	adds	r2, #8
 8002fc6:	69b9      	ldr	r1, [r7, #24]
 8002fc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	005b      	lsls	r3, r3, #1
 8002fd6:	2203      	movs	r2, #3
 8002fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fdc:	43db      	mvns	r3, r3
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f003 0203 	and.w	r2, r3, #3
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	005b      	lsls	r3, r3, #1
 8002ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	69ba      	ldr	r2, [r7, #24]
 8002ffe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003008:	2b00      	cmp	r3, #0
 800300a:	f000 80c0 	beq.w	800318e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800300e:	2300      	movs	r3, #0
 8003010:	60fb      	str	r3, [r7, #12]
 8003012:	4b66      	ldr	r3, [pc, #408]	; (80031ac <HAL_GPIO_Init+0x324>)
 8003014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003016:	4a65      	ldr	r2, [pc, #404]	; (80031ac <HAL_GPIO_Init+0x324>)
 8003018:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800301c:	6453      	str	r3, [r2, #68]	; 0x44
 800301e:	4b63      	ldr	r3, [pc, #396]	; (80031ac <HAL_GPIO_Init+0x324>)
 8003020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003022:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003026:	60fb      	str	r3, [r7, #12]
 8003028:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800302a:	4a61      	ldr	r2, [pc, #388]	; (80031b0 <HAL_GPIO_Init+0x328>)
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	089b      	lsrs	r3, r3, #2
 8003030:	3302      	adds	r3, #2
 8003032:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003036:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	f003 0303 	and.w	r3, r3, #3
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	220f      	movs	r2, #15
 8003042:	fa02 f303 	lsl.w	r3, r2, r3
 8003046:	43db      	mvns	r3, r3
 8003048:	69ba      	ldr	r2, [r7, #24]
 800304a:	4013      	ands	r3, r2
 800304c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a58      	ldr	r2, [pc, #352]	; (80031b4 <HAL_GPIO_Init+0x32c>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d037      	beq.n	80030c6 <HAL_GPIO_Init+0x23e>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a57      	ldr	r2, [pc, #348]	; (80031b8 <HAL_GPIO_Init+0x330>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d031      	beq.n	80030c2 <HAL_GPIO_Init+0x23a>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a56      	ldr	r2, [pc, #344]	; (80031bc <HAL_GPIO_Init+0x334>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d02b      	beq.n	80030be <HAL_GPIO_Init+0x236>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a55      	ldr	r2, [pc, #340]	; (80031c0 <HAL_GPIO_Init+0x338>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d025      	beq.n	80030ba <HAL_GPIO_Init+0x232>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a54      	ldr	r2, [pc, #336]	; (80031c4 <HAL_GPIO_Init+0x33c>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d01f      	beq.n	80030b6 <HAL_GPIO_Init+0x22e>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a53      	ldr	r2, [pc, #332]	; (80031c8 <HAL_GPIO_Init+0x340>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d019      	beq.n	80030b2 <HAL_GPIO_Init+0x22a>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a52      	ldr	r2, [pc, #328]	; (80031cc <HAL_GPIO_Init+0x344>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d013      	beq.n	80030ae <HAL_GPIO_Init+0x226>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a51      	ldr	r2, [pc, #324]	; (80031d0 <HAL_GPIO_Init+0x348>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d00d      	beq.n	80030aa <HAL_GPIO_Init+0x222>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a50      	ldr	r2, [pc, #320]	; (80031d4 <HAL_GPIO_Init+0x34c>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d007      	beq.n	80030a6 <HAL_GPIO_Init+0x21e>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a4f      	ldr	r2, [pc, #316]	; (80031d8 <HAL_GPIO_Init+0x350>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d101      	bne.n	80030a2 <HAL_GPIO_Init+0x21a>
 800309e:	2309      	movs	r3, #9
 80030a0:	e012      	b.n	80030c8 <HAL_GPIO_Init+0x240>
 80030a2:	230a      	movs	r3, #10
 80030a4:	e010      	b.n	80030c8 <HAL_GPIO_Init+0x240>
 80030a6:	2308      	movs	r3, #8
 80030a8:	e00e      	b.n	80030c8 <HAL_GPIO_Init+0x240>
 80030aa:	2307      	movs	r3, #7
 80030ac:	e00c      	b.n	80030c8 <HAL_GPIO_Init+0x240>
 80030ae:	2306      	movs	r3, #6
 80030b0:	e00a      	b.n	80030c8 <HAL_GPIO_Init+0x240>
 80030b2:	2305      	movs	r3, #5
 80030b4:	e008      	b.n	80030c8 <HAL_GPIO_Init+0x240>
 80030b6:	2304      	movs	r3, #4
 80030b8:	e006      	b.n	80030c8 <HAL_GPIO_Init+0x240>
 80030ba:	2303      	movs	r3, #3
 80030bc:	e004      	b.n	80030c8 <HAL_GPIO_Init+0x240>
 80030be:	2302      	movs	r3, #2
 80030c0:	e002      	b.n	80030c8 <HAL_GPIO_Init+0x240>
 80030c2:	2301      	movs	r3, #1
 80030c4:	e000      	b.n	80030c8 <HAL_GPIO_Init+0x240>
 80030c6:	2300      	movs	r3, #0
 80030c8:	69fa      	ldr	r2, [r7, #28]
 80030ca:	f002 0203 	and.w	r2, r2, #3
 80030ce:	0092      	lsls	r2, r2, #2
 80030d0:	4093      	lsls	r3, r2
 80030d2:	69ba      	ldr	r2, [r7, #24]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030d8:	4935      	ldr	r1, [pc, #212]	; (80031b0 <HAL_GPIO_Init+0x328>)
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	089b      	lsrs	r3, r3, #2
 80030de:	3302      	adds	r3, #2
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030e6:	4b3d      	ldr	r3, [pc, #244]	; (80031dc <HAL_GPIO_Init+0x354>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	43db      	mvns	r3, r3
 80030f0:	69ba      	ldr	r2, [r7, #24]
 80030f2:	4013      	ands	r3, r2
 80030f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d003      	beq.n	800310a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003102:	69ba      	ldr	r2, [r7, #24]
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	4313      	orrs	r3, r2
 8003108:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800310a:	4a34      	ldr	r2, [pc, #208]	; (80031dc <HAL_GPIO_Init+0x354>)
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003110:	4b32      	ldr	r3, [pc, #200]	; (80031dc <HAL_GPIO_Init+0x354>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	43db      	mvns	r3, r3
 800311a:	69ba      	ldr	r2, [r7, #24]
 800311c:	4013      	ands	r3, r2
 800311e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d003      	beq.n	8003134 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800312c:	69ba      	ldr	r2, [r7, #24]
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	4313      	orrs	r3, r2
 8003132:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003134:	4a29      	ldr	r2, [pc, #164]	; (80031dc <HAL_GPIO_Init+0x354>)
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800313a:	4b28      	ldr	r3, [pc, #160]	; (80031dc <HAL_GPIO_Init+0x354>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	43db      	mvns	r3, r3
 8003144:	69ba      	ldr	r2, [r7, #24]
 8003146:	4013      	ands	r3, r2
 8003148:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d003      	beq.n	800315e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003156:	69ba      	ldr	r2, [r7, #24]
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	4313      	orrs	r3, r2
 800315c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800315e:	4a1f      	ldr	r2, [pc, #124]	; (80031dc <HAL_GPIO_Init+0x354>)
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003164:	4b1d      	ldr	r3, [pc, #116]	; (80031dc <HAL_GPIO_Init+0x354>)
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	43db      	mvns	r3, r3
 800316e:	69ba      	ldr	r2, [r7, #24]
 8003170:	4013      	ands	r3, r2
 8003172:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d003      	beq.n	8003188 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	4313      	orrs	r3, r2
 8003186:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003188:	4a14      	ldr	r2, [pc, #80]	; (80031dc <HAL_GPIO_Init+0x354>)
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	3301      	adds	r3, #1
 8003192:	61fb      	str	r3, [r7, #28]
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	2b0f      	cmp	r3, #15
 8003198:	f67f ae84 	bls.w	8002ea4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800319c:	bf00      	nop
 800319e:	bf00      	nop
 80031a0:	3724      	adds	r7, #36	; 0x24
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
 80031aa:	bf00      	nop
 80031ac:	40023800 	.word	0x40023800
 80031b0:	40013800 	.word	0x40013800
 80031b4:	40020000 	.word	0x40020000
 80031b8:	40020400 	.word	0x40020400
 80031bc:	40020800 	.word	0x40020800
 80031c0:	40020c00 	.word	0x40020c00
 80031c4:	40021000 	.word	0x40021000
 80031c8:	40021400 	.word	0x40021400
 80031cc:	40021800 	.word	0x40021800
 80031d0:	40021c00 	.word	0x40021c00
 80031d4:	40022000 	.word	0x40022000
 80031d8:	40022400 	.word	0x40022400
 80031dc:	40013c00 	.word	0x40013c00

080031e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b085      	sub	sp, #20
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	460b      	mov	r3, r1
 80031ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	691a      	ldr	r2, [r3, #16]
 80031f0:	887b      	ldrh	r3, [r7, #2]
 80031f2:	4013      	ands	r3, r2
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d002      	beq.n	80031fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80031f8:	2301      	movs	r3, #1
 80031fa:	73fb      	strb	r3, [r7, #15]
 80031fc:	e001      	b.n	8003202 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80031fe:	2300      	movs	r3, #0
 8003200:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003202:	7bfb      	ldrb	r3, [r7, #15]
}
 8003204:	4618      	mov	r0, r3
 8003206:	3714      	adds	r7, #20
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	460b      	mov	r3, r1
 800321a:	807b      	strh	r3, [r7, #2]
 800321c:	4613      	mov	r3, r2
 800321e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003220:	787b      	ldrb	r3, [r7, #1]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d003      	beq.n	800322e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003226:	887a      	ldrh	r2, [r7, #2]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800322c:	e003      	b.n	8003236 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800322e:	887b      	ldrh	r3, [r7, #2]
 8003230:	041a      	lsls	r2, r3, #16
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	619a      	str	r2, [r3, #24]
}
 8003236:	bf00      	nop
 8003238:	370c      	adds	r7, #12
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
	...

08003244 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d101      	bne.n	8003256 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e12b      	b.n	80034ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b00      	cmp	r3, #0
 8003260:	d106      	bne.n	8003270 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f7fd fdce 	bl	8000e0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2224      	movs	r2, #36	; 0x24
 8003274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f022 0201 	bic.w	r2, r2, #1
 8003286:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003296:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80032a8:	f001 fcbc 	bl	8004c24 <HAL_RCC_GetPCLK1Freq>
 80032ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	4a81      	ldr	r2, [pc, #516]	; (80034b8 <HAL_I2C_Init+0x274>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d807      	bhi.n	80032c8 <HAL_I2C_Init+0x84>
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	4a80      	ldr	r2, [pc, #512]	; (80034bc <HAL_I2C_Init+0x278>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	bf94      	ite	ls
 80032c0:	2301      	movls	r3, #1
 80032c2:	2300      	movhi	r3, #0
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	e006      	b.n	80032d6 <HAL_I2C_Init+0x92>
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	4a7d      	ldr	r2, [pc, #500]	; (80034c0 <HAL_I2C_Init+0x27c>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	bf94      	ite	ls
 80032d0:	2301      	movls	r3, #1
 80032d2:	2300      	movhi	r3, #0
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d001      	beq.n	80032de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e0e7      	b.n	80034ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	4a78      	ldr	r2, [pc, #480]	; (80034c4 <HAL_I2C_Init+0x280>)
 80032e2:	fba2 2303 	umull	r2, r3, r2, r3
 80032e6:	0c9b      	lsrs	r3, r3, #18
 80032e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68ba      	ldr	r2, [r7, #8]
 80032fa:	430a      	orrs	r2, r1
 80032fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	6a1b      	ldr	r3, [r3, #32]
 8003304:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	4a6a      	ldr	r2, [pc, #424]	; (80034b8 <HAL_I2C_Init+0x274>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d802      	bhi.n	8003318 <HAL_I2C_Init+0xd4>
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	3301      	adds	r3, #1
 8003316:	e009      	b.n	800332c <HAL_I2C_Init+0xe8>
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800331e:	fb02 f303 	mul.w	r3, r2, r3
 8003322:	4a69      	ldr	r2, [pc, #420]	; (80034c8 <HAL_I2C_Init+0x284>)
 8003324:	fba2 2303 	umull	r2, r3, r2, r3
 8003328:	099b      	lsrs	r3, r3, #6
 800332a:	3301      	adds	r3, #1
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	6812      	ldr	r2, [r2, #0]
 8003330:	430b      	orrs	r3, r1
 8003332:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	69db      	ldr	r3, [r3, #28]
 800333a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800333e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	495c      	ldr	r1, [pc, #368]	; (80034b8 <HAL_I2C_Init+0x274>)
 8003348:	428b      	cmp	r3, r1
 800334a:	d819      	bhi.n	8003380 <HAL_I2C_Init+0x13c>
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	1e59      	subs	r1, r3, #1
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	005b      	lsls	r3, r3, #1
 8003356:	fbb1 f3f3 	udiv	r3, r1, r3
 800335a:	1c59      	adds	r1, r3, #1
 800335c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003360:	400b      	ands	r3, r1
 8003362:	2b00      	cmp	r3, #0
 8003364:	d00a      	beq.n	800337c <HAL_I2C_Init+0x138>
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	1e59      	subs	r1, r3, #1
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	005b      	lsls	r3, r3, #1
 8003370:	fbb1 f3f3 	udiv	r3, r1, r3
 8003374:	3301      	adds	r3, #1
 8003376:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800337a:	e051      	b.n	8003420 <HAL_I2C_Init+0x1dc>
 800337c:	2304      	movs	r3, #4
 800337e:	e04f      	b.n	8003420 <HAL_I2C_Init+0x1dc>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d111      	bne.n	80033ac <HAL_I2C_Init+0x168>
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	1e58      	subs	r0, r3, #1
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6859      	ldr	r1, [r3, #4]
 8003390:	460b      	mov	r3, r1
 8003392:	005b      	lsls	r3, r3, #1
 8003394:	440b      	add	r3, r1
 8003396:	fbb0 f3f3 	udiv	r3, r0, r3
 800339a:	3301      	adds	r3, #1
 800339c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	bf0c      	ite	eq
 80033a4:	2301      	moveq	r3, #1
 80033a6:	2300      	movne	r3, #0
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	e012      	b.n	80033d2 <HAL_I2C_Init+0x18e>
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	1e58      	subs	r0, r3, #1
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6859      	ldr	r1, [r3, #4]
 80033b4:	460b      	mov	r3, r1
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	440b      	add	r3, r1
 80033ba:	0099      	lsls	r1, r3, #2
 80033bc:	440b      	add	r3, r1
 80033be:	fbb0 f3f3 	udiv	r3, r0, r3
 80033c2:	3301      	adds	r3, #1
 80033c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	bf0c      	ite	eq
 80033cc:	2301      	moveq	r3, #1
 80033ce:	2300      	movne	r3, #0
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d001      	beq.n	80033da <HAL_I2C_Init+0x196>
 80033d6:	2301      	movs	r3, #1
 80033d8:	e022      	b.n	8003420 <HAL_I2C_Init+0x1dc>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d10e      	bne.n	8003400 <HAL_I2C_Init+0x1bc>
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	1e58      	subs	r0, r3, #1
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6859      	ldr	r1, [r3, #4]
 80033ea:	460b      	mov	r3, r1
 80033ec:	005b      	lsls	r3, r3, #1
 80033ee:	440b      	add	r3, r1
 80033f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80033f4:	3301      	adds	r3, #1
 80033f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033fe:	e00f      	b.n	8003420 <HAL_I2C_Init+0x1dc>
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	1e58      	subs	r0, r3, #1
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6859      	ldr	r1, [r3, #4]
 8003408:	460b      	mov	r3, r1
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	440b      	add	r3, r1
 800340e:	0099      	lsls	r1, r3, #2
 8003410:	440b      	add	r3, r1
 8003412:	fbb0 f3f3 	udiv	r3, r0, r3
 8003416:	3301      	adds	r3, #1
 8003418:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800341c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003420:	6879      	ldr	r1, [r7, #4]
 8003422:	6809      	ldr	r1, [r1, #0]
 8003424:	4313      	orrs	r3, r2
 8003426:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	69da      	ldr	r2, [r3, #28]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a1b      	ldr	r3, [r3, #32]
 800343a:	431a      	orrs	r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	430a      	orrs	r2, r1
 8003442:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800344e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	6911      	ldr	r1, [r2, #16]
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	68d2      	ldr	r2, [r2, #12]
 800345a:	4311      	orrs	r1, r2
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	6812      	ldr	r2, [r2, #0]
 8003460:	430b      	orrs	r3, r1
 8003462:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	695a      	ldr	r2, [r3, #20]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	699b      	ldr	r3, [r3, #24]
 8003476:	431a      	orrs	r2, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	430a      	orrs	r2, r1
 800347e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f042 0201 	orr.w	r2, r2, #1
 800348e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2220      	movs	r2, #32
 800349a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3710      	adds	r7, #16
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	000186a0 	.word	0x000186a0
 80034bc:	001e847f 	.word	0x001e847f
 80034c0:	003d08ff 	.word	0x003d08ff
 80034c4:	431bde83 	.word	0x431bde83
 80034c8:	10624dd3 	.word	0x10624dd3

080034cc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b088      	sub	sp, #32
 80034d0:	af02      	add	r7, sp, #8
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	4608      	mov	r0, r1
 80034d6:	4611      	mov	r1, r2
 80034d8:	461a      	mov	r2, r3
 80034da:	4603      	mov	r3, r0
 80034dc:	817b      	strh	r3, [r7, #10]
 80034de:	460b      	mov	r3, r1
 80034e0:	813b      	strh	r3, [r7, #8]
 80034e2:	4613      	mov	r3, r2
 80034e4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80034e6:	f7ff fafd 	bl	8002ae4 <HAL_GetTick>
 80034ea:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	2b20      	cmp	r3, #32
 80034f6:	f040 80d9 	bne.w	80036ac <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	9300      	str	r3, [sp, #0]
 80034fe:	2319      	movs	r3, #25
 8003500:	2201      	movs	r2, #1
 8003502:	496d      	ldr	r1, [pc, #436]	; (80036b8 <HAL_I2C_Mem_Write+0x1ec>)
 8003504:	68f8      	ldr	r0, [r7, #12]
 8003506:	f000 fc7f 	bl	8003e08 <I2C_WaitOnFlagUntilTimeout>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d001      	beq.n	8003514 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003510:	2302      	movs	r3, #2
 8003512:	e0cc      	b.n	80036ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800351a:	2b01      	cmp	r3, #1
 800351c:	d101      	bne.n	8003522 <HAL_I2C_Mem_Write+0x56>
 800351e:	2302      	movs	r3, #2
 8003520:	e0c5      	b.n	80036ae <HAL_I2C_Mem_Write+0x1e2>
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2201      	movs	r2, #1
 8003526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0301 	and.w	r3, r3, #1
 8003534:	2b01      	cmp	r3, #1
 8003536:	d007      	beq.n	8003548 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f042 0201 	orr.w	r2, r2, #1
 8003546:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003556:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2221      	movs	r2, #33	; 0x21
 800355c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2240      	movs	r2, #64	; 0x40
 8003564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6a3a      	ldr	r2, [r7, #32]
 8003572:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003578:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800357e:	b29a      	uxth	r2, r3
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	4a4d      	ldr	r2, [pc, #308]	; (80036bc <HAL_I2C_Mem_Write+0x1f0>)
 8003588:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800358a:	88f8      	ldrh	r0, [r7, #6]
 800358c:	893a      	ldrh	r2, [r7, #8]
 800358e:	8979      	ldrh	r1, [r7, #10]
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	9301      	str	r3, [sp, #4]
 8003594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003596:	9300      	str	r3, [sp, #0]
 8003598:	4603      	mov	r3, r0
 800359a:	68f8      	ldr	r0, [r7, #12]
 800359c:	f000 fab6 	bl	8003b0c <I2C_RequestMemoryWrite>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d052      	beq.n	800364c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e081      	b.n	80036ae <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035aa:	697a      	ldr	r2, [r7, #20]
 80035ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035ae:	68f8      	ldr	r0, [r7, #12]
 80035b0:	f000 fd00 	bl	8003fb4 <I2C_WaitOnTXEFlagUntilTimeout>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00d      	beq.n	80035d6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035be:	2b04      	cmp	r3, #4
 80035c0:	d107      	bne.n	80035d2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e06b      	b.n	80036ae <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035da:	781a      	ldrb	r2, [r3, #0]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e6:	1c5a      	adds	r2, r3, #1
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035f0:	3b01      	subs	r3, #1
 80035f2:	b29a      	uxth	r2, r3
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	3b01      	subs	r3, #1
 8003600:	b29a      	uxth	r2, r3
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	695b      	ldr	r3, [r3, #20]
 800360c:	f003 0304 	and.w	r3, r3, #4
 8003610:	2b04      	cmp	r3, #4
 8003612:	d11b      	bne.n	800364c <HAL_I2C_Mem_Write+0x180>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003618:	2b00      	cmp	r3, #0
 800361a:	d017      	beq.n	800364c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003620:	781a      	ldrb	r2, [r3, #0]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362c:	1c5a      	adds	r2, r3, #1
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003636:	3b01      	subs	r3, #1
 8003638:	b29a      	uxth	r2, r3
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003642:	b29b      	uxth	r3, r3
 8003644:	3b01      	subs	r3, #1
 8003646:	b29a      	uxth	r2, r3
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003650:	2b00      	cmp	r3, #0
 8003652:	d1aa      	bne.n	80035aa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003654:	697a      	ldr	r2, [r7, #20]
 8003656:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003658:	68f8      	ldr	r0, [r7, #12]
 800365a:	f000 fcec 	bl	8004036 <I2C_WaitOnBTFFlagUntilTimeout>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d00d      	beq.n	8003680 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003668:	2b04      	cmp	r3, #4
 800366a:	d107      	bne.n	800367c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800367a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e016      	b.n	80036ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800368e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2220      	movs	r2, #32
 8003694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2200      	movs	r2, #0
 800369c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80036a8:	2300      	movs	r3, #0
 80036aa:	e000      	b.n	80036ae <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80036ac:	2302      	movs	r3, #2
  }
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3718      	adds	r7, #24
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	00100002 	.word	0x00100002
 80036bc:	ffff0000 	.word	0xffff0000

080036c0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b08c      	sub	sp, #48	; 0x30
 80036c4:	af02      	add	r7, sp, #8
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	4608      	mov	r0, r1
 80036ca:	4611      	mov	r1, r2
 80036cc:	461a      	mov	r2, r3
 80036ce:	4603      	mov	r3, r0
 80036d0:	817b      	strh	r3, [r7, #10]
 80036d2:	460b      	mov	r3, r1
 80036d4:	813b      	strh	r3, [r7, #8]
 80036d6:	4613      	mov	r3, r2
 80036d8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80036da:	f7ff fa03 	bl	8002ae4 <HAL_GetTick>
 80036de:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	2b20      	cmp	r3, #32
 80036ea:	f040 8208 	bne.w	8003afe <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f0:	9300      	str	r3, [sp, #0]
 80036f2:	2319      	movs	r3, #25
 80036f4:	2201      	movs	r2, #1
 80036f6:	497b      	ldr	r1, [pc, #492]	; (80038e4 <HAL_I2C_Mem_Read+0x224>)
 80036f8:	68f8      	ldr	r0, [r7, #12]
 80036fa:	f000 fb85 	bl	8003e08 <I2C_WaitOnFlagUntilTimeout>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d001      	beq.n	8003708 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003704:	2302      	movs	r3, #2
 8003706:	e1fb      	b.n	8003b00 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800370e:	2b01      	cmp	r3, #1
 8003710:	d101      	bne.n	8003716 <HAL_I2C_Mem_Read+0x56>
 8003712:	2302      	movs	r3, #2
 8003714:	e1f4      	b.n	8003b00 <HAL_I2C_Mem_Read+0x440>
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0301 	and.w	r3, r3, #1
 8003728:	2b01      	cmp	r3, #1
 800372a:	d007      	beq.n	800373c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f042 0201 	orr.w	r2, r2, #1
 800373a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800374a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2222      	movs	r2, #34	; 0x22
 8003750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2240      	movs	r2, #64	; 0x40
 8003758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2200      	movs	r2, #0
 8003760:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003766:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800376c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003772:	b29a      	uxth	r2, r3
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	4a5b      	ldr	r2, [pc, #364]	; (80038e8 <HAL_I2C_Mem_Read+0x228>)
 800377c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800377e:	88f8      	ldrh	r0, [r7, #6]
 8003780:	893a      	ldrh	r2, [r7, #8]
 8003782:	8979      	ldrh	r1, [r7, #10]
 8003784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003786:	9301      	str	r3, [sp, #4]
 8003788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800378a:	9300      	str	r3, [sp, #0]
 800378c:	4603      	mov	r3, r0
 800378e:	68f8      	ldr	r0, [r7, #12]
 8003790:	f000 fa52 	bl	8003c38 <I2C_RequestMemoryRead>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d001      	beq.n	800379e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e1b0      	b.n	8003b00 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d113      	bne.n	80037ce <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037a6:	2300      	movs	r3, #0
 80037a8:	623b      	str	r3, [r7, #32]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	695b      	ldr	r3, [r3, #20]
 80037b0:	623b      	str	r3, [r7, #32]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	699b      	ldr	r3, [r3, #24]
 80037b8:	623b      	str	r3, [r7, #32]
 80037ba:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037ca:	601a      	str	r2, [r3, #0]
 80037cc:	e184      	b.n	8003ad8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d11b      	bne.n	800380e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037e6:	2300      	movs	r3, #0
 80037e8:	61fb      	str	r3, [r7, #28]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	695b      	ldr	r3, [r3, #20]
 80037f0:	61fb      	str	r3, [r7, #28]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	699b      	ldr	r3, [r3, #24]
 80037f8:	61fb      	str	r3, [r7, #28]
 80037fa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800380a:	601a      	str	r2, [r3, #0]
 800380c:	e164      	b.n	8003ad8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003812:	2b02      	cmp	r3, #2
 8003814:	d11b      	bne.n	800384e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003824:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003834:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003836:	2300      	movs	r3, #0
 8003838:	61bb      	str	r3, [r7, #24]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	695b      	ldr	r3, [r3, #20]
 8003840:	61bb      	str	r3, [r7, #24]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	699b      	ldr	r3, [r3, #24]
 8003848:	61bb      	str	r3, [r7, #24]
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	e144      	b.n	8003ad8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800384e:	2300      	movs	r3, #0
 8003850:	617b      	str	r3, [r7, #20]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	695b      	ldr	r3, [r3, #20]
 8003858:	617b      	str	r3, [r7, #20]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	699b      	ldr	r3, [r3, #24]
 8003860:	617b      	str	r3, [r7, #20]
 8003862:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003864:	e138      	b.n	8003ad8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800386a:	2b03      	cmp	r3, #3
 800386c:	f200 80f1 	bhi.w	8003a52 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003874:	2b01      	cmp	r3, #1
 8003876:	d123      	bne.n	80038c0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800387a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800387c:	68f8      	ldr	r0, [r7, #12]
 800387e:	f000 fc1b 	bl	80040b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d001      	beq.n	800388c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e139      	b.n	8003b00 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	691a      	ldr	r2, [r3, #16]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003896:	b2d2      	uxtb	r2, r2
 8003898:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389e:	1c5a      	adds	r2, r3, #1
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038a8:	3b01      	subs	r3, #1
 80038aa:	b29a      	uxth	r2, r3
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	3b01      	subs	r3, #1
 80038b8:	b29a      	uxth	r2, r3
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80038be:	e10b      	b.n	8003ad8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d14e      	bne.n	8003966 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80038c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ca:	9300      	str	r3, [sp, #0]
 80038cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ce:	2200      	movs	r2, #0
 80038d0:	4906      	ldr	r1, [pc, #24]	; (80038ec <HAL_I2C_Mem_Read+0x22c>)
 80038d2:	68f8      	ldr	r0, [r7, #12]
 80038d4:	f000 fa98 	bl	8003e08 <I2C_WaitOnFlagUntilTimeout>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d008      	beq.n	80038f0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e10e      	b.n	8003b00 <HAL_I2C_Mem_Read+0x440>
 80038e2:	bf00      	nop
 80038e4:	00100002 	.word	0x00100002
 80038e8:	ffff0000 	.word	0xffff0000
 80038ec:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	691a      	ldr	r2, [r3, #16]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390a:	b2d2      	uxtb	r2, r2
 800390c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003912:	1c5a      	adds	r2, r3, #1
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800391c:	3b01      	subs	r3, #1
 800391e:	b29a      	uxth	r2, r3
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003928:	b29b      	uxth	r3, r3
 800392a:	3b01      	subs	r3, #1
 800392c:	b29a      	uxth	r2, r3
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	691a      	ldr	r2, [r3, #16]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393c:	b2d2      	uxtb	r2, r2
 800393e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003944:	1c5a      	adds	r2, r3, #1
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800394e:	3b01      	subs	r3, #1
 8003950:	b29a      	uxth	r2, r3
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800395a:	b29b      	uxth	r3, r3
 800395c:	3b01      	subs	r3, #1
 800395e:	b29a      	uxth	r2, r3
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003964:	e0b8      	b.n	8003ad8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003968:	9300      	str	r3, [sp, #0]
 800396a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800396c:	2200      	movs	r2, #0
 800396e:	4966      	ldr	r1, [pc, #408]	; (8003b08 <HAL_I2C_Mem_Read+0x448>)
 8003970:	68f8      	ldr	r0, [r7, #12]
 8003972:	f000 fa49 	bl	8003e08 <I2C_WaitOnFlagUntilTimeout>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d001      	beq.n	8003980 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e0bf      	b.n	8003b00 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800398e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	691a      	ldr	r2, [r3, #16]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399a:	b2d2      	uxtb	r2, r2
 800399c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a2:	1c5a      	adds	r2, r3, #1
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ac:	3b01      	subs	r3, #1
 80039ae:	b29a      	uxth	r2, r3
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	3b01      	subs	r3, #1
 80039bc:	b29a      	uxth	r2, r3
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c4:	9300      	str	r3, [sp, #0]
 80039c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039c8:	2200      	movs	r2, #0
 80039ca:	494f      	ldr	r1, [pc, #316]	; (8003b08 <HAL_I2C_Mem_Read+0x448>)
 80039cc:	68f8      	ldr	r0, [r7, #12]
 80039ce:	f000 fa1b 	bl	8003e08 <I2C_WaitOnFlagUntilTimeout>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d001      	beq.n	80039dc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e091      	b.n	8003b00 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	691a      	ldr	r2, [r3, #16]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f6:	b2d2      	uxtb	r2, r2
 80039f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fe:	1c5a      	adds	r2, r3, #1
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a08:	3b01      	subs	r3, #1
 8003a0a:	b29a      	uxth	r2, r3
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	3b01      	subs	r3, #1
 8003a18:	b29a      	uxth	r2, r3
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	691a      	ldr	r2, [r3, #16]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a28:	b2d2      	uxtb	r2, r2
 8003a2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a30:	1c5a      	adds	r2, r3, #1
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a3a:	3b01      	subs	r3, #1
 8003a3c:	b29a      	uxth	r2, r3
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	3b01      	subs	r3, #1
 8003a4a:	b29a      	uxth	r2, r3
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a50:	e042      	b.n	8003ad8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a54:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003a56:	68f8      	ldr	r0, [r7, #12]
 8003a58:	f000 fb2e 	bl	80040b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d001      	beq.n	8003a66 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e04c      	b.n	8003b00 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	691a      	ldr	r2, [r3, #16]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a70:	b2d2      	uxtb	r2, r2
 8003a72:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a78:	1c5a      	adds	r2, r3, #1
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a82:	3b01      	subs	r3, #1
 8003a84:	b29a      	uxth	r2, r3
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	3b01      	subs	r3, #1
 8003a92:	b29a      	uxth	r2, r3
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	695b      	ldr	r3, [r3, #20]
 8003a9e:	f003 0304 	and.w	r3, r3, #4
 8003aa2:	2b04      	cmp	r3, #4
 8003aa4:	d118      	bne.n	8003ad8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	691a      	ldr	r2, [r3, #16]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab0:	b2d2      	uxtb	r2, r2
 8003ab2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab8:	1c5a      	adds	r2, r3, #1
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	b29a      	uxth	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	3b01      	subs	r3, #1
 8003ad2:	b29a      	uxth	r2, r3
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	f47f aec2 	bne.w	8003866 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2220      	movs	r2, #32
 8003ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003afa:	2300      	movs	r3, #0
 8003afc:	e000      	b.n	8003b00 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003afe:	2302      	movs	r3, #2
  }
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3728      	adds	r7, #40	; 0x28
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	00010004 	.word	0x00010004

08003b0c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b088      	sub	sp, #32
 8003b10:	af02      	add	r7, sp, #8
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	4608      	mov	r0, r1
 8003b16:	4611      	mov	r1, r2
 8003b18:	461a      	mov	r2, r3
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	817b      	strh	r3, [r7, #10]
 8003b1e:	460b      	mov	r3, r1
 8003b20:	813b      	strh	r3, [r7, #8]
 8003b22:	4613      	mov	r3, r2
 8003b24:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b34:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b38:	9300      	str	r3, [sp, #0]
 8003b3a:	6a3b      	ldr	r3, [r7, #32]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b42:	68f8      	ldr	r0, [r7, #12]
 8003b44:	f000 f960 	bl	8003e08 <I2C_WaitOnFlagUntilTimeout>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00d      	beq.n	8003b6a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b5c:	d103      	bne.n	8003b66 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b64:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e05f      	b.n	8003c2a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b6a:	897b      	ldrh	r3, [r7, #10]
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	461a      	mov	r2, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b78:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7c:	6a3a      	ldr	r2, [r7, #32]
 8003b7e:	492d      	ldr	r1, [pc, #180]	; (8003c34 <I2C_RequestMemoryWrite+0x128>)
 8003b80:	68f8      	ldr	r0, [r7, #12]
 8003b82:	f000 f998 	bl	8003eb6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d001      	beq.n	8003b90 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e04c      	b.n	8003c2a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b90:	2300      	movs	r3, #0
 8003b92:	617b      	str	r3, [r7, #20]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	695b      	ldr	r3, [r3, #20]
 8003b9a:	617b      	str	r3, [r7, #20]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	699b      	ldr	r3, [r3, #24]
 8003ba2:	617b      	str	r3, [r7, #20]
 8003ba4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ba6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ba8:	6a39      	ldr	r1, [r7, #32]
 8003baa:	68f8      	ldr	r0, [r7, #12]
 8003bac:	f000 fa02 	bl	8003fb4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00d      	beq.n	8003bd2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bba:	2b04      	cmp	r3, #4
 8003bbc:	d107      	bne.n	8003bce <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bcc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e02b      	b.n	8003c2a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003bd2:	88fb      	ldrh	r3, [r7, #6]
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d105      	bne.n	8003be4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003bd8:	893b      	ldrh	r3, [r7, #8]
 8003bda:	b2da      	uxtb	r2, r3
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	611a      	str	r2, [r3, #16]
 8003be2:	e021      	b.n	8003c28 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003be4:	893b      	ldrh	r3, [r7, #8]
 8003be6:	0a1b      	lsrs	r3, r3, #8
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	b2da      	uxtb	r2, r3
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bf4:	6a39      	ldr	r1, [r7, #32]
 8003bf6:	68f8      	ldr	r0, [r7, #12]
 8003bf8:	f000 f9dc 	bl	8003fb4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00d      	beq.n	8003c1e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c06:	2b04      	cmp	r3, #4
 8003c08:	d107      	bne.n	8003c1a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c18:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e005      	b.n	8003c2a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c1e:	893b      	ldrh	r3, [r7, #8]
 8003c20:	b2da      	uxtb	r2, r3
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3718      	adds	r7, #24
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	00010002 	.word	0x00010002

08003c38 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b088      	sub	sp, #32
 8003c3c:	af02      	add	r7, sp, #8
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	4608      	mov	r0, r1
 8003c42:	4611      	mov	r1, r2
 8003c44:	461a      	mov	r2, r3
 8003c46:	4603      	mov	r3, r0
 8003c48:	817b      	strh	r3, [r7, #10]
 8003c4a:	460b      	mov	r3, r1
 8003c4c:	813b      	strh	r3, [r7, #8]
 8003c4e:	4613      	mov	r3, r2
 8003c50:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c60:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c70:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c74:	9300      	str	r3, [sp, #0]
 8003c76:	6a3b      	ldr	r3, [r7, #32]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c7e:	68f8      	ldr	r0, [r7, #12]
 8003c80:	f000 f8c2 	bl	8003e08 <I2C_WaitOnFlagUntilTimeout>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00d      	beq.n	8003ca6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c98:	d103      	bne.n	8003ca2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ca0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e0aa      	b.n	8003dfc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ca6:	897b      	ldrh	r3, [r7, #10]
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	461a      	mov	r2, r3
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003cb4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb8:	6a3a      	ldr	r2, [r7, #32]
 8003cba:	4952      	ldr	r1, [pc, #328]	; (8003e04 <I2C_RequestMemoryRead+0x1cc>)
 8003cbc:	68f8      	ldr	r0, [r7, #12]
 8003cbe:	f000 f8fa 	bl	8003eb6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d001      	beq.n	8003ccc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e097      	b.n	8003dfc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ccc:	2300      	movs	r3, #0
 8003cce:	617b      	str	r3, [r7, #20]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	695b      	ldr	r3, [r3, #20]
 8003cd6:	617b      	str	r3, [r7, #20]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	617b      	str	r3, [r7, #20]
 8003ce0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ce2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ce4:	6a39      	ldr	r1, [r7, #32]
 8003ce6:	68f8      	ldr	r0, [r7, #12]
 8003ce8:	f000 f964 	bl	8003fb4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d00d      	beq.n	8003d0e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf6:	2b04      	cmp	r3, #4
 8003cf8:	d107      	bne.n	8003d0a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d08:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e076      	b.n	8003dfc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d0e:	88fb      	ldrh	r3, [r7, #6]
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d105      	bne.n	8003d20 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d14:	893b      	ldrh	r3, [r7, #8]
 8003d16:	b2da      	uxtb	r2, r3
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	611a      	str	r2, [r3, #16]
 8003d1e:	e021      	b.n	8003d64 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003d20:	893b      	ldrh	r3, [r7, #8]
 8003d22:	0a1b      	lsrs	r3, r3, #8
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	b2da      	uxtb	r2, r3
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d30:	6a39      	ldr	r1, [r7, #32]
 8003d32:	68f8      	ldr	r0, [r7, #12]
 8003d34:	f000 f93e 	bl	8003fb4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d00d      	beq.n	8003d5a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d42:	2b04      	cmp	r3, #4
 8003d44:	d107      	bne.n	8003d56 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d54:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e050      	b.n	8003dfc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d5a:	893b      	ldrh	r3, [r7, #8]
 8003d5c:	b2da      	uxtb	r2, r3
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d66:	6a39      	ldr	r1, [r7, #32]
 8003d68:	68f8      	ldr	r0, [r7, #12]
 8003d6a:	f000 f923 	bl	8003fb4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d00d      	beq.n	8003d90 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d78:	2b04      	cmp	r3, #4
 8003d7a:	d107      	bne.n	8003d8c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d8a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e035      	b.n	8003dfc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d9e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da2:	9300      	str	r3, [sp, #0]
 8003da4:	6a3b      	ldr	r3, [r7, #32]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003dac:	68f8      	ldr	r0, [r7, #12]
 8003dae:	f000 f82b 	bl	8003e08 <I2C_WaitOnFlagUntilTimeout>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d00d      	beq.n	8003dd4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dc6:	d103      	bne.n	8003dd0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e013      	b.n	8003dfc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003dd4:	897b      	ldrh	r3, [r7, #10]
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	f043 0301 	orr.w	r3, r3, #1
 8003ddc:	b2da      	uxtb	r2, r3
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de6:	6a3a      	ldr	r2, [r7, #32]
 8003de8:	4906      	ldr	r1, [pc, #24]	; (8003e04 <I2C_RequestMemoryRead+0x1cc>)
 8003dea:	68f8      	ldr	r0, [r7, #12]
 8003dec:	f000 f863 	bl	8003eb6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d001      	beq.n	8003dfa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e000      	b.n	8003dfc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003dfa:	2300      	movs	r3, #0
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3718      	adds	r7, #24
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	00010002 	.word	0x00010002

08003e08 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	603b      	str	r3, [r7, #0]
 8003e14:	4613      	mov	r3, r2
 8003e16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e18:	e025      	b.n	8003e66 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e20:	d021      	beq.n	8003e66 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e22:	f7fe fe5f 	bl	8002ae4 <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	69bb      	ldr	r3, [r7, #24]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	683a      	ldr	r2, [r7, #0]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d302      	bcc.n	8003e38 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d116      	bne.n	8003e66 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2220      	movs	r2, #32
 8003e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e52:	f043 0220 	orr.w	r2, r3, #32
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e023      	b.n	8003eae <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	0c1b      	lsrs	r3, r3, #16
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d10d      	bne.n	8003e8c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	695b      	ldr	r3, [r3, #20]
 8003e76:	43da      	mvns	r2, r3
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	bf0c      	ite	eq
 8003e82:	2301      	moveq	r3, #1
 8003e84:	2300      	movne	r3, #0
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	461a      	mov	r2, r3
 8003e8a:	e00c      	b.n	8003ea6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	699b      	ldr	r3, [r3, #24]
 8003e92:	43da      	mvns	r2, r3
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	4013      	ands	r3, r2
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	bf0c      	ite	eq
 8003e9e:	2301      	moveq	r3, #1
 8003ea0:	2300      	movne	r3, #0
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	79fb      	ldrb	r3, [r7, #7]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d0b6      	beq.n	8003e1a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3710      	adds	r7, #16
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}

08003eb6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003eb6:	b580      	push	{r7, lr}
 8003eb8:	b084      	sub	sp, #16
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	60f8      	str	r0, [r7, #12]
 8003ebe:	60b9      	str	r1, [r7, #8]
 8003ec0:	607a      	str	r2, [r7, #4]
 8003ec2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ec4:	e051      	b.n	8003f6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	695b      	ldr	r3, [r3, #20]
 8003ecc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ed0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ed4:	d123      	bne.n	8003f1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ee4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003eee:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2220      	movs	r2, #32
 8003efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0a:	f043 0204 	orr.w	r2, r3, #4
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e046      	b.n	8003fac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f24:	d021      	beq.n	8003f6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f26:	f7fe fddd 	bl	8002ae4 <HAL_GetTick>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	1ad3      	subs	r3, r2, r3
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d302      	bcc.n	8003f3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d116      	bne.n	8003f6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2220      	movs	r2, #32
 8003f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f56:	f043 0220 	orr.w	r2, r3, #32
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e020      	b.n	8003fac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	0c1b      	lsrs	r3, r3, #16
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d10c      	bne.n	8003f8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	695b      	ldr	r3, [r3, #20]
 8003f7a:	43da      	mvns	r2, r3
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	4013      	ands	r3, r2
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	bf14      	ite	ne
 8003f86:	2301      	movne	r3, #1
 8003f88:	2300      	moveq	r3, #0
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	e00b      	b.n	8003fa6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	699b      	ldr	r3, [r3, #24]
 8003f94:	43da      	mvns	r2, r3
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	4013      	ands	r3, r2
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	bf14      	ite	ne
 8003fa0:	2301      	movne	r3, #1
 8003fa2:	2300      	moveq	r3, #0
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d18d      	bne.n	8003ec6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3710      	adds	r7, #16
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fc0:	e02d      	b.n	800401e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003fc2:	68f8      	ldr	r0, [r7, #12]
 8003fc4:	f000 f8ce 	bl	8004164 <I2C_IsAcknowledgeFailed>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d001      	beq.n	8003fd2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e02d      	b.n	800402e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fd8:	d021      	beq.n	800401e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fda:	f7fe fd83 	bl	8002ae4 <HAL_GetTick>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	68ba      	ldr	r2, [r7, #8]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d302      	bcc.n	8003ff0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d116      	bne.n	800401e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2220      	movs	r2, #32
 8003ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2200      	movs	r2, #0
 8004002:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400a:	f043 0220 	orr.w	r2, r3, #32
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2200      	movs	r2, #0
 8004016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e007      	b.n	800402e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	695b      	ldr	r3, [r3, #20]
 8004024:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004028:	2b80      	cmp	r3, #128	; 0x80
 800402a:	d1ca      	bne.n	8003fc2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800402c:	2300      	movs	r3, #0
}
 800402e:	4618      	mov	r0, r3
 8004030:	3710      	adds	r7, #16
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}

08004036 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004036:	b580      	push	{r7, lr}
 8004038:	b084      	sub	sp, #16
 800403a:	af00      	add	r7, sp, #0
 800403c:	60f8      	str	r0, [r7, #12]
 800403e:	60b9      	str	r1, [r7, #8]
 8004040:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004042:	e02d      	b.n	80040a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004044:	68f8      	ldr	r0, [r7, #12]
 8004046:	f000 f88d 	bl	8004164 <I2C_IsAcknowledgeFailed>
 800404a:	4603      	mov	r3, r0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d001      	beq.n	8004054 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e02d      	b.n	80040b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800405a:	d021      	beq.n	80040a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800405c:	f7fe fd42 	bl	8002ae4 <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	68ba      	ldr	r2, [r7, #8]
 8004068:	429a      	cmp	r2, r3
 800406a:	d302      	bcc.n	8004072 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d116      	bne.n	80040a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2200      	movs	r2, #0
 8004076:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2220      	movs	r2, #32
 800407c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408c:	f043 0220 	orr.w	r2, r3, #32
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e007      	b.n	80040b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	695b      	ldr	r3, [r3, #20]
 80040a6:	f003 0304 	and.w	r3, r3, #4
 80040aa:	2b04      	cmp	r3, #4
 80040ac:	d1ca      	bne.n	8004044 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80040ae:	2300      	movs	r3, #0
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3710      	adds	r7, #16
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	60b9      	str	r1, [r7, #8]
 80040c2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80040c4:	e042      	b.n	800414c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	695b      	ldr	r3, [r3, #20]
 80040cc:	f003 0310 	and.w	r3, r3, #16
 80040d0:	2b10      	cmp	r3, #16
 80040d2:	d119      	bne.n	8004108 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f06f 0210 	mvn.w	r2, #16
 80040dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2200      	movs	r2, #0
 80040e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2220      	movs	r2, #32
 80040e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e029      	b.n	800415c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004108:	f7fe fcec 	bl	8002ae4 <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	68ba      	ldr	r2, [r7, #8]
 8004114:	429a      	cmp	r2, r3
 8004116:	d302      	bcc.n	800411e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d116      	bne.n	800414c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2200      	movs	r2, #0
 8004122:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2220      	movs	r2, #32
 8004128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2200      	movs	r2, #0
 8004130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004138:	f043 0220 	orr.w	r2, r3, #32
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2200      	movs	r2, #0
 8004144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e007      	b.n	800415c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	695b      	ldr	r3, [r3, #20]
 8004152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004156:	2b40      	cmp	r3, #64	; 0x40
 8004158:	d1b5      	bne.n	80040c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800415a:	2300      	movs	r3, #0
}
 800415c:	4618      	mov	r0, r3
 800415e:	3710      	adds	r7, #16
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004176:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800417a:	d11b      	bne.n	80041b4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004184:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2220      	movs	r2, #32
 8004190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a0:	f043 0204 	orr.w	r2, r3, #4
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e000      	b.n	80041b6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	370c      	adds	r7, #12
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr

080041c2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80041c2:	b480      	push	{r7}
 80041c4:	b083      	sub	sp, #12
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	6078      	str	r0, [r7, #4]
 80041ca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	2b20      	cmp	r3, #32
 80041d6:	d129      	bne.n	800422c <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2224      	movs	r2, #36	; 0x24
 80041dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f022 0201 	bic.w	r2, r2, #1
 80041ee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f022 0210 	bic.w	r2, r2, #16
 80041fe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	683a      	ldr	r2, [r7, #0]
 800420c:	430a      	orrs	r2, r1
 800420e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f042 0201 	orr.w	r2, r2, #1
 800421e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2220      	movs	r2, #32
 8004224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004228:	2300      	movs	r3, #0
 800422a:	e000      	b.n	800422e <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800422c:	2302      	movs	r3, #2
  }
}
 800422e:	4618      	mov	r0, r3
 8004230:	370c      	adds	r7, #12
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr

0800423a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800423a:	b480      	push	{r7}
 800423c:	b085      	sub	sp, #20
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
 8004242:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004244:	2300      	movs	r3, #0
 8004246:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800424e:	b2db      	uxtb	r3, r3
 8004250:	2b20      	cmp	r3, #32
 8004252:	d12a      	bne.n	80042aa <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2224      	movs	r2, #36	; 0x24
 8004258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f022 0201 	bic.w	r2, r2, #1
 800426a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004272:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004274:	89fb      	ldrh	r3, [r7, #14]
 8004276:	f023 030f 	bic.w	r3, r3, #15
 800427a:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	b29a      	uxth	r2, r3
 8004280:	89fb      	ldrh	r3, [r7, #14]
 8004282:	4313      	orrs	r3, r2
 8004284:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	89fa      	ldrh	r2, [r7, #14]
 800428c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f042 0201 	orr.w	r2, r2, #1
 800429c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2220      	movs	r2, #32
 80042a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80042a6:	2300      	movs	r3, #0
 80042a8:	e000      	b.n	80042ac <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80042aa:	2302      	movs	r3, #2
  }
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3714      	adds	r7, #20
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80042be:	2300      	movs	r3, #0
 80042c0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80042c2:	2300      	movs	r3, #0
 80042c4:	603b      	str	r3, [r7, #0]
 80042c6:	4b20      	ldr	r3, [pc, #128]	; (8004348 <HAL_PWREx_EnableOverDrive+0x90>)
 80042c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ca:	4a1f      	ldr	r2, [pc, #124]	; (8004348 <HAL_PWREx_EnableOverDrive+0x90>)
 80042cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042d0:	6413      	str	r3, [r2, #64]	; 0x40
 80042d2:	4b1d      	ldr	r3, [pc, #116]	; (8004348 <HAL_PWREx_EnableOverDrive+0x90>)
 80042d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042da:	603b      	str	r3, [r7, #0]
 80042dc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80042de:	4b1b      	ldr	r3, [pc, #108]	; (800434c <HAL_PWREx_EnableOverDrive+0x94>)
 80042e0:	2201      	movs	r2, #1
 80042e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80042e4:	f7fe fbfe 	bl	8002ae4 <HAL_GetTick>
 80042e8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80042ea:	e009      	b.n	8004300 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80042ec:	f7fe fbfa 	bl	8002ae4 <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80042fa:	d901      	bls.n	8004300 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80042fc:	2303      	movs	r3, #3
 80042fe:	e01f      	b.n	8004340 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004300:	4b13      	ldr	r3, [pc, #76]	; (8004350 <HAL_PWREx_EnableOverDrive+0x98>)
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004308:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800430c:	d1ee      	bne.n	80042ec <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800430e:	4b11      	ldr	r3, [pc, #68]	; (8004354 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004310:	2201      	movs	r2, #1
 8004312:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004314:	f7fe fbe6 	bl	8002ae4 <HAL_GetTick>
 8004318:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800431a:	e009      	b.n	8004330 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800431c:	f7fe fbe2 	bl	8002ae4 <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800432a:	d901      	bls.n	8004330 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e007      	b.n	8004340 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004330:	4b07      	ldr	r3, [pc, #28]	; (8004350 <HAL_PWREx_EnableOverDrive+0x98>)
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004338:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800433c:	d1ee      	bne.n	800431c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800433e:	2300      	movs	r3, #0
}
 8004340:	4618      	mov	r0, r3
 8004342:	3708      	adds	r7, #8
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}
 8004348:	40023800 	.word	0x40023800
 800434c:	420e0040 	.word	0x420e0040
 8004350:	40007000 	.word	0x40007000
 8004354:	420e0044 	.word	0x420e0044

08004358 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b086      	sub	sp, #24
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d101      	bne.n	800436a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e25e      	b.n	8004828 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0301 	and.w	r3, r3, #1
 8004372:	2b00      	cmp	r3, #0
 8004374:	d075      	beq.n	8004462 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004376:	4b88      	ldr	r3, [pc, #544]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	f003 030c 	and.w	r3, r3, #12
 800437e:	2b04      	cmp	r3, #4
 8004380:	d00c      	beq.n	800439c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004382:	4b85      	ldr	r3, [pc, #532]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800438a:	2b08      	cmp	r3, #8
 800438c:	d112      	bne.n	80043b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800438e:	4b82      	ldr	r3, [pc, #520]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004396:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800439a:	d10b      	bne.n	80043b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800439c:	4b7e      	ldr	r3, [pc, #504]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d05b      	beq.n	8004460 <HAL_RCC_OscConfig+0x108>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d157      	bne.n	8004460 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e239      	b.n	8004828 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043bc:	d106      	bne.n	80043cc <HAL_RCC_OscConfig+0x74>
 80043be:	4b76      	ldr	r3, [pc, #472]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a75      	ldr	r2, [pc, #468]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 80043c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043c8:	6013      	str	r3, [r2, #0]
 80043ca:	e01d      	b.n	8004408 <HAL_RCC_OscConfig+0xb0>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043d4:	d10c      	bne.n	80043f0 <HAL_RCC_OscConfig+0x98>
 80043d6:	4b70      	ldr	r3, [pc, #448]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a6f      	ldr	r2, [pc, #444]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 80043dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043e0:	6013      	str	r3, [r2, #0]
 80043e2:	4b6d      	ldr	r3, [pc, #436]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a6c      	ldr	r2, [pc, #432]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 80043e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043ec:	6013      	str	r3, [r2, #0]
 80043ee:	e00b      	b.n	8004408 <HAL_RCC_OscConfig+0xb0>
 80043f0:	4b69      	ldr	r3, [pc, #420]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a68      	ldr	r2, [pc, #416]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 80043f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043fa:	6013      	str	r3, [r2, #0]
 80043fc:	4b66      	ldr	r3, [pc, #408]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a65      	ldr	r2, [pc, #404]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 8004402:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004406:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d013      	beq.n	8004438 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004410:	f7fe fb68 	bl	8002ae4 <HAL_GetTick>
 8004414:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004416:	e008      	b.n	800442a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004418:	f7fe fb64 	bl	8002ae4 <HAL_GetTick>
 800441c:	4602      	mov	r2, r0
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	2b64      	cmp	r3, #100	; 0x64
 8004424:	d901      	bls.n	800442a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e1fe      	b.n	8004828 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800442a:	4b5b      	ldr	r3, [pc, #364]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d0f0      	beq.n	8004418 <HAL_RCC_OscConfig+0xc0>
 8004436:	e014      	b.n	8004462 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004438:	f7fe fb54 	bl	8002ae4 <HAL_GetTick>
 800443c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800443e:	e008      	b.n	8004452 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004440:	f7fe fb50 	bl	8002ae4 <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	2b64      	cmp	r3, #100	; 0x64
 800444c:	d901      	bls.n	8004452 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e1ea      	b.n	8004828 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004452:	4b51      	ldr	r3, [pc, #324]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d1f0      	bne.n	8004440 <HAL_RCC_OscConfig+0xe8>
 800445e:	e000      	b.n	8004462 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004460:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0302 	and.w	r3, r3, #2
 800446a:	2b00      	cmp	r3, #0
 800446c:	d063      	beq.n	8004536 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800446e:	4b4a      	ldr	r3, [pc, #296]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f003 030c 	and.w	r3, r3, #12
 8004476:	2b00      	cmp	r3, #0
 8004478:	d00b      	beq.n	8004492 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800447a:	4b47      	ldr	r3, [pc, #284]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004482:	2b08      	cmp	r3, #8
 8004484:	d11c      	bne.n	80044c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004486:	4b44      	ldr	r3, [pc, #272]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d116      	bne.n	80044c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004492:	4b41      	ldr	r3, [pc, #260]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0302 	and.w	r3, r3, #2
 800449a:	2b00      	cmp	r3, #0
 800449c:	d005      	beq.n	80044aa <HAL_RCC_OscConfig+0x152>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d001      	beq.n	80044aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e1be      	b.n	8004828 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044aa:	4b3b      	ldr	r3, [pc, #236]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	00db      	lsls	r3, r3, #3
 80044b8:	4937      	ldr	r1, [pc, #220]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044be:	e03a      	b.n	8004536 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d020      	beq.n	800450a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044c8:	4b34      	ldr	r3, [pc, #208]	; (800459c <HAL_RCC_OscConfig+0x244>)
 80044ca:	2201      	movs	r2, #1
 80044cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ce:	f7fe fb09 	bl	8002ae4 <HAL_GetTick>
 80044d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044d4:	e008      	b.n	80044e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044d6:	f7fe fb05 	bl	8002ae4 <HAL_GetTick>
 80044da:	4602      	mov	r2, r0
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	d901      	bls.n	80044e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80044e4:	2303      	movs	r3, #3
 80044e6:	e19f      	b.n	8004828 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044e8:	4b2b      	ldr	r3, [pc, #172]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0302 	and.w	r3, r3, #2
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d0f0      	beq.n	80044d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044f4:	4b28      	ldr	r3, [pc, #160]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	00db      	lsls	r3, r3, #3
 8004502:	4925      	ldr	r1, [pc, #148]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 8004504:	4313      	orrs	r3, r2
 8004506:	600b      	str	r3, [r1, #0]
 8004508:	e015      	b.n	8004536 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800450a:	4b24      	ldr	r3, [pc, #144]	; (800459c <HAL_RCC_OscConfig+0x244>)
 800450c:	2200      	movs	r2, #0
 800450e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004510:	f7fe fae8 	bl	8002ae4 <HAL_GetTick>
 8004514:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004516:	e008      	b.n	800452a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004518:	f7fe fae4 	bl	8002ae4 <HAL_GetTick>
 800451c:	4602      	mov	r2, r0
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	2b02      	cmp	r3, #2
 8004524:	d901      	bls.n	800452a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e17e      	b.n	8004828 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800452a:	4b1b      	ldr	r3, [pc, #108]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0302 	and.w	r3, r3, #2
 8004532:	2b00      	cmp	r3, #0
 8004534:	d1f0      	bne.n	8004518 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0308 	and.w	r3, r3, #8
 800453e:	2b00      	cmp	r3, #0
 8004540:	d036      	beq.n	80045b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	695b      	ldr	r3, [r3, #20]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d016      	beq.n	8004578 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800454a:	4b15      	ldr	r3, [pc, #84]	; (80045a0 <HAL_RCC_OscConfig+0x248>)
 800454c:	2201      	movs	r2, #1
 800454e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004550:	f7fe fac8 	bl	8002ae4 <HAL_GetTick>
 8004554:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004556:	e008      	b.n	800456a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004558:	f7fe fac4 	bl	8002ae4 <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	2b02      	cmp	r3, #2
 8004564:	d901      	bls.n	800456a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e15e      	b.n	8004828 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800456a:	4b0b      	ldr	r3, [pc, #44]	; (8004598 <HAL_RCC_OscConfig+0x240>)
 800456c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800456e:	f003 0302 	and.w	r3, r3, #2
 8004572:	2b00      	cmp	r3, #0
 8004574:	d0f0      	beq.n	8004558 <HAL_RCC_OscConfig+0x200>
 8004576:	e01b      	b.n	80045b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004578:	4b09      	ldr	r3, [pc, #36]	; (80045a0 <HAL_RCC_OscConfig+0x248>)
 800457a:	2200      	movs	r2, #0
 800457c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800457e:	f7fe fab1 	bl	8002ae4 <HAL_GetTick>
 8004582:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004584:	e00e      	b.n	80045a4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004586:	f7fe faad 	bl	8002ae4 <HAL_GetTick>
 800458a:	4602      	mov	r2, r0
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	2b02      	cmp	r3, #2
 8004592:	d907      	bls.n	80045a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004594:	2303      	movs	r3, #3
 8004596:	e147      	b.n	8004828 <HAL_RCC_OscConfig+0x4d0>
 8004598:	40023800 	.word	0x40023800
 800459c:	42470000 	.word	0x42470000
 80045a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045a4:	4b88      	ldr	r3, [pc, #544]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 80045a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045a8:	f003 0302 	and.w	r3, r3, #2
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d1ea      	bne.n	8004586 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0304 	and.w	r3, r3, #4
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	f000 8097 	beq.w	80046ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045be:	2300      	movs	r3, #0
 80045c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045c2:	4b81      	ldr	r3, [pc, #516]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 80045c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d10f      	bne.n	80045ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045ce:	2300      	movs	r3, #0
 80045d0:	60bb      	str	r3, [r7, #8]
 80045d2:	4b7d      	ldr	r3, [pc, #500]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 80045d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d6:	4a7c      	ldr	r2, [pc, #496]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 80045d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045dc:	6413      	str	r3, [r2, #64]	; 0x40
 80045de:	4b7a      	ldr	r3, [pc, #488]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 80045e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045e6:	60bb      	str	r3, [r7, #8]
 80045e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045ea:	2301      	movs	r3, #1
 80045ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045ee:	4b77      	ldr	r3, [pc, #476]	; (80047cc <HAL_RCC_OscConfig+0x474>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d118      	bne.n	800462c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045fa:	4b74      	ldr	r3, [pc, #464]	; (80047cc <HAL_RCC_OscConfig+0x474>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a73      	ldr	r2, [pc, #460]	; (80047cc <HAL_RCC_OscConfig+0x474>)
 8004600:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004604:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004606:	f7fe fa6d 	bl	8002ae4 <HAL_GetTick>
 800460a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800460c:	e008      	b.n	8004620 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800460e:	f7fe fa69 	bl	8002ae4 <HAL_GetTick>
 8004612:	4602      	mov	r2, r0
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	1ad3      	subs	r3, r2, r3
 8004618:	2b02      	cmp	r3, #2
 800461a:	d901      	bls.n	8004620 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800461c:	2303      	movs	r3, #3
 800461e:	e103      	b.n	8004828 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004620:	4b6a      	ldr	r3, [pc, #424]	; (80047cc <HAL_RCC_OscConfig+0x474>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004628:	2b00      	cmp	r3, #0
 800462a:	d0f0      	beq.n	800460e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	2b01      	cmp	r3, #1
 8004632:	d106      	bne.n	8004642 <HAL_RCC_OscConfig+0x2ea>
 8004634:	4b64      	ldr	r3, [pc, #400]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 8004636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004638:	4a63      	ldr	r2, [pc, #396]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 800463a:	f043 0301 	orr.w	r3, r3, #1
 800463e:	6713      	str	r3, [r2, #112]	; 0x70
 8004640:	e01c      	b.n	800467c <HAL_RCC_OscConfig+0x324>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	2b05      	cmp	r3, #5
 8004648:	d10c      	bne.n	8004664 <HAL_RCC_OscConfig+0x30c>
 800464a:	4b5f      	ldr	r3, [pc, #380]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 800464c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800464e:	4a5e      	ldr	r2, [pc, #376]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 8004650:	f043 0304 	orr.w	r3, r3, #4
 8004654:	6713      	str	r3, [r2, #112]	; 0x70
 8004656:	4b5c      	ldr	r3, [pc, #368]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 8004658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800465a:	4a5b      	ldr	r2, [pc, #364]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 800465c:	f043 0301 	orr.w	r3, r3, #1
 8004660:	6713      	str	r3, [r2, #112]	; 0x70
 8004662:	e00b      	b.n	800467c <HAL_RCC_OscConfig+0x324>
 8004664:	4b58      	ldr	r3, [pc, #352]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 8004666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004668:	4a57      	ldr	r2, [pc, #348]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 800466a:	f023 0301 	bic.w	r3, r3, #1
 800466e:	6713      	str	r3, [r2, #112]	; 0x70
 8004670:	4b55      	ldr	r3, [pc, #340]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 8004672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004674:	4a54      	ldr	r2, [pc, #336]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 8004676:	f023 0304 	bic.w	r3, r3, #4
 800467a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d015      	beq.n	80046b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004684:	f7fe fa2e 	bl	8002ae4 <HAL_GetTick>
 8004688:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800468a:	e00a      	b.n	80046a2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800468c:	f7fe fa2a 	bl	8002ae4 <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	f241 3288 	movw	r2, #5000	; 0x1388
 800469a:	4293      	cmp	r3, r2
 800469c:	d901      	bls.n	80046a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e0c2      	b.n	8004828 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046a2:	4b49      	ldr	r3, [pc, #292]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 80046a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a6:	f003 0302 	and.w	r3, r3, #2
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d0ee      	beq.n	800468c <HAL_RCC_OscConfig+0x334>
 80046ae:	e014      	b.n	80046da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046b0:	f7fe fa18 	bl	8002ae4 <HAL_GetTick>
 80046b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046b6:	e00a      	b.n	80046ce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046b8:	f7fe fa14 	bl	8002ae4 <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d901      	bls.n	80046ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e0ac      	b.n	8004828 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046ce:	4b3e      	ldr	r3, [pc, #248]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 80046d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d2:	f003 0302 	and.w	r3, r3, #2
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d1ee      	bne.n	80046b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046da:	7dfb      	ldrb	r3, [r7, #23]
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d105      	bne.n	80046ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046e0:	4b39      	ldr	r3, [pc, #228]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 80046e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e4:	4a38      	ldr	r2, [pc, #224]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 80046e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	699b      	ldr	r3, [r3, #24]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	f000 8098 	beq.w	8004826 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046f6:	4b34      	ldr	r3, [pc, #208]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	f003 030c 	and.w	r3, r3, #12
 80046fe:	2b08      	cmp	r3, #8
 8004700:	d05c      	beq.n	80047bc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	699b      	ldr	r3, [r3, #24]
 8004706:	2b02      	cmp	r3, #2
 8004708:	d141      	bne.n	800478e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800470a:	4b31      	ldr	r3, [pc, #196]	; (80047d0 <HAL_RCC_OscConfig+0x478>)
 800470c:	2200      	movs	r2, #0
 800470e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004710:	f7fe f9e8 	bl	8002ae4 <HAL_GetTick>
 8004714:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004716:	e008      	b.n	800472a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004718:	f7fe f9e4 	bl	8002ae4 <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	2b02      	cmp	r3, #2
 8004724:	d901      	bls.n	800472a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e07e      	b.n	8004828 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800472a:	4b27      	ldr	r3, [pc, #156]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d1f0      	bne.n	8004718 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	69da      	ldr	r2, [r3, #28]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a1b      	ldr	r3, [r3, #32]
 800473e:	431a      	orrs	r2, r3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004744:	019b      	lsls	r3, r3, #6
 8004746:	431a      	orrs	r2, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800474c:	085b      	lsrs	r3, r3, #1
 800474e:	3b01      	subs	r3, #1
 8004750:	041b      	lsls	r3, r3, #16
 8004752:	431a      	orrs	r2, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004758:	061b      	lsls	r3, r3, #24
 800475a:	491b      	ldr	r1, [pc, #108]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 800475c:	4313      	orrs	r3, r2
 800475e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004760:	4b1b      	ldr	r3, [pc, #108]	; (80047d0 <HAL_RCC_OscConfig+0x478>)
 8004762:	2201      	movs	r2, #1
 8004764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004766:	f7fe f9bd 	bl	8002ae4 <HAL_GetTick>
 800476a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800476c:	e008      	b.n	8004780 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800476e:	f7fe f9b9 	bl	8002ae4 <HAL_GetTick>
 8004772:	4602      	mov	r2, r0
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	1ad3      	subs	r3, r2, r3
 8004778:	2b02      	cmp	r3, #2
 800477a:	d901      	bls.n	8004780 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800477c:	2303      	movs	r3, #3
 800477e:	e053      	b.n	8004828 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004780:	4b11      	ldr	r3, [pc, #68]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d0f0      	beq.n	800476e <HAL_RCC_OscConfig+0x416>
 800478c:	e04b      	b.n	8004826 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800478e:	4b10      	ldr	r3, [pc, #64]	; (80047d0 <HAL_RCC_OscConfig+0x478>)
 8004790:	2200      	movs	r2, #0
 8004792:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004794:	f7fe f9a6 	bl	8002ae4 <HAL_GetTick>
 8004798:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800479a:	e008      	b.n	80047ae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800479c:	f7fe f9a2 	bl	8002ae4 <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d901      	bls.n	80047ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e03c      	b.n	8004828 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047ae:	4b06      	ldr	r3, [pc, #24]	; (80047c8 <HAL_RCC_OscConfig+0x470>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d1f0      	bne.n	800479c <HAL_RCC_OscConfig+0x444>
 80047ba:	e034      	b.n	8004826 <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	699b      	ldr	r3, [r3, #24]
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d107      	bne.n	80047d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e02f      	b.n	8004828 <HAL_RCC_OscConfig+0x4d0>
 80047c8:	40023800 	.word	0x40023800
 80047cc:	40007000 	.word	0x40007000
 80047d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047d4:	4b16      	ldr	r3, [pc, #88]	; (8004830 <HAL_RCC_OscConfig+0x4d8>)
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	69db      	ldr	r3, [r3, #28]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d11c      	bne.n	8004822 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d115      	bne.n	8004822 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80047f6:	68fa      	ldr	r2, [r7, #12]
 80047f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80047fc:	4013      	ands	r3, r2
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004802:	4293      	cmp	r3, r2
 8004804:	d10d      	bne.n	8004822 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004810:	429a      	cmp	r2, r3
 8004812:	d106      	bne.n	8004822 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800481e:	429a      	cmp	r2, r3
 8004820:	d001      	beq.n	8004826 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e000      	b.n	8004828 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 8004826:	2300      	movs	r3, #0
}
 8004828:	4618      	mov	r0, r3
 800482a:	3718      	adds	r7, #24
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}
 8004830:	40023800 	.word	0x40023800

08004834 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d101      	bne.n	8004848 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e0cc      	b.n	80049e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004848:	4b68      	ldr	r3, [pc, #416]	; (80049ec <HAL_RCC_ClockConfig+0x1b8>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 030f 	and.w	r3, r3, #15
 8004850:	683a      	ldr	r2, [r7, #0]
 8004852:	429a      	cmp	r2, r3
 8004854:	d90c      	bls.n	8004870 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004856:	4b65      	ldr	r3, [pc, #404]	; (80049ec <HAL_RCC_ClockConfig+0x1b8>)
 8004858:	683a      	ldr	r2, [r7, #0]
 800485a:	b2d2      	uxtb	r2, r2
 800485c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800485e:	4b63      	ldr	r3, [pc, #396]	; (80049ec <HAL_RCC_ClockConfig+0x1b8>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 030f 	and.w	r3, r3, #15
 8004866:	683a      	ldr	r2, [r7, #0]
 8004868:	429a      	cmp	r2, r3
 800486a:	d001      	beq.n	8004870 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e0b8      	b.n	80049e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0302 	and.w	r3, r3, #2
 8004878:	2b00      	cmp	r3, #0
 800487a:	d020      	beq.n	80048be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0304 	and.w	r3, r3, #4
 8004884:	2b00      	cmp	r3, #0
 8004886:	d005      	beq.n	8004894 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004888:	4b59      	ldr	r3, [pc, #356]	; (80049f0 <HAL_RCC_ClockConfig+0x1bc>)
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	4a58      	ldr	r2, [pc, #352]	; (80049f0 <HAL_RCC_ClockConfig+0x1bc>)
 800488e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004892:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0308 	and.w	r3, r3, #8
 800489c:	2b00      	cmp	r3, #0
 800489e:	d005      	beq.n	80048ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048a0:	4b53      	ldr	r3, [pc, #332]	; (80049f0 <HAL_RCC_ClockConfig+0x1bc>)
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	4a52      	ldr	r2, [pc, #328]	; (80049f0 <HAL_RCC_ClockConfig+0x1bc>)
 80048a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80048aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048ac:	4b50      	ldr	r3, [pc, #320]	; (80049f0 <HAL_RCC_ClockConfig+0x1bc>)
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	494d      	ldr	r1, [pc, #308]	; (80049f0 <HAL_RCC_ClockConfig+0x1bc>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0301 	and.w	r3, r3, #1
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d044      	beq.n	8004954 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d107      	bne.n	80048e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048d2:	4b47      	ldr	r3, [pc, #284]	; (80049f0 <HAL_RCC_ClockConfig+0x1bc>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d119      	bne.n	8004912 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e07f      	b.n	80049e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d003      	beq.n	80048f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048ee:	2b03      	cmp	r3, #3
 80048f0:	d107      	bne.n	8004902 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048f2:	4b3f      	ldr	r3, [pc, #252]	; (80049f0 <HAL_RCC_ClockConfig+0x1bc>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d109      	bne.n	8004912 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e06f      	b.n	80049e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004902:	4b3b      	ldr	r3, [pc, #236]	; (80049f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 0302 	and.w	r3, r3, #2
 800490a:	2b00      	cmp	r3, #0
 800490c:	d101      	bne.n	8004912 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e067      	b.n	80049e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004912:	4b37      	ldr	r3, [pc, #220]	; (80049f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f023 0203 	bic.w	r2, r3, #3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	4934      	ldr	r1, [pc, #208]	; (80049f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004920:	4313      	orrs	r3, r2
 8004922:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004924:	f7fe f8de 	bl	8002ae4 <HAL_GetTick>
 8004928:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800492a:	e00a      	b.n	8004942 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800492c:	f7fe f8da 	bl	8002ae4 <HAL_GetTick>
 8004930:	4602      	mov	r2, r0
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	f241 3288 	movw	r2, #5000	; 0x1388
 800493a:	4293      	cmp	r3, r2
 800493c:	d901      	bls.n	8004942 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e04f      	b.n	80049e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004942:	4b2b      	ldr	r3, [pc, #172]	; (80049f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	f003 020c 	and.w	r2, r3, #12
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	429a      	cmp	r2, r3
 8004952:	d1eb      	bne.n	800492c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004954:	4b25      	ldr	r3, [pc, #148]	; (80049ec <HAL_RCC_ClockConfig+0x1b8>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 030f 	and.w	r3, r3, #15
 800495c:	683a      	ldr	r2, [r7, #0]
 800495e:	429a      	cmp	r2, r3
 8004960:	d20c      	bcs.n	800497c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004962:	4b22      	ldr	r3, [pc, #136]	; (80049ec <HAL_RCC_ClockConfig+0x1b8>)
 8004964:	683a      	ldr	r2, [r7, #0]
 8004966:	b2d2      	uxtb	r2, r2
 8004968:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800496a:	4b20      	ldr	r3, [pc, #128]	; (80049ec <HAL_RCC_ClockConfig+0x1b8>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 030f 	and.w	r3, r3, #15
 8004972:	683a      	ldr	r2, [r7, #0]
 8004974:	429a      	cmp	r2, r3
 8004976:	d001      	beq.n	800497c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	e032      	b.n	80049e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 0304 	and.w	r3, r3, #4
 8004984:	2b00      	cmp	r3, #0
 8004986:	d008      	beq.n	800499a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004988:	4b19      	ldr	r3, [pc, #100]	; (80049f0 <HAL_RCC_ClockConfig+0x1bc>)
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	4916      	ldr	r1, [pc, #88]	; (80049f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004996:	4313      	orrs	r3, r2
 8004998:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0308 	and.w	r3, r3, #8
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d009      	beq.n	80049ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049a6:	4b12      	ldr	r3, [pc, #72]	; (80049f0 <HAL_RCC_ClockConfig+0x1bc>)
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	691b      	ldr	r3, [r3, #16]
 80049b2:	00db      	lsls	r3, r3, #3
 80049b4:	490e      	ldr	r1, [pc, #56]	; (80049f0 <HAL_RCC_ClockConfig+0x1bc>)
 80049b6:	4313      	orrs	r3, r2
 80049b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80049ba:	f000 f821 	bl	8004a00 <HAL_RCC_GetSysClockFreq>
 80049be:	4602      	mov	r2, r0
 80049c0:	4b0b      	ldr	r3, [pc, #44]	; (80049f0 <HAL_RCC_ClockConfig+0x1bc>)
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	091b      	lsrs	r3, r3, #4
 80049c6:	f003 030f 	and.w	r3, r3, #15
 80049ca:	490a      	ldr	r1, [pc, #40]	; (80049f4 <HAL_RCC_ClockConfig+0x1c0>)
 80049cc:	5ccb      	ldrb	r3, [r1, r3]
 80049ce:	fa22 f303 	lsr.w	r3, r2, r3
 80049d2:	4a09      	ldr	r2, [pc, #36]	; (80049f8 <HAL_RCC_ClockConfig+0x1c4>)
 80049d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80049d6:	4b09      	ldr	r3, [pc, #36]	; (80049fc <HAL_RCC_ClockConfig+0x1c8>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4618      	mov	r0, r3
 80049dc:	f7fe f83e 	bl	8002a5c <HAL_InitTick>

  return HAL_OK;
 80049e0:	2300      	movs	r3, #0
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3710      	adds	r7, #16
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	40023c00 	.word	0x40023c00
 80049f0:	40023800 	.word	0x40023800
 80049f4:	080074cc 	.word	0x080074cc
 80049f8:	20000004 	.word	0x20000004
 80049fc:	20000008 	.word	0x20000008

08004a00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a04:	b094      	sub	sp, #80	; 0x50
 8004a06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	647b      	str	r3, [r7, #68]	; 0x44
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a10:	2300      	movs	r3, #0
 8004a12:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004a14:	2300      	movs	r3, #0
 8004a16:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a18:	4b79      	ldr	r3, [pc, #484]	; (8004c00 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	f003 030c 	and.w	r3, r3, #12
 8004a20:	2b08      	cmp	r3, #8
 8004a22:	d00d      	beq.n	8004a40 <HAL_RCC_GetSysClockFreq+0x40>
 8004a24:	2b08      	cmp	r3, #8
 8004a26:	f200 80e1 	bhi.w	8004bec <HAL_RCC_GetSysClockFreq+0x1ec>
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d002      	beq.n	8004a34 <HAL_RCC_GetSysClockFreq+0x34>
 8004a2e:	2b04      	cmp	r3, #4
 8004a30:	d003      	beq.n	8004a3a <HAL_RCC_GetSysClockFreq+0x3a>
 8004a32:	e0db      	b.n	8004bec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a34:	4b73      	ldr	r3, [pc, #460]	; (8004c04 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a36:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004a38:	e0db      	b.n	8004bf2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a3a:	4b73      	ldr	r3, [pc, #460]	; (8004c08 <HAL_RCC_GetSysClockFreq+0x208>)
 8004a3c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a3e:	e0d8      	b.n	8004bf2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a40:	4b6f      	ldr	r3, [pc, #444]	; (8004c00 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a48:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a4a:	4b6d      	ldr	r3, [pc, #436]	; (8004c00 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d063      	beq.n	8004b1e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a56:	4b6a      	ldr	r3, [pc, #424]	; (8004c00 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	099b      	lsrs	r3, r3, #6
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a60:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a68:	633b      	str	r3, [r7, #48]	; 0x30
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	637b      	str	r3, [r7, #52]	; 0x34
 8004a6e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004a72:	4622      	mov	r2, r4
 8004a74:	462b      	mov	r3, r5
 8004a76:	f04f 0000 	mov.w	r0, #0
 8004a7a:	f04f 0100 	mov.w	r1, #0
 8004a7e:	0159      	lsls	r1, r3, #5
 8004a80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a84:	0150      	lsls	r0, r2, #5
 8004a86:	4602      	mov	r2, r0
 8004a88:	460b      	mov	r3, r1
 8004a8a:	4621      	mov	r1, r4
 8004a8c:	1a51      	subs	r1, r2, r1
 8004a8e:	6139      	str	r1, [r7, #16]
 8004a90:	4629      	mov	r1, r5
 8004a92:	eb63 0301 	sbc.w	r3, r3, r1
 8004a96:	617b      	str	r3, [r7, #20]
 8004a98:	f04f 0200 	mov.w	r2, #0
 8004a9c:	f04f 0300 	mov.w	r3, #0
 8004aa0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004aa4:	4659      	mov	r1, fp
 8004aa6:	018b      	lsls	r3, r1, #6
 8004aa8:	4651      	mov	r1, sl
 8004aaa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004aae:	4651      	mov	r1, sl
 8004ab0:	018a      	lsls	r2, r1, #6
 8004ab2:	4651      	mov	r1, sl
 8004ab4:	ebb2 0801 	subs.w	r8, r2, r1
 8004ab8:	4659      	mov	r1, fp
 8004aba:	eb63 0901 	sbc.w	r9, r3, r1
 8004abe:	f04f 0200 	mov.w	r2, #0
 8004ac2:	f04f 0300 	mov.w	r3, #0
 8004ac6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004aca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ace:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ad2:	4690      	mov	r8, r2
 8004ad4:	4699      	mov	r9, r3
 8004ad6:	4623      	mov	r3, r4
 8004ad8:	eb18 0303 	adds.w	r3, r8, r3
 8004adc:	60bb      	str	r3, [r7, #8]
 8004ade:	462b      	mov	r3, r5
 8004ae0:	eb49 0303 	adc.w	r3, r9, r3
 8004ae4:	60fb      	str	r3, [r7, #12]
 8004ae6:	f04f 0200 	mov.w	r2, #0
 8004aea:	f04f 0300 	mov.w	r3, #0
 8004aee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004af2:	4629      	mov	r1, r5
 8004af4:	024b      	lsls	r3, r1, #9
 8004af6:	4621      	mov	r1, r4
 8004af8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004afc:	4621      	mov	r1, r4
 8004afe:	024a      	lsls	r2, r1, #9
 8004b00:	4610      	mov	r0, r2
 8004b02:	4619      	mov	r1, r3
 8004b04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b06:	2200      	movs	r2, #0
 8004b08:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b0c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b10:	f7fb fea4 	bl	800085c <__aeabi_uldivmod>
 8004b14:	4602      	mov	r2, r0
 8004b16:	460b      	mov	r3, r1
 8004b18:	4613      	mov	r3, r2
 8004b1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b1c:	e058      	b.n	8004bd0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b1e:	4b38      	ldr	r3, [pc, #224]	; (8004c00 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	099b      	lsrs	r3, r3, #6
 8004b24:	2200      	movs	r2, #0
 8004b26:	4618      	mov	r0, r3
 8004b28:	4611      	mov	r1, r2
 8004b2a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004b2e:	623b      	str	r3, [r7, #32]
 8004b30:	2300      	movs	r3, #0
 8004b32:	627b      	str	r3, [r7, #36]	; 0x24
 8004b34:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004b38:	4642      	mov	r2, r8
 8004b3a:	464b      	mov	r3, r9
 8004b3c:	f04f 0000 	mov.w	r0, #0
 8004b40:	f04f 0100 	mov.w	r1, #0
 8004b44:	0159      	lsls	r1, r3, #5
 8004b46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b4a:	0150      	lsls	r0, r2, #5
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	460b      	mov	r3, r1
 8004b50:	4641      	mov	r1, r8
 8004b52:	ebb2 0a01 	subs.w	sl, r2, r1
 8004b56:	4649      	mov	r1, r9
 8004b58:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b5c:	f04f 0200 	mov.w	r2, #0
 8004b60:	f04f 0300 	mov.w	r3, #0
 8004b64:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004b68:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004b6c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004b70:	ebb2 040a 	subs.w	r4, r2, sl
 8004b74:	eb63 050b 	sbc.w	r5, r3, fp
 8004b78:	f04f 0200 	mov.w	r2, #0
 8004b7c:	f04f 0300 	mov.w	r3, #0
 8004b80:	00eb      	lsls	r3, r5, #3
 8004b82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b86:	00e2      	lsls	r2, r4, #3
 8004b88:	4614      	mov	r4, r2
 8004b8a:	461d      	mov	r5, r3
 8004b8c:	4643      	mov	r3, r8
 8004b8e:	18e3      	adds	r3, r4, r3
 8004b90:	603b      	str	r3, [r7, #0]
 8004b92:	464b      	mov	r3, r9
 8004b94:	eb45 0303 	adc.w	r3, r5, r3
 8004b98:	607b      	str	r3, [r7, #4]
 8004b9a:	f04f 0200 	mov.w	r2, #0
 8004b9e:	f04f 0300 	mov.w	r3, #0
 8004ba2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ba6:	4629      	mov	r1, r5
 8004ba8:	028b      	lsls	r3, r1, #10
 8004baa:	4621      	mov	r1, r4
 8004bac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004bb0:	4621      	mov	r1, r4
 8004bb2:	028a      	lsls	r2, r1, #10
 8004bb4:	4610      	mov	r0, r2
 8004bb6:	4619      	mov	r1, r3
 8004bb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bba:	2200      	movs	r2, #0
 8004bbc:	61bb      	str	r3, [r7, #24]
 8004bbe:	61fa      	str	r2, [r7, #28]
 8004bc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bc4:	f7fb fe4a 	bl	800085c <__aeabi_uldivmod>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	460b      	mov	r3, r1
 8004bcc:	4613      	mov	r3, r2
 8004bce:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004bd0:	4b0b      	ldr	r3, [pc, #44]	; (8004c00 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	0c1b      	lsrs	r3, r3, #16
 8004bd6:	f003 0303 	and.w	r3, r3, #3
 8004bda:	3301      	adds	r3, #1
 8004bdc:	005b      	lsls	r3, r3, #1
 8004bde:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004be0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004be2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004be8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004bea:	e002      	b.n	8004bf2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004bec:	4b05      	ldr	r3, [pc, #20]	; (8004c04 <HAL_RCC_GetSysClockFreq+0x204>)
 8004bee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004bf0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3750      	adds	r7, #80	; 0x50
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bfe:	bf00      	nop
 8004c00:	40023800 	.word	0x40023800
 8004c04:	00f42400 	.word	0x00f42400
 8004c08:	007a1200 	.word	0x007a1200

08004c0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c10:	4b03      	ldr	r3, [pc, #12]	; (8004c20 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c12:	681b      	ldr	r3, [r3, #0]
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr
 8004c1e:	bf00      	nop
 8004c20:	20000004 	.word	0x20000004

08004c24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c28:	f7ff fff0 	bl	8004c0c <HAL_RCC_GetHCLKFreq>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	4b05      	ldr	r3, [pc, #20]	; (8004c44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	0a9b      	lsrs	r3, r3, #10
 8004c34:	f003 0307 	and.w	r3, r3, #7
 8004c38:	4903      	ldr	r1, [pc, #12]	; (8004c48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c3a:	5ccb      	ldrb	r3, [r1, r3]
 8004c3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	40023800 	.word	0x40023800
 8004c48:	080074dc 	.word	0x080074dc

08004c4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004c50:	f7ff ffdc 	bl	8004c0c <HAL_RCC_GetHCLKFreq>
 8004c54:	4602      	mov	r2, r0
 8004c56:	4b05      	ldr	r3, [pc, #20]	; (8004c6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	0b5b      	lsrs	r3, r3, #13
 8004c5c:	f003 0307 	and.w	r3, r3, #7
 8004c60:	4903      	ldr	r1, [pc, #12]	; (8004c70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c62:	5ccb      	ldrb	r3, [r1, r3]
 8004c64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	40023800 	.word	0x40023800
 8004c70:	080074dc 	.word	0x080074dc

08004c74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d101      	bne.n	8004c86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e01d      	b.n	8004cc2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d106      	bne.n	8004ca0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f7fd fcc4 	bl	8002628 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2202      	movs	r2, #2
 8004ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	3304      	adds	r3, #4
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	4610      	mov	r0, r2
 8004cb4:	f000 fcae 	bl	8005614 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cc0:	2300      	movs	r3, #0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3708      	adds	r7, #8
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}

08004cca <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004cca:	b480      	push	{r7}
 8004ccc:	b085      	sub	sp, #20
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2202      	movs	r2, #2
 8004cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	f003 0307 	and.w	r3, r3, #7
 8004ce4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2b06      	cmp	r3, #6
 8004cea:	d007      	beq.n	8004cfc <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f042 0201 	orr.w	r2, r2, #1
 8004cfa:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004d04:	2300      	movs	r3, #0
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3714      	adds	r7, #20
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr

08004d12 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d12:	b480      	push	{r7}
 8004d14:	b085      	sub	sp, #20
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	68da      	ldr	r2, [r3, #12]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f042 0201 	orr.w	r2, r2, #1
 8004d28:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	f003 0307 	and.w	r3, r3, #7
 8004d34:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2b06      	cmp	r3, #6
 8004d3a:	d007      	beq.n	8004d4c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f042 0201 	orr.w	r2, r2, #1
 8004d4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3714      	adds	r7, #20
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr

08004d5a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004d5a:	b580      	push	{r7, lr}
 8004d5c:	b082      	sub	sp, #8
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d101      	bne.n	8004d6c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e01d      	b.n	8004da8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d106      	bne.n	8004d86 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f000 f815 	bl	8004db0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2202      	movs	r2, #2
 8004d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	3304      	adds	r3, #4
 8004d96:	4619      	mov	r1, r3
 8004d98:	4610      	mov	r0, r2
 8004d9a:	f000 fc3b 	bl	8005614 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2201      	movs	r2, #1
 8004da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004da6:	2300      	movs	r3, #0
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3708      	adds	r7, #8
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}

08004db0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b083      	sub	sp, #12
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004db8:	bf00      	nop
 8004dba:	370c      	adds	r7, #12
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr

08004dc4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	6839      	ldr	r1, [r7, #0]
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f001 f830 	bl	8005e3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a15      	ldr	r2, [pc, #84]	; (8004e38 <HAL_TIM_PWM_Start+0x74>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d004      	beq.n	8004df0 <HAL_TIM_PWM_Start+0x2c>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a14      	ldr	r2, [pc, #80]	; (8004e3c <HAL_TIM_PWM_Start+0x78>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d101      	bne.n	8004df4 <HAL_TIM_PWM_Start+0x30>
 8004df0:	2301      	movs	r3, #1
 8004df2:	e000      	b.n	8004df6 <HAL_TIM_PWM_Start+0x32>
 8004df4:	2300      	movs	r3, #0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d007      	beq.n	8004e0a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e08:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	f003 0307 	and.w	r3, r3, #7
 8004e14:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2b06      	cmp	r3, #6
 8004e1a:	d007      	beq.n	8004e2c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f042 0201 	orr.w	r2, r2, #1
 8004e2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e2c:	2300      	movs	r3, #0
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3710      	adds	r7, #16
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop
 8004e38:	40010000 	.word	0x40010000
 8004e3c:	40010400 	.word	0x40010400

08004e40 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b082      	sub	sp, #8
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d101      	bne.n	8004e52 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e01d      	b.n	8004e8e <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d106      	bne.n	8004e6c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f000 f815 	bl	8004e96 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2202      	movs	r2, #2
 8004e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	3304      	adds	r3, #4
 8004e7c:	4619      	mov	r1, r3
 8004e7e:	4610      	mov	r0, r2
 8004e80:	f000 fbc8 	bl	8005614 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e8c:	2300      	movs	r3, #0
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3708      	adds	r7, #8
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}

08004e96 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004e96:	b480      	push	{r7}
 8004e98:	b083      	sub	sp, #12
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004e9e:	bf00      	nop
 8004ea0:	370c      	adds	r7, #12
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr
	...

08004eac <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b084      	sub	sp, #16
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	2b0c      	cmp	r3, #12
 8004eba:	d841      	bhi.n	8004f40 <HAL_TIM_IC_Start_IT+0x94>
 8004ebc:	a201      	add	r2, pc, #4	; (adr r2, 8004ec4 <HAL_TIM_IC_Start_IT+0x18>)
 8004ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ec2:	bf00      	nop
 8004ec4:	08004ef9 	.word	0x08004ef9
 8004ec8:	08004f41 	.word	0x08004f41
 8004ecc:	08004f41 	.word	0x08004f41
 8004ed0:	08004f41 	.word	0x08004f41
 8004ed4:	08004f0b 	.word	0x08004f0b
 8004ed8:	08004f41 	.word	0x08004f41
 8004edc:	08004f41 	.word	0x08004f41
 8004ee0:	08004f41 	.word	0x08004f41
 8004ee4:	08004f1d 	.word	0x08004f1d
 8004ee8:	08004f41 	.word	0x08004f41
 8004eec:	08004f41 	.word	0x08004f41
 8004ef0:	08004f41 	.word	0x08004f41
 8004ef4:	08004f2f 	.word	0x08004f2f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	68da      	ldr	r2, [r3, #12]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f042 0202 	orr.w	r2, r2, #2
 8004f06:	60da      	str	r2, [r3, #12]
      break;
 8004f08:	e01b      	b.n	8004f42 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	68da      	ldr	r2, [r3, #12]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f042 0204 	orr.w	r2, r2, #4
 8004f18:	60da      	str	r2, [r3, #12]
      break;
 8004f1a:	e012      	b.n	8004f42 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	68da      	ldr	r2, [r3, #12]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f042 0208 	orr.w	r2, r2, #8
 8004f2a:	60da      	str	r2, [r3, #12]
      break;
 8004f2c:	e009      	b.n	8004f42 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	68da      	ldr	r2, [r3, #12]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f042 0210 	orr.w	r2, r2, #16
 8004f3c:	60da      	str	r2, [r3, #12]
      break;
 8004f3e:	e000      	b.n	8004f42 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8004f40:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2201      	movs	r2, #1
 8004f48:	6839      	ldr	r1, [r7, #0]
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f000 ff76 	bl	8005e3c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	f003 0307 	and.w	r3, r3, #7
 8004f5a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2b06      	cmp	r3, #6
 8004f60:	d007      	beq.n	8004f72 <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f042 0201 	orr.w	r2, r2, #1
 8004f70:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f72:	2300      	movs	r3, #0
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3710      	adds	r7, #16
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	f003 0302 	and.w	r3, r3, #2
 8004f8e:	2b02      	cmp	r3, #2
 8004f90:	d122      	bne.n	8004fd8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	f003 0302 	and.w	r3, r3, #2
 8004f9c:	2b02      	cmp	r3, #2
 8004f9e:	d11b      	bne.n	8004fd8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f06f 0202 	mvn.w	r2, #2
 8004fa8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2201      	movs	r2, #1
 8004fae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	699b      	ldr	r3, [r3, #24]
 8004fb6:	f003 0303 	and.w	r3, r3, #3
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d003      	beq.n	8004fc6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f7fc f8d8 	bl	8001174 <HAL_TIM_IC_CaptureCallback>
 8004fc4:	e005      	b.n	8004fd2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 fb06 	bl	80055d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f000 fb0d 	bl	80055ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	691b      	ldr	r3, [r3, #16]
 8004fde:	f003 0304 	and.w	r3, r3, #4
 8004fe2:	2b04      	cmp	r3, #4
 8004fe4:	d122      	bne.n	800502c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	f003 0304 	and.w	r3, r3, #4
 8004ff0:	2b04      	cmp	r3, #4
 8004ff2:	d11b      	bne.n	800502c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f06f 0204 	mvn.w	r2, #4
 8004ffc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2202      	movs	r2, #2
 8005002:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	699b      	ldr	r3, [r3, #24]
 800500a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800500e:	2b00      	cmp	r3, #0
 8005010:	d003      	beq.n	800501a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f7fc f8ae 	bl	8001174 <HAL_TIM_IC_CaptureCallback>
 8005018:	e005      	b.n	8005026 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f000 fadc 	bl	80055d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f000 fae3 	bl	80055ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	f003 0308 	and.w	r3, r3, #8
 8005036:	2b08      	cmp	r3, #8
 8005038:	d122      	bne.n	8005080 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	f003 0308 	and.w	r3, r3, #8
 8005044:	2b08      	cmp	r3, #8
 8005046:	d11b      	bne.n	8005080 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f06f 0208 	mvn.w	r2, #8
 8005050:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2204      	movs	r2, #4
 8005056:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	69db      	ldr	r3, [r3, #28]
 800505e:	f003 0303 	and.w	r3, r3, #3
 8005062:	2b00      	cmp	r3, #0
 8005064:	d003      	beq.n	800506e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f7fc f884 	bl	8001174 <HAL_TIM_IC_CaptureCallback>
 800506c:	e005      	b.n	800507a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 fab2 	bl	80055d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f000 fab9 	bl	80055ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	691b      	ldr	r3, [r3, #16]
 8005086:	f003 0310 	and.w	r3, r3, #16
 800508a:	2b10      	cmp	r3, #16
 800508c:	d122      	bne.n	80050d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	f003 0310 	and.w	r3, r3, #16
 8005098:	2b10      	cmp	r3, #16
 800509a:	d11b      	bne.n	80050d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f06f 0210 	mvn.w	r2, #16
 80050a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2208      	movs	r2, #8
 80050aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	69db      	ldr	r3, [r3, #28]
 80050b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d003      	beq.n	80050c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f7fc f85a 	bl	8001174 <HAL_TIM_IC_CaptureCallback>
 80050c0:	e005      	b.n	80050ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f000 fa88 	bl	80055d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f000 fa8f 	bl	80055ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	691b      	ldr	r3, [r3, #16]
 80050da:	f003 0301 	and.w	r3, r3, #1
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d10e      	bne.n	8005100 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	f003 0301 	and.w	r3, r3, #1
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d107      	bne.n	8005100 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f06f 0201 	mvn.w	r2, #1
 80050f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f7fc f820 	bl	8001140 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800510a:	2b80      	cmp	r3, #128	; 0x80
 800510c:	d10e      	bne.n	800512c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005118:	2b80      	cmp	r3, #128	; 0x80
 800511a:	d107      	bne.n	800512c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f000 ff34 	bl	8005f94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	691b      	ldr	r3, [r3, #16]
 8005132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005136:	2b40      	cmp	r3, #64	; 0x40
 8005138:	d10e      	bne.n	8005158 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005144:	2b40      	cmp	r3, #64	; 0x40
 8005146:	d107      	bne.n	8005158 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 fa54 	bl	8005600 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	f003 0320 	and.w	r3, r3, #32
 8005162:	2b20      	cmp	r3, #32
 8005164:	d10e      	bne.n	8005184 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	f003 0320 	and.w	r3, r3, #32
 8005170:	2b20      	cmp	r3, #32
 8005172:	d107      	bne.n	8005184 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f06f 0220 	mvn.w	r2, #32
 800517c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 fefe 	bl	8005f80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005184:	bf00      	nop
 8005186:	3708      	adds	r7, #8
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}

0800518c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b084      	sub	sp, #16
 8005190:	af00      	add	r7, sp, #0
 8005192:	60f8      	str	r0, [r7, #12]
 8005194:	60b9      	str	r1, [r7, #8]
 8005196:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d101      	bne.n	80051a6 <HAL_TIM_IC_ConfigChannel+0x1a>
 80051a2:	2302      	movs	r3, #2
 80051a4:	e08a      	b.n	80052bc <HAL_TIM_IC_ConfigChannel+0x130>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2201      	movs	r2, #1
 80051aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2202      	movs	r2, #2
 80051b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d11b      	bne.n	80051f4 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6818      	ldr	r0, [r3, #0]
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	6819      	ldr	r1, [r3, #0]
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	685a      	ldr	r2, [r3, #4]
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	f000 fc72 	bl	8005ab4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	699a      	ldr	r2, [r3, #24]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f022 020c 	bic.w	r2, r2, #12
 80051de:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	6999      	ldr	r1, [r3, #24]
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	689a      	ldr	r2, [r3, #8]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	430a      	orrs	r2, r1
 80051f0:	619a      	str	r2, [r3, #24]
 80051f2:	e05a      	b.n	80052aa <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2b04      	cmp	r3, #4
 80051f8:	d11c      	bne.n	8005234 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6818      	ldr	r0, [r3, #0]
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	6819      	ldr	r1, [r3, #0]
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	685a      	ldr	r2, [r3, #4]
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	f000 fcf6 	bl	8005bfa <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	699a      	ldr	r2, [r3, #24]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800521c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	6999      	ldr	r1, [r3, #24]
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	021a      	lsls	r2, r3, #8
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	430a      	orrs	r2, r1
 8005230:	619a      	str	r2, [r3, #24]
 8005232:	e03a      	b.n	80052aa <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2b08      	cmp	r3, #8
 8005238:	d11b      	bne.n	8005272 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	6818      	ldr	r0, [r3, #0]
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	6819      	ldr	r1, [r3, #0]
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	685a      	ldr	r2, [r3, #4]
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	f000 fd43 	bl	8005cd4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	69da      	ldr	r2, [r3, #28]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f022 020c 	bic.w	r2, r2, #12
 800525c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	69d9      	ldr	r1, [r3, #28]
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	689a      	ldr	r2, [r3, #8]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	430a      	orrs	r2, r1
 800526e:	61da      	str	r2, [r3, #28]
 8005270:	e01b      	b.n	80052aa <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	6818      	ldr	r0, [r3, #0]
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	6819      	ldr	r1, [r3, #0]
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	685a      	ldr	r2, [r3, #4]
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	f000 fd63 	bl	8005d4c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	69da      	ldr	r2, [r3, #28]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005294:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	69d9      	ldr	r1, [r3, #28]
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	021a      	lsls	r2, r3, #8
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	430a      	orrs	r2, r1
 80052a8:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2201      	movs	r2, #1
 80052ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052ba:	2300      	movs	r3, #0
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3710      	adds	r7, #16
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	60b9      	str	r1, [r7, #8]
 80052ce:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d101      	bne.n	80052de <HAL_TIM_PWM_ConfigChannel+0x1a>
 80052da:	2302      	movs	r3, #2
 80052dc:	e0b4      	b.n	8005448 <HAL_TIM_PWM_ConfigChannel+0x184>
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2201      	movs	r2, #1
 80052e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2202      	movs	r2, #2
 80052ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2b0c      	cmp	r3, #12
 80052f2:	f200 809f 	bhi.w	8005434 <HAL_TIM_PWM_ConfigChannel+0x170>
 80052f6:	a201      	add	r2, pc, #4	; (adr r2, 80052fc <HAL_TIM_PWM_ConfigChannel+0x38>)
 80052f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052fc:	08005331 	.word	0x08005331
 8005300:	08005435 	.word	0x08005435
 8005304:	08005435 	.word	0x08005435
 8005308:	08005435 	.word	0x08005435
 800530c:	08005371 	.word	0x08005371
 8005310:	08005435 	.word	0x08005435
 8005314:	08005435 	.word	0x08005435
 8005318:	08005435 	.word	0x08005435
 800531c:	080053b3 	.word	0x080053b3
 8005320:	08005435 	.word	0x08005435
 8005324:	08005435 	.word	0x08005435
 8005328:	08005435 	.word	0x08005435
 800532c:	080053f3 	.word	0x080053f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	68b9      	ldr	r1, [r7, #8]
 8005336:	4618      	mov	r0, r3
 8005338:	f000 fa0c 	bl	8005754 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	699a      	ldr	r2, [r3, #24]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f042 0208 	orr.w	r2, r2, #8
 800534a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	699a      	ldr	r2, [r3, #24]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f022 0204 	bic.w	r2, r2, #4
 800535a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	6999      	ldr	r1, [r3, #24]
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	691a      	ldr	r2, [r3, #16]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	430a      	orrs	r2, r1
 800536c:	619a      	str	r2, [r3, #24]
      break;
 800536e:	e062      	b.n	8005436 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	68b9      	ldr	r1, [r7, #8]
 8005376:	4618      	mov	r0, r3
 8005378:	f000 fa5c 	bl	8005834 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	699a      	ldr	r2, [r3, #24]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800538a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	699a      	ldr	r2, [r3, #24]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800539a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	6999      	ldr	r1, [r3, #24]
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	691b      	ldr	r3, [r3, #16]
 80053a6:	021a      	lsls	r2, r3, #8
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	430a      	orrs	r2, r1
 80053ae:	619a      	str	r2, [r3, #24]
      break;
 80053b0:	e041      	b.n	8005436 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	68b9      	ldr	r1, [r7, #8]
 80053b8:	4618      	mov	r0, r3
 80053ba:	f000 fab1 	bl	8005920 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	69da      	ldr	r2, [r3, #28]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f042 0208 	orr.w	r2, r2, #8
 80053cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	69da      	ldr	r2, [r3, #28]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f022 0204 	bic.w	r2, r2, #4
 80053dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	69d9      	ldr	r1, [r3, #28]
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	691a      	ldr	r2, [r3, #16]
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	430a      	orrs	r2, r1
 80053ee:	61da      	str	r2, [r3, #28]
      break;
 80053f0:	e021      	b.n	8005436 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	68b9      	ldr	r1, [r7, #8]
 80053f8:	4618      	mov	r0, r3
 80053fa:	f000 fb05 	bl	8005a08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	69da      	ldr	r2, [r3, #28]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800540c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	69da      	ldr	r2, [r3, #28]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800541c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	69d9      	ldr	r1, [r3, #28]
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	691b      	ldr	r3, [r3, #16]
 8005428:	021a      	lsls	r2, r3, #8
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	430a      	orrs	r2, r1
 8005430:	61da      	str	r2, [r3, #28]
      break;
 8005432:	e000      	b.n	8005436 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005434:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2201      	movs	r2, #1
 800543a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2200      	movs	r2, #0
 8005442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005446:	2300      	movs	r3, #0
}
 8005448:	4618      	mov	r0, r3
 800544a:	3710      	adds	r7, #16
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b084      	sub	sp, #16
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005460:	2b01      	cmp	r3, #1
 8005462:	d101      	bne.n	8005468 <HAL_TIM_ConfigClockSource+0x18>
 8005464:	2302      	movs	r3, #2
 8005466:	e0b3      	b.n	80055d0 <HAL_TIM_ConfigClockSource+0x180>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2202      	movs	r2, #2
 8005474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005486:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800548e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	68fa      	ldr	r2, [r7, #12]
 8005496:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054a0:	d03e      	beq.n	8005520 <HAL_TIM_ConfigClockSource+0xd0>
 80054a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054a6:	f200 8087 	bhi.w	80055b8 <HAL_TIM_ConfigClockSource+0x168>
 80054aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054ae:	f000 8085 	beq.w	80055bc <HAL_TIM_ConfigClockSource+0x16c>
 80054b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054b6:	d87f      	bhi.n	80055b8 <HAL_TIM_ConfigClockSource+0x168>
 80054b8:	2b70      	cmp	r3, #112	; 0x70
 80054ba:	d01a      	beq.n	80054f2 <HAL_TIM_ConfigClockSource+0xa2>
 80054bc:	2b70      	cmp	r3, #112	; 0x70
 80054be:	d87b      	bhi.n	80055b8 <HAL_TIM_ConfigClockSource+0x168>
 80054c0:	2b60      	cmp	r3, #96	; 0x60
 80054c2:	d050      	beq.n	8005566 <HAL_TIM_ConfigClockSource+0x116>
 80054c4:	2b60      	cmp	r3, #96	; 0x60
 80054c6:	d877      	bhi.n	80055b8 <HAL_TIM_ConfigClockSource+0x168>
 80054c8:	2b50      	cmp	r3, #80	; 0x50
 80054ca:	d03c      	beq.n	8005546 <HAL_TIM_ConfigClockSource+0xf6>
 80054cc:	2b50      	cmp	r3, #80	; 0x50
 80054ce:	d873      	bhi.n	80055b8 <HAL_TIM_ConfigClockSource+0x168>
 80054d0:	2b40      	cmp	r3, #64	; 0x40
 80054d2:	d058      	beq.n	8005586 <HAL_TIM_ConfigClockSource+0x136>
 80054d4:	2b40      	cmp	r3, #64	; 0x40
 80054d6:	d86f      	bhi.n	80055b8 <HAL_TIM_ConfigClockSource+0x168>
 80054d8:	2b30      	cmp	r3, #48	; 0x30
 80054da:	d064      	beq.n	80055a6 <HAL_TIM_ConfigClockSource+0x156>
 80054dc:	2b30      	cmp	r3, #48	; 0x30
 80054de:	d86b      	bhi.n	80055b8 <HAL_TIM_ConfigClockSource+0x168>
 80054e0:	2b20      	cmp	r3, #32
 80054e2:	d060      	beq.n	80055a6 <HAL_TIM_ConfigClockSource+0x156>
 80054e4:	2b20      	cmp	r3, #32
 80054e6:	d867      	bhi.n	80055b8 <HAL_TIM_ConfigClockSource+0x168>
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d05c      	beq.n	80055a6 <HAL_TIM_ConfigClockSource+0x156>
 80054ec:	2b10      	cmp	r3, #16
 80054ee:	d05a      	beq.n	80055a6 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80054f0:	e062      	b.n	80055b8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6818      	ldr	r0, [r3, #0]
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	6899      	ldr	r1, [r3, #8]
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	685a      	ldr	r2, [r3, #4]
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	f000 fc7b 	bl	8005dfc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005514:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	68fa      	ldr	r2, [r7, #12]
 800551c:	609a      	str	r2, [r3, #8]
      break;
 800551e:	e04e      	b.n	80055be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6818      	ldr	r0, [r3, #0]
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	6899      	ldr	r1, [r3, #8]
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	685a      	ldr	r2, [r3, #4]
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	f000 fc64 	bl	8005dfc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	689a      	ldr	r2, [r3, #8]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005542:	609a      	str	r2, [r3, #8]
      break;
 8005544:	e03b      	b.n	80055be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6818      	ldr	r0, [r3, #0]
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	6859      	ldr	r1, [r3, #4]
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	461a      	mov	r2, r3
 8005554:	f000 fb22 	bl	8005b9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	2150      	movs	r1, #80	; 0x50
 800555e:	4618      	mov	r0, r3
 8005560:	f000 fc31 	bl	8005dc6 <TIM_ITRx_SetConfig>
      break;
 8005564:	e02b      	b.n	80055be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6818      	ldr	r0, [r3, #0]
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	6859      	ldr	r1, [r3, #4]
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	68db      	ldr	r3, [r3, #12]
 8005572:	461a      	mov	r2, r3
 8005574:	f000 fb7e 	bl	8005c74 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2160      	movs	r1, #96	; 0x60
 800557e:	4618      	mov	r0, r3
 8005580:	f000 fc21 	bl	8005dc6 <TIM_ITRx_SetConfig>
      break;
 8005584:	e01b      	b.n	80055be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6818      	ldr	r0, [r3, #0]
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	6859      	ldr	r1, [r3, #4]
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	461a      	mov	r2, r3
 8005594:	f000 fb02 	bl	8005b9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	2140      	movs	r1, #64	; 0x40
 800559e:	4618      	mov	r0, r3
 80055a0:	f000 fc11 	bl	8005dc6 <TIM_ITRx_SetConfig>
      break;
 80055a4:	e00b      	b.n	80055be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4619      	mov	r1, r3
 80055b0:	4610      	mov	r0, r2
 80055b2:	f000 fc08 	bl	8005dc6 <TIM_ITRx_SetConfig>
      break;
 80055b6:	e002      	b.n	80055be <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80055b8:	bf00      	nop
 80055ba:	e000      	b.n	80055be <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80055bc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2201      	movs	r2, #1
 80055c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055ce:	2300      	movs	r3, #0
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3710      	adds	r7, #16
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80055e0:	bf00      	nop
 80055e2:	370c      	adds	r7, #12
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr

080055ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b083      	sub	sp, #12
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80055f4:	bf00      	nop
 80055f6:	370c      	adds	r7, #12
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr

08005600 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005600:	b480      	push	{r7}
 8005602:	b083      	sub	sp, #12
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005608:	bf00      	nop
 800560a:	370c      	adds	r7, #12
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005614:	b480      	push	{r7}
 8005616:	b085      	sub	sp, #20
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4a40      	ldr	r2, [pc, #256]	; (8005728 <TIM_Base_SetConfig+0x114>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d013      	beq.n	8005654 <TIM_Base_SetConfig+0x40>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005632:	d00f      	beq.n	8005654 <TIM_Base_SetConfig+0x40>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	4a3d      	ldr	r2, [pc, #244]	; (800572c <TIM_Base_SetConfig+0x118>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d00b      	beq.n	8005654 <TIM_Base_SetConfig+0x40>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	4a3c      	ldr	r2, [pc, #240]	; (8005730 <TIM_Base_SetConfig+0x11c>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d007      	beq.n	8005654 <TIM_Base_SetConfig+0x40>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	4a3b      	ldr	r2, [pc, #236]	; (8005734 <TIM_Base_SetConfig+0x120>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d003      	beq.n	8005654 <TIM_Base_SetConfig+0x40>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	4a3a      	ldr	r2, [pc, #232]	; (8005738 <TIM_Base_SetConfig+0x124>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d108      	bne.n	8005666 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800565a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	68fa      	ldr	r2, [r7, #12]
 8005662:	4313      	orrs	r3, r2
 8005664:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4a2f      	ldr	r2, [pc, #188]	; (8005728 <TIM_Base_SetConfig+0x114>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d02b      	beq.n	80056c6 <TIM_Base_SetConfig+0xb2>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005674:	d027      	beq.n	80056c6 <TIM_Base_SetConfig+0xb2>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	4a2c      	ldr	r2, [pc, #176]	; (800572c <TIM_Base_SetConfig+0x118>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d023      	beq.n	80056c6 <TIM_Base_SetConfig+0xb2>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4a2b      	ldr	r2, [pc, #172]	; (8005730 <TIM_Base_SetConfig+0x11c>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d01f      	beq.n	80056c6 <TIM_Base_SetConfig+0xb2>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4a2a      	ldr	r2, [pc, #168]	; (8005734 <TIM_Base_SetConfig+0x120>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d01b      	beq.n	80056c6 <TIM_Base_SetConfig+0xb2>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4a29      	ldr	r2, [pc, #164]	; (8005738 <TIM_Base_SetConfig+0x124>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d017      	beq.n	80056c6 <TIM_Base_SetConfig+0xb2>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4a28      	ldr	r2, [pc, #160]	; (800573c <TIM_Base_SetConfig+0x128>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d013      	beq.n	80056c6 <TIM_Base_SetConfig+0xb2>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4a27      	ldr	r2, [pc, #156]	; (8005740 <TIM_Base_SetConfig+0x12c>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d00f      	beq.n	80056c6 <TIM_Base_SetConfig+0xb2>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4a26      	ldr	r2, [pc, #152]	; (8005744 <TIM_Base_SetConfig+0x130>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d00b      	beq.n	80056c6 <TIM_Base_SetConfig+0xb2>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4a25      	ldr	r2, [pc, #148]	; (8005748 <TIM_Base_SetConfig+0x134>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d007      	beq.n	80056c6 <TIM_Base_SetConfig+0xb2>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4a24      	ldr	r2, [pc, #144]	; (800574c <TIM_Base_SetConfig+0x138>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d003      	beq.n	80056c6 <TIM_Base_SetConfig+0xb2>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4a23      	ldr	r2, [pc, #140]	; (8005750 <TIM_Base_SetConfig+0x13c>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d108      	bne.n	80056d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	68db      	ldr	r3, [r3, #12]
 80056d2:	68fa      	ldr	r2, [r7, #12]
 80056d4:	4313      	orrs	r3, r2
 80056d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	695b      	ldr	r3, [r3, #20]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	689a      	ldr	r2, [r3, #8]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4a0a      	ldr	r2, [pc, #40]	; (8005728 <TIM_Base_SetConfig+0x114>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d003      	beq.n	800570c <TIM_Base_SetConfig+0xf8>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a0c      	ldr	r2, [pc, #48]	; (8005738 <TIM_Base_SetConfig+0x124>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d103      	bne.n	8005714 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	691a      	ldr	r2, [r3, #16]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	615a      	str	r2, [r3, #20]
}
 800571a:	bf00      	nop
 800571c:	3714      	adds	r7, #20
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr
 8005726:	bf00      	nop
 8005728:	40010000 	.word	0x40010000
 800572c:	40000400 	.word	0x40000400
 8005730:	40000800 	.word	0x40000800
 8005734:	40000c00 	.word	0x40000c00
 8005738:	40010400 	.word	0x40010400
 800573c:	40014000 	.word	0x40014000
 8005740:	40014400 	.word	0x40014400
 8005744:	40014800 	.word	0x40014800
 8005748:	40001800 	.word	0x40001800
 800574c:	40001c00 	.word	0x40001c00
 8005750:	40002000 	.word	0x40002000

08005754 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005754:	b480      	push	{r7}
 8005756:	b087      	sub	sp, #28
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a1b      	ldr	r3, [r3, #32]
 8005762:	f023 0201 	bic.w	r2, r3, #1
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6a1b      	ldr	r3, [r3, #32]
 800576e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	699b      	ldr	r3, [r3, #24]
 800577a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005782:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f023 0303 	bic.w	r3, r3, #3
 800578a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	68fa      	ldr	r2, [r7, #12]
 8005792:	4313      	orrs	r3, r2
 8005794:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	f023 0302 	bic.w	r3, r3, #2
 800579c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	697a      	ldr	r2, [r7, #20]
 80057a4:	4313      	orrs	r3, r2
 80057a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4a20      	ldr	r2, [pc, #128]	; (800582c <TIM_OC1_SetConfig+0xd8>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d003      	beq.n	80057b8 <TIM_OC1_SetConfig+0x64>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4a1f      	ldr	r2, [pc, #124]	; (8005830 <TIM_OC1_SetConfig+0xdc>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d10c      	bne.n	80057d2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	f023 0308 	bic.w	r3, r3, #8
 80057be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	697a      	ldr	r2, [r7, #20]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	f023 0304 	bic.w	r3, r3, #4
 80057d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	4a15      	ldr	r2, [pc, #84]	; (800582c <TIM_OC1_SetConfig+0xd8>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d003      	beq.n	80057e2 <TIM_OC1_SetConfig+0x8e>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4a14      	ldr	r2, [pc, #80]	; (8005830 <TIM_OC1_SetConfig+0xdc>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d111      	bne.n	8005806 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80057f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	695b      	ldr	r3, [r3, #20]
 80057f6:	693a      	ldr	r2, [r7, #16]
 80057f8:	4313      	orrs	r3, r2
 80057fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	699b      	ldr	r3, [r3, #24]
 8005800:	693a      	ldr	r2, [r7, #16]
 8005802:	4313      	orrs	r3, r2
 8005804:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	693a      	ldr	r2, [r7, #16]
 800580a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	68fa      	ldr	r2, [r7, #12]
 8005810:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	685a      	ldr	r2, [r3, #4]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	697a      	ldr	r2, [r7, #20]
 800581e:	621a      	str	r2, [r3, #32]
}
 8005820:	bf00      	nop
 8005822:	371c      	adds	r7, #28
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr
 800582c:	40010000 	.word	0x40010000
 8005830:	40010400 	.word	0x40010400

08005834 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005834:	b480      	push	{r7}
 8005836:	b087      	sub	sp, #28
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a1b      	ldr	r3, [r3, #32]
 8005842:	f023 0210 	bic.w	r2, r3, #16
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6a1b      	ldr	r3, [r3, #32]
 800584e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	699b      	ldr	r3, [r3, #24]
 800585a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005862:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800586a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	021b      	lsls	r3, r3, #8
 8005872:	68fa      	ldr	r2, [r7, #12]
 8005874:	4313      	orrs	r3, r2
 8005876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	f023 0320 	bic.w	r3, r3, #32
 800587e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	011b      	lsls	r3, r3, #4
 8005886:	697a      	ldr	r2, [r7, #20]
 8005888:	4313      	orrs	r3, r2
 800588a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	4a22      	ldr	r2, [pc, #136]	; (8005918 <TIM_OC2_SetConfig+0xe4>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d003      	beq.n	800589c <TIM_OC2_SetConfig+0x68>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	4a21      	ldr	r2, [pc, #132]	; (800591c <TIM_OC2_SetConfig+0xe8>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d10d      	bne.n	80058b8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	011b      	lsls	r3, r3, #4
 80058aa:	697a      	ldr	r2, [r7, #20]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058b6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	4a17      	ldr	r2, [pc, #92]	; (8005918 <TIM_OC2_SetConfig+0xe4>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d003      	beq.n	80058c8 <TIM_OC2_SetConfig+0x94>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4a16      	ldr	r2, [pc, #88]	; (800591c <TIM_OC2_SetConfig+0xe8>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d113      	bne.n	80058f0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80058ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80058d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	695b      	ldr	r3, [r3, #20]
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	693a      	ldr	r2, [r7, #16]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	699b      	ldr	r3, [r3, #24]
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	693a      	ldr	r2, [r7, #16]
 80058ec:	4313      	orrs	r3, r2
 80058ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	693a      	ldr	r2, [r7, #16]
 80058f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	68fa      	ldr	r2, [r7, #12]
 80058fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	685a      	ldr	r2, [r3, #4]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	697a      	ldr	r2, [r7, #20]
 8005908:	621a      	str	r2, [r3, #32]
}
 800590a:	bf00      	nop
 800590c:	371c      	adds	r7, #28
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr
 8005916:	bf00      	nop
 8005918:	40010000 	.word	0x40010000
 800591c:	40010400 	.word	0x40010400

08005920 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005920:	b480      	push	{r7}
 8005922:	b087      	sub	sp, #28
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a1b      	ldr	r3, [r3, #32]
 800592e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6a1b      	ldr	r3, [r3, #32]
 800593a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	69db      	ldr	r3, [r3, #28]
 8005946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800594e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f023 0303 	bic.w	r3, r3, #3
 8005956:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	68fa      	ldr	r2, [r7, #12]
 800595e:	4313      	orrs	r3, r2
 8005960:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005968:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	021b      	lsls	r3, r3, #8
 8005970:	697a      	ldr	r2, [r7, #20]
 8005972:	4313      	orrs	r3, r2
 8005974:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4a21      	ldr	r2, [pc, #132]	; (8005a00 <TIM_OC3_SetConfig+0xe0>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d003      	beq.n	8005986 <TIM_OC3_SetConfig+0x66>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4a20      	ldr	r2, [pc, #128]	; (8005a04 <TIM_OC3_SetConfig+0xe4>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d10d      	bne.n	80059a2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800598c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	68db      	ldr	r3, [r3, #12]
 8005992:	021b      	lsls	r3, r3, #8
 8005994:	697a      	ldr	r2, [r7, #20]
 8005996:	4313      	orrs	r3, r2
 8005998:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a16      	ldr	r2, [pc, #88]	; (8005a00 <TIM_OC3_SetConfig+0xe0>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d003      	beq.n	80059b2 <TIM_OC3_SetConfig+0x92>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a15      	ldr	r2, [pc, #84]	; (8005a04 <TIM_OC3_SetConfig+0xe4>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d113      	bne.n	80059da <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80059b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	695b      	ldr	r3, [r3, #20]
 80059c6:	011b      	lsls	r3, r3, #4
 80059c8:	693a      	ldr	r2, [r7, #16]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	699b      	ldr	r3, [r3, #24]
 80059d2:	011b      	lsls	r3, r3, #4
 80059d4:	693a      	ldr	r2, [r7, #16]
 80059d6:	4313      	orrs	r3, r2
 80059d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	693a      	ldr	r2, [r7, #16]
 80059de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	68fa      	ldr	r2, [r7, #12]
 80059e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	685a      	ldr	r2, [r3, #4]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	697a      	ldr	r2, [r7, #20]
 80059f2:	621a      	str	r2, [r3, #32]
}
 80059f4:	bf00      	nop
 80059f6:	371c      	adds	r7, #28
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr
 8005a00:	40010000 	.word	0x40010000
 8005a04:	40010400 	.word	0x40010400

08005a08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b087      	sub	sp, #28
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6a1b      	ldr	r3, [r3, #32]
 8005a16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6a1b      	ldr	r3, [r3, #32]
 8005a22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	69db      	ldr	r3, [r3, #28]
 8005a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	021b      	lsls	r3, r3, #8
 8005a46:	68fa      	ldr	r2, [r7, #12]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	031b      	lsls	r3, r3, #12
 8005a5a:	693a      	ldr	r2, [r7, #16]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	4a12      	ldr	r2, [pc, #72]	; (8005aac <TIM_OC4_SetConfig+0xa4>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d003      	beq.n	8005a70 <TIM_OC4_SetConfig+0x68>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	4a11      	ldr	r2, [pc, #68]	; (8005ab0 <TIM_OC4_SetConfig+0xa8>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d109      	bne.n	8005a84 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	695b      	ldr	r3, [r3, #20]
 8005a7c:	019b      	lsls	r3, r3, #6
 8005a7e:	697a      	ldr	r2, [r7, #20]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	697a      	ldr	r2, [r7, #20]
 8005a88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	68fa      	ldr	r2, [r7, #12]
 8005a8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	685a      	ldr	r2, [r3, #4]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	693a      	ldr	r2, [r7, #16]
 8005a9c:	621a      	str	r2, [r3, #32]
}
 8005a9e:	bf00      	nop
 8005aa0:	371c      	adds	r7, #28
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr
 8005aaa:	bf00      	nop
 8005aac:	40010000 	.word	0x40010000
 8005ab0:	40010400 	.word	0x40010400

08005ab4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b087      	sub	sp, #28
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	60f8      	str	r0, [r7, #12]
 8005abc:	60b9      	str	r1, [r7, #8]
 8005abe:	607a      	str	r2, [r7, #4]
 8005ac0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	6a1b      	ldr	r3, [r3, #32]
 8005ac6:	f023 0201 	bic.w	r2, r3, #1
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	699b      	ldr	r3, [r3, #24]
 8005ad2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	6a1b      	ldr	r3, [r3, #32]
 8005ad8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	4a28      	ldr	r2, [pc, #160]	; (8005b80 <TIM_TI1_SetConfig+0xcc>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d01b      	beq.n	8005b1a <TIM_TI1_SetConfig+0x66>
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ae8:	d017      	beq.n	8005b1a <TIM_TI1_SetConfig+0x66>
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	4a25      	ldr	r2, [pc, #148]	; (8005b84 <TIM_TI1_SetConfig+0xd0>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d013      	beq.n	8005b1a <TIM_TI1_SetConfig+0x66>
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	4a24      	ldr	r2, [pc, #144]	; (8005b88 <TIM_TI1_SetConfig+0xd4>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d00f      	beq.n	8005b1a <TIM_TI1_SetConfig+0x66>
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	4a23      	ldr	r2, [pc, #140]	; (8005b8c <TIM_TI1_SetConfig+0xd8>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d00b      	beq.n	8005b1a <TIM_TI1_SetConfig+0x66>
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	4a22      	ldr	r2, [pc, #136]	; (8005b90 <TIM_TI1_SetConfig+0xdc>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d007      	beq.n	8005b1a <TIM_TI1_SetConfig+0x66>
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	4a21      	ldr	r2, [pc, #132]	; (8005b94 <TIM_TI1_SetConfig+0xe0>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d003      	beq.n	8005b1a <TIM_TI1_SetConfig+0x66>
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	4a20      	ldr	r2, [pc, #128]	; (8005b98 <TIM_TI1_SetConfig+0xe4>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d101      	bne.n	8005b1e <TIM_TI1_SetConfig+0x6a>
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e000      	b.n	8005b20 <TIM_TI1_SetConfig+0x6c>
 8005b1e:	2300      	movs	r3, #0
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d008      	beq.n	8005b36 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	f023 0303 	bic.w	r3, r3, #3
 8005b2a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005b2c:	697a      	ldr	r2, [r7, #20]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	617b      	str	r3, [r7, #20]
 8005b34:	e003      	b.n	8005b3e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	f043 0301 	orr.w	r3, r3, #1
 8005b3c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b44:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	011b      	lsls	r3, r3, #4
 8005b4a:	b2db      	uxtb	r3, r3
 8005b4c:	697a      	ldr	r2, [r7, #20]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	f023 030a 	bic.w	r3, r3, #10
 8005b58:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	f003 030a 	and.w	r3, r3, #10
 8005b60:	693a      	ldr	r2, [r7, #16]
 8005b62:	4313      	orrs	r3, r2
 8005b64:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	697a      	ldr	r2, [r7, #20]
 8005b6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	693a      	ldr	r2, [r7, #16]
 8005b70:	621a      	str	r2, [r3, #32]
}
 8005b72:	bf00      	nop
 8005b74:	371c      	adds	r7, #28
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr
 8005b7e:	bf00      	nop
 8005b80:	40010000 	.word	0x40010000
 8005b84:	40000400 	.word	0x40000400
 8005b88:	40000800 	.word	0x40000800
 8005b8c:	40000c00 	.word	0x40000c00
 8005b90:	40010400 	.word	0x40010400
 8005b94:	40014000 	.word	0x40014000
 8005b98:	40001800 	.word	0x40001800

08005b9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b087      	sub	sp, #28
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	60b9      	str	r1, [r7, #8]
 8005ba6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	6a1b      	ldr	r3, [r3, #32]
 8005bac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	6a1b      	ldr	r3, [r3, #32]
 8005bb2:	f023 0201 	bic.w	r2, r3, #1
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	699b      	ldr	r3, [r3, #24]
 8005bbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005bc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	011b      	lsls	r3, r3, #4
 8005bcc:	693a      	ldr	r2, [r7, #16]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	f023 030a 	bic.w	r3, r3, #10
 8005bd8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005bda:	697a      	ldr	r2, [r7, #20]
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	693a      	ldr	r2, [r7, #16]
 8005be6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	697a      	ldr	r2, [r7, #20]
 8005bec:	621a      	str	r2, [r3, #32]
}
 8005bee:	bf00      	nop
 8005bf0:	371c      	adds	r7, #28
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr

08005bfa <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005bfa:	b480      	push	{r7}
 8005bfc:	b087      	sub	sp, #28
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	60f8      	str	r0, [r7, #12]
 8005c02:	60b9      	str	r1, [r7, #8]
 8005c04:	607a      	str	r2, [r7, #4]
 8005c06:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6a1b      	ldr	r3, [r3, #32]
 8005c0c:	f023 0210 	bic.w	r2, r3, #16
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	699b      	ldr	r3, [r3, #24]
 8005c18:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	6a1b      	ldr	r3, [r3, #32]
 8005c1e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c26:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	021b      	lsls	r3, r3, #8
 8005c2c:	697a      	ldr	r2, [r7, #20]
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	031b      	lsls	r3, r3, #12
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	697a      	ldr	r2, [r7, #20]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005c4c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	011b      	lsls	r3, r3, #4
 8005c52:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005c56:	693a      	ldr	r2, [r7, #16]
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	697a      	ldr	r2, [r7, #20]
 8005c60:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	693a      	ldr	r2, [r7, #16]
 8005c66:	621a      	str	r2, [r3, #32]
}
 8005c68:	bf00      	nop
 8005c6a:	371c      	adds	r7, #28
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr

08005c74 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b087      	sub	sp, #28
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	60b9      	str	r1, [r7, #8]
 8005c7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6a1b      	ldr	r3, [r3, #32]
 8005c84:	f023 0210 	bic.w	r2, r3, #16
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	699b      	ldr	r3, [r3, #24]
 8005c90:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	6a1b      	ldr	r3, [r3, #32]
 8005c96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c9e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	031b      	lsls	r3, r3, #12
 8005ca4:	697a      	ldr	r2, [r7, #20]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005cb0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	011b      	lsls	r3, r3, #4
 8005cb6:	693a      	ldr	r2, [r7, #16]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	697a      	ldr	r2, [r7, #20]
 8005cc0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	693a      	ldr	r2, [r7, #16]
 8005cc6:	621a      	str	r2, [r3, #32]
}
 8005cc8:	bf00      	nop
 8005cca:	371c      	adds	r7, #28
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr

08005cd4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b087      	sub	sp, #28
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	60f8      	str	r0, [r7, #12]
 8005cdc:	60b9      	str	r1, [r7, #8]
 8005cde:	607a      	str	r2, [r7, #4]
 8005ce0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	6a1b      	ldr	r3, [r3, #32]
 8005ce6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	69db      	ldr	r3, [r3, #28]
 8005cf2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6a1b      	ldr	r3, [r3, #32]
 8005cf8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	f023 0303 	bic.w	r3, r3, #3
 8005d00:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005d02:	697a      	ldr	r2, [r7, #20]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4313      	orrs	r3, r2
 8005d08:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d10:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	011b      	lsls	r3, r3, #4
 8005d16:	b2db      	uxtb	r3, r3
 8005d18:	697a      	ldr	r2, [r7, #20]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005d24:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	021b      	lsls	r3, r3, #8
 8005d2a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005d2e:	693a      	ldr	r2, [r7, #16]
 8005d30:	4313      	orrs	r3, r2
 8005d32:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	697a      	ldr	r2, [r7, #20]
 8005d38:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	693a      	ldr	r2, [r7, #16]
 8005d3e:	621a      	str	r2, [r3, #32]
}
 8005d40:	bf00      	nop
 8005d42:	371c      	adds	r7, #28
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr

08005d4c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b087      	sub	sp, #28
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	60b9      	str	r1, [r7, #8]
 8005d56:	607a      	str	r2, [r7, #4]
 8005d58:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	6a1b      	ldr	r3, [r3, #32]
 8005d5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	69db      	ldr	r3, [r3, #28]
 8005d6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	6a1b      	ldr	r3, [r3, #32]
 8005d70:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d78:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	021b      	lsls	r3, r3, #8
 8005d7e:	697a      	ldr	r2, [r7, #20]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d8a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	031b      	lsls	r3, r3, #12
 8005d90:	b29b      	uxth	r3, r3
 8005d92:	697a      	ldr	r2, [r7, #20]
 8005d94:	4313      	orrs	r3, r2
 8005d96:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005d9e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	031b      	lsls	r3, r3, #12
 8005da4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005da8:	693a      	ldr	r2, [r7, #16]
 8005daa:	4313      	orrs	r3, r2
 8005dac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	697a      	ldr	r2, [r7, #20]
 8005db2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	693a      	ldr	r2, [r7, #16]
 8005db8:	621a      	str	r2, [r3, #32]
}
 8005dba:	bf00      	nop
 8005dbc:	371c      	adds	r7, #28
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr

08005dc6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005dc6:	b480      	push	{r7}
 8005dc8:	b085      	sub	sp, #20
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
 8005dce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ddc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005dde:	683a      	ldr	r2, [r7, #0]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	f043 0307 	orr.w	r3, r3, #7
 8005de8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	68fa      	ldr	r2, [r7, #12]
 8005dee:	609a      	str	r2, [r3, #8]
}
 8005df0:	bf00      	nop
 8005df2:	3714      	adds	r7, #20
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr

08005dfc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b087      	sub	sp, #28
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	60b9      	str	r1, [r7, #8]
 8005e06:	607a      	str	r2, [r7, #4]
 8005e08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	021a      	lsls	r2, r3, #8
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	431a      	orrs	r2, r3
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	697a      	ldr	r2, [r7, #20]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	697a      	ldr	r2, [r7, #20]
 8005e2e:	609a      	str	r2, [r3, #8]
}
 8005e30:	bf00      	nop
 8005e32:	371c      	adds	r7, #28
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr

08005e3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b087      	sub	sp, #28
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	60f8      	str	r0, [r7, #12]
 8005e44:	60b9      	str	r1, [r7, #8]
 8005e46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	f003 031f 	and.w	r3, r3, #31
 8005e4e:	2201      	movs	r2, #1
 8005e50:	fa02 f303 	lsl.w	r3, r2, r3
 8005e54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	6a1a      	ldr	r2, [r3, #32]
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	43db      	mvns	r3, r3
 8005e5e:	401a      	ands	r2, r3
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	6a1a      	ldr	r2, [r3, #32]
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	f003 031f 	and.w	r3, r3, #31
 8005e6e:	6879      	ldr	r1, [r7, #4]
 8005e70:	fa01 f303 	lsl.w	r3, r1, r3
 8005e74:	431a      	orrs	r2, r3
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	621a      	str	r2, [r3, #32]
}
 8005e7a:	bf00      	nop
 8005e7c:	371c      	adds	r7, #28
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr
	...

08005e88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b085      	sub	sp, #20
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d101      	bne.n	8005ea0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e9c:	2302      	movs	r3, #2
 8005e9e:	e05a      	b.n	8005f56 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2202      	movs	r2, #2
 8005eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ec6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	68fa      	ldr	r2, [r7, #12]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	68fa      	ldr	r2, [r7, #12]
 8005ed8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a21      	ldr	r2, [pc, #132]	; (8005f64 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d022      	beq.n	8005f2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eec:	d01d      	beq.n	8005f2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a1d      	ldr	r2, [pc, #116]	; (8005f68 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d018      	beq.n	8005f2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a1b      	ldr	r2, [pc, #108]	; (8005f6c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d013      	beq.n	8005f2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a1a      	ldr	r2, [pc, #104]	; (8005f70 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d00e      	beq.n	8005f2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a18      	ldr	r2, [pc, #96]	; (8005f74 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d009      	beq.n	8005f2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a17      	ldr	r2, [pc, #92]	; (8005f78 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d004      	beq.n	8005f2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a15      	ldr	r2, [pc, #84]	; (8005f7c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d10c      	bne.n	8005f44 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	68ba      	ldr	r2, [r7, #8]
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	68ba      	ldr	r2, [r7, #8]
 8005f42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f54:	2300      	movs	r3, #0
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3714      	adds	r7, #20
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr
 8005f62:	bf00      	nop
 8005f64:	40010000 	.word	0x40010000
 8005f68:	40000400 	.word	0x40000400
 8005f6c:	40000800 	.word	0x40000800
 8005f70:	40000c00 	.word	0x40000c00
 8005f74:	40010400 	.word	0x40010400
 8005f78:	40014000 	.word	0x40014000
 8005f7c:	40001800 	.word	0x40001800

08005f80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b083      	sub	sp, #12
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f88:	bf00      	nop
 8005f8a:	370c      	adds	r7, #12
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b083      	sub	sp, #12
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f9c:	bf00      	nop
 8005f9e:	370c      	adds	r7, #12
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr

08005fa8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b082      	sub	sp, #8
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d101      	bne.n	8005fba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e03f      	b.n	800603a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d106      	bne.n	8005fd4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f7fc fca8 	bl	8002924 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2224      	movs	r2, #36	; 0x24
 8005fd8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	68da      	ldr	r2, [r3, #12]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005fea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f000 fbe9 	bl	80067c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	691a      	ldr	r2, [r3, #16]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006000:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	695a      	ldr	r2, [r3, #20]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006010:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	68da      	ldr	r2, [r3, #12]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006020:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2200      	movs	r2, #0
 8006026:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2220      	movs	r2, #32
 800602c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2220      	movs	r2, #32
 8006034:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006038:	2300      	movs	r3, #0
}
 800603a:	4618      	mov	r0, r3
 800603c:	3708      	adds	r7, #8
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}

08006042 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006042:	b580      	push	{r7, lr}
 8006044:	b088      	sub	sp, #32
 8006046:	af02      	add	r7, sp, #8
 8006048:	60f8      	str	r0, [r7, #12]
 800604a:	60b9      	str	r1, [r7, #8]
 800604c:	603b      	str	r3, [r7, #0]
 800604e:	4613      	mov	r3, r2
 8006050:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8006052:	2300      	movs	r3, #0
 8006054:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800605c:	b2db      	uxtb	r3, r3
 800605e:	2b20      	cmp	r3, #32
 8006060:	f040 8090 	bne.w	8006184 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d002      	beq.n	8006070 <HAL_UART_Receive+0x2e>
 800606a:	88fb      	ldrh	r3, [r7, #6]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d101      	bne.n	8006074 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	e088      	b.n	8006186 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800607a:	2b01      	cmp	r3, #1
 800607c:	d101      	bne.n	8006082 <HAL_UART_Receive+0x40>
 800607e:	2302      	movs	r3, #2
 8006080:	e081      	b.n	8006186 <HAL_UART_Receive+0x144>
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2201      	movs	r2, #1
 8006086:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2200      	movs	r2, #0
 800608e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2222      	movs	r2, #34	; 0x22
 8006094:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006098:	f7fc fd24 	bl	8002ae4 <HAL_GetTick>
 800609c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	88fa      	ldrh	r2, [r7, #6]
 80060a2:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	88fa      	ldrh	r2, [r7, #6]
 80060a8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2200      	movs	r2, #0
 80060ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80060b2:	e05c      	b.n	800616e <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	3b01      	subs	r3, #1
 80060bc:	b29a      	uxth	r2, r3
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060ca:	d12b      	bne.n	8006124 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	9300      	str	r3, [sp, #0]
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	2200      	movs	r2, #0
 80060d4:	2120      	movs	r1, #32
 80060d6:	68f8      	ldr	r0, [r7, #12]
 80060d8:	f000 fa08 	bl	80064ec <UART_WaitOnFlagUntilTimeout>
 80060dc:	4603      	mov	r3, r0
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d001      	beq.n	80060e6 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 80060e2:	2303      	movs	r3, #3
 80060e4:	e04f      	b.n	8006186 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d10c      	bne.n	800610c <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060fe:	b29a      	uxth	r2, r3
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	3302      	adds	r3, #2
 8006108:	60bb      	str	r3, [r7, #8]
 800610a:	e030      	b.n	800616e <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	b29b      	uxth	r3, r3
 8006114:	b2db      	uxtb	r3, r3
 8006116:	b29a      	uxth	r2, r3
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	3301      	adds	r3, #1
 8006120:	60bb      	str	r3, [r7, #8]
 8006122:	e024      	b.n	800616e <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	9300      	str	r3, [sp, #0]
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	2200      	movs	r2, #0
 800612c:	2120      	movs	r1, #32
 800612e:	68f8      	ldr	r0, [r7, #12]
 8006130:	f000 f9dc 	bl	80064ec <UART_WaitOnFlagUntilTimeout>
 8006134:	4603      	mov	r3, r0
 8006136:	2b00      	cmp	r3, #0
 8006138:	d001      	beq.n	800613e <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 800613a:	2303      	movs	r3, #3
 800613c:	e023      	b.n	8006186 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d108      	bne.n	8006158 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	6859      	ldr	r1, [r3, #4]
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	1c5a      	adds	r2, r3, #1
 8006150:	60ba      	str	r2, [r7, #8]
 8006152:	b2ca      	uxtb	r2, r1
 8006154:	701a      	strb	r2, [r3, #0]
 8006156:	e00a      	b.n	800616e <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	b2da      	uxtb	r2, r3
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	1c59      	adds	r1, r3, #1
 8006164:	60b9      	str	r1, [r7, #8]
 8006166:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800616a:	b2d2      	uxtb	r2, r2
 800616c:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006172:	b29b      	uxth	r3, r3
 8006174:	2b00      	cmp	r3, #0
 8006176:	d19d      	bne.n	80060b4 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2220      	movs	r2, #32
 800617c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8006180:	2300      	movs	r3, #0
 8006182:	e000      	b.n	8006186 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8006184:	2302      	movs	r3, #2
  }
}
 8006186:	4618      	mov	r0, r3
 8006188:	3718      	adds	r7, #24
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}

0800618e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800618e:	b480      	push	{r7}
 8006190:	b085      	sub	sp, #20
 8006192:	af00      	add	r7, sp, #0
 8006194:	60f8      	str	r0, [r7, #12]
 8006196:	60b9      	str	r1, [r7, #8]
 8006198:	4613      	mov	r3, r2
 800619a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80061a2:	b2db      	uxtb	r3, r3
 80061a4:	2b20      	cmp	r3, #32
 80061a6:	d130      	bne.n	800620a <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d002      	beq.n	80061b4 <HAL_UART_Transmit_IT+0x26>
 80061ae:	88fb      	ldrh	r3, [r7, #6]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d101      	bne.n	80061b8 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80061b4:	2301      	movs	r3, #1
 80061b6:	e029      	b.n	800620c <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d101      	bne.n	80061c6 <HAL_UART_Transmit_IT+0x38>
 80061c2:	2302      	movs	r3, #2
 80061c4:	e022      	b.n	800620c <HAL_UART_Transmit_IT+0x7e>
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2201      	movs	r2, #1
 80061ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	68ba      	ldr	r2, [r7, #8]
 80061d2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	88fa      	ldrh	r2, [r7, #6]
 80061d8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	88fa      	ldrh	r2, [r7, #6]
 80061de:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2200      	movs	r2, #0
 80061e4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2221      	movs	r2, #33	; 0x21
 80061ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2200      	movs	r2, #0
 80061f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	68da      	ldr	r2, [r3, #12]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006204:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006206:	2300      	movs	r3, #0
 8006208:	e000      	b.n	800620c <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800620a:	2302      	movs	r3, #2
  }
}
 800620c:	4618      	mov	r0, r3
 800620e:	3714      	adds	r7, #20
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr

08006218 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006218:	b480      	push	{r7}
 800621a:	b085      	sub	sp, #20
 800621c:	af00      	add	r7, sp, #0
 800621e:	60f8      	str	r0, [r7, #12]
 8006220:	60b9      	str	r1, [r7, #8]
 8006222:	4613      	mov	r3, r2
 8006224:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800622c:	b2db      	uxtb	r3, r3
 800622e:	2b20      	cmp	r3, #32
 8006230:	d140      	bne.n	80062b4 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d002      	beq.n	800623e <HAL_UART_Receive_IT+0x26>
 8006238:	88fb      	ldrh	r3, [r7, #6]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d101      	bne.n	8006242 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	e039      	b.n	80062b6 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006248:	2b01      	cmp	r3, #1
 800624a:	d101      	bne.n	8006250 <HAL_UART_Receive_IT+0x38>
 800624c:	2302      	movs	r3, #2
 800624e:	e032      	b.n	80062b6 <HAL_UART_Receive_IT+0x9e>
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2201      	movs	r2, #1
 8006254:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	68ba      	ldr	r2, [r7, #8]
 800625c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	88fa      	ldrh	r2, [r7, #6]
 8006262:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	88fa      	ldrh	r2, [r7, #6]
 8006268:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2200      	movs	r2, #0
 800626e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2222      	movs	r2, #34	; 0x22
 8006274:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2200      	movs	r2, #0
 800627c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	68da      	ldr	r2, [r3, #12]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800628e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	695a      	ldr	r2, [r3, #20]
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f042 0201 	orr.w	r2, r2, #1
 800629e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	68da      	ldr	r2, [r3, #12]
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f042 0220 	orr.w	r2, r2, #32
 80062ae:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80062b0:	2300      	movs	r3, #0
 80062b2:	e000      	b.n	80062b6 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80062b4:	2302      	movs	r3, #2
  }
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3714      	adds	r7, #20
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr
	...

080062c4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b088      	sub	sp, #32
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	695b      	ldr	r3, [r3, #20]
 80062e2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80062e4:	2300      	movs	r3, #0
 80062e6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80062e8:	2300      	movs	r3, #0
 80062ea:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80062ec:	69fb      	ldr	r3, [r7, #28]
 80062ee:	f003 030f 	and.w	r3, r3, #15
 80062f2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d10d      	bne.n	8006316 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	f003 0320 	and.w	r3, r3, #32
 8006300:	2b00      	cmp	r3, #0
 8006302:	d008      	beq.n	8006316 <HAL_UART_IRQHandler+0x52>
 8006304:	69bb      	ldr	r3, [r7, #24]
 8006306:	f003 0320 	and.w	r3, r3, #32
 800630a:	2b00      	cmp	r3, #0
 800630c:	d003      	beq.n	8006316 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f000 f9d6 	bl	80066c0 <UART_Receive_IT>
      return;
 8006314:	e0d0      	b.n	80064b8 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	2b00      	cmp	r3, #0
 800631a:	f000 80b0 	beq.w	800647e <HAL_UART_IRQHandler+0x1ba>
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	f003 0301 	and.w	r3, r3, #1
 8006324:	2b00      	cmp	r3, #0
 8006326:	d105      	bne.n	8006334 <HAL_UART_IRQHandler+0x70>
 8006328:	69bb      	ldr	r3, [r7, #24]
 800632a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800632e:	2b00      	cmp	r3, #0
 8006330:	f000 80a5 	beq.w	800647e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006334:	69fb      	ldr	r3, [r7, #28]
 8006336:	f003 0301 	and.w	r3, r3, #1
 800633a:	2b00      	cmp	r3, #0
 800633c:	d00a      	beq.n	8006354 <HAL_UART_IRQHandler+0x90>
 800633e:	69bb      	ldr	r3, [r7, #24]
 8006340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006344:	2b00      	cmp	r3, #0
 8006346:	d005      	beq.n	8006354 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800634c:	f043 0201 	orr.w	r2, r3, #1
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006354:	69fb      	ldr	r3, [r7, #28]
 8006356:	f003 0304 	and.w	r3, r3, #4
 800635a:	2b00      	cmp	r3, #0
 800635c:	d00a      	beq.n	8006374 <HAL_UART_IRQHandler+0xb0>
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	f003 0301 	and.w	r3, r3, #1
 8006364:	2b00      	cmp	r3, #0
 8006366:	d005      	beq.n	8006374 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800636c:	f043 0202 	orr.w	r2, r3, #2
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006374:	69fb      	ldr	r3, [r7, #28]
 8006376:	f003 0302 	and.w	r3, r3, #2
 800637a:	2b00      	cmp	r3, #0
 800637c:	d00a      	beq.n	8006394 <HAL_UART_IRQHandler+0xd0>
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	f003 0301 	and.w	r3, r3, #1
 8006384:	2b00      	cmp	r3, #0
 8006386:	d005      	beq.n	8006394 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800638c:	f043 0204 	orr.w	r2, r3, #4
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006394:	69fb      	ldr	r3, [r7, #28]
 8006396:	f003 0308 	and.w	r3, r3, #8
 800639a:	2b00      	cmp	r3, #0
 800639c:	d00f      	beq.n	80063be <HAL_UART_IRQHandler+0xfa>
 800639e:	69bb      	ldr	r3, [r7, #24]
 80063a0:	f003 0320 	and.w	r3, r3, #32
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d104      	bne.n	80063b2 <HAL_UART_IRQHandler+0xee>
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	f003 0301 	and.w	r3, r3, #1
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d005      	beq.n	80063be <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063b6:	f043 0208 	orr.w	r2, r3, #8
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d077      	beq.n	80064b6 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80063c6:	69fb      	ldr	r3, [r7, #28]
 80063c8:	f003 0320 	and.w	r3, r3, #32
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d007      	beq.n	80063e0 <HAL_UART_IRQHandler+0x11c>
 80063d0:	69bb      	ldr	r3, [r7, #24]
 80063d2:	f003 0320 	and.w	r3, r3, #32
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d002      	beq.n	80063e0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f000 f970 	bl	80066c0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	695b      	ldr	r3, [r3, #20]
 80063e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ea:	2b40      	cmp	r3, #64	; 0x40
 80063ec:	bf0c      	ite	eq
 80063ee:	2301      	moveq	r3, #1
 80063f0:	2300      	movne	r3, #0
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063fa:	f003 0308 	and.w	r3, r3, #8
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d102      	bne.n	8006408 <HAL_UART_IRQHandler+0x144>
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d031      	beq.n	800646c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f000 f8b9 	bl	8006580 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	695b      	ldr	r3, [r3, #20]
 8006414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006418:	2b40      	cmp	r3, #64	; 0x40
 800641a:	d123      	bne.n	8006464 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	695a      	ldr	r2, [r3, #20]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800642a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006430:	2b00      	cmp	r3, #0
 8006432:	d013      	beq.n	800645c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006438:	4a21      	ldr	r2, [pc, #132]	; (80064c0 <HAL_UART_IRQHandler+0x1fc>)
 800643a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006440:	4618      	mov	r0, r3
 8006442:	f7fc fcff 	bl	8002e44 <HAL_DMA_Abort_IT>
 8006446:	4603      	mov	r3, r0
 8006448:	2b00      	cmp	r3, #0
 800644a:	d016      	beq.n	800647a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006450:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006456:	4610      	mov	r0, r2
 8006458:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800645a:	e00e      	b.n	800647a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f000 f83b 	bl	80064d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006462:	e00a      	b.n	800647a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f000 f837 	bl	80064d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800646a:	e006      	b.n	800647a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f000 f833 	bl	80064d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2200      	movs	r2, #0
 8006476:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8006478:	e01d      	b.n	80064b6 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800647a:	bf00      	nop
    return;
 800647c:	e01b      	b.n	80064b6 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800647e:	69fb      	ldr	r3, [r7, #28]
 8006480:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006484:	2b00      	cmp	r3, #0
 8006486:	d008      	beq.n	800649a <HAL_UART_IRQHandler+0x1d6>
 8006488:	69bb      	ldr	r3, [r7, #24]
 800648a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800648e:	2b00      	cmp	r3, #0
 8006490:	d003      	beq.n	800649a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f000 f8a6 	bl	80065e4 <UART_Transmit_IT>
    return;
 8006498:	e00e      	b.n	80064b8 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800649a:	69fb      	ldr	r3, [r7, #28]
 800649c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d009      	beq.n	80064b8 <HAL_UART_IRQHandler+0x1f4>
 80064a4:	69bb      	ldr	r3, [r7, #24]
 80064a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d004      	beq.n	80064b8 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 f8ee 	bl	8006690 <UART_EndTransmit_IT>
    return;
 80064b4:	e000      	b.n	80064b8 <HAL_UART_IRQHandler+0x1f4>
    return;
 80064b6:	bf00      	nop
  }
}
 80064b8:	3720      	adds	r7, #32
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	bf00      	nop
 80064c0:	080065bd 	.word	0x080065bd

080064c4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b083      	sub	sp, #12
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80064cc:	bf00      	nop
 80064ce:	370c      	adds	r7, #12
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr

080064d8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80064d8:	b480      	push	{r7}
 80064da:	b083      	sub	sp, #12
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80064e0:	bf00      	nop
 80064e2:	370c      	adds	r7, #12
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr

080064ec <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b084      	sub	sp, #16
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	60f8      	str	r0, [r7, #12]
 80064f4:	60b9      	str	r1, [r7, #8]
 80064f6:	603b      	str	r3, [r7, #0]
 80064f8:	4613      	mov	r3, r2
 80064fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064fc:	e02c      	b.n	8006558 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064fe:	69bb      	ldr	r3, [r7, #24]
 8006500:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006504:	d028      	beq.n	8006558 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006506:	69bb      	ldr	r3, [r7, #24]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d007      	beq.n	800651c <UART_WaitOnFlagUntilTimeout+0x30>
 800650c:	f7fc faea 	bl	8002ae4 <HAL_GetTick>
 8006510:	4602      	mov	r2, r0
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	1ad3      	subs	r3, r2, r3
 8006516:	69ba      	ldr	r2, [r7, #24]
 8006518:	429a      	cmp	r2, r3
 800651a:	d21d      	bcs.n	8006558 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	68da      	ldr	r2, [r3, #12]
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800652a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	695a      	ldr	r2, [r3, #20]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f022 0201 	bic.w	r2, r2, #1
 800653a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2220      	movs	r2, #32
 8006540:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2220      	movs	r2, #32
 8006548:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2200      	movs	r2, #0
 8006550:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006554:	2303      	movs	r3, #3
 8006556:	e00f      	b.n	8006578 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	4013      	ands	r3, r2
 8006562:	68ba      	ldr	r2, [r7, #8]
 8006564:	429a      	cmp	r2, r3
 8006566:	bf0c      	ite	eq
 8006568:	2301      	moveq	r3, #1
 800656a:	2300      	movne	r3, #0
 800656c:	b2db      	uxtb	r3, r3
 800656e:	461a      	mov	r2, r3
 8006570:	79fb      	ldrb	r3, [r7, #7]
 8006572:	429a      	cmp	r2, r3
 8006574:	d0c3      	beq.n	80064fe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006576:	2300      	movs	r3, #0
}
 8006578:	4618      	mov	r0, r3
 800657a:	3710      	adds	r7, #16
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}

08006580 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006580:	b480      	push	{r7}
 8006582:	b083      	sub	sp, #12
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	68da      	ldr	r2, [r3, #12]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006596:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	695a      	ldr	r2, [r3, #20]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f022 0201 	bic.w	r2, r2, #1
 80065a6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2220      	movs	r2, #32
 80065ac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80065b0:	bf00      	nop
 80065b2:	370c      	adds	r7, #12
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr

080065bc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b084      	sub	sp, #16
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2200      	movs	r2, #0
 80065ce:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2200      	movs	r2, #0
 80065d4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80065d6:	68f8      	ldr	r0, [r7, #12]
 80065d8:	f7ff ff7e 	bl	80064d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065dc:	bf00      	nop
 80065de:	3710      	adds	r7, #16
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}

080065e4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b085      	sub	sp, #20
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	2b21      	cmp	r3, #33	; 0x21
 80065f6:	d144      	bne.n	8006682 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006600:	d11a      	bne.n	8006638 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6a1b      	ldr	r3, [r3, #32]
 8006606:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	881b      	ldrh	r3, [r3, #0]
 800660c:	461a      	mov	r2, r3
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006616:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	691b      	ldr	r3, [r3, #16]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d105      	bne.n	800662c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6a1b      	ldr	r3, [r3, #32]
 8006624:	1c9a      	adds	r2, r3, #2
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	621a      	str	r2, [r3, #32]
 800662a:	e00e      	b.n	800664a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6a1b      	ldr	r3, [r3, #32]
 8006630:	1c5a      	adds	r2, r3, #1
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	621a      	str	r2, [r3, #32]
 8006636:	e008      	b.n	800664a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6a1b      	ldr	r3, [r3, #32]
 800663c:	1c59      	adds	r1, r3, #1
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	6211      	str	r1, [r2, #32]
 8006642:	781a      	ldrb	r2, [r3, #0]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800664e:	b29b      	uxth	r3, r3
 8006650:	3b01      	subs	r3, #1
 8006652:	b29b      	uxth	r3, r3
 8006654:	687a      	ldr	r2, [r7, #4]
 8006656:	4619      	mov	r1, r3
 8006658:	84d1      	strh	r1, [r2, #38]	; 0x26
 800665a:	2b00      	cmp	r3, #0
 800665c:	d10f      	bne.n	800667e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	68da      	ldr	r2, [r3, #12]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800666c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	68da      	ldr	r2, [r3, #12]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800667c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800667e:	2300      	movs	r3, #0
 8006680:	e000      	b.n	8006684 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006682:	2302      	movs	r3, #2
  }
}
 8006684:	4618      	mov	r0, r3
 8006686:	3714      	adds	r7, #20
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b082      	sub	sp, #8
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	68da      	ldr	r2, [r3, #12]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066a6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2220      	movs	r2, #32
 80066ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f7ff ff07 	bl	80064c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80066b6:	2300      	movs	r3, #0
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3708      	adds	r7, #8
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}

080066c0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b084      	sub	sp, #16
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	2b22      	cmp	r3, #34	; 0x22
 80066d2:	d171      	bne.n	80067b8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066dc:	d123      	bne.n	8006726 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066e2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	691b      	ldr	r3, [r3, #16]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d10e      	bne.n	800670a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066f8:	b29a      	uxth	r2, r3
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006702:	1c9a      	adds	r2, r3, #2
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	629a      	str	r2, [r3, #40]	; 0x28
 8006708:	e029      	b.n	800675e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	b29b      	uxth	r3, r3
 8006712:	b2db      	uxtb	r3, r3
 8006714:	b29a      	uxth	r2, r3
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800671e:	1c5a      	adds	r2, r3, #1
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	629a      	str	r2, [r3, #40]	; 0x28
 8006724:	e01b      	b.n	800675e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	691b      	ldr	r3, [r3, #16]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d10a      	bne.n	8006744 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	6858      	ldr	r0, [r3, #4]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006738:	1c59      	adds	r1, r3, #1
 800673a:	687a      	ldr	r2, [r7, #4]
 800673c:	6291      	str	r1, [r2, #40]	; 0x28
 800673e:	b2c2      	uxtb	r2, r0
 8006740:	701a      	strb	r2, [r3, #0]
 8006742:	e00c      	b.n	800675e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	b2da      	uxtb	r2, r3
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006750:	1c58      	adds	r0, r3, #1
 8006752:	6879      	ldr	r1, [r7, #4]
 8006754:	6288      	str	r0, [r1, #40]	; 0x28
 8006756:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800675a:	b2d2      	uxtb	r2, r2
 800675c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006762:	b29b      	uxth	r3, r3
 8006764:	3b01      	subs	r3, #1
 8006766:	b29b      	uxth	r3, r3
 8006768:	687a      	ldr	r2, [r7, #4]
 800676a:	4619      	mov	r1, r3
 800676c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800676e:	2b00      	cmp	r3, #0
 8006770:	d120      	bne.n	80067b4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	68da      	ldr	r2, [r3, #12]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f022 0220 	bic.w	r2, r2, #32
 8006780:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	68da      	ldr	r2, [r3, #12]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006790:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	695a      	ldr	r2, [r3, #20]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f022 0201 	bic.w	r2, r2, #1
 80067a0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2220      	movs	r2, #32
 80067a6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f7fa fd10 	bl	80011d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80067b0:	2300      	movs	r3, #0
 80067b2:	e002      	b.n	80067ba <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80067b4:	2300      	movs	r3, #0
 80067b6:	e000      	b.n	80067ba <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80067b8:	2302      	movs	r3, #2
  }
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3710      	adds	r7, #16
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}
	...

080067c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067c8:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067d2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	691b      	ldr	r3, [r3, #16]
 80067da:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80067de:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80067e2:	68d9      	ldr	r1, [r3, #12]
 80067e4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	ea40 0301 	orr.w	r3, r0, r1
 80067ee:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80067f0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80067f4:	689a      	ldr	r2, [r3, #8]
 80067f6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80067fa:	691b      	ldr	r3, [r3, #16]
 80067fc:	431a      	orrs	r2, r3
 80067fe:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006802:	695b      	ldr	r3, [r3, #20]
 8006804:	431a      	orrs	r2, r3
 8006806:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800680a:	69db      	ldr	r3, [r3, #28]
 800680c:	4313      	orrs	r3, r2
 800680e:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 8006812:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	68db      	ldr	r3, [r3, #12]
 800681a:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800681e:	f021 010c 	bic.w	r1, r1, #12
 8006822:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006826:	681a      	ldr	r2, [r3, #0]
 8006828:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800682c:	430b      	orrs	r3, r1
 800682e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006830:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	695b      	ldr	r3, [r3, #20]
 8006838:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800683c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006840:	6999      	ldr	r1, [r3, #24]
 8006842:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006846:	681a      	ldr	r2, [r3, #0]
 8006848:	ea40 0301 	orr.w	r3, r0, r1
 800684c:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800684e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006852:	69db      	ldr	r3, [r3, #28]
 8006854:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006858:	f040 824a 	bne.w	8006cf0 <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800685c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006860:	681a      	ldr	r2, [r3, #0]
 8006862:	4b96      	ldr	r3, [pc, #600]	; (8006abc <UART_SetConfig+0x2f8>)
 8006864:	429a      	cmp	r2, r3
 8006866:	d006      	beq.n	8006876 <UART_SetConfig+0xb2>
 8006868:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800686c:	681a      	ldr	r2, [r3, #0]
 800686e:	4b94      	ldr	r3, [pc, #592]	; (8006ac0 <UART_SetConfig+0x2fc>)
 8006870:	429a      	cmp	r2, r3
 8006872:	f040 8129 	bne.w	8006ac8 <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006876:	f7fe f9e9 	bl	8004c4c <HAL_RCC_GetPCLK2Freq>
 800687a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800687e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006882:	2200      	movs	r2, #0
 8006884:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8006888:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 800688c:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 8006890:	4622      	mov	r2, r4
 8006892:	462b      	mov	r3, r5
 8006894:	1891      	adds	r1, r2, r2
 8006896:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800689a:	415b      	adcs	r3, r3
 800689c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80068a0:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 80068a4:	4621      	mov	r1, r4
 80068a6:	1851      	adds	r1, r2, r1
 80068a8:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 80068ac:	4629      	mov	r1, r5
 80068ae:	414b      	adcs	r3, r1
 80068b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80068b4:	f04f 0200 	mov.w	r2, #0
 80068b8:	f04f 0300 	mov.w	r3, #0
 80068bc:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 80068c0:	4649      	mov	r1, r9
 80068c2:	00cb      	lsls	r3, r1, #3
 80068c4:	4641      	mov	r1, r8
 80068c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068ca:	4641      	mov	r1, r8
 80068cc:	00ca      	lsls	r2, r1, #3
 80068ce:	4610      	mov	r0, r2
 80068d0:	4619      	mov	r1, r3
 80068d2:	4603      	mov	r3, r0
 80068d4:	4622      	mov	r2, r4
 80068d6:	189b      	adds	r3, r3, r2
 80068d8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80068dc:	462b      	mov	r3, r5
 80068de:	460a      	mov	r2, r1
 80068e0:	eb42 0303 	adc.w	r3, r2, r3
 80068e4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 80068e8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	2200      	movs	r2, #0
 80068f0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80068f4:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 80068f8:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 80068fc:	460b      	mov	r3, r1
 80068fe:	18db      	adds	r3, r3, r3
 8006900:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006904:	4613      	mov	r3, r2
 8006906:	eb42 0303 	adc.w	r3, r2, r3
 800690a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800690e:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8006912:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8006916:	f7f9 ffa1 	bl	800085c <__aeabi_uldivmod>
 800691a:	4602      	mov	r2, r0
 800691c:	460b      	mov	r3, r1
 800691e:	4b69      	ldr	r3, [pc, #420]	; (8006ac4 <UART_SetConfig+0x300>)
 8006920:	fba3 2302 	umull	r2, r3, r3, r2
 8006924:	095b      	lsrs	r3, r3, #5
 8006926:	011c      	lsls	r4, r3, #4
 8006928:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800692c:	2200      	movs	r2, #0
 800692e:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8006932:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8006936:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 800693a:	4642      	mov	r2, r8
 800693c:	464b      	mov	r3, r9
 800693e:	1891      	adds	r1, r2, r2
 8006940:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8006944:	415b      	adcs	r3, r3
 8006946:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800694a:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800694e:	4641      	mov	r1, r8
 8006950:	1851      	adds	r1, r2, r1
 8006952:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8006956:	4649      	mov	r1, r9
 8006958:	414b      	adcs	r3, r1
 800695a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800695e:	f04f 0200 	mov.w	r2, #0
 8006962:	f04f 0300 	mov.w	r3, #0
 8006966:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 800696a:	4659      	mov	r1, fp
 800696c:	00cb      	lsls	r3, r1, #3
 800696e:	4651      	mov	r1, sl
 8006970:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006974:	4651      	mov	r1, sl
 8006976:	00ca      	lsls	r2, r1, #3
 8006978:	4610      	mov	r0, r2
 800697a:	4619      	mov	r1, r3
 800697c:	4603      	mov	r3, r0
 800697e:	4642      	mov	r2, r8
 8006980:	189b      	adds	r3, r3, r2
 8006982:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8006986:	464b      	mov	r3, r9
 8006988:	460a      	mov	r2, r1
 800698a:	eb42 0303 	adc.w	r3, r2, r3
 800698e:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8006992:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	2200      	movs	r2, #0
 800699a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800699e:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 80069a2:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 80069a6:	460b      	mov	r3, r1
 80069a8:	18db      	adds	r3, r3, r3
 80069aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80069ae:	4613      	mov	r3, r2
 80069b0:	eb42 0303 	adc.w	r3, r2, r3
 80069b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80069b8:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80069bc:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 80069c0:	f7f9 ff4c 	bl	800085c <__aeabi_uldivmod>
 80069c4:	4602      	mov	r2, r0
 80069c6:	460b      	mov	r3, r1
 80069c8:	4611      	mov	r1, r2
 80069ca:	4b3e      	ldr	r3, [pc, #248]	; (8006ac4 <UART_SetConfig+0x300>)
 80069cc:	fba3 2301 	umull	r2, r3, r3, r1
 80069d0:	095b      	lsrs	r3, r3, #5
 80069d2:	2264      	movs	r2, #100	; 0x64
 80069d4:	fb02 f303 	mul.w	r3, r2, r3
 80069d8:	1acb      	subs	r3, r1, r3
 80069da:	00db      	lsls	r3, r3, #3
 80069dc:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80069e0:	4b38      	ldr	r3, [pc, #224]	; (8006ac4 <UART_SetConfig+0x300>)
 80069e2:	fba3 2302 	umull	r2, r3, r3, r2
 80069e6:	095b      	lsrs	r3, r3, #5
 80069e8:	005b      	lsls	r3, r3, #1
 80069ea:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80069ee:	441c      	add	r4, r3
 80069f0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80069f4:	2200      	movs	r2, #0
 80069f6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80069fa:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 80069fe:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 8006a02:	4642      	mov	r2, r8
 8006a04:	464b      	mov	r3, r9
 8006a06:	1891      	adds	r1, r2, r2
 8006a08:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8006a0c:	415b      	adcs	r3, r3
 8006a0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006a12:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8006a16:	4641      	mov	r1, r8
 8006a18:	1851      	adds	r1, r2, r1
 8006a1a:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8006a1e:	4649      	mov	r1, r9
 8006a20:	414b      	adcs	r3, r1
 8006a22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006a26:	f04f 0200 	mov.w	r2, #0
 8006a2a:	f04f 0300 	mov.w	r3, #0
 8006a2e:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 8006a32:	4659      	mov	r1, fp
 8006a34:	00cb      	lsls	r3, r1, #3
 8006a36:	4651      	mov	r1, sl
 8006a38:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a3c:	4651      	mov	r1, sl
 8006a3e:	00ca      	lsls	r2, r1, #3
 8006a40:	4610      	mov	r0, r2
 8006a42:	4619      	mov	r1, r3
 8006a44:	4603      	mov	r3, r0
 8006a46:	4642      	mov	r2, r8
 8006a48:	189b      	adds	r3, r3, r2
 8006a4a:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8006a4e:	464b      	mov	r3, r9
 8006a50:	460a      	mov	r2, r1
 8006a52:	eb42 0303 	adc.w	r3, r2, r3
 8006a56:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8006a5a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	2200      	movs	r2, #0
 8006a62:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8006a66:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 8006a6a:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 8006a6e:	460b      	mov	r3, r1
 8006a70:	18db      	adds	r3, r3, r3
 8006a72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006a76:	4613      	mov	r3, r2
 8006a78:	eb42 0303 	adc.w	r3, r2, r3
 8006a7c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006a80:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8006a84:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 8006a88:	f7f9 fee8 	bl	800085c <__aeabi_uldivmod>
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	460b      	mov	r3, r1
 8006a90:	4b0c      	ldr	r3, [pc, #48]	; (8006ac4 <UART_SetConfig+0x300>)
 8006a92:	fba3 1302 	umull	r1, r3, r3, r2
 8006a96:	095b      	lsrs	r3, r3, #5
 8006a98:	2164      	movs	r1, #100	; 0x64
 8006a9a:	fb01 f303 	mul.w	r3, r1, r3
 8006a9e:	1ad3      	subs	r3, r2, r3
 8006aa0:	00db      	lsls	r3, r3, #3
 8006aa2:	3332      	adds	r3, #50	; 0x32
 8006aa4:	4a07      	ldr	r2, [pc, #28]	; (8006ac4 <UART_SetConfig+0x300>)
 8006aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8006aaa:	095b      	lsrs	r3, r3, #5
 8006aac:	f003 0207 	and.w	r2, r3, #7
 8006ab0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4422      	add	r2, r4
 8006ab8:	609a      	str	r2, [r3, #8]
 8006aba:	e349      	b.n	8007150 <UART_SetConfig+0x98c>
 8006abc:	40011000 	.word	0x40011000
 8006ac0:	40011400 	.word	0x40011400
 8006ac4:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006ac8:	f7fe f8ac 	bl	8004c24 <HAL_RCC_GetPCLK1Freq>
 8006acc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006ad0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8006ada:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 8006ade:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 8006ae2:	4622      	mov	r2, r4
 8006ae4:	462b      	mov	r3, r5
 8006ae6:	1891      	adds	r1, r2, r2
 8006ae8:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8006aec:	415b      	adcs	r3, r3
 8006aee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006af2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8006af6:	4621      	mov	r1, r4
 8006af8:	eb12 0a01 	adds.w	sl, r2, r1
 8006afc:	4629      	mov	r1, r5
 8006afe:	eb43 0b01 	adc.w	fp, r3, r1
 8006b02:	f04f 0200 	mov.w	r2, #0
 8006b06:	f04f 0300 	mov.w	r3, #0
 8006b0a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006b0e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006b12:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b16:	4692      	mov	sl, r2
 8006b18:	469b      	mov	fp, r3
 8006b1a:	4623      	mov	r3, r4
 8006b1c:	eb1a 0303 	adds.w	r3, sl, r3
 8006b20:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8006b24:	462b      	mov	r3, r5
 8006b26:	eb4b 0303 	adc.w	r3, fp, r3
 8006b2a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8006b2e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	2200      	movs	r2, #0
 8006b36:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8006b3a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8006b3e:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 8006b42:	460b      	mov	r3, r1
 8006b44:	18db      	adds	r3, r3, r3
 8006b46:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006b4a:	4613      	mov	r3, r2
 8006b4c:	eb42 0303 	adc.w	r3, r2, r3
 8006b50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006b54:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8006b58:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 8006b5c:	f7f9 fe7e 	bl	800085c <__aeabi_uldivmod>
 8006b60:	4602      	mov	r2, r0
 8006b62:	460b      	mov	r3, r1
 8006b64:	4b61      	ldr	r3, [pc, #388]	; (8006cec <UART_SetConfig+0x528>)
 8006b66:	fba3 2302 	umull	r2, r3, r3, r2
 8006b6a:	095b      	lsrs	r3, r3, #5
 8006b6c:	011c      	lsls	r4, r3, #4
 8006b6e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006b72:	2200      	movs	r2, #0
 8006b74:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8006b78:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 8006b7c:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 8006b80:	4642      	mov	r2, r8
 8006b82:	464b      	mov	r3, r9
 8006b84:	1891      	adds	r1, r2, r2
 8006b86:	67b9      	str	r1, [r7, #120]	; 0x78
 8006b88:	415b      	adcs	r3, r3
 8006b8a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006b8c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8006b90:	4641      	mov	r1, r8
 8006b92:	1851      	adds	r1, r2, r1
 8006b94:	6739      	str	r1, [r7, #112]	; 0x70
 8006b96:	4649      	mov	r1, r9
 8006b98:	414b      	adcs	r3, r1
 8006b9a:	677b      	str	r3, [r7, #116]	; 0x74
 8006b9c:	f04f 0200 	mov.w	r2, #0
 8006ba0:	f04f 0300 	mov.w	r3, #0
 8006ba4:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 8006ba8:	4659      	mov	r1, fp
 8006baa:	00cb      	lsls	r3, r1, #3
 8006bac:	4651      	mov	r1, sl
 8006bae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006bb2:	4651      	mov	r1, sl
 8006bb4:	00ca      	lsls	r2, r1, #3
 8006bb6:	4610      	mov	r0, r2
 8006bb8:	4619      	mov	r1, r3
 8006bba:	4603      	mov	r3, r0
 8006bbc:	4642      	mov	r2, r8
 8006bbe:	189b      	adds	r3, r3, r2
 8006bc0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8006bc4:	464b      	mov	r3, r9
 8006bc6:	460a      	mov	r2, r1
 8006bc8:	eb42 0303 	adc.w	r3, r2, r3
 8006bcc:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8006bd0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8006bdc:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 8006be0:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 8006be4:	460b      	mov	r3, r1
 8006be6:	18db      	adds	r3, r3, r3
 8006be8:	66bb      	str	r3, [r7, #104]	; 0x68
 8006bea:	4613      	mov	r3, r2
 8006bec:	eb42 0303 	adc.w	r3, r2, r3
 8006bf0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006bf2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8006bf6:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8006bfa:	f7f9 fe2f 	bl	800085c <__aeabi_uldivmod>
 8006bfe:	4602      	mov	r2, r0
 8006c00:	460b      	mov	r3, r1
 8006c02:	4611      	mov	r1, r2
 8006c04:	4b39      	ldr	r3, [pc, #228]	; (8006cec <UART_SetConfig+0x528>)
 8006c06:	fba3 2301 	umull	r2, r3, r3, r1
 8006c0a:	095b      	lsrs	r3, r3, #5
 8006c0c:	2264      	movs	r2, #100	; 0x64
 8006c0e:	fb02 f303 	mul.w	r3, r2, r3
 8006c12:	1acb      	subs	r3, r1, r3
 8006c14:	00db      	lsls	r3, r3, #3
 8006c16:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006c1a:	4b34      	ldr	r3, [pc, #208]	; (8006cec <UART_SetConfig+0x528>)
 8006c1c:	fba3 2302 	umull	r2, r3, r3, r2
 8006c20:	095b      	lsrs	r3, r3, #5
 8006c22:	005b      	lsls	r3, r3, #1
 8006c24:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006c28:	441c      	add	r4, r3
 8006c2a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006c2e:	2200      	movs	r2, #0
 8006c30:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8006c34:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8006c38:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 8006c3c:	4642      	mov	r2, r8
 8006c3e:	464b      	mov	r3, r9
 8006c40:	1891      	adds	r1, r2, r2
 8006c42:	6639      	str	r1, [r7, #96]	; 0x60
 8006c44:	415b      	adcs	r3, r3
 8006c46:	667b      	str	r3, [r7, #100]	; 0x64
 8006c48:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8006c4c:	4641      	mov	r1, r8
 8006c4e:	1851      	adds	r1, r2, r1
 8006c50:	65b9      	str	r1, [r7, #88]	; 0x58
 8006c52:	4649      	mov	r1, r9
 8006c54:	414b      	adcs	r3, r1
 8006c56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c58:	f04f 0200 	mov.w	r2, #0
 8006c5c:	f04f 0300 	mov.w	r3, #0
 8006c60:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8006c64:	4659      	mov	r1, fp
 8006c66:	00cb      	lsls	r3, r1, #3
 8006c68:	4651      	mov	r1, sl
 8006c6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c6e:	4651      	mov	r1, sl
 8006c70:	00ca      	lsls	r2, r1, #3
 8006c72:	4610      	mov	r0, r2
 8006c74:	4619      	mov	r1, r3
 8006c76:	4603      	mov	r3, r0
 8006c78:	4642      	mov	r2, r8
 8006c7a:	189b      	adds	r3, r3, r2
 8006c7c:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8006c80:	464b      	mov	r3, r9
 8006c82:	460a      	mov	r2, r1
 8006c84:	eb42 0303 	adc.w	r3, r2, r3
 8006c88:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8006c8c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	2200      	movs	r2, #0
 8006c94:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8006c98:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 8006c9c:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 8006ca0:	460b      	mov	r3, r1
 8006ca2:	18db      	adds	r3, r3, r3
 8006ca4:	653b      	str	r3, [r7, #80]	; 0x50
 8006ca6:	4613      	mov	r3, r2
 8006ca8:	eb42 0303 	adc.w	r3, r2, r3
 8006cac:	657b      	str	r3, [r7, #84]	; 0x54
 8006cae:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006cb2:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8006cb6:	f7f9 fdd1 	bl	800085c <__aeabi_uldivmod>
 8006cba:	4602      	mov	r2, r0
 8006cbc:	460b      	mov	r3, r1
 8006cbe:	4b0b      	ldr	r3, [pc, #44]	; (8006cec <UART_SetConfig+0x528>)
 8006cc0:	fba3 1302 	umull	r1, r3, r3, r2
 8006cc4:	095b      	lsrs	r3, r3, #5
 8006cc6:	2164      	movs	r1, #100	; 0x64
 8006cc8:	fb01 f303 	mul.w	r3, r1, r3
 8006ccc:	1ad3      	subs	r3, r2, r3
 8006cce:	00db      	lsls	r3, r3, #3
 8006cd0:	3332      	adds	r3, #50	; 0x32
 8006cd2:	4a06      	ldr	r2, [pc, #24]	; (8006cec <UART_SetConfig+0x528>)
 8006cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8006cd8:	095b      	lsrs	r3, r3, #5
 8006cda:	f003 0207 	and.w	r2, r3, #7
 8006cde:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4422      	add	r2, r4
 8006ce6:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006ce8:	e232      	b.n	8007150 <UART_SetConfig+0x98c>
 8006cea:	bf00      	nop
 8006cec:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006cf0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006cf4:	681a      	ldr	r2, [r3, #0]
 8006cf6:	4b8d      	ldr	r3, [pc, #564]	; (8006f2c <UART_SetConfig+0x768>)
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d006      	beq.n	8006d0a <UART_SetConfig+0x546>
 8006cfc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	4b8b      	ldr	r3, [pc, #556]	; (8006f30 <UART_SetConfig+0x76c>)
 8006d04:	429a      	cmp	r2, r3
 8006d06:	f040 8117 	bne.w	8006f38 <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006d0a:	f7fd ff9f 	bl	8004c4c <HAL_RCC_GetPCLK2Freq>
 8006d0e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006d12:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006d16:	2200      	movs	r2, #0
 8006d18:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8006d1c:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8006d20:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8006d24:	4622      	mov	r2, r4
 8006d26:	462b      	mov	r3, r5
 8006d28:	1891      	adds	r1, r2, r2
 8006d2a:	64b9      	str	r1, [r7, #72]	; 0x48
 8006d2c:	415b      	adcs	r3, r3
 8006d2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d30:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006d34:	4621      	mov	r1, r4
 8006d36:	eb12 0801 	adds.w	r8, r2, r1
 8006d3a:	4629      	mov	r1, r5
 8006d3c:	eb43 0901 	adc.w	r9, r3, r1
 8006d40:	f04f 0200 	mov.w	r2, #0
 8006d44:	f04f 0300 	mov.w	r3, #0
 8006d48:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006d4c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006d50:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006d54:	4690      	mov	r8, r2
 8006d56:	4699      	mov	r9, r3
 8006d58:	4623      	mov	r3, r4
 8006d5a:	eb18 0303 	adds.w	r3, r8, r3
 8006d5e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8006d62:	462b      	mov	r3, r5
 8006d64:	eb49 0303 	adc.w	r3, r9, r3
 8006d68:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8006d6c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	2200      	movs	r2, #0
 8006d74:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8006d78:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8006d7c:	f04f 0200 	mov.w	r2, #0
 8006d80:	f04f 0300 	mov.w	r3, #0
 8006d84:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 8006d88:	4629      	mov	r1, r5
 8006d8a:	008b      	lsls	r3, r1, #2
 8006d8c:	4621      	mov	r1, r4
 8006d8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d92:	4621      	mov	r1, r4
 8006d94:	008a      	lsls	r2, r1, #2
 8006d96:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 8006d9a:	f7f9 fd5f 	bl	800085c <__aeabi_uldivmod>
 8006d9e:	4602      	mov	r2, r0
 8006da0:	460b      	mov	r3, r1
 8006da2:	4b64      	ldr	r3, [pc, #400]	; (8006f34 <UART_SetConfig+0x770>)
 8006da4:	fba3 2302 	umull	r2, r3, r3, r2
 8006da8:	095b      	lsrs	r3, r3, #5
 8006daa:	011c      	lsls	r4, r3, #4
 8006dac:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006db0:	2200      	movs	r2, #0
 8006db2:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8006db6:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8006dba:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 8006dbe:	4642      	mov	r2, r8
 8006dc0:	464b      	mov	r3, r9
 8006dc2:	1891      	adds	r1, r2, r2
 8006dc4:	6439      	str	r1, [r7, #64]	; 0x40
 8006dc6:	415b      	adcs	r3, r3
 8006dc8:	647b      	str	r3, [r7, #68]	; 0x44
 8006dca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006dce:	4641      	mov	r1, r8
 8006dd0:	1851      	adds	r1, r2, r1
 8006dd2:	63b9      	str	r1, [r7, #56]	; 0x38
 8006dd4:	4649      	mov	r1, r9
 8006dd6:	414b      	adcs	r3, r1
 8006dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006dda:	f04f 0200 	mov.w	r2, #0
 8006dde:	f04f 0300 	mov.w	r3, #0
 8006de2:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 8006de6:	4659      	mov	r1, fp
 8006de8:	00cb      	lsls	r3, r1, #3
 8006dea:	4651      	mov	r1, sl
 8006dec:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006df0:	4651      	mov	r1, sl
 8006df2:	00ca      	lsls	r2, r1, #3
 8006df4:	4610      	mov	r0, r2
 8006df6:	4619      	mov	r1, r3
 8006df8:	4603      	mov	r3, r0
 8006dfa:	4642      	mov	r2, r8
 8006dfc:	189b      	adds	r3, r3, r2
 8006dfe:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8006e02:	464b      	mov	r3, r9
 8006e04:	460a      	mov	r2, r1
 8006e06:	eb42 0303 	adc.w	r3, r2, r3
 8006e0a:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8006e0e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	2200      	movs	r2, #0
 8006e16:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8006e1a:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8006e1e:	f04f 0200 	mov.w	r2, #0
 8006e22:	f04f 0300 	mov.w	r3, #0
 8006e26:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 8006e2a:	4649      	mov	r1, r9
 8006e2c:	008b      	lsls	r3, r1, #2
 8006e2e:	4641      	mov	r1, r8
 8006e30:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e34:	4641      	mov	r1, r8
 8006e36:	008a      	lsls	r2, r1, #2
 8006e38:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8006e3c:	f7f9 fd0e 	bl	800085c <__aeabi_uldivmod>
 8006e40:	4602      	mov	r2, r0
 8006e42:	460b      	mov	r3, r1
 8006e44:	4b3b      	ldr	r3, [pc, #236]	; (8006f34 <UART_SetConfig+0x770>)
 8006e46:	fba3 1302 	umull	r1, r3, r3, r2
 8006e4a:	095b      	lsrs	r3, r3, #5
 8006e4c:	2164      	movs	r1, #100	; 0x64
 8006e4e:	fb01 f303 	mul.w	r3, r1, r3
 8006e52:	1ad3      	subs	r3, r2, r3
 8006e54:	011b      	lsls	r3, r3, #4
 8006e56:	3332      	adds	r3, #50	; 0x32
 8006e58:	4a36      	ldr	r2, [pc, #216]	; (8006f34 <UART_SetConfig+0x770>)
 8006e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e5e:	095b      	lsrs	r3, r3, #5
 8006e60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e64:	441c      	add	r4, r3
 8006e66:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8006e70:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8006e74:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 8006e78:	4642      	mov	r2, r8
 8006e7a:	464b      	mov	r3, r9
 8006e7c:	1891      	adds	r1, r2, r2
 8006e7e:	6339      	str	r1, [r7, #48]	; 0x30
 8006e80:	415b      	adcs	r3, r3
 8006e82:	637b      	str	r3, [r7, #52]	; 0x34
 8006e84:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006e88:	4641      	mov	r1, r8
 8006e8a:	1851      	adds	r1, r2, r1
 8006e8c:	62b9      	str	r1, [r7, #40]	; 0x28
 8006e8e:	4649      	mov	r1, r9
 8006e90:	414b      	adcs	r3, r1
 8006e92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e94:	f04f 0200 	mov.w	r2, #0
 8006e98:	f04f 0300 	mov.w	r3, #0
 8006e9c:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 8006ea0:	4659      	mov	r1, fp
 8006ea2:	00cb      	lsls	r3, r1, #3
 8006ea4:	4651      	mov	r1, sl
 8006ea6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006eaa:	4651      	mov	r1, sl
 8006eac:	00ca      	lsls	r2, r1, #3
 8006eae:	4610      	mov	r0, r2
 8006eb0:	4619      	mov	r1, r3
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	4642      	mov	r2, r8
 8006eb6:	189b      	adds	r3, r3, r2
 8006eb8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006ebc:	464b      	mov	r3, r9
 8006ebe:	460a      	mov	r2, r1
 8006ec0:	eb42 0303 	adc.w	r3, r2, r3
 8006ec4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006ec8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006ed4:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8006ed8:	f04f 0200 	mov.w	r2, #0
 8006edc:	f04f 0300 	mov.w	r3, #0
 8006ee0:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 8006ee4:	4649      	mov	r1, r9
 8006ee6:	008b      	lsls	r3, r1, #2
 8006ee8:	4641      	mov	r1, r8
 8006eea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006eee:	4641      	mov	r1, r8
 8006ef0:	008a      	lsls	r2, r1, #2
 8006ef2:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8006ef6:	f7f9 fcb1 	bl	800085c <__aeabi_uldivmod>
 8006efa:	4602      	mov	r2, r0
 8006efc:	460b      	mov	r3, r1
 8006efe:	4b0d      	ldr	r3, [pc, #52]	; (8006f34 <UART_SetConfig+0x770>)
 8006f00:	fba3 1302 	umull	r1, r3, r3, r2
 8006f04:	095b      	lsrs	r3, r3, #5
 8006f06:	2164      	movs	r1, #100	; 0x64
 8006f08:	fb01 f303 	mul.w	r3, r1, r3
 8006f0c:	1ad3      	subs	r3, r2, r3
 8006f0e:	011b      	lsls	r3, r3, #4
 8006f10:	3332      	adds	r3, #50	; 0x32
 8006f12:	4a08      	ldr	r2, [pc, #32]	; (8006f34 <UART_SetConfig+0x770>)
 8006f14:	fba2 2303 	umull	r2, r3, r2, r3
 8006f18:	095b      	lsrs	r3, r3, #5
 8006f1a:	f003 020f 	and.w	r2, r3, #15
 8006f1e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4422      	add	r2, r4
 8006f26:	609a      	str	r2, [r3, #8]
 8006f28:	e112      	b.n	8007150 <UART_SetConfig+0x98c>
 8006f2a:	bf00      	nop
 8006f2c:	40011000 	.word	0x40011000
 8006f30:	40011400 	.word	0x40011400
 8006f34:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 8006f38:	f7fd fe74 	bl	8004c24 <HAL_RCC_GetPCLK1Freq>
 8006f3c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006f40:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006f44:	2200      	movs	r2, #0
 8006f46:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006f4a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8006f4e:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 8006f52:	4642      	mov	r2, r8
 8006f54:	464b      	mov	r3, r9
 8006f56:	1891      	adds	r1, r2, r2
 8006f58:	6239      	str	r1, [r7, #32]
 8006f5a:	415b      	adcs	r3, r3
 8006f5c:	627b      	str	r3, [r7, #36]	; 0x24
 8006f5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006f62:	4641      	mov	r1, r8
 8006f64:	1854      	adds	r4, r2, r1
 8006f66:	4649      	mov	r1, r9
 8006f68:	eb43 0501 	adc.w	r5, r3, r1
 8006f6c:	f04f 0200 	mov.w	r2, #0
 8006f70:	f04f 0300 	mov.w	r3, #0
 8006f74:	00eb      	lsls	r3, r5, #3
 8006f76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006f7a:	00e2      	lsls	r2, r4, #3
 8006f7c:	4614      	mov	r4, r2
 8006f7e:	461d      	mov	r5, r3
 8006f80:	4643      	mov	r3, r8
 8006f82:	18e3      	adds	r3, r4, r3
 8006f84:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006f88:	464b      	mov	r3, r9
 8006f8a:	eb45 0303 	adc.w	r3, r5, r3
 8006f8e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006f92:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006f9e:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8006fa2:	f04f 0200 	mov.w	r2, #0
 8006fa6:	f04f 0300 	mov.w	r3, #0
 8006faa:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8006fae:	4629      	mov	r1, r5
 8006fb0:	008b      	lsls	r3, r1, #2
 8006fb2:	4621      	mov	r1, r4
 8006fb4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006fb8:	4621      	mov	r1, r4
 8006fba:	008a      	lsls	r2, r1, #2
 8006fbc:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8006fc0:	f7f9 fc4c 	bl	800085c <__aeabi_uldivmod>
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	460b      	mov	r3, r1
 8006fc8:	4b64      	ldr	r3, [pc, #400]	; (800715c <UART_SetConfig+0x998>)
 8006fca:	fba3 2302 	umull	r2, r3, r3, r2
 8006fce:	095b      	lsrs	r3, r3, #5
 8006fd0:	011c      	lsls	r4, r3, #4
 8006fd2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006fdc:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8006fe0:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 8006fe4:	4642      	mov	r2, r8
 8006fe6:	464b      	mov	r3, r9
 8006fe8:	1891      	adds	r1, r2, r2
 8006fea:	61b9      	str	r1, [r7, #24]
 8006fec:	415b      	adcs	r3, r3
 8006fee:	61fb      	str	r3, [r7, #28]
 8006ff0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ff4:	4641      	mov	r1, r8
 8006ff6:	1851      	adds	r1, r2, r1
 8006ff8:	6139      	str	r1, [r7, #16]
 8006ffa:	4649      	mov	r1, r9
 8006ffc:	414b      	adcs	r3, r1
 8006ffe:	617b      	str	r3, [r7, #20]
 8007000:	f04f 0200 	mov.w	r2, #0
 8007004:	f04f 0300 	mov.w	r3, #0
 8007008:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800700c:	4659      	mov	r1, fp
 800700e:	00cb      	lsls	r3, r1, #3
 8007010:	4651      	mov	r1, sl
 8007012:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007016:	4651      	mov	r1, sl
 8007018:	00ca      	lsls	r2, r1, #3
 800701a:	4610      	mov	r0, r2
 800701c:	4619      	mov	r1, r3
 800701e:	4603      	mov	r3, r0
 8007020:	4642      	mov	r2, r8
 8007022:	189b      	adds	r3, r3, r2
 8007024:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007028:	464b      	mov	r3, r9
 800702a:	460a      	mov	r2, r1
 800702c:	eb42 0303 	adc.w	r3, r2, r3
 8007030:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007034:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	2200      	movs	r2, #0
 800703c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007040:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8007044:	f04f 0200 	mov.w	r2, #0
 8007048:	f04f 0300 	mov.w	r3, #0
 800704c:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8007050:	4649      	mov	r1, r9
 8007052:	008b      	lsls	r3, r1, #2
 8007054:	4641      	mov	r1, r8
 8007056:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800705a:	4641      	mov	r1, r8
 800705c:	008a      	lsls	r2, r1, #2
 800705e:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8007062:	f7f9 fbfb 	bl	800085c <__aeabi_uldivmod>
 8007066:	4602      	mov	r2, r0
 8007068:	460b      	mov	r3, r1
 800706a:	4b3c      	ldr	r3, [pc, #240]	; (800715c <UART_SetConfig+0x998>)
 800706c:	fba3 1302 	umull	r1, r3, r3, r2
 8007070:	095b      	lsrs	r3, r3, #5
 8007072:	2164      	movs	r1, #100	; 0x64
 8007074:	fb01 f303 	mul.w	r3, r1, r3
 8007078:	1ad3      	subs	r3, r2, r3
 800707a:	011b      	lsls	r3, r3, #4
 800707c:	3332      	adds	r3, #50	; 0x32
 800707e:	4a37      	ldr	r2, [pc, #220]	; (800715c <UART_SetConfig+0x998>)
 8007080:	fba2 2303 	umull	r2, r3, r2, r3
 8007084:	095b      	lsrs	r3, r3, #5
 8007086:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800708a:	441c      	add	r4, r3
 800708c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007090:	2200      	movs	r2, #0
 8007092:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007096:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800709a:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 800709e:	4642      	mov	r2, r8
 80070a0:	464b      	mov	r3, r9
 80070a2:	1891      	adds	r1, r2, r2
 80070a4:	60b9      	str	r1, [r7, #8]
 80070a6:	415b      	adcs	r3, r3
 80070a8:	60fb      	str	r3, [r7, #12]
 80070aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80070ae:	4641      	mov	r1, r8
 80070b0:	1851      	adds	r1, r2, r1
 80070b2:	6039      	str	r1, [r7, #0]
 80070b4:	4649      	mov	r1, r9
 80070b6:	414b      	adcs	r3, r1
 80070b8:	607b      	str	r3, [r7, #4]
 80070ba:	f04f 0200 	mov.w	r2, #0
 80070be:	f04f 0300 	mov.w	r3, #0
 80070c2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80070c6:	4659      	mov	r1, fp
 80070c8:	00cb      	lsls	r3, r1, #3
 80070ca:	4651      	mov	r1, sl
 80070cc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80070d0:	4651      	mov	r1, sl
 80070d2:	00ca      	lsls	r2, r1, #3
 80070d4:	4610      	mov	r0, r2
 80070d6:	4619      	mov	r1, r3
 80070d8:	4603      	mov	r3, r0
 80070da:	4642      	mov	r2, r8
 80070dc:	189b      	adds	r3, r3, r2
 80070de:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80070e2:	464b      	mov	r3, r9
 80070e4:	460a      	mov	r2, r1
 80070e6:	eb42 0303 	adc.w	r3, r2, r3
 80070ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80070ee:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	2200      	movs	r2, #0
 80070f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80070fa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80070fe:	f04f 0200 	mov.w	r2, #0
 8007102:	f04f 0300 	mov.w	r3, #0
 8007106:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 800710a:	4649      	mov	r1, r9
 800710c:	008b      	lsls	r3, r1, #2
 800710e:	4641      	mov	r1, r8
 8007110:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007114:	4641      	mov	r1, r8
 8007116:	008a      	lsls	r2, r1, #2
 8007118:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800711c:	f7f9 fb9e 	bl	800085c <__aeabi_uldivmod>
 8007120:	4602      	mov	r2, r0
 8007122:	460b      	mov	r3, r1
 8007124:	4b0d      	ldr	r3, [pc, #52]	; (800715c <UART_SetConfig+0x998>)
 8007126:	fba3 1302 	umull	r1, r3, r3, r2
 800712a:	095b      	lsrs	r3, r3, #5
 800712c:	2164      	movs	r1, #100	; 0x64
 800712e:	fb01 f303 	mul.w	r3, r1, r3
 8007132:	1ad3      	subs	r3, r2, r3
 8007134:	011b      	lsls	r3, r3, #4
 8007136:	3332      	adds	r3, #50	; 0x32
 8007138:	4a08      	ldr	r2, [pc, #32]	; (800715c <UART_SetConfig+0x998>)
 800713a:	fba2 2303 	umull	r2, r3, r2, r3
 800713e:	095b      	lsrs	r3, r3, #5
 8007140:	f003 020f 	and.w	r2, r3, #15
 8007144:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4422      	add	r2, r4
 800714c:	609a      	str	r2, [r3, #8]
}
 800714e:	e7ff      	b.n	8007150 <UART_SetConfig+0x98c>
 8007150:	bf00      	nop
 8007152:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8007156:	46bd      	mov	sp, r7
 8007158:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800715c:	51eb851f 	.word	0x51eb851f

08007160 <__libc_init_array>:
 8007160:	b570      	push	{r4, r5, r6, lr}
 8007162:	4d0d      	ldr	r5, [pc, #52]	; (8007198 <__libc_init_array+0x38>)
 8007164:	4c0d      	ldr	r4, [pc, #52]	; (800719c <__libc_init_array+0x3c>)
 8007166:	1b64      	subs	r4, r4, r5
 8007168:	10a4      	asrs	r4, r4, #2
 800716a:	2600      	movs	r6, #0
 800716c:	42a6      	cmp	r6, r4
 800716e:	d109      	bne.n	8007184 <__libc_init_array+0x24>
 8007170:	4d0b      	ldr	r5, [pc, #44]	; (80071a0 <__libc_init_array+0x40>)
 8007172:	4c0c      	ldr	r4, [pc, #48]	; (80071a4 <__libc_init_array+0x44>)
 8007174:	f000 f99e 	bl	80074b4 <_init>
 8007178:	1b64      	subs	r4, r4, r5
 800717a:	10a4      	asrs	r4, r4, #2
 800717c:	2600      	movs	r6, #0
 800717e:	42a6      	cmp	r6, r4
 8007180:	d105      	bne.n	800718e <__libc_init_array+0x2e>
 8007182:	bd70      	pop	{r4, r5, r6, pc}
 8007184:	f855 3b04 	ldr.w	r3, [r5], #4
 8007188:	4798      	blx	r3
 800718a:	3601      	adds	r6, #1
 800718c:	e7ee      	b.n	800716c <__libc_init_array+0xc>
 800718e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007192:	4798      	blx	r3
 8007194:	3601      	adds	r6, #1
 8007196:	e7f2      	b.n	800717e <__libc_init_array+0x1e>
 8007198:	08007524 	.word	0x08007524
 800719c:	08007524 	.word	0x08007524
 80071a0:	08007524 	.word	0x08007524
 80071a4:	08007528 	.word	0x08007528

080071a8 <memset>:
 80071a8:	4402      	add	r2, r0
 80071aa:	4603      	mov	r3, r0
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d100      	bne.n	80071b2 <memset+0xa>
 80071b0:	4770      	bx	lr
 80071b2:	f803 1b01 	strb.w	r1, [r3], #1
 80071b6:	e7f9      	b.n	80071ac <memset+0x4>

080071b8 <atan2f>:
 80071b8:	f000 b800 	b.w	80071bc <__ieee754_atan2f>

080071bc <__ieee754_atan2f>:
 80071bc:	ee10 2a90 	vmov	r2, s1
 80071c0:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80071c4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80071c8:	b510      	push	{r4, lr}
 80071ca:	eef0 7a40 	vmov.f32	s15, s0
 80071ce:	dc06      	bgt.n	80071de <__ieee754_atan2f+0x22>
 80071d0:	ee10 0a10 	vmov	r0, s0
 80071d4:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80071d8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80071dc:	dd04      	ble.n	80071e8 <__ieee754_atan2f+0x2c>
 80071de:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80071e2:	eeb0 0a67 	vmov.f32	s0, s15
 80071e6:	bd10      	pop	{r4, pc}
 80071e8:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 80071ec:	d103      	bne.n	80071f6 <__ieee754_atan2f+0x3a>
 80071ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071f2:	f000 b883 	b.w	80072fc <atanf>
 80071f6:	1794      	asrs	r4, r2, #30
 80071f8:	f004 0402 	and.w	r4, r4, #2
 80071fc:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8007200:	b943      	cbnz	r3, 8007214 <__ieee754_atan2f+0x58>
 8007202:	2c02      	cmp	r4, #2
 8007204:	d05e      	beq.n	80072c4 <__ieee754_atan2f+0x108>
 8007206:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80072d8 <__ieee754_atan2f+0x11c>
 800720a:	2c03      	cmp	r4, #3
 800720c:	bf08      	it	eq
 800720e:	eef0 7a47 	vmoveq.f32	s15, s14
 8007212:	e7e6      	b.n	80071e2 <__ieee754_atan2f+0x26>
 8007214:	b941      	cbnz	r1, 8007228 <__ieee754_atan2f+0x6c>
 8007216:	eddf 7a31 	vldr	s15, [pc, #196]	; 80072dc <__ieee754_atan2f+0x120>
 800721a:	ed9f 0a31 	vldr	s0, [pc, #196]	; 80072e0 <__ieee754_atan2f+0x124>
 800721e:	2800      	cmp	r0, #0
 8007220:	bfb8      	it	lt
 8007222:	eef0 7a40 	vmovlt.f32	s15, s0
 8007226:	e7dc      	b.n	80071e2 <__ieee754_atan2f+0x26>
 8007228:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800722c:	d110      	bne.n	8007250 <__ieee754_atan2f+0x94>
 800722e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007232:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8007236:	d107      	bne.n	8007248 <__ieee754_atan2f+0x8c>
 8007238:	2c02      	cmp	r4, #2
 800723a:	d846      	bhi.n	80072ca <__ieee754_atan2f+0x10e>
 800723c:	4b29      	ldr	r3, [pc, #164]	; (80072e4 <__ieee754_atan2f+0x128>)
 800723e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007242:	edd4 7a00 	vldr	s15, [r4]
 8007246:	e7cc      	b.n	80071e2 <__ieee754_atan2f+0x26>
 8007248:	2c02      	cmp	r4, #2
 800724a:	d841      	bhi.n	80072d0 <__ieee754_atan2f+0x114>
 800724c:	4b26      	ldr	r3, [pc, #152]	; (80072e8 <__ieee754_atan2f+0x12c>)
 800724e:	e7f6      	b.n	800723e <__ieee754_atan2f+0x82>
 8007250:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007254:	d0df      	beq.n	8007216 <__ieee754_atan2f+0x5a>
 8007256:	1a5b      	subs	r3, r3, r1
 8007258:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800725c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8007260:	da1a      	bge.n	8007298 <__ieee754_atan2f+0xdc>
 8007262:	2a00      	cmp	r2, #0
 8007264:	da01      	bge.n	800726a <__ieee754_atan2f+0xae>
 8007266:	313c      	adds	r1, #60	; 0x3c
 8007268:	db19      	blt.n	800729e <__ieee754_atan2f+0xe2>
 800726a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800726e:	f000 f919 	bl	80074a4 <fabsf>
 8007272:	f000 f843 	bl	80072fc <atanf>
 8007276:	eef0 7a40 	vmov.f32	s15, s0
 800727a:	2c01      	cmp	r4, #1
 800727c:	d012      	beq.n	80072a4 <__ieee754_atan2f+0xe8>
 800727e:	2c02      	cmp	r4, #2
 8007280:	d017      	beq.n	80072b2 <__ieee754_atan2f+0xf6>
 8007282:	2c00      	cmp	r4, #0
 8007284:	d0ad      	beq.n	80071e2 <__ieee754_atan2f+0x26>
 8007286:	ed9f 0a19 	vldr	s0, [pc, #100]	; 80072ec <__ieee754_atan2f+0x130>
 800728a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800728e:	ed9f 0a18 	vldr	s0, [pc, #96]	; 80072f0 <__ieee754_atan2f+0x134>
 8007292:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8007296:	e7a4      	b.n	80071e2 <__ieee754_atan2f+0x26>
 8007298:	eddf 7a10 	vldr	s15, [pc, #64]	; 80072dc <__ieee754_atan2f+0x120>
 800729c:	e7ed      	b.n	800727a <__ieee754_atan2f+0xbe>
 800729e:	eddf 7a15 	vldr	s15, [pc, #84]	; 80072f4 <__ieee754_atan2f+0x138>
 80072a2:	e7ea      	b.n	800727a <__ieee754_atan2f+0xbe>
 80072a4:	ee17 3a90 	vmov	r3, s15
 80072a8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80072ac:	ee07 3a90 	vmov	s15, r3
 80072b0:	e797      	b.n	80071e2 <__ieee754_atan2f+0x26>
 80072b2:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80072ec <__ieee754_atan2f+0x130>
 80072b6:	ee77 7a80 	vadd.f32	s15, s15, s0
 80072ba:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 80072f0 <__ieee754_atan2f+0x134>
 80072be:	ee70 7a67 	vsub.f32	s15, s0, s15
 80072c2:	e78e      	b.n	80071e2 <__ieee754_atan2f+0x26>
 80072c4:	eddf 7a0a 	vldr	s15, [pc, #40]	; 80072f0 <__ieee754_atan2f+0x134>
 80072c8:	e78b      	b.n	80071e2 <__ieee754_atan2f+0x26>
 80072ca:	eddf 7a0b 	vldr	s15, [pc, #44]	; 80072f8 <__ieee754_atan2f+0x13c>
 80072ce:	e788      	b.n	80071e2 <__ieee754_atan2f+0x26>
 80072d0:	eddf 7a08 	vldr	s15, [pc, #32]	; 80072f4 <__ieee754_atan2f+0x138>
 80072d4:	e785      	b.n	80071e2 <__ieee754_atan2f+0x26>
 80072d6:	bf00      	nop
 80072d8:	c0490fdb 	.word	0xc0490fdb
 80072dc:	3fc90fdb 	.word	0x3fc90fdb
 80072e0:	bfc90fdb 	.word	0xbfc90fdb
 80072e4:	080074e4 	.word	0x080074e4
 80072e8:	080074f0 	.word	0x080074f0
 80072ec:	33bbbd2e 	.word	0x33bbbd2e
 80072f0:	40490fdb 	.word	0x40490fdb
 80072f4:	00000000 	.word	0x00000000
 80072f8:	3f490fdb 	.word	0x3f490fdb

080072fc <atanf>:
 80072fc:	b538      	push	{r3, r4, r5, lr}
 80072fe:	ee10 5a10 	vmov	r5, s0
 8007302:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8007306:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800730a:	eef0 7a40 	vmov.f32	s15, s0
 800730e:	db10      	blt.n	8007332 <atanf+0x36>
 8007310:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8007314:	dd04      	ble.n	8007320 <atanf+0x24>
 8007316:	ee70 7a00 	vadd.f32	s15, s0, s0
 800731a:	eeb0 0a67 	vmov.f32	s0, s15
 800731e:	bd38      	pop	{r3, r4, r5, pc}
 8007320:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8007458 <atanf+0x15c>
 8007324:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800745c <atanf+0x160>
 8007328:	2d00      	cmp	r5, #0
 800732a:	bfd8      	it	le
 800732c:	eef0 7a40 	vmovle.f32	s15, s0
 8007330:	e7f3      	b.n	800731a <atanf+0x1e>
 8007332:	4b4b      	ldr	r3, [pc, #300]	; (8007460 <atanf+0x164>)
 8007334:	429c      	cmp	r4, r3
 8007336:	dc10      	bgt.n	800735a <atanf+0x5e>
 8007338:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800733c:	da0a      	bge.n	8007354 <atanf+0x58>
 800733e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8007464 <atanf+0x168>
 8007342:	ee30 7a07 	vadd.f32	s14, s0, s14
 8007346:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800734a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800734e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007352:	dce2      	bgt.n	800731a <atanf+0x1e>
 8007354:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007358:	e013      	b.n	8007382 <atanf+0x86>
 800735a:	f000 f8a3 	bl	80074a4 <fabsf>
 800735e:	4b42      	ldr	r3, [pc, #264]	; (8007468 <atanf+0x16c>)
 8007360:	429c      	cmp	r4, r3
 8007362:	dc4f      	bgt.n	8007404 <atanf+0x108>
 8007364:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8007368:	429c      	cmp	r4, r3
 800736a:	dc41      	bgt.n	80073f0 <atanf+0xf4>
 800736c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8007370:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8007374:	eea0 7a27 	vfma.f32	s14, s0, s15
 8007378:	2300      	movs	r3, #0
 800737a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800737e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8007382:	1c5a      	adds	r2, r3, #1
 8007384:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8007388:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800746c <atanf+0x170>
 800738c:	eddf 5a38 	vldr	s11, [pc, #224]	; 8007470 <atanf+0x174>
 8007390:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8007474 <atanf+0x178>
 8007394:	ee66 6a06 	vmul.f32	s13, s12, s12
 8007398:	eee6 5a87 	vfma.f32	s11, s13, s14
 800739c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8007478 <atanf+0x17c>
 80073a0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80073a4:	eddf 5a35 	vldr	s11, [pc, #212]	; 800747c <atanf+0x180>
 80073a8:	eee7 5a26 	vfma.f32	s11, s14, s13
 80073ac:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8007480 <atanf+0x184>
 80073b0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80073b4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007484 <atanf+0x188>
 80073b8:	eee7 5a26 	vfma.f32	s11, s14, s13
 80073bc:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8007488 <atanf+0x18c>
 80073c0:	eea6 5a87 	vfma.f32	s10, s13, s14
 80073c4:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800748c <atanf+0x190>
 80073c8:	eea5 7a26 	vfma.f32	s14, s10, s13
 80073cc:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8007490 <atanf+0x194>
 80073d0:	eea7 5a26 	vfma.f32	s10, s14, s13
 80073d4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8007494 <atanf+0x198>
 80073d8:	eea5 7a26 	vfma.f32	s14, s10, s13
 80073dc:	ee27 7a26 	vmul.f32	s14, s14, s13
 80073e0:	eea5 7a86 	vfma.f32	s14, s11, s12
 80073e4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80073e8:	d121      	bne.n	800742e <atanf+0x132>
 80073ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80073ee:	e794      	b.n	800731a <atanf+0x1e>
 80073f0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80073f4:	ee30 7a67 	vsub.f32	s14, s0, s15
 80073f8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80073fc:	2301      	movs	r3, #1
 80073fe:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8007402:	e7be      	b.n	8007382 <atanf+0x86>
 8007404:	4b24      	ldr	r3, [pc, #144]	; (8007498 <atanf+0x19c>)
 8007406:	429c      	cmp	r4, r3
 8007408:	dc0b      	bgt.n	8007422 <atanf+0x126>
 800740a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800740e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007412:	eea0 7a27 	vfma.f32	s14, s0, s15
 8007416:	2302      	movs	r3, #2
 8007418:	ee70 6a67 	vsub.f32	s13, s0, s15
 800741c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007420:	e7af      	b.n	8007382 <atanf+0x86>
 8007422:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8007426:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800742a:	2303      	movs	r3, #3
 800742c:	e7a9      	b.n	8007382 <atanf+0x86>
 800742e:	4a1b      	ldr	r2, [pc, #108]	; (800749c <atanf+0x1a0>)
 8007430:	491b      	ldr	r1, [pc, #108]	; (80074a0 <atanf+0x1a4>)
 8007432:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8007436:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800743a:	ed93 0a00 	vldr	s0, [r3]
 800743e:	ee37 7a40 	vsub.f32	s14, s14, s0
 8007442:	ed92 0a00 	vldr	s0, [r2]
 8007446:	ee77 7a67 	vsub.f32	s15, s14, s15
 800744a:	2d00      	cmp	r5, #0
 800744c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8007450:	bfb8      	it	lt
 8007452:	eef1 7a67 	vneglt.f32	s15, s15
 8007456:	e760      	b.n	800731a <atanf+0x1e>
 8007458:	3fc90fdb 	.word	0x3fc90fdb
 800745c:	bfc90fdb 	.word	0xbfc90fdb
 8007460:	3edfffff 	.word	0x3edfffff
 8007464:	7149f2ca 	.word	0x7149f2ca
 8007468:	3f97ffff 	.word	0x3f97ffff
 800746c:	3c8569d7 	.word	0x3c8569d7
 8007470:	3d4bda59 	.word	0x3d4bda59
 8007474:	bd6ef16b 	.word	0xbd6ef16b
 8007478:	3d886b35 	.word	0x3d886b35
 800747c:	3dba2e6e 	.word	0x3dba2e6e
 8007480:	3e124925 	.word	0x3e124925
 8007484:	3eaaaaab 	.word	0x3eaaaaab
 8007488:	bd15a221 	.word	0xbd15a221
 800748c:	bd9d8795 	.word	0xbd9d8795
 8007490:	bde38e38 	.word	0xbde38e38
 8007494:	be4ccccd 	.word	0xbe4ccccd
 8007498:	401bffff 	.word	0x401bffff
 800749c:	080074fc 	.word	0x080074fc
 80074a0:	0800750c 	.word	0x0800750c

080074a4 <fabsf>:
 80074a4:	ee10 3a10 	vmov	r3, s0
 80074a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80074ac:	ee00 3a10 	vmov	s0, r3
 80074b0:	4770      	bx	lr
	...

080074b4 <_init>:
 80074b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074b6:	bf00      	nop
 80074b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074ba:	bc08      	pop	{r3}
 80074bc:	469e      	mov	lr, r3
 80074be:	4770      	bx	lr

080074c0 <_fini>:
 80074c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074c2:	bf00      	nop
 80074c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074c6:	bc08      	pop	{r3}
 80074c8:	469e      	mov	lr, r3
 80074ca:	4770      	bx	lr
