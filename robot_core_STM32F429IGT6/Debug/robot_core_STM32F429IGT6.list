
robot_core_STM32F429IGT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c90  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000430  08008e40  08008e40  00018e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009270  08009270  00020034  2**0
                  CONTENTS
  4 .ARM          00000008  08009270  08009270  00019270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009278  08009278  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009278  08009278  00019278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800927c  0800927c  0001927c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  08009280  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002fc  20000034  080092b4  00020034  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000330  080092b4  00020330  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013365  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b58  00000000  00000000  000333c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001158  00000000  00000000  00035f28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001008  00000000  00000000  00037080  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002659e  00000000  00000000  00038088  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f5db  00000000  00000000  0005e626  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dec5d  00000000  00000000  0006dc01  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000cb  00000000  00000000  0014c85e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ad8  00000000  00000000  0014c92c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000034 	.word	0x20000034
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008e28 	.word	0x08008e28

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000038 	.word	0x20000038
 80001ec:	08008e28 	.word	0x08008e28

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032e:	f1a4 0401 	sub.w	r4, r4, #1
 8000332:	d1e9      	bne.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__aeabi_d2f>:
 800098c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000990:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000994:	bf24      	itt	cs
 8000996:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800099a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800099e:	d90d      	bls.n	80009bc <__aeabi_d2f+0x30>
 80009a0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009a4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009a8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009ac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009b0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009b4:	bf08      	it	eq
 80009b6:	f020 0001 	biceq.w	r0, r0, #1
 80009ba:	4770      	bx	lr
 80009bc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009c0:	d121      	bne.n	8000a06 <__aeabi_d2f+0x7a>
 80009c2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009c6:	bfbc      	itt	lt
 80009c8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009cc:	4770      	bxlt	lr
 80009ce:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009d2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009d6:	f1c2 0218 	rsb	r2, r2, #24
 80009da:	f1c2 0c20 	rsb	ip, r2, #32
 80009de:	fa10 f30c 	lsls.w	r3, r0, ip
 80009e2:	fa20 f002 	lsr.w	r0, r0, r2
 80009e6:	bf18      	it	ne
 80009e8:	f040 0001 	orrne.w	r0, r0, #1
 80009ec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009f0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009f4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009f8:	ea40 000c 	orr.w	r0, r0, ip
 80009fc:	fa23 f302 	lsr.w	r3, r3, r2
 8000a00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a04:	e7cc      	b.n	80009a0 <__aeabi_d2f+0x14>
 8000a06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a0a:	d107      	bne.n	8000a1c <__aeabi_d2f+0x90>
 8000a0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a10:	bf1e      	ittt	ne
 8000a12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a1a:	4770      	bxne	lr
 8000a1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop

08000a2c <__aeabi_uldivmod>:
 8000a2c:	b953      	cbnz	r3, 8000a44 <__aeabi_uldivmod+0x18>
 8000a2e:	b94a      	cbnz	r2, 8000a44 <__aeabi_uldivmod+0x18>
 8000a30:	2900      	cmp	r1, #0
 8000a32:	bf08      	it	eq
 8000a34:	2800      	cmpeq	r0, #0
 8000a36:	bf1c      	itt	ne
 8000a38:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a3c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a40:	f000 b972 	b.w	8000d28 <__aeabi_idiv0>
 8000a44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a4c:	f000 f806 	bl	8000a5c <__udivmoddi4>
 8000a50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a58:	b004      	add	sp, #16
 8000a5a:	4770      	bx	lr

08000a5c <__udivmoddi4>:
 8000a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a60:	9e08      	ldr	r6, [sp, #32]
 8000a62:	4604      	mov	r4, r0
 8000a64:	4688      	mov	r8, r1
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d14b      	bne.n	8000b02 <__udivmoddi4+0xa6>
 8000a6a:	428a      	cmp	r2, r1
 8000a6c:	4615      	mov	r5, r2
 8000a6e:	d967      	bls.n	8000b40 <__udivmoddi4+0xe4>
 8000a70:	fab2 f282 	clz	r2, r2
 8000a74:	b14a      	cbz	r2, 8000a8a <__udivmoddi4+0x2e>
 8000a76:	f1c2 0720 	rsb	r7, r2, #32
 8000a7a:	fa01 f302 	lsl.w	r3, r1, r2
 8000a7e:	fa20 f707 	lsr.w	r7, r0, r7
 8000a82:	4095      	lsls	r5, r2
 8000a84:	ea47 0803 	orr.w	r8, r7, r3
 8000a88:	4094      	lsls	r4, r2
 8000a8a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a8e:	0c23      	lsrs	r3, r4, #16
 8000a90:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a94:	fa1f fc85 	uxth.w	ip, r5
 8000a98:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a9c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000aa0:	fb07 f10c 	mul.w	r1, r7, ip
 8000aa4:	4299      	cmp	r1, r3
 8000aa6:	d909      	bls.n	8000abc <__udivmoddi4+0x60>
 8000aa8:	18eb      	adds	r3, r5, r3
 8000aaa:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000aae:	f080 811b 	bcs.w	8000ce8 <__udivmoddi4+0x28c>
 8000ab2:	4299      	cmp	r1, r3
 8000ab4:	f240 8118 	bls.w	8000ce8 <__udivmoddi4+0x28c>
 8000ab8:	3f02      	subs	r7, #2
 8000aba:	442b      	add	r3, r5
 8000abc:	1a5b      	subs	r3, r3, r1
 8000abe:	b2a4      	uxth	r4, r4
 8000ac0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ac4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ac8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000acc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ad0:	45a4      	cmp	ip, r4
 8000ad2:	d909      	bls.n	8000ae8 <__udivmoddi4+0x8c>
 8000ad4:	192c      	adds	r4, r5, r4
 8000ad6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ada:	f080 8107 	bcs.w	8000cec <__udivmoddi4+0x290>
 8000ade:	45a4      	cmp	ip, r4
 8000ae0:	f240 8104 	bls.w	8000cec <__udivmoddi4+0x290>
 8000ae4:	3802      	subs	r0, #2
 8000ae6:	442c      	add	r4, r5
 8000ae8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000aec:	eba4 040c 	sub.w	r4, r4, ip
 8000af0:	2700      	movs	r7, #0
 8000af2:	b11e      	cbz	r6, 8000afc <__udivmoddi4+0xa0>
 8000af4:	40d4      	lsrs	r4, r2
 8000af6:	2300      	movs	r3, #0
 8000af8:	e9c6 4300 	strd	r4, r3, [r6]
 8000afc:	4639      	mov	r1, r7
 8000afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b02:	428b      	cmp	r3, r1
 8000b04:	d909      	bls.n	8000b1a <__udivmoddi4+0xbe>
 8000b06:	2e00      	cmp	r6, #0
 8000b08:	f000 80eb 	beq.w	8000ce2 <__udivmoddi4+0x286>
 8000b0c:	2700      	movs	r7, #0
 8000b0e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b12:	4638      	mov	r0, r7
 8000b14:	4639      	mov	r1, r7
 8000b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b1a:	fab3 f783 	clz	r7, r3
 8000b1e:	2f00      	cmp	r7, #0
 8000b20:	d147      	bne.n	8000bb2 <__udivmoddi4+0x156>
 8000b22:	428b      	cmp	r3, r1
 8000b24:	d302      	bcc.n	8000b2c <__udivmoddi4+0xd0>
 8000b26:	4282      	cmp	r2, r0
 8000b28:	f200 80fa 	bhi.w	8000d20 <__udivmoddi4+0x2c4>
 8000b2c:	1a84      	subs	r4, r0, r2
 8000b2e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b32:	2001      	movs	r0, #1
 8000b34:	4698      	mov	r8, r3
 8000b36:	2e00      	cmp	r6, #0
 8000b38:	d0e0      	beq.n	8000afc <__udivmoddi4+0xa0>
 8000b3a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b3e:	e7dd      	b.n	8000afc <__udivmoddi4+0xa0>
 8000b40:	b902      	cbnz	r2, 8000b44 <__udivmoddi4+0xe8>
 8000b42:	deff      	udf	#255	; 0xff
 8000b44:	fab2 f282 	clz	r2, r2
 8000b48:	2a00      	cmp	r2, #0
 8000b4a:	f040 808f 	bne.w	8000c6c <__udivmoddi4+0x210>
 8000b4e:	1b49      	subs	r1, r1, r5
 8000b50:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b54:	fa1f f885 	uxth.w	r8, r5
 8000b58:	2701      	movs	r7, #1
 8000b5a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b5e:	0c23      	lsrs	r3, r4, #16
 8000b60:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b68:	fb08 f10c 	mul.w	r1, r8, ip
 8000b6c:	4299      	cmp	r1, r3
 8000b6e:	d907      	bls.n	8000b80 <__udivmoddi4+0x124>
 8000b70:	18eb      	adds	r3, r5, r3
 8000b72:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000b76:	d202      	bcs.n	8000b7e <__udivmoddi4+0x122>
 8000b78:	4299      	cmp	r1, r3
 8000b7a:	f200 80cd 	bhi.w	8000d18 <__udivmoddi4+0x2bc>
 8000b7e:	4684      	mov	ip, r0
 8000b80:	1a59      	subs	r1, r3, r1
 8000b82:	b2a3      	uxth	r3, r4
 8000b84:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b88:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b8c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b90:	fb08 f800 	mul.w	r8, r8, r0
 8000b94:	45a0      	cmp	r8, r4
 8000b96:	d907      	bls.n	8000ba8 <__udivmoddi4+0x14c>
 8000b98:	192c      	adds	r4, r5, r4
 8000b9a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0x14a>
 8000ba0:	45a0      	cmp	r8, r4
 8000ba2:	f200 80b6 	bhi.w	8000d12 <__udivmoddi4+0x2b6>
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	eba4 0408 	sub.w	r4, r4, r8
 8000bac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bb0:	e79f      	b.n	8000af2 <__udivmoddi4+0x96>
 8000bb2:	f1c7 0c20 	rsb	ip, r7, #32
 8000bb6:	40bb      	lsls	r3, r7
 8000bb8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000bbc:	ea4e 0e03 	orr.w	lr, lr, r3
 8000bc0:	fa01 f407 	lsl.w	r4, r1, r7
 8000bc4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000bc8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000bcc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000bd0:	4325      	orrs	r5, r4
 8000bd2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000bd6:	0c2c      	lsrs	r4, r5, #16
 8000bd8:	fb08 3319 	mls	r3, r8, r9, r3
 8000bdc:	fa1f fa8e 	uxth.w	sl, lr
 8000be0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000be4:	fb09 f40a 	mul.w	r4, r9, sl
 8000be8:	429c      	cmp	r4, r3
 8000bea:	fa02 f207 	lsl.w	r2, r2, r7
 8000bee:	fa00 f107 	lsl.w	r1, r0, r7
 8000bf2:	d90b      	bls.n	8000c0c <__udivmoddi4+0x1b0>
 8000bf4:	eb1e 0303 	adds.w	r3, lr, r3
 8000bf8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000bfc:	f080 8087 	bcs.w	8000d0e <__udivmoddi4+0x2b2>
 8000c00:	429c      	cmp	r4, r3
 8000c02:	f240 8084 	bls.w	8000d0e <__udivmoddi4+0x2b2>
 8000c06:	f1a9 0902 	sub.w	r9, r9, #2
 8000c0a:	4473      	add	r3, lr
 8000c0c:	1b1b      	subs	r3, r3, r4
 8000c0e:	b2ad      	uxth	r5, r5
 8000c10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c14:	fb08 3310 	mls	r3, r8, r0, r3
 8000c18:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c1c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c20:	45a2      	cmp	sl, r4
 8000c22:	d908      	bls.n	8000c36 <__udivmoddi4+0x1da>
 8000c24:	eb1e 0404 	adds.w	r4, lr, r4
 8000c28:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c2c:	d26b      	bcs.n	8000d06 <__udivmoddi4+0x2aa>
 8000c2e:	45a2      	cmp	sl, r4
 8000c30:	d969      	bls.n	8000d06 <__udivmoddi4+0x2aa>
 8000c32:	3802      	subs	r0, #2
 8000c34:	4474      	add	r4, lr
 8000c36:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c3e:	eba4 040a 	sub.w	r4, r4, sl
 8000c42:	454c      	cmp	r4, r9
 8000c44:	46c2      	mov	sl, r8
 8000c46:	464b      	mov	r3, r9
 8000c48:	d354      	bcc.n	8000cf4 <__udivmoddi4+0x298>
 8000c4a:	d051      	beq.n	8000cf0 <__udivmoddi4+0x294>
 8000c4c:	2e00      	cmp	r6, #0
 8000c4e:	d069      	beq.n	8000d24 <__udivmoddi4+0x2c8>
 8000c50:	ebb1 050a 	subs.w	r5, r1, sl
 8000c54:	eb64 0403 	sbc.w	r4, r4, r3
 8000c58:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c5c:	40fd      	lsrs	r5, r7
 8000c5e:	40fc      	lsrs	r4, r7
 8000c60:	ea4c 0505 	orr.w	r5, ip, r5
 8000c64:	e9c6 5400 	strd	r5, r4, [r6]
 8000c68:	2700      	movs	r7, #0
 8000c6a:	e747      	b.n	8000afc <__udivmoddi4+0xa0>
 8000c6c:	f1c2 0320 	rsb	r3, r2, #32
 8000c70:	fa20 f703 	lsr.w	r7, r0, r3
 8000c74:	4095      	lsls	r5, r2
 8000c76:	fa01 f002 	lsl.w	r0, r1, r2
 8000c7a:	fa21 f303 	lsr.w	r3, r1, r3
 8000c7e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c82:	4338      	orrs	r0, r7
 8000c84:	0c01      	lsrs	r1, r0, #16
 8000c86:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c8a:	fa1f f885 	uxth.w	r8, r5
 8000c8e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c92:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c96:	fb07 f308 	mul.w	r3, r7, r8
 8000c9a:	428b      	cmp	r3, r1
 8000c9c:	fa04 f402 	lsl.w	r4, r4, r2
 8000ca0:	d907      	bls.n	8000cb2 <__udivmoddi4+0x256>
 8000ca2:	1869      	adds	r1, r5, r1
 8000ca4:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000ca8:	d22f      	bcs.n	8000d0a <__udivmoddi4+0x2ae>
 8000caa:	428b      	cmp	r3, r1
 8000cac:	d92d      	bls.n	8000d0a <__udivmoddi4+0x2ae>
 8000cae:	3f02      	subs	r7, #2
 8000cb0:	4429      	add	r1, r5
 8000cb2:	1acb      	subs	r3, r1, r3
 8000cb4:	b281      	uxth	r1, r0
 8000cb6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cba:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cbe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc2:	fb00 f308 	mul.w	r3, r0, r8
 8000cc6:	428b      	cmp	r3, r1
 8000cc8:	d907      	bls.n	8000cda <__udivmoddi4+0x27e>
 8000cca:	1869      	adds	r1, r5, r1
 8000ccc:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000cd0:	d217      	bcs.n	8000d02 <__udivmoddi4+0x2a6>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d915      	bls.n	8000d02 <__udivmoddi4+0x2a6>
 8000cd6:	3802      	subs	r0, #2
 8000cd8:	4429      	add	r1, r5
 8000cda:	1ac9      	subs	r1, r1, r3
 8000cdc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000ce0:	e73b      	b.n	8000b5a <__udivmoddi4+0xfe>
 8000ce2:	4637      	mov	r7, r6
 8000ce4:	4630      	mov	r0, r6
 8000ce6:	e709      	b.n	8000afc <__udivmoddi4+0xa0>
 8000ce8:	4607      	mov	r7, r0
 8000cea:	e6e7      	b.n	8000abc <__udivmoddi4+0x60>
 8000cec:	4618      	mov	r0, r3
 8000cee:	e6fb      	b.n	8000ae8 <__udivmoddi4+0x8c>
 8000cf0:	4541      	cmp	r1, r8
 8000cf2:	d2ab      	bcs.n	8000c4c <__udivmoddi4+0x1f0>
 8000cf4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000cf8:	eb69 020e 	sbc.w	r2, r9, lr
 8000cfc:	3801      	subs	r0, #1
 8000cfe:	4613      	mov	r3, r2
 8000d00:	e7a4      	b.n	8000c4c <__udivmoddi4+0x1f0>
 8000d02:	4660      	mov	r0, ip
 8000d04:	e7e9      	b.n	8000cda <__udivmoddi4+0x27e>
 8000d06:	4618      	mov	r0, r3
 8000d08:	e795      	b.n	8000c36 <__udivmoddi4+0x1da>
 8000d0a:	4667      	mov	r7, ip
 8000d0c:	e7d1      	b.n	8000cb2 <__udivmoddi4+0x256>
 8000d0e:	4681      	mov	r9, r0
 8000d10:	e77c      	b.n	8000c0c <__udivmoddi4+0x1b0>
 8000d12:	3802      	subs	r0, #2
 8000d14:	442c      	add	r4, r5
 8000d16:	e747      	b.n	8000ba8 <__udivmoddi4+0x14c>
 8000d18:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d1c:	442b      	add	r3, r5
 8000d1e:	e72f      	b.n	8000b80 <__udivmoddi4+0x124>
 8000d20:	4638      	mov	r0, r7
 8000d22:	e708      	b.n	8000b36 <__udivmoddi4+0xda>
 8000d24:	4637      	mov	r7, r6
 8000d26:	e6e9      	b.n	8000afc <__udivmoddi4+0xa0>

08000d28 <__aeabi_idiv0>:
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop

08000d2c <init_controlRxTx>:

////prototipos de funciones/////
void iniciaInstruccion(void);
void continuaInstruccion(void);

void init_controlRxTx (UART_HandleTypeDef* huart){
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
	uart_handler = huart;
 8000d34:	4a04      	ldr	r2, [pc, #16]	; (8000d48 <init_controlRxTx+0x1c>)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6013      	str	r3, [r2, #0]
} //end init_controlRxTx ()
 8000d3a:	bf00      	nop
 8000d3c:	370c      	adds	r7, #12
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	2000021c 	.word	0x2000021c

08000d4c <controlRxTxUART>:


void controlRxTxUART (uint8_t rx[]){
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]

	if (rx[7] != 0){
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	3307      	adds	r3, #7
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d017      	beq.n	8000d8e <controlRxTxUART+0x42>
		tx[0] = CMD_ERROR;
 8000d5e:	4b17      	ldr	r3, [pc, #92]	; (8000dbc <controlRxTxUART+0x70>)
 8000d60:	2204      	movs	r2, #4
 8000d62:	701a      	strb	r2, [r3, #0]
		tx[1] = 1;
 8000d64:	4b15      	ldr	r3, [pc, #84]	; (8000dbc <controlRxTxUART+0x70>)
 8000d66:	2201      	movs	r2, #1
 8000d68:	705a      	strb	r2, [r3, #1]
		tx[7] = '\0';
 8000d6a:	4b14      	ldr	r3, [pc, #80]	; (8000dbc <controlRxTxUART+0x70>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	71da      	strb	r2, [r3, #7]
		HAL_UART_Transmit_IT(uart_handler, tx, 8);
 8000d70:	4b13      	ldr	r3, [pc, #76]	; (8000dc0 <controlRxTxUART+0x74>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	2208      	movs	r2, #8
 8000d76:	4911      	ldr	r1, [pc, #68]	; (8000dbc <controlRxTxUART+0x70>)
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f006 facc 	bl	8007316 <HAL_UART_Transmit_IT>
		HAL_UART_Receive_IT(uart_handler, rx, 8);
 8000d7e:	4b10      	ldr	r3, [pc, #64]	; (8000dc0 <controlRxTxUART+0x74>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	2208      	movs	r2, #8
 8000d84:	6879      	ldr	r1, [r7, #4]
 8000d86:	4618      	mov	r0, r3
 8000d88:	f006 fb0a 	bl	80073a0 <HAL_UART_Receive_IT>
		return;
 8000d8c:	e013      	b.n	8000db6 <controlRxTxUART+0x6a>
	}

	p_rx = &rx[0];
 8000d8e:	4a0d      	ldr	r2, [pc, #52]	; (8000dc4 <controlRxTxUART+0x78>)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	6013      	str	r3, [r2, #0]

	if (cmdEsperado != NO_CMD){
 8000d94:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <controlRxTxUART+0x7c>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d002      	beq.n	8000da2 <controlRxTxUART+0x56>
		continuaInstruccion();
 8000d9c:	f000 faaa 	bl	80012f4 <continuaInstruccion>
 8000da0:	e001      	b.n	8000da6 <controlRxTxUART+0x5a>
	}else{
		iniciaInstruccion();
 8000da2:	f000 f813 	bl	8000dcc <iniciaInstruccion>
	}

	HAL_UART_Receive_IT(uart_handler, p_rx, 8);
 8000da6:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <controlRxTxUART+0x74>)
 8000da8:	6818      	ldr	r0, [r3, #0]
 8000daa:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <controlRxTxUART+0x78>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	2208      	movs	r2, #8
 8000db0:	4619      	mov	r1, r3
 8000db2:	f006 faf5 	bl	80073a0 <HAL_UART_Receive_IT>

} //end controlRxTxUART ()
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	20000214 	.word	0x20000214
 8000dc0:	2000021c 	.word	0x2000021c
 8000dc4:	20000210 	.word	0x20000210
 8000dc8:	20000050 	.word	0x20000050

08000dcc <iniciaInstruccion>:


void iniciaInstruccion (void){
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0

	switch (p_rx[0]){
 8000dd0:	4ba4      	ldr	r3, [pc, #656]	; (8001064 <iniciaInstruccion+0x298>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	3b01      	subs	r3, #1
 8000dd8:	2b17      	cmp	r3, #23
 8000dda:	f200 825b 	bhi.w	8001294 <iniciaInstruccion+0x4c8>
 8000dde:	a201      	add	r2, pc, #4	; (adr r2, 8000de4 <iniciaInstruccion+0x18>)
 8000de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000de4:	08000e45 	.word	0x08000e45
 8000de8:	0800128d 	.word	0x0800128d
 8000dec:	08001295 	.word	0x08001295
 8000df0:	08001295 	.word	0x08001295
 8000df4:	08000e6d 	.word	0x08000e6d
 8000df8:	08001295 	.word	0x08001295
 8000dfc:	08001295 	.word	0x08001295
 8000e00:	08001295 	.word	0x08001295
 8000e04:	08001295 	.word	0x08001295
 8000e08:	08000f43 	.word	0x08000f43
 8000e0c:	08000fb9 	.word	0x08000fb9
 8000e10:	0800109d 	.word	0x0800109d
 8000e14:	08001295 	.word	0x08001295
 8000e18:	080010dd 	.word	0x080010dd
 8000e1c:	08001105 	.word	0x08001105
 8000e20:	08001199 	.word	0x08001199
 8000e24:	080011e3 	.word	0x080011e3
 8000e28:	0800114f 	.word	0x0800114f
 8000e2c:	08001295 	.word	0x08001295
 8000e30:	08001295 	.word	0x08001295
 8000e34:	08001295 	.word	0x08001295
 8000e38:	0800122d 	.word	0x0800122d
 8000e3c:	08001295 	.word	0x08001295
 8000e40:	0800124f 	.word	0x0800124f
		case HOLA:
			esp01Presente = 1;
 8000e44:	4b88      	ldr	r3, [pc, #544]	; (8001068 <iniciaInstruccion+0x29c>)
 8000e46:	2201      	movs	r2, #1
 8000e48:	701a      	strb	r2, [r3, #0]
			cmdEsperado = NO_CMD;
 8000e4a:	4b88      	ldr	r3, [pc, #544]	; (800106c <iniciaInstruccion+0x2a0>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	701a      	strb	r2, [r3, #0]
			tx[0] = HOLA;
 8000e50:	4b87      	ldr	r3, [pc, #540]	; (8001070 <iniciaInstruccion+0x2a4>)
 8000e52:	2201      	movs	r2, #1
 8000e54:	701a      	strb	r2, [r3, #0]
			tx[7] = '\0';
 8000e56:	4b86      	ldr	r3, [pc, #536]	; (8001070 <iniciaInstruccion+0x2a4>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	71da      	strb	r2, [r3, #7]
			HAL_UART_Transmit_IT(uart_handler, tx, 8);
 8000e5c:	4b85      	ldr	r3, [pc, #532]	; (8001074 <iniciaInstruccion+0x2a8>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2208      	movs	r2, #8
 8000e62:	4983      	ldr	r1, [pc, #524]	; (8001070 <iniciaInstruccion+0x2a4>)
 8000e64:	4618      	mov	r0, r3
 8000e66:	f006 fa56 	bl	8007316 <HAL_UART_Transmit_IT>
		break;
 8000e6a:	e229      	b.n	80012c0 <iniciaInstruccion+0x4f4>

		case MODO:
			switch (p_rx[1]) {
 8000e6c:	4b7d      	ldr	r3, [pc, #500]	; (8001064 <iniciaInstruccion+0x298>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	3301      	adds	r3, #1
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	2b03      	cmp	r3, #3
 8000e76:	d852      	bhi.n	8000f1e <iniciaInstruccion+0x152>
 8000e78:	a201      	add	r2, pc, #4	; (adr r2, 8000e80 <iniciaInstruccion+0xb4>)
 8000e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e7e:	bf00      	nop
 8000e80:	08000e91 	.word	0x08000e91
 8000e84:	08000eb9 	.word	0x08000eb9
 8000e88:	08000edb 	.word	0x08000edb
 8000e8c:	08000efd 	.word	0x08000efd
				case AUTOMATICO:
					modoFuncionamiento = AUTOMATICO;
 8000e90:	4b79      	ldr	r3, [pc, #484]	; (8001078 <iniciaInstruccion+0x2ac>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	701a      	strb	r2, [r3, #0]
					flag_encoders = 0;
 8000e96:	4b79      	ldr	r3, [pc, #484]	; (800107c <iniciaInstruccion+0x2b0>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	701a      	strb	r2, [r3, #0]
					tx[0] = OK_;
 8000e9c:	4b74      	ldr	r3, [pc, #464]	; (8001070 <iniciaInstruccion+0x2a4>)
 8000e9e:	2202      	movs	r2, #2
 8000ea0:	701a      	strb	r2, [r3, #0]
					tx[7] = '\0';
 8000ea2:	4b73      	ldr	r3, [pc, #460]	; (8001070 <iniciaInstruccion+0x2a4>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	71da      	strb	r2, [r3, #7]
					HAL_UART_Transmit_IT(uart_handler, tx, 8);
 8000ea8:	4b72      	ldr	r3, [pc, #456]	; (8001074 <iniciaInstruccion+0x2a8>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	2208      	movs	r2, #8
 8000eae:	4970      	ldr	r1, [pc, #448]	; (8001070 <iniciaInstruccion+0x2a4>)
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f006 fa30 	bl	8007316 <HAL_UART_Transmit_IT>
					break;
 8000eb6:	e043      	b.n	8000f40 <iniciaInstruccion+0x174>
				case MANUAL:
//					status_movimiento = QUIETO;
					modoFuncionamiento = MANUAL;
 8000eb8:	4b6f      	ldr	r3, [pc, #444]	; (8001078 <iniciaInstruccion+0x2ac>)
 8000eba:	2201      	movs	r2, #1
 8000ebc:	701a      	strb	r2, [r3, #0]
					tx[0] = OK_;
 8000ebe:	4b6c      	ldr	r3, [pc, #432]	; (8001070 <iniciaInstruccion+0x2a4>)
 8000ec0:	2202      	movs	r2, #2
 8000ec2:	701a      	strb	r2, [r3, #0]
					tx[7] = '\0';
 8000ec4:	4b6a      	ldr	r3, [pc, #424]	; (8001070 <iniciaInstruccion+0x2a4>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	71da      	strb	r2, [r3, #7]
					HAL_UART_Transmit_IT(uart_handler, tx, 8);
 8000eca:	4b6a      	ldr	r3, [pc, #424]	; (8001074 <iniciaInstruccion+0x2a8>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	2208      	movs	r2, #8
 8000ed0:	4967      	ldr	r1, [pc, #412]	; (8001070 <iniciaInstruccion+0x2a4>)
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f006 fa1f 	bl	8007316 <HAL_UART_Transmit_IT>
					break;
 8000ed8:	e032      	b.n	8000f40 <iniciaInstruccion+0x174>
				case CALIBRA_MAG:
					modoFuncionamiento = CALIBRA_MAG;
 8000eda:	4b67      	ldr	r3, [pc, #412]	; (8001078 <iniciaInstruccion+0x2ac>)
 8000edc:	2202      	movs	r2, #2
 8000ede:	701a      	strb	r2, [r3, #0]
					tx[0] = OK_;
 8000ee0:	4b63      	ldr	r3, [pc, #396]	; (8001070 <iniciaInstruccion+0x2a4>)
 8000ee2:	2202      	movs	r2, #2
 8000ee4:	701a      	strb	r2, [r3, #0]
					tx[7] = '\0';
 8000ee6:	4b62      	ldr	r3, [pc, #392]	; (8001070 <iniciaInstruccion+0x2a4>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	71da      	strb	r2, [r3, #7]
					HAL_UART_Transmit_IT(uart_handler, tx, 8);
 8000eec:	4b61      	ldr	r3, [pc, #388]	; (8001074 <iniciaInstruccion+0x2a8>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2208      	movs	r2, #8
 8000ef2:	495f      	ldr	r1, [pc, #380]	; (8001070 <iniciaInstruccion+0x2a4>)
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f006 fa0e 	bl	8007316 <HAL_UART_Transmit_IT>
					break;
 8000efa:	e021      	b.n	8000f40 <iniciaInstruccion+0x174>
				case PUNTO_A_PUNTO:
					modoFuncionamiento = PUNTO_A_PUNTO;
 8000efc:	4b5e      	ldr	r3, [pc, #376]	; (8001078 <iniciaInstruccion+0x2ac>)
 8000efe:	2203      	movs	r2, #3
 8000f00:	701a      	strb	r2, [r3, #0]
					tx[0] = OK_;
 8000f02:	4b5b      	ldr	r3, [pc, #364]	; (8001070 <iniciaInstruccion+0x2a4>)
 8000f04:	2202      	movs	r2, #2
 8000f06:	701a      	strb	r2, [r3, #0]
					tx[7] = '\0';
 8000f08:	4b59      	ldr	r3, [pc, #356]	; (8001070 <iniciaInstruccion+0x2a4>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	71da      	strb	r2, [r3, #7]
					HAL_UART_Transmit_IT(uart_handler, tx, 8);
 8000f0e:	4b59      	ldr	r3, [pc, #356]	; (8001074 <iniciaInstruccion+0x2a8>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	2208      	movs	r2, #8
 8000f14:	4956      	ldr	r1, [pc, #344]	; (8001070 <iniciaInstruccion+0x2a4>)
 8000f16:	4618      	mov	r0, r3
 8000f18:	f006 f9fd 	bl	8007316 <HAL_UART_Transmit_IT>
					break;
 8000f1c:	e010      	b.n	8000f40 <iniciaInstruccion+0x174>
				default:
					tx[0] = CMD_ERROR;
 8000f1e:	4b54      	ldr	r3, [pc, #336]	; (8001070 <iniciaInstruccion+0x2a4>)
 8000f20:	2204      	movs	r2, #4
 8000f22:	701a      	strb	r2, [r3, #0]
					tx[1] = 2;
 8000f24:	4b52      	ldr	r3, [pc, #328]	; (8001070 <iniciaInstruccion+0x2a4>)
 8000f26:	2202      	movs	r2, #2
 8000f28:	705a      	strb	r2, [r3, #1]
					tx[7] = '\0';
 8000f2a:	4b51      	ldr	r3, [pc, #324]	; (8001070 <iniciaInstruccion+0x2a4>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	71da      	strb	r2, [r3, #7]
					HAL_UART_Transmit_IT(uart_handler, tx, 8);
 8000f30:	4b50      	ldr	r3, [pc, #320]	; (8001074 <iniciaInstruccion+0x2a8>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	2208      	movs	r2, #8
 8000f36:	494e      	ldr	r1, [pc, #312]	; (8001070 <iniciaInstruccion+0x2a4>)
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f006 f9ec 	bl	8007316 <HAL_UART_Transmit_IT>
			} //end switch p_rx[1]
		break;
 8000f3e:	e1bf      	b.n	80012c0 <iniciaInstruccion+0x4f4>
 8000f40:	e1be      	b.n	80012c0 <iniciaInstruccion+0x4f4>
		case POSICION:
			tx[0] = POSICION;
 8000f42:	4b4b      	ldr	r3, [pc, #300]	; (8001070 <iniciaInstruccion+0x2a4>)
 8000f44:	220a      	movs	r2, #10
 8000f46:	701a      	strb	r2, [r3, #0]
			tx[1] = posX_i16 >> 8;
 8000f48:	4b4d      	ldr	r3, [pc, #308]	; (8001080 <iniciaInstruccion+0x2b4>)
 8000f4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f4e:	121b      	asrs	r3, r3, #8
 8000f50:	b21b      	sxth	r3, r3
 8000f52:	b2da      	uxtb	r2, r3
 8000f54:	4b46      	ldr	r3, [pc, #280]	; (8001070 <iniciaInstruccion+0x2a4>)
 8000f56:	705a      	strb	r2, [r3, #1]
			tx[2] = posX_i16 & 0xFF;
 8000f58:	4b49      	ldr	r3, [pc, #292]	; (8001080 <iniciaInstruccion+0x2b4>)
 8000f5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f5e:	b2da      	uxtb	r2, r3
 8000f60:	4b43      	ldr	r3, [pc, #268]	; (8001070 <iniciaInstruccion+0x2a4>)
 8000f62:	709a      	strb	r2, [r3, #2]
			tx[3] = posY_i16 >> 8;
 8000f64:	4b47      	ldr	r3, [pc, #284]	; (8001084 <iniciaInstruccion+0x2b8>)
 8000f66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f6a:	121b      	asrs	r3, r3, #8
 8000f6c:	b21b      	sxth	r3, r3
 8000f6e:	b2da      	uxtb	r2, r3
 8000f70:	4b3f      	ldr	r3, [pc, #252]	; (8001070 <iniciaInstruccion+0x2a4>)
 8000f72:	70da      	strb	r2, [r3, #3]
			tx[4] = posY_i16 & 0xFF;
 8000f74:	4b43      	ldr	r3, [pc, #268]	; (8001084 <iniciaInstruccion+0x2b8>)
 8000f76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f7a:	b2da      	uxtb	r2, r3
 8000f7c:	4b3c      	ldr	r3, [pc, #240]	; (8001070 <iniciaInstruccion+0x2a4>)
 8000f7e:	711a      	strb	r2, [r3, #4]
			tx[5] = direccionMag_grad_i16 >>8;
 8000f80:	4b41      	ldr	r3, [pc, #260]	; (8001088 <iniciaInstruccion+0x2bc>)
 8000f82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f86:	121b      	asrs	r3, r3, #8
 8000f88:	b21b      	sxth	r3, r3
 8000f8a:	b2da      	uxtb	r2, r3
 8000f8c:	4b38      	ldr	r3, [pc, #224]	; (8001070 <iniciaInstruccion+0x2a4>)
 8000f8e:	715a      	strb	r2, [r3, #5]
			tx[6] = direccionMag_grad_i16 & 0xFF;
 8000f90:	4b3d      	ldr	r3, [pc, #244]	; (8001088 <iniciaInstruccion+0x2bc>)
 8000f92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f96:	b2da      	uxtb	r2, r3
 8000f98:	4b35      	ldr	r3, [pc, #212]	; (8001070 <iniciaInstruccion+0x2a4>)
 8000f9a:	719a      	strb	r2, [r3, #6]
			tx[7] = '\0';
 8000f9c:	4b34      	ldr	r3, [pc, #208]	; (8001070 <iniciaInstruccion+0x2a4>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	71da      	strb	r2, [r3, #7]
//			cmdEsperado = OK_;
			cmdEsperado = NO_CMD;
 8000fa2:	4b32      	ldr	r3, [pc, #200]	; (800106c <iniciaInstruccion+0x2a0>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(uart_handler, tx, 8);
 8000fa8:	4b32      	ldr	r3, [pc, #200]	; (8001074 <iniciaInstruccion+0x2a8>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2208      	movs	r2, #8
 8000fae:	4930      	ldr	r1, [pc, #192]	; (8001070 <iniciaInstruccion+0x2a4>)
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f006 f9b0 	bl	8007316 <HAL_UART_Transmit_IT>
		break;
 8000fb6:	e183      	b.n	80012c0 <iniciaInstruccion+0x4f4>
		case DESTINO:
			if (flag_dest != 0){
 8000fb8:	4b34      	ldr	r3, [pc, #208]	; (800108c <iniciaInstruccion+0x2c0>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d00d      	beq.n	8000fdc <iniciaInstruccion+0x210>
				tx[0] = CANCEL_;
 8000fc0:	4b2b      	ldr	r3, [pc, #172]	; (8001070 <iniciaInstruccion+0x2a4>)
 8000fc2:	2203      	movs	r2, #3
 8000fc4:	701a      	strb	r2, [r3, #0]
				tx[7] = '\0';
 8000fc6:	4b2a      	ldr	r3, [pc, #168]	; (8001070 <iniciaInstruccion+0x2a4>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	71da      	strb	r2, [r3, #7]
				HAL_UART_Transmit_IT(uart_handler, tx, 8);
 8000fcc:	4b29      	ldr	r3, [pc, #164]	; (8001074 <iniciaInstruccion+0x2a8>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2208      	movs	r2, #8
 8000fd2:	4927      	ldr	r1, [pc, #156]	; (8001070 <iniciaInstruccion+0x2a4>)
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f006 f99e 	bl	8007316 <HAL_UART_Transmit_IT>
				break;
 8000fda:	e171      	b.n	80012c0 <iniciaInstruccion+0x4f4>
			}

			posX_dest = (p_rx[2] + (p_rx[1] << 8));
 8000fdc:	4b21      	ldr	r3, [pc, #132]	; (8001064 <iniciaInstruccion+0x298>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	3302      	adds	r3, #2
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	b29a      	uxth	r2, r3
 8000fe6:	4b1f      	ldr	r3, [pc, #124]	; (8001064 <iniciaInstruccion+0x298>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	3301      	adds	r3, #1
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	b29b      	uxth	r3, r3
 8000ff0:	021b      	lsls	r3, r3, #8
 8000ff2:	b29b      	uxth	r3, r3
 8000ff4:	4413      	add	r3, r2
 8000ff6:	b29b      	uxth	r3, r3
 8000ff8:	b21a      	sxth	r2, r3
 8000ffa:	4b25      	ldr	r3, [pc, #148]	; (8001090 <iniciaInstruccion+0x2c4>)
 8000ffc:	801a      	strh	r2, [r3, #0]
			posY_dest = (p_rx[4] + (p_rx[3] << 8));
 8000ffe:	4b19      	ldr	r3, [pc, #100]	; (8001064 <iniciaInstruccion+0x298>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	3304      	adds	r3, #4
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	b29a      	uxth	r2, r3
 8001008:	4b16      	ldr	r3, [pc, #88]	; (8001064 <iniciaInstruccion+0x298>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	3303      	adds	r3, #3
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	b29b      	uxth	r3, r3
 8001012:	021b      	lsls	r3, r3, #8
 8001014:	b29b      	uxth	r3, r3
 8001016:	4413      	add	r3, r2
 8001018:	b29b      	uxth	r3, r3
 800101a:	b21a      	sxth	r2, r3
 800101c:	4b1d      	ldr	r3, [pc, #116]	; (8001094 <iniciaInstruccion+0x2c8>)
 800101e:	801a      	strh	r2, [r3, #0]
			direccion_dest = (p_rx[6] + (p_rx[5] << 8));
 8001020:	4b10      	ldr	r3, [pc, #64]	; (8001064 <iniciaInstruccion+0x298>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	3306      	adds	r3, #6
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	b29a      	uxth	r2, r3
 800102a:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <iniciaInstruccion+0x298>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	3305      	adds	r3, #5
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	b29b      	uxth	r3, r3
 8001034:	021b      	lsls	r3, r3, #8
 8001036:	b29b      	uxth	r3, r3
 8001038:	4413      	add	r3, r2
 800103a:	b29b      	uxth	r3, r3
 800103c:	b21a      	sxth	r2, r3
 800103e:	4b16      	ldr	r3, [pc, #88]	; (8001098 <iniciaInstruccion+0x2cc>)
 8001040:	801a      	strh	r2, [r3, #0]
			flag_dest = 1;
 8001042:	4b12      	ldr	r3, [pc, #72]	; (800108c <iniciaInstruccion+0x2c0>)
 8001044:	2201      	movs	r2, #1
 8001046:	701a      	strb	r2, [r3, #0]

			tx[0] = OK_;
 8001048:	4b09      	ldr	r3, [pc, #36]	; (8001070 <iniciaInstruccion+0x2a4>)
 800104a:	2202      	movs	r2, #2
 800104c:	701a      	strb	r2, [r3, #0]
			tx[7] = '\0';
 800104e:	4b08      	ldr	r3, [pc, #32]	; (8001070 <iniciaInstruccion+0x2a4>)
 8001050:	2200      	movs	r2, #0
 8001052:	71da      	strb	r2, [r3, #7]
			HAL_UART_Transmit_IT(uart_handler, tx, 8);
 8001054:	4b07      	ldr	r3, [pc, #28]	; (8001074 <iniciaInstruccion+0x2a8>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2208      	movs	r2, #8
 800105a:	4905      	ldr	r1, [pc, #20]	; (8001070 <iniciaInstruccion+0x2a4>)
 800105c:	4618      	mov	r0, r3
 800105e:	f006 f95a 	bl	8007316 <HAL_UART_Transmit_IT>
			break;
 8001062:	e12d      	b.n	80012c0 <iniciaInstruccion+0x4f4>
 8001064:	20000210 	.word	0x20000210
 8001068:	20000057 	.word	0x20000057
 800106c:	20000050 	.word	0x20000050
 8001070:	20000214 	.word	0x20000214
 8001074:	2000021c 	.word	0x2000021c
 8001078:	20000004 	.word	0x20000004
 800107c:	20000082 	.word	0x20000082
 8001080:	200002e4 	.word	0x200002e4
 8001084:	20000314 	.word	0x20000314
 8001088:	200002c0 	.word	0x200002c0
 800108c:	20000055 	.word	0x20000055
 8001090:	20000294 	.word	0x20000294
 8001094:	200002e0 	.word	0x200002e0
 8001098:	20000308 	.word	0x20000308
		break;
		case HOME:
			cmdActual = HOME;
 800109c:	4b89      	ldr	r3, [pc, #548]	; (80012c4 <iniciaInstruccion+0x4f8>)
 800109e:	220c      	movs	r2, #12
 80010a0:	701a      	strb	r2, [r3, #0]
			tx[0] = COORD_X;
 80010a2:	4b89      	ldr	r3, [pc, #548]	; (80012c8 <iniciaInstruccion+0x4fc>)
 80010a4:	2207      	movs	r2, #7
 80010a6:	701a      	strb	r2, [r3, #0]
			tx[1] = 0x0;
 80010a8:	4b87      	ldr	r3, [pc, #540]	; (80012c8 <iniciaInstruccion+0x4fc>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	705a      	strb	r2, [r3, #1]
			tx[2] = posX_i16 & 0xFF;
 80010ae:	4b87      	ldr	r3, [pc, #540]	; (80012cc <iniciaInstruccion+0x500>)
 80010b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010b4:	b2da      	uxtb	r2, r3
 80010b6:	4b84      	ldr	r3, [pc, #528]	; (80012c8 <iniciaInstruccion+0x4fc>)
 80010b8:	709a      	strb	r2, [r3, #2]
			tx[7] = '\0';
 80010ba:	4b83      	ldr	r3, [pc, #524]	; (80012c8 <iniciaInstruccion+0x4fc>)
 80010bc:	2200      	movs	r2, #0
 80010be:	71da      	strb	r2, [r3, #7]
			cmdEsperado = OK_;
 80010c0:	4b83      	ldr	r3, [pc, #524]	; (80012d0 <iniciaInstruccion+0x504>)
 80010c2:	2202      	movs	r2, #2
 80010c4:	701a      	strb	r2, [r3, #0]
			cmdSecuencia = 2;
 80010c6:	4b83      	ldr	r3, [pc, #524]	; (80012d4 <iniciaInstruccion+0x508>)
 80010c8:	2202      	movs	r2, #2
 80010ca:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(uart_handler, tx, 8);
 80010cc:	4b82      	ldr	r3, [pc, #520]	; (80012d8 <iniciaInstruccion+0x50c>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2208      	movs	r2, #8
 80010d2:	497d      	ldr	r1, [pc, #500]	; (80012c8 <iniciaInstruccion+0x4fc>)
 80010d4:	4618      	mov	r0, r3
 80010d6:	f006 f91e 	bl	8007316 <HAL_UART_Transmit_IT>
		break;
 80010da:	e0f1      	b.n	80012c0 <iniciaInstruccion+0x4f4>
		case SET_HOME:
			cmdActual = SET_HOME;
 80010dc:	4b79      	ldr	r3, [pc, #484]	; (80012c4 <iniciaInstruccion+0x4f8>)
 80010de:	220e      	movs	r2, #14
 80010e0:	701a      	strb	r2, [r3, #0]
			tx[0] = OK_;
 80010e2:	4b79      	ldr	r3, [pc, #484]	; (80012c8 <iniciaInstruccion+0x4fc>)
 80010e4:	2202      	movs	r2, #2
 80010e6:	701a      	strb	r2, [r3, #0]
			tx[7] = '\0';
 80010e8:	4b77      	ldr	r3, [pc, #476]	; (80012c8 <iniciaInstruccion+0x4fc>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	71da      	strb	r2, [r3, #7]
			cmdEsperado = COORD_X;
 80010ee:	4b78      	ldr	r3, [pc, #480]	; (80012d0 <iniciaInstruccion+0x504>)
 80010f0:	2207      	movs	r2, #7
 80010f2:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(uart_handler, tx, 8);
 80010f4:	4b78      	ldr	r3, [pc, #480]	; (80012d8 <iniciaInstruccion+0x50c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2208      	movs	r2, #8
 80010fa:	4973      	ldr	r1, [pc, #460]	; (80012c8 <iniciaInstruccion+0x4fc>)
 80010fc:	4618      	mov	r0, r3
 80010fe:	f006 f90a 	bl	8007316 <HAL_UART_Transmit_IT>
		break;
 8001102:	e0dd      	b.n	80012c0 <iniciaInstruccion+0x4f4>
		case AVANCE:
			avance_cant += (uint16_t) (p_rx[2] + (p_rx[1] << 8));
 8001104:	4b75      	ldr	r3, [pc, #468]	; (80012dc <iniciaInstruccion+0x510>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	3302      	adds	r3, #2
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	b29a      	uxth	r2, r3
 800110e:	4b73      	ldr	r3, [pc, #460]	; (80012dc <iniciaInstruccion+0x510>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	3301      	adds	r3, #1
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	b29b      	uxth	r3, r3
 8001118:	021b      	lsls	r3, r3, #8
 800111a:	b29b      	uxth	r3, r3
 800111c:	4413      	add	r3, r2
 800111e:	b29a      	uxth	r2, r3
 8001120:	4b6f      	ldr	r3, [pc, #444]	; (80012e0 <iniciaInstruccion+0x514>)
 8001122:	881b      	ldrh	r3, [r3, #0]
 8001124:	4413      	add	r3, r2
 8001126:	b29a      	uxth	r2, r3
 8001128:	4b6d      	ldr	r3, [pc, #436]	; (80012e0 <iniciaInstruccion+0x514>)
 800112a:	801a      	strh	r2, [r3, #0]
			cmdEsperado = NO_CMD;
 800112c:	4b68      	ldr	r3, [pc, #416]	; (80012d0 <iniciaInstruccion+0x504>)
 800112e:	2200      	movs	r2, #0
 8001130:	701a      	strb	r2, [r3, #0]
			tx[0] = OK_;
 8001132:	4b65      	ldr	r3, [pc, #404]	; (80012c8 <iniciaInstruccion+0x4fc>)
 8001134:	2202      	movs	r2, #2
 8001136:	701a      	strb	r2, [r3, #0]
			tx[7] = '\0';
 8001138:	4b63      	ldr	r3, [pc, #396]	; (80012c8 <iniciaInstruccion+0x4fc>)
 800113a:	2200      	movs	r2, #0
 800113c:	71da      	strb	r2, [r3, #7]
			HAL_UART_Transmit_IT(uart_handler, tx, 8);
 800113e:	4b66      	ldr	r3, [pc, #408]	; (80012d8 <iniciaInstruccion+0x50c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	2208      	movs	r2, #8
 8001144:	4960      	ldr	r1, [pc, #384]	; (80012c8 <iniciaInstruccion+0x4fc>)
 8001146:	4618      	mov	r0, r3
 8001148:	f006 f8e5 	bl	8007316 <HAL_UART_Transmit_IT>
		break;
 800114c:	e0b8      	b.n	80012c0 <iniciaInstruccion+0x4f4>
		case RETROCEDE:
			retroceso_cant += (uint16_t) (p_rx[2] + (p_rx[1] << 8));
 800114e:	4b63      	ldr	r3, [pc, #396]	; (80012dc <iniciaInstruccion+0x510>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	3302      	adds	r3, #2
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	b29a      	uxth	r2, r3
 8001158:	4b60      	ldr	r3, [pc, #384]	; (80012dc <iniciaInstruccion+0x510>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	3301      	adds	r3, #1
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	b29b      	uxth	r3, r3
 8001162:	021b      	lsls	r3, r3, #8
 8001164:	b29b      	uxth	r3, r3
 8001166:	4413      	add	r3, r2
 8001168:	b29a      	uxth	r2, r3
 800116a:	4b5e      	ldr	r3, [pc, #376]	; (80012e4 <iniciaInstruccion+0x518>)
 800116c:	881b      	ldrh	r3, [r3, #0]
 800116e:	4413      	add	r3, r2
 8001170:	b29a      	uxth	r2, r3
 8001172:	4b5c      	ldr	r3, [pc, #368]	; (80012e4 <iniciaInstruccion+0x518>)
 8001174:	801a      	strh	r2, [r3, #0]
			cmdEsperado = NO_CMD;
 8001176:	4b56      	ldr	r3, [pc, #344]	; (80012d0 <iniciaInstruccion+0x504>)
 8001178:	2200      	movs	r2, #0
 800117a:	701a      	strb	r2, [r3, #0]
			tx[0] = OK_;
 800117c:	4b52      	ldr	r3, [pc, #328]	; (80012c8 <iniciaInstruccion+0x4fc>)
 800117e:	2202      	movs	r2, #2
 8001180:	701a      	strb	r2, [r3, #0]
			tx[7] = '\0';
 8001182:	4b51      	ldr	r3, [pc, #324]	; (80012c8 <iniciaInstruccion+0x4fc>)
 8001184:	2200      	movs	r2, #0
 8001186:	71da      	strb	r2, [r3, #7]
			HAL_UART_Transmit_IT(uart_handler, tx, 8);
 8001188:	4b53      	ldr	r3, [pc, #332]	; (80012d8 <iniciaInstruccion+0x50c>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2208      	movs	r2, #8
 800118e:	494e      	ldr	r1, [pc, #312]	; (80012c8 <iniciaInstruccion+0x4fc>)
 8001190:	4618      	mov	r0, r3
 8001192:	f006 f8c0 	bl	8007316 <HAL_UART_Transmit_IT>
		break;
 8001196:	e093      	b.n	80012c0 <iniciaInstruccion+0x4f4>
		case GIRO_IZQ:
			giroIzq_cant += (uint16_t) (p_rx[2] + (p_rx[1] << 8));
 8001198:	4b50      	ldr	r3, [pc, #320]	; (80012dc <iniciaInstruccion+0x510>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	3302      	adds	r3, #2
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	b29a      	uxth	r2, r3
 80011a2:	4b4e      	ldr	r3, [pc, #312]	; (80012dc <iniciaInstruccion+0x510>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	3301      	adds	r3, #1
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	021b      	lsls	r3, r3, #8
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	4413      	add	r3, r2
 80011b2:	b29a      	uxth	r2, r3
 80011b4:	4b4c      	ldr	r3, [pc, #304]	; (80012e8 <iniciaInstruccion+0x51c>)
 80011b6:	881b      	ldrh	r3, [r3, #0]
 80011b8:	4413      	add	r3, r2
 80011ba:	b29a      	uxth	r2, r3
 80011bc:	4b4a      	ldr	r3, [pc, #296]	; (80012e8 <iniciaInstruccion+0x51c>)
 80011be:	801a      	strh	r2, [r3, #0]
			cmdEsperado = NO_CMD;
 80011c0:	4b43      	ldr	r3, [pc, #268]	; (80012d0 <iniciaInstruccion+0x504>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	701a      	strb	r2, [r3, #0]
			tx[0] = OK_;
 80011c6:	4b40      	ldr	r3, [pc, #256]	; (80012c8 <iniciaInstruccion+0x4fc>)
 80011c8:	2202      	movs	r2, #2
 80011ca:	701a      	strb	r2, [r3, #0]
			tx[7] = '\0';
 80011cc:	4b3e      	ldr	r3, [pc, #248]	; (80012c8 <iniciaInstruccion+0x4fc>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	71da      	strb	r2, [r3, #7]
			HAL_UART_Transmit_IT(uart_handler, tx, 8);
 80011d2:	4b41      	ldr	r3, [pc, #260]	; (80012d8 <iniciaInstruccion+0x50c>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	2208      	movs	r2, #8
 80011d8:	493b      	ldr	r1, [pc, #236]	; (80012c8 <iniciaInstruccion+0x4fc>)
 80011da:	4618      	mov	r0, r3
 80011dc:	f006 f89b 	bl	8007316 <HAL_UART_Transmit_IT>
		break;
 80011e0:	e06e      	b.n	80012c0 <iniciaInstruccion+0x4f4>
		case GIRO_DER:
			giroDer_cant += (uint16_t) (p_rx[2] + (p_rx[1] << 8));
 80011e2:	4b3e      	ldr	r3, [pc, #248]	; (80012dc <iniciaInstruccion+0x510>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	3302      	adds	r3, #2
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	b29a      	uxth	r2, r3
 80011ec:	4b3b      	ldr	r3, [pc, #236]	; (80012dc <iniciaInstruccion+0x510>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	3301      	adds	r3, #1
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	b29b      	uxth	r3, r3
 80011f6:	021b      	lsls	r3, r3, #8
 80011f8:	b29b      	uxth	r3, r3
 80011fa:	4413      	add	r3, r2
 80011fc:	b29a      	uxth	r2, r3
 80011fe:	4b3b      	ldr	r3, [pc, #236]	; (80012ec <iniciaInstruccion+0x520>)
 8001200:	881b      	ldrh	r3, [r3, #0]
 8001202:	4413      	add	r3, r2
 8001204:	b29a      	uxth	r2, r3
 8001206:	4b39      	ldr	r3, [pc, #228]	; (80012ec <iniciaInstruccion+0x520>)
 8001208:	801a      	strh	r2, [r3, #0]
			cmdEsperado = NO_CMD;
 800120a:	4b31      	ldr	r3, [pc, #196]	; (80012d0 <iniciaInstruccion+0x504>)
 800120c:	2200      	movs	r2, #0
 800120e:	701a      	strb	r2, [r3, #0]
			tx[0] = OK_;
 8001210:	4b2d      	ldr	r3, [pc, #180]	; (80012c8 <iniciaInstruccion+0x4fc>)
 8001212:	2202      	movs	r2, #2
 8001214:	701a      	strb	r2, [r3, #0]
			tx[7] = '\0';
 8001216:	4b2c      	ldr	r3, [pc, #176]	; (80012c8 <iniciaInstruccion+0x4fc>)
 8001218:	2200      	movs	r2, #0
 800121a:	71da      	strb	r2, [r3, #7]
			HAL_UART_Transmit_IT(uart_handler, tx, 8);
 800121c:	4b2e      	ldr	r3, [pc, #184]	; (80012d8 <iniciaInstruccion+0x50c>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2208      	movs	r2, #8
 8001222:	4929      	ldr	r1, [pc, #164]	; (80012c8 <iniciaInstruccion+0x4fc>)
 8001224:	4618      	mov	r0, r3
 8001226:	f006 f876 	bl	8007316 <HAL_UART_Transmit_IT>
		break;
 800122a:	e049      	b.n	80012c0 <iniciaInstruccion+0x4f4>
		case VEL_AVANCE:
			cmdEsperado = NO_CMD;
 800122c:	4b28      	ldr	r3, [pc, #160]	; (80012d0 <iniciaInstruccion+0x504>)
 800122e:	2200      	movs	r2, #0
 8001230:	701a      	strb	r2, [r3, #0]

//			mpu9265_Read_Accel(&mpu9265);

			tx[0] = VEL_AVANCE;
 8001232:	4b25      	ldr	r3, [pc, #148]	; (80012c8 <iniciaInstruccion+0x4fc>)
 8001234:	2216      	movs	r2, #22
 8001236:	701a      	strb	r2, [r3, #0]
//			tx[1] = (uint8_t)(mpu9265.Accel_X_RAW >> 8);
//			tx[2] = (uint8_t)(mpu9265.Accel_X_RAW & 0xFF);
			tx[7] = '\0';
 8001238:	4b23      	ldr	r3, [pc, #140]	; (80012c8 <iniciaInstruccion+0x4fc>)
 800123a:	2200      	movs	r2, #0
 800123c:	71da      	strb	r2, [r3, #7]
			HAL_UART_Transmit_IT(uart_handler, tx, 8);
 800123e:	4b26      	ldr	r3, [pc, #152]	; (80012d8 <iniciaInstruccion+0x50c>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	2208      	movs	r2, #8
 8001244:	4920      	ldr	r1, [pc, #128]	; (80012c8 <iniciaInstruccion+0x4fc>)
 8001246:	4618      	mov	r0, r3
 8001248:	f006 f865 	bl	8007316 <HAL_UART_Transmit_IT>
		break;
 800124c:	e038      	b.n	80012c0 <iniciaInstruccion+0x4f4>
		case DIST_GIRO:
			cmdEsperado = NO_CMD;
 800124e:	4b20      	ldr	r3, [pc, #128]	; (80012d0 <iniciaInstruccion+0x504>)
 8001250:	2200      	movs	r2, #0
 8001252:	701a      	strb	r2, [r3, #0]

			tx[0] = COORD_ANG;
 8001254:	4b1c      	ldr	r3, [pc, #112]	; (80012c8 <iniciaInstruccion+0x4fc>)
 8001256:	2209      	movs	r2, #9
 8001258:	701a      	strb	r2, [r3, #0]
			tx[1] = (uint8_t)(direccion_i16 >> 8);
 800125a:	4b25      	ldr	r3, [pc, #148]	; (80012f0 <iniciaInstruccion+0x524>)
 800125c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001260:	121b      	asrs	r3, r3, #8
 8001262:	b21b      	sxth	r3, r3
 8001264:	b2da      	uxtb	r2, r3
 8001266:	4b18      	ldr	r3, [pc, #96]	; (80012c8 <iniciaInstruccion+0x4fc>)
 8001268:	705a      	strb	r2, [r3, #1]
			tx[2] = (uint8_t)(direccion_i16 & 0xFF);
 800126a:	4b21      	ldr	r3, [pc, #132]	; (80012f0 <iniciaInstruccion+0x524>)
 800126c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001270:	b2da      	uxtb	r2, r3
 8001272:	4b15      	ldr	r3, [pc, #84]	; (80012c8 <iniciaInstruccion+0x4fc>)
 8001274:	709a      	strb	r2, [r3, #2]
			tx[7] = '\0';
 8001276:	4b14      	ldr	r3, [pc, #80]	; (80012c8 <iniciaInstruccion+0x4fc>)
 8001278:	2200      	movs	r2, #0
 800127a:	71da      	strb	r2, [r3, #7]
			HAL_UART_Transmit_IT(uart_handler, tx, 8);
 800127c:	4b16      	ldr	r3, [pc, #88]	; (80012d8 <iniciaInstruccion+0x50c>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2208      	movs	r2, #8
 8001282:	4911      	ldr	r1, [pc, #68]	; (80012c8 <iniciaInstruccion+0x4fc>)
 8001284:	4618      	mov	r0, r3
 8001286:	f006 f846 	bl	8007316 <HAL_UART_Transmit_IT>
		break;
 800128a:	e019      	b.n	80012c0 <iniciaInstruccion+0x4f4>
		case OK_:
			cmdEsperado = NO_CMD;
 800128c:	4b10      	ldr	r3, [pc, #64]	; (80012d0 <iniciaInstruccion+0x504>)
 800128e:	2200      	movs	r2, #0
 8001290:	701a      	strb	r2, [r3, #0]
		break;
 8001292:	e015      	b.n	80012c0 <iniciaInstruccion+0x4f4>
		default:
			tx[0] = CMD_ERROR;
 8001294:	4b0c      	ldr	r3, [pc, #48]	; (80012c8 <iniciaInstruccion+0x4fc>)
 8001296:	2204      	movs	r2, #4
 8001298:	701a      	strb	r2, [r3, #0]
			tx[1]= 3;
 800129a:	4b0b      	ldr	r3, [pc, #44]	; (80012c8 <iniciaInstruccion+0x4fc>)
 800129c:	2203      	movs	r2, #3
 800129e:	705a      	strb	r2, [r3, #1]
			tx[2]= p_rx[0];
 80012a0:	4b0e      	ldr	r3, [pc, #56]	; (80012dc <iniciaInstruccion+0x510>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	781a      	ldrb	r2, [r3, #0]
 80012a6:	4b08      	ldr	r3, [pc, #32]	; (80012c8 <iniciaInstruccion+0x4fc>)
 80012a8:	709a      	strb	r2, [r3, #2]
			tx[7] = '\0';
 80012aa:	4b07      	ldr	r3, [pc, #28]	; (80012c8 <iniciaInstruccion+0x4fc>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	71da      	strb	r2, [r3, #7]
			HAL_UART_Transmit_IT(uart_handler, tx, 8);
 80012b0:	4b09      	ldr	r3, [pc, #36]	; (80012d8 <iniciaInstruccion+0x50c>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2208      	movs	r2, #8
 80012b6:	4904      	ldr	r1, [pc, #16]	; (80012c8 <iniciaInstruccion+0x4fc>)
 80012b8:	4618      	mov	r0, r3
 80012ba:	f006 f82c 	bl	8007316 <HAL_UART_Transmit_IT>
		break;
 80012be:	bf00      	nop
	} //end switch (cmdEsperado)

} //end iniciaInstruccion ()
 80012c0:	bf00      	nop
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20000051 	.word	0x20000051
 80012c8:	20000214 	.word	0x20000214
 80012cc:	200002e4 	.word	0x200002e4
 80012d0:	20000050 	.word	0x20000050
 80012d4:	20000052 	.word	0x20000052
 80012d8:	2000021c 	.word	0x2000021c
 80012dc:	20000210 	.word	0x20000210
 80012e0:	2000005c 	.word	0x2000005c
 80012e4:	2000005e 	.word	0x2000005e
 80012e8:	20000060 	.word	0x20000060
 80012ec:	20000062 	.word	0x20000062
 80012f0:	2000028e 	.word	0x2000028e

080012f4 <continuaInstruccion>:


void continuaInstruccion(void){
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0

	if (cmdEsperado != p_rx[0]){
 80012f8:	4b8a      	ldr	r3, [pc, #552]	; (8001524 <continuaInstruccion+0x230>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	781a      	ldrb	r2, [r3, #0]
 80012fe:	4b8a      	ldr	r3, [pc, #552]	; (8001528 <continuaInstruccion+0x234>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	429a      	cmp	r2, r3
 8001304:	d019      	beq.n	800133a <continuaInstruccion+0x46>
		cmdActual = NO_CMD;
 8001306:	4b89      	ldr	r3, [pc, #548]	; (800152c <continuaInstruccion+0x238>)
 8001308:	2200      	movs	r2, #0
 800130a:	701a      	strb	r2, [r3, #0]
		cmdEsperado = NO_CMD;
 800130c:	4b86      	ldr	r3, [pc, #536]	; (8001528 <continuaInstruccion+0x234>)
 800130e:	2200      	movs	r2, #0
 8001310:	701a      	strb	r2, [r3, #0]
		cmdSecuencia = 0;
 8001312:	4b87      	ldr	r3, [pc, #540]	; (8001530 <continuaInstruccion+0x23c>)
 8001314:	2200      	movs	r2, #0
 8001316:	701a      	strb	r2, [r3, #0]
		tx[0] = CMD_ERROR;
 8001318:	4b86      	ldr	r3, [pc, #536]	; (8001534 <continuaInstruccion+0x240>)
 800131a:	2204      	movs	r2, #4
 800131c:	701a      	strb	r2, [r3, #0]
		tx[1] = 4;
 800131e:	4b85      	ldr	r3, [pc, #532]	; (8001534 <continuaInstruccion+0x240>)
 8001320:	2204      	movs	r2, #4
 8001322:	705a      	strb	r2, [r3, #1]
		tx[7] = '\0';
 8001324:	4b83      	ldr	r3, [pc, #524]	; (8001534 <continuaInstruccion+0x240>)
 8001326:	2200      	movs	r2, #0
 8001328:	71da      	strb	r2, [r3, #7]
		HAL_UART_Transmit_IT(uart_handler, tx, 8);
 800132a:	4b83      	ldr	r3, [pc, #524]	; (8001538 <continuaInstruccion+0x244>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	2208      	movs	r2, #8
 8001330:	4980      	ldr	r1, [pc, #512]	; (8001534 <continuaInstruccion+0x240>)
 8001332:	4618      	mov	r0, r3
 8001334:	f005 ffef 	bl	8007316 <HAL_UART_Transmit_IT>
		return;
 8001338:	e0f3      	b.n	8001522 <continuaInstruccion+0x22e>
	}

	switch (cmdActual) {
 800133a:	4b7c      	ldr	r3, [pc, #496]	; (800152c <continuaInstruccion+0x238>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	2b0c      	cmp	r3, #12
 8001340:	d05a      	beq.n	80013f8 <continuaInstruccion+0x104>
 8001342:	2b0e      	cmp	r3, #14
 8001344:	f000 80a1 	beq.w	800148a <continuaInstruccion+0x196>
 8001348:	2b0a      	cmp	r3, #10
 800134a:	d000      	beq.n	800134e <continuaInstruccion+0x5a>
				default:
				break;
			} //end switch cmdEsperado
		break;
		default:
		break;
 800134c:	e0e9      	b.n	8001522 <continuaInstruccion+0x22e>
			switch (cmdSecuencia){
 800134e:	4b78      	ldr	r3, [pc, #480]	; (8001530 <continuaInstruccion+0x23c>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	2b01      	cmp	r3, #1
 8001354:	d026      	beq.n	80013a4 <continuaInstruccion+0xb0>
 8001356:	2b02      	cmp	r3, #2
 8001358:	d002      	beq.n	8001360 <continuaInstruccion+0x6c>
 800135a:	2b00      	cmp	r3, #0
 800135c:	d044      	beq.n	80013e8 <continuaInstruccion+0xf4>
		break;
 800135e:	e0e0      	b.n	8001522 <continuaInstruccion+0x22e>
					tx[0] = COORD_Y;
 8001360:	4b74      	ldr	r3, [pc, #464]	; (8001534 <continuaInstruccion+0x240>)
 8001362:	2208      	movs	r2, #8
 8001364:	701a      	strb	r2, [r3, #0]
					tx[1] = posY_i16 >> 8;
 8001366:	4b75      	ldr	r3, [pc, #468]	; (800153c <continuaInstruccion+0x248>)
 8001368:	f9b3 3000 	ldrsh.w	r3, [r3]
 800136c:	121b      	asrs	r3, r3, #8
 800136e:	b21b      	sxth	r3, r3
 8001370:	b2da      	uxtb	r2, r3
 8001372:	4b70      	ldr	r3, [pc, #448]	; (8001534 <continuaInstruccion+0x240>)
 8001374:	705a      	strb	r2, [r3, #1]
					tx[2] = posY_i16 & 0xFF;
 8001376:	4b71      	ldr	r3, [pc, #452]	; (800153c <continuaInstruccion+0x248>)
 8001378:	f9b3 3000 	ldrsh.w	r3, [r3]
 800137c:	b2da      	uxtb	r2, r3
 800137e:	4b6d      	ldr	r3, [pc, #436]	; (8001534 <continuaInstruccion+0x240>)
 8001380:	709a      	strb	r2, [r3, #2]
					tx[7] = '\0';
 8001382:	4b6c      	ldr	r3, [pc, #432]	; (8001534 <continuaInstruccion+0x240>)
 8001384:	2200      	movs	r2, #0
 8001386:	71da      	strb	r2, [r3, #7]
					cmdSecuencia--;
 8001388:	4b69      	ldr	r3, [pc, #420]	; (8001530 <continuaInstruccion+0x23c>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	3b01      	subs	r3, #1
 800138e:	b2da      	uxtb	r2, r3
 8001390:	4b67      	ldr	r3, [pc, #412]	; (8001530 <continuaInstruccion+0x23c>)
 8001392:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_IT(uart_handler, tx, 8);
 8001394:	4b68      	ldr	r3, [pc, #416]	; (8001538 <continuaInstruccion+0x244>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2208      	movs	r2, #8
 800139a:	4966      	ldr	r1, [pc, #408]	; (8001534 <continuaInstruccion+0x240>)
 800139c:	4618      	mov	r0, r3
 800139e:	f005 ffba 	bl	8007316 <HAL_UART_Transmit_IT>
				break;
 80013a2:	e028      	b.n	80013f6 <continuaInstruccion+0x102>
					tx[0] = COORD_ANG;
 80013a4:	4b63      	ldr	r3, [pc, #396]	; (8001534 <continuaInstruccion+0x240>)
 80013a6:	2209      	movs	r2, #9
 80013a8:	701a      	strb	r2, [r3, #0]
					tx[1] = direccionMag_grad_i16 >>8;
 80013aa:	4b65      	ldr	r3, [pc, #404]	; (8001540 <continuaInstruccion+0x24c>)
 80013ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013b0:	121b      	asrs	r3, r3, #8
 80013b2:	b21b      	sxth	r3, r3
 80013b4:	b2da      	uxtb	r2, r3
 80013b6:	4b5f      	ldr	r3, [pc, #380]	; (8001534 <continuaInstruccion+0x240>)
 80013b8:	705a      	strb	r2, [r3, #1]
					tx[2] = direccionMag_grad_i16 & 0xFF;
 80013ba:	4b61      	ldr	r3, [pc, #388]	; (8001540 <continuaInstruccion+0x24c>)
 80013bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013c0:	b2da      	uxtb	r2, r3
 80013c2:	4b5c      	ldr	r3, [pc, #368]	; (8001534 <continuaInstruccion+0x240>)
 80013c4:	709a      	strb	r2, [r3, #2]
					tx[7] = '\0';
 80013c6:	4b5b      	ldr	r3, [pc, #364]	; (8001534 <continuaInstruccion+0x240>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	71da      	strb	r2, [r3, #7]
					cmdSecuencia--;
 80013cc:	4b58      	ldr	r3, [pc, #352]	; (8001530 <continuaInstruccion+0x23c>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	3b01      	subs	r3, #1
 80013d2:	b2da      	uxtb	r2, r3
 80013d4:	4b56      	ldr	r3, [pc, #344]	; (8001530 <continuaInstruccion+0x23c>)
 80013d6:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_IT(uart_handler, tx, 8);
 80013d8:	4b57      	ldr	r3, [pc, #348]	; (8001538 <continuaInstruccion+0x244>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2208      	movs	r2, #8
 80013de:	4955      	ldr	r1, [pc, #340]	; (8001534 <continuaInstruccion+0x240>)
 80013e0:	4618      	mov	r0, r3
 80013e2:	f005 ff98 	bl	8007316 <HAL_UART_Transmit_IT>
				break;
 80013e6:	e006      	b.n	80013f6 <continuaInstruccion+0x102>
					cmdActual = NO_CMD;
 80013e8:	4b50      	ldr	r3, [pc, #320]	; (800152c <continuaInstruccion+0x238>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	701a      	strb	r2, [r3, #0]
					cmdEsperado = NO_CMD;
 80013ee:	4b4e      	ldr	r3, [pc, #312]	; (8001528 <continuaInstruccion+0x234>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	701a      	strb	r2, [r3, #0]
				break;
 80013f4:	bf00      	nop
		break;
 80013f6:	e094      	b.n	8001522 <continuaInstruccion+0x22e>
			switch (cmdSecuencia){
 80013f8:	4b4d      	ldr	r3, [pc, #308]	; (8001530 <continuaInstruccion+0x23c>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d021      	beq.n	8001444 <continuaInstruccion+0x150>
 8001400:	2b02      	cmp	r3, #2
 8001402:	d002      	beq.n	800140a <continuaInstruccion+0x116>
 8001404:	2b00      	cmp	r3, #0
 8001406:	d038      	beq.n	800147a <continuaInstruccion+0x186>
		break;
 8001408:	e08b      	b.n	8001522 <continuaInstruccion+0x22e>
					tx[0] = COORD_Y;
 800140a:	4b4a      	ldr	r3, [pc, #296]	; (8001534 <continuaInstruccion+0x240>)
 800140c:	2208      	movs	r2, #8
 800140e:	701a      	strb	r2, [r3, #0]
					tx[1] = 0x0;
 8001410:	4b48      	ldr	r3, [pc, #288]	; (8001534 <continuaInstruccion+0x240>)
 8001412:	2200      	movs	r2, #0
 8001414:	705a      	strb	r2, [r3, #1]
					tx[2] = posY_i16 & 0xFF;
 8001416:	4b49      	ldr	r3, [pc, #292]	; (800153c <continuaInstruccion+0x248>)
 8001418:	f9b3 3000 	ldrsh.w	r3, [r3]
 800141c:	b2da      	uxtb	r2, r3
 800141e:	4b45      	ldr	r3, [pc, #276]	; (8001534 <continuaInstruccion+0x240>)
 8001420:	709a      	strb	r2, [r3, #2]
					tx[7] = '\0';
 8001422:	4b44      	ldr	r3, [pc, #272]	; (8001534 <continuaInstruccion+0x240>)
 8001424:	2200      	movs	r2, #0
 8001426:	71da      	strb	r2, [r3, #7]
					cmdSecuencia--;
 8001428:	4b41      	ldr	r3, [pc, #260]	; (8001530 <continuaInstruccion+0x23c>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	3b01      	subs	r3, #1
 800142e:	b2da      	uxtb	r2, r3
 8001430:	4b3f      	ldr	r3, [pc, #252]	; (8001530 <continuaInstruccion+0x23c>)
 8001432:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_IT(uart_handler, tx, 8);
 8001434:	4b40      	ldr	r3, [pc, #256]	; (8001538 <continuaInstruccion+0x244>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2208      	movs	r2, #8
 800143a:	493e      	ldr	r1, [pc, #248]	; (8001534 <continuaInstruccion+0x240>)
 800143c:	4618      	mov	r0, r3
 800143e:	f005 ff6a 	bl	8007316 <HAL_UART_Transmit_IT>
				break;
 8001442:	e021      	b.n	8001488 <continuaInstruccion+0x194>
					tx[0] = COORD_ANG;
 8001444:	4b3b      	ldr	r3, [pc, #236]	; (8001534 <continuaInstruccion+0x240>)
 8001446:	2209      	movs	r2, #9
 8001448:	701a      	strb	r2, [r3, #0]
					tx[1] = 0x0;
 800144a:	4b3a      	ldr	r3, [pc, #232]	; (8001534 <continuaInstruccion+0x240>)
 800144c:	2200      	movs	r2, #0
 800144e:	705a      	strb	r2, [r3, #1]
					tx[2] = pos_ang;
 8001450:	4b3c      	ldr	r3, [pc, #240]	; (8001544 <continuaInstruccion+0x250>)
 8001452:	781a      	ldrb	r2, [r3, #0]
 8001454:	4b37      	ldr	r3, [pc, #220]	; (8001534 <continuaInstruccion+0x240>)
 8001456:	709a      	strb	r2, [r3, #2]
					tx[7] = '\0';
 8001458:	4b36      	ldr	r3, [pc, #216]	; (8001534 <continuaInstruccion+0x240>)
 800145a:	2200      	movs	r2, #0
 800145c:	71da      	strb	r2, [r3, #7]
					cmdSecuencia--;
 800145e:	4b34      	ldr	r3, [pc, #208]	; (8001530 <continuaInstruccion+0x23c>)
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	3b01      	subs	r3, #1
 8001464:	b2da      	uxtb	r2, r3
 8001466:	4b32      	ldr	r3, [pc, #200]	; (8001530 <continuaInstruccion+0x23c>)
 8001468:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_IT(uart_handler, tx, 8);
 800146a:	4b33      	ldr	r3, [pc, #204]	; (8001538 <continuaInstruccion+0x244>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2208      	movs	r2, #8
 8001470:	4930      	ldr	r1, [pc, #192]	; (8001534 <continuaInstruccion+0x240>)
 8001472:	4618      	mov	r0, r3
 8001474:	f005 ff4f 	bl	8007316 <HAL_UART_Transmit_IT>
				break;
 8001478:	e006      	b.n	8001488 <continuaInstruccion+0x194>
					cmdActual = NO_CMD;
 800147a:	4b2c      	ldr	r3, [pc, #176]	; (800152c <continuaInstruccion+0x238>)
 800147c:	2200      	movs	r2, #0
 800147e:	701a      	strb	r2, [r3, #0]
					cmdEsperado = NO_CMD;
 8001480:	4b29      	ldr	r3, [pc, #164]	; (8001528 <continuaInstruccion+0x234>)
 8001482:	2200      	movs	r2, #0
 8001484:	701a      	strb	r2, [r3, #0]
				break;
 8001486:	bf00      	nop
		break;
 8001488:	e04b      	b.n	8001522 <continuaInstruccion+0x22e>
			switch (cmdEsperado){
 800148a:	4b27      	ldr	r3, [pc, #156]	; (8001528 <continuaInstruccion+0x234>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	2b08      	cmp	r3, #8
 8001490:	d01a      	beq.n	80014c8 <continuaInstruccion+0x1d4>
 8001492:	2b09      	cmp	r3, #9
 8001494:	d02e      	beq.n	80014f4 <continuaInstruccion+0x200>
 8001496:	2b07      	cmp	r3, #7
 8001498:	d000      	beq.n	800149c <continuaInstruccion+0x1a8>
				break;
 800149a:	e041      	b.n	8001520 <continuaInstruccion+0x22c>
					pos_x = p_rx[1];//recibi la coordenada X
 800149c:	4b21      	ldr	r3, [pc, #132]	; (8001524 <continuaInstruccion+0x230>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	785a      	ldrb	r2, [r3, #1]
 80014a2:	4b29      	ldr	r3, [pc, #164]	; (8001548 <continuaInstruccion+0x254>)
 80014a4:	701a      	strb	r2, [r3, #0]
					cmdEsperado = COORD_Y;
 80014a6:	4b20      	ldr	r3, [pc, #128]	; (8001528 <continuaInstruccion+0x234>)
 80014a8:	2208      	movs	r2, #8
 80014aa:	701a      	strb	r2, [r3, #0]
					tx[0] = OK_;
 80014ac:	4b21      	ldr	r3, [pc, #132]	; (8001534 <continuaInstruccion+0x240>)
 80014ae:	2202      	movs	r2, #2
 80014b0:	701a      	strb	r2, [r3, #0]
					tx[7] = '\0';
 80014b2:	4b20      	ldr	r3, [pc, #128]	; (8001534 <continuaInstruccion+0x240>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	71da      	strb	r2, [r3, #7]
					HAL_UART_Transmit_IT(uart_handler, tx, 8);
 80014b8:	4b1f      	ldr	r3, [pc, #124]	; (8001538 <continuaInstruccion+0x244>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2208      	movs	r2, #8
 80014be:	491d      	ldr	r1, [pc, #116]	; (8001534 <continuaInstruccion+0x240>)
 80014c0:	4618      	mov	r0, r3
 80014c2:	f005 ff28 	bl	8007316 <HAL_UART_Transmit_IT>
				break;
 80014c6:	e02b      	b.n	8001520 <continuaInstruccion+0x22c>
					pos_y = p_rx[1];//recibi la coordenada Y
 80014c8:	4b16      	ldr	r3, [pc, #88]	; (8001524 <continuaInstruccion+0x230>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	785a      	ldrb	r2, [r3, #1]
 80014ce:	4b1f      	ldr	r3, [pc, #124]	; (800154c <continuaInstruccion+0x258>)
 80014d0:	701a      	strb	r2, [r3, #0]
					cmdEsperado = COORD_ANG;
 80014d2:	4b15      	ldr	r3, [pc, #84]	; (8001528 <continuaInstruccion+0x234>)
 80014d4:	2209      	movs	r2, #9
 80014d6:	701a      	strb	r2, [r3, #0]
					tx[0] = OK_;
 80014d8:	4b16      	ldr	r3, [pc, #88]	; (8001534 <continuaInstruccion+0x240>)
 80014da:	2202      	movs	r2, #2
 80014dc:	701a      	strb	r2, [r3, #0]
					tx[7] = '\0';
 80014de:	4b15      	ldr	r3, [pc, #84]	; (8001534 <continuaInstruccion+0x240>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	71da      	strb	r2, [r3, #7]
					HAL_UART_Transmit_IT(uart_handler, tx, 8);
 80014e4:	4b14      	ldr	r3, [pc, #80]	; (8001538 <continuaInstruccion+0x244>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2208      	movs	r2, #8
 80014ea:	4912      	ldr	r1, [pc, #72]	; (8001534 <continuaInstruccion+0x240>)
 80014ec:	4618      	mov	r0, r3
 80014ee:	f005 ff12 	bl	8007316 <HAL_UART_Transmit_IT>
				break;
 80014f2:	e015      	b.n	8001520 <continuaInstruccion+0x22c>
					pos_ang = p_rx[1];//recibi el angulo
 80014f4:	4b0b      	ldr	r3, [pc, #44]	; (8001524 <continuaInstruccion+0x230>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	785a      	ldrb	r2, [r3, #1]
 80014fa:	4b12      	ldr	r3, [pc, #72]	; (8001544 <continuaInstruccion+0x250>)
 80014fc:	701a      	strb	r2, [r3, #0]
					cmdEsperado = NO_CMD;
 80014fe:	4b0a      	ldr	r3, [pc, #40]	; (8001528 <continuaInstruccion+0x234>)
 8001500:	2200      	movs	r2, #0
 8001502:	701a      	strb	r2, [r3, #0]
					tx[0] = OK_;
 8001504:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <continuaInstruccion+0x240>)
 8001506:	2202      	movs	r2, #2
 8001508:	701a      	strb	r2, [r3, #0]
					tx[7] = '\0';
 800150a:	4b0a      	ldr	r3, [pc, #40]	; (8001534 <continuaInstruccion+0x240>)
 800150c:	2200      	movs	r2, #0
 800150e:	71da      	strb	r2, [r3, #7]
					HAL_UART_Transmit_IT(uart_handler, tx, 8);
 8001510:	4b09      	ldr	r3, [pc, #36]	; (8001538 <continuaInstruccion+0x244>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2208      	movs	r2, #8
 8001516:	4907      	ldr	r1, [pc, #28]	; (8001534 <continuaInstruccion+0x240>)
 8001518:	4618      	mov	r0, r3
 800151a:	f005 fefc 	bl	8007316 <HAL_UART_Transmit_IT>
				break;
 800151e:	bf00      	nop
		break;
 8001520:	bf00      	nop
	} //end switch cmdActual


} //end continuaInstruccion()
 8001522:	bd80      	pop	{r7, pc}
 8001524:	20000210 	.word	0x20000210
 8001528:	20000050 	.word	0x20000050
 800152c:	20000051 	.word	0x20000051
 8001530:	20000052 	.word	0x20000052
 8001534:	20000214 	.word	0x20000214
 8001538:	2000021c 	.word	0x2000021c
 800153c:	20000314 	.word	0x20000314
 8001540:	200002c0 	.word	0x200002c0
 8001544:	20000318 	.word	0x20000318
 8001548:	200002d8 	.word	0x200002d8
 800154c:	200002d0 	.word	0x200002d0

08001550 <send_info>:


void send_info (uint8_t msg[]){
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
	if (cmdActual == NO_CMD){
 8001558:	4b16      	ldr	r3, [pc, #88]	; (80015b4 <send_info+0x64>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d124      	bne.n	80015aa <send_info+0x5a>
		tx[0] = INFOMSG;
 8001560:	4b15      	ldr	r3, [pc, #84]	; (80015b8 <send_info+0x68>)
 8001562:	2206      	movs	r2, #6
 8001564:	701a      	strb	r2, [r3, #0]
		tx[1] = msg[0];
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	781a      	ldrb	r2, [r3, #0]
 800156a:	4b13      	ldr	r3, [pc, #76]	; (80015b8 <send_info+0x68>)
 800156c:	705a      	strb	r2, [r3, #1]
		tx[2] = msg[1];
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	785a      	ldrb	r2, [r3, #1]
 8001572:	4b11      	ldr	r3, [pc, #68]	; (80015b8 <send_info+0x68>)
 8001574:	709a      	strb	r2, [r3, #2]
		tx[3] = msg[2];
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	789a      	ldrb	r2, [r3, #2]
 800157a:	4b0f      	ldr	r3, [pc, #60]	; (80015b8 <send_info+0x68>)
 800157c:	70da      	strb	r2, [r3, #3]
		tx[4] = msg[3];
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	78da      	ldrb	r2, [r3, #3]
 8001582:	4b0d      	ldr	r3, [pc, #52]	; (80015b8 <send_info+0x68>)
 8001584:	711a      	strb	r2, [r3, #4]
		tx[5] = msg[4];
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	791a      	ldrb	r2, [r3, #4]
 800158a:	4b0b      	ldr	r3, [pc, #44]	; (80015b8 <send_info+0x68>)
 800158c:	715a      	strb	r2, [r3, #5]
		tx[6] = msg[5];
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	795a      	ldrb	r2, [r3, #5]
 8001592:	4b09      	ldr	r3, [pc, #36]	; (80015b8 <send_info+0x68>)
 8001594:	719a      	strb	r2, [r3, #6]
		tx[7] = '\0';
 8001596:	4b08      	ldr	r3, [pc, #32]	; (80015b8 <send_info+0x68>)
 8001598:	2200      	movs	r2, #0
 800159a:	71da      	strb	r2, [r3, #7]
		HAL_UART_Transmit_IT(uart_handler, tx, 8);
 800159c:	4b07      	ldr	r3, [pc, #28]	; (80015bc <send_info+0x6c>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2208      	movs	r2, #8
 80015a2:	4905      	ldr	r1, [pc, #20]	; (80015b8 <send_info+0x68>)
 80015a4:	4618      	mov	r0, r3
 80015a6:	f005 feb6 	bl	8007316 <HAL_UART_Transmit_IT>
	}
}
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	20000051 	.word	0x20000051
 80015b8:	20000214 	.word	0x20000214
 80015bc:	2000021c 	.word	0x2000021c

080015c0 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 80015c6:	463b      	mov	r3, r7
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80015ce:	4b14      	ldr	r3, [pc, #80]	; (8001620 <MX_DAC_Init+0x60>)
 80015d0:	4a14      	ldr	r2, [pc, #80]	; (8001624 <MX_DAC_Init+0x64>)
 80015d2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80015d4:	4812      	ldr	r0, [pc, #72]	; (8001620 <MX_DAC_Init+0x60>)
 80015d6:	f002 fd76 	bl	80040c6 <HAL_DAC_Init>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80015e0:	f001 fd98 	bl	8003114 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80015e4:	2300      	movs	r3, #0
 80015e6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80015e8:	2300      	movs	r3, #0
 80015ea:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80015ec:	463b      	mov	r3, r7
 80015ee:	2200      	movs	r2, #0
 80015f0:	4619      	mov	r1, r3
 80015f2:	480b      	ldr	r0, [pc, #44]	; (8001620 <MX_DAC_Init+0x60>)
 80015f4:	f002 fd89 	bl	800410a <HAL_DAC_ConfigChannel>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80015fe:	f001 fd89 	bl	8003114 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001602:	463b      	mov	r3, r7
 8001604:	2210      	movs	r2, #16
 8001606:	4619      	mov	r1, r3
 8001608:	4805      	ldr	r0, [pc, #20]	; (8001620 <MX_DAC_Init+0x60>)
 800160a:	f002 fd7e 	bl	800410a <HAL_DAC_ConfigChannel>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8001614:	f001 fd7e 	bl	8003114 <Error_Handler>
  }

}
 8001618:	bf00      	nop
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	20000220 	.word	0x20000220
 8001624:	40007400 	.word	0x40007400

08001628 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b08a      	sub	sp, #40	; 0x28
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001630:	f107 0314 	add.w	r3, r7, #20
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	605a      	str	r2, [r3, #4]
 800163a:	609a      	str	r2, [r3, #8]
 800163c:	60da      	str	r2, [r3, #12]
 800163e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a17      	ldr	r2, [pc, #92]	; (80016a4 <HAL_DAC_MspInit+0x7c>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d127      	bne.n	800169a <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	613b      	str	r3, [r7, #16]
 800164e:	4b16      	ldr	r3, [pc, #88]	; (80016a8 <HAL_DAC_MspInit+0x80>)
 8001650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001652:	4a15      	ldr	r2, [pc, #84]	; (80016a8 <HAL_DAC_MspInit+0x80>)
 8001654:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001658:	6413      	str	r3, [r2, #64]	; 0x40
 800165a:	4b13      	ldr	r3, [pc, #76]	; (80016a8 <HAL_DAC_MspInit+0x80>)
 800165c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001662:	613b      	str	r3, [r7, #16]
 8001664:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	60fb      	str	r3, [r7, #12]
 800166a:	4b0f      	ldr	r3, [pc, #60]	; (80016a8 <HAL_DAC_MspInit+0x80>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	4a0e      	ldr	r2, [pc, #56]	; (80016a8 <HAL_DAC_MspInit+0x80>)
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	6313      	str	r3, [r2, #48]	; 0x30
 8001676:	4b0c      	ldr	r3, [pc, #48]	; (80016a8 <HAL_DAC_MspInit+0x80>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001682:	2330      	movs	r3, #48	; 0x30
 8001684:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001686:	2303      	movs	r3, #3
 8001688:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168a:	2300      	movs	r3, #0
 800168c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800168e:	f107 0314 	add.w	r3, r7, #20
 8001692:	4619      	mov	r1, r3
 8001694:	4805      	ldr	r0, [pc, #20]	; (80016ac <HAL_DAC_MspInit+0x84>)
 8001696:	f002 fda7 	bl	80041e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 800169a:	bf00      	nop
 800169c:	3728      	adds	r7, #40	; 0x28
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40007400 	.word	0x40007400
 80016a8:	40023800 	.word	0x40023800
 80016ac:	40020000 	.word	0x40020000

080016b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b08c      	sub	sp, #48	; 0x30
 80016b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b6:	f107 031c 	add.w	r3, r7, #28
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	605a      	str	r2, [r3, #4]
 80016c0:	609a      	str	r2, [r3, #8]
 80016c2:	60da      	str	r2, [r3, #12]
 80016c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	61bb      	str	r3, [r7, #24]
 80016ca:	4b45      	ldr	r3, [pc, #276]	; (80017e0 <MX_GPIO_Init+0x130>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	4a44      	ldr	r2, [pc, #272]	; (80017e0 <MX_GPIO_Init+0x130>)
 80016d0:	f043 0320 	orr.w	r3, r3, #32
 80016d4:	6313      	str	r3, [r2, #48]	; 0x30
 80016d6:	4b42      	ldr	r3, [pc, #264]	; (80017e0 <MX_GPIO_Init+0x130>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	f003 0320 	and.w	r3, r3, #32
 80016de:	61bb      	str	r3, [r7, #24]
 80016e0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	617b      	str	r3, [r7, #20]
 80016e6:	4b3e      	ldr	r3, [pc, #248]	; (80017e0 <MX_GPIO_Init+0x130>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	4a3d      	ldr	r2, [pc, #244]	; (80017e0 <MX_GPIO_Init+0x130>)
 80016ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016f0:	6313      	str	r3, [r2, #48]	; 0x30
 80016f2:	4b3b      	ldr	r3, [pc, #236]	; (80017e0 <MX_GPIO_Init+0x130>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016fa:	617b      	str	r3, [r7, #20]
 80016fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	613b      	str	r3, [r7, #16]
 8001702:	4b37      	ldr	r3, [pc, #220]	; (80017e0 <MX_GPIO_Init+0x130>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	4a36      	ldr	r2, [pc, #216]	; (80017e0 <MX_GPIO_Init+0x130>)
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	6313      	str	r3, [r2, #48]	; 0x30
 800170e:	4b34      	ldr	r3, [pc, #208]	; (80017e0 <MX_GPIO_Init+0x130>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	613b      	str	r3, [r7, #16]
 8001718:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	60fb      	str	r3, [r7, #12]
 800171e:	4b30      	ldr	r3, [pc, #192]	; (80017e0 <MX_GPIO_Init+0x130>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	4a2f      	ldr	r2, [pc, #188]	; (80017e0 <MX_GPIO_Init+0x130>)
 8001724:	f043 0308 	orr.w	r3, r3, #8
 8001728:	6313      	str	r3, [r2, #48]	; 0x30
 800172a:	4b2d      	ldr	r3, [pc, #180]	; (80017e0 <MX_GPIO_Init+0x130>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	f003 0308 	and.w	r3, r3, #8
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	60bb      	str	r3, [r7, #8]
 800173a:	4b29      	ldr	r3, [pc, #164]	; (80017e0 <MX_GPIO_Init+0x130>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	4a28      	ldr	r2, [pc, #160]	; (80017e0 <MX_GPIO_Init+0x130>)
 8001740:	f043 0304 	orr.w	r3, r3, #4
 8001744:	6313      	str	r3, [r2, #48]	; 0x30
 8001746:	4b26      	ldr	r3, [pc, #152]	; (80017e0 <MX_GPIO_Init+0x130>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	f003 0304 	and.w	r3, r3, #4
 800174e:	60bb      	str	r3, [r7, #8]
 8001750:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	607b      	str	r3, [r7, #4]
 8001756:	4b22      	ldr	r3, [pc, #136]	; (80017e0 <MX_GPIO_Init+0x130>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	4a21      	ldr	r2, [pc, #132]	; (80017e0 <MX_GPIO_Init+0x130>)
 800175c:	f043 0302 	orr.w	r3, r3, #2
 8001760:	6313      	str	r3, [r2, #48]	; 0x30
 8001762:	4b1f      	ldr	r3, [pc, #124]	; (80017e0 <MX_GPIO_Init+0x130>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	f003 0302 	and.w	r3, r3, #2
 800176a:	607b      	str	r3, [r7, #4]
 800176c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_in4_Pin|OUT_in3_Pin|OUT_in2_Pin, GPIO_PIN_RESET);
 800176e:	2200      	movs	r2, #0
 8001770:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8001774:	481b      	ldr	r0, [pc, #108]	; (80017e4 <MX_GPIO_Init+0x134>)
 8001776:	f002 fef9 	bl	800456c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, GPIO_PIN_RESET);
 800177a:	2200      	movs	r2, #0
 800177c:	2101      	movs	r1, #1
 800177e:	481a      	ldr	r0, [pc, #104]	; (80017e8 <MX_GPIO_Init+0x138>)
 8001780:	f002 fef4 	bl	800456c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = OUT_in4_Pin|OUT_in3_Pin|OUT_in2_Pin;
 8001784:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001788:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800178a:	2301      	movs	r3, #1
 800178c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178e:	2300      	movs	r3, #0
 8001790:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001792:	2300      	movs	r3, #0
 8001794:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001796:	f107 031c 	add.w	r3, r7, #28
 800179a:	4619      	mov	r1, r3
 800179c:	4811      	ldr	r0, [pc, #68]	; (80017e4 <MX_GPIO_Init+0x134>)
 800179e:	f002 fd23 	bl	80041e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OUT_in1_Pin;
 80017a2:	2301      	movs	r3, #1
 80017a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a6:	2301      	movs	r3, #1
 80017a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ae:	2300      	movs	r3, #0
 80017b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OUT_in1_GPIO_Port, &GPIO_InitStruct);
 80017b2:	f107 031c 	add.w	r3, r7, #28
 80017b6:	4619      	mov	r1, r3
 80017b8:	480b      	ldr	r0, [pc, #44]	; (80017e8 <MX_GPIO_Init+0x138>)
 80017ba:	f002 fd15 	bl	80041e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = IN_sensorL_Pin|IN_sensorR_Pin;
 80017be:	230a      	movs	r3, #10
 80017c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017c2:	2300      	movs	r3, #0
 80017c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017c6:	2301      	movs	r3, #1
 80017c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017ca:	f107 031c 	add.w	r3, r7, #28
 80017ce:	4619      	mov	r1, r3
 80017d0:	4805      	ldr	r0, [pc, #20]	; (80017e8 <MX_GPIO_Init+0x138>)
 80017d2:	f002 fd09 	bl	80041e8 <HAL_GPIO_Init>

}
 80017d6:	bf00      	nop
 80017d8:	3730      	adds	r7, #48	; 0x30
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40023800 	.word	0x40023800
 80017e4:	40020800 	.word	0x40020800
 80017e8:	40020c00 	.word	0x40020c00

080017ec <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80017f0:	4b1b      	ldr	r3, [pc, #108]	; (8001860 <MX_I2C1_Init+0x74>)
 80017f2:	4a1c      	ldr	r2, [pc, #112]	; (8001864 <MX_I2C1_Init+0x78>)
 80017f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80017f6:	4b1a      	ldr	r3, [pc, #104]	; (8001860 <MX_I2C1_Init+0x74>)
 80017f8:	4a1b      	ldr	r2, [pc, #108]	; (8001868 <MX_I2C1_Init+0x7c>)
 80017fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017fc:	4b18      	ldr	r3, [pc, #96]	; (8001860 <MX_I2C1_Init+0x74>)
 80017fe:	2200      	movs	r2, #0
 8001800:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001802:	4b17      	ldr	r3, [pc, #92]	; (8001860 <MX_I2C1_Init+0x74>)
 8001804:	2200      	movs	r2, #0
 8001806:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001808:	4b15      	ldr	r3, [pc, #84]	; (8001860 <MX_I2C1_Init+0x74>)
 800180a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800180e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001810:	4b13      	ldr	r3, [pc, #76]	; (8001860 <MX_I2C1_Init+0x74>)
 8001812:	2200      	movs	r2, #0
 8001814:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001816:	4b12      	ldr	r3, [pc, #72]	; (8001860 <MX_I2C1_Init+0x74>)
 8001818:	2200      	movs	r2, #0
 800181a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800181c:	4b10      	ldr	r3, [pc, #64]	; (8001860 <MX_I2C1_Init+0x74>)
 800181e:	2200      	movs	r2, #0
 8001820:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001822:	4b0f      	ldr	r3, [pc, #60]	; (8001860 <MX_I2C1_Init+0x74>)
 8001824:	2200      	movs	r2, #0
 8001826:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001828:	480d      	ldr	r0, [pc, #52]	; (8001860 <MX_I2C1_Init+0x74>)
 800182a:	f002 feb9 	bl	80045a0 <HAL_I2C_Init>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001834:	f001 fc6e 	bl	8003114 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001838:	2100      	movs	r1, #0
 800183a:	4809      	ldr	r0, [pc, #36]	; (8001860 <MX_I2C1_Init+0x74>)
 800183c:	f003 fe63 	bl	8005506 <HAL_I2CEx_ConfigAnalogFilter>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001846:	f001 fc65 	bl	8003114 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800184a:	2100      	movs	r1, #0
 800184c:	4804      	ldr	r0, [pc, #16]	; (8001860 <MX_I2C1_Init+0x74>)
 800184e:	f003 fe96 	bl	800557e <HAL_I2CEx_ConfigDigitalFilter>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001858:	f001 fc5c 	bl	8003114 <Error_Handler>
  }

}
 800185c:	bf00      	nop
 800185e:	bd80      	pop	{r7, pc}
 8001860:	20000234 	.word	0x20000234
 8001864:	40005400 	.word	0x40005400
 8001868:	00061a80 	.word	0x00061a80

0800186c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b08a      	sub	sp, #40	; 0x28
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001874:	f107 0314 	add.w	r3, r7, #20
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	605a      	str	r2, [r3, #4]
 800187e:	609a      	str	r2, [r3, #8]
 8001880:	60da      	str	r2, [r3, #12]
 8001882:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a19      	ldr	r2, [pc, #100]	; (80018f0 <HAL_I2C_MspInit+0x84>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d12b      	bne.n	80018e6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	613b      	str	r3, [r7, #16]
 8001892:	4b18      	ldr	r3, [pc, #96]	; (80018f4 <HAL_I2C_MspInit+0x88>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	4a17      	ldr	r2, [pc, #92]	; (80018f4 <HAL_I2C_MspInit+0x88>)
 8001898:	f043 0302 	orr.w	r3, r3, #2
 800189c:	6313      	str	r3, [r2, #48]	; 0x30
 800189e:	4b15      	ldr	r3, [pc, #84]	; (80018f4 <HAL_I2C_MspInit+0x88>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	f003 0302 	and.w	r3, r3, #2
 80018a6:	613b      	str	r3, [r7, #16]
 80018a8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018aa:	23c0      	movs	r3, #192	; 0xc0
 80018ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018ae:	2312      	movs	r3, #18
 80018b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018b2:	2301      	movs	r3, #1
 80018b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b6:	2303      	movs	r3, #3
 80018b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018ba:	2304      	movs	r3, #4
 80018bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018be:	f107 0314 	add.w	r3, r7, #20
 80018c2:	4619      	mov	r1, r3
 80018c4:	480c      	ldr	r0, [pc, #48]	; (80018f8 <HAL_I2C_MspInit+0x8c>)
 80018c6:	f002 fc8f 	bl	80041e8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	60fb      	str	r3, [r7, #12]
 80018ce:	4b09      	ldr	r3, [pc, #36]	; (80018f4 <HAL_I2C_MspInit+0x88>)
 80018d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d2:	4a08      	ldr	r2, [pc, #32]	; (80018f4 <HAL_I2C_MspInit+0x88>)
 80018d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018d8:	6413      	str	r3, [r2, #64]	; 0x40
 80018da:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <HAL_I2C_MspInit+0x88>)
 80018dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80018e6:	bf00      	nop
 80018e8:	3728      	adds	r7, #40	; 0x28
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	40005400 	.word	0x40005400
 80018f4:	40023800 	.word	0x40023800
 80018f8:	40020400 	.word	0x40020400

080018fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001900:	f002 fa3c 	bl	8003d7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001904:	f000 f8e6 	bl	8001ad4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001908:	f7ff fed2 	bl	80016b0 <MX_GPIO_Init>
  MX_DAC_Init();
 800190c:	f7ff fe58 	bl	80015c0 <MX_DAC_Init>
  MX_TIM2_Init();
 8001910:	f001 fe36 	bl	8003580 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001914:	f001 fe86 	bl	8003624 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001918:	f001 fed8 	bl	80036cc <MX_TIM4_Init>
  MX_TIM5_Init();
 800191c:	f001 ff56 	bl	80037cc <MX_TIM5_Init>
  MX_UART7_Init();
 8001920:	f002 f988 	bl	8003c34 <MX_UART7_Init>
  MX_TIM7_Init();
 8001924:	f001 fffc 	bl	8003920 <MX_TIM7_Init>
  MX_I2C1_Init();
 8001928:	f7ff ff60 	bl	80017ec <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim7); //desborda cada 10 ms.
 800192c:	4855      	ldr	r0, [pc, #340]	; (8001a84 <main+0x188>)
 800192e:	f004 fb66 	bl	8005ffe <HAL_TIM_Base_Start_IT>

  HAL_TIM_Base_Start(&htim2); //encoder R.
 8001932:	4855      	ldr	r0, [pc, #340]	; (8001a88 <main+0x18c>)
 8001934:	f004 fb3f 	bl	8005fb6 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3); //encoder L.
 8001938:	4854      	ldr	r0, [pc, #336]	; (8001a8c <main+0x190>)
 800193a:	f004 fb3c 	bl	8005fb6 <HAL_TIM_Base_Start>

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1); //rueda izquierda.
 800193e:	2100      	movs	r1, #0
 8001940:	4853      	ldr	r0, [pc, #332]	; (8001a90 <main+0x194>)
 8001942:	f004 fbb5 	bl	80060b0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2); //rueda derecha.
 8001946:	2104      	movs	r1, #4
 8001948:	4851      	ldr	r0, [pc, #324]	; (8001a90 <main+0x194>)
 800194a:	f004 fbb1 	bl	80060b0 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start(&htim5); //control del SR-04.
 800194e:	4851      	ldr	r0, [pc, #324]	; (8001a94 <main+0x198>)
 8001950:	f004 fb31 	bl	8005fb6 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1); //para el pulso del trigger.
 8001954:	2100      	movs	r1, #0
 8001956:	484f      	ldr	r0, [pc, #316]	; (8001a94 <main+0x198>)
 8001958:	f004 fbaa 	bl	80060b0 <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_3); //para capturar el eco (flanco ascendente).
 800195c:	2108      	movs	r1, #8
 800195e:	484d      	ldr	r0, [pc, #308]	; (8001a94 <main+0x198>)
 8001960:	f004 fc1a 	bl	8006198 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_4); //para capturar el eco (flanco descendente).
 8001964:	210c      	movs	r1, #12
 8001966:	484b      	ldr	r0, [pc, #300]	; (8001a94 <main+0x198>)
 8001968:	f004 fc16 	bl	8006198 <HAL_TIM_IC_Start_IT>

  mpu9265_Init(&hi2c1);
 800196c:	484a      	ldr	r0, [pc, #296]	; (8001a98 <main+0x19c>)
 800196e:	f001 fbd9 	bl	8003124 <mpu9265_Init>

  init_controlRxTx (&huart7);
 8001972:	484a      	ldr	r0, [pc, #296]	; (8001a9c <main+0x1a0>)
 8001974:	f7ff f9da 	bl	8000d2c <init_controlRxTx>

  HAL_UART_Receive_IT(&huart7, rxUart, 8);
 8001978:	2208      	movs	r2, #8
 800197a:	4949      	ldr	r1, [pc, #292]	; (8001aa0 <main+0x1a4>)
 800197c:	4847      	ldr	r0, [pc, #284]	; (8001a9c <main+0x1a0>)
 800197e:	f005 fd0f 	bl	80073a0 <HAL_UART_Receive_IT>

  if (!esp01Presente) {
 8001982:	4b48      	ldr	r3, [pc, #288]	; (8001aa4 <main+0x1a8>)
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d103      	bne.n	8001992 <main+0x96>
	  modoFuncionamiento = AUTOMATICO;
 800198a:	4b47      	ldr	r3, [pc, #284]	; (8001aa8 <main+0x1ac>)
 800198c:	2200      	movs	r2, #0
 800198e:	701a      	strb	r2, [r3, #0]
 8001990:	e002      	b.n	8001998 <main+0x9c>
  }else{
	  modoFuncionamiento = MANUAL;
 8001992:	4b45      	ldr	r3, [pc, #276]	; (8001aa8 <main+0x1ac>)
 8001994:	2201      	movs	r2, #1
 8001996:	701a      	strb	r2, [r3, #0]
  }

  //para pruebas (comentar cuando no se requiera):
  modoFuncionamiento = CALIBRA_MAG;
 8001998:	4b43      	ldr	r3, [pc, #268]	; (8001aa8 <main+0x1ac>)
 800199a:	2202      	movs	r2, #2
 800199c:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if (flag_cmd != 0){
 800199e:	4b43      	ldr	r3, [pc, #268]	; (8001aac <main+0x1b0>)
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d005      	beq.n	80019b2 <main+0xb6>
		  controlRxTxUART(rxUart);
 80019a6:	483e      	ldr	r0, [pc, #248]	; (8001aa0 <main+0x1a4>)
 80019a8:	f7ff f9d0 	bl	8000d4c <controlRxTxUART>
		  flag_cmd = 0;
 80019ac:	4b3f      	ldr	r3, [pc, #252]	; (8001aac <main+0x1b0>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	701a      	strb	r2, [r3, #0]
	  }

	  SR_04();
 80019b2:	f000 f959 	bl	8001c68 <SR_04>
	  sensores();
 80019b6:	f000 f99d 	bl	8001cf4 <sensores>
	  modo_funcionamiento();
 80019ba:	f001 fb89 	bl	80030d0 <modo_funcionamiento>
	  encoders();
 80019be:	f001 f8e7 	bl	8002b90 <encoders>
	  velocidades(velL, velR);
 80019c2:	4b3b      	ldr	r3, [pc, #236]	; (8001ab0 <main+0x1b4>)
 80019c4:	f993 2000 	ldrsb.w	r2, [r3]
 80019c8:	4b3a      	ldr	r3, [pc, #232]	; (8001ab4 <main+0x1b8>)
 80019ca:	f993 3000 	ldrsb.w	r3, [r3]
 80019ce:	4619      	mov	r1, r3
 80019d0:	4610      	mov	r0, r2
 80019d2:	f001 f85f 	bl	8002a94 <velocidades>


	  if (desbordeTIM7 != 0){
 80019d6:	4b38      	ldr	r3, [pc, #224]	; (8001ab8 <main+0x1bc>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d0df      	beq.n	800199e <main+0xa2>
		  periodo_Encoder += desbordeTIM7;
 80019de:	4b37      	ldr	r3, [pc, #220]	; (8001abc <main+0x1c0>)
 80019e0:	781a      	ldrb	r2, [r3, #0]
 80019e2:	4b35      	ldr	r3, [pc, #212]	; (8001ab8 <main+0x1bc>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	4413      	add	r3, r2
 80019e8:	b2da      	uxtb	r2, r3
 80019ea:	4b34      	ldr	r3, [pc, #208]	; (8001abc <main+0x1c0>)
 80019ec:	701a      	strb	r2, [r3, #0]
		  periodo_SR04 += desbordeTIM7;
 80019ee:	4b34      	ldr	r3, [pc, #208]	; (8001ac0 <main+0x1c4>)
 80019f0:	781a      	ldrb	r2, [r3, #0]
 80019f2:	4b31      	ldr	r3, [pc, #196]	; (8001ab8 <main+0x1bc>)
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	4413      	add	r3, r2
 80019f8:	b2da      	uxtb	r2, r3
 80019fa:	4b31      	ldr	r3, [pc, #196]	; (8001ac0 <main+0x1c4>)
 80019fc:	701a      	strb	r2, [r3, #0]
		  periodo_pos += desbordeTIM7;
 80019fe:	4b31      	ldr	r3, [pc, #196]	; (8001ac4 <main+0x1c8>)
 8001a00:	781a      	ldrb	r2, [r3, #0]
 8001a02:	4b2d      	ldr	r3, [pc, #180]	; (8001ab8 <main+0x1bc>)
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	4413      	add	r3, r2
 8001a08:	b2da      	uxtb	r2, r3
 8001a0a:	4b2e      	ldr	r3, [pc, #184]	; (8001ac4 <main+0x1c8>)
 8001a0c:	701a      	strb	r2, [r3, #0]
		  desbordeTIM7 = 0;
 8001a0e:	4b2a      	ldr	r3, [pc, #168]	; (8001ab8 <main+0x1bc>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	701a      	strb	r2, [r3, #0]
		  if (periodo_Encoder > 21){ // en 10 * ms
 8001a14:	4b29      	ldr	r3, [pc, #164]	; (8001abc <main+0x1c0>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	2b15      	cmp	r3, #21
 8001a1a:	d905      	bls.n	8001a28 <main+0x12c>
			  flag_encoders = 1;
 8001a1c:	4b2a      	ldr	r3, [pc, #168]	; (8001ac8 <main+0x1cc>)
 8001a1e:	2201      	movs	r2, #1
 8001a20:	701a      	strb	r2, [r3, #0]
			  periodo_Encoder = 0;
 8001a22:	4b26      	ldr	r3, [pc, #152]	; (8001abc <main+0x1c0>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	701a      	strb	r2, [r3, #0]
		  }
		  if (periodo_SR04 > 21){
 8001a28:	4b25      	ldr	r3, [pc, #148]	; (8001ac0 <main+0x1c4>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b15      	cmp	r3, #21
 8001a2e:	d907      	bls.n	8001a40 <main+0x144>
			  TRIG_SR04;
 8001a30:	4b18      	ldr	r3, [pc, #96]	; (8001a94 <main+0x198>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f06f 020a 	mvn.w	r2, #10
 8001a38:	625a      	str	r2, [r3, #36]	; 0x24
			  periodo_SR04 = 0;
 8001a3a:	4b21      	ldr	r3, [pc, #132]	; (8001ac0 <main+0x1c4>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	701a      	strb	r2, [r3, #0]
		  }
		  if (periodo_pos > 21){
 8001a40:	4b20      	ldr	r3, [pc, #128]	; (8001ac4 <main+0x1c8>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	2b15      	cmp	r3, #21
 8001a46:	d904      	bls.n	8001a52 <main+0x156>
			  posicionamiento();
 8001a48:	f001 f9c2 	bl	8002dd0 <posicionamiento>
			  periodo_pos = 0;
 8001a4c:	4b1d      	ldr	r3, [pc, #116]	; (8001ac4 <main+0x1c8>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	701a      	strb	r2, [r3, #0]
		  }

		  //para la funcion orientando (comentar cuando no se requiera):
		  if (ticks_orientando != 0) ticks_orientando--;
 8001a52:	4b1e      	ldr	r3, [pc, #120]	; (8001acc <main+0x1d0>)
 8001a54:	881b      	ldrh	r3, [r3, #0]
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d006      	beq.n	8001a6a <main+0x16e>
 8001a5c:	4b1b      	ldr	r3, [pc, #108]	; (8001acc <main+0x1d0>)
 8001a5e:	881b      	ldrh	r3, [r3, #0]
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	3b01      	subs	r3, #1
 8001a64:	b29a      	uxth	r2, r3
 8001a66:	4b19      	ldr	r3, [pc, #100]	; (8001acc <main+0x1d0>)
 8001a68:	801a      	strh	r2, [r3, #0]
		  if (ticks_PuntoAPunto != 0) ticks_PuntoAPunto--;
 8001a6a:	4b19      	ldr	r3, [pc, #100]	; (8001ad0 <main+0x1d4>)
 8001a6c:	881b      	ldrh	r3, [r3, #0]
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d094      	beq.n	800199e <main+0xa2>
 8001a74:	4b16      	ldr	r3, [pc, #88]	; (8001ad0 <main+0x1d4>)
 8001a76:	881b      	ldrh	r3, [r3, #0]
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	b29a      	uxth	r2, r3
 8001a7e:	4b14      	ldr	r3, [pc, #80]	; (8001ad0 <main+0x1d4>)
 8001a80:	801a      	strh	r2, [r3, #0]
	  if (flag_cmd != 0){
 8001a82:	e78c      	b.n	800199e <main+0xa2>
 8001a84:	20000190 	.word	0x20000190
 8001a88:	20000090 	.word	0x20000090
 8001a8c:	200000d0 	.word	0x200000d0
 8001a90:	20000110 	.word	0x20000110
 8001a94:	20000150 	.word	0x20000150
 8001a98:	20000234 	.word	0x20000234
 8001a9c:	200001d0 	.word	0x200001d0
 8001aa0:	200002b4 	.word	0x200002b4
 8001aa4:	20000057 	.word	0x20000057
 8001aa8:	20000004 	.word	0x20000004
 8001aac:	20000056 	.word	0x20000056
 8001ab0:	20000022 	.word	0x20000022
 8001ab4:	20000023 	.word	0x20000023
 8001ab8:	2000006d 	.word	0x2000006d
 8001abc:	20000020 	.word	0x20000020
 8001ac0:	2000006e 	.word	0x2000006e
 8001ac4:	20000021 	.word	0x20000021
 8001ac8:	20000082 	.word	0x20000082
 8001acc:	20000000 	.word	0x20000000
 8001ad0:	20000002 	.word	0x20000002

08001ad4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b094      	sub	sp, #80	; 0x50
 8001ad8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ada:	f107 0320 	add.w	r3, r7, #32
 8001ade:	2230      	movs	r2, #48	; 0x30
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f006 fa88 	bl	8007ff8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ae8:	f107 030c 	add.w	r3, r7, #12
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	605a      	str	r2, [r3, #4]
 8001af2:	609a      	str	r2, [r3, #8]
 8001af4:	60da      	str	r2, [r3, #12]
 8001af6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001af8:	2300      	movs	r3, #0
 8001afa:	60bb      	str	r3, [r7, #8]
 8001afc:	4b2c      	ldr	r3, [pc, #176]	; (8001bb0 <SystemClock_Config+0xdc>)
 8001afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b00:	4a2b      	ldr	r2, [pc, #172]	; (8001bb0 <SystemClock_Config+0xdc>)
 8001b02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b06:	6413      	str	r3, [r2, #64]	; 0x40
 8001b08:	4b29      	ldr	r3, [pc, #164]	; (8001bb0 <SystemClock_Config+0xdc>)
 8001b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b10:	60bb      	str	r3, [r7, #8]
 8001b12:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b14:	2300      	movs	r3, #0
 8001b16:	607b      	str	r3, [r7, #4]
 8001b18:	4b26      	ldr	r3, [pc, #152]	; (8001bb4 <SystemClock_Config+0xe0>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a25      	ldr	r2, [pc, #148]	; (8001bb4 <SystemClock_Config+0xe0>)
 8001b1e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b22:	6013      	str	r3, [r2, #0]
 8001b24:	4b23      	ldr	r3, [pc, #140]	; (8001bb4 <SystemClock_Config+0xe0>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b2c:	607b      	str	r3, [r7, #4]
 8001b2e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001b30:	2309      	movs	r3, #9
 8001b32:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b38:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b3e:	2302      	movs	r3, #2
 8001b40:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b42:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b46:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001b48:	2304      	movs	r3, #4
 8001b4a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001b4c:	23b4      	movs	r3, #180	; 0xb4
 8001b4e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b50:	2302      	movs	r3, #2
 8001b52:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001b54:	2304      	movs	r3, #4
 8001b56:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b58:	f107 0320 	add.w	r3, r7, #32
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f003 fd9d 	bl	800569c <HAL_RCC_OscConfig>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001b68:	f001 fad4 	bl	8003114 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001b6c:	f003 fd46 	bl	80055fc <HAL_PWREx_EnableOverDrive>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001b76:	f001 facd 	bl	8003114 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b7a:	230f      	movs	r3, #15
 8001b7c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b7e:	2302      	movs	r3, #2
 8001b80:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b82:	2300      	movs	r3, #0
 8001b84:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b86:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001b8a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b90:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001b92:	f107 030c 	add.w	r3, r7, #12
 8001b96:	2105      	movs	r1, #5
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f003 ffef 	bl	8005b7c <HAL_RCC_ClockConfig>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001ba4:	f001 fab6 	bl	8003114 <Error_Handler>
  }
}
 8001ba8:	bf00      	nop
 8001baa:	3750      	adds	r7, #80	; 0x50
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	40023800 	.word	0x40023800
 8001bb4:	40007000 	.word	0x40007000

08001bb8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
	if (htim->Instance==TIM7){
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a07      	ldr	r2, [pc, #28]	; (8001be4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d105      	bne.n	8001bd6 <HAL_TIM_PeriodElapsedCallback+0x1e>
		desbordeTIM7++;
 8001bca:	4b07      	ldr	r3, [pc, #28]	; (8001be8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	3301      	adds	r3, #1
 8001bd0:	b2da      	uxtb	r2, r3
 8001bd2:	4b05      	ldr	r3, [pc, #20]	; (8001be8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001bd4:	701a      	strb	r2, [r3, #0]
	}
}
 8001bd6:	bf00      	nop
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	40001400 	.word	0x40001400
 8001be8:	2000006d 	.word	0x2000006d

08001bec <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3){
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	7f1b      	ldrb	r3, [r3, #28]
 8001bf8:	2b04      	cmp	r3, #4
 8001bfa:	d10a      	bne.n	8001c12 <HAL_TIM_IC_CaptureCallback+0x26>
		ic1 = htim->Instance->CCR3;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c02:	4a0e      	ldr	r2, [pc, #56]	; (8001c3c <HAL_TIM_IC_CaptureCallback+0x50>)
 8001c04:	6013      	str	r3, [r2, #0]
		flancoEco++;
 8001c06:	4b0e      	ldr	r3, [pc, #56]	; (8001c40 <HAL_TIM_IC_CaptureCallback+0x54>)
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	b2da      	uxtb	r2, r3
 8001c0e:	4b0c      	ldr	r3, [pc, #48]	; (8001c40 <HAL_TIM_IC_CaptureCallback+0x54>)
 8001c10:	701a      	strb	r2, [r3, #0]
	}

	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4){
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	7f1b      	ldrb	r3, [r3, #28]
 8001c16:	2b08      	cmp	r3, #8
 8001c18:	d10a      	bne.n	8001c30 <HAL_TIM_IC_CaptureCallback+0x44>
		ic2 = htim->Instance->CCR4;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c20:	4a08      	ldr	r2, [pc, #32]	; (8001c44 <HAL_TIM_IC_CaptureCallback+0x58>)
 8001c22:	6013      	str	r3, [r2, #0]
		flancoEco++;
 8001c24:	4b06      	ldr	r3, [pc, #24]	; (8001c40 <HAL_TIM_IC_CaptureCallback+0x54>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	b2da      	uxtb	r2, r3
 8001c2c:	4b04      	ldr	r3, [pc, #16]	; (8001c40 <HAL_TIM_IC_CaptureCallback+0x54>)
 8001c2e:	701a      	strb	r2, [r3, #0]
	}
}
 8001c30:	bf00      	nop
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	20000070 	.word	0x20000070
 8001c40:	20000078 	.word	0x20000078
 8001c44:	20000074 	.word	0x20000074

08001c48 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
	flag_cmd = 1;
 8001c50:	4b04      	ldr	r3, [pc, #16]	; (8001c64 <HAL_UART_RxCpltCallback+0x1c>)
 8001c52:	2201      	movs	r2, #1
 8001c54:	701a      	strb	r2, [r3, #0]
}
 8001c56:	bf00      	nop
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	20000056 	.word	0x20000056

08001c68 <SR_04>:


void SR_04 (void){
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0

	switch (flancoEco){
 8001c6c:	4b1b      	ldr	r3, [pc, #108]	; (8001cdc <SR_04+0x74>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	db29      	blt.n	8001cc8 <SR_04+0x60>
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	dd2c      	ble.n	8001cd2 <SR_04+0x6a>
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d125      	bne.n	8001cc8 <SR_04+0x60>
		case 0:
		case 1:
			return;
		case 2:
			cuentaPulsos = (int32_t)(ic2 - ic1);
 8001c7c:	4b18      	ldr	r3, [pc, #96]	; (8001ce0 <SR_04+0x78>)
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	4b18      	ldr	r3, [pc, #96]	; (8001ce4 <SR_04+0x7c>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	461a      	mov	r2, r3
 8001c88:	4b17      	ldr	r3, [pc, #92]	; (8001ce8 <SR_04+0x80>)
 8001c8a:	601a      	str	r2, [r3, #0]
			if (cuentaPulsos < 23310){
 8001c8c:	4b16      	ldr	r3, [pc, #88]	; (8001ce8 <SR_04+0x80>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f645 320d 	movw	r2, #23309	; 0x5b0d
 8001c94:	4293      	cmp	r3, r2
 8001c96:	dc0f      	bgt.n	8001cb8 <SR_04+0x50>
				distanciaSR04 = cuentaPulsos * 34 / 2000;
 8001c98:	4b13      	ldr	r3, [pc, #76]	; (8001ce8 <SR_04+0x80>)
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	011b      	lsls	r3, r3, #4
 8001ca0:	4413      	add	r3, r2
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	4a11      	ldr	r2, [pc, #68]	; (8001cec <SR_04+0x84>)
 8001ca6:	fb82 1203 	smull	r1, r2, r2, r3
 8001caa:	11d2      	asrs	r2, r2, #7
 8001cac:	17db      	asrs	r3, r3, #31
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	4b0f      	ldr	r3, [pc, #60]	; (8001cf0 <SR_04+0x88>)
 8001cb4:	801a      	strh	r2, [r3, #0]
 8001cb6:	e003      	b.n	8001cc0 <SR_04+0x58>
			}else{
				distanciaSR04 = 400;
 8001cb8:	4b0d      	ldr	r3, [pc, #52]	; (8001cf0 <SR_04+0x88>)
 8001cba:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001cbe:	801a      	strh	r2, [r3, #0]
			}
			flancoEco = 0;
 8001cc0:	4b06      	ldr	r3, [pc, #24]	; (8001cdc <SR_04+0x74>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	701a      	strb	r2, [r3, #0]
		break;
 8001cc6:	e005      	b.n	8001cd4 <SR_04+0x6c>
		default:
			flancoEco = 0;
 8001cc8:	4b04      	ldr	r3, [pc, #16]	; (8001cdc <SR_04+0x74>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	701a      	strb	r2, [r3, #0]
		break;
 8001cce:	bf00      	nop
 8001cd0:	e000      	b.n	8001cd4 <SR_04+0x6c>
			return;
 8001cd2:	bf00      	nop
	} //end switch flancoEco

} //end SR_04()
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr
 8001cdc:	20000078 	.word	0x20000078
 8001ce0:	20000074 	.word	0x20000074
 8001ce4:	20000070 	.word	0x20000070
 8001ce8:	2000007c 	.word	0x2000007c
 8001cec:	10624dd3 	.word	0x10624dd3
 8001cf0:	20000080 	.word	0x20000080

08001cf4 <sensores>:

void sensores (void){
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
	//sensores_dist = SI << 2 | SF << 1 | SD (logica negativa)
	SI = (HAL_GPIO_ReadPin(IN_sensorL_GPIO_Port, IN_sensorL_Pin)) ;
 8001cf8:	2102      	movs	r1, #2
 8001cfa:	4817      	ldr	r0, [pc, #92]	; (8001d58 <sensores+0x64>)
 8001cfc:	f002 fc1e 	bl	800453c <HAL_GPIO_ReadPin>
 8001d00:	4603      	mov	r3, r0
 8001d02:	461a      	mov	r2, r3
 8001d04:	4b15      	ldr	r3, [pc, #84]	; (8001d5c <sensores+0x68>)
 8001d06:	701a      	strb	r2, [r3, #0]
	SD = HAL_GPIO_ReadPin(IN_sensorR_GPIO_Port, IN_sensorR_Pin);
 8001d08:	2108      	movs	r1, #8
 8001d0a:	4813      	ldr	r0, [pc, #76]	; (8001d58 <sensores+0x64>)
 8001d0c:	f002 fc16 	bl	800453c <HAL_GPIO_ReadPin>
 8001d10:	4603      	mov	r3, r0
 8001d12:	461a      	mov	r2, r3
 8001d14:	4b12      	ldr	r3, [pc, #72]	; (8001d60 <sensores+0x6c>)
 8001d16:	701a      	strb	r2, [r3, #0]
	if (distanciaSR04 < 25) SF = 0; else SF = 1;
 8001d18:	4b12      	ldr	r3, [pc, #72]	; (8001d64 <sensores+0x70>)
 8001d1a:	881b      	ldrh	r3, [r3, #0]
 8001d1c:	2b18      	cmp	r3, #24
 8001d1e:	d803      	bhi.n	8001d28 <sensores+0x34>
 8001d20:	4b11      	ldr	r3, [pc, #68]	; (8001d68 <sensores+0x74>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	701a      	strb	r2, [r3, #0]
 8001d26:	e002      	b.n	8001d2e <sensores+0x3a>
 8001d28:	4b0f      	ldr	r3, [pc, #60]	; (8001d68 <sensores+0x74>)
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	701a      	strb	r2, [r3, #0]

	sensores_dist = SI << 2 | SF << 1 | SD;
 8001d2e:	4b0b      	ldr	r3, [pc, #44]	; (8001d5c <sensores+0x68>)
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	b25a      	sxtb	r2, r3
 8001d36:	4b0c      	ldr	r3, [pc, #48]	; (8001d68 <sensores+0x74>)
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	b25b      	sxtb	r3, r3
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	b25a      	sxtb	r2, r3
 8001d42:	4b07      	ldr	r3, [pc, #28]	; (8001d60 <sensores+0x6c>)
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	b25b      	sxtb	r3, r3
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	b25b      	sxtb	r3, r3
 8001d4c:	b2da      	uxtb	r2, r3
 8001d4e:	4b07      	ldr	r3, [pc, #28]	; (8001d6c <sensores+0x78>)
 8001d50:	701a      	strb	r2, [r3, #0]
} //end sensores()
 8001d52:	bf00      	nop
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	40020c00 	.word	0x40020c00
 8001d5c:	200002e2 	.word	0x200002e2
 8001d60:	200002de 	.word	0x200002de
 8001d64:	20000080 	.word	0x20000080
 8001d68:	20000298 	.word	0x20000298
 8001d6c:	2000006c 	.word	0x2000006c

08001d70 <movimientoLibre>:
void aceleracion (void){
	if (velL < velLFinal) velL++;

} //end aceleracion()

void movimientoLibre (void){
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0

	if (avance_cant != 0) avance_cant = 0;
 8001d74:	4b8c      	ldr	r3, [pc, #560]	; (8001fa8 <movimientoLibre+0x238>)
 8001d76:	881b      	ldrh	r3, [r3, #0]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d002      	beq.n	8001d82 <movimientoLibre+0x12>
 8001d7c:	4b8a      	ldr	r3, [pc, #552]	; (8001fa8 <movimientoLibre+0x238>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	801a      	strh	r2, [r3, #0]
	if (retroceso_cant != 0) retroceso_cant = 0;
 8001d82:	4b8a      	ldr	r3, [pc, #552]	; (8001fac <movimientoLibre+0x23c>)
 8001d84:	881b      	ldrh	r3, [r3, #0]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d002      	beq.n	8001d90 <movimientoLibre+0x20>
 8001d8a:	4b88      	ldr	r3, [pc, #544]	; (8001fac <movimientoLibre+0x23c>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	801a      	strh	r2, [r3, #0]
	if (giroIzq_cant != 0) giroIzq_cant = 0;
 8001d90:	4b87      	ldr	r3, [pc, #540]	; (8001fb0 <movimientoLibre+0x240>)
 8001d92:	881b      	ldrh	r3, [r3, #0]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d002      	beq.n	8001d9e <movimientoLibre+0x2e>
 8001d98:	4b85      	ldr	r3, [pc, #532]	; (8001fb0 <movimientoLibre+0x240>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	801a      	strh	r2, [r3, #0]
	if (giroDer_cant != 0) giroDer_cant = 0;
 8001d9e:	4b85      	ldr	r3, [pc, #532]	; (8001fb4 <movimientoLibre+0x244>)
 8001da0:	881b      	ldrh	r3, [r3, #0]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d002      	beq.n	8001dac <movimientoLibre+0x3c>
 8001da6:	4b83      	ldr	r3, [pc, #524]	; (8001fb4 <movimientoLibre+0x244>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	801a      	strh	r2, [r3, #0]

	switch (status_movimiento) {
 8001dac:	4b82      	ldr	r3, [pc, #520]	; (8001fb8 <movimientoLibre+0x248>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	2b06      	cmp	r3, #6
 8001db2:	f200 817d 	bhi.w	80020b0 <movimientoLibre+0x340>
 8001db6:	a201      	add	r2, pc, #4	; (adr r2, 8001dbc <movimientoLibre+0x4c>)
 8001db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dbc:	08001dd9 	.word	0x08001dd9
 8001dc0:	08001ded 	.word	0x08001ded
 8001dc4:	0800202f 	.word	0x0800202f
 8001dc8:	08001ed1 	.word	0x08001ed1
 8001dcc:	08001f63 	.word	0x08001f63
 8001dd0:	08002043 	.word	0x08002043
 8001dd4:	0800207b 	.word	0x0800207b
//			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 0);
//
//			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 0);
//			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 0);

			velL = 0;
 8001dd8:	4b78      	ldr	r3, [pc, #480]	; (8001fbc <movimientoLibre+0x24c>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	701a      	strb	r2, [r3, #0]
			velR = 0;
 8001dde:	4b78      	ldr	r3, [pc, #480]	; (8001fc0 <movimientoLibre+0x250>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	701a      	strb	r2, [r3, #0]
			//periodo_Encoder = 0;

			status_movimiento = AVANZANDO;
 8001de4:	4b74      	ldr	r3, [pc, #464]	; (8001fb8 <movimientoLibre+0x248>)
 8001de6:	2201      	movs	r2, #1
 8001de8:	701a      	strb	r2, [r3, #0]
		break;
 8001dea:	e162      	b.n	80020b2 <movimientoLibre+0x342>
//			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 1);
//
//			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 0);
//			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 0);

			velL = 5;
 8001dec:	4b73      	ldr	r3, [pc, #460]	; (8001fbc <movimientoLibre+0x24c>)
 8001dee:	2205      	movs	r2, #5
 8001df0:	701a      	strb	r2, [r3, #0]
			velR = 5;
 8001df2:	4b73      	ldr	r3, [pc, #460]	; (8001fc0 <movimientoLibre+0x250>)
 8001df4:	2205      	movs	r2, #5
 8001df6:	701a      	strb	r2, [r3, #0]

			switch (sensores_dist) {
 8001df8:	4b72      	ldr	r3, [pc, #456]	; (8001fc4 <movimientoLibre+0x254>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	2b06      	cmp	r3, #6
 8001dfe:	d865      	bhi.n	8001ecc <movimientoLibre+0x15c>
 8001e00:	a201      	add	r2, pc, #4	; (adr r2, 8001e08 <movimientoLibre+0x98>)
 8001e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e06:	bf00      	nop
 8001e08:	08001e4f 	.word	0x08001e4f
 8001e0c:	08001ea3 	.word	0x08001ea3
 8001e10:	08001ecd 	.word	0x08001ecd
 8001e14:	08001e79 	.word	0x08001e79
 8001e18:	08001e4f 	.word	0x08001e4f
 8001e1c:	08001e4f 	.word	0x08001e4f
 8001e20:	08001e25 	.word	0x08001e25
				case 0b110:
					//agregado para prueba
					//status_movimiento = PIVOTE_IZQ_AVAN;
					status_movimiento = ROTANDO_IZQ;
 8001e24:	4b64      	ldr	r3, [pc, #400]	; (8001fb8 <movimientoLibre+0x248>)
 8001e26:	2203      	movs	r2, #3
 8001e28:	701a      	strb	r2, [r3, #0]

					encoderL_memPositivo += __HAL_TIM_GET_COUNTER(&htim3);
 8001e2a:	4b67      	ldr	r3, [pc, #412]	; (8001fc8 <movimientoLibre+0x258>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e30:	b29a      	uxth	r2, r3
 8001e32:	4b66      	ldr	r3, [pc, #408]	; (8001fcc <movimientoLibre+0x25c>)
 8001e34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	4413      	add	r3, r2
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	b21a      	sxth	r2, r3
 8001e40:	4b62      	ldr	r3, [pc, #392]	; (8001fcc <movimientoLibre+0x25c>)
 8001e42:	801a      	strh	r2, [r3, #0]
					__HAL_TIM_SET_COUNTER(&htim3, 0);
 8001e44:	4b60      	ldr	r3, [pc, #384]	; (8001fc8 <movimientoLibre+0x258>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	625a      	str	r2, [r3, #36]	; 0x24

				break;
 8001e4c:	e03f      	b.n	8001ece <movimientoLibre+0x15e>
				case 0b101:
				case 0b100:
				case 0b000:
					status_movimiento = ROTANDO_IZQ;
 8001e4e:	4b5a      	ldr	r3, [pc, #360]	; (8001fb8 <movimientoLibre+0x248>)
 8001e50:	2203      	movs	r2, #3
 8001e52:	701a      	strb	r2, [r3, #0]

					encoderL_memPositivo += __HAL_TIM_GET_COUNTER(&htim3);
 8001e54:	4b5c      	ldr	r3, [pc, #368]	; (8001fc8 <movimientoLibre+0x258>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5a:	b29a      	uxth	r2, r3
 8001e5c:	4b5b      	ldr	r3, [pc, #364]	; (8001fcc <movimientoLibre+0x25c>)
 8001e5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	4413      	add	r3, r2
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	b21a      	sxth	r2, r3
 8001e6a:	4b58      	ldr	r3, [pc, #352]	; (8001fcc <movimientoLibre+0x25c>)
 8001e6c:	801a      	strh	r2, [r3, #0]
					__HAL_TIM_SET_COUNTER(&htim3, 0);
 8001e6e:	4b56      	ldr	r3, [pc, #344]	; (8001fc8 <movimientoLibre+0x258>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2200      	movs	r2, #0
 8001e74:	625a      	str	r2, [r3, #36]	; 0x24
				break;
 8001e76:	e02a      	b.n	8001ece <movimientoLibre+0x15e>
				case 0b011:
					//agregado para prueba
					//status_movimiento = PIVOTE_DER_AVAN;
					status_movimiento = ROTANDO_DER;
 8001e78:	4b4f      	ldr	r3, [pc, #316]	; (8001fb8 <movimientoLibre+0x248>)
 8001e7a:	2204      	movs	r2, #4
 8001e7c:	701a      	strb	r2, [r3, #0]

					encoderR_memPositivo += __HAL_TIM_GET_COUNTER(&htim2);
 8001e7e:	4b54      	ldr	r3, [pc, #336]	; (8001fd0 <movimientoLibre+0x260>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e84:	b29a      	uxth	r2, r3
 8001e86:	4b53      	ldr	r3, [pc, #332]	; (8001fd4 <movimientoLibre+0x264>)
 8001e88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	4413      	add	r3, r2
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	b21a      	sxth	r2, r3
 8001e94:	4b4f      	ldr	r3, [pc, #316]	; (8001fd4 <movimientoLibre+0x264>)
 8001e96:	801a      	strh	r2, [r3, #0]
					__HAL_TIM_SET_COUNTER(&htim2, 0);
 8001e98:	4b4d      	ldr	r3, [pc, #308]	; (8001fd0 <movimientoLibre+0x260>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	625a      	str	r2, [r3, #36]	; 0x24

				break;
 8001ea0:	e015      	b.n	8001ece <movimientoLibre+0x15e>
				case 0b001:
					status_movimiento = ROTANDO_DER;
 8001ea2:	4b45      	ldr	r3, [pc, #276]	; (8001fb8 <movimientoLibre+0x248>)
 8001ea4:	2204      	movs	r2, #4
 8001ea6:	701a      	strb	r2, [r3, #0]

					encoderR_memPositivo += __HAL_TIM_GET_COUNTER(&htim2);
 8001ea8:	4b49      	ldr	r3, [pc, #292]	; (8001fd0 <movimientoLibre+0x260>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eae:	b29a      	uxth	r2, r3
 8001eb0:	4b48      	ldr	r3, [pc, #288]	; (8001fd4 <movimientoLibre+0x264>)
 8001eb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	4413      	add	r3, r2
 8001eba:	b29b      	uxth	r3, r3
 8001ebc:	b21a      	sxth	r2, r3
 8001ebe:	4b45      	ldr	r3, [pc, #276]	; (8001fd4 <movimientoLibre+0x264>)
 8001ec0:	801a      	strh	r2, [r3, #0]
					__HAL_TIM_SET_COUNTER(&htim2, 0);
 8001ec2:	4b43      	ldr	r3, [pc, #268]	; (8001fd0 <movimientoLibre+0x260>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	625a      	str	r2, [r3, #36]	; 0x24

				break;
 8001eca:	e000      	b.n	8001ece <movimientoLibre+0x15e>
				default:
				break;
 8001ecc:	bf00      	nop
			} //end switch sensores_dist

		break;
 8001ece:	e0f0      	b.n	80020b2 <movimientoLibre+0x342>
//			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 1);
//
//			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 1);
//			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 0);

			velL = -5;
 8001ed0:	4b3a      	ldr	r3, [pc, #232]	; (8001fbc <movimientoLibre+0x24c>)
 8001ed2:	22fb      	movs	r2, #251	; 0xfb
 8001ed4:	701a      	strb	r2, [r3, #0]
			velR = 5;
 8001ed6:	4b3a      	ldr	r3, [pc, #232]	; (8001fc0 <movimientoLibre+0x250>)
 8001ed8:	2205      	movs	r2, #5
 8001eda:	701a      	strb	r2, [r3, #0]

			switch (sensores_dist){
 8001edc:	4b39      	ldr	r3, [pc, #228]	; (8001fc4 <movimientoLibre+0x254>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	2b03      	cmp	r3, #3
 8001ee2:	d017      	beq.n	8001f14 <movimientoLibre+0x1a4>
 8001ee4:	2b07      	cmp	r3, #7
 8001ee6:	d000      	beq.n	8001eea <movimientoLibre+0x17a>
					__HAL_TIM_SET_COUNTER(&htim3, 0);
					encoderR_memPositivo += __HAL_TIM_GET_COUNTER(&htim2);
					__HAL_TIM_SET_COUNTER(&htim2, 0);

				default:
					break;
 8001ee8:	e039      	b.n	8001f5e <movimientoLibre+0x1ee>
					status_movimiento = AVANZANDO;
 8001eea:	4b33      	ldr	r3, [pc, #204]	; (8001fb8 <movimientoLibre+0x248>)
 8001eec:	2201      	movs	r2, #1
 8001eee:	701a      	strb	r2, [r3, #0]
					encoderL_memNegativo += __HAL_TIM_GET_COUNTER(&htim3);
 8001ef0:	4b35      	ldr	r3, [pc, #212]	; (8001fc8 <movimientoLibre+0x258>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef6:	b29a      	uxth	r2, r3
 8001ef8:	4b37      	ldr	r3, [pc, #220]	; (8001fd8 <movimientoLibre+0x268>)
 8001efa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	4413      	add	r3, r2
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	b21a      	sxth	r2, r3
 8001f06:	4b34      	ldr	r3, [pc, #208]	; (8001fd8 <movimientoLibre+0x268>)
 8001f08:	801a      	strh	r2, [r3, #0]
					__HAL_TIM_SET_COUNTER(&htim3, 0);
 8001f0a:	4b2f      	ldr	r3, [pc, #188]	; (8001fc8 <movimientoLibre+0x258>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	625a      	str	r2, [r3, #36]	; 0x24
					break;
 8001f12:	e025      	b.n	8001f60 <movimientoLibre+0x1f0>
					status_movimiento = ROTANDO_DER;
 8001f14:	4b28      	ldr	r3, [pc, #160]	; (8001fb8 <movimientoLibre+0x248>)
 8001f16:	2204      	movs	r2, #4
 8001f18:	701a      	strb	r2, [r3, #0]
					encoderL_memNegativo += __HAL_TIM_GET_COUNTER(&htim3);
 8001f1a:	4b2b      	ldr	r3, [pc, #172]	; (8001fc8 <movimientoLibre+0x258>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f20:	b29a      	uxth	r2, r3
 8001f22:	4b2d      	ldr	r3, [pc, #180]	; (8001fd8 <movimientoLibre+0x268>)
 8001f24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	4413      	add	r3, r2
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	b21a      	sxth	r2, r3
 8001f30:	4b29      	ldr	r3, [pc, #164]	; (8001fd8 <movimientoLibre+0x268>)
 8001f32:	801a      	strh	r2, [r3, #0]
					__HAL_TIM_SET_COUNTER(&htim3, 0);
 8001f34:	4b24      	ldr	r3, [pc, #144]	; (8001fc8 <movimientoLibre+0x258>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	625a      	str	r2, [r3, #36]	; 0x24
					encoderR_memPositivo += __HAL_TIM_GET_COUNTER(&htim2);
 8001f3c:	4b24      	ldr	r3, [pc, #144]	; (8001fd0 <movimientoLibre+0x260>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f42:	b29a      	uxth	r2, r3
 8001f44:	4b23      	ldr	r3, [pc, #140]	; (8001fd4 <movimientoLibre+0x264>)
 8001f46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	4413      	add	r3, r2
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	b21a      	sxth	r2, r3
 8001f52:	4b20      	ldr	r3, [pc, #128]	; (8001fd4 <movimientoLibre+0x264>)
 8001f54:	801a      	strh	r2, [r3, #0]
					__HAL_TIM_SET_COUNTER(&htim2, 0);
 8001f56:	4b1e      	ldr	r3, [pc, #120]	; (8001fd0 <movimientoLibre+0x260>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	625a      	str	r2, [r3, #36]	; 0x24
					break;
 8001f5e:	bf00      	nop
			} //end switch sensores_dist

		break;
 8001f60:	e0a7      	b.n	80020b2 <movimientoLibre+0x342>
//			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 0);
//
//			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 0);
//			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 1);

			velL = 5;
 8001f62:	4b16      	ldr	r3, [pc, #88]	; (8001fbc <movimientoLibre+0x24c>)
 8001f64:	2205      	movs	r2, #5
 8001f66:	701a      	strb	r2, [r3, #0]
			velR = -5;
 8001f68:	4b15      	ldr	r3, [pc, #84]	; (8001fc0 <movimientoLibre+0x250>)
 8001f6a:	22fb      	movs	r2, #251	; 0xfb
 8001f6c:	701a      	strb	r2, [r3, #0]

			switch (sensores_dist){
 8001f6e:	4b15      	ldr	r3, [pc, #84]	; (8001fc4 <movimientoLibre+0x254>)
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	2b06      	cmp	r3, #6
 8001f74:	d034      	beq.n	8001fe0 <movimientoLibre+0x270>
 8001f76:	2b07      	cmp	r3, #7
 8001f78:	d000      	beq.n	8001f7c <movimientoLibre+0x20c>
					__HAL_TIM_SET_COUNTER(&htim3, 0);
					encoderR_memNegativo += __HAL_TIM_GET_COUNTER(&htim2);
					__HAL_TIM_SET_COUNTER(&htim2, 0);

				default:
					break;
 8001f7a:	e056      	b.n	800202a <movimientoLibre+0x2ba>
					status_movimiento = AVANZANDO;
 8001f7c:	4b0e      	ldr	r3, [pc, #56]	; (8001fb8 <movimientoLibre+0x248>)
 8001f7e:	2201      	movs	r2, #1
 8001f80:	701a      	strb	r2, [r3, #0]
					encoderR_memNegativo += __HAL_TIM_GET_COUNTER(&htim2);
 8001f82:	4b13      	ldr	r3, [pc, #76]	; (8001fd0 <movimientoLibre+0x260>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f88:	b29a      	uxth	r2, r3
 8001f8a:	4b14      	ldr	r3, [pc, #80]	; (8001fdc <movimientoLibre+0x26c>)
 8001f8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	4413      	add	r3, r2
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	b21a      	sxth	r2, r3
 8001f98:	4b10      	ldr	r3, [pc, #64]	; (8001fdc <movimientoLibre+0x26c>)
 8001f9a:	801a      	strh	r2, [r3, #0]
					__HAL_TIM_SET_COUNTER(&htim2, 0);
 8001f9c:	4b0c      	ldr	r3, [pc, #48]	; (8001fd0 <movimientoLibre+0x260>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	625a      	str	r2, [r3, #36]	; 0x24
					break;
 8001fa4:	e042      	b.n	800202c <movimientoLibre+0x2bc>
 8001fa6:	bf00      	nop
 8001fa8:	2000005c 	.word	0x2000005c
 8001fac:	2000005e 	.word	0x2000005e
 8001fb0:	20000060 	.word	0x20000060
 8001fb4:	20000062 	.word	0x20000062
 8001fb8:	20000058 	.word	0x20000058
 8001fbc:	20000022 	.word	0x20000022
 8001fc0:	20000023 	.word	0x20000023
 8001fc4:	2000006c 	.word	0x2000006c
 8001fc8:	200000d0 	.word	0x200000d0
 8001fcc:	20000088 	.word	0x20000088
 8001fd0:	20000090 	.word	0x20000090
 8001fd4:	2000008a 	.word	0x2000008a
 8001fd8:	2000008c 	.word	0x2000008c
 8001fdc:	2000008e 	.word	0x2000008e
					status_movimiento = ROTANDO_IZQ;
 8001fe0:	4b36      	ldr	r3, [pc, #216]	; (80020bc <movimientoLibre+0x34c>)
 8001fe2:	2203      	movs	r2, #3
 8001fe4:	701a      	strb	r2, [r3, #0]
					encoderL_memPositivo += __HAL_TIM_GET_COUNTER(&htim3);
 8001fe6:	4b36      	ldr	r3, [pc, #216]	; (80020c0 <movimientoLibre+0x350>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fec:	b29a      	uxth	r2, r3
 8001fee:	4b35      	ldr	r3, [pc, #212]	; (80020c4 <movimientoLibre+0x354>)
 8001ff0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	4413      	add	r3, r2
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	b21a      	sxth	r2, r3
 8001ffc:	4b31      	ldr	r3, [pc, #196]	; (80020c4 <movimientoLibre+0x354>)
 8001ffe:	801a      	strh	r2, [r3, #0]
					__HAL_TIM_SET_COUNTER(&htim3, 0);
 8002000:	4b2f      	ldr	r3, [pc, #188]	; (80020c0 <movimientoLibre+0x350>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2200      	movs	r2, #0
 8002006:	625a      	str	r2, [r3, #36]	; 0x24
					encoderR_memNegativo += __HAL_TIM_GET_COUNTER(&htim2);
 8002008:	4b2f      	ldr	r3, [pc, #188]	; (80020c8 <movimientoLibre+0x358>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200e:	b29a      	uxth	r2, r3
 8002010:	4b2e      	ldr	r3, [pc, #184]	; (80020cc <movimientoLibre+0x35c>)
 8002012:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002016:	b29b      	uxth	r3, r3
 8002018:	4413      	add	r3, r2
 800201a:	b29b      	uxth	r3, r3
 800201c:	b21a      	sxth	r2, r3
 800201e:	4b2b      	ldr	r3, [pc, #172]	; (80020cc <movimientoLibre+0x35c>)
 8002020:	801a      	strh	r2, [r3, #0]
					__HAL_TIM_SET_COUNTER(&htim2, 0);
 8002022:	4b29      	ldr	r3, [pc, #164]	; (80020c8 <movimientoLibre+0x358>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2200      	movs	r2, #0
 8002028:	625a      	str	r2, [r3, #36]	; 0x24
					break;
 800202a:	bf00      	nop
			} //end switch sensores_dist

		break;
 800202c:	e041      	b.n	80020b2 <movimientoLibre+0x342>
//			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 0);
//
//			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 1);
//			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 1);

			velL = -5;
 800202e:	4b28      	ldr	r3, [pc, #160]	; (80020d0 <movimientoLibre+0x360>)
 8002030:	22fb      	movs	r2, #251	; 0xfb
 8002032:	701a      	strb	r2, [r3, #0]
			velR = -5;
 8002034:	4b27      	ldr	r3, [pc, #156]	; (80020d4 <movimientoLibre+0x364>)
 8002036:	22fb      	movs	r2, #251	; 0xfb
 8002038:	701a      	strb	r2, [r3, #0]

			status_movimiento = AVANZANDO;
 800203a:	4b20      	ldr	r3, [pc, #128]	; (80020bc <movimientoLibre+0x34c>)
 800203c:	2201      	movs	r2, #1
 800203e:	701a      	strb	r2, [r3, #0]
			break;
 8002040:	e037      	b.n	80020b2 <movimientoLibre+0x342>
//			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 1);
//
//			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 0);
//			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 0);

			velL = 0;
 8002042:	4b23      	ldr	r3, [pc, #140]	; (80020d0 <movimientoLibre+0x360>)
 8002044:	2200      	movs	r2, #0
 8002046:	701a      	strb	r2, [r3, #0]
			velR = 5;
 8002048:	4b22      	ldr	r3, [pc, #136]	; (80020d4 <movimientoLibre+0x364>)
 800204a:	2205      	movs	r2, #5
 800204c:	701a      	strb	r2, [r3, #0]

			switch (sensores_dist){
 800204e:	4b22      	ldr	r3, [pc, #136]	; (80020d8 <movimientoLibre+0x368>)
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	2b04      	cmp	r3, #4
 8002054:	d00c      	beq.n	8002070 <movimientoLibre+0x300>
 8002056:	2b07      	cmp	r3, #7
 8002058:	d002      	beq.n	8002060 <movimientoLibre+0x2f0>
 800205a:	2b03      	cmp	r3, #3
 800205c:	d004      	beq.n	8002068 <movimientoLibre+0x2f8>
					status_movimiento = ROTANDO_DER;
				break;
				case 0b100:
					status_movimiento = ROTANDO_IZQ;
				default:
				break;
 800205e:	e00a      	b.n	8002076 <movimientoLibre+0x306>
					status_movimiento = AVANZANDO;
 8002060:	4b16      	ldr	r3, [pc, #88]	; (80020bc <movimientoLibre+0x34c>)
 8002062:	2201      	movs	r2, #1
 8002064:	701a      	strb	r2, [r3, #0]
				break;
 8002066:	e007      	b.n	8002078 <movimientoLibre+0x308>
					status_movimiento = ROTANDO_DER;
 8002068:	4b14      	ldr	r3, [pc, #80]	; (80020bc <movimientoLibre+0x34c>)
 800206a:	2204      	movs	r2, #4
 800206c:	701a      	strb	r2, [r3, #0]
				break;
 800206e:	e003      	b.n	8002078 <movimientoLibre+0x308>
					status_movimiento = ROTANDO_IZQ;
 8002070:	4b12      	ldr	r3, [pc, #72]	; (80020bc <movimientoLibre+0x34c>)
 8002072:	2203      	movs	r2, #3
 8002074:	701a      	strb	r2, [r3, #0]
				break;
 8002076:	bf00      	nop
			} //end switch sensores_dist

		break;
 8002078:	e01b      	b.n	80020b2 <movimientoLibre+0x342>
//			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 0);
//
//			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 0);
//			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 0);

			velL = 5;
 800207a:	4b15      	ldr	r3, [pc, #84]	; (80020d0 <movimientoLibre+0x360>)
 800207c:	2205      	movs	r2, #5
 800207e:	701a      	strb	r2, [r3, #0]
			velR = 0;
 8002080:	4b14      	ldr	r3, [pc, #80]	; (80020d4 <movimientoLibre+0x364>)
 8002082:	2200      	movs	r2, #0
 8002084:	701a      	strb	r2, [r3, #0]

			switch (sensores_dist){
 8002086:	4b14      	ldr	r3, [pc, #80]	; (80020d8 <movimientoLibre+0x368>)
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	2b06      	cmp	r3, #6
 800208c:	d008      	beq.n	80020a0 <movimientoLibre+0x330>
 800208e:	2b07      	cmp	r3, #7
 8002090:	d002      	beq.n	8002098 <movimientoLibre+0x328>
 8002092:	2b01      	cmp	r3, #1
 8002094:	d008      	beq.n	80020a8 <movimientoLibre+0x338>
					status_movimiento = ROTANDO_IZQ;
				break;
				case 0b001:
					status_movimiento = ROTANDO_DER;
				default:
				break;
 8002096:	e00a      	b.n	80020ae <movimientoLibre+0x33e>
					status_movimiento = AVANZANDO;
 8002098:	4b08      	ldr	r3, [pc, #32]	; (80020bc <movimientoLibre+0x34c>)
 800209a:	2201      	movs	r2, #1
 800209c:	701a      	strb	r2, [r3, #0]
				break;
 800209e:	e007      	b.n	80020b0 <movimientoLibre+0x340>
					status_movimiento = ROTANDO_IZQ;
 80020a0:	4b06      	ldr	r3, [pc, #24]	; (80020bc <movimientoLibre+0x34c>)
 80020a2:	2203      	movs	r2, #3
 80020a4:	701a      	strb	r2, [r3, #0]
				break;
 80020a6:	e003      	b.n	80020b0 <movimientoLibre+0x340>
					status_movimiento = ROTANDO_DER;
 80020a8:	4b04      	ldr	r3, [pc, #16]	; (80020bc <movimientoLibre+0x34c>)
 80020aa:	2204      	movs	r2, #4
 80020ac:	701a      	strb	r2, [r3, #0]
				break;
 80020ae:	bf00      	nop
			} //end switch sensores_dist

		default:
		break;
 80020b0:	bf00      	nop

	} //fin switch status_movimiento

} //fin movimientoLibre()
 80020b2:	bf00      	nop
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr
 80020bc:	20000058 	.word	0x20000058
 80020c0:	200000d0 	.word	0x200000d0
 80020c4:	20000088 	.word	0x20000088
 80020c8:	20000090 	.word	0x20000090
 80020cc:	2000008e 	.word	0x2000008e
 80020d0:	20000022 	.word	0x20000022
 80020d4:	20000023 	.word	0x20000023
 80020d8:	2000006c 	.word	0x2000006c

080020dc <movimientoRC>:

void movimientoRC (void){
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0

	if (!avance_cant && !retroceso_cant && !giroIzq_cant && !giroDer_cant ){
 80020e0:	4b9b      	ldr	r3, [pc, #620]	; (8002350 <movimientoRC+0x274>)
 80020e2:	881b      	ldrh	r3, [r3, #0]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d10e      	bne.n	8002106 <movimientoRC+0x2a>
 80020e8:	4b9a      	ldr	r3, [pc, #616]	; (8002354 <movimientoRC+0x278>)
 80020ea:	881b      	ldrh	r3, [r3, #0]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d10a      	bne.n	8002106 <movimientoRC+0x2a>
 80020f0:	4b99      	ldr	r3, [pc, #612]	; (8002358 <movimientoRC+0x27c>)
 80020f2:	881b      	ldrh	r3, [r3, #0]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d106      	bne.n	8002106 <movimientoRC+0x2a>
 80020f8:	4b98      	ldr	r3, [pc, #608]	; (800235c <movimientoRC+0x280>)
 80020fa:	881b      	ldrh	r3, [r3, #0]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d102      	bne.n	8002106 <movimientoRC+0x2a>
		status_movimiento = QUIETO;
 8002100:	4b97      	ldr	r3, [pc, #604]	; (8002360 <movimientoRC+0x284>)
 8002102:	2200      	movs	r2, #0
 8002104:	701a      	strb	r2, [r3, #0]
	}

	switch (status_movimiento) {
 8002106:	4b96      	ldr	r3, [pc, #600]	; (8002360 <movimientoRC+0x284>)
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	2b05      	cmp	r3, #5
 800210c:	f200 8176 	bhi.w	80023fc <movimientoRC+0x320>
 8002110:	a201      	add	r2, pc, #4	; (adr r2, 8002118 <movimientoRC+0x3c>)
 8002112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002116:	bf00      	nop
 8002118:	08002131 	.word	0x08002131
 800211c:	080021af 	.word	0x080021af
 8002120:	08002375 	.word	0x08002375
 8002124:	0800223b 	.word	0x0800223b
 8002128:	080022c7 	.word	0x080022c7
 800212c:	080023fd 	.word	0x080023fd
//			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 0);
//
//			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 0);
//			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 0);

			velL = 0;
 8002130:	4b8c      	ldr	r3, [pc, #560]	; (8002364 <movimientoRC+0x288>)
 8002132:	2200      	movs	r2, #0
 8002134:	701a      	strb	r2, [r3, #0]
			velR = 0;
 8002136:	4b8c      	ldr	r3, [pc, #560]	; (8002368 <movimientoRC+0x28c>)
 8002138:	2200      	movs	r2, #0
 800213a:	701a      	strb	r2, [r3, #0]

			//periodo_Encoder = 0;

			if (avance_cant != 0){
 800213c:	4b84      	ldr	r3, [pc, #528]	; (8002350 <movimientoRC+0x274>)
 800213e:	881b      	ldrh	r3, [r3, #0]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d009      	beq.n	8002158 <movimientoRC+0x7c>
				acum_encoderL = 0;
 8002144:	4b89      	ldr	r3, [pc, #548]	; (800236c <movimientoRC+0x290>)
 8002146:	2200      	movs	r2, #0
 8002148:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 800214a:	4b89      	ldr	r3, [pc, #548]	; (8002370 <movimientoRC+0x294>)
 800214c:	2200      	movs	r2, #0
 800214e:	801a      	strh	r2, [r3, #0]
				status_movimiento = AVANZANDO;
 8002150:	4b83      	ldr	r3, [pc, #524]	; (8002360 <movimientoRC+0x284>)
 8002152:	2201      	movs	r2, #1
 8002154:	701a      	strb	r2, [r3, #0]
				break;
 8002156:	e164      	b.n	8002422 <movimientoRC+0x346>
			}

			if (retroceso_cant != 0){
 8002158:	4b7e      	ldr	r3, [pc, #504]	; (8002354 <movimientoRC+0x278>)
 800215a:	881b      	ldrh	r3, [r3, #0]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d009      	beq.n	8002174 <movimientoRC+0x98>
				acum_encoderL = 0;
 8002160:	4b82      	ldr	r3, [pc, #520]	; (800236c <movimientoRC+0x290>)
 8002162:	2200      	movs	r2, #0
 8002164:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 8002166:	4b82      	ldr	r3, [pc, #520]	; (8002370 <movimientoRC+0x294>)
 8002168:	2200      	movs	r2, #0
 800216a:	801a      	strh	r2, [r3, #0]
				status_movimiento = RETROCEDIENDO;
 800216c:	4b7c      	ldr	r3, [pc, #496]	; (8002360 <movimientoRC+0x284>)
 800216e:	2202      	movs	r2, #2
 8002170:	701a      	strb	r2, [r3, #0]
				break;
 8002172:	e156      	b.n	8002422 <movimientoRC+0x346>
			}

			if (giroIzq_cant != 0){
 8002174:	4b78      	ldr	r3, [pc, #480]	; (8002358 <movimientoRC+0x27c>)
 8002176:	881b      	ldrh	r3, [r3, #0]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d009      	beq.n	8002190 <movimientoRC+0xb4>
				acum_encoderL = 0;
 800217c:	4b7b      	ldr	r3, [pc, #492]	; (800236c <movimientoRC+0x290>)
 800217e:	2200      	movs	r2, #0
 8002180:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 8002182:	4b7b      	ldr	r3, [pc, #492]	; (8002370 <movimientoRC+0x294>)
 8002184:	2200      	movs	r2, #0
 8002186:	801a      	strh	r2, [r3, #0]
				status_movimiento = ROTANDO_IZQ;
 8002188:	4b75      	ldr	r3, [pc, #468]	; (8002360 <movimientoRC+0x284>)
 800218a:	2203      	movs	r2, #3
 800218c:	701a      	strb	r2, [r3, #0]
				break;
 800218e:	e148      	b.n	8002422 <movimientoRC+0x346>
			}

			if (giroDer_cant != 0){
 8002190:	4b72      	ldr	r3, [pc, #456]	; (800235c <movimientoRC+0x280>)
 8002192:	881b      	ldrh	r3, [r3, #0]
 8002194:	2b00      	cmp	r3, #0
 8002196:	f000 8133 	beq.w	8002400 <movimientoRC+0x324>
				acum_encoderL = 0;
 800219a:	4b74      	ldr	r3, [pc, #464]	; (800236c <movimientoRC+0x290>)
 800219c:	2200      	movs	r2, #0
 800219e:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 80021a0:	4b73      	ldr	r3, [pc, #460]	; (8002370 <movimientoRC+0x294>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	801a      	strh	r2, [r3, #0]
				status_movimiento = ROTANDO_DER;
 80021a6:	4b6e      	ldr	r3, [pc, #440]	; (8002360 <movimientoRC+0x284>)
 80021a8:	2204      	movs	r2, #4
 80021aa:	701a      	strb	r2, [r3, #0]
				break;
 80021ac:	e139      	b.n	8002422 <movimientoRC+0x346>
//			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 1);
//
//			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 0);
//			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 0);

			velL = 5;
 80021ae:	4b6d      	ldr	r3, [pc, #436]	; (8002364 <movimientoRC+0x288>)
 80021b0:	2205      	movs	r2, #5
 80021b2:	701a      	strb	r2, [r3, #0]
			velR = 5;
 80021b4:	4b6c      	ldr	r3, [pc, #432]	; (8002368 <movimientoRC+0x28c>)
 80021b6:	2205      	movs	r2, #5
 80021b8:	701a      	strb	r2, [r3, #0]

			if (avance_cant > ((acum_encoderL + acum_encoderR) >> 1) ) break;
 80021ba:	4b65      	ldr	r3, [pc, #404]	; (8002350 <movimientoRC+0x274>)
 80021bc:	881b      	ldrh	r3, [r3, #0]
 80021be:	461a      	mov	r2, r3
 80021c0:	4b6a      	ldr	r3, [pc, #424]	; (800236c <movimientoRC+0x290>)
 80021c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021c6:	4619      	mov	r1, r3
 80021c8:	4b69      	ldr	r3, [pc, #420]	; (8002370 <movimientoRC+0x294>)
 80021ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021ce:	440b      	add	r3, r1
 80021d0:	105b      	asrs	r3, r3, #1
 80021d2:	429a      	cmp	r2, r3
 80021d4:	f300 8116 	bgt.w	8002404 <movimientoRC+0x328>

			avance_cant = 0;
 80021d8:	4b5d      	ldr	r3, [pc, #372]	; (8002350 <movimientoRC+0x274>)
 80021da:	2200      	movs	r2, #0
 80021dc:	801a      	strh	r2, [r3, #0]

			status_movimiento = QUIETO;
 80021de:	4b60      	ldr	r3, [pc, #384]	; (8002360 <movimientoRC+0x284>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	701a      	strb	r2, [r3, #0]

			if (retroceso_cant != 0){
 80021e4:	4b5b      	ldr	r3, [pc, #364]	; (8002354 <movimientoRC+0x278>)
 80021e6:	881b      	ldrh	r3, [r3, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d009      	beq.n	8002200 <movimientoRC+0x124>
				acum_encoderL = 0;
 80021ec:	4b5f      	ldr	r3, [pc, #380]	; (800236c <movimientoRC+0x290>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 80021f2:	4b5f      	ldr	r3, [pc, #380]	; (8002370 <movimientoRC+0x294>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	801a      	strh	r2, [r3, #0]
				status_movimiento = RETROCEDIENDO;
 80021f8:	4b59      	ldr	r3, [pc, #356]	; (8002360 <movimientoRC+0x284>)
 80021fa:	2202      	movs	r2, #2
 80021fc:	701a      	strb	r2, [r3, #0]
				break;
 80021fe:	e110      	b.n	8002422 <movimientoRC+0x346>
			}

			if (giroIzq_cant != 0){
 8002200:	4b55      	ldr	r3, [pc, #340]	; (8002358 <movimientoRC+0x27c>)
 8002202:	881b      	ldrh	r3, [r3, #0]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d009      	beq.n	800221c <movimientoRC+0x140>
				acum_encoderL = 0;
 8002208:	4b58      	ldr	r3, [pc, #352]	; (800236c <movimientoRC+0x290>)
 800220a:	2200      	movs	r2, #0
 800220c:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 800220e:	4b58      	ldr	r3, [pc, #352]	; (8002370 <movimientoRC+0x294>)
 8002210:	2200      	movs	r2, #0
 8002212:	801a      	strh	r2, [r3, #0]
				status_movimiento = ROTANDO_IZQ;
 8002214:	4b52      	ldr	r3, [pc, #328]	; (8002360 <movimientoRC+0x284>)
 8002216:	2203      	movs	r2, #3
 8002218:	701a      	strb	r2, [r3, #0]
				break;
 800221a:	e102      	b.n	8002422 <movimientoRC+0x346>
			}

			if (giroDer_cant != 0){
 800221c:	4b4f      	ldr	r3, [pc, #316]	; (800235c <movimientoRC+0x280>)
 800221e:	881b      	ldrh	r3, [r3, #0]
 8002220:	2b00      	cmp	r3, #0
 8002222:	f000 80f1 	beq.w	8002408 <movimientoRC+0x32c>
				acum_encoderL = 0;
 8002226:	4b51      	ldr	r3, [pc, #324]	; (800236c <movimientoRC+0x290>)
 8002228:	2200      	movs	r2, #0
 800222a:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 800222c:	4b50      	ldr	r3, [pc, #320]	; (8002370 <movimientoRC+0x294>)
 800222e:	2200      	movs	r2, #0
 8002230:	801a      	strh	r2, [r3, #0]
				status_movimiento = ROTANDO_DER;
 8002232:	4b4b      	ldr	r3, [pc, #300]	; (8002360 <movimientoRC+0x284>)
 8002234:	2204      	movs	r2, #4
 8002236:	701a      	strb	r2, [r3, #0]
				break;
 8002238:	e0f3      	b.n	8002422 <movimientoRC+0x346>
//			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 1);
//
//			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 1);
//			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 0);

			velL = -5;
 800223a:	4b4a      	ldr	r3, [pc, #296]	; (8002364 <movimientoRC+0x288>)
 800223c:	22fb      	movs	r2, #251	; 0xfb
 800223e:	701a      	strb	r2, [r3, #0]
			velR = 5;
 8002240:	4b49      	ldr	r3, [pc, #292]	; (8002368 <movimientoRC+0x28c>)
 8002242:	2205      	movs	r2, #5
 8002244:	701a      	strb	r2, [r3, #0]


			if (giroIzq_cant > ((acum_encoderL + acum_encoderR) >> 1) ) break;
 8002246:	4b44      	ldr	r3, [pc, #272]	; (8002358 <movimientoRC+0x27c>)
 8002248:	881b      	ldrh	r3, [r3, #0]
 800224a:	461a      	mov	r2, r3
 800224c:	4b47      	ldr	r3, [pc, #284]	; (800236c <movimientoRC+0x290>)
 800224e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002252:	4619      	mov	r1, r3
 8002254:	4b46      	ldr	r3, [pc, #280]	; (8002370 <movimientoRC+0x294>)
 8002256:	f9b3 3000 	ldrsh.w	r3, [r3]
 800225a:	440b      	add	r3, r1
 800225c:	105b      	asrs	r3, r3, #1
 800225e:	429a      	cmp	r2, r3
 8002260:	f300 80d4 	bgt.w	800240c <movimientoRC+0x330>

			giroIzq_cant = 0;
 8002264:	4b3c      	ldr	r3, [pc, #240]	; (8002358 <movimientoRC+0x27c>)
 8002266:	2200      	movs	r2, #0
 8002268:	801a      	strh	r2, [r3, #0]

			status_movimiento = QUIETO;
 800226a:	4b3d      	ldr	r3, [pc, #244]	; (8002360 <movimientoRC+0x284>)
 800226c:	2200      	movs	r2, #0
 800226e:	701a      	strb	r2, [r3, #0]

			if (avance_cant != 0){
 8002270:	4b37      	ldr	r3, [pc, #220]	; (8002350 <movimientoRC+0x274>)
 8002272:	881b      	ldrh	r3, [r3, #0]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d009      	beq.n	800228c <movimientoRC+0x1b0>
				acum_encoderL = 0;
 8002278:	4b3c      	ldr	r3, [pc, #240]	; (800236c <movimientoRC+0x290>)
 800227a:	2200      	movs	r2, #0
 800227c:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 800227e:	4b3c      	ldr	r3, [pc, #240]	; (8002370 <movimientoRC+0x294>)
 8002280:	2200      	movs	r2, #0
 8002282:	801a      	strh	r2, [r3, #0]
				status_movimiento = AVANZANDO;
 8002284:	4b36      	ldr	r3, [pc, #216]	; (8002360 <movimientoRC+0x284>)
 8002286:	2201      	movs	r2, #1
 8002288:	701a      	strb	r2, [r3, #0]
				break;
 800228a:	e0ca      	b.n	8002422 <movimientoRC+0x346>
			}

			if (retroceso_cant != 0){
 800228c:	4b31      	ldr	r3, [pc, #196]	; (8002354 <movimientoRC+0x278>)
 800228e:	881b      	ldrh	r3, [r3, #0]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d009      	beq.n	80022a8 <movimientoRC+0x1cc>
				acum_encoderL = 0;
 8002294:	4b35      	ldr	r3, [pc, #212]	; (800236c <movimientoRC+0x290>)
 8002296:	2200      	movs	r2, #0
 8002298:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 800229a:	4b35      	ldr	r3, [pc, #212]	; (8002370 <movimientoRC+0x294>)
 800229c:	2200      	movs	r2, #0
 800229e:	801a      	strh	r2, [r3, #0]
				status_movimiento = RETROCEDIENDO;
 80022a0:	4b2f      	ldr	r3, [pc, #188]	; (8002360 <movimientoRC+0x284>)
 80022a2:	2202      	movs	r2, #2
 80022a4:	701a      	strb	r2, [r3, #0]
				break;
 80022a6:	e0bc      	b.n	8002422 <movimientoRC+0x346>
			}

			if (giroDer_cant != 0){
 80022a8:	4b2c      	ldr	r3, [pc, #176]	; (800235c <movimientoRC+0x280>)
 80022aa:	881b      	ldrh	r3, [r3, #0]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	f000 80af 	beq.w	8002410 <movimientoRC+0x334>
				acum_encoderL = 0;
 80022b2:	4b2e      	ldr	r3, [pc, #184]	; (800236c <movimientoRC+0x290>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 80022b8:	4b2d      	ldr	r3, [pc, #180]	; (8002370 <movimientoRC+0x294>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	801a      	strh	r2, [r3, #0]
				status_movimiento = ROTANDO_DER;
 80022be:	4b28      	ldr	r3, [pc, #160]	; (8002360 <movimientoRC+0x284>)
 80022c0:	2204      	movs	r2, #4
 80022c2:	701a      	strb	r2, [r3, #0]
				break;
 80022c4:	e0ad      	b.n	8002422 <movimientoRC+0x346>
//			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 0);
//
//			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 0);
//			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 1);

			velL = 5;
 80022c6:	4b27      	ldr	r3, [pc, #156]	; (8002364 <movimientoRC+0x288>)
 80022c8:	2205      	movs	r2, #5
 80022ca:	701a      	strb	r2, [r3, #0]
			velR = -5;
 80022cc:	4b26      	ldr	r3, [pc, #152]	; (8002368 <movimientoRC+0x28c>)
 80022ce:	22fb      	movs	r2, #251	; 0xfb
 80022d0:	701a      	strb	r2, [r3, #0]

			if (giroDer_cant > ((acum_encoderL + acum_encoderR) >> 1) ) break;
 80022d2:	4b22      	ldr	r3, [pc, #136]	; (800235c <movimientoRC+0x280>)
 80022d4:	881b      	ldrh	r3, [r3, #0]
 80022d6:	461a      	mov	r2, r3
 80022d8:	4b24      	ldr	r3, [pc, #144]	; (800236c <movimientoRC+0x290>)
 80022da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022de:	4619      	mov	r1, r3
 80022e0:	4b23      	ldr	r3, [pc, #140]	; (8002370 <movimientoRC+0x294>)
 80022e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022e6:	440b      	add	r3, r1
 80022e8:	105b      	asrs	r3, r3, #1
 80022ea:	429a      	cmp	r2, r3
 80022ec:	f300 8092 	bgt.w	8002414 <movimientoRC+0x338>

			giroDer_cant = 0;
 80022f0:	4b1a      	ldr	r3, [pc, #104]	; (800235c <movimientoRC+0x280>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	801a      	strh	r2, [r3, #0]

			status_movimiento = QUIETO;
 80022f6:	4b1a      	ldr	r3, [pc, #104]	; (8002360 <movimientoRC+0x284>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	701a      	strb	r2, [r3, #0]

			if (avance_cant != 0){
 80022fc:	4b14      	ldr	r3, [pc, #80]	; (8002350 <movimientoRC+0x274>)
 80022fe:	881b      	ldrh	r3, [r3, #0]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d009      	beq.n	8002318 <movimientoRC+0x23c>
				acum_encoderL = 0;
 8002304:	4b19      	ldr	r3, [pc, #100]	; (800236c <movimientoRC+0x290>)
 8002306:	2200      	movs	r2, #0
 8002308:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 800230a:	4b19      	ldr	r3, [pc, #100]	; (8002370 <movimientoRC+0x294>)
 800230c:	2200      	movs	r2, #0
 800230e:	801a      	strh	r2, [r3, #0]
				status_movimiento = AVANZANDO;
 8002310:	4b13      	ldr	r3, [pc, #76]	; (8002360 <movimientoRC+0x284>)
 8002312:	2201      	movs	r2, #1
 8002314:	701a      	strb	r2, [r3, #0]
				break;
 8002316:	e084      	b.n	8002422 <movimientoRC+0x346>
			}

			if (retroceso_cant != 0){
 8002318:	4b0e      	ldr	r3, [pc, #56]	; (8002354 <movimientoRC+0x278>)
 800231a:	881b      	ldrh	r3, [r3, #0]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d009      	beq.n	8002334 <movimientoRC+0x258>
				acum_encoderL = 0;
 8002320:	4b12      	ldr	r3, [pc, #72]	; (800236c <movimientoRC+0x290>)
 8002322:	2200      	movs	r2, #0
 8002324:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 8002326:	4b12      	ldr	r3, [pc, #72]	; (8002370 <movimientoRC+0x294>)
 8002328:	2200      	movs	r2, #0
 800232a:	801a      	strh	r2, [r3, #0]
				status_movimiento = RETROCEDIENDO;
 800232c:	4b0c      	ldr	r3, [pc, #48]	; (8002360 <movimientoRC+0x284>)
 800232e:	2202      	movs	r2, #2
 8002330:	701a      	strb	r2, [r3, #0]
				break;
 8002332:	e076      	b.n	8002422 <movimientoRC+0x346>
			}

			if (giroIzq_cant != 0){
 8002334:	4b08      	ldr	r3, [pc, #32]	; (8002358 <movimientoRC+0x27c>)
 8002336:	881b      	ldrh	r3, [r3, #0]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d06d      	beq.n	8002418 <movimientoRC+0x33c>
				acum_encoderL = 0;
 800233c:	4b0b      	ldr	r3, [pc, #44]	; (800236c <movimientoRC+0x290>)
 800233e:	2200      	movs	r2, #0
 8002340:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 8002342:	4b0b      	ldr	r3, [pc, #44]	; (8002370 <movimientoRC+0x294>)
 8002344:	2200      	movs	r2, #0
 8002346:	801a      	strh	r2, [r3, #0]
				status_movimiento = ROTANDO_IZQ;
 8002348:	4b05      	ldr	r3, [pc, #20]	; (8002360 <movimientoRC+0x284>)
 800234a:	2203      	movs	r2, #3
 800234c:	701a      	strb	r2, [r3, #0]
				break;
 800234e:	e068      	b.n	8002422 <movimientoRC+0x346>
 8002350:	2000005c 	.word	0x2000005c
 8002354:	2000005e 	.word	0x2000005e
 8002358:	20000060 	.word	0x20000060
 800235c:	20000062 	.word	0x20000062
 8002360:	20000058 	.word	0x20000058
 8002364:	20000022 	.word	0x20000022
 8002368:	20000023 	.word	0x20000023
 800236c:	20000084 	.word	0x20000084
 8002370:	20000086 	.word	0x20000086
//			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 0);
//
//			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 1);
//			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 1);

			velL = -5;
 8002374:	4b2d      	ldr	r3, [pc, #180]	; (800242c <movimientoRC+0x350>)
 8002376:	22fb      	movs	r2, #251	; 0xfb
 8002378:	701a      	strb	r2, [r3, #0]
			velR = -5;
 800237a:	4b2d      	ldr	r3, [pc, #180]	; (8002430 <movimientoRC+0x354>)
 800237c:	22fb      	movs	r2, #251	; 0xfb
 800237e:	701a      	strb	r2, [r3, #0]


			if (retroceso_cant > ((acum_encoderL + acum_encoderR) >> 1) ) break;
 8002380:	4b2c      	ldr	r3, [pc, #176]	; (8002434 <movimientoRC+0x358>)
 8002382:	881b      	ldrh	r3, [r3, #0]
 8002384:	461a      	mov	r2, r3
 8002386:	4b2c      	ldr	r3, [pc, #176]	; (8002438 <movimientoRC+0x35c>)
 8002388:	f9b3 3000 	ldrsh.w	r3, [r3]
 800238c:	4619      	mov	r1, r3
 800238e:	4b2b      	ldr	r3, [pc, #172]	; (800243c <movimientoRC+0x360>)
 8002390:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002394:	440b      	add	r3, r1
 8002396:	105b      	asrs	r3, r3, #1
 8002398:	429a      	cmp	r2, r3
 800239a:	dc3f      	bgt.n	800241c <movimientoRC+0x340>

			retroceso_cant = 0;
 800239c:	4b25      	ldr	r3, [pc, #148]	; (8002434 <movimientoRC+0x358>)
 800239e:	2200      	movs	r2, #0
 80023a0:	801a      	strh	r2, [r3, #0]

			status_movimiento = QUIETO;
 80023a2:	4b27      	ldr	r3, [pc, #156]	; (8002440 <movimientoRC+0x364>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	701a      	strb	r2, [r3, #0]

			if (avance_cant != 0){
 80023a8:	4b26      	ldr	r3, [pc, #152]	; (8002444 <movimientoRC+0x368>)
 80023aa:	881b      	ldrh	r3, [r3, #0]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d009      	beq.n	80023c4 <movimientoRC+0x2e8>
				acum_encoderL = 0;
 80023b0:	4b21      	ldr	r3, [pc, #132]	; (8002438 <movimientoRC+0x35c>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 80023b6:	4b21      	ldr	r3, [pc, #132]	; (800243c <movimientoRC+0x360>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	801a      	strh	r2, [r3, #0]
				status_movimiento = AVANZANDO;
 80023bc:	4b20      	ldr	r3, [pc, #128]	; (8002440 <movimientoRC+0x364>)
 80023be:	2201      	movs	r2, #1
 80023c0:	701a      	strb	r2, [r3, #0]
				break;
 80023c2:	e02e      	b.n	8002422 <movimientoRC+0x346>
			}

			if (giroIzq_cant != 0){
 80023c4:	4b20      	ldr	r3, [pc, #128]	; (8002448 <movimientoRC+0x36c>)
 80023c6:	881b      	ldrh	r3, [r3, #0]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d009      	beq.n	80023e0 <movimientoRC+0x304>
				acum_encoderL = 0;
 80023cc:	4b1a      	ldr	r3, [pc, #104]	; (8002438 <movimientoRC+0x35c>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 80023d2:	4b1a      	ldr	r3, [pc, #104]	; (800243c <movimientoRC+0x360>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	801a      	strh	r2, [r3, #0]
				status_movimiento = ROTANDO_IZQ;
 80023d8:	4b19      	ldr	r3, [pc, #100]	; (8002440 <movimientoRC+0x364>)
 80023da:	2203      	movs	r2, #3
 80023dc:	701a      	strb	r2, [r3, #0]
				break;
 80023de:	e020      	b.n	8002422 <movimientoRC+0x346>
			}

			if (giroDer_cant != 0){
 80023e0:	4b1a      	ldr	r3, [pc, #104]	; (800244c <movimientoRC+0x370>)
 80023e2:	881b      	ldrh	r3, [r3, #0]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d01b      	beq.n	8002420 <movimientoRC+0x344>
				acum_encoderL = 0;
 80023e8:	4b13      	ldr	r3, [pc, #76]	; (8002438 <movimientoRC+0x35c>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 80023ee:	4b13      	ldr	r3, [pc, #76]	; (800243c <movimientoRC+0x360>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	801a      	strh	r2, [r3, #0]
				status_movimiento = ROTANDO_DER;
 80023f4:	4b12      	ldr	r3, [pc, #72]	; (8002440 <movimientoRC+0x364>)
 80023f6:	2204      	movs	r2, #4
 80023f8:	701a      	strb	r2, [r3, #0]
				break;
 80023fa:	e012      	b.n	8002422 <movimientoRC+0x346>

		break;
		case PIVOTE_DER_AVAN:

		default:
		break;
 80023fc:	bf00      	nop
 80023fe:	e010      	b.n	8002422 <movimientoRC+0x346>
		break;
 8002400:	bf00      	nop
 8002402:	e00e      	b.n	8002422 <movimientoRC+0x346>
			if (avance_cant > ((acum_encoderL + acum_encoderR) >> 1) ) break;
 8002404:	bf00      	nop
 8002406:	e00c      	b.n	8002422 <movimientoRC+0x346>
		break;
 8002408:	bf00      	nop
 800240a:	e00a      	b.n	8002422 <movimientoRC+0x346>
			if (giroIzq_cant > ((acum_encoderL + acum_encoderR) >> 1) ) break;
 800240c:	bf00      	nop
 800240e:	e008      	b.n	8002422 <movimientoRC+0x346>
		break;
 8002410:	bf00      	nop
 8002412:	e006      	b.n	8002422 <movimientoRC+0x346>
			if (giroDer_cant > ((acum_encoderL + acum_encoderR) >> 1) ) break;
 8002414:	bf00      	nop
 8002416:	e004      	b.n	8002422 <movimientoRC+0x346>
		break;
 8002418:	bf00      	nop
 800241a:	e002      	b.n	8002422 <movimientoRC+0x346>
			if (retroceso_cant > ((acum_encoderL + acum_encoderR) >> 1) ) break;
 800241c:	bf00      	nop
 800241e:	e000      	b.n	8002422 <movimientoRC+0x346>
		break;
 8002420:	bf00      	nop

	} //fin switch status_movimiento

} //fin movimientoRC()
 8002422:	bf00      	nop
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr
 800242c:	20000022 	.word	0x20000022
 8002430:	20000023 	.word	0x20000023
 8002434:	2000005e 	.word	0x2000005e
 8002438:	20000084 	.word	0x20000084
 800243c:	20000086 	.word	0x20000086
 8002440:	20000058 	.word	0x20000058
 8002444:	2000005c 	.word	0x2000005c
 8002448:	20000060 	.word	0x20000060
 800244c:	20000062 	.word	0x20000062

08002450 <orientando>:

void orientando (void){
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0

	switch (estatusOrientando) {
 8002454:	4b40      	ldr	r3, [pc, #256]	; (8002558 <orientando+0x108>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b04      	cmp	r3, #4
 800245c:	d875      	bhi.n	800254a <orientando+0xfa>
 800245e:	a201      	add	r2, pc, #4	; (adr r2, 8002464 <orientando+0x14>)
 8002460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002464:	08002479 	.word	0x08002479
 8002468:	08002493 	.word	0x08002493
 800246c:	080024cf 	.word	0x080024cf
 8002470:	080024e1 	.word	0x080024e1
 8002474:	08002527 	.word	0x08002527
		case 0:
			velL = -4;
 8002478:	4b38      	ldr	r3, [pc, #224]	; (800255c <orientando+0x10c>)
 800247a:	22fc      	movs	r2, #252	; 0xfc
 800247c:	701a      	strb	r2, [r3, #0]
			velR = +4;
 800247e:	4b38      	ldr	r3, [pc, #224]	; (8002560 <orientando+0x110>)
 8002480:	2204      	movs	r2, #4
 8002482:	701a      	strb	r2, [r3, #0]
			giroIzq_cant = 170;
 8002484:	4b37      	ldr	r3, [pc, #220]	; (8002564 <orientando+0x114>)
 8002486:	22aa      	movs	r2, #170	; 0xaa
 8002488:	801a      	strh	r2, [r3, #0]
			estatusOrientando = 1;
 800248a:	4b33      	ldr	r3, [pc, #204]	; (8002558 <orientando+0x108>)
 800248c:	2201      	movs	r2, #1
 800248e:	701a      	strb	r2, [r3, #0]
		break;
 8002490:	e060      	b.n	8002554 <orientando+0x104>
		case 1:
			if (giroIzq_cant < ((acum_encoderL + acum_encoderR) >> 1) ){
 8002492:	4b34      	ldr	r3, [pc, #208]	; (8002564 <orientando+0x114>)
 8002494:	881b      	ldrh	r3, [r3, #0]
 8002496:	461a      	mov	r2, r3
 8002498:	4b33      	ldr	r3, [pc, #204]	; (8002568 <orientando+0x118>)
 800249a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800249e:	4619      	mov	r1, r3
 80024a0:	4b32      	ldr	r3, [pc, #200]	; (800256c <orientando+0x11c>)
 80024a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024a6:	440b      	add	r3, r1
 80024a8:	105b      	asrs	r3, r3, #1
 80024aa:	429a      	cmp	r2, r3
 80024ac:	da4f      	bge.n	800254e <orientando+0xfe>
				velL = 0;
 80024ae:	4b2b      	ldr	r3, [pc, #172]	; (800255c <orientando+0x10c>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	701a      	strb	r2, [r3, #0]
				velR = 0;
 80024b4:	4b2a      	ldr	r3, [pc, #168]	; (8002560 <orientando+0x110>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	701a      	strb	r2, [r3, #0]
				giroIzq_cant = 0;
 80024ba:	4b2a      	ldr	r3, [pc, #168]	; (8002564 <orientando+0x114>)
 80024bc:	2200      	movs	r2, #0
 80024be:	801a      	strh	r2, [r3, #0]
				estatusOrientando = 2;
 80024c0:	4b25      	ldr	r3, [pc, #148]	; (8002558 <orientando+0x108>)
 80024c2:	2202      	movs	r2, #2
 80024c4:	701a      	strb	r2, [r3, #0]
				ticks_orientando = 200;
 80024c6:	4b2a      	ldr	r3, [pc, #168]	; (8002570 <orientando+0x120>)
 80024c8:	22c8      	movs	r2, #200	; 0xc8
 80024ca:	801a      	strh	r2, [r3, #0]
			}
		break;
 80024cc:	e03f      	b.n	800254e <orientando+0xfe>
		case 2:
			if (!ticks_orientando){
 80024ce:	4b28      	ldr	r3, [pc, #160]	; (8002570 <orientando+0x120>)
 80024d0:	881b      	ldrh	r3, [r3, #0]
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d13c      	bne.n	8002552 <orientando+0x102>
				estatusOrientando = 3;
 80024d8:	4b1f      	ldr	r3, [pc, #124]	; (8002558 <orientando+0x108>)
 80024da:	2203      	movs	r2, #3
 80024dc:	701a      	strb	r2, [r3, #0]
			}
		break;
 80024de:	e038      	b.n	8002552 <orientando+0x102>
		case 3:
			if (direccionMag_grad_i16 > 17){
 80024e0:	4b24      	ldr	r3, [pc, #144]	; (8002574 <orientando+0x124>)
 80024e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024e6:	2b11      	cmp	r3, #17
 80024e8:	dd06      	ble.n	80024f8 <orientando+0xa8>
				velL = +4;
 80024ea:	4b1c      	ldr	r3, [pc, #112]	; (800255c <orientando+0x10c>)
 80024ec:	2204      	movs	r2, #4
 80024ee:	701a      	strb	r2, [r3, #0]
				velR = -4;
 80024f0:	4b1b      	ldr	r3, [pc, #108]	; (8002560 <orientando+0x110>)
 80024f2:	22fc      	movs	r2, #252	; 0xfc
 80024f4:	701a      	strb	r2, [r3, #0]
				velL = 0;
				velR = 0;
				estatusOrientando = 4;
			}

		break;
 80024f6:	e02d      	b.n	8002554 <orientando+0x104>
			}else if (direccionMag_grad_i16 < -17){
 80024f8:	4b1e      	ldr	r3, [pc, #120]	; (8002574 <orientando+0x124>)
 80024fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024fe:	f113 0f11 	cmn.w	r3, #17
 8002502:	da06      	bge.n	8002512 <orientando+0xc2>
				velL = -4;
 8002504:	4b15      	ldr	r3, [pc, #84]	; (800255c <orientando+0x10c>)
 8002506:	22fc      	movs	r2, #252	; 0xfc
 8002508:	701a      	strb	r2, [r3, #0]
				velR = +4;
 800250a:	4b15      	ldr	r3, [pc, #84]	; (8002560 <orientando+0x110>)
 800250c:	2204      	movs	r2, #4
 800250e:	701a      	strb	r2, [r3, #0]
		break;
 8002510:	e020      	b.n	8002554 <orientando+0x104>
				velL = 0;
 8002512:	4b12      	ldr	r3, [pc, #72]	; (800255c <orientando+0x10c>)
 8002514:	2200      	movs	r2, #0
 8002516:	701a      	strb	r2, [r3, #0]
				velR = 0;
 8002518:	4b11      	ldr	r3, [pc, #68]	; (8002560 <orientando+0x110>)
 800251a:	2200      	movs	r2, #0
 800251c:	701a      	strb	r2, [r3, #0]
				estatusOrientando = 4;
 800251e:	4b0e      	ldr	r3, [pc, #56]	; (8002558 <orientando+0x108>)
 8002520:	2204      	movs	r2, #4
 8002522:	701a      	strb	r2, [r3, #0]
		break;
 8002524:	e016      	b.n	8002554 <orientando+0x104>
		case 4:
			modoFuncionamiento = MANUAL;
 8002526:	4b14      	ldr	r3, [pc, #80]	; (8002578 <orientando+0x128>)
 8002528:	2201      	movs	r2, #1
 800252a:	701a      	strb	r2, [r3, #0]
			estatusOrientando = 0;
 800252c:	4b0a      	ldr	r3, [pc, #40]	; (8002558 <orientando+0x108>)
 800252e:	2200      	movs	r2, #0
 8002530:	701a      	strb	r2, [r3, #0]
			sprintf((char*)txUart, "modMAN");
 8002532:	4b12      	ldr	r3, [pc, #72]	; (800257c <orientando+0x12c>)
 8002534:	4a12      	ldr	r2, [pc, #72]	; (8002580 <orientando+0x130>)
 8002536:	6810      	ldr	r0, [r2, #0]
 8002538:	6018      	str	r0, [r3, #0]
 800253a:	8891      	ldrh	r1, [r2, #4]
 800253c:	7992      	ldrb	r2, [r2, #6]
 800253e:	8099      	strh	r1, [r3, #4]
 8002540:	719a      	strb	r2, [r3, #6]
			send_info(txUart);
 8002542:	480e      	ldr	r0, [pc, #56]	; (800257c <orientando+0x12c>)
 8002544:	f7ff f804 	bl	8001550 <send_info>
		break;
 8002548:	e004      	b.n	8002554 <orientando+0x104>
		default:
		break;
 800254a:	bf00      	nop
 800254c:	e002      	b.n	8002554 <orientando+0x104>
		break;
 800254e:	bf00      	nop
 8002550:	e000      	b.n	8002554 <orientando+0x104>
		break;
 8002552:	bf00      	nop
	}

} //fin orientando ()
 8002554:	bf00      	nop
 8002556:	bd80      	pop	{r7, pc}
 8002558:	20000053 	.word	0x20000053
 800255c:	20000022 	.word	0x20000022
 8002560:	20000023 	.word	0x20000023
 8002564:	20000060 	.word	0x20000060
 8002568:	20000084 	.word	0x20000084
 800256c:	20000086 	.word	0x20000086
 8002570:	20000000 	.word	0x20000000
 8002574:	200002c0 	.word	0x200002c0
 8002578:	20000004 	.word	0x20000004
 800257c:	200002c8 	.word	0x200002c8
 8002580:	08008e40 	.word	0x08008e40
 8002584:	00000000 	.word	0x00000000

08002588 <mov_puntoAPunto>:


void mov_puntoAPunto (void){
 8002588:	b598      	push	{r3, r4, r7, lr}
 800258a:	af00      	add	r7, sp, #0

	switch (estatusPuntoAPunto) {
 800258c:	4b98      	ldr	r3, [pc, #608]	; (80027f0 <mov_puntoAPunto+0x268>)
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b04      	cmp	r3, #4
 8002594:	f200 8259 	bhi.w	8002a4a <mov_puntoAPunto+0x4c2>
 8002598:	a201      	add	r2, pc, #4	; (adr r2, 80025a0 <mov_puntoAPunto+0x18>)
 800259a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800259e:	bf00      	nop
 80025a0:	080025b5 	.word	0x080025b5
 80025a4:	080025dd 	.word	0x080025dd
 80025a8:	0800275b 	.word	0x0800275b
 80025ac:	0800297f 	.word	0x0800297f
 80025b0:	08002a1d 	.word	0x08002a1d
		case 0: //espera destino
			if(flag_dest != 0){
 80025b4:	4b8f      	ldr	r3, [pc, #572]	; (80027f4 <mov_puntoAPunto+0x26c>)
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	f000 8241 	beq.w	8002a40 <mov_puntoAPunto+0x4b8>
				estatusPuntoAPunto = 1;
 80025be:	4b8c      	ldr	r3, [pc, #560]	; (80027f0 <mov_puntoAPunto+0x268>)
 80025c0:	2201      	movs	r2, #1
 80025c2:	701a      	strb	r2, [r3, #0]
				sprintf((char*)txUart, "girand");
 80025c4:	4b8c      	ldr	r3, [pc, #560]	; (80027f8 <mov_puntoAPunto+0x270>)
 80025c6:	4a8d      	ldr	r2, [pc, #564]	; (80027fc <mov_puntoAPunto+0x274>)
 80025c8:	6810      	ldr	r0, [r2, #0]
 80025ca:	6018      	str	r0, [r3, #0]
 80025cc:	8891      	ldrh	r1, [r2, #4]
 80025ce:	7992      	ldrb	r2, [r2, #6]
 80025d0:	8099      	strh	r1, [r3, #4]
 80025d2:	719a      	strb	r2, [r3, #6]
				send_info(txUart);
 80025d4:	4888      	ldr	r0, [pc, #544]	; (80027f8 <mov_puntoAPunto+0x270>)
 80025d6:	f7fe ffbb 	bl	8001550 <send_info>
			}
		break;
 80025da:	e231      	b.n	8002a40 <mov_puntoAPunto+0x4b8>
		case 1: //gira al destino
			deltaX_dest = posX_dest - posX_i16;
 80025dc:	4b88      	ldr	r3, [pc, #544]	; (8002800 <mov_puntoAPunto+0x278>)
 80025de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	4b87      	ldr	r3, [pc, #540]	; (8002804 <mov_puntoAPunto+0x27c>)
 80025e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	b21a      	sxth	r2, r3
 80025f2:	4b85      	ldr	r3, [pc, #532]	; (8002808 <mov_puntoAPunto+0x280>)
 80025f4:	801a      	strh	r2, [r3, #0]
			deltaY_dest = posY_dest - posY_i16;
 80025f6:	4b85      	ldr	r3, [pc, #532]	; (800280c <mov_puntoAPunto+0x284>)
 80025f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025fc:	b29a      	uxth	r2, r3
 80025fe:	4b84      	ldr	r3, [pc, #528]	; (8002810 <mov_puntoAPunto+0x288>)
 8002600:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002604:	b29b      	uxth	r3, r3
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	b29b      	uxth	r3, r3
 800260a:	b21a      	sxth	r2, r3
 800260c:	4b81      	ldr	r3, [pc, #516]	; (8002814 <mov_puntoAPunto+0x28c>)
 800260e:	801a      	strh	r2, [r3, #0]
			anguloDest_rad_f32 = atan2f(deltaY_dest, deltaX_dest);
 8002610:	4b80      	ldr	r3, [pc, #512]	; (8002814 <mov_puntoAPunto+0x28c>)
 8002612:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002616:	ee07 3a90 	vmov	s15, r3
 800261a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800261e:	4b7a      	ldr	r3, [pc, #488]	; (8002808 <mov_puntoAPunto+0x280>)
 8002620:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002624:	ee07 3a10 	vmov	s14, r3
 8002628:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800262c:	eef0 0a47 	vmov.f32	s1, s14
 8002630:	eeb0 0a67 	vmov.f32	s0, s15
 8002634:	f005 fd6a 	bl	800810c <atan2f>
 8002638:	eef0 7a40 	vmov.f32	s15, s0
 800263c:	4b76      	ldr	r3, [pc, #472]	; (8002818 <mov_puntoAPunto+0x290>)
 800263e:	edc3 7a00 	vstr	s15, [r3]
			anguloDest_grad_f32 = anguloDest_rad_f32 * 180.0 / M_PI; //grados en float
 8002642:	4b75      	ldr	r3, [pc, #468]	; (8002818 <mov_puntoAPunto+0x290>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4618      	mov	r0, r3
 8002648:	f7fd ff36 	bl	80004b8 <__aeabi_f2d>
 800264c:	f04f 0200 	mov.w	r2, #0
 8002650:	4b72      	ldr	r3, [pc, #456]	; (800281c <mov_puntoAPunto+0x294>)
 8002652:	f7fd ff89 	bl	8000568 <__aeabi_dmul>
 8002656:	4603      	mov	r3, r0
 8002658:	460c      	mov	r4, r1
 800265a:	4618      	mov	r0, r3
 800265c:	4621      	mov	r1, r4
 800265e:	a362      	add	r3, pc, #392	; (adr r3, 80027e8 <mov_puntoAPunto+0x260>)
 8002660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002664:	f7fe f8aa 	bl	80007bc <__aeabi_ddiv>
 8002668:	4603      	mov	r3, r0
 800266a:	460c      	mov	r4, r1
 800266c:	4618      	mov	r0, r3
 800266e:	4621      	mov	r1, r4
 8002670:	f7fe f98c 	bl	800098c <__aeabi_d2f>
 8002674:	4602      	mov	r2, r0
 8002676:	4b6a      	ldr	r3, [pc, #424]	; (8002820 <mov_puntoAPunto+0x298>)
 8002678:	601a      	str	r2, [r3, #0]
			anguloDest_grad_i16 = anguloDest_grad_f32; //grados en int16
 800267a:	4b69      	ldr	r3, [pc, #420]	; (8002820 <mov_puntoAPunto+0x298>)
 800267c:	edd3 7a00 	vldr	s15, [r3]
 8002680:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002684:	ee17 3a90 	vmov	r3, s15
 8002688:	b21a      	sxth	r2, r3
 800268a:	4b66      	ldr	r3, [pc, #408]	; (8002824 <mov_puntoAPunto+0x29c>)
 800268c:	801a      	strh	r2, [r3, #0]

			deltaAng_dest = anguloDest_grad_i16 - direccionMag_grad_i16;
 800268e:	4b65      	ldr	r3, [pc, #404]	; (8002824 <mov_puntoAPunto+0x29c>)
 8002690:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002694:	b29a      	uxth	r2, r3
 8002696:	4b64      	ldr	r3, [pc, #400]	; (8002828 <mov_puntoAPunto+0x2a0>)
 8002698:	f9b3 3000 	ldrsh.w	r3, [r3]
 800269c:	b29b      	uxth	r3, r3
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	b21a      	sxth	r2, r3
 80026a4:	4b61      	ldr	r3, [pc, #388]	; (800282c <mov_puntoAPunto+0x2a4>)
 80026a6:	801a      	strh	r2, [r3, #0]
			if (deltaAng_dest > 180) deltaAng_dest -= 360;
 80026a8:	4b60      	ldr	r3, [pc, #384]	; (800282c <mov_puntoAPunto+0x2a4>)
 80026aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026ae:	2bb4      	cmp	r3, #180	; 0xb4
 80026b0:	dd09      	ble.n	80026c6 <mov_puntoAPunto+0x13e>
 80026b2:	4b5e      	ldr	r3, [pc, #376]	; (800282c <mov_puntoAPunto+0x2a4>)
 80026b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80026be:	b29b      	uxth	r3, r3
 80026c0:	b21a      	sxth	r2, r3
 80026c2:	4b5a      	ldr	r3, [pc, #360]	; (800282c <mov_puntoAPunto+0x2a4>)
 80026c4:	801a      	strh	r2, [r3, #0]
			if (deltaAng_dest < -180) deltaAng_dest += 360;
 80026c6:	4b59      	ldr	r3, [pc, #356]	; (800282c <mov_puntoAPunto+0x2a4>)
 80026c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026cc:	f113 0fb4 	cmn.w	r3, #180	; 0xb4
 80026d0:	da09      	bge.n	80026e6 <mov_puntoAPunto+0x15e>
 80026d2:	4b56      	ldr	r3, [pc, #344]	; (800282c <mov_puntoAPunto+0x2a4>)
 80026d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026d8:	b29b      	uxth	r3, r3
 80026da:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80026de:	b29b      	uxth	r3, r3
 80026e0:	b21a      	sxth	r2, r3
 80026e2:	4b52      	ldr	r3, [pc, #328]	; (800282c <mov_puntoAPunto+0x2a4>)
 80026e4:	801a      	strh	r2, [r3, #0]

			if (deltaAng_dest > 17){
 80026e6:	4b51      	ldr	r3, [pc, #324]	; (800282c <mov_puntoAPunto+0x2a4>)
 80026e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026ec:	2b11      	cmp	r3, #17
 80026ee:	dd09      	ble.n	8002704 <mov_puntoAPunto+0x17c>
				velL = -4;
 80026f0:	4b4f      	ldr	r3, [pc, #316]	; (8002830 <mov_puntoAPunto+0x2a8>)
 80026f2:	22fc      	movs	r2, #252	; 0xfc
 80026f4:	701a      	strb	r2, [r3, #0]
				velR = +4;
 80026f6:	4b4f      	ldr	r3, [pc, #316]	; (8002834 <mov_puntoAPunto+0x2ac>)
 80026f8:	2204      	movs	r2, #4
 80026fa:	701a      	strb	r2, [r3, #0]
				ticks_PuntoAPunto = 20;
 80026fc:	4b4e      	ldr	r3, [pc, #312]	; (8002838 <mov_puntoAPunto+0x2b0>)
 80026fe:	2214      	movs	r2, #20
 8002700:	801a      	strh	r2, [r3, #0]
					sprintf((char*)txUart, "avanza");
					send_info(txUart);
				}
			}

		break;
 8002702:	e19f      	b.n	8002a44 <mov_puntoAPunto+0x4bc>
			}else if (deltaAng_dest < -17){
 8002704:	4b49      	ldr	r3, [pc, #292]	; (800282c <mov_puntoAPunto+0x2a4>)
 8002706:	f9b3 3000 	ldrsh.w	r3, [r3]
 800270a:	f113 0f11 	cmn.w	r3, #17
 800270e:	da09      	bge.n	8002724 <mov_puntoAPunto+0x19c>
				velL = +4;
 8002710:	4b47      	ldr	r3, [pc, #284]	; (8002830 <mov_puntoAPunto+0x2a8>)
 8002712:	2204      	movs	r2, #4
 8002714:	701a      	strb	r2, [r3, #0]
				velR = -4;
 8002716:	4b47      	ldr	r3, [pc, #284]	; (8002834 <mov_puntoAPunto+0x2ac>)
 8002718:	22fc      	movs	r2, #252	; 0xfc
 800271a:	701a      	strb	r2, [r3, #0]
				ticks_PuntoAPunto = 20;
 800271c:	4b46      	ldr	r3, [pc, #280]	; (8002838 <mov_puntoAPunto+0x2b0>)
 800271e:	2214      	movs	r2, #20
 8002720:	801a      	strh	r2, [r3, #0]
		break;
 8002722:	e18f      	b.n	8002a44 <mov_puntoAPunto+0x4bc>
				velL = 0;
 8002724:	4b42      	ldr	r3, [pc, #264]	; (8002830 <mov_puntoAPunto+0x2a8>)
 8002726:	2200      	movs	r2, #0
 8002728:	701a      	strb	r2, [r3, #0]
				velR = 0;
 800272a:	4b42      	ldr	r3, [pc, #264]	; (8002834 <mov_puntoAPunto+0x2ac>)
 800272c:	2200      	movs	r2, #0
 800272e:	701a      	strb	r2, [r3, #0]
				if (!ticks_PuntoAPunto){
 8002730:	4b41      	ldr	r3, [pc, #260]	; (8002838 <mov_puntoAPunto+0x2b0>)
 8002732:	881b      	ldrh	r3, [r3, #0]
 8002734:	b29b      	uxth	r3, r3
 8002736:	2b00      	cmp	r3, #0
 8002738:	f040 8184 	bne.w	8002a44 <mov_puntoAPunto+0x4bc>
					estatusPuntoAPunto = 2;
 800273c:	4b2c      	ldr	r3, [pc, #176]	; (80027f0 <mov_puntoAPunto+0x268>)
 800273e:	2202      	movs	r2, #2
 8002740:	701a      	strb	r2, [r3, #0]
					sprintf((char*)txUart, "avanza");
 8002742:	4b2d      	ldr	r3, [pc, #180]	; (80027f8 <mov_puntoAPunto+0x270>)
 8002744:	4a3d      	ldr	r2, [pc, #244]	; (800283c <mov_puntoAPunto+0x2b4>)
 8002746:	6810      	ldr	r0, [r2, #0]
 8002748:	6018      	str	r0, [r3, #0]
 800274a:	8891      	ldrh	r1, [r2, #4]
 800274c:	7992      	ldrb	r2, [r2, #6]
 800274e:	8099      	strh	r1, [r3, #4]
 8002750:	719a      	strb	r2, [r3, #6]
					send_info(txUart);
 8002752:	4829      	ldr	r0, [pc, #164]	; (80027f8 <mov_puntoAPunto+0x270>)
 8002754:	f7fe fefc 	bl	8001550 <send_info>
		break;
 8002758:	e174      	b.n	8002a44 <mov_puntoAPunto+0x4bc>
		case 2: //avanza al destino
			deltaX_dest = posX_dest - posX_i16;
 800275a:	4b29      	ldr	r3, [pc, #164]	; (8002800 <mov_puntoAPunto+0x278>)
 800275c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002760:	b29a      	uxth	r2, r3
 8002762:	4b28      	ldr	r3, [pc, #160]	; (8002804 <mov_puntoAPunto+0x27c>)
 8002764:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002768:	b29b      	uxth	r3, r3
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	b29b      	uxth	r3, r3
 800276e:	b21a      	sxth	r2, r3
 8002770:	4b25      	ldr	r3, [pc, #148]	; (8002808 <mov_puntoAPunto+0x280>)
 8002772:	801a      	strh	r2, [r3, #0]
			deltaY_dest = posY_dest - posY_i16;
 8002774:	4b25      	ldr	r3, [pc, #148]	; (800280c <mov_puntoAPunto+0x284>)
 8002776:	f9b3 3000 	ldrsh.w	r3, [r3]
 800277a:	b29a      	uxth	r2, r3
 800277c:	4b24      	ldr	r3, [pc, #144]	; (8002810 <mov_puntoAPunto+0x288>)
 800277e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002782:	b29b      	uxth	r3, r3
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	b29b      	uxth	r3, r3
 8002788:	b21a      	sxth	r2, r3
 800278a:	4b22      	ldr	r3, [pc, #136]	; (8002814 <mov_puntoAPunto+0x28c>)
 800278c:	801a      	strh	r2, [r3, #0]

			if (  abs(deltaX_dest) < 2 && abs(deltaY_dest) < 2){
 800278e:	4b1e      	ldr	r3, [pc, #120]	; (8002808 <mov_puntoAPunto+0x280>)
 8002790:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002794:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002798:	db54      	blt.n	8002844 <mov_puntoAPunto+0x2bc>
 800279a:	4b1b      	ldr	r3, [pc, #108]	; (8002808 <mov_puntoAPunto+0x280>)
 800279c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	dc4f      	bgt.n	8002844 <mov_puntoAPunto+0x2bc>
 80027a4:	4b1b      	ldr	r3, [pc, #108]	; (8002814 <mov_puntoAPunto+0x28c>)
 80027a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027ae:	db49      	blt.n	8002844 <mov_puntoAPunto+0x2bc>
 80027b0:	4b18      	ldr	r3, [pc, #96]	; (8002814 <mov_puntoAPunto+0x28c>)
 80027b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	dc44      	bgt.n	8002844 <mov_puntoAPunto+0x2bc>
				estatusPuntoAPunto = 3;
 80027ba:	4b0d      	ldr	r3, [pc, #52]	; (80027f0 <mov_puntoAPunto+0x268>)
 80027bc:	2203      	movs	r2, #3
 80027be:	701a      	strb	r2, [r3, #0]
				velL = 0;
 80027c0:	4b1b      	ldr	r3, [pc, #108]	; (8002830 <mov_puntoAPunto+0x2a8>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	701a      	strb	r2, [r3, #0]
				velR = 0;
 80027c6:	4b1b      	ldr	r3, [pc, #108]	; (8002834 <mov_puntoAPunto+0x2ac>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	701a      	strb	r2, [r3, #0]
				sprintf((char*)txUart, "orient");
 80027cc:	4b0a      	ldr	r3, [pc, #40]	; (80027f8 <mov_puntoAPunto+0x270>)
 80027ce:	4a1c      	ldr	r2, [pc, #112]	; (8002840 <mov_puntoAPunto+0x2b8>)
 80027d0:	6810      	ldr	r0, [r2, #0]
 80027d2:	6018      	str	r0, [r3, #0]
 80027d4:	8891      	ldrh	r1, [r2, #4]
 80027d6:	7992      	ldrb	r2, [r2, #6]
 80027d8:	8099      	strh	r1, [r3, #4]
 80027da:	719a      	strb	r2, [r3, #6]
				send_info(txUart);
 80027dc:	4806      	ldr	r0, [pc, #24]	; (80027f8 <mov_puntoAPunto+0x270>)
 80027de:	f7fe feb7 	bl	8001550 <send_info>
				break;
 80027e2:	e132      	b.n	8002a4a <mov_puntoAPunto+0x4c2>
 80027e4:	f3af 8000 	nop.w
 80027e8:	54442d18 	.word	0x54442d18
 80027ec:	400921fb 	.word	0x400921fb
 80027f0:	20000054 	.word	0x20000054
 80027f4:	20000055 	.word	0x20000055
 80027f8:	200002c8 	.word	0x200002c8
 80027fc:	08008e48 	.word	0x08008e48
 8002800:	20000294 	.word	0x20000294
 8002804:	200002e4 	.word	0x200002e4
 8002808:	200002a4 	.word	0x200002a4
 800280c:	200002e0 	.word	0x200002e0
 8002810:	20000314 	.word	0x20000314
 8002814:	2000031a 	.word	0x2000031a
 8002818:	200002e8 	.word	0x200002e8
 800281c:	40668000 	.word	0x40668000
 8002820:	200002d4 	.word	0x200002d4
 8002824:	200002ac 	.word	0x200002ac
 8002828:	200002c0 	.word	0x200002c0
 800282c:	20000296 	.word	0x20000296
 8002830:	20000022 	.word	0x20000022
 8002834:	20000023 	.word	0x20000023
 8002838:	20000002 	.word	0x20000002
 800283c:	08008e50 	.word	0x08008e50
 8002840:	08008e58 	.word	0x08008e58
			}

			anguloDest_rad_f32 = atan2f(deltaY_dest, deltaX_dest);
 8002844:	4b84      	ldr	r3, [pc, #528]	; (8002a58 <mov_puntoAPunto+0x4d0>)
 8002846:	f9b3 3000 	ldrsh.w	r3, [r3]
 800284a:	ee07 3a90 	vmov	s15, r3
 800284e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002852:	4b82      	ldr	r3, [pc, #520]	; (8002a5c <mov_puntoAPunto+0x4d4>)
 8002854:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002858:	ee07 3a10 	vmov	s14, r3
 800285c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002860:	eef0 0a47 	vmov.f32	s1, s14
 8002864:	eeb0 0a67 	vmov.f32	s0, s15
 8002868:	f005 fc50 	bl	800810c <atan2f>
 800286c:	eef0 7a40 	vmov.f32	s15, s0
 8002870:	4b7b      	ldr	r3, [pc, #492]	; (8002a60 <mov_puntoAPunto+0x4d8>)
 8002872:	edc3 7a00 	vstr	s15, [r3]
			anguloDest_grad_f32 = anguloDest_rad_f32 * 180.0 / M_PI; //grados en float
 8002876:	4b7a      	ldr	r3, [pc, #488]	; (8002a60 <mov_puntoAPunto+0x4d8>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4618      	mov	r0, r3
 800287c:	f7fd fe1c 	bl	80004b8 <__aeabi_f2d>
 8002880:	f04f 0200 	mov.w	r2, #0
 8002884:	4b77      	ldr	r3, [pc, #476]	; (8002a64 <mov_puntoAPunto+0x4dc>)
 8002886:	f7fd fe6f 	bl	8000568 <__aeabi_dmul>
 800288a:	4603      	mov	r3, r0
 800288c:	460c      	mov	r4, r1
 800288e:	4618      	mov	r0, r3
 8002890:	4621      	mov	r1, r4
 8002892:	a36f      	add	r3, pc, #444	; (adr r3, 8002a50 <mov_puntoAPunto+0x4c8>)
 8002894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002898:	f7fd ff90 	bl	80007bc <__aeabi_ddiv>
 800289c:	4603      	mov	r3, r0
 800289e:	460c      	mov	r4, r1
 80028a0:	4618      	mov	r0, r3
 80028a2:	4621      	mov	r1, r4
 80028a4:	f7fe f872 	bl	800098c <__aeabi_d2f>
 80028a8:	4602      	mov	r2, r0
 80028aa:	4b6f      	ldr	r3, [pc, #444]	; (8002a68 <mov_puntoAPunto+0x4e0>)
 80028ac:	601a      	str	r2, [r3, #0]
			anguloDest_grad_i16 = anguloDest_grad_f32; //grados en int16
 80028ae:	4b6e      	ldr	r3, [pc, #440]	; (8002a68 <mov_puntoAPunto+0x4e0>)
 80028b0:	edd3 7a00 	vldr	s15, [r3]
 80028b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028b8:	ee17 3a90 	vmov	r3, s15
 80028bc:	b21a      	sxth	r2, r3
 80028be:	4b6b      	ldr	r3, [pc, #428]	; (8002a6c <mov_puntoAPunto+0x4e4>)
 80028c0:	801a      	strh	r2, [r3, #0]
			deltaAng_dest = anguloDest_grad_i16 - direccionMag_grad_i16;
 80028c2:	4b6a      	ldr	r3, [pc, #424]	; (8002a6c <mov_puntoAPunto+0x4e4>)
 80028c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028c8:	b29a      	uxth	r2, r3
 80028ca:	4b69      	ldr	r3, [pc, #420]	; (8002a70 <mov_puntoAPunto+0x4e8>)
 80028cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	b21a      	sxth	r2, r3
 80028d8:	4b66      	ldr	r3, [pc, #408]	; (8002a74 <mov_puntoAPunto+0x4ec>)
 80028da:	801a      	strh	r2, [r3, #0]
			if (deltaAng_dest > 180) deltaAng_dest -= 360;
 80028dc:	4b65      	ldr	r3, [pc, #404]	; (8002a74 <mov_puntoAPunto+0x4ec>)
 80028de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028e2:	2bb4      	cmp	r3, #180	; 0xb4
 80028e4:	dd09      	ble.n	80028fa <mov_puntoAPunto+0x372>
 80028e6:	4b63      	ldr	r3, [pc, #396]	; (8002a74 <mov_puntoAPunto+0x4ec>)
 80028e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	b21a      	sxth	r2, r3
 80028f6:	4b5f      	ldr	r3, [pc, #380]	; (8002a74 <mov_puntoAPunto+0x4ec>)
 80028f8:	801a      	strh	r2, [r3, #0]
			if (deltaAng_dest < -180) deltaAng_dest += 360;
 80028fa:	4b5e      	ldr	r3, [pc, #376]	; (8002a74 <mov_puntoAPunto+0x4ec>)
 80028fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002900:	f113 0fb4 	cmn.w	r3, #180	; 0xb4
 8002904:	da09      	bge.n	800291a <mov_puntoAPunto+0x392>
 8002906:	4b5b      	ldr	r3, [pc, #364]	; (8002a74 <mov_puntoAPunto+0x4ec>)
 8002908:	f9b3 3000 	ldrsh.w	r3, [r3]
 800290c:	b29b      	uxth	r3, r3
 800290e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002912:	b29b      	uxth	r3, r3
 8002914:	b21a      	sxth	r2, r3
 8002916:	4b57      	ldr	r3, [pc, #348]	; (8002a74 <mov_puntoAPunto+0x4ec>)
 8002918:	801a      	strh	r2, [r3, #0]

			if (deltaAng_dest > 17){
 800291a:	4b56      	ldr	r3, [pc, #344]	; (8002a74 <mov_puntoAPunto+0x4ec>)
 800291c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002920:	2b11      	cmp	r3, #17
 8002922:	dd12      	ble.n	800294a <mov_puntoAPunto+0x3c2>
				if (deltaAng_dest > 45){
 8002924:	4b53      	ldr	r3, [pc, #332]	; (8002a74 <mov_puntoAPunto+0x4ec>)
 8002926:	f9b3 3000 	ldrsh.w	r3, [r3]
 800292a:	2b2d      	cmp	r3, #45	; 0x2d
 800292c:	dd06      	ble.n	800293c <mov_puntoAPunto+0x3b4>
					velL = -4;
 800292e:	4b52      	ldr	r3, [pc, #328]	; (8002a78 <mov_puntoAPunto+0x4f0>)
 8002930:	22fc      	movs	r2, #252	; 0xfc
 8002932:	701a      	strb	r2, [r3, #0]
					velR = +4;
 8002934:	4b51      	ldr	r3, [pc, #324]	; (8002a7c <mov_puntoAPunto+0x4f4>)
 8002936:	2204      	movs	r2, #4
 8002938:	701a      	strb	r2, [r3, #0]
					velL = +5;
					velR = +4;
				}
			}

		break;
 800293a:	e085      	b.n	8002a48 <mov_puntoAPunto+0x4c0>
					velL = +4;
 800293c:	4b4e      	ldr	r3, [pc, #312]	; (8002a78 <mov_puntoAPunto+0x4f0>)
 800293e:	2204      	movs	r2, #4
 8002940:	701a      	strb	r2, [r3, #0]
					velR = +5;
 8002942:	4b4e      	ldr	r3, [pc, #312]	; (8002a7c <mov_puntoAPunto+0x4f4>)
 8002944:	2205      	movs	r2, #5
 8002946:	701a      	strb	r2, [r3, #0]
		break;
 8002948:	e07e      	b.n	8002a48 <mov_puntoAPunto+0x4c0>
			}else if (deltaAng_dest < -17){
 800294a:	4b4a      	ldr	r3, [pc, #296]	; (8002a74 <mov_puntoAPunto+0x4ec>)
 800294c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002950:	f113 0f11 	cmn.w	r3, #17
 8002954:	da78      	bge.n	8002a48 <mov_puntoAPunto+0x4c0>
				if (deltaAng_dest < -45){
 8002956:	4b47      	ldr	r3, [pc, #284]	; (8002a74 <mov_puntoAPunto+0x4ec>)
 8002958:	f9b3 3000 	ldrsh.w	r3, [r3]
 800295c:	f113 0f2d 	cmn.w	r3, #45	; 0x2d
 8002960:	da06      	bge.n	8002970 <mov_puntoAPunto+0x3e8>
					velL = +4;
 8002962:	4b45      	ldr	r3, [pc, #276]	; (8002a78 <mov_puntoAPunto+0x4f0>)
 8002964:	2204      	movs	r2, #4
 8002966:	701a      	strb	r2, [r3, #0]
					velR = -4;
 8002968:	4b44      	ldr	r3, [pc, #272]	; (8002a7c <mov_puntoAPunto+0x4f4>)
 800296a:	22fc      	movs	r2, #252	; 0xfc
 800296c:	701a      	strb	r2, [r3, #0]
		break;
 800296e:	e06b      	b.n	8002a48 <mov_puntoAPunto+0x4c0>
					velL = +5;
 8002970:	4b41      	ldr	r3, [pc, #260]	; (8002a78 <mov_puntoAPunto+0x4f0>)
 8002972:	2205      	movs	r2, #5
 8002974:	701a      	strb	r2, [r3, #0]
					velR = +4;
 8002976:	4b41      	ldr	r3, [pc, #260]	; (8002a7c <mov_puntoAPunto+0x4f4>)
 8002978:	2204      	movs	r2, #4
 800297a:	701a      	strb	r2, [r3, #0]
		break;
 800297c:	e064      	b.n	8002a48 <mov_puntoAPunto+0x4c0>
		case 3: // orienta en la coordenada angulo del destino
			deltaAng_dest = direccion_dest - direccionMag_grad_i16;
 800297e:	4b40      	ldr	r3, [pc, #256]	; (8002a80 <mov_puntoAPunto+0x4f8>)
 8002980:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002984:	b29a      	uxth	r2, r3
 8002986:	4b3a      	ldr	r3, [pc, #232]	; (8002a70 <mov_puntoAPunto+0x4e8>)
 8002988:	f9b3 3000 	ldrsh.w	r3, [r3]
 800298c:	b29b      	uxth	r3, r3
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	b29b      	uxth	r3, r3
 8002992:	b21a      	sxth	r2, r3
 8002994:	4b37      	ldr	r3, [pc, #220]	; (8002a74 <mov_puntoAPunto+0x4ec>)
 8002996:	801a      	strh	r2, [r3, #0]
			if (deltaAng_dest > 180) deltaAng_dest -= 360;
 8002998:	4b36      	ldr	r3, [pc, #216]	; (8002a74 <mov_puntoAPunto+0x4ec>)
 800299a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800299e:	2bb4      	cmp	r3, #180	; 0xb4
 80029a0:	dd09      	ble.n	80029b6 <mov_puntoAPunto+0x42e>
 80029a2:	4b34      	ldr	r3, [pc, #208]	; (8002a74 <mov_puntoAPunto+0x4ec>)
 80029a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	b21a      	sxth	r2, r3
 80029b2:	4b30      	ldr	r3, [pc, #192]	; (8002a74 <mov_puntoAPunto+0x4ec>)
 80029b4:	801a      	strh	r2, [r3, #0]
			if (deltaAng_dest < -180) deltaAng_dest += 360;
 80029b6:	4b2f      	ldr	r3, [pc, #188]	; (8002a74 <mov_puntoAPunto+0x4ec>)
 80029b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029bc:	f113 0fb4 	cmn.w	r3, #180	; 0xb4
 80029c0:	da09      	bge.n	80029d6 <mov_puntoAPunto+0x44e>
 80029c2:	4b2c      	ldr	r3, [pc, #176]	; (8002a74 <mov_puntoAPunto+0x4ec>)
 80029c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	b21a      	sxth	r2, r3
 80029d2:	4b28      	ldr	r3, [pc, #160]	; (8002a74 <mov_puntoAPunto+0x4ec>)
 80029d4:	801a      	strh	r2, [r3, #0]

			if (deltaAng_dest > 17){
 80029d6:	4b27      	ldr	r3, [pc, #156]	; (8002a74 <mov_puntoAPunto+0x4ec>)
 80029d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029dc:	2b11      	cmp	r3, #17
 80029de:	dd06      	ble.n	80029ee <mov_puntoAPunto+0x466>
				velL = -4;
 80029e0:	4b25      	ldr	r3, [pc, #148]	; (8002a78 <mov_puntoAPunto+0x4f0>)
 80029e2:	22fc      	movs	r2, #252	; 0xfc
 80029e4:	701a      	strb	r2, [r3, #0]
				velR = +4;
 80029e6:	4b25      	ldr	r3, [pc, #148]	; (8002a7c <mov_puntoAPunto+0x4f4>)
 80029e8:	2204      	movs	r2, #4
 80029ea:	701a      	strb	r2, [r3, #0]
			}else{
				velL = 0;
				velR = 0;
				estatusPuntoAPunto = 4;
			}
		break;
 80029ec:	e02d      	b.n	8002a4a <mov_puntoAPunto+0x4c2>
			}else if (deltaAng_dest < -17){
 80029ee:	4b21      	ldr	r3, [pc, #132]	; (8002a74 <mov_puntoAPunto+0x4ec>)
 80029f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029f4:	f113 0f11 	cmn.w	r3, #17
 80029f8:	da06      	bge.n	8002a08 <mov_puntoAPunto+0x480>
				velL = +4;
 80029fa:	4b1f      	ldr	r3, [pc, #124]	; (8002a78 <mov_puntoAPunto+0x4f0>)
 80029fc:	2204      	movs	r2, #4
 80029fe:	701a      	strb	r2, [r3, #0]
				velR = -4;
 8002a00:	4b1e      	ldr	r3, [pc, #120]	; (8002a7c <mov_puntoAPunto+0x4f4>)
 8002a02:	22fc      	movs	r2, #252	; 0xfc
 8002a04:	701a      	strb	r2, [r3, #0]
		break;
 8002a06:	e020      	b.n	8002a4a <mov_puntoAPunto+0x4c2>
				velL = 0;
 8002a08:	4b1b      	ldr	r3, [pc, #108]	; (8002a78 <mov_puntoAPunto+0x4f0>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	701a      	strb	r2, [r3, #0]
				velR = 0;
 8002a0e:	4b1b      	ldr	r3, [pc, #108]	; (8002a7c <mov_puntoAPunto+0x4f4>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	701a      	strb	r2, [r3, #0]
				estatusPuntoAPunto = 4;
 8002a14:	4b1b      	ldr	r3, [pc, #108]	; (8002a84 <mov_puntoAPunto+0x4fc>)
 8002a16:	2204      	movs	r2, #4
 8002a18:	701a      	strb	r2, [r3, #0]
		break;
 8002a1a:	e016      	b.n	8002a4a <mov_puntoAPunto+0x4c2>
		case 4: // finaliza la secuencia
			flag_dest = 0;
 8002a1c:	4b1a      	ldr	r3, [pc, #104]	; (8002a88 <mov_puntoAPunto+0x500>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	701a      	strb	r2, [r3, #0]
			estatusPuntoAPunto = 0;
 8002a22:	4b18      	ldr	r3, [pc, #96]	; (8002a84 <mov_puntoAPunto+0x4fc>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	701a      	strb	r2, [r3, #0]
			sprintf((char*)txUart, "ENDEST");
 8002a28:	4b18      	ldr	r3, [pc, #96]	; (8002a8c <mov_puntoAPunto+0x504>)
 8002a2a:	4a19      	ldr	r2, [pc, #100]	; (8002a90 <mov_puntoAPunto+0x508>)
 8002a2c:	6810      	ldr	r0, [r2, #0]
 8002a2e:	6018      	str	r0, [r3, #0]
 8002a30:	8891      	ldrh	r1, [r2, #4]
 8002a32:	7992      	ldrb	r2, [r2, #6]
 8002a34:	8099      	strh	r1, [r3, #4]
 8002a36:	719a      	strb	r2, [r3, #6]
			send_info(txUart);
 8002a38:	4814      	ldr	r0, [pc, #80]	; (8002a8c <mov_puntoAPunto+0x504>)
 8002a3a:	f7fe fd89 	bl	8001550 <send_info>

		break;
 8002a3e:	e004      	b.n	8002a4a <mov_puntoAPunto+0x4c2>
		break;
 8002a40:	bf00      	nop
 8002a42:	e002      	b.n	8002a4a <mov_puntoAPunto+0x4c2>
		break;
 8002a44:	bf00      	nop
 8002a46:	e000      	b.n	8002a4a <mov_puntoAPunto+0x4c2>
		break;
 8002a48:	bf00      	nop
	}

} //fin mov_puntoAPunto ()
 8002a4a:	bf00      	nop
 8002a4c:	bd98      	pop	{r3, r4, r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	54442d18 	.word	0x54442d18
 8002a54:	400921fb 	.word	0x400921fb
 8002a58:	2000031a 	.word	0x2000031a
 8002a5c:	200002a4 	.word	0x200002a4
 8002a60:	200002e8 	.word	0x200002e8
 8002a64:	40668000 	.word	0x40668000
 8002a68:	200002d4 	.word	0x200002d4
 8002a6c:	200002ac 	.word	0x200002ac
 8002a70:	200002c0 	.word	0x200002c0
 8002a74:	20000296 	.word	0x20000296
 8002a78:	20000022 	.word	0x20000022
 8002a7c:	20000023 	.word	0x20000023
 8002a80:	20000308 	.word	0x20000308
 8002a84:	20000054 	.word	0x20000054
 8002a88:	20000055 	.word	0x20000055
 8002a8c:	200002c8 	.word	0x200002c8
 8002a90:	08008e60 	.word	0x08008e60

08002a94 <velocidades>:





void velocidades (int8_t vl, int8_t vr){
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	460a      	mov	r2, r1
 8002a9e:	71fb      	strb	r3, [r7, #7]
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	71bb      	strb	r3, [r7, #6]

	if (vl < 0){
 8002aa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	da0b      	bge.n	8002ac4 <velocidades+0x30>
		HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 0);
 8002aac:	2200      	movs	r2, #0
 8002aae:	2101      	movs	r1, #1
 8002ab0:	4833      	ldr	r0, [pc, #204]	; (8002b80 <velocidades+0xec>)
 8002ab2:	f001 fd5b 	bl	800456c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 1);
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002abc:	4831      	ldr	r0, [pc, #196]	; (8002b84 <velocidades+0xf0>)
 8002abe:	f001 fd55 	bl	800456c <HAL_GPIO_WritePin>
 8002ac2:	e01a      	b.n	8002afa <velocidades+0x66>
	} else if (vl > 0){
 8002ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	dd0b      	ble.n	8002ae4 <velocidades+0x50>
		HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 1);
 8002acc:	2201      	movs	r2, #1
 8002ace:	2101      	movs	r1, #1
 8002ad0:	482b      	ldr	r0, [pc, #172]	; (8002b80 <velocidades+0xec>)
 8002ad2:	f001 fd4b 	bl	800456c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 0);
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002adc:	4829      	ldr	r0, [pc, #164]	; (8002b84 <velocidades+0xf0>)
 8002ade:	f001 fd45 	bl	800456c <HAL_GPIO_WritePin>
 8002ae2:	e00a      	b.n	8002afa <velocidades+0x66>
	} else {
		HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 0);
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	2101      	movs	r1, #1
 8002ae8:	4825      	ldr	r0, [pc, #148]	; (8002b80 <velocidades+0xec>)
 8002aea:	f001 fd3f 	bl	800456c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 0);
 8002aee:	2200      	movs	r2, #0
 8002af0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002af4:	4823      	ldr	r0, [pc, #140]	; (8002b84 <velocidades+0xf0>)
 8002af6:	f001 fd39 	bl	800456c <HAL_GPIO_WritePin>
	}

	if (vr < 0){
 8002afa:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	da0c      	bge.n	8002b1c <velocidades+0x88>
		HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 0);
 8002b02:	2200      	movs	r2, #0
 8002b04:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b08:	481e      	ldr	r0, [pc, #120]	; (8002b84 <velocidades+0xf0>)
 8002b0a:	f001 fd2f 	bl	800456c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 1);
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002b14:	481b      	ldr	r0, [pc, #108]	; (8002b84 <velocidades+0xf0>)
 8002b16:	f001 fd29 	bl	800456c <HAL_GPIO_WritePin>
 8002b1a:	e01c      	b.n	8002b56 <velocidades+0xc2>
	} else if (vr > 0){
 8002b1c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	dd0c      	ble.n	8002b3e <velocidades+0xaa>
		HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 1);
 8002b24:	2201      	movs	r2, #1
 8002b26:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b2a:	4816      	ldr	r0, [pc, #88]	; (8002b84 <velocidades+0xf0>)
 8002b2c:	f001 fd1e 	bl	800456c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 0);
 8002b30:	2200      	movs	r2, #0
 8002b32:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002b36:	4813      	ldr	r0, [pc, #76]	; (8002b84 <velocidades+0xf0>)
 8002b38:	f001 fd18 	bl	800456c <HAL_GPIO_WritePin>
 8002b3c:	e00b      	b.n	8002b56 <velocidades+0xc2>
	} else {
		HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 0);
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b44:	480f      	ldr	r0, [pc, #60]	; (8002b84 <velocidades+0xf0>)
 8002b46:	f001 fd11 	bl	800456c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 0);
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002b50:	480c      	ldr	r0, [pc, #48]	; (8002b84 <velocidades+0xf0>)
 8002b52:	f001 fd0b 	bl	800456c <HAL_GPIO_WritePin>
	}

	velLFinal = abs(vl);
 8002b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	bfb8      	it	lt
 8002b5e:	425b      	neglt	r3, r3
 8002b60:	b2da      	uxtb	r2, r3
 8002b62:	4b09      	ldr	r3, [pc, #36]	; (8002b88 <velocidades+0xf4>)
 8002b64:	701a      	strb	r2, [r3, #0]
	velRFinal = abs(vr);
 8002b66:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	bfb8      	it	lt
 8002b6e:	425b      	neglt	r3, r3
 8002b70:	b2da      	uxtb	r2, r3
 8002b72:	4b06      	ldr	r3, [pc, #24]	; (8002b8c <velocidades+0xf8>)
 8002b74:	701a      	strb	r2, [r3, #0]

} //end velocidades()
 8002b76:	bf00      	nop
 8002b78:	3708      	adds	r7, #8
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	40020c00 	.word	0x40020c00
 8002b84:	40020800 	.word	0x40020800
 8002b88:	20000024 	.word	0x20000024
 8002b8c:	20000025 	.word	0x20000025

08002b90 <encoders>:

void encoders (void){
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0

	if (!flag_encoders) return;
 8002b94:	4b79      	ldr	r3, [pc, #484]	; (8002d7c <encoders+0x1ec>)
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	f000 80e9 	beq.w	8002d70 <encoders+0x1e0>

	encoderL = __HAL_TIM_GET_COUNTER(&htim3);
 8002b9e:	4b78      	ldr	r3, [pc, #480]	; (8002d80 <encoders+0x1f0>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba4:	b21a      	sxth	r2, r3
 8002ba6:	4b77      	ldr	r3, [pc, #476]	; (8002d84 <encoders+0x1f4>)
 8002ba8:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8002baa:	4b75      	ldr	r3, [pc, #468]	; (8002d80 <encoders+0x1f0>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	625a      	str	r2, [r3, #36]	; 0x24
	encoderR = __HAL_TIM_GET_COUNTER(&htim2);
 8002bb2:	4b75      	ldr	r3, [pc, #468]	; (8002d88 <encoders+0x1f8>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb8:	b21a      	sxth	r2, r3
 8002bba:	4b74      	ldr	r3, [pc, #464]	; (8002d8c <encoders+0x1fc>)
 8002bbc:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8002bbe:	4b72      	ldr	r3, [pc, #456]	; (8002d88 <encoders+0x1f8>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	625a      	str	r2, [r3, #36]	; 0x24

	encoderL_delta = encoderL + encoderL_memPositivo + encoderL_memNegativo;
 8002bc6:	4b6f      	ldr	r3, [pc, #444]	; (8002d84 <encoders+0x1f4>)
 8002bc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bcc:	b29a      	uxth	r2, r3
 8002bce:	4b70      	ldr	r3, [pc, #448]	; (8002d90 <encoders+0x200>)
 8002bd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	4413      	add	r3, r2
 8002bd8:	b29a      	uxth	r2, r3
 8002bda:	4b6e      	ldr	r3, [pc, #440]	; (8002d94 <encoders+0x204>)
 8002bdc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	4413      	add	r3, r2
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	b21a      	sxth	r2, r3
 8002be8:	4b6b      	ldr	r3, [pc, #428]	; (8002d98 <encoders+0x208>)
 8002bea:	801a      	strh	r2, [r3, #0]
	encoderR_delta = encoderR + encoderR_memPositivo + encoderR_memNegativo;
 8002bec:	4b67      	ldr	r3, [pc, #412]	; (8002d8c <encoders+0x1fc>)
 8002bee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bf2:	b29a      	uxth	r2, r3
 8002bf4:	4b69      	ldr	r3, [pc, #420]	; (8002d9c <encoders+0x20c>)
 8002bf6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	4413      	add	r3, r2
 8002bfe:	b29a      	uxth	r2, r3
 8002c00:	4b67      	ldr	r3, [pc, #412]	; (8002da0 <encoders+0x210>)
 8002c02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	4413      	add	r3, r2
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	b21a      	sxth	r2, r3
 8002c0e:	4b65      	ldr	r3, [pc, #404]	; (8002da4 <encoders+0x214>)
 8002c10:	801a      	strh	r2, [r3, #0]

	TIM4->CCR1 += velLFinal - encoderL_delta;
 8002c12:	4b65      	ldr	r3, [pc, #404]	; (8002da8 <encoders+0x218>)
 8002c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c16:	4a65      	ldr	r2, [pc, #404]	; (8002dac <encoders+0x21c>)
 8002c18:	7812      	ldrb	r2, [r2, #0]
 8002c1a:	4611      	mov	r1, r2
 8002c1c:	4a5e      	ldr	r2, [pc, #376]	; (8002d98 <encoders+0x208>)
 8002c1e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002c22:	1a8a      	subs	r2, r1, r2
 8002c24:	4611      	mov	r1, r2
 8002c26:	4a60      	ldr	r2, [pc, #384]	; (8002da8 <encoders+0x218>)
 8002c28:	440b      	add	r3, r1
 8002c2a:	6353      	str	r3, [r2, #52]	; 0x34
//	if (TIM4->CCR1 < 62) TIM4->CCR1 = 62;
//	if (TIM4->CCR1 > 82) TIM4->CCR1 = 82;

	TIM4->CCR2 += velRFinal - encoderR_delta;
 8002c2c:	4b5e      	ldr	r3, [pc, #376]	; (8002da8 <encoders+0x218>)
 8002c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c30:	4a5f      	ldr	r2, [pc, #380]	; (8002db0 <encoders+0x220>)
 8002c32:	7812      	ldrb	r2, [r2, #0]
 8002c34:	4611      	mov	r1, r2
 8002c36:	4a5b      	ldr	r2, [pc, #364]	; (8002da4 <encoders+0x214>)
 8002c38:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002c3c:	1a8a      	subs	r2, r1, r2
 8002c3e:	4611      	mov	r1, r2
 8002c40:	4a59      	ldr	r2, [pc, #356]	; (8002da8 <encoders+0x218>)
 8002c42:	440b      	add	r3, r1
 8002c44:	6393      	str	r3, [r2, #56]	; 0x38
//	if (TIM4->CCR2 < 62) TIM4->CCR2 = 62;
//	if (TIM4->CCR2 > 82) TIM4->CCR2 = 82;

	//avance del centro de masa
	if (velL > 0)
 8002c46:	4b5b      	ldr	r3, [pc, #364]	; (8002db4 <encoders+0x224>)
 8002c48:	f993 3000 	ldrsb.w	r3, [r3]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	dd13      	ble.n	8002c78 <encoders+0xe8>
		distL = encoderL + encoderL_memPositivo - encoderL_memNegativo;
 8002c50:	4b4c      	ldr	r3, [pc, #304]	; (8002d84 <encoders+0x1f4>)
 8002c52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c56:	b29a      	uxth	r2, r3
 8002c58:	4b4d      	ldr	r3, [pc, #308]	; (8002d90 <encoders+0x200>)
 8002c5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	4413      	add	r3, r2
 8002c62:	b29a      	uxth	r2, r3
 8002c64:	4b4b      	ldr	r3, [pc, #300]	; (8002d94 <encoders+0x204>)
 8002c66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	b21a      	sxth	r2, r3
 8002c72:	4b51      	ldr	r3, [pc, #324]	; (8002db8 <encoders+0x228>)
 8002c74:	801a      	strh	r2, [r3, #0]
 8002c76:	e012      	b.n	8002c9e <encoders+0x10e>
	else
		distL = -encoderL + encoderL_memPositivo - encoderL_memNegativo;
 8002c78:	4b45      	ldr	r3, [pc, #276]	; (8002d90 <encoders+0x200>)
 8002c7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c7e:	b29a      	uxth	r2, r3
 8002c80:	4b40      	ldr	r3, [pc, #256]	; (8002d84 <encoders+0x1f4>)
 8002c82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	b29a      	uxth	r2, r3
 8002c8c:	4b41      	ldr	r3, [pc, #260]	; (8002d94 <encoders+0x204>)
 8002c8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	b21a      	sxth	r2, r3
 8002c9a:	4b47      	ldr	r3, [pc, #284]	; (8002db8 <encoders+0x228>)
 8002c9c:	801a      	strh	r2, [r3, #0]

	if (velR > 0)
 8002c9e:	4b47      	ldr	r3, [pc, #284]	; (8002dbc <encoders+0x22c>)
 8002ca0:	f993 3000 	ldrsb.w	r3, [r3]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	dd13      	ble.n	8002cd0 <encoders+0x140>
		distR = encoderR + encoderR_memPositivo - encoderR_memNegativo;
 8002ca8:	4b38      	ldr	r3, [pc, #224]	; (8002d8c <encoders+0x1fc>)
 8002caa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cae:	b29a      	uxth	r2, r3
 8002cb0:	4b3a      	ldr	r3, [pc, #232]	; (8002d9c <encoders+0x20c>)
 8002cb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	4413      	add	r3, r2
 8002cba:	b29a      	uxth	r2, r3
 8002cbc:	4b38      	ldr	r3, [pc, #224]	; (8002da0 <encoders+0x210>)
 8002cbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	b21a      	sxth	r2, r3
 8002cca:	4b3d      	ldr	r3, [pc, #244]	; (8002dc0 <encoders+0x230>)
 8002ccc:	801a      	strh	r2, [r3, #0]
 8002cce:	e012      	b.n	8002cf6 <encoders+0x166>
	else
		distR = -encoderR + encoderR_memPositivo - encoderR_memNegativo;
 8002cd0:	4b32      	ldr	r3, [pc, #200]	; (8002d9c <encoders+0x20c>)
 8002cd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cd6:	b29a      	uxth	r2, r3
 8002cd8:	4b2c      	ldr	r3, [pc, #176]	; (8002d8c <encoders+0x1fc>)
 8002cda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	b29a      	uxth	r2, r3
 8002ce4:	4b2e      	ldr	r3, [pc, #184]	; (8002da0 <encoders+0x210>)
 8002ce6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	b21a      	sxth	r2, r3
 8002cf2:	4b33      	ldr	r3, [pc, #204]	; (8002dc0 <encoders+0x230>)
 8002cf4:	801a      	strh	r2, [r3, #0]

	distC += (distL + distR) >> 1;
 8002cf6:	4b30      	ldr	r3, [pc, #192]	; (8002db8 <encoders+0x228>)
 8002cf8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	4b30      	ldr	r3, [pc, #192]	; (8002dc0 <encoders+0x230>)
 8002d00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d04:	4413      	add	r3, r2
 8002d06:	105b      	asrs	r3, r3, #1
 8002d08:	b29a      	uxth	r2, r3
 8002d0a:	4b2e      	ldr	r3, [pc, #184]	; (8002dc4 <encoders+0x234>)
 8002d0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	4413      	add	r3, r2
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	b21a      	sxth	r2, r3
 8002d18:	4b2a      	ldr	r3, [pc, #168]	; (8002dc4 <encoders+0x234>)
 8002d1a:	801a      	strh	r2, [r3, #0]

	//acumula encoders
//	acum_encoderL += encoderL + encoderL_memPositivo - encoderL_memNegativo;
//	acum_encoderR += encoderR + encoderR_memPositivo - encoderR_memNegativo;
	acum_encoderL += encoderL_delta;
 8002d1c:	4b2a      	ldr	r3, [pc, #168]	; (8002dc8 <encoders+0x238>)
 8002d1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d22:	b29a      	uxth	r2, r3
 8002d24:	4b1c      	ldr	r3, [pc, #112]	; (8002d98 <encoders+0x208>)
 8002d26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	4413      	add	r3, r2
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	b21a      	sxth	r2, r3
 8002d32:	4b25      	ldr	r3, [pc, #148]	; (8002dc8 <encoders+0x238>)
 8002d34:	801a      	strh	r2, [r3, #0]
	acum_encoderR += encoderR_delta;
 8002d36:	4b25      	ldr	r3, [pc, #148]	; (8002dcc <encoders+0x23c>)
 8002d38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d3c:	b29a      	uxth	r2, r3
 8002d3e:	4b19      	ldr	r3, [pc, #100]	; (8002da4 <encoders+0x214>)
 8002d40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	4413      	add	r3, r2
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	b21a      	sxth	r2, r3
 8002d4c:	4b1f      	ldr	r3, [pc, #124]	; (8002dcc <encoders+0x23c>)
 8002d4e:	801a      	strh	r2, [r3, #0]

	encoderL_memNegativo = 0;
 8002d50:	4b10      	ldr	r3, [pc, #64]	; (8002d94 <encoders+0x204>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	801a      	strh	r2, [r3, #0]
	encoderL_memPositivo = 0;
 8002d56:	4b0e      	ldr	r3, [pc, #56]	; (8002d90 <encoders+0x200>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	801a      	strh	r2, [r3, #0]
	encoderR_memNegativo = 0;
 8002d5c:	4b10      	ldr	r3, [pc, #64]	; (8002da0 <encoders+0x210>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	801a      	strh	r2, [r3, #0]
	encoderR_memPositivo = 0;
 8002d62:	4b0e      	ldr	r3, [pc, #56]	; (8002d9c <encoders+0x20c>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	801a      	strh	r2, [r3, #0]
	flag_encoders = 0;
 8002d68:	4b04      	ldr	r3, [pc, #16]	; (8002d7c <encoders+0x1ec>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	701a      	strb	r2, [r3, #0]
 8002d6e:	e000      	b.n	8002d72 <encoders+0x1e2>
	if (!flag_encoders) return;
 8002d70:	bf00      	nop

} //fin encoders()
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	20000082 	.word	0x20000082
 8002d80:	200000d0 	.word	0x200000d0
 8002d84:	200002ee 	.word	0x200002ee
 8002d88:	20000090 	.word	0x20000090
 8002d8c:	20000316 	.word	0x20000316
 8002d90:	20000088 	.word	0x20000088
 8002d94:	2000008c 	.word	0x2000008c
 8002d98:	200002da 	.word	0x200002da
 8002d9c:	2000008a 	.word	0x2000008a
 8002da0:	2000008e 	.word	0x2000008e
 8002da4:	200002dc 	.word	0x200002dc
 8002da8:	40000800 	.word	0x40000800
 8002dac:	20000024 	.word	0x20000024
 8002db0:	20000025 	.word	0x20000025
 8002db4:	20000022 	.word	0x20000022
 8002db8:	2000028c 	.word	0x2000028c
 8002dbc:	20000023 	.word	0x20000023
 8002dc0:	200002aa 	.word	0x200002aa
 8002dc4:	2000005a 	.word	0x2000005a
 8002dc8:	20000084 	.word	0x20000084
 8002dcc:	20000086 	.word	0x20000086

08002dd0 <posicionamiento>:

void posicionamiento (void){
 8002dd0:	b5b0      	push	{r4, r5, r7, lr}
 8002dd2:	af00      	add	r7, sp, #0

	//saco el angulo...


	//por magnetometro
	mpu9265_Read_Magnet(&mpu9265);
 8002dd4:	48ac      	ldr	r0, [pc, #688]	; (8003088 <posicionamiento+0x2b8>)
 8002dd6:	f000 fafd 	bl	80033d4 <mpu9265_Read_Magnet>
	magX = (float) (mpu9265.Magnet_X_RAW); //media empirica +359.0
 8002dda:	4bab      	ldr	r3, [pc, #684]	; (8003088 <posicionamiento+0x2b8>)
 8002ddc:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002de0:	ee07 3a90 	vmov	s15, r3
 8002de4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002de8:	4ba8      	ldr	r3, [pc, #672]	; (800308c <posicionamiento+0x2bc>)
 8002dea:	edc3 7a00 	vstr	s15, [r3]
	magY = (float) (mpu9265.Magnet_Y_RAW); //media empirica -159.0
 8002dee:	4ba6      	ldr	r3, [pc, #664]	; (8003088 <posicionamiento+0x2b8>)
 8002df0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002df4:	ee07 3a90 	vmov	s15, r3
 8002df8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002dfc:	4ba4      	ldr	r3, [pc, #656]	; (8003090 <posicionamiento+0x2c0>)
 8002dfe:	edc3 7a00 	vstr	s15, [r3]

	if (magX < magX_min) magX_min = magX;
 8002e02:	4ba2      	ldr	r3, [pc, #648]	; (800308c <posicionamiento+0x2bc>)
 8002e04:	ed93 7a00 	vldr	s14, [r3]
 8002e08:	4ba2      	ldr	r3, [pc, #648]	; (8003094 <posicionamiento+0x2c4>)
 8002e0a:	edd3 7a00 	vldr	s15, [r3]
 8002e0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e16:	d503      	bpl.n	8002e20 <posicionamiento+0x50>
 8002e18:	4b9c      	ldr	r3, [pc, #624]	; (800308c <posicionamiento+0x2bc>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a9d      	ldr	r2, [pc, #628]	; (8003094 <posicionamiento+0x2c4>)
 8002e1e:	6013      	str	r3, [r2, #0]
	if (magX > magX_max) magX_max = magX;
 8002e20:	4b9a      	ldr	r3, [pc, #616]	; (800308c <posicionamiento+0x2bc>)
 8002e22:	ed93 7a00 	vldr	s14, [r3]
 8002e26:	4b9c      	ldr	r3, [pc, #624]	; (8003098 <posicionamiento+0x2c8>)
 8002e28:	edd3 7a00 	vldr	s15, [r3]
 8002e2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e34:	dd03      	ble.n	8002e3e <posicionamiento+0x6e>
 8002e36:	4b95      	ldr	r3, [pc, #596]	; (800308c <posicionamiento+0x2bc>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a97      	ldr	r2, [pc, #604]	; (8003098 <posicionamiento+0x2c8>)
 8002e3c:	6013      	str	r3, [r2, #0]
	if (magY < magY_min) magY_min = magY;
 8002e3e:	4b94      	ldr	r3, [pc, #592]	; (8003090 <posicionamiento+0x2c0>)
 8002e40:	ed93 7a00 	vldr	s14, [r3]
 8002e44:	4b95      	ldr	r3, [pc, #596]	; (800309c <posicionamiento+0x2cc>)
 8002e46:	edd3 7a00 	vldr	s15, [r3]
 8002e4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e52:	d503      	bpl.n	8002e5c <posicionamiento+0x8c>
 8002e54:	4b8e      	ldr	r3, [pc, #568]	; (8003090 <posicionamiento+0x2c0>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a90      	ldr	r2, [pc, #576]	; (800309c <posicionamiento+0x2cc>)
 8002e5a:	6013      	str	r3, [r2, #0]
	if (magY > magY_max) magY_max = magY;
 8002e5c:	4b8c      	ldr	r3, [pc, #560]	; (8003090 <posicionamiento+0x2c0>)
 8002e5e:	ed93 7a00 	vldr	s14, [r3]
 8002e62:	4b8f      	ldr	r3, [pc, #572]	; (80030a0 <posicionamiento+0x2d0>)
 8002e64:	edd3 7a00 	vldr	s15, [r3]
 8002e68:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e70:	dd03      	ble.n	8002e7a <posicionamiento+0xaa>
 8002e72:	4b87      	ldr	r3, [pc, #540]	; (8003090 <posicionamiento+0x2c0>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a8a      	ldr	r2, [pc, #552]	; (80030a0 <posicionamiento+0x2d0>)
 8002e78:	6013      	str	r3, [r2, #0]
	magX_media = (magX_min + magX_max) / 2.0;
 8002e7a:	4b86      	ldr	r3, [pc, #536]	; (8003094 <posicionamiento+0x2c4>)
 8002e7c:	ed93 7a00 	vldr	s14, [r3]
 8002e80:	4b85      	ldr	r3, [pc, #532]	; (8003098 <posicionamiento+0x2c8>)
 8002e82:	edd3 7a00 	vldr	s15, [r3]
 8002e86:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e8a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002e8e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e92:	4b84      	ldr	r3, [pc, #528]	; (80030a4 <posicionamiento+0x2d4>)
 8002e94:	edc3 7a00 	vstr	s15, [r3]
	magY_media = (magY_min + magY_max) / 2.0;
 8002e98:	4b80      	ldr	r3, [pc, #512]	; (800309c <posicionamiento+0x2cc>)
 8002e9a:	ed93 7a00 	vldr	s14, [r3]
 8002e9e:	4b80      	ldr	r3, [pc, #512]	; (80030a0 <posicionamiento+0x2d0>)
 8002ea0:	edd3 7a00 	vldr	s15, [r3]
 8002ea4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ea8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002eac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002eb0:	4b7d      	ldr	r3, [pc, #500]	; (80030a8 <posicionamiento+0x2d8>)
 8002eb2:	edc3 7a00 	vstr	s15, [r3]

	magX -= magX_media;
 8002eb6:	4b75      	ldr	r3, [pc, #468]	; (800308c <posicionamiento+0x2bc>)
 8002eb8:	ed93 7a00 	vldr	s14, [r3]
 8002ebc:	4b79      	ldr	r3, [pc, #484]	; (80030a4 <posicionamiento+0x2d4>)
 8002ebe:	edd3 7a00 	vldr	s15, [r3]
 8002ec2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ec6:	4b71      	ldr	r3, [pc, #452]	; (800308c <posicionamiento+0x2bc>)
 8002ec8:	edc3 7a00 	vstr	s15, [r3]
	magY -= magY_media;
 8002ecc:	4b70      	ldr	r3, [pc, #448]	; (8003090 <posicionamiento+0x2c0>)
 8002ece:	ed93 7a00 	vldr	s14, [r3]
 8002ed2:	4b75      	ldr	r3, [pc, #468]	; (80030a8 <posicionamiento+0x2d8>)
 8002ed4:	edd3 7a00 	vldr	s15, [r3]
 8002ed8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002edc:	4b6c      	ldr	r3, [pc, #432]	; (8003090 <posicionamiento+0x2c0>)
 8002ede:	edc3 7a00 	vstr	s15, [r3]
	magX /= magX_media;
 8002ee2:	4b6a      	ldr	r3, [pc, #424]	; (800308c <posicionamiento+0x2bc>)
 8002ee4:	edd3 6a00 	vldr	s13, [r3]
 8002ee8:	4b6e      	ldr	r3, [pc, #440]	; (80030a4 <posicionamiento+0x2d4>)
 8002eea:	ed93 7a00 	vldr	s14, [r3]
 8002eee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ef2:	4b66      	ldr	r3, [pc, #408]	; (800308c <posicionamiento+0x2bc>)
 8002ef4:	edc3 7a00 	vstr	s15, [r3]
	magY /= magX_media;
 8002ef8:	4b65      	ldr	r3, [pc, #404]	; (8003090 <posicionamiento+0x2c0>)
 8002efa:	edd3 6a00 	vldr	s13, [r3]
 8002efe:	4b69      	ldr	r3, [pc, #420]	; (80030a4 <posicionamiento+0x2d4>)
 8002f00:	ed93 7a00 	vldr	s14, [r3]
 8002f04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f08:	4b61      	ldr	r3, [pc, #388]	; (8003090 <posicionamiento+0x2c0>)
 8002f0a:	edc3 7a00 	vstr	s15, [r3]

	direccionMag_rad_f32 = atan2f(magY, magX); //radianes en float
 8002f0e:	4b60      	ldr	r3, [pc, #384]	; (8003090 <posicionamiento+0x2c0>)
 8002f10:	edd3 7a00 	vldr	s15, [r3]
 8002f14:	4b5d      	ldr	r3, [pc, #372]	; (800308c <posicionamiento+0x2bc>)
 8002f16:	ed93 7a00 	vldr	s14, [r3]
 8002f1a:	eef0 0a47 	vmov.f32	s1, s14
 8002f1e:	eeb0 0a67 	vmov.f32	s0, s15
 8002f22:	f005 f8f3 	bl	800810c <atan2f>
 8002f26:	eef0 7a40 	vmov.f32	s15, s0
 8002f2a:	4b60      	ldr	r3, [pc, #384]	; (80030ac <posicionamiento+0x2dc>)
 8002f2c:	edc3 7a00 	vstr	s15, [r3]
	posX_f32 += (float) (distC * 0.1 * cosf(direccionMag_rad_f32)); //posicion X en float
 8002f30:	4b5f      	ldr	r3, [pc, #380]	; (80030b0 <posicionamiento+0x2e0>)
 8002f32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f36:	4618      	mov	r0, r3
 8002f38:	f7fd faac 	bl	8000494 <__aeabi_i2d>
 8002f3c:	a34e      	add	r3, pc, #312	; (adr r3, 8003078 <posicionamiento+0x2a8>)
 8002f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f42:	f7fd fb11 	bl	8000568 <__aeabi_dmul>
 8002f46:	4603      	mov	r3, r0
 8002f48:	460c      	mov	r4, r1
 8002f4a:	4625      	mov	r5, r4
 8002f4c:	461c      	mov	r4, r3
 8002f4e:	4b57      	ldr	r3, [pc, #348]	; (80030ac <posicionamiento+0x2dc>)
 8002f50:	edd3 7a00 	vldr	s15, [r3]
 8002f54:	eeb0 0a67 	vmov.f32	s0, s15
 8002f58:	f005 f856 	bl	8008008 <cosf>
 8002f5c:	ee10 3a10 	vmov	r3, s0
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7fd faa9 	bl	80004b8 <__aeabi_f2d>
 8002f66:	4602      	mov	r2, r0
 8002f68:	460b      	mov	r3, r1
 8002f6a:	4620      	mov	r0, r4
 8002f6c:	4629      	mov	r1, r5
 8002f6e:	f7fd fafb 	bl	8000568 <__aeabi_dmul>
 8002f72:	4603      	mov	r3, r0
 8002f74:	460c      	mov	r4, r1
 8002f76:	4618      	mov	r0, r3
 8002f78:	4621      	mov	r1, r4
 8002f7a:	f7fd fd07 	bl	800098c <__aeabi_d2f>
 8002f7e:	ee07 0a10 	vmov	s14, r0
 8002f82:	4b4c      	ldr	r3, [pc, #304]	; (80030b4 <posicionamiento+0x2e4>)
 8002f84:	edd3 7a00 	vldr	s15, [r3]
 8002f88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f8c:	4b49      	ldr	r3, [pc, #292]	; (80030b4 <posicionamiento+0x2e4>)
 8002f8e:	edc3 7a00 	vstr	s15, [r3]
	posY_f32 += (float) (distC * 0.1 * sinf(direccionMag_rad_f32)); //posicion Y en float
 8002f92:	4b47      	ldr	r3, [pc, #284]	; (80030b0 <posicionamiento+0x2e0>)
 8002f94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7fd fa7b 	bl	8000494 <__aeabi_i2d>
 8002f9e:	a336      	add	r3, pc, #216	; (adr r3, 8003078 <posicionamiento+0x2a8>)
 8002fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fa4:	f7fd fae0 	bl	8000568 <__aeabi_dmul>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	460c      	mov	r4, r1
 8002fac:	4625      	mov	r5, r4
 8002fae:	461c      	mov	r4, r3
 8002fb0:	4b3e      	ldr	r3, [pc, #248]	; (80030ac <posicionamiento+0x2dc>)
 8002fb2:	edd3 7a00 	vldr	s15, [r3]
 8002fb6:	eeb0 0a67 	vmov.f32	s0, s15
 8002fba:	f005 f865 	bl	8008088 <sinf>
 8002fbe:	ee10 3a10 	vmov	r3, s0
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7fd fa78 	bl	80004b8 <__aeabi_f2d>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	460b      	mov	r3, r1
 8002fcc:	4620      	mov	r0, r4
 8002fce:	4629      	mov	r1, r5
 8002fd0:	f7fd faca 	bl	8000568 <__aeabi_dmul>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	460c      	mov	r4, r1
 8002fd8:	4618      	mov	r0, r3
 8002fda:	4621      	mov	r1, r4
 8002fdc:	f7fd fcd6 	bl	800098c <__aeabi_d2f>
 8002fe0:	ee07 0a10 	vmov	s14, r0
 8002fe4:	4b34      	ldr	r3, [pc, #208]	; (80030b8 <posicionamiento+0x2e8>)
 8002fe6:	edd3 7a00 	vldr	s15, [r3]
 8002fea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fee:	4b32      	ldr	r3, [pc, #200]	; (80030b8 <posicionamiento+0x2e8>)
 8002ff0:	edc3 7a00 	vstr	s15, [r3]
	distC = 0;
 8002ff4:	4b2e      	ldr	r3, [pc, #184]	; (80030b0 <posicionamiento+0x2e0>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	801a      	strh	r2, [r3, #0]
	direccionMag_grad_f32 = direccionMag_rad_f32 * 180.0 / M_PI; //grados en float
 8002ffa:	4b2c      	ldr	r3, [pc, #176]	; (80030ac <posicionamiento+0x2dc>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7fd fa5a 	bl	80004b8 <__aeabi_f2d>
 8003004:	f04f 0200 	mov.w	r2, #0
 8003008:	4b2c      	ldr	r3, [pc, #176]	; (80030bc <posicionamiento+0x2ec>)
 800300a:	f7fd faad 	bl	8000568 <__aeabi_dmul>
 800300e:	4603      	mov	r3, r0
 8003010:	460c      	mov	r4, r1
 8003012:	4618      	mov	r0, r3
 8003014:	4621      	mov	r1, r4
 8003016:	a31a      	add	r3, pc, #104	; (adr r3, 8003080 <posicionamiento+0x2b0>)
 8003018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800301c:	f7fd fbce 	bl	80007bc <__aeabi_ddiv>
 8003020:	4603      	mov	r3, r0
 8003022:	460c      	mov	r4, r1
 8003024:	4618      	mov	r0, r3
 8003026:	4621      	mov	r1, r4
 8003028:	f7fd fcb0 	bl	800098c <__aeabi_d2f>
 800302c:	4602      	mov	r2, r0
 800302e:	4b24      	ldr	r3, [pc, #144]	; (80030c0 <posicionamiento+0x2f0>)
 8003030:	601a      	str	r2, [r3, #0]
	direccionMag_grad_i16 = direccionMag_grad_f32; //grados en int16
 8003032:	4b23      	ldr	r3, [pc, #140]	; (80030c0 <posicionamiento+0x2f0>)
 8003034:	edd3 7a00 	vldr	s15, [r3]
 8003038:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800303c:	ee17 3a90 	vmov	r3, s15
 8003040:	b21a      	sxth	r2, r3
 8003042:	4b20      	ldr	r3, [pc, #128]	; (80030c4 <posicionamiento+0x2f4>)
 8003044:	801a      	strh	r2, [r3, #0]
	posX_i16 = posX_f32; //posicion X en int16
 8003046:	4b1b      	ldr	r3, [pc, #108]	; (80030b4 <posicionamiento+0x2e4>)
 8003048:	edd3 7a00 	vldr	s15, [r3]
 800304c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003050:	ee17 3a90 	vmov	r3, s15
 8003054:	b21a      	sxth	r2, r3
 8003056:	4b1c      	ldr	r3, [pc, #112]	; (80030c8 <posicionamiento+0x2f8>)
 8003058:	801a      	strh	r2, [r3, #0]
	posY_i16 = posY_f32; //posicion Y en int16
 800305a:	4b17      	ldr	r3, [pc, #92]	; (80030b8 <posicionamiento+0x2e8>)
 800305c:	edd3 7a00 	vldr	s15, [r3]
 8003060:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003064:	ee17 3a90 	vmov	r3, s15
 8003068:	b21a      	sxth	r2, r3
 800306a:	4b18      	ldr	r3, [pc, #96]	; (80030cc <posicionamiento+0x2fc>)
 800306c:	801a      	strh	r2, [r3, #0]
	direccion_i16 = direccion_f32; //grados en int16
	posX_i16 = posX_f32; //posicion X en int16
	posY_i16 = posY_f32; //posicion Y en int16
*/

} //fin posicionamiento ()
 800306e:	bf00      	nop
 8003070:	bdb0      	pop	{r4, r5, r7, pc}
 8003072:	bf00      	nop
 8003074:	f3af 8000 	nop.w
 8003078:	9999999a 	.word	0x9999999a
 800307c:	3fb99999 	.word	0x3fb99999
 8003080:	54442d18 	.word	0x54442d18
 8003084:	400921fb 	.word	0x400921fb
 8003088:	200002f0 	.word	0x200002f0
 800308c:	20000304 	.word	0x20000304
 8003090:	20000288 	.word	0x20000288
 8003094:	20000008 	.word	0x20000008
 8003098:	2000000c 	.word	0x2000000c
 800309c:	20000010 	.word	0x20000010
 80030a0:	20000014 	.word	0x20000014
 80030a4:	20000018 	.word	0x20000018
 80030a8:	2000001c 	.word	0x2000001c
 80030ac:	2000030c 	.word	0x2000030c
 80030b0:	2000005a 	.word	0x2000005a
 80030b4:	20000064 	.word	0x20000064
 80030b8:	20000068 	.word	0x20000068
 80030bc:	40668000 	.word	0x40668000
 80030c0:	200002c4 	.word	0x200002c4
 80030c4:	200002c0 	.word	0x200002c0
 80030c8:	200002e4 	.word	0x200002e4
 80030cc:	20000314 	.word	0x20000314

080030d0 <modo_funcionamiento>:

	HAL_UART_Receive_IT(&huart7, rxUart, 4);

} //end check_rxUart ()

void modo_funcionamiento (void){
 80030d0:	b580      	push	{r7, lr}
 80030d2:	af00      	add	r7, sp, #0

	switch (modoFuncionamiento) {
 80030d4:	4b0e      	ldr	r3, [pc, #56]	; (8003110 <modo_funcionamiento+0x40>)
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	2b03      	cmp	r3, #3
 80030da:	d815      	bhi.n	8003108 <modo_funcionamiento+0x38>
 80030dc:	a201      	add	r2, pc, #4	; (adr r2, 80030e4 <modo_funcionamiento+0x14>)
 80030de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030e2:	bf00      	nop
 80030e4:	080030f5 	.word	0x080030f5
 80030e8:	080030fb 	.word	0x080030fb
 80030ec:	08003101 	.word	0x08003101
 80030f0:	08003105 	.word	0x08003105
		case AUTOMATICO:
			movimientoLibre();
 80030f4:	f7fe fe3c 	bl	8001d70 <movimientoLibre>
		break;
 80030f8:	e007      	b.n	800310a <modo_funcionamiento+0x3a>
		case MANUAL:
			movimientoRC();
 80030fa:	f7fe ffef 	bl	80020dc <movimientoRC>
		break;
 80030fe:	e004      	b.n	800310a <modo_funcionamiento+0x3a>
		case CALIBRA_MAG:
			orientando();
 8003100:	f7ff f9a6 	bl	8002450 <orientando>
		case PUNTO_A_PUNTO:
			mov_puntoAPunto();
 8003104:	f7ff fa40 	bl	8002588 <mov_puntoAPunto>
		default:
		break;
 8003108:	bf00      	nop
	} //end switch modoFuncionamiento

} //end modo_funcionamiento ()
 800310a:	bf00      	nop
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	20000004 	.word	0x20000004

08003114 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003114:	b480      	push	{r7}
 8003116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003118:	bf00      	nop
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
	...

08003124 <mpu9265_Init>:





void mpu9265_Init(I2C_HandleTypeDef* i2c_handler){
 8003124:	b590      	push	{r4, r7, lr}
 8003126:	b089      	sub	sp, #36	; 0x24
 8003128:	af04      	add	r7, sp, #16
 800312a:	6078      	str	r0, [r7, #4]
	uint8_t check, data;

	hi2c_mpu = i2c_handler;
 800312c:	4aa3      	ldr	r2, [pc, #652]	; (80033bc <mpu9265_Init+0x298>)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6013      	str	r3, [r2, #0]

	HAL_I2C_Mem_Read(hi2c_mpu, MPU9250_ADDRESS << 1, WHO_AM_I_MPU9250, 1, &check, 1, 1000);
 8003132:	4ba2      	ldr	r3, [pc, #648]	; (80033bc <mpu9265_Init+0x298>)
 8003134:	6818      	ldr	r0, [r3, #0]
 8003136:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800313a:	9302      	str	r3, [sp, #8]
 800313c:	2301      	movs	r3, #1
 800313e:	9301      	str	r3, [sp, #4]
 8003140:	f107 030f 	add.w	r3, r7, #15
 8003144:	9300      	str	r3, [sp, #0]
 8003146:	2301      	movs	r3, #1
 8003148:	2275      	movs	r2, #117	; 0x75
 800314a:	21d0      	movs	r1, #208	; 0xd0
 800314c:	f001 fc5a 	bl	8004a04 <HAL_I2C_Mem_Read>

	if (check == 0X73){ //successfull respond
 8003150:	7bfb      	ldrb	r3, [r7, #15]
 8003152:	2b73      	cmp	r3, #115	; 0x73
 8003154:	d141      	bne.n	80031da <mpu9265_Init+0xb6>
		data = 0;
 8003156:	2300      	movs	r3, #0
 8003158:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(hi2c_mpu, MPU9250_ADDRESS << 1, PWR_MGMT_1, 1, &data, 1, 1000); //writing 0 in PWR_MGMT_1 reg to wake it up.
 800315a:	4b98      	ldr	r3, [pc, #608]	; (80033bc <mpu9265_Init+0x298>)
 800315c:	6818      	ldr	r0, [r3, #0]
 800315e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003162:	9302      	str	r3, [sp, #8]
 8003164:	2301      	movs	r3, #1
 8003166:	9301      	str	r3, [sp, #4]
 8003168:	f107 030e 	add.w	r3, r7, #14
 800316c:	9300      	str	r3, [sp, #0]
 800316e:	2301      	movs	r3, #1
 8003170:	226b      	movs	r2, #107	; 0x6b
 8003172:	21d0      	movs	r1, #208	; 0xd0
 8003174:	f001 fb4c 	bl	8004810 <HAL_I2C_Mem_Write>

		data = 0X07;
 8003178:	2307      	movs	r3, #7
 800317a:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(hi2c_mpu, MPU9250_ADDRESS << 1, SMPLRT_DIV, 1, &data, 1, 1000); //seting data rate in 1kHz by writing 0x07 in SMPLRT_DIV reg.
 800317c:	4b8f      	ldr	r3, [pc, #572]	; (80033bc <mpu9265_Init+0x298>)
 800317e:	6818      	ldr	r0, [r3, #0]
 8003180:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003184:	9302      	str	r3, [sp, #8]
 8003186:	2301      	movs	r3, #1
 8003188:	9301      	str	r3, [sp, #4]
 800318a:	f107 030e 	add.w	r3, r7, #14
 800318e:	9300      	str	r3, [sp, #0]
 8003190:	2301      	movs	r3, #1
 8003192:	2219      	movs	r2, #25
 8003194:	21d0      	movs	r1, #208	; 0xd0
 8003196:	f001 fb3b 	bl	8004810 <HAL_I2C_Mem_Write>

		data = 0;
 800319a:	2300      	movs	r3, #0
 800319c:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(hi2c_mpu, MPU9250_ADDRESS << 1, GYRO_CONFIG, 1, &data, 1, 1000); //SET GYROSCOPIC CONFIGURATION: XG_ST=0; YG_ST=0; ZG_ST=0; FS_SEL=0 -> +/- 250 º/s.
 800319e:	4b87      	ldr	r3, [pc, #540]	; (80033bc <mpu9265_Init+0x298>)
 80031a0:	6818      	ldr	r0, [r3, #0]
 80031a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031a6:	9302      	str	r3, [sp, #8]
 80031a8:	2301      	movs	r3, #1
 80031aa:	9301      	str	r3, [sp, #4]
 80031ac:	f107 030e 	add.w	r3, r7, #14
 80031b0:	9300      	str	r3, [sp, #0]
 80031b2:	2301      	movs	r3, #1
 80031b4:	221b      	movs	r2, #27
 80031b6:	21d0      	movs	r1, #208	; 0xd0
 80031b8:	f001 fb2a 	bl	8004810 <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Write(hi2c_mpu, MPU9250_ADDRESS << 1, ACCEL_CONFIG, 1, &data, 1, 1000); //SET accelerometer CONFIGURATION: XA_ST=0; YA_ST=0; ZA_ST=0; FS_SEL=0 -> +/- 2g.
 80031bc:	4b7f      	ldr	r3, [pc, #508]	; (80033bc <mpu9265_Init+0x298>)
 80031be:	6818      	ldr	r0, [r3, #0]
 80031c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031c4:	9302      	str	r3, [sp, #8]
 80031c6:	2301      	movs	r3, #1
 80031c8:	9301      	str	r3, [sp, #4]
 80031ca:	f107 030e 	add.w	r3, r7, #14
 80031ce:	9300      	str	r3, [sp, #0]
 80031d0:	2301      	movs	r3, #1
 80031d2:	221c      	movs	r2, #28
 80031d4:	21d0      	movs	r1, #208	; 0xd0
 80031d6:	f001 fb1b 	bl	8004810 <HAL_I2C_Mem_Write>
	}else{
		//Error_Handler();
	}

	//magnetometer//
	data = 0b10; //i2c bypass bit, in INT_PIN_CFG reg. (made to reach the magnetometer)
 80031da:	2302      	movs	r3, #2
 80031dc:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(hi2c_mpu, MPU9250_ADDRESS << 1, INT_PIN_CFG, 1, &data, 1, 1000);
 80031de:	4b77      	ldr	r3, [pc, #476]	; (80033bc <mpu9265_Init+0x298>)
 80031e0:	6818      	ldr	r0, [r3, #0]
 80031e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031e6:	9302      	str	r3, [sp, #8]
 80031e8:	2301      	movs	r3, #1
 80031ea:	9301      	str	r3, [sp, #4]
 80031ec:	f107 030e 	add.w	r3, r7, #14
 80031f0:	9300      	str	r3, [sp, #0]
 80031f2:	2301      	movs	r3, #1
 80031f4:	2237      	movs	r2, #55	; 0x37
 80031f6:	21d0      	movs	r1, #208	; 0xd0
 80031f8:	f001 fb0a 	bl	8004810 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Read(hi2c_mpu, AK8963_ADDRESS << 1, WHO_AM_I_AK8963, 1, &check, 1, 1000);
 80031fc:	4b6f      	ldr	r3, [pc, #444]	; (80033bc <mpu9265_Init+0x298>)
 80031fe:	6818      	ldr	r0, [r3, #0]
 8003200:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003204:	9302      	str	r3, [sp, #8]
 8003206:	2301      	movs	r3, #1
 8003208:	9301      	str	r3, [sp, #4]
 800320a:	f107 030f 	add.w	r3, r7, #15
 800320e:	9300      	str	r3, [sp, #0]
 8003210:	2301      	movs	r3, #1
 8003212:	2200      	movs	r2, #0
 8003214:	2118      	movs	r1, #24
 8003216:	f001 fbf5 	bl	8004a04 <HAL_I2C_Mem_Read>
	HAL_Delay(1);
 800321a:	2001      	movs	r0, #1
 800321c:	f000 fe20 	bl	8003e60 <HAL_Delay>
	if (check == 0X48){ //successfull respond
 8003220:	7bfb      	ldrb	r3, [r7, #15]
 8003222:	2b48      	cmp	r3, #72	; 0x48
 8003224:	f040 80c5 	bne.w	80033b2 <mpu9265_Init+0x28e>

		//Power down magnetometer
		data = 0x00;
 8003228:	2300      	movs	r3, #0
 800322a:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(hi2c_mpu, AK8963_ADDRESS << 1, AK8963_CNTL, 1, &data, 1, 1000);
 800322c:	4b63      	ldr	r3, [pc, #396]	; (80033bc <mpu9265_Init+0x298>)
 800322e:	6818      	ldr	r0, [r3, #0]
 8003230:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003234:	9302      	str	r3, [sp, #8]
 8003236:	2301      	movs	r3, #1
 8003238:	9301      	str	r3, [sp, #4]
 800323a:	f107 030e 	add.w	r3, r7, #14
 800323e:	9300      	str	r3, [sp, #0]
 8003240:	2301      	movs	r3, #1
 8003242:	220a      	movs	r2, #10
 8003244:	2118      	movs	r1, #24
 8003246:	f001 fae3 	bl	8004810 <HAL_I2C_Mem_Write>
		HAL_Delay(100);
 800324a:	2064      	movs	r0, #100	; 0x64
 800324c:	f000 fe08 	bl	8003e60 <HAL_Delay>

		//Enter Fuse ROM access mode
		data = 0x0F; //Fuse ROM access mode
 8003250:	230f      	movs	r3, #15
 8003252:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(hi2c_mpu, AK8963_ADDRESS << 1, AK8963_CNTL, 1, &data, 1, 1000); //Control 1 register
 8003254:	4b59      	ldr	r3, [pc, #356]	; (80033bc <mpu9265_Init+0x298>)
 8003256:	6818      	ldr	r0, [r3, #0]
 8003258:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800325c:	9302      	str	r3, [sp, #8]
 800325e:	2301      	movs	r3, #1
 8003260:	9301      	str	r3, [sp, #4]
 8003262:	f107 030e 	add.w	r3, r7, #14
 8003266:	9300      	str	r3, [sp, #0]
 8003268:	2301      	movs	r3, #1
 800326a:	220a      	movs	r2, #10
 800326c:	2118      	movs	r1, #24
 800326e:	f001 facf 	bl	8004810 <HAL_I2C_Mem_Write>
		HAL_Delay(100);
 8003272:	2064      	movs	r0, #100	; 0x64
 8003274:	f000 fdf4 	bl	8003e60 <HAL_Delay>

		//Read the x-, y-, and z-axis calibration values
		uint8_t rawMagCalData[3];
		HAL_I2C_Mem_Read(hi2c_mpu, AK8963_ADDRESS << 1, AK8963_ASAX, 1, &rawMagCalData[0], 3, 1000); //Sensitivity Adjustment values registers (read-only)
 8003278:	4b50      	ldr	r3, [pc, #320]	; (80033bc <mpu9265_Init+0x298>)
 800327a:	6818      	ldr	r0, [r3, #0]
 800327c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003280:	9302      	str	r3, [sp, #8]
 8003282:	2303      	movs	r3, #3
 8003284:	9301      	str	r3, [sp, #4]
 8003286:	f107 0308 	add.w	r3, r7, #8
 800328a:	9300      	str	r3, [sp, #0]
 800328c:	2301      	movs	r3, #1
 800328e:	2210      	movs	r2, #16
 8003290:	2118      	movs	r1, #24
 8003292:	f001 fbb7 	bl	8004a04 <HAL_I2C_Mem_Read>
		calMagX =  (float)(rawMagCalData[0] - 128)/256. + 1.;   // Return x-axis sensitivity adjustment values, etc.
 8003296:	7a3b      	ldrb	r3, [r7, #8]
 8003298:	3b80      	subs	r3, #128	; 0x80
 800329a:	ee07 3a90 	vmov	s15, r3
 800329e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032a2:	ee17 0a90 	vmov	r0, s15
 80032a6:	f7fd f907 	bl	80004b8 <__aeabi_f2d>
 80032aa:	f04f 0200 	mov.w	r2, #0
 80032ae:	4b44      	ldr	r3, [pc, #272]	; (80033c0 <mpu9265_Init+0x29c>)
 80032b0:	f7fd fa84 	bl	80007bc <__aeabi_ddiv>
 80032b4:	4603      	mov	r3, r0
 80032b6:	460c      	mov	r4, r1
 80032b8:	4618      	mov	r0, r3
 80032ba:	4621      	mov	r1, r4
 80032bc:	f04f 0200 	mov.w	r2, #0
 80032c0:	4b40      	ldr	r3, [pc, #256]	; (80033c4 <mpu9265_Init+0x2a0>)
 80032c2:	f7fc ff9b 	bl	80001fc <__adddf3>
 80032c6:	4603      	mov	r3, r0
 80032c8:	460c      	mov	r4, r1
 80032ca:	4618      	mov	r0, r3
 80032cc:	4621      	mov	r1, r4
 80032ce:	f7fd fb5d 	bl	800098c <__aeabi_d2f>
 80032d2:	4602      	mov	r2, r0
 80032d4:	4b3c      	ldr	r3, [pc, #240]	; (80033c8 <mpu9265_Init+0x2a4>)
 80032d6:	601a      	str	r2, [r3, #0]
		calMagY =  (float)(rawMagCalData[1] - 128)/256. + 1.;
 80032d8:	7a7b      	ldrb	r3, [r7, #9]
 80032da:	3b80      	subs	r3, #128	; 0x80
 80032dc:	ee07 3a90 	vmov	s15, r3
 80032e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032e4:	ee17 0a90 	vmov	r0, s15
 80032e8:	f7fd f8e6 	bl	80004b8 <__aeabi_f2d>
 80032ec:	f04f 0200 	mov.w	r2, #0
 80032f0:	4b33      	ldr	r3, [pc, #204]	; (80033c0 <mpu9265_Init+0x29c>)
 80032f2:	f7fd fa63 	bl	80007bc <__aeabi_ddiv>
 80032f6:	4603      	mov	r3, r0
 80032f8:	460c      	mov	r4, r1
 80032fa:	4618      	mov	r0, r3
 80032fc:	4621      	mov	r1, r4
 80032fe:	f04f 0200 	mov.w	r2, #0
 8003302:	4b30      	ldr	r3, [pc, #192]	; (80033c4 <mpu9265_Init+0x2a0>)
 8003304:	f7fc ff7a 	bl	80001fc <__adddf3>
 8003308:	4603      	mov	r3, r0
 800330a:	460c      	mov	r4, r1
 800330c:	4618      	mov	r0, r3
 800330e:	4621      	mov	r1, r4
 8003310:	f7fd fb3c 	bl	800098c <__aeabi_d2f>
 8003314:	4602      	mov	r2, r0
 8003316:	4b2d      	ldr	r3, [pc, #180]	; (80033cc <mpu9265_Init+0x2a8>)
 8003318:	601a      	str	r2, [r3, #0]
		calMagZ =  (float)(rawMagCalData[2] - 128)/256. + 1.;
 800331a:	7abb      	ldrb	r3, [r7, #10]
 800331c:	3b80      	subs	r3, #128	; 0x80
 800331e:	ee07 3a90 	vmov	s15, r3
 8003322:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003326:	ee17 0a90 	vmov	r0, s15
 800332a:	f7fd f8c5 	bl	80004b8 <__aeabi_f2d>
 800332e:	f04f 0200 	mov.w	r2, #0
 8003332:	4b23      	ldr	r3, [pc, #140]	; (80033c0 <mpu9265_Init+0x29c>)
 8003334:	f7fd fa42 	bl	80007bc <__aeabi_ddiv>
 8003338:	4603      	mov	r3, r0
 800333a:	460c      	mov	r4, r1
 800333c:	4618      	mov	r0, r3
 800333e:	4621      	mov	r1, r4
 8003340:	f04f 0200 	mov.w	r2, #0
 8003344:	4b1f      	ldr	r3, [pc, #124]	; (80033c4 <mpu9265_Init+0x2a0>)
 8003346:	f7fc ff59 	bl	80001fc <__adddf3>
 800334a:	4603      	mov	r3, r0
 800334c:	460c      	mov	r4, r1
 800334e:	4618      	mov	r0, r3
 8003350:	4621      	mov	r1, r4
 8003352:	f7fd fb1b 	bl	800098c <__aeabi_d2f>
 8003356:	4602      	mov	r2, r0
 8003358:	4b1d      	ldr	r3, [pc, #116]	; (80033d0 <mpu9265_Init+0x2ac>)
 800335a:	601a      	str	r2, [r3, #0]
		HAL_Delay(100);
 800335c:	2064      	movs	r0, #100	; 0x64
 800335e:	f000 fd7f 	bl	8003e60 <HAL_Delay>

		//Power down magnetometer
		data = 0x00;
 8003362:	2300      	movs	r3, #0
 8003364:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(hi2c_mpu, AK8963_ADDRESS << 1, AK8963_CNTL, 1, &data, 1, 1000);
 8003366:	4b15      	ldr	r3, [pc, #84]	; (80033bc <mpu9265_Init+0x298>)
 8003368:	6818      	ldr	r0, [r3, #0]
 800336a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800336e:	9302      	str	r3, [sp, #8]
 8003370:	2301      	movs	r3, #1
 8003372:	9301      	str	r3, [sp, #4]
 8003374:	f107 030e 	add.w	r3, r7, #14
 8003378:	9300      	str	r3, [sp, #0]
 800337a:	2301      	movs	r3, #1
 800337c:	220a      	movs	r2, #10
 800337e:	2118      	movs	r1, #24
 8003380:	f001 fa46 	bl	8004810 <HAL_I2C_Mem_Write>
		HAL_Delay(100);
 8003384:	2064      	movs	r0, #100	; 0x64
 8003386:	f000 fd6b 	bl	8003e60 <HAL_Delay>

		//Set magnetometer data resolution and sample ODR
		data = 0b10010; // 0b10110: 0001 (MSB, 16 bit resolution) 0010 (LSB, 8Hz sample rate (Continuous measurement mode 1) ).
 800338a:	2312      	movs	r3, #18
 800338c:	73bb      	strb	r3, [r7, #14]
//		data = 0B10110; // 0b10110: 0001 (MSB, 16 bit resolution) 0110 (LSB, 100Hz sample rate (Continuous measurement mode 2) ).
		HAL_I2C_Mem_Write(hi2c_mpu, AK8963_ADDRESS << 1, AK8963_CNTL, 1, &data, 1, 1000);
 800338e:	4b0b      	ldr	r3, [pc, #44]	; (80033bc <mpu9265_Init+0x298>)
 8003390:	6818      	ldr	r0, [r3, #0]
 8003392:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003396:	9302      	str	r3, [sp, #8]
 8003398:	2301      	movs	r3, #1
 800339a:	9301      	str	r3, [sp, #4]
 800339c:	f107 030e 	add.w	r3, r7, #14
 80033a0:	9300      	str	r3, [sp, #0]
 80033a2:	2301      	movs	r3, #1
 80033a4:	220a      	movs	r2, #10
 80033a6:	2118      	movs	r1, #24
 80033a8:	f001 fa32 	bl	8004810 <HAL_I2C_Mem_Write>
		HAL_Delay(100);
 80033ac:	2064      	movs	r0, #100	; 0x64
 80033ae:	f000 fd57 	bl	8003e60 <HAL_Delay>
		//Error_Handler();
	}



}
 80033b2:	bf00      	nop
 80033b4:	3714      	adds	r7, #20
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd90      	pop	{r4, r7, pc}
 80033ba:	bf00      	nop
 80033bc:	20000328 	.word	0x20000328
 80033c0:	40700000 	.word	0x40700000
 80033c4:	3ff00000 	.word	0x3ff00000
 80033c8:	20000320 	.word	0x20000320
 80033cc:	2000031c 	.word	0x2000031c
 80033d0:	20000324 	.word	0x20000324

080033d4 <mpu9265_Read_Magnet>:
	mpuData->Gyro_X_RAW = (uint16_t) ( data[0]<<8 | data[1] );
	mpuData->Gyro_Y_RAW = (uint16_t) ( data[2]<<8 | data[3] );
	mpuData->Gyro_Z_RAW = (uint16_t) ( data[4]<<8 | data[5] );
}

void mpu9265_Read_Magnet(mpuData_t* mpuData){
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b088      	sub	sp, #32
 80033d8:	af04      	add	r7, sp, #16
 80033da:	6078      	str	r0, [r7, #4]

	uint8_t ready, data[7];

	HAL_I2C_Mem_Read(hi2c_mpu, AK8963_ADDRESS << 1, AK8963_ST1, 1, &ready, 1, 1000); //bit 0 in "1".
 80033dc:	4b22      	ldr	r3, [pc, #136]	; (8003468 <mpu9265_Read_Magnet+0x94>)
 80033de:	6818      	ldr	r0, [r3, #0]
 80033e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033e4:	9302      	str	r3, [sp, #8]
 80033e6:	2301      	movs	r3, #1
 80033e8:	9301      	str	r3, [sp, #4]
 80033ea:	f107 030f 	add.w	r3, r7, #15
 80033ee:	9300      	str	r3, [sp, #0]
 80033f0:	2301      	movs	r3, #1
 80033f2:	2202      	movs	r2, #2
 80033f4:	2118      	movs	r1, #24
 80033f6:	f001 fb05 	bl	8004a04 <HAL_I2C_Mem_Read>

	if (ready){ //bit 0 from Status 1 register in "1".
 80033fa:	7bfb      	ldrb	r3, [r7, #15]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d02e      	beq.n	800345e <mpu9265_Read_Magnet+0x8a>
		HAL_I2C_Mem_Read(hi2c_mpu, AK8963_ADDRESS << 1, AK8963_XOUT_L, 1, data, 7, 1000);
 8003400:	4b19      	ldr	r3, [pc, #100]	; (8003468 <mpu9265_Read_Magnet+0x94>)
 8003402:	6818      	ldr	r0, [r3, #0]
 8003404:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003408:	9302      	str	r3, [sp, #8]
 800340a:	2307      	movs	r3, #7
 800340c:	9301      	str	r3, [sp, #4]
 800340e:	f107 0308 	add.w	r3, r7, #8
 8003412:	9300      	str	r3, [sp, #0]
 8003414:	2301      	movs	r3, #1
 8003416:	2203      	movs	r2, #3
 8003418:	2118      	movs	r1, #24
 800341a:	f001 faf3 	bl	8004a04 <HAL_I2C_Mem_Read>
		if (!(data[6] & 0x08)){// Check if magnetic sensor overflow set, if not then report data
 800341e:	7bbb      	ldrb	r3, [r7, #14]
 8003420:	f003 0308 	and.w	r3, r3, #8
 8003424:	2b00      	cmp	r3, #0
 8003426:	d11a      	bne.n	800345e <mpu9265_Read_Magnet+0x8a>
			mpuData->Magnet_X_RAW = (uint16_t) ( data[1]<<8 | data[0] );
 8003428:	7a7b      	ldrb	r3, [r7, #9]
 800342a:	021b      	lsls	r3, r3, #8
 800342c:	b21a      	sxth	r2, r3
 800342e:	7a3b      	ldrb	r3, [r7, #8]
 8003430:	b21b      	sxth	r3, r3
 8003432:	4313      	orrs	r3, r2
 8003434:	b21a      	sxth	r2, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	819a      	strh	r2, [r3, #12]
			mpuData->Magnet_Y_RAW = (uint16_t) ( data[3]<<8 | data[2] );
 800343a:	7afb      	ldrb	r3, [r7, #11]
 800343c:	021b      	lsls	r3, r3, #8
 800343e:	b21a      	sxth	r2, r3
 8003440:	7abb      	ldrb	r3, [r7, #10]
 8003442:	b21b      	sxth	r3, r3
 8003444:	4313      	orrs	r3, r2
 8003446:	b21a      	sxth	r2, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	81da      	strh	r2, [r3, #14]
			mpuData->Magnet_Z_RAW = (uint16_t) ( data[5]<<8 | data[4] );
 800344c:	7b7b      	ldrb	r3, [r7, #13]
 800344e:	021b      	lsls	r3, r3, #8
 8003450:	b21a      	sxth	r2, r3
 8003452:	7b3b      	ldrb	r3, [r7, #12]
 8003454:	b21b      	sxth	r3, r3
 8003456:	4313      	orrs	r3, r2
 8003458:	b21a      	sxth	r2, r3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	821a      	strh	r2, [r3, #16]
		}
	}
}
 800345e:	bf00      	nop
 8003460:	3710      	adds	r7, #16
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	20000328 	.word	0x20000328

0800346c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003472:	2300      	movs	r3, #0
 8003474:	607b      	str	r3, [r7, #4]
 8003476:	4b10      	ldr	r3, [pc, #64]	; (80034b8 <HAL_MspInit+0x4c>)
 8003478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347a:	4a0f      	ldr	r2, [pc, #60]	; (80034b8 <HAL_MspInit+0x4c>)
 800347c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003480:	6453      	str	r3, [r2, #68]	; 0x44
 8003482:	4b0d      	ldr	r3, [pc, #52]	; (80034b8 <HAL_MspInit+0x4c>)
 8003484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003486:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800348a:	607b      	str	r3, [r7, #4]
 800348c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800348e:	2300      	movs	r3, #0
 8003490:	603b      	str	r3, [r7, #0]
 8003492:	4b09      	ldr	r3, [pc, #36]	; (80034b8 <HAL_MspInit+0x4c>)
 8003494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003496:	4a08      	ldr	r2, [pc, #32]	; (80034b8 <HAL_MspInit+0x4c>)
 8003498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800349c:	6413      	str	r3, [r2, #64]	; 0x40
 800349e:	4b06      	ldr	r3, [pc, #24]	; (80034b8 <HAL_MspInit+0x4c>)
 80034a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034a6:	603b      	str	r3, [r7, #0]
 80034a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80034aa:	bf00      	nop
 80034ac:	370c      	adds	r7, #12
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	40023800 	.word	0x40023800

080034bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034bc:	b480      	push	{r7}
 80034be:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80034c0:	bf00      	nop
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr

080034ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034ca:	b480      	push	{r7}
 80034cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034ce:	e7fe      	b.n	80034ce <HardFault_Handler+0x4>

080034d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034d0:	b480      	push	{r7}
 80034d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034d4:	e7fe      	b.n	80034d4 <MemManage_Handler+0x4>

080034d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034d6:	b480      	push	{r7}
 80034d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034da:	e7fe      	b.n	80034da <BusFault_Handler+0x4>

080034dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034dc:	b480      	push	{r7}
 80034de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034e0:	e7fe      	b.n	80034e0 <UsageFault_Handler+0x4>

080034e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80034e2:	b480      	push	{r7}
 80034e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80034e6:	bf00      	nop
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034f0:	b480      	push	{r7}
 80034f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80034f4:	bf00      	nop
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr

080034fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80034fe:	b480      	push	{r7}
 8003500:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003502:	bf00      	nop
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003510:	f000 fc86 	bl	8003e20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003514:	bf00      	nop
 8003516:	bd80      	pop	{r7, pc}

08003518 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800351c:	4802      	ldr	r0, [pc, #8]	; (8003528 <TIM5_IRQHandler+0x10>)
 800351e:	f002 fea3 	bl	8006268 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003522:	bf00      	nop
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	20000150 	.word	0x20000150

0800352c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003530:	4802      	ldr	r0, [pc, #8]	; (800353c <TIM7_IRQHandler+0x10>)
 8003532:	f002 fe99 	bl	8006268 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003536:	bf00      	nop
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	20000190 	.word	0x20000190

08003540 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8003544:	4802      	ldr	r0, [pc, #8]	; (8003550 <UART7_IRQHandler+0x10>)
 8003546:	f003 ff81 	bl	800744c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 800354a:	bf00      	nop
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	200001d0 	.word	0x200001d0

08003554 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003554:	b480      	push	{r7}
 8003556:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003558:	4b08      	ldr	r3, [pc, #32]	; (800357c <SystemInit+0x28>)
 800355a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800355e:	4a07      	ldr	r2, [pc, #28]	; (800357c <SystemInit+0x28>)
 8003560:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003564:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003568:	4b04      	ldr	r3, [pc, #16]	; (800357c <SystemInit+0x28>)
 800356a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800356e:	609a      	str	r2, [r3, #8]
#endif
}
 8003570:	bf00      	nop
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	e000ed00 	.word	0xe000ed00

08003580 <MX_TIM2_Init>:
 8003580:	b580      	push	{r7, lr}
 8003582:	b086      	sub	sp, #24
 8003584:	af00      	add	r7, sp, #0
 8003586:	f107 0308 	add.w	r3, r7, #8
 800358a:	2200      	movs	r2, #0
 800358c:	601a      	str	r2, [r3, #0]
 800358e:	605a      	str	r2, [r3, #4]
 8003590:	609a      	str	r2, [r3, #8]
 8003592:	60da      	str	r2, [r3, #12]
 8003594:	463b      	mov	r3, r7
 8003596:	2200      	movs	r2, #0
 8003598:	601a      	str	r2, [r3, #0]
 800359a:	605a      	str	r2, [r3, #4]
 800359c:	4b20      	ldr	r3, [pc, #128]	; (8003620 <MX_TIM2_Init+0xa0>)
 800359e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80035a2:	601a      	str	r2, [r3, #0]
 80035a4:	4b1e      	ldr	r3, [pc, #120]	; (8003620 <MX_TIM2_Init+0xa0>)
 80035a6:	2200      	movs	r2, #0
 80035a8:	605a      	str	r2, [r3, #4]
 80035aa:	4b1d      	ldr	r3, [pc, #116]	; (8003620 <MX_TIM2_Init+0xa0>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	609a      	str	r2, [r3, #8]
 80035b0:	4b1b      	ldr	r3, [pc, #108]	; (8003620 <MX_TIM2_Init+0xa0>)
 80035b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80035b6:	60da      	str	r2, [r3, #12]
 80035b8:	4b19      	ldr	r3, [pc, #100]	; (8003620 <MX_TIM2_Init+0xa0>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	611a      	str	r2, [r3, #16]
 80035be:	4b18      	ldr	r3, [pc, #96]	; (8003620 <MX_TIM2_Init+0xa0>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	619a      	str	r2, [r3, #24]
 80035c4:	4816      	ldr	r0, [pc, #88]	; (8003620 <MX_TIM2_Init+0xa0>)
 80035c6:	f002 fccb 	bl	8005f60 <HAL_TIM_Base_Init>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d001      	beq.n	80035d4 <MX_TIM2_Init+0x54>
 80035d0:	f7ff fda0 	bl	8003114 <Error_Handler>
 80035d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80035d8:	60bb      	str	r3, [r7, #8]
 80035da:	2300      	movs	r3, #0
 80035dc:	60fb      	str	r3, [r7, #12]
 80035de:	2300      	movs	r3, #0
 80035e0:	613b      	str	r3, [r7, #16]
 80035e2:	2300      	movs	r3, #0
 80035e4:	617b      	str	r3, [r7, #20]
 80035e6:	f107 0308 	add.w	r3, r7, #8
 80035ea:	4619      	mov	r1, r3
 80035ec:	480c      	ldr	r0, [pc, #48]	; (8003620 <MX_TIM2_Init+0xa0>)
 80035ee:	f003 f8a5 	bl	800673c <HAL_TIM_ConfigClockSource>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d001      	beq.n	80035fc <MX_TIM2_Init+0x7c>
 80035f8:	f7ff fd8c 	bl	8003114 <Error_Handler>
 80035fc:	2300      	movs	r3, #0
 80035fe:	603b      	str	r3, [r7, #0]
 8003600:	2300      	movs	r3, #0
 8003602:	607b      	str	r3, [r7, #4]
 8003604:	463b      	mov	r3, r7
 8003606:	4619      	mov	r1, r3
 8003608:	4805      	ldr	r0, [pc, #20]	; (8003620 <MX_TIM2_Init+0xa0>)
 800360a:	f003 fda7 	bl	800715c <HAL_TIMEx_MasterConfigSynchronization>
 800360e:	4603      	mov	r3, r0
 8003610:	2b00      	cmp	r3, #0
 8003612:	d001      	beq.n	8003618 <MX_TIM2_Init+0x98>
 8003614:	f7ff fd7e 	bl	8003114 <Error_Handler>
 8003618:	bf00      	nop
 800361a:	3718      	adds	r7, #24
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	20000090 	.word	0x20000090

08003624 <MX_TIM3_Init>:
 8003624:	b580      	push	{r7, lr}
 8003626:	b086      	sub	sp, #24
 8003628:	af00      	add	r7, sp, #0
 800362a:	f107 0308 	add.w	r3, r7, #8
 800362e:	2200      	movs	r2, #0
 8003630:	601a      	str	r2, [r3, #0]
 8003632:	605a      	str	r2, [r3, #4]
 8003634:	609a      	str	r2, [r3, #8]
 8003636:	60da      	str	r2, [r3, #12]
 8003638:	463b      	mov	r3, r7
 800363a:	2200      	movs	r2, #0
 800363c:	601a      	str	r2, [r3, #0]
 800363e:	605a      	str	r2, [r3, #4]
 8003640:	4b20      	ldr	r3, [pc, #128]	; (80036c4 <MX_TIM3_Init+0xa0>)
 8003642:	4a21      	ldr	r2, [pc, #132]	; (80036c8 <MX_TIM3_Init+0xa4>)
 8003644:	601a      	str	r2, [r3, #0]
 8003646:	4b1f      	ldr	r3, [pc, #124]	; (80036c4 <MX_TIM3_Init+0xa0>)
 8003648:	2200      	movs	r2, #0
 800364a:	605a      	str	r2, [r3, #4]
 800364c:	4b1d      	ldr	r3, [pc, #116]	; (80036c4 <MX_TIM3_Init+0xa0>)
 800364e:	2200      	movs	r2, #0
 8003650:	609a      	str	r2, [r3, #8]
 8003652:	4b1c      	ldr	r3, [pc, #112]	; (80036c4 <MX_TIM3_Init+0xa0>)
 8003654:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003658:	60da      	str	r2, [r3, #12]
 800365a:	4b1a      	ldr	r3, [pc, #104]	; (80036c4 <MX_TIM3_Init+0xa0>)
 800365c:	2200      	movs	r2, #0
 800365e:	611a      	str	r2, [r3, #16]
 8003660:	4b18      	ldr	r3, [pc, #96]	; (80036c4 <MX_TIM3_Init+0xa0>)
 8003662:	2200      	movs	r2, #0
 8003664:	619a      	str	r2, [r3, #24]
 8003666:	4817      	ldr	r0, [pc, #92]	; (80036c4 <MX_TIM3_Init+0xa0>)
 8003668:	f002 fc7a 	bl	8005f60 <HAL_TIM_Base_Init>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d001      	beq.n	8003676 <MX_TIM3_Init+0x52>
 8003672:	f7ff fd4f 	bl	8003114 <Error_Handler>
 8003676:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800367a:	60bb      	str	r3, [r7, #8]
 800367c:	2300      	movs	r3, #0
 800367e:	60fb      	str	r3, [r7, #12]
 8003680:	2300      	movs	r3, #0
 8003682:	613b      	str	r3, [r7, #16]
 8003684:	2300      	movs	r3, #0
 8003686:	617b      	str	r3, [r7, #20]
 8003688:	f107 0308 	add.w	r3, r7, #8
 800368c:	4619      	mov	r1, r3
 800368e:	480d      	ldr	r0, [pc, #52]	; (80036c4 <MX_TIM3_Init+0xa0>)
 8003690:	f003 f854 	bl	800673c <HAL_TIM_ConfigClockSource>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d001      	beq.n	800369e <MX_TIM3_Init+0x7a>
 800369a:	f7ff fd3b 	bl	8003114 <Error_Handler>
 800369e:	2300      	movs	r3, #0
 80036a0:	603b      	str	r3, [r7, #0]
 80036a2:	2300      	movs	r3, #0
 80036a4:	607b      	str	r3, [r7, #4]
 80036a6:	463b      	mov	r3, r7
 80036a8:	4619      	mov	r1, r3
 80036aa:	4806      	ldr	r0, [pc, #24]	; (80036c4 <MX_TIM3_Init+0xa0>)
 80036ac:	f003 fd56 	bl	800715c <HAL_TIMEx_MasterConfigSynchronization>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d001      	beq.n	80036ba <MX_TIM3_Init+0x96>
 80036b6:	f7ff fd2d 	bl	8003114 <Error_Handler>
 80036ba:	bf00      	nop
 80036bc:	3718      	adds	r7, #24
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	200000d0 	.word	0x200000d0
 80036c8:	40000400 	.word	0x40000400

080036cc <MX_TIM4_Init>:
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b08e      	sub	sp, #56	; 0x38
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036d6:	2200      	movs	r2, #0
 80036d8:	601a      	str	r2, [r3, #0]
 80036da:	605a      	str	r2, [r3, #4]
 80036dc:	609a      	str	r2, [r3, #8]
 80036de:	60da      	str	r2, [r3, #12]
 80036e0:	f107 0320 	add.w	r3, r7, #32
 80036e4:	2200      	movs	r2, #0
 80036e6:	601a      	str	r2, [r3, #0]
 80036e8:	605a      	str	r2, [r3, #4]
 80036ea:	1d3b      	adds	r3, r7, #4
 80036ec:	2200      	movs	r2, #0
 80036ee:	601a      	str	r2, [r3, #0]
 80036f0:	605a      	str	r2, [r3, #4]
 80036f2:	609a      	str	r2, [r3, #8]
 80036f4:	60da      	str	r2, [r3, #12]
 80036f6:	611a      	str	r2, [r3, #16]
 80036f8:	615a      	str	r2, [r3, #20]
 80036fa:	619a      	str	r2, [r3, #24]
 80036fc:	4b31      	ldr	r3, [pc, #196]	; (80037c4 <MX_TIM4_Init+0xf8>)
 80036fe:	4a32      	ldr	r2, [pc, #200]	; (80037c8 <MX_TIM4_Init+0xfc>)
 8003700:	601a      	str	r2, [r3, #0]
 8003702:	4b30      	ldr	r3, [pc, #192]	; (80037c4 <MX_TIM4_Init+0xf8>)
 8003704:	220e      	movs	r2, #14
 8003706:	605a      	str	r2, [r3, #4]
 8003708:	4b2e      	ldr	r3, [pc, #184]	; (80037c4 <MX_TIM4_Init+0xf8>)
 800370a:	2200      	movs	r2, #0
 800370c:	609a      	str	r2, [r3, #8]
 800370e:	4b2d      	ldr	r3, [pc, #180]	; (80037c4 <MX_TIM4_Init+0xf8>)
 8003710:	22c7      	movs	r2, #199	; 0xc7
 8003712:	60da      	str	r2, [r3, #12]
 8003714:	4b2b      	ldr	r3, [pc, #172]	; (80037c4 <MX_TIM4_Init+0xf8>)
 8003716:	2200      	movs	r2, #0
 8003718:	611a      	str	r2, [r3, #16]
 800371a:	4b2a      	ldr	r3, [pc, #168]	; (80037c4 <MX_TIM4_Init+0xf8>)
 800371c:	2200      	movs	r2, #0
 800371e:	619a      	str	r2, [r3, #24]
 8003720:	4828      	ldr	r0, [pc, #160]	; (80037c4 <MX_TIM4_Init+0xf8>)
 8003722:	f002 fc1d 	bl	8005f60 <HAL_TIM_Base_Init>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d001      	beq.n	8003730 <MX_TIM4_Init+0x64>
 800372c:	f7ff fcf2 	bl	8003114 <Error_Handler>
 8003730:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003734:	62bb      	str	r3, [r7, #40]	; 0x28
 8003736:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800373a:	4619      	mov	r1, r3
 800373c:	4821      	ldr	r0, [pc, #132]	; (80037c4 <MX_TIM4_Init+0xf8>)
 800373e:	f002 fffd 	bl	800673c <HAL_TIM_ConfigClockSource>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d001      	beq.n	800374c <MX_TIM4_Init+0x80>
 8003748:	f7ff fce4 	bl	8003114 <Error_Handler>
 800374c:	481d      	ldr	r0, [pc, #116]	; (80037c4 <MX_TIM4_Init+0xf8>)
 800374e:	f002 fc7a 	bl	8006046 <HAL_TIM_PWM_Init>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d001      	beq.n	800375c <MX_TIM4_Init+0x90>
 8003758:	f7ff fcdc 	bl	8003114 <Error_Handler>
 800375c:	2300      	movs	r3, #0
 800375e:	623b      	str	r3, [r7, #32]
 8003760:	2300      	movs	r3, #0
 8003762:	627b      	str	r3, [r7, #36]	; 0x24
 8003764:	f107 0320 	add.w	r3, r7, #32
 8003768:	4619      	mov	r1, r3
 800376a:	4816      	ldr	r0, [pc, #88]	; (80037c4 <MX_TIM4_Init+0xf8>)
 800376c:	f003 fcf6 	bl	800715c <HAL_TIMEx_MasterConfigSynchronization>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d001      	beq.n	800377a <MX_TIM4_Init+0xae>
 8003776:	f7ff fccd 	bl	8003114 <Error_Handler>
 800377a:	2360      	movs	r3, #96	; 0x60
 800377c:	607b      	str	r3, [r7, #4]
 800377e:	2347      	movs	r3, #71	; 0x47
 8003780:	60bb      	str	r3, [r7, #8]
 8003782:	2300      	movs	r3, #0
 8003784:	60fb      	str	r3, [r7, #12]
 8003786:	2300      	movs	r3, #0
 8003788:	617b      	str	r3, [r7, #20]
 800378a:	1d3b      	adds	r3, r7, #4
 800378c:	2200      	movs	r2, #0
 800378e:	4619      	mov	r1, r3
 8003790:	480c      	ldr	r0, [pc, #48]	; (80037c4 <MX_TIM4_Init+0xf8>)
 8003792:	f002 ff0d 	bl	80065b0 <HAL_TIM_PWM_ConfigChannel>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d001      	beq.n	80037a0 <MX_TIM4_Init+0xd4>
 800379c:	f7ff fcba 	bl	8003114 <Error_Handler>
 80037a0:	1d3b      	adds	r3, r7, #4
 80037a2:	2204      	movs	r2, #4
 80037a4:	4619      	mov	r1, r3
 80037a6:	4807      	ldr	r0, [pc, #28]	; (80037c4 <MX_TIM4_Init+0xf8>)
 80037a8:	f002 ff02 	bl	80065b0 <HAL_TIM_PWM_ConfigChannel>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <MX_TIM4_Init+0xea>
 80037b2:	f7ff fcaf 	bl	8003114 <Error_Handler>
 80037b6:	4803      	ldr	r0, [pc, #12]	; (80037c4 <MX_TIM4_Init+0xf8>)
 80037b8:	f000 f9d8 	bl	8003b6c <HAL_TIM_MspPostInit>
 80037bc:	bf00      	nop
 80037be:	3738      	adds	r7, #56	; 0x38
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	20000110 	.word	0x20000110
 80037c8:	40000800 	.word	0x40000800

080037cc <MX_TIM5_Init>:
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b092      	sub	sp, #72	; 0x48
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80037d6:	2200      	movs	r2, #0
 80037d8:	601a      	str	r2, [r3, #0]
 80037da:	605a      	str	r2, [r3, #4]
 80037dc:	609a      	str	r2, [r3, #8]
 80037de:	60da      	str	r2, [r3, #12]
 80037e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80037e4:	2200      	movs	r2, #0
 80037e6:	601a      	str	r2, [r3, #0]
 80037e8:	605a      	str	r2, [r3, #4]
 80037ea:	f107 0314 	add.w	r3, r7, #20
 80037ee:	2200      	movs	r2, #0
 80037f0:	601a      	str	r2, [r3, #0]
 80037f2:	605a      	str	r2, [r3, #4]
 80037f4:	609a      	str	r2, [r3, #8]
 80037f6:	60da      	str	r2, [r3, #12]
 80037f8:	611a      	str	r2, [r3, #16]
 80037fa:	615a      	str	r2, [r3, #20]
 80037fc:	619a      	str	r2, [r3, #24]
 80037fe:	1d3b      	adds	r3, r7, #4
 8003800:	2200      	movs	r2, #0
 8003802:	601a      	str	r2, [r3, #0]
 8003804:	605a      	str	r2, [r3, #4]
 8003806:	609a      	str	r2, [r3, #8]
 8003808:	60da      	str	r2, [r3, #12]
 800380a:	4b43      	ldr	r3, [pc, #268]	; (8003918 <MX_TIM5_Init+0x14c>)
 800380c:	4a43      	ldr	r2, [pc, #268]	; (800391c <MX_TIM5_Init+0x150>)
 800380e:	601a      	str	r2, [r3, #0]
 8003810:	4b41      	ldr	r3, [pc, #260]	; (8003918 <MX_TIM5_Init+0x14c>)
 8003812:	2259      	movs	r2, #89	; 0x59
 8003814:	605a      	str	r2, [r3, #4]
 8003816:	4b40      	ldr	r3, [pc, #256]	; (8003918 <MX_TIM5_Init+0x14c>)
 8003818:	2200      	movs	r2, #0
 800381a:	609a      	str	r2, [r3, #8]
 800381c:	4b3e      	ldr	r3, [pc, #248]	; (8003918 <MX_TIM5_Init+0x14c>)
 800381e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003822:	60da      	str	r2, [r3, #12]
 8003824:	4b3c      	ldr	r3, [pc, #240]	; (8003918 <MX_TIM5_Init+0x14c>)
 8003826:	2200      	movs	r2, #0
 8003828:	611a      	str	r2, [r3, #16]
 800382a:	4b3b      	ldr	r3, [pc, #236]	; (8003918 <MX_TIM5_Init+0x14c>)
 800382c:	2200      	movs	r2, #0
 800382e:	619a      	str	r2, [r3, #24]
 8003830:	4839      	ldr	r0, [pc, #228]	; (8003918 <MX_TIM5_Init+0x14c>)
 8003832:	f002 fb95 	bl	8005f60 <HAL_TIM_Base_Init>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d001      	beq.n	8003840 <MX_TIM5_Init+0x74>
 800383c:	f7ff fc6a 	bl	8003114 <Error_Handler>
 8003840:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003844:	63bb      	str	r3, [r7, #56]	; 0x38
 8003846:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800384a:	4619      	mov	r1, r3
 800384c:	4832      	ldr	r0, [pc, #200]	; (8003918 <MX_TIM5_Init+0x14c>)
 800384e:	f002 ff75 	bl	800673c <HAL_TIM_ConfigClockSource>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d001      	beq.n	800385c <MX_TIM5_Init+0x90>
 8003858:	f7ff fc5c 	bl	8003114 <Error_Handler>
 800385c:	482e      	ldr	r0, [pc, #184]	; (8003918 <MX_TIM5_Init+0x14c>)
 800385e:	f002 fbf2 	bl	8006046 <HAL_TIM_PWM_Init>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d001      	beq.n	800386c <MX_TIM5_Init+0xa0>
 8003868:	f7ff fc54 	bl	8003114 <Error_Handler>
 800386c:	482a      	ldr	r0, [pc, #168]	; (8003918 <MX_TIM5_Init+0x14c>)
 800386e:	f002 fc5d 	bl	800612c <HAL_TIM_IC_Init>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d001      	beq.n	800387c <MX_TIM5_Init+0xb0>
 8003878:	f7ff fc4c 	bl	8003114 <Error_Handler>
 800387c:	2300      	movs	r3, #0
 800387e:	633b      	str	r3, [r7, #48]	; 0x30
 8003880:	2300      	movs	r3, #0
 8003882:	637b      	str	r3, [r7, #52]	; 0x34
 8003884:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003888:	4619      	mov	r1, r3
 800388a:	4823      	ldr	r0, [pc, #140]	; (8003918 <MX_TIM5_Init+0x14c>)
 800388c:	f003 fc66 	bl	800715c <HAL_TIMEx_MasterConfigSynchronization>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d001      	beq.n	800389a <MX_TIM5_Init+0xce>
 8003896:	f7ff fc3d 	bl	8003114 <Error_Handler>
 800389a:	2360      	movs	r3, #96	; 0x60
 800389c:	617b      	str	r3, [r7, #20]
 800389e:	f06f 030a 	mvn.w	r3, #10
 80038a2:	61bb      	str	r3, [r7, #24]
 80038a4:	2302      	movs	r3, #2
 80038a6:	61fb      	str	r3, [r7, #28]
 80038a8:	2300      	movs	r3, #0
 80038aa:	627b      	str	r3, [r7, #36]	; 0x24
 80038ac:	f107 0314 	add.w	r3, r7, #20
 80038b0:	2200      	movs	r2, #0
 80038b2:	4619      	mov	r1, r3
 80038b4:	4818      	ldr	r0, [pc, #96]	; (8003918 <MX_TIM5_Init+0x14c>)
 80038b6:	f002 fe7b 	bl	80065b0 <HAL_TIM_PWM_ConfigChannel>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d001      	beq.n	80038c4 <MX_TIM5_Init+0xf8>
 80038c0:	f7ff fc28 	bl	8003114 <Error_Handler>
 80038c4:	2300      	movs	r3, #0
 80038c6:	607b      	str	r3, [r7, #4]
 80038c8:	2301      	movs	r3, #1
 80038ca:	60bb      	str	r3, [r7, #8]
 80038cc:	2300      	movs	r3, #0
 80038ce:	60fb      	str	r3, [r7, #12]
 80038d0:	2300      	movs	r3, #0
 80038d2:	613b      	str	r3, [r7, #16]
 80038d4:	1d3b      	adds	r3, r7, #4
 80038d6:	2208      	movs	r2, #8
 80038d8:	4619      	mov	r1, r3
 80038da:	480f      	ldr	r0, [pc, #60]	; (8003918 <MX_TIM5_Init+0x14c>)
 80038dc:	f002 fdcc 	bl	8006478 <HAL_TIM_IC_ConfigChannel>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d001      	beq.n	80038ea <MX_TIM5_Init+0x11e>
 80038e6:	f7ff fc15 	bl	8003114 <Error_Handler>
 80038ea:	2302      	movs	r3, #2
 80038ec:	607b      	str	r3, [r7, #4]
 80038ee:	2302      	movs	r3, #2
 80038f0:	60bb      	str	r3, [r7, #8]
 80038f2:	1d3b      	adds	r3, r7, #4
 80038f4:	220c      	movs	r2, #12
 80038f6:	4619      	mov	r1, r3
 80038f8:	4807      	ldr	r0, [pc, #28]	; (8003918 <MX_TIM5_Init+0x14c>)
 80038fa:	f002 fdbd 	bl	8006478 <HAL_TIM_IC_ConfigChannel>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d001      	beq.n	8003908 <MX_TIM5_Init+0x13c>
 8003904:	f7ff fc06 	bl	8003114 <Error_Handler>
 8003908:	4803      	ldr	r0, [pc, #12]	; (8003918 <MX_TIM5_Init+0x14c>)
 800390a:	f000 f92f 	bl	8003b6c <HAL_TIM_MspPostInit>
 800390e:	bf00      	nop
 8003910:	3748      	adds	r7, #72	; 0x48
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	20000150 	.word	0x20000150
 800391c:	40000c00 	.word	0x40000c00

08003920 <MX_TIM7_Init>:
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
 8003926:	463b      	mov	r3, r7
 8003928:	2200      	movs	r2, #0
 800392a:	601a      	str	r2, [r3, #0]
 800392c:	605a      	str	r2, [r3, #4]
 800392e:	4b15      	ldr	r3, [pc, #84]	; (8003984 <MX_TIM7_Init+0x64>)
 8003930:	4a15      	ldr	r2, [pc, #84]	; (8003988 <MX_TIM7_Init+0x68>)
 8003932:	601a      	str	r2, [r3, #0]
 8003934:	4b13      	ldr	r3, [pc, #76]	; (8003984 <MX_TIM7_Init+0x64>)
 8003936:	f240 3283 	movw	r2, #899	; 0x383
 800393a:	605a      	str	r2, [r3, #4]
 800393c:	4b11      	ldr	r3, [pc, #68]	; (8003984 <MX_TIM7_Init+0x64>)
 800393e:	2200      	movs	r2, #0
 8003940:	609a      	str	r2, [r3, #8]
 8003942:	4b10      	ldr	r3, [pc, #64]	; (8003984 <MX_TIM7_Init+0x64>)
 8003944:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003948:	60da      	str	r2, [r3, #12]
 800394a:	4b0e      	ldr	r3, [pc, #56]	; (8003984 <MX_TIM7_Init+0x64>)
 800394c:	2200      	movs	r2, #0
 800394e:	619a      	str	r2, [r3, #24]
 8003950:	480c      	ldr	r0, [pc, #48]	; (8003984 <MX_TIM7_Init+0x64>)
 8003952:	f002 fb05 	bl	8005f60 <HAL_TIM_Base_Init>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d001      	beq.n	8003960 <MX_TIM7_Init+0x40>
 800395c:	f7ff fbda 	bl	8003114 <Error_Handler>
 8003960:	2300      	movs	r3, #0
 8003962:	603b      	str	r3, [r7, #0]
 8003964:	2300      	movs	r3, #0
 8003966:	607b      	str	r3, [r7, #4]
 8003968:	463b      	mov	r3, r7
 800396a:	4619      	mov	r1, r3
 800396c:	4805      	ldr	r0, [pc, #20]	; (8003984 <MX_TIM7_Init+0x64>)
 800396e:	f003 fbf5 	bl	800715c <HAL_TIMEx_MasterConfigSynchronization>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d001      	beq.n	800397c <MX_TIM7_Init+0x5c>
 8003978:	f7ff fbcc 	bl	8003114 <Error_Handler>
 800397c:	bf00      	nop
 800397e:	3708      	adds	r7, #8
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	20000190 	.word	0x20000190
 8003988:	40001400 	.word	0x40001400

0800398c <HAL_TIM_Base_MspInit>:
 800398c:	b580      	push	{r7, lr}
 800398e:	b090      	sub	sp, #64	; 0x40
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003998:	2200      	movs	r2, #0
 800399a:	601a      	str	r2, [r3, #0]
 800399c:	605a      	str	r2, [r3, #4]
 800399e:	609a      	str	r2, [r3, #8]
 80039a0:	60da      	str	r2, [r3, #12]
 80039a2:	611a      	str	r2, [r3, #16]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039ac:	d12d      	bne.n	8003a0a <HAL_TIM_Base_MspInit+0x7e>
 80039ae:	2300      	movs	r3, #0
 80039b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80039b2:	4b66      	ldr	r3, [pc, #408]	; (8003b4c <HAL_TIM_Base_MspInit+0x1c0>)
 80039b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b6:	4a65      	ldr	r2, [pc, #404]	; (8003b4c <HAL_TIM_Base_MspInit+0x1c0>)
 80039b8:	f043 0301 	orr.w	r3, r3, #1
 80039bc:	6413      	str	r3, [r2, #64]	; 0x40
 80039be:	4b63      	ldr	r3, [pc, #396]	; (8003b4c <HAL_TIM_Base_MspInit+0x1c0>)
 80039c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c2:	f003 0301 	and.w	r3, r3, #1
 80039c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80039c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ca:	2300      	movs	r3, #0
 80039cc:	627b      	str	r3, [r7, #36]	; 0x24
 80039ce:	4b5f      	ldr	r3, [pc, #380]	; (8003b4c <HAL_TIM_Base_MspInit+0x1c0>)
 80039d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d2:	4a5e      	ldr	r2, [pc, #376]	; (8003b4c <HAL_TIM_Base_MspInit+0x1c0>)
 80039d4:	f043 0301 	orr.w	r3, r3, #1
 80039d8:	6313      	str	r3, [r2, #48]	; 0x30
 80039da:	4b5c      	ldr	r3, [pc, #368]	; (8003b4c <HAL_TIM_Base_MspInit+0x1c0>)
 80039dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039de:	f003 0301 	and.w	r3, r3, #1
 80039e2:	627b      	str	r3, [r7, #36]	; 0x24
 80039e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039ec:	2302      	movs	r3, #2
 80039ee:	633b      	str	r3, [r7, #48]	; 0x30
 80039f0:	2300      	movs	r3, #0
 80039f2:	637b      	str	r3, [r7, #52]	; 0x34
 80039f4:	2300      	movs	r3, #0
 80039f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80039f8:	2301      	movs	r3, #1
 80039fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a00:	4619      	mov	r1, r3
 8003a02:	4853      	ldr	r0, [pc, #332]	; (8003b50 <HAL_TIM_Base_MspInit+0x1c4>)
 8003a04:	f000 fbf0 	bl	80041e8 <HAL_GPIO_Init>
 8003a08:	e09b      	b.n	8003b42 <HAL_TIM_Base_MspInit+0x1b6>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a51      	ldr	r2, [pc, #324]	; (8003b54 <HAL_TIM_Base_MspInit+0x1c8>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d12c      	bne.n	8003a6e <HAL_TIM_Base_MspInit+0xe2>
 8003a14:	2300      	movs	r3, #0
 8003a16:	623b      	str	r3, [r7, #32]
 8003a18:	4b4c      	ldr	r3, [pc, #304]	; (8003b4c <HAL_TIM_Base_MspInit+0x1c0>)
 8003a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1c:	4a4b      	ldr	r2, [pc, #300]	; (8003b4c <HAL_TIM_Base_MspInit+0x1c0>)
 8003a1e:	f043 0302 	orr.w	r3, r3, #2
 8003a22:	6413      	str	r3, [r2, #64]	; 0x40
 8003a24:	4b49      	ldr	r3, [pc, #292]	; (8003b4c <HAL_TIM_Base_MspInit+0x1c0>)
 8003a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a28:	f003 0302 	and.w	r3, r3, #2
 8003a2c:	623b      	str	r3, [r7, #32]
 8003a2e:	6a3b      	ldr	r3, [r7, #32]
 8003a30:	2300      	movs	r3, #0
 8003a32:	61fb      	str	r3, [r7, #28]
 8003a34:	4b45      	ldr	r3, [pc, #276]	; (8003b4c <HAL_TIM_Base_MspInit+0x1c0>)
 8003a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a38:	4a44      	ldr	r2, [pc, #272]	; (8003b4c <HAL_TIM_Base_MspInit+0x1c0>)
 8003a3a:	f043 0308 	orr.w	r3, r3, #8
 8003a3e:	6313      	str	r3, [r2, #48]	; 0x30
 8003a40:	4b42      	ldr	r3, [pc, #264]	; (8003b4c <HAL_TIM_Base_MspInit+0x1c0>)
 8003a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a44:	f003 0308 	and.w	r3, r3, #8
 8003a48:	61fb      	str	r3, [r7, #28]
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	2304      	movs	r3, #4
 8003a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a50:	2302      	movs	r3, #2
 8003a52:	633b      	str	r3, [r7, #48]	; 0x30
 8003a54:	2300      	movs	r3, #0
 8003a56:	637b      	str	r3, [r7, #52]	; 0x34
 8003a58:	2300      	movs	r3, #0
 8003a5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a5c:	2302      	movs	r3, #2
 8003a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a64:	4619      	mov	r1, r3
 8003a66:	483c      	ldr	r0, [pc, #240]	; (8003b58 <HAL_TIM_Base_MspInit+0x1cc>)
 8003a68:	f000 fbbe 	bl	80041e8 <HAL_GPIO_Init>
 8003a6c:	e069      	b.n	8003b42 <HAL_TIM_Base_MspInit+0x1b6>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a3a      	ldr	r2, [pc, #232]	; (8003b5c <HAL_TIM_Base_MspInit+0x1d0>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d10e      	bne.n	8003a96 <HAL_TIM_Base_MspInit+0x10a>
 8003a78:	2300      	movs	r3, #0
 8003a7a:	61bb      	str	r3, [r7, #24]
 8003a7c:	4b33      	ldr	r3, [pc, #204]	; (8003b4c <HAL_TIM_Base_MspInit+0x1c0>)
 8003a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a80:	4a32      	ldr	r2, [pc, #200]	; (8003b4c <HAL_TIM_Base_MspInit+0x1c0>)
 8003a82:	f043 0304 	orr.w	r3, r3, #4
 8003a86:	6413      	str	r3, [r2, #64]	; 0x40
 8003a88:	4b30      	ldr	r3, [pc, #192]	; (8003b4c <HAL_TIM_Base_MspInit+0x1c0>)
 8003a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8c:	f003 0304 	and.w	r3, r3, #4
 8003a90:	61bb      	str	r3, [r7, #24]
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	e055      	b.n	8003b42 <HAL_TIM_Base_MspInit+0x1b6>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a31      	ldr	r2, [pc, #196]	; (8003b60 <HAL_TIM_Base_MspInit+0x1d4>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d135      	bne.n	8003b0c <HAL_TIM_Base_MspInit+0x180>
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	617b      	str	r3, [r7, #20]
 8003aa4:	4b29      	ldr	r3, [pc, #164]	; (8003b4c <HAL_TIM_Base_MspInit+0x1c0>)
 8003aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa8:	4a28      	ldr	r2, [pc, #160]	; (8003b4c <HAL_TIM_Base_MspInit+0x1c0>)
 8003aaa:	f043 0308 	orr.w	r3, r3, #8
 8003aae:	6413      	str	r3, [r2, #64]	; 0x40
 8003ab0:	4b26      	ldr	r3, [pc, #152]	; (8003b4c <HAL_TIM_Base_MspInit+0x1c0>)
 8003ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab4:	f003 0308 	and.w	r3, r3, #8
 8003ab8:	617b      	str	r3, [r7, #20]
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	2300      	movs	r3, #0
 8003abe:	613b      	str	r3, [r7, #16]
 8003ac0:	4b22      	ldr	r3, [pc, #136]	; (8003b4c <HAL_TIM_Base_MspInit+0x1c0>)
 8003ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac4:	4a21      	ldr	r2, [pc, #132]	; (8003b4c <HAL_TIM_Base_MspInit+0x1c0>)
 8003ac6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003aca:	6313      	str	r3, [r2, #48]	; 0x30
 8003acc:	4b1f      	ldr	r3, [pc, #124]	; (8003b4c <HAL_TIM_Base_MspInit+0x1c0>)
 8003ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ad4:	613b      	str	r3, [r7, #16]
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003adc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ade:	2302      	movs	r3, #2
 8003ae0:	633b      	str	r3, [r7, #48]	; 0x30
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	637b      	str	r3, [r7, #52]	; 0x34
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	63bb      	str	r3, [r7, #56]	; 0x38
 8003aea:	2302      	movs	r3, #2
 8003aec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003aee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003af2:	4619      	mov	r1, r3
 8003af4:	481b      	ldr	r0, [pc, #108]	; (8003b64 <HAL_TIM_Base_MspInit+0x1d8>)
 8003af6:	f000 fb77 	bl	80041e8 <HAL_GPIO_Init>
 8003afa:	2200      	movs	r2, #0
 8003afc:	2100      	movs	r1, #0
 8003afe:	2032      	movs	r0, #50	; 0x32
 8003b00:	f000 faab 	bl	800405a <HAL_NVIC_SetPriority>
 8003b04:	2032      	movs	r0, #50	; 0x32
 8003b06:	f000 fac4 	bl	8004092 <HAL_NVIC_EnableIRQ>
 8003b0a:	e01a      	b.n	8003b42 <HAL_TIM_Base_MspInit+0x1b6>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a15      	ldr	r2, [pc, #84]	; (8003b68 <HAL_TIM_Base_MspInit+0x1dc>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d115      	bne.n	8003b42 <HAL_TIM_Base_MspInit+0x1b6>
 8003b16:	2300      	movs	r3, #0
 8003b18:	60fb      	str	r3, [r7, #12]
 8003b1a:	4b0c      	ldr	r3, [pc, #48]	; (8003b4c <HAL_TIM_Base_MspInit+0x1c0>)
 8003b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1e:	4a0b      	ldr	r2, [pc, #44]	; (8003b4c <HAL_TIM_Base_MspInit+0x1c0>)
 8003b20:	f043 0320 	orr.w	r3, r3, #32
 8003b24:	6413      	str	r3, [r2, #64]	; 0x40
 8003b26:	4b09      	ldr	r3, [pc, #36]	; (8003b4c <HAL_TIM_Base_MspInit+0x1c0>)
 8003b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2a:	f003 0320 	and.w	r3, r3, #32
 8003b2e:	60fb      	str	r3, [r7, #12]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2200      	movs	r2, #0
 8003b34:	2100      	movs	r1, #0
 8003b36:	2037      	movs	r0, #55	; 0x37
 8003b38:	f000 fa8f 	bl	800405a <HAL_NVIC_SetPriority>
 8003b3c:	2037      	movs	r0, #55	; 0x37
 8003b3e:	f000 faa8 	bl	8004092 <HAL_NVIC_EnableIRQ>
 8003b42:	bf00      	nop
 8003b44:	3740      	adds	r7, #64	; 0x40
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	40023800 	.word	0x40023800
 8003b50:	40020000 	.word	0x40020000
 8003b54:	40000400 	.word	0x40000400
 8003b58:	40020c00 	.word	0x40020c00
 8003b5c:	40000800 	.word	0x40000800
 8003b60:	40000c00 	.word	0x40000c00
 8003b64:	40021c00 	.word	0x40021c00
 8003b68:	40001400 	.word	0x40001400

08003b6c <HAL_TIM_MspPostInit>:
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b08a      	sub	sp, #40	; 0x28
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	f107 0314 	add.w	r3, r7, #20
 8003b78:	2200      	movs	r2, #0
 8003b7a:	601a      	str	r2, [r3, #0]
 8003b7c:	605a      	str	r2, [r3, #4]
 8003b7e:	609a      	str	r2, [r3, #8]
 8003b80:	60da      	str	r2, [r3, #12]
 8003b82:	611a      	str	r2, [r3, #16]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a25      	ldr	r2, [pc, #148]	; (8003c20 <HAL_TIM_MspPostInit+0xb4>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d11f      	bne.n	8003bce <HAL_TIM_MspPostInit+0x62>
 8003b8e:	2300      	movs	r3, #0
 8003b90:	613b      	str	r3, [r7, #16]
 8003b92:	4b24      	ldr	r3, [pc, #144]	; (8003c24 <HAL_TIM_MspPostInit+0xb8>)
 8003b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b96:	4a23      	ldr	r2, [pc, #140]	; (8003c24 <HAL_TIM_MspPostInit+0xb8>)
 8003b98:	f043 0308 	orr.w	r3, r3, #8
 8003b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b9e:	4b21      	ldr	r3, [pc, #132]	; (8003c24 <HAL_TIM_MspPostInit+0xb8>)
 8003ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba2:	f003 0308 	and.w	r3, r3, #8
 8003ba6:	613b      	str	r3, [r7, #16]
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003bae:	617b      	str	r3, [r7, #20]
 8003bb0:	2302      	movs	r3, #2
 8003bb2:	61bb      	str	r3, [r7, #24]
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	61fb      	str	r3, [r7, #28]
 8003bb8:	2300      	movs	r3, #0
 8003bba:	623b      	str	r3, [r7, #32]
 8003bbc:	2302      	movs	r3, #2
 8003bbe:	627b      	str	r3, [r7, #36]	; 0x24
 8003bc0:	f107 0314 	add.w	r3, r7, #20
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	4818      	ldr	r0, [pc, #96]	; (8003c28 <HAL_TIM_MspPostInit+0xbc>)
 8003bc8:	f000 fb0e 	bl	80041e8 <HAL_GPIO_Init>
 8003bcc:	e023      	b.n	8003c16 <HAL_TIM_MspPostInit+0xaa>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a16      	ldr	r2, [pc, #88]	; (8003c2c <HAL_TIM_MspPostInit+0xc0>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d11e      	bne.n	8003c16 <HAL_TIM_MspPostInit+0xaa>
 8003bd8:	2300      	movs	r3, #0
 8003bda:	60fb      	str	r3, [r7, #12]
 8003bdc:	4b11      	ldr	r3, [pc, #68]	; (8003c24 <HAL_TIM_MspPostInit+0xb8>)
 8003bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be0:	4a10      	ldr	r2, [pc, #64]	; (8003c24 <HAL_TIM_MspPostInit+0xb8>)
 8003be2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003be6:	6313      	str	r3, [r2, #48]	; 0x30
 8003be8:	4b0e      	ldr	r3, [pc, #56]	; (8003c24 <HAL_TIM_MspPostInit+0xb8>)
 8003bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bf0:	60fb      	str	r3, [r7, #12]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003bf8:	617b      	str	r3, [r7, #20]
 8003bfa:	2302      	movs	r3, #2
 8003bfc:	61bb      	str	r3, [r7, #24]
 8003bfe:	2300      	movs	r3, #0
 8003c00:	61fb      	str	r3, [r7, #28]
 8003c02:	2300      	movs	r3, #0
 8003c04:	623b      	str	r3, [r7, #32]
 8003c06:	2302      	movs	r3, #2
 8003c08:	627b      	str	r3, [r7, #36]	; 0x24
 8003c0a:	f107 0314 	add.w	r3, r7, #20
 8003c0e:	4619      	mov	r1, r3
 8003c10:	4807      	ldr	r0, [pc, #28]	; (8003c30 <HAL_TIM_MspPostInit+0xc4>)
 8003c12:	f000 fae9 	bl	80041e8 <HAL_GPIO_Init>
 8003c16:	bf00      	nop
 8003c18:	3728      	adds	r7, #40	; 0x28
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	40000800 	.word	0x40000800
 8003c24:	40023800 	.word	0x40023800
 8003c28:	40020c00 	.word	0x40020c00
 8003c2c:	40000c00 	.word	0x40000c00
 8003c30:	40021c00 	.word	0x40021c00

08003c34 <MX_UART7_Init>:
 8003c34:	b580      	push	{r7, lr}
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	4b11      	ldr	r3, [pc, #68]	; (8003c80 <MX_UART7_Init+0x4c>)
 8003c3a:	4a12      	ldr	r2, [pc, #72]	; (8003c84 <MX_UART7_Init+0x50>)
 8003c3c:	601a      	str	r2, [r3, #0]
 8003c3e:	4b10      	ldr	r3, [pc, #64]	; (8003c80 <MX_UART7_Init+0x4c>)
 8003c40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003c44:	605a      	str	r2, [r3, #4]
 8003c46:	4b0e      	ldr	r3, [pc, #56]	; (8003c80 <MX_UART7_Init+0x4c>)
 8003c48:	2200      	movs	r2, #0
 8003c4a:	609a      	str	r2, [r3, #8]
 8003c4c:	4b0c      	ldr	r3, [pc, #48]	; (8003c80 <MX_UART7_Init+0x4c>)
 8003c4e:	2200      	movs	r2, #0
 8003c50:	60da      	str	r2, [r3, #12]
 8003c52:	4b0b      	ldr	r3, [pc, #44]	; (8003c80 <MX_UART7_Init+0x4c>)
 8003c54:	2200      	movs	r2, #0
 8003c56:	611a      	str	r2, [r3, #16]
 8003c58:	4b09      	ldr	r3, [pc, #36]	; (8003c80 <MX_UART7_Init+0x4c>)
 8003c5a:	220c      	movs	r2, #12
 8003c5c:	615a      	str	r2, [r3, #20]
 8003c5e:	4b08      	ldr	r3, [pc, #32]	; (8003c80 <MX_UART7_Init+0x4c>)
 8003c60:	2200      	movs	r2, #0
 8003c62:	619a      	str	r2, [r3, #24]
 8003c64:	4b06      	ldr	r3, [pc, #24]	; (8003c80 <MX_UART7_Init+0x4c>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	61da      	str	r2, [r3, #28]
 8003c6a:	4805      	ldr	r0, [pc, #20]	; (8003c80 <MX_UART7_Init+0x4c>)
 8003c6c:	f003 fb06 	bl	800727c <HAL_UART_Init>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d001      	beq.n	8003c7a <MX_UART7_Init+0x46>
 8003c76:	f7ff fa4d 	bl	8003114 <Error_Handler>
 8003c7a:	bf00      	nop
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	200001d0 	.word	0x200001d0
 8003c84:	40007800 	.word	0x40007800

08003c88 <HAL_UART_MspInit>:
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b08a      	sub	sp, #40	; 0x28
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	f107 0314 	add.w	r3, r7, #20
 8003c94:	2200      	movs	r2, #0
 8003c96:	601a      	str	r2, [r3, #0]
 8003c98:	605a      	str	r2, [r3, #4]
 8003c9a:	609a      	str	r2, [r3, #8]
 8003c9c:	60da      	str	r2, [r3, #12]
 8003c9e:	611a      	str	r2, [r3, #16]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a1d      	ldr	r2, [pc, #116]	; (8003d1c <HAL_UART_MspInit+0x94>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d133      	bne.n	8003d12 <HAL_UART_MspInit+0x8a>
 8003caa:	2300      	movs	r3, #0
 8003cac:	613b      	str	r3, [r7, #16]
 8003cae:	4b1c      	ldr	r3, [pc, #112]	; (8003d20 <HAL_UART_MspInit+0x98>)
 8003cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb2:	4a1b      	ldr	r2, [pc, #108]	; (8003d20 <HAL_UART_MspInit+0x98>)
 8003cb4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003cb8:	6413      	str	r3, [r2, #64]	; 0x40
 8003cba:	4b19      	ldr	r3, [pc, #100]	; (8003d20 <HAL_UART_MspInit+0x98>)
 8003cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cbe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003cc2:	613b      	str	r3, [r7, #16]
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	60fb      	str	r3, [r7, #12]
 8003cca:	4b15      	ldr	r3, [pc, #84]	; (8003d20 <HAL_UART_MspInit+0x98>)
 8003ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cce:	4a14      	ldr	r2, [pc, #80]	; (8003d20 <HAL_UART_MspInit+0x98>)
 8003cd0:	f043 0320 	orr.w	r3, r3, #32
 8003cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8003cd6:	4b12      	ldr	r3, [pc, #72]	; (8003d20 <HAL_UART_MspInit+0x98>)
 8003cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cda:	f003 0320 	and.w	r3, r3, #32
 8003cde:	60fb      	str	r3, [r7, #12]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	23c0      	movs	r3, #192	; 0xc0
 8003ce4:	617b      	str	r3, [r7, #20]
 8003ce6:	2302      	movs	r3, #2
 8003ce8:	61bb      	str	r3, [r7, #24]
 8003cea:	2301      	movs	r3, #1
 8003cec:	61fb      	str	r3, [r7, #28]
 8003cee:	2303      	movs	r3, #3
 8003cf0:	623b      	str	r3, [r7, #32]
 8003cf2:	2308      	movs	r3, #8
 8003cf4:	627b      	str	r3, [r7, #36]	; 0x24
 8003cf6:	f107 0314 	add.w	r3, r7, #20
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	4809      	ldr	r0, [pc, #36]	; (8003d24 <HAL_UART_MspInit+0x9c>)
 8003cfe:	f000 fa73 	bl	80041e8 <HAL_GPIO_Init>
 8003d02:	2200      	movs	r2, #0
 8003d04:	2100      	movs	r1, #0
 8003d06:	2052      	movs	r0, #82	; 0x52
 8003d08:	f000 f9a7 	bl	800405a <HAL_NVIC_SetPriority>
 8003d0c:	2052      	movs	r0, #82	; 0x52
 8003d0e:	f000 f9c0 	bl	8004092 <HAL_NVIC_EnableIRQ>
 8003d12:	bf00      	nop
 8003d14:	3728      	adds	r7, #40	; 0x28
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	40007800 	.word	0x40007800
 8003d20:	40023800 	.word	0x40023800
 8003d24:	40021400 	.word	0x40021400

08003d28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003d28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d60 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003d2c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003d2e:	e003      	b.n	8003d38 <LoopCopyDataInit>

08003d30 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003d30:	4b0c      	ldr	r3, [pc, #48]	; (8003d64 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003d32:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003d34:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003d36:	3104      	adds	r1, #4

08003d38 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003d38:	480b      	ldr	r0, [pc, #44]	; (8003d68 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003d3a:	4b0c      	ldr	r3, [pc, #48]	; (8003d6c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003d3c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003d3e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003d40:	d3f6      	bcc.n	8003d30 <CopyDataInit>
  ldr  r2, =_sbss
 8003d42:	4a0b      	ldr	r2, [pc, #44]	; (8003d70 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003d44:	e002      	b.n	8003d4c <LoopFillZerobss>

08003d46 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003d46:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003d48:	f842 3b04 	str.w	r3, [r2], #4

08003d4c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003d4c:	4b09      	ldr	r3, [pc, #36]	; (8003d74 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003d4e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003d50:	d3f9      	bcc.n	8003d46 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003d52:	f7ff fbff 	bl	8003554 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003d56:	f004 f92b 	bl	8007fb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d5a:	f7fd fdcf 	bl	80018fc <main>
  bx  lr    
 8003d5e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003d60:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8003d64:	08009280 	.word	0x08009280
  ldr  r0, =_sdata
 8003d68:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003d6c:	20000034 	.word	0x20000034
  ldr  r2, =_sbss
 8003d70:	20000034 	.word	0x20000034
  ldr  r3, = _ebss
 8003d74:	20000330 	.word	0x20000330

08003d78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d78:	e7fe      	b.n	8003d78 <ADC_IRQHandler>
	...

08003d7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003d80:	4b0e      	ldr	r3, [pc, #56]	; (8003dbc <HAL_Init+0x40>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a0d      	ldr	r2, [pc, #52]	; (8003dbc <HAL_Init+0x40>)
 8003d86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003d8c:	4b0b      	ldr	r3, [pc, #44]	; (8003dbc <HAL_Init+0x40>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a0a      	ldr	r2, [pc, #40]	; (8003dbc <HAL_Init+0x40>)
 8003d92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d98:	4b08      	ldr	r3, [pc, #32]	; (8003dbc <HAL_Init+0x40>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a07      	ldr	r2, [pc, #28]	; (8003dbc <HAL_Init+0x40>)
 8003d9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003da2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003da4:	2003      	movs	r0, #3
 8003da6:	f000 f94d 	bl	8004044 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003daa:	2000      	movs	r0, #0
 8003dac:	f000 f808 	bl	8003dc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003db0:	f7ff fb5c 	bl	800346c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	40023c00 	.word	0x40023c00

08003dc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003dc8:	4b12      	ldr	r3, [pc, #72]	; (8003e14 <HAL_InitTick+0x54>)
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	4b12      	ldr	r3, [pc, #72]	; (8003e18 <HAL_InitTick+0x58>)
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003dd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dde:	4618      	mov	r0, r3
 8003de0:	f000 f965 	bl	80040ae <HAL_SYSTICK_Config>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d001      	beq.n	8003dee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e00e      	b.n	8003e0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2b0f      	cmp	r3, #15
 8003df2:	d80a      	bhi.n	8003e0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003df4:	2200      	movs	r2, #0
 8003df6:	6879      	ldr	r1, [r7, #4]
 8003df8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003dfc:	f000 f92d 	bl	800405a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003e00:	4a06      	ldr	r2, [pc, #24]	; (8003e1c <HAL_InitTick+0x5c>)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003e06:	2300      	movs	r3, #0
 8003e08:	e000      	b.n	8003e0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3708      	adds	r7, #8
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	20000028 	.word	0x20000028
 8003e18:	20000030 	.word	0x20000030
 8003e1c:	2000002c 	.word	0x2000002c

08003e20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e20:	b480      	push	{r7}
 8003e22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e24:	4b06      	ldr	r3, [pc, #24]	; (8003e40 <HAL_IncTick+0x20>)
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	461a      	mov	r2, r3
 8003e2a:	4b06      	ldr	r3, [pc, #24]	; (8003e44 <HAL_IncTick+0x24>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4413      	add	r3, r2
 8003e30:	4a04      	ldr	r2, [pc, #16]	; (8003e44 <HAL_IncTick+0x24>)
 8003e32:	6013      	str	r3, [r2, #0]
}
 8003e34:	bf00      	nop
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	20000030 	.word	0x20000030
 8003e44:	2000032c 	.word	0x2000032c

08003e48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	af00      	add	r7, sp, #0
  return uwTick;
 8003e4c:	4b03      	ldr	r3, [pc, #12]	; (8003e5c <HAL_GetTick+0x14>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr
 8003e5a:	bf00      	nop
 8003e5c:	2000032c 	.word	0x2000032c

08003e60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e68:	f7ff ffee 	bl	8003e48 <HAL_GetTick>
 8003e6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e78:	d005      	beq.n	8003e86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e7a:	4b09      	ldr	r3, [pc, #36]	; (8003ea0 <HAL_Delay+0x40>)
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	461a      	mov	r2, r3
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	4413      	add	r3, r2
 8003e84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003e86:	bf00      	nop
 8003e88:	f7ff ffde 	bl	8003e48 <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	68fa      	ldr	r2, [r7, #12]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d8f7      	bhi.n	8003e88 <HAL_Delay+0x28>
  {
  }
}
 8003e98:	bf00      	nop
 8003e9a:	3710      	adds	r7, #16
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	20000030 	.word	0x20000030

08003ea4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b085      	sub	sp, #20
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f003 0307 	and.w	r3, r3, #7
 8003eb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003eb4:	4b0c      	ldr	r3, [pc, #48]	; (8003ee8 <__NVIC_SetPriorityGrouping+0x44>)
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003eba:	68ba      	ldr	r2, [r7, #8]
 8003ebc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ecc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ed0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ed4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ed6:	4a04      	ldr	r2, [pc, #16]	; (8003ee8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	60d3      	str	r3, [r2, #12]
}
 8003edc:	bf00      	nop
 8003ede:	3714      	adds	r7, #20
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr
 8003ee8:	e000ed00 	.word	0xe000ed00

08003eec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003eec:	b480      	push	{r7}
 8003eee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ef0:	4b04      	ldr	r3, [pc, #16]	; (8003f04 <__NVIC_GetPriorityGrouping+0x18>)
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	0a1b      	lsrs	r3, r3, #8
 8003ef6:	f003 0307 	and.w	r3, r3, #7
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr
 8003f04:	e000ed00 	.word	0xe000ed00

08003f08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	4603      	mov	r3, r0
 8003f10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	db0b      	blt.n	8003f32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f1a:	79fb      	ldrb	r3, [r7, #7]
 8003f1c:	f003 021f 	and.w	r2, r3, #31
 8003f20:	4907      	ldr	r1, [pc, #28]	; (8003f40 <__NVIC_EnableIRQ+0x38>)
 8003f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f26:	095b      	lsrs	r3, r3, #5
 8003f28:	2001      	movs	r0, #1
 8003f2a:	fa00 f202 	lsl.w	r2, r0, r2
 8003f2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003f32:	bf00      	nop
 8003f34:	370c      	adds	r7, #12
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	e000e100 	.word	0xe000e100

08003f44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	6039      	str	r1, [r7, #0]
 8003f4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	db0a      	blt.n	8003f6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	b2da      	uxtb	r2, r3
 8003f5c:	490c      	ldr	r1, [pc, #48]	; (8003f90 <__NVIC_SetPriority+0x4c>)
 8003f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f62:	0112      	lsls	r2, r2, #4
 8003f64:	b2d2      	uxtb	r2, r2
 8003f66:	440b      	add	r3, r1
 8003f68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f6c:	e00a      	b.n	8003f84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	b2da      	uxtb	r2, r3
 8003f72:	4908      	ldr	r1, [pc, #32]	; (8003f94 <__NVIC_SetPriority+0x50>)
 8003f74:	79fb      	ldrb	r3, [r7, #7]
 8003f76:	f003 030f 	and.w	r3, r3, #15
 8003f7a:	3b04      	subs	r3, #4
 8003f7c:	0112      	lsls	r2, r2, #4
 8003f7e:	b2d2      	uxtb	r2, r2
 8003f80:	440b      	add	r3, r1
 8003f82:	761a      	strb	r2, [r3, #24]
}
 8003f84:	bf00      	nop
 8003f86:	370c      	adds	r7, #12
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr
 8003f90:	e000e100 	.word	0xe000e100
 8003f94:	e000ed00 	.word	0xe000ed00

08003f98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b089      	sub	sp, #36	; 0x24
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	60b9      	str	r1, [r7, #8]
 8003fa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f003 0307 	and.w	r3, r3, #7
 8003faa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	f1c3 0307 	rsb	r3, r3, #7
 8003fb2:	2b04      	cmp	r3, #4
 8003fb4:	bf28      	it	cs
 8003fb6:	2304      	movcs	r3, #4
 8003fb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	3304      	adds	r3, #4
 8003fbe:	2b06      	cmp	r3, #6
 8003fc0:	d902      	bls.n	8003fc8 <NVIC_EncodePriority+0x30>
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	3b03      	subs	r3, #3
 8003fc6:	e000      	b.n	8003fca <NVIC_EncodePriority+0x32>
 8003fc8:	2300      	movs	r3, #0
 8003fca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fcc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd6:	43da      	mvns	r2, r3
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	401a      	ands	r2, r3
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fe0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8003fea:	43d9      	mvns	r1, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ff0:	4313      	orrs	r3, r2
         );
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3724      	adds	r7, #36	; 0x24
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr
	...

08004000 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	3b01      	subs	r3, #1
 800400c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004010:	d301      	bcc.n	8004016 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004012:	2301      	movs	r3, #1
 8004014:	e00f      	b.n	8004036 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004016:	4a0a      	ldr	r2, [pc, #40]	; (8004040 <SysTick_Config+0x40>)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	3b01      	subs	r3, #1
 800401c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800401e:	210f      	movs	r1, #15
 8004020:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004024:	f7ff ff8e 	bl	8003f44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004028:	4b05      	ldr	r3, [pc, #20]	; (8004040 <SysTick_Config+0x40>)
 800402a:	2200      	movs	r2, #0
 800402c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800402e:	4b04      	ldr	r3, [pc, #16]	; (8004040 <SysTick_Config+0x40>)
 8004030:	2207      	movs	r2, #7
 8004032:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004034:	2300      	movs	r3, #0
}
 8004036:	4618      	mov	r0, r3
 8004038:	3708      	adds	r7, #8
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	e000e010 	.word	0xe000e010

08004044 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b082      	sub	sp, #8
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f7ff ff29 	bl	8003ea4 <__NVIC_SetPriorityGrouping>
}
 8004052:	bf00      	nop
 8004054:	3708      	adds	r7, #8
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}

0800405a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800405a:	b580      	push	{r7, lr}
 800405c:	b086      	sub	sp, #24
 800405e:	af00      	add	r7, sp, #0
 8004060:	4603      	mov	r3, r0
 8004062:	60b9      	str	r1, [r7, #8]
 8004064:	607a      	str	r2, [r7, #4]
 8004066:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004068:	2300      	movs	r3, #0
 800406a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800406c:	f7ff ff3e 	bl	8003eec <__NVIC_GetPriorityGrouping>
 8004070:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	68b9      	ldr	r1, [r7, #8]
 8004076:	6978      	ldr	r0, [r7, #20]
 8004078:	f7ff ff8e 	bl	8003f98 <NVIC_EncodePriority>
 800407c:	4602      	mov	r2, r0
 800407e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004082:	4611      	mov	r1, r2
 8004084:	4618      	mov	r0, r3
 8004086:	f7ff ff5d 	bl	8003f44 <__NVIC_SetPriority>
}
 800408a:	bf00      	nop
 800408c:	3718      	adds	r7, #24
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}

08004092 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004092:	b580      	push	{r7, lr}
 8004094:	b082      	sub	sp, #8
 8004096:	af00      	add	r7, sp, #0
 8004098:	4603      	mov	r3, r0
 800409a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800409c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040a0:	4618      	mov	r0, r3
 80040a2:	f7ff ff31 	bl	8003f08 <__NVIC_EnableIRQ>
}
 80040a6:	bf00      	nop
 80040a8:	3708      	adds	r7, #8
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}

080040ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80040ae:	b580      	push	{r7, lr}
 80040b0:	b082      	sub	sp, #8
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f7ff ffa2 	bl	8004000 <SysTick_Config>
 80040bc:	4603      	mov	r3, r0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3708      	adds	r7, #8
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}

080040c6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80040c6:	b580      	push	{r7, lr}
 80040c8:	b082      	sub	sp, #8
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d101      	bne.n	80040d8 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e014      	b.n	8004102 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	791b      	ldrb	r3, [r3, #4]
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d105      	bne.n	80040ee <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f7fd fa9d 	bl	8001628 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2202      	movs	r2, #2
 80040f2:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2201      	movs	r2, #1
 80040fe:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8004100:	2300      	movs	r3, #0
}
 8004102:	4618      	mov	r0, r3
 8004104:	3708      	adds	r7, #8
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}

0800410a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 800410a:	b480      	push	{r7}
 800410c:	b087      	sub	sp, #28
 800410e:	af00      	add	r7, sp, #0
 8004110:	60f8      	str	r0, [r7, #12]
 8004112:	60b9      	str	r1, [r7, #8]
 8004114:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8004116:	2300      	movs	r3, #0
 8004118:	617b      	str	r3, [r7, #20]
 800411a:	2300      	movs	r3, #0
 800411c:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	795b      	ldrb	r3, [r3, #5]
 8004122:	2b01      	cmp	r3, #1
 8004124:	d101      	bne.n	800412a <HAL_DAC_ConfigChannel+0x20>
 8004126:	2302      	movs	r3, #2
 8004128:	e036      	b.n	8004198 <HAL_DAC_ConfigChannel+0x8e>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2201      	movs	r2, #1
 800412e:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2202      	movs	r2, #2
 8004134:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 800413e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	fa02 f303 	lsl.w	r3, r2, r3
 8004148:	43db      	mvns	r3, r3
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	4013      	ands	r3, r2
 800414e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	4313      	orrs	r3, r2
 800415a:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 800415c:	693a      	ldr	r2, [r7, #16]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	fa02 f303 	lsl.w	r3, r2, r3
 8004164:	697a      	ldr	r2, [r7, #20]
 8004166:	4313      	orrs	r3, r2
 8004168:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	697a      	ldr	r2, [r7, #20]
 8004170:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	6819      	ldr	r1, [r3, #0]
 8004178:	22c0      	movs	r2, #192	; 0xc0
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	fa02 f303 	lsl.w	r3, r2, r3
 8004180:	43da      	mvns	r2, r3
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	400a      	ands	r2, r1
 8004188:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2201      	movs	r2, #1
 800418e:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2200      	movs	r2, #0
 8004194:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8004196:	2300      	movs	r3, #0
}
 8004198:	4618      	mov	r0, r3
 800419a:	371c      	adds	r7, #28
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d004      	beq.n	80041c2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2280      	movs	r2, #128	; 0x80
 80041bc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e00c      	b.n	80041dc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2205      	movs	r2, #5
 80041c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f022 0201 	bic.w	r2, r2, #1
 80041d8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80041da:	2300      	movs	r3, #0
}
 80041dc:	4618      	mov	r0, r3
 80041de:	370c      	adds	r7, #12
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b089      	sub	sp, #36	; 0x24
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80041f2:	2300      	movs	r3, #0
 80041f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80041f6:	2300      	movs	r3, #0
 80041f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80041fa:	2300      	movs	r3, #0
 80041fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041fe:	2300      	movs	r3, #0
 8004200:	61fb      	str	r3, [r7, #28]
 8004202:	e177      	b.n	80044f4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004204:	2201      	movs	r2, #1
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	fa02 f303 	lsl.w	r3, r2, r3
 800420c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	697a      	ldr	r2, [r7, #20]
 8004214:	4013      	ands	r3, r2
 8004216:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004218:	693a      	ldr	r2, [r7, #16]
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	429a      	cmp	r2, r3
 800421e:	f040 8166 	bne.w	80044ee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	2b01      	cmp	r3, #1
 8004228:	d00b      	beq.n	8004242 <HAL_GPIO_Init+0x5a>
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	2b02      	cmp	r3, #2
 8004230:	d007      	beq.n	8004242 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004236:	2b11      	cmp	r3, #17
 8004238:	d003      	beq.n	8004242 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	2b12      	cmp	r3, #18
 8004240:	d130      	bne.n	80042a4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	005b      	lsls	r3, r3, #1
 800424c:	2203      	movs	r2, #3
 800424e:	fa02 f303 	lsl.w	r3, r2, r3
 8004252:	43db      	mvns	r3, r3
 8004254:	69ba      	ldr	r2, [r7, #24]
 8004256:	4013      	ands	r3, r2
 8004258:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	68da      	ldr	r2, [r3, #12]
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	005b      	lsls	r3, r3, #1
 8004262:	fa02 f303 	lsl.w	r3, r2, r3
 8004266:	69ba      	ldr	r2, [r7, #24]
 8004268:	4313      	orrs	r3, r2
 800426a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	69ba      	ldr	r2, [r7, #24]
 8004270:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004278:	2201      	movs	r2, #1
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	fa02 f303 	lsl.w	r3, r2, r3
 8004280:	43db      	mvns	r3, r3
 8004282:	69ba      	ldr	r2, [r7, #24]
 8004284:	4013      	ands	r3, r2
 8004286:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	091b      	lsrs	r3, r3, #4
 800428e:	f003 0201 	and.w	r2, r3, #1
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	fa02 f303 	lsl.w	r3, r2, r3
 8004298:	69ba      	ldr	r2, [r7, #24]
 800429a:	4313      	orrs	r3, r2
 800429c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	69ba      	ldr	r2, [r7, #24]
 80042a2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	005b      	lsls	r3, r3, #1
 80042ae:	2203      	movs	r2, #3
 80042b0:	fa02 f303 	lsl.w	r3, r2, r3
 80042b4:	43db      	mvns	r3, r3
 80042b6:	69ba      	ldr	r2, [r7, #24]
 80042b8:	4013      	ands	r3, r2
 80042ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	689a      	ldr	r2, [r3, #8]
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	005b      	lsls	r3, r3, #1
 80042c4:	fa02 f303 	lsl.w	r3, r2, r3
 80042c8:	69ba      	ldr	r2, [r7, #24]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	69ba      	ldr	r2, [r7, #24]
 80042d2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d003      	beq.n	80042e4 <HAL_GPIO_Init+0xfc>
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	2b12      	cmp	r3, #18
 80042e2:	d123      	bne.n	800432c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	08da      	lsrs	r2, r3, #3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	3208      	adds	r2, #8
 80042ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	f003 0307 	and.w	r3, r3, #7
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	220f      	movs	r2, #15
 80042fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004300:	43db      	mvns	r3, r3
 8004302:	69ba      	ldr	r2, [r7, #24]
 8004304:	4013      	ands	r3, r2
 8004306:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	691a      	ldr	r2, [r3, #16]
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	f003 0307 	and.w	r3, r3, #7
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	fa02 f303 	lsl.w	r3, r2, r3
 8004318:	69ba      	ldr	r2, [r7, #24]
 800431a:	4313      	orrs	r3, r2
 800431c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	08da      	lsrs	r2, r3, #3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	3208      	adds	r2, #8
 8004326:	69b9      	ldr	r1, [r7, #24]
 8004328:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	005b      	lsls	r3, r3, #1
 8004336:	2203      	movs	r2, #3
 8004338:	fa02 f303 	lsl.w	r3, r2, r3
 800433c:	43db      	mvns	r3, r3
 800433e:	69ba      	ldr	r2, [r7, #24]
 8004340:	4013      	ands	r3, r2
 8004342:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	f003 0203 	and.w	r2, r3, #3
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	005b      	lsls	r3, r3, #1
 8004350:	fa02 f303 	lsl.w	r3, r2, r3
 8004354:	69ba      	ldr	r2, [r7, #24]
 8004356:	4313      	orrs	r3, r2
 8004358:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	69ba      	ldr	r2, [r7, #24]
 800435e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004368:	2b00      	cmp	r3, #0
 800436a:	f000 80c0 	beq.w	80044ee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800436e:	2300      	movs	r3, #0
 8004370:	60fb      	str	r3, [r7, #12]
 8004372:	4b65      	ldr	r3, [pc, #404]	; (8004508 <HAL_GPIO_Init+0x320>)
 8004374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004376:	4a64      	ldr	r2, [pc, #400]	; (8004508 <HAL_GPIO_Init+0x320>)
 8004378:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800437c:	6453      	str	r3, [r2, #68]	; 0x44
 800437e:	4b62      	ldr	r3, [pc, #392]	; (8004508 <HAL_GPIO_Init+0x320>)
 8004380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004382:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004386:	60fb      	str	r3, [r7, #12]
 8004388:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800438a:	4a60      	ldr	r2, [pc, #384]	; (800450c <HAL_GPIO_Init+0x324>)
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	089b      	lsrs	r3, r3, #2
 8004390:	3302      	adds	r3, #2
 8004392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004396:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	f003 0303 	and.w	r3, r3, #3
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	220f      	movs	r2, #15
 80043a2:	fa02 f303 	lsl.w	r3, r2, r3
 80043a6:	43db      	mvns	r3, r3
 80043a8:	69ba      	ldr	r2, [r7, #24]
 80043aa:	4013      	ands	r3, r2
 80043ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a57      	ldr	r2, [pc, #348]	; (8004510 <HAL_GPIO_Init+0x328>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d037      	beq.n	8004426 <HAL_GPIO_Init+0x23e>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a56      	ldr	r2, [pc, #344]	; (8004514 <HAL_GPIO_Init+0x32c>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d031      	beq.n	8004422 <HAL_GPIO_Init+0x23a>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a55      	ldr	r2, [pc, #340]	; (8004518 <HAL_GPIO_Init+0x330>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d02b      	beq.n	800441e <HAL_GPIO_Init+0x236>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a54      	ldr	r2, [pc, #336]	; (800451c <HAL_GPIO_Init+0x334>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d025      	beq.n	800441a <HAL_GPIO_Init+0x232>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a53      	ldr	r2, [pc, #332]	; (8004520 <HAL_GPIO_Init+0x338>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d01f      	beq.n	8004416 <HAL_GPIO_Init+0x22e>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a52      	ldr	r2, [pc, #328]	; (8004524 <HAL_GPIO_Init+0x33c>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d019      	beq.n	8004412 <HAL_GPIO_Init+0x22a>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a51      	ldr	r2, [pc, #324]	; (8004528 <HAL_GPIO_Init+0x340>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d013      	beq.n	800440e <HAL_GPIO_Init+0x226>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a50      	ldr	r2, [pc, #320]	; (800452c <HAL_GPIO_Init+0x344>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d00d      	beq.n	800440a <HAL_GPIO_Init+0x222>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a4f      	ldr	r2, [pc, #316]	; (8004530 <HAL_GPIO_Init+0x348>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d007      	beq.n	8004406 <HAL_GPIO_Init+0x21e>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a4e      	ldr	r2, [pc, #312]	; (8004534 <HAL_GPIO_Init+0x34c>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d101      	bne.n	8004402 <HAL_GPIO_Init+0x21a>
 80043fe:	2309      	movs	r3, #9
 8004400:	e012      	b.n	8004428 <HAL_GPIO_Init+0x240>
 8004402:	230a      	movs	r3, #10
 8004404:	e010      	b.n	8004428 <HAL_GPIO_Init+0x240>
 8004406:	2308      	movs	r3, #8
 8004408:	e00e      	b.n	8004428 <HAL_GPIO_Init+0x240>
 800440a:	2307      	movs	r3, #7
 800440c:	e00c      	b.n	8004428 <HAL_GPIO_Init+0x240>
 800440e:	2306      	movs	r3, #6
 8004410:	e00a      	b.n	8004428 <HAL_GPIO_Init+0x240>
 8004412:	2305      	movs	r3, #5
 8004414:	e008      	b.n	8004428 <HAL_GPIO_Init+0x240>
 8004416:	2304      	movs	r3, #4
 8004418:	e006      	b.n	8004428 <HAL_GPIO_Init+0x240>
 800441a:	2303      	movs	r3, #3
 800441c:	e004      	b.n	8004428 <HAL_GPIO_Init+0x240>
 800441e:	2302      	movs	r3, #2
 8004420:	e002      	b.n	8004428 <HAL_GPIO_Init+0x240>
 8004422:	2301      	movs	r3, #1
 8004424:	e000      	b.n	8004428 <HAL_GPIO_Init+0x240>
 8004426:	2300      	movs	r3, #0
 8004428:	69fa      	ldr	r2, [r7, #28]
 800442a:	f002 0203 	and.w	r2, r2, #3
 800442e:	0092      	lsls	r2, r2, #2
 8004430:	4093      	lsls	r3, r2
 8004432:	69ba      	ldr	r2, [r7, #24]
 8004434:	4313      	orrs	r3, r2
 8004436:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004438:	4934      	ldr	r1, [pc, #208]	; (800450c <HAL_GPIO_Init+0x324>)
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	089b      	lsrs	r3, r3, #2
 800443e:	3302      	adds	r3, #2
 8004440:	69ba      	ldr	r2, [r7, #24]
 8004442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004446:	4b3c      	ldr	r3, [pc, #240]	; (8004538 <HAL_GPIO_Init+0x350>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	43db      	mvns	r3, r3
 8004450:	69ba      	ldr	r2, [r7, #24]
 8004452:	4013      	ands	r3, r2
 8004454:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d003      	beq.n	800446a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004462:	69ba      	ldr	r2, [r7, #24]
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	4313      	orrs	r3, r2
 8004468:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800446a:	4a33      	ldr	r2, [pc, #204]	; (8004538 <HAL_GPIO_Init+0x350>)
 800446c:	69bb      	ldr	r3, [r7, #24]
 800446e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004470:	4b31      	ldr	r3, [pc, #196]	; (8004538 <HAL_GPIO_Init+0x350>)
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	43db      	mvns	r3, r3
 800447a:	69ba      	ldr	r2, [r7, #24]
 800447c:	4013      	ands	r3, r2
 800447e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004488:	2b00      	cmp	r3, #0
 800448a:	d003      	beq.n	8004494 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800448c:	69ba      	ldr	r2, [r7, #24]
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	4313      	orrs	r3, r2
 8004492:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004494:	4a28      	ldr	r2, [pc, #160]	; (8004538 <HAL_GPIO_Init+0x350>)
 8004496:	69bb      	ldr	r3, [r7, #24]
 8004498:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800449a:	4b27      	ldr	r3, [pc, #156]	; (8004538 <HAL_GPIO_Init+0x350>)
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	43db      	mvns	r3, r3
 80044a4:	69ba      	ldr	r2, [r7, #24]
 80044a6:	4013      	ands	r3, r2
 80044a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d003      	beq.n	80044be <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80044b6:	69ba      	ldr	r2, [r7, #24]
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80044be:	4a1e      	ldr	r2, [pc, #120]	; (8004538 <HAL_GPIO_Init+0x350>)
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80044c4:	4b1c      	ldr	r3, [pc, #112]	; (8004538 <HAL_GPIO_Init+0x350>)
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	43db      	mvns	r3, r3
 80044ce:	69ba      	ldr	r2, [r7, #24]
 80044d0:	4013      	ands	r3, r2
 80044d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d003      	beq.n	80044e8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80044e0:	69ba      	ldr	r2, [r7, #24]
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80044e8:	4a13      	ldr	r2, [pc, #76]	; (8004538 <HAL_GPIO_Init+0x350>)
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	3301      	adds	r3, #1
 80044f2:	61fb      	str	r3, [r7, #28]
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	2b0f      	cmp	r3, #15
 80044f8:	f67f ae84 	bls.w	8004204 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80044fc:	bf00      	nop
 80044fe:	3724      	adds	r7, #36	; 0x24
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr
 8004508:	40023800 	.word	0x40023800
 800450c:	40013800 	.word	0x40013800
 8004510:	40020000 	.word	0x40020000
 8004514:	40020400 	.word	0x40020400
 8004518:	40020800 	.word	0x40020800
 800451c:	40020c00 	.word	0x40020c00
 8004520:	40021000 	.word	0x40021000
 8004524:	40021400 	.word	0x40021400
 8004528:	40021800 	.word	0x40021800
 800452c:	40021c00 	.word	0x40021c00
 8004530:	40022000 	.word	0x40022000
 8004534:	40022400 	.word	0x40022400
 8004538:	40013c00 	.word	0x40013c00

0800453c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800453c:	b480      	push	{r7}
 800453e:	b085      	sub	sp, #20
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	460b      	mov	r3, r1
 8004546:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	691a      	ldr	r2, [r3, #16]
 800454c:	887b      	ldrh	r3, [r7, #2]
 800454e:	4013      	ands	r3, r2
 8004550:	2b00      	cmp	r3, #0
 8004552:	d002      	beq.n	800455a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004554:	2301      	movs	r3, #1
 8004556:	73fb      	strb	r3, [r7, #15]
 8004558:	e001      	b.n	800455e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800455a:	2300      	movs	r3, #0
 800455c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800455e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004560:	4618      	mov	r0, r3
 8004562:	3714      	adds	r7, #20
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr

0800456c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	460b      	mov	r3, r1
 8004576:	807b      	strh	r3, [r7, #2]
 8004578:	4613      	mov	r3, r2
 800457a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800457c:	787b      	ldrb	r3, [r7, #1]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d003      	beq.n	800458a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004582:	887a      	ldrh	r2, [r7, #2]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004588:	e003      	b.n	8004592 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800458a:	887b      	ldrh	r3, [r7, #2]
 800458c:	041a      	lsls	r2, r3, #16
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	619a      	str	r2, [r3, #24]
}
 8004592:	bf00      	nop
 8004594:	370c      	adds	r7, #12
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr
	...

080045a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b084      	sub	sp, #16
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d101      	bne.n	80045b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e11f      	b.n	80047f2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d106      	bne.n	80045cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f7fd f950 	bl	800186c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2224      	movs	r2, #36	; 0x24
 80045d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f022 0201 	bic.w	r2, r2, #1
 80045e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004602:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004604:	f001 fc84 	bl	8005f10 <HAL_RCC_GetPCLK1Freq>
 8004608:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	4a7b      	ldr	r2, [pc, #492]	; (80047fc <HAL_I2C_Init+0x25c>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d807      	bhi.n	8004624 <HAL_I2C_Init+0x84>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	4a7a      	ldr	r2, [pc, #488]	; (8004800 <HAL_I2C_Init+0x260>)
 8004618:	4293      	cmp	r3, r2
 800461a:	bf94      	ite	ls
 800461c:	2301      	movls	r3, #1
 800461e:	2300      	movhi	r3, #0
 8004620:	b2db      	uxtb	r3, r3
 8004622:	e006      	b.n	8004632 <HAL_I2C_Init+0x92>
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	4a77      	ldr	r2, [pc, #476]	; (8004804 <HAL_I2C_Init+0x264>)
 8004628:	4293      	cmp	r3, r2
 800462a:	bf94      	ite	ls
 800462c:	2301      	movls	r3, #1
 800462e:	2300      	movhi	r3, #0
 8004630:	b2db      	uxtb	r3, r3
 8004632:	2b00      	cmp	r3, #0
 8004634:	d001      	beq.n	800463a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e0db      	b.n	80047f2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	4a72      	ldr	r2, [pc, #456]	; (8004808 <HAL_I2C_Init+0x268>)
 800463e:	fba2 2303 	umull	r2, r3, r2, r3
 8004642:	0c9b      	lsrs	r3, r3, #18
 8004644:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68ba      	ldr	r2, [r7, #8]
 8004656:	430a      	orrs	r2, r1
 8004658:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	6a1b      	ldr	r3, [r3, #32]
 8004660:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	4a64      	ldr	r2, [pc, #400]	; (80047fc <HAL_I2C_Init+0x25c>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d802      	bhi.n	8004674 <HAL_I2C_Init+0xd4>
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	3301      	adds	r3, #1
 8004672:	e009      	b.n	8004688 <HAL_I2C_Init+0xe8>
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800467a:	fb02 f303 	mul.w	r3, r2, r3
 800467e:	4a63      	ldr	r2, [pc, #396]	; (800480c <HAL_I2C_Init+0x26c>)
 8004680:	fba2 2303 	umull	r2, r3, r2, r3
 8004684:	099b      	lsrs	r3, r3, #6
 8004686:	3301      	adds	r3, #1
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	6812      	ldr	r2, [r2, #0]
 800468c:	430b      	orrs	r3, r1
 800468e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	69db      	ldr	r3, [r3, #28]
 8004696:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800469a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	4956      	ldr	r1, [pc, #344]	; (80047fc <HAL_I2C_Init+0x25c>)
 80046a4:	428b      	cmp	r3, r1
 80046a6:	d80d      	bhi.n	80046c4 <HAL_I2C_Init+0x124>
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	1e59      	subs	r1, r3, #1
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	005b      	lsls	r3, r3, #1
 80046b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80046b6:	3301      	adds	r3, #1
 80046b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046bc:	2b04      	cmp	r3, #4
 80046be:	bf38      	it	cc
 80046c0:	2304      	movcc	r3, #4
 80046c2:	e04f      	b.n	8004764 <HAL_I2C_Init+0x1c4>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d111      	bne.n	80046f0 <HAL_I2C_Init+0x150>
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	1e58      	subs	r0, r3, #1
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6859      	ldr	r1, [r3, #4]
 80046d4:	460b      	mov	r3, r1
 80046d6:	005b      	lsls	r3, r3, #1
 80046d8:	440b      	add	r3, r1
 80046da:	fbb0 f3f3 	udiv	r3, r0, r3
 80046de:	3301      	adds	r3, #1
 80046e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	bf0c      	ite	eq
 80046e8:	2301      	moveq	r3, #1
 80046ea:	2300      	movne	r3, #0
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	e012      	b.n	8004716 <HAL_I2C_Init+0x176>
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	1e58      	subs	r0, r3, #1
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6859      	ldr	r1, [r3, #4]
 80046f8:	460b      	mov	r3, r1
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	440b      	add	r3, r1
 80046fe:	0099      	lsls	r1, r3, #2
 8004700:	440b      	add	r3, r1
 8004702:	fbb0 f3f3 	udiv	r3, r0, r3
 8004706:	3301      	adds	r3, #1
 8004708:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800470c:	2b00      	cmp	r3, #0
 800470e:	bf0c      	ite	eq
 8004710:	2301      	moveq	r3, #1
 8004712:	2300      	movne	r3, #0
 8004714:	b2db      	uxtb	r3, r3
 8004716:	2b00      	cmp	r3, #0
 8004718:	d001      	beq.n	800471e <HAL_I2C_Init+0x17e>
 800471a:	2301      	movs	r3, #1
 800471c:	e022      	b.n	8004764 <HAL_I2C_Init+0x1c4>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d10e      	bne.n	8004744 <HAL_I2C_Init+0x1a4>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	1e58      	subs	r0, r3, #1
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6859      	ldr	r1, [r3, #4]
 800472e:	460b      	mov	r3, r1
 8004730:	005b      	lsls	r3, r3, #1
 8004732:	440b      	add	r3, r1
 8004734:	fbb0 f3f3 	udiv	r3, r0, r3
 8004738:	3301      	adds	r3, #1
 800473a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800473e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004742:	e00f      	b.n	8004764 <HAL_I2C_Init+0x1c4>
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	1e58      	subs	r0, r3, #1
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6859      	ldr	r1, [r3, #4]
 800474c:	460b      	mov	r3, r1
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	440b      	add	r3, r1
 8004752:	0099      	lsls	r1, r3, #2
 8004754:	440b      	add	r3, r1
 8004756:	fbb0 f3f3 	udiv	r3, r0, r3
 800475a:	3301      	adds	r3, #1
 800475c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004760:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004764:	6879      	ldr	r1, [r7, #4]
 8004766:	6809      	ldr	r1, [r1, #0]
 8004768:	4313      	orrs	r3, r2
 800476a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	69da      	ldr	r2, [r3, #28]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a1b      	ldr	r3, [r3, #32]
 800477e:	431a      	orrs	r2, r3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	430a      	orrs	r2, r1
 8004786:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004792:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	6911      	ldr	r1, [r2, #16]
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	68d2      	ldr	r2, [r2, #12]
 800479e:	4311      	orrs	r1, r2
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	6812      	ldr	r2, [r2, #0]
 80047a4:	430b      	orrs	r3, r1
 80047a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	695a      	ldr	r2, [r3, #20]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	699b      	ldr	r3, [r3, #24]
 80047ba:	431a      	orrs	r2, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	430a      	orrs	r2, r1
 80047c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f042 0201 	orr.w	r2, r2, #1
 80047d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2220      	movs	r2, #32
 80047de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3710      	adds	r7, #16
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	000186a0 	.word	0x000186a0
 8004800:	001e847f 	.word	0x001e847f
 8004804:	003d08ff 	.word	0x003d08ff
 8004808:	431bde83 	.word	0x431bde83
 800480c:	10624dd3 	.word	0x10624dd3

08004810 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b088      	sub	sp, #32
 8004814:	af02      	add	r7, sp, #8
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	4608      	mov	r0, r1
 800481a:	4611      	mov	r1, r2
 800481c:	461a      	mov	r2, r3
 800481e:	4603      	mov	r3, r0
 8004820:	817b      	strh	r3, [r7, #10]
 8004822:	460b      	mov	r3, r1
 8004824:	813b      	strh	r3, [r7, #8]
 8004826:	4613      	mov	r3, r2
 8004828:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800482a:	f7ff fb0d 	bl	8003e48 <HAL_GetTick>
 800482e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004836:	b2db      	uxtb	r3, r3
 8004838:	2b20      	cmp	r3, #32
 800483a:	f040 80d9 	bne.w	80049f0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	9300      	str	r3, [sp, #0]
 8004842:	2319      	movs	r3, #25
 8004844:	2201      	movs	r2, #1
 8004846:	496d      	ldr	r1, [pc, #436]	; (80049fc <HAL_I2C_Mem_Write+0x1ec>)
 8004848:	68f8      	ldr	r0, [r7, #12]
 800484a:	f000 fc7f 	bl	800514c <I2C_WaitOnFlagUntilTimeout>
 800484e:	4603      	mov	r3, r0
 8004850:	2b00      	cmp	r3, #0
 8004852:	d001      	beq.n	8004858 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004854:	2302      	movs	r3, #2
 8004856:	e0cc      	b.n	80049f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800485e:	2b01      	cmp	r3, #1
 8004860:	d101      	bne.n	8004866 <HAL_I2C_Mem_Write+0x56>
 8004862:	2302      	movs	r3, #2
 8004864:	e0c5      	b.n	80049f2 <HAL_I2C_Mem_Write+0x1e2>
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2201      	movs	r2, #1
 800486a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0301 	and.w	r3, r3, #1
 8004878:	2b01      	cmp	r3, #1
 800487a:	d007      	beq.n	800488c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f042 0201 	orr.w	r2, r2, #1
 800488a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800489a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2221      	movs	r2, #33	; 0x21
 80048a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2240      	movs	r2, #64	; 0x40
 80048a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2200      	movs	r2, #0
 80048b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6a3a      	ldr	r2, [r7, #32]
 80048b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80048bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048c2:	b29a      	uxth	r2, r3
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	4a4d      	ldr	r2, [pc, #308]	; (8004a00 <HAL_I2C_Mem_Write+0x1f0>)
 80048cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80048ce:	88f8      	ldrh	r0, [r7, #6]
 80048d0:	893a      	ldrh	r2, [r7, #8]
 80048d2:	8979      	ldrh	r1, [r7, #10]
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	9301      	str	r3, [sp, #4]
 80048d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048da:	9300      	str	r3, [sp, #0]
 80048dc:	4603      	mov	r3, r0
 80048de:	68f8      	ldr	r0, [r7, #12]
 80048e0:	f000 fab6 	bl	8004e50 <I2C_RequestMemoryWrite>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d052      	beq.n	8004990 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e081      	b.n	80049f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048ee:	697a      	ldr	r2, [r7, #20]
 80048f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80048f2:	68f8      	ldr	r0, [r7, #12]
 80048f4:	f000 fd00 	bl	80052f8 <I2C_WaitOnTXEFlagUntilTimeout>
 80048f8:	4603      	mov	r3, r0
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d00d      	beq.n	800491a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004902:	2b04      	cmp	r3, #4
 8004904:	d107      	bne.n	8004916 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004914:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e06b      	b.n	80049f2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491e:	781a      	ldrb	r2, [r3, #0]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492a:	1c5a      	adds	r2, r3, #1
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004934:	3b01      	subs	r3, #1
 8004936:	b29a      	uxth	r2, r3
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004940:	b29b      	uxth	r3, r3
 8004942:	3b01      	subs	r3, #1
 8004944:	b29a      	uxth	r2, r3
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	695b      	ldr	r3, [r3, #20]
 8004950:	f003 0304 	and.w	r3, r3, #4
 8004954:	2b04      	cmp	r3, #4
 8004956:	d11b      	bne.n	8004990 <HAL_I2C_Mem_Write+0x180>
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800495c:	2b00      	cmp	r3, #0
 800495e:	d017      	beq.n	8004990 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004964:	781a      	ldrb	r2, [r3, #0]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004970:	1c5a      	adds	r2, r3, #1
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800497a:	3b01      	subs	r3, #1
 800497c:	b29a      	uxth	r2, r3
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004986:	b29b      	uxth	r3, r3
 8004988:	3b01      	subs	r3, #1
 800498a:	b29a      	uxth	r2, r3
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004994:	2b00      	cmp	r3, #0
 8004996:	d1aa      	bne.n	80048ee <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004998:	697a      	ldr	r2, [r7, #20]
 800499a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800499c:	68f8      	ldr	r0, [r7, #12]
 800499e:	f000 fcec 	bl	800537a <I2C_WaitOnBTFFlagUntilTimeout>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d00d      	beq.n	80049c4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ac:	2b04      	cmp	r3, #4
 80049ae:	d107      	bne.n	80049c0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049be:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e016      	b.n	80049f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2220      	movs	r2, #32
 80049d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2200      	movs	r2, #0
 80049e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2200      	movs	r2, #0
 80049e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80049ec:	2300      	movs	r3, #0
 80049ee:	e000      	b.n	80049f2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80049f0:	2302      	movs	r3, #2
  }
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3718      	adds	r7, #24
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	00100002 	.word	0x00100002
 8004a00:	ffff0000 	.word	0xffff0000

08004a04 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b08c      	sub	sp, #48	; 0x30
 8004a08:	af02      	add	r7, sp, #8
 8004a0a:	60f8      	str	r0, [r7, #12]
 8004a0c:	4608      	mov	r0, r1
 8004a0e:	4611      	mov	r1, r2
 8004a10:	461a      	mov	r2, r3
 8004a12:	4603      	mov	r3, r0
 8004a14:	817b      	strh	r3, [r7, #10]
 8004a16:	460b      	mov	r3, r1
 8004a18:	813b      	strh	r3, [r7, #8]
 8004a1a:	4613      	mov	r3, r2
 8004a1c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004a1e:	f7ff fa13 	bl	8003e48 <HAL_GetTick>
 8004a22:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	2b20      	cmp	r3, #32
 8004a2e:	f040 8208 	bne.w	8004e42 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a34:	9300      	str	r3, [sp, #0]
 8004a36:	2319      	movs	r3, #25
 8004a38:	2201      	movs	r2, #1
 8004a3a:	497b      	ldr	r1, [pc, #492]	; (8004c28 <HAL_I2C_Mem_Read+0x224>)
 8004a3c:	68f8      	ldr	r0, [r7, #12]
 8004a3e:	f000 fb85 	bl	800514c <I2C_WaitOnFlagUntilTimeout>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d001      	beq.n	8004a4c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004a48:	2302      	movs	r3, #2
 8004a4a:	e1fb      	b.n	8004e44 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d101      	bne.n	8004a5a <HAL_I2C_Mem_Read+0x56>
 8004a56:	2302      	movs	r3, #2
 8004a58:	e1f4      	b.n	8004e44 <HAL_I2C_Mem_Read+0x440>
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0301 	and.w	r3, r3, #1
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d007      	beq.n	8004a80 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f042 0201 	orr.w	r2, r2, #1
 8004a7e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a8e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2222      	movs	r2, #34	; 0x22
 8004a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2240      	movs	r2, #64	; 0x40
 8004a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004aaa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004ab0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ab6:	b29a      	uxth	r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	4a5b      	ldr	r2, [pc, #364]	; (8004c2c <HAL_I2C_Mem_Read+0x228>)
 8004ac0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004ac2:	88f8      	ldrh	r0, [r7, #6]
 8004ac4:	893a      	ldrh	r2, [r7, #8]
 8004ac6:	8979      	ldrh	r1, [r7, #10]
 8004ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aca:	9301      	str	r3, [sp, #4]
 8004acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ace:	9300      	str	r3, [sp, #0]
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	68f8      	ldr	r0, [r7, #12]
 8004ad4:	f000 fa52 	bl	8004f7c <I2C_RequestMemoryRead>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d001      	beq.n	8004ae2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e1b0      	b.n	8004e44 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d113      	bne.n	8004b12 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004aea:	2300      	movs	r3, #0
 8004aec:	623b      	str	r3, [r7, #32]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	695b      	ldr	r3, [r3, #20]
 8004af4:	623b      	str	r3, [r7, #32]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	699b      	ldr	r3, [r3, #24]
 8004afc:	623b      	str	r3, [r7, #32]
 8004afe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b0e:	601a      	str	r2, [r3, #0]
 8004b10:	e184      	b.n	8004e1c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d11b      	bne.n	8004b52 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b28:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	61fb      	str	r3, [r7, #28]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	695b      	ldr	r3, [r3, #20]
 8004b34:	61fb      	str	r3, [r7, #28]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	699b      	ldr	r3, [r3, #24]
 8004b3c:	61fb      	str	r3, [r7, #28]
 8004b3e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b4e:	601a      	str	r2, [r3, #0]
 8004b50:	e164      	b.n	8004e1c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	d11b      	bne.n	8004b92 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b68:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b78:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	61bb      	str	r3, [r7, #24]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	695b      	ldr	r3, [r3, #20]
 8004b84:	61bb      	str	r3, [r7, #24]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	699b      	ldr	r3, [r3, #24]
 8004b8c:	61bb      	str	r3, [r7, #24]
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	e144      	b.n	8004e1c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b92:	2300      	movs	r3, #0
 8004b94:	617b      	str	r3, [r7, #20]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	695b      	ldr	r3, [r3, #20]
 8004b9c:	617b      	str	r3, [r7, #20]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	699b      	ldr	r3, [r3, #24]
 8004ba4:	617b      	str	r3, [r7, #20]
 8004ba6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004ba8:	e138      	b.n	8004e1c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bae:	2b03      	cmp	r3, #3
 8004bb0:	f200 80f1 	bhi.w	8004d96 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d123      	bne.n	8004c04 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bbe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004bc0:	68f8      	ldr	r0, [r7, #12]
 8004bc2:	f000 fc1b 	bl	80053fc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d001      	beq.n	8004bd0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e139      	b.n	8004e44 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	691a      	ldr	r2, [r3, #16]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bda:	b2d2      	uxtb	r2, r2
 8004bdc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be2:	1c5a      	adds	r2, r3, #1
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bec:	3b01      	subs	r3, #1
 8004bee:	b29a      	uxth	r2, r3
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	3b01      	subs	r3, #1
 8004bfc:	b29a      	uxth	r2, r3
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c02:	e10b      	b.n	8004e1c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c08:	2b02      	cmp	r3, #2
 8004c0a:	d14e      	bne.n	8004caa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0e:	9300      	str	r3, [sp, #0]
 8004c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c12:	2200      	movs	r2, #0
 8004c14:	4906      	ldr	r1, [pc, #24]	; (8004c30 <HAL_I2C_Mem_Read+0x22c>)
 8004c16:	68f8      	ldr	r0, [r7, #12]
 8004c18:	f000 fa98 	bl	800514c <I2C_WaitOnFlagUntilTimeout>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d008      	beq.n	8004c34 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e10e      	b.n	8004e44 <HAL_I2C_Mem_Read+0x440>
 8004c26:	bf00      	nop
 8004c28:	00100002 	.word	0x00100002
 8004c2c:	ffff0000 	.word	0xffff0000
 8004c30:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	691a      	ldr	r2, [r3, #16]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4e:	b2d2      	uxtb	r2, r2
 8004c50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c56:	1c5a      	adds	r2, r3, #1
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c60:	3b01      	subs	r3, #1
 8004c62:	b29a      	uxth	r2, r3
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	3b01      	subs	r3, #1
 8004c70:	b29a      	uxth	r2, r3
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	691a      	ldr	r2, [r3, #16]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c80:	b2d2      	uxtb	r2, r2
 8004c82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c88:	1c5a      	adds	r2, r3, #1
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c92:	3b01      	subs	r3, #1
 8004c94:	b29a      	uxth	r2, r3
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	3b01      	subs	r3, #1
 8004ca2:	b29a      	uxth	r2, r3
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ca8:	e0b8      	b.n	8004e1c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cac:	9300      	str	r3, [sp, #0]
 8004cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	4966      	ldr	r1, [pc, #408]	; (8004e4c <HAL_I2C_Mem_Read+0x448>)
 8004cb4:	68f8      	ldr	r0, [r7, #12]
 8004cb6:	f000 fa49 	bl	800514c <I2C_WaitOnFlagUntilTimeout>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d001      	beq.n	8004cc4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e0bf      	b.n	8004e44 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cd2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	691a      	ldr	r2, [r3, #16]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cde:	b2d2      	uxtb	r2, r2
 8004ce0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce6:	1c5a      	adds	r2, r3, #1
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cf0:	3b01      	subs	r3, #1
 8004cf2:	b29a      	uxth	r2, r3
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	b29a      	uxth	r2, r3
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d08:	9300      	str	r3, [sp, #0]
 8004d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	494f      	ldr	r1, [pc, #316]	; (8004e4c <HAL_I2C_Mem_Read+0x448>)
 8004d10:	68f8      	ldr	r0, [r7, #12]
 8004d12:	f000 fa1b 	bl	800514c <I2C_WaitOnFlagUntilTimeout>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d001      	beq.n	8004d20 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e091      	b.n	8004e44 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	691a      	ldr	r2, [r3, #16]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3a:	b2d2      	uxtb	r2, r2
 8004d3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d42:	1c5a      	adds	r2, r3, #1
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d4c:	3b01      	subs	r3, #1
 8004d4e:	b29a      	uxth	r2, r3
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	b29a      	uxth	r2, r3
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	691a      	ldr	r2, [r3, #16]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6c:	b2d2      	uxtb	r2, r2
 8004d6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d74:	1c5a      	adds	r2, r3, #1
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d7e:	3b01      	subs	r3, #1
 8004d80:	b29a      	uxth	r2, r3
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	3b01      	subs	r3, #1
 8004d8e:	b29a      	uxth	r2, r3
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d94:	e042      	b.n	8004e1c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d98:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004d9a:	68f8      	ldr	r0, [r7, #12]
 8004d9c:	f000 fb2e 	bl	80053fc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004da0:	4603      	mov	r3, r0
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d001      	beq.n	8004daa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e04c      	b.n	8004e44 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	691a      	ldr	r2, [r3, #16]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db4:	b2d2      	uxtb	r2, r2
 8004db6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dbc:	1c5a      	adds	r2, r3, #1
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dc6:	3b01      	subs	r3, #1
 8004dc8:	b29a      	uxth	r2, r3
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	3b01      	subs	r3, #1
 8004dd6:	b29a      	uxth	r2, r3
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	695b      	ldr	r3, [r3, #20]
 8004de2:	f003 0304 	and.w	r3, r3, #4
 8004de6:	2b04      	cmp	r3, #4
 8004de8:	d118      	bne.n	8004e1c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	691a      	ldr	r2, [r3, #16]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df4:	b2d2      	uxtb	r2, r2
 8004df6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfc:	1c5a      	adds	r2, r3, #1
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e06:	3b01      	subs	r3, #1
 8004e08:	b29a      	uxth	r2, r3
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	3b01      	subs	r3, #1
 8004e16:	b29a      	uxth	r2, r3
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	f47f aec2 	bne.w	8004baa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2220      	movs	r2, #32
 8004e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	e000      	b.n	8004e44 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004e42:	2302      	movs	r3, #2
  }
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3728      	adds	r7, #40	; 0x28
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	00010004 	.word	0x00010004

08004e50 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b088      	sub	sp, #32
 8004e54:	af02      	add	r7, sp, #8
 8004e56:	60f8      	str	r0, [r7, #12]
 8004e58:	4608      	mov	r0, r1
 8004e5a:	4611      	mov	r1, r2
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	4603      	mov	r3, r0
 8004e60:	817b      	strh	r3, [r7, #10]
 8004e62:	460b      	mov	r3, r1
 8004e64:	813b      	strh	r3, [r7, #8]
 8004e66:	4613      	mov	r3, r2
 8004e68:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e78:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7c:	9300      	str	r3, [sp, #0]
 8004e7e:	6a3b      	ldr	r3, [r7, #32]
 8004e80:	2200      	movs	r2, #0
 8004e82:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e86:	68f8      	ldr	r0, [r7, #12]
 8004e88:	f000 f960 	bl	800514c <I2C_WaitOnFlagUntilTimeout>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d00d      	beq.n	8004eae <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ea0:	d103      	bne.n	8004eaa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ea8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e05f      	b.n	8004f6e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004eae:	897b      	ldrh	r3, [r7, #10]
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004ebc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec0:	6a3a      	ldr	r2, [r7, #32]
 8004ec2:	492d      	ldr	r1, [pc, #180]	; (8004f78 <I2C_RequestMemoryWrite+0x128>)
 8004ec4:	68f8      	ldr	r0, [r7, #12]
 8004ec6:	f000 f998 	bl	80051fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d001      	beq.n	8004ed4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e04c      	b.n	8004f6e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	617b      	str	r3, [r7, #20]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	695b      	ldr	r3, [r3, #20]
 8004ede:	617b      	str	r3, [r7, #20]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	699b      	ldr	r3, [r3, #24]
 8004ee6:	617b      	str	r3, [r7, #20]
 8004ee8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004eea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eec:	6a39      	ldr	r1, [r7, #32]
 8004eee:	68f8      	ldr	r0, [r7, #12]
 8004ef0:	f000 fa02 	bl	80052f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00d      	beq.n	8004f16 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efe:	2b04      	cmp	r3, #4
 8004f00:	d107      	bne.n	8004f12 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f10:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e02b      	b.n	8004f6e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004f16:	88fb      	ldrh	r3, [r7, #6]
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d105      	bne.n	8004f28 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f1c:	893b      	ldrh	r3, [r7, #8]
 8004f1e:	b2da      	uxtb	r2, r3
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	611a      	str	r2, [r3, #16]
 8004f26:	e021      	b.n	8004f6c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004f28:	893b      	ldrh	r3, [r7, #8]
 8004f2a:	0a1b      	lsrs	r3, r3, #8
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	b2da      	uxtb	r2, r3
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f38:	6a39      	ldr	r1, [r7, #32]
 8004f3a:	68f8      	ldr	r0, [r7, #12]
 8004f3c:	f000 f9dc 	bl	80052f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f40:	4603      	mov	r3, r0
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d00d      	beq.n	8004f62 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4a:	2b04      	cmp	r3, #4
 8004f4c:	d107      	bne.n	8004f5e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f5c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e005      	b.n	8004f6e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f62:	893b      	ldrh	r3, [r7, #8]
 8004f64:	b2da      	uxtb	r2, r3
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3718      	adds	r7, #24
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	bf00      	nop
 8004f78:	00010002 	.word	0x00010002

08004f7c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b088      	sub	sp, #32
 8004f80:	af02      	add	r7, sp, #8
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	4608      	mov	r0, r1
 8004f86:	4611      	mov	r1, r2
 8004f88:	461a      	mov	r2, r3
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	817b      	strh	r3, [r7, #10]
 8004f8e:	460b      	mov	r3, r1
 8004f90:	813b      	strh	r3, [r7, #8]
 8004f92:	4613      	mov	r3, r2
 8004f94:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004fa4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fb4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb8:	9300      	str	r3, [sp, #0]
 8004fba:	6a3b      	ldr	r3, [r7, #32]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004fc2:	68f8      	ldr	r0, [r7, #12]
 8004fc4:	f000 f8c2 	bl	800514c <I2C_WaitOnFlagUntilTimeout>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d00d      	beq.n	8004fea <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fdc:	d103      	bne.n	8004fe6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fe4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	e0aa      	b.n	8005140 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004fea:	897b      	ldrh	r3, [r7, #10]
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	461a      	mov	r2, r3
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004ff8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffc:	6a3a      	ldr	r2, [r7, #32]
 8004ffe:	4952      	ldr	r1, [pc, #328]	; (8005148 <I2C_RequestMemoryRead+0x1cc>)
 8005000:	68f8      	ldr	r0, [r7, #12]
 8005002:	f000 f8fa 	bl	80051fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005006:	4603      	mov	r3, r0
 8005008:	2b00      	cmp	r3, #0
 800500a:	d001      	beq.n	8005010 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e097      	b.n	8005140 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005010:	2300      	movs	r3, #0
 8005012:	617b      	str	r3, [r7, #20]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	695b      	ldr	r3, [r3, #20]
 800501a:	617b      	str	r3, [r7, #20]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	699b      	ldr	r3, [r3, #24]
 8005022:	617b      	str	r3, [r7, #20]
 8005024:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005026:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005028:	6a39      	ldr	r1, [r7, #32]
 800502a:	68f8      	ldr	r0, [r7, #12]
 800502c:	f000 f964 	bl	80052f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d00d      	beq.n	8005052 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503a:	2b04      	cmp	r3, #4
 800503c:	d107      	bne.n	800504e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800504c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e076      	b.n	8005140 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005052:	88fb      	ldrh	r3, [r7, #6]
 8005054:	2b01      	cmp	r3, #1
 8005056:	d105      	bne.n	8005064 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005058:	893b      	ldrh	r3, [r7, #8]
 800505a:	b2da      	uxtb	r2, r3
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	611a      	str	r2, [r3, #16]
 8005062:	e021      	b.n	80050a8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005064:	893b      	ldrh	r3, [r7, #8]
 8005066:	0a1b      	lsrs	r3, r3, #8
 8005068:	b29b      	uxth	r3, r3
 800506a:	b2da      	uxtb	r2, r3
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005074:	6a39      	ldr	r1, [r7, #32]
 8005076:	68f8      	ldr	r0, [r7, #12]
 8005078:	f000 f93e 	bl	80052f8 <I2C_WaitOnTXEFlagUntilTimeout>
 800507c:	4603      	mov	r3, r0
 800507e:	2b00      	cmp	r3, #0
 8005080:	d00d      	beq.n	800509e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005086:	2b04      	cmp	r3, #4
 8005088:	d107      	bne.n	800509a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005098:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e050      	b.n	8005140 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800509e:	893b      	ldrh	r3, [r7, #8]
 80050a0:	b2da      	uxtb	r2, r3
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050aa:	6a39      	ldr	r1, [r7, #32]
 80050ac:	68f8      	ldr	r0, [r7, #12]
 80050ae:	f000 f923 	bl	80052f8 <I2C_WaitOnTXEFlagUntilTimeout>
 80050b2:	4603      	mov	r3, r0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d00d      	beq.n	80050d4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050bc:	2b04      	cmp	r3, #4
 80050be:	d107      	bne.n	80050d0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050ce:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	e035      	b.n	8005140 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050e2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e6:	9300      	str	r3, [sp, #0]
 80050e8:	6a3b      	ldr	r3, [r7, #32]
 80050ea:	2200      	movs	r2, #0
 80050ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80050f0:	68f8      	ldr	r0, [r7, #12]
 80050f2:	f000 f82b 	bl	800514c <I2C_WaitOnFlagUntilTimeout>
 80050f6:	4603      	mov	r3, r0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d00d      	beq.n	8005118 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005106:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800510a:	d103      	bne.n	8005114 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005112:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005114:	2303      	movs	r3, #3
 8005116:	e013      	b.n	8005140 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005118:	897b      	ldrh	r3, [r7, #10]
 800511a:	b2db      	uxtb	r3, r3
 800511c:	f043 0301 	orr.w	r3, r3, #1
 8005120:	b2da      	uxtb	r2, r3
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512a:	6a3a      	ldr	r2, [r7, #32]
 800512c:	4906      	ldr	r1, [pc, #24]	; (8005148 <I2C_RequestMemoryRead+0x1cc>)
 800512e:	68f8      	ldr	r0, [r7, #12]
 8005130:	f000 f863 	bl	80051fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d001      	beq.n	800513e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e000      	b.n	8005140 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800513e:	2300      	movs	r3, #0
}
 8005140:	4618      	mov	r0, r3
 8005142:	3718      	adds	r7, #24
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}
 8005148:	00010002 	.word	0x00010002

0800514c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b084      	sub	sp, #16
 8005150:	af00      	add	r7, sp, #0
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	603b      	str	r3, [r7, #0]
 8005158:	4613      	mov	r3, r2
 800515a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800515c:	e025      	b.n	80051aa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005164:	d021      	beq.n	80051aa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005166:	f7fe fe6f 	bl	8003e48 <HAL_GetTick>
 800516a:	4602      	mov	r2, r0
 800516c:	69bb      	ldr	r3, [r7, #24]
 800516e:	1ad3      	subs	r3, r2, r3
 8005170:	683a      	ldr	r2, [r7, #0]
 8005172:	429a      	cmp	r2, r3
 8005174:	d302      	bcc.n	800517c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d116      	bne.n	80051aa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2200      	movs	r2, #0
 8005180:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2220      	movs	r2, #32
 8005186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2200      	movs	r2, #0
 800518e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005196:	f043 0220 	orr.w	r2, r3, #32
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e023      	b.n	80051f2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	0c1b      	lsrs	r3, r3, #16
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d10d      	bne.n	80051d0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	695b      	ldr	r3, [r3, #20]
 80051ba:	43da      	mvns	r2, r3
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	4013      	ands	r3, r2
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	bf0c      	ite	eq
 80051c6:	2301      	moveq	r3, #1
 80051c8:	2300      	movne	r3, #0
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	461a      	mov	r2, r3
 80051ce:	e00c      	b.n	80051ea <I2C_WaitOnFlagUntilTimeout+0x9e>
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	699b      	ldr	r3, [r3, #24]
 80051d6:	43da      	mvns	r2, r3
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	4013      	ands	r3, r2
 80051dc:	b29b      	uxth	r3, r3
 80051de:	2b00      	cmp	r3, #0
 80051e0:	bf0c      	ite	eq
 80051e2:	2301      	moveq	r3, #1
 80051e4:	2300      	movne	r3, #0
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	461a      	mov	r2, r3
 80051ea:	79fb      	ldrb	r3, [r7, #7]
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d0b6      	beq.n	800515e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3710      	adds	r7, #16
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}

080051fa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80051fa:	b580      	push	{r7, lr}
 80051fc:	b084      	sub	sp, #16
 80051fe:	af00      	add	r7, sp, #0
 8005200:	60f8      	str	r0, [r7, #12]
 8005202:	60b9      	str	r1, [r7, #8]
 8005204:	607a      	str	r2, [r7, #4]
 8005206:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005208:	e051      	b.n	80052ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	695b      	ldr	r3, [r3, #20]
 8005210:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005214:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005218:	d123      	bne.n	8005262 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005228:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005232:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2200      	movs	r2, #0
 8005238:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2220      	movs	r2, #32
 800523e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2200      	movs	r2, #0
 8005246:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524e:	f043 0204 	orr.w	r2, r3, #4
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2200      	movs	r2, #0
 800525a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e046      	b.n	80052f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005268:	d021      	beq.n	80052ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800526a:	f7fe fded 	bl	8003e48 <HAL_GetTick>
 800526e:	4602      	mov	r2, r0
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	1ad3      	subs	r3, r2, r3
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	429a      	cmp	r2, r3
 8005278:	d302      	bcc.n	8005280 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d116      	bne.n	80052ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2200      	movs	r2, #0
 8005284:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2220      	movs	r2, #32
 800528a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2200      	movs	r2, #0
 8005292:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529a:	f043 0220 	orr.w	r2, r3, #32
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e020      	b.n	80052f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	0c1b      	lsrs	r3, r3, #16
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d10c      	bne.n	80052d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	695b      	ldr	r3, [r3, #20]
 80052be:	43da      	mvns	r2, r3
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	4013      	ands	r3, r2
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	bf14      	ite	ne
 80052ca:	2301      	movne	r3, #1
 80052cc:	2300      	moveq	r3, #0
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	e00b      	b.n	80052ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	699b      	ldr	r3, [r3, #24]
 80052d8:	43da      	mvns	r2, r3
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	4013      	ands	r3, r2
 80052de:	b29b      	uxth	r3, r3
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	bf14      	ite	ne
 80052e4:	2301      	movne	r3, #1
 80052e6:	2300      	moveq	r3, #0
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d18d      	bne.n	800520a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80052ee:	2300      	movs	r3, #0
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3710      	adds	r7, #16
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}

080052f8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b084      	sub	sp, #16
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	60b9      	str	r1, [r7, #8]
 8005302:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005304:	e02d      	b.n	8005362 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005306:	68f8      	ldr	r0, [r7, #12]
 8005308:	f000 f8ce 	bl	80054a8 <I2C_IsAcknowledgeFailed>
 800530c:	4603      	mov	r3, r0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d001      	beq.n	8005316 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e02d      	b.n	8005372 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800531c:	d021      	beq.n	8005362 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800531e:	f7fe fd93 	bl	8003e48 <HAL_GetTick>
 8005322:	4602      	mov	r2, r0
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	1ad3      	subs	r3, r2, r3
 8005328:	68ba      	ldr	r2, [r7, #8]
 800532a:	429a      	cmp	r2, r3
 800532c:	d302      	bcc.n	8005334 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d116      	bne.n	8005362 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2200      	movs	r2, #0
 8005338:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2220      	movs	r2, #32
 800533e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2200      	movs	r2, #0
 8005346:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534e:	f043 0220 	orr.w	r2, r3, #32
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2200      	movs	r2, #0
 800535a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e007      	b.n	8005372 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	695b      	ldr	r3, [r3, #20]
 8005368:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800536c:	2b80      	cmp	r3, #128	; 0x80
 800536e:	d1ca      	bne.n	8005306 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	3710      	adds	r7, #16
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}

0800537a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800537a:	b580      	push	{r7, lr}
 800537c:	b084      	sub	sp, #16
 800537e:	af00      	add	r7, sp, #0
 8005380:	60f8      	str	r0, [r7, #12]
 8005382:	60b9      	str	r1, [r7, #8]
 8005384:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005386:	e02d      	b.n	80053e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005388:	68f8      	ldr	r0, [r7, #12]
 800538a:	f000 f88d 	bl	80054a8 <I2C_IsAcknowledgeFailed>
 800538e:	4603      	mov	r3, r0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d001      	beq.n	8005398 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	e02d      	b.n	80053f4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800539e:	d021      	beq.n	80053e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053a0:	f7fe fd52 	bl	8003e48 <HAL_GetTick>
 80053a4:	4602      	mov	r2, r0
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	1ad3      	subs	r3, r2, r3
 80053aa:	68ba      	ldr	r2, [r7, #8]
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d302      	bcc.n	80053b6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d116      	bne.n	80053e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2200      	movs	r2, #0
 80053ba:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2220      	movs	r2, #32
 80053c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2200      	movs	r2, #0
 80053c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d0:	f043 0220 	orr.w	r2, r3, #32
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2200      	movs	r2, #0
 80053dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	e007      	b.n	80053f4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	695b      	ldr	r3, [r3, #20]
 80053ea:	f003 0304 	and.w	r3, r3, #4
 80053ee:	2b04      	cmp	r3, #4
 80053f0:	d1ca      	bne.n	8005388 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80053f2:	2300      	movs	r3, #0
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3710      	adds	r7, #16
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}

080053fc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	60b9      	str	r1, [r7, #8]
 8005406:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005408:	e042      	b.n	8005490 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	695b      	ldr	r3, [r3, #20]
 8005410:	f003 0310 	and.w	r3, r3, #16
 8005414:	2b10      	cmp	r3, #16
 8005416:	d119      	bne.n	800544c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f06f 0210 	mvn.w	r2, #16
 8005420:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2200      	movs	r2, #0
 8005426:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2220      	movs	r2, #32
 800542c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2200      	movs	r2, #0
 8005434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2200      	movs	r2, #0
 8005444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	e029      	b.n	80054a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800544c:	f7fe fcfc 	bl	8003e48 <HAL_GetTick>
 8005450:	4602      	mov	r2, r0
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	68ba      	ldr	r2, [r7, #8]
 8005458:	429a      	cmp	r2, r3
 800545a:	d302      	bcc.n	8005462 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d116      	bne.n	8005490 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2200      	movs	r2, #0
 8005466:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2220      	movs	r2, #32
 800546c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2200      	movs	r2, #0
 8005474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547c:	f043 0220 	orr.w	r2, r3, #32
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2200      	movs	r2, #0
 8005488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	e007      	b.n	80054a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	695b      	ldr	r3, [r3, #20]
 8005496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800549a:	2b40      	cmp	r3, #64	; 0x40
 800549c:	d1b5      	bne.n	800540a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800549e:	2300      	movs	r3, #0
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3710      	adds	r7, #16
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b083      	sub	sp, #12
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	695b      	ldr	r3, [r3, #20]
 80054b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054be:	d11b      	bne.n	80054f8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80054c8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2220      	movs	r2, #32
 80054d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2200      	movs	r2, #0
 80054dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e4:	f043 0204 	orr.w	r2, r3, #4
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2200      	movs	r2, #0
 80054f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	e000      	b.n	80054fa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80054f8:	2300      	movs	r3, #0
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	370c      	adds	r7, #12
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr

08005506 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005506:	b480      	push	{r7}
 8005508:	b083      	sub	sp, #12
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
 800550e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005516:	b2db      	uxtb	r3, r3
 8005518:	2b20      	cmp	r3, #32
 800551a:	d129      	bne.n	8005570 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2224      	movs	r2, #36	; 0x24
 8005520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f022 0201 	bic.w	r2, r2, #1
 8005532:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f022 0210 	bic.w	r2, r2, #16
 8005542:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	683a      	ldr	r2, [r7, #0]
 8005550:	430a      	orrs	r2, r1
 8005552:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f042 0201 	orr.w	r2, r2, #1
 8005562:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2220      	movs	r2, #32
 8005568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800556c:	2300      	movs	r3, #0
 800556e:	e000      	b.n	8005572 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8005570:	2302      	movs	r3, #2
  }
}
 8005572:	4618      	mov	r0, r3
 8005574:	370c      	adds	r7, #12
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr

0800557e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800557e:	b480      	push	{r7}
 8005580:	b085      	sub	sp, #20
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
 8005586:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005588:	2300      	movs	r3, #0
 800558a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005592:	b2db      	uxtb	r3, r3
 8005594:	2b20      	cmp	r3, #32
 8005596:	d12a      	bne.n	80055ee <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2224      	movs	r2, #36	; 0x24
 800559c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f022 0201 	bic.w	r2, r2, #1
 80055ae:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b6:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80055b8:	89fb      	ldrh	r3, [r7, #14]
 80055ba:	f023 030f 	bic.w	r3, r3, #15
 80055be:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	b29a      	uxth	r2, r3
 80055c4:	89fb      	ldrh	r3, [r7, #14]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	89fa      	ldrh	r2, [r7, #14]
 80055d0:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f042 0201 	orr.w	r2, r2, #1
 80055e0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2220      	movs	r2, #32
 80055e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80055ea:	2300      	movs	r3, #0
 80055ec:	e000      	b.n	80055f0 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80055ee:	2302      	movs	r3, #2
  }
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3714      	adds	r7, #20
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr

080055fc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b082      	sub	sp, #8
 8005600:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8005602:	2300      	movs	r3, #0
 8005604:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005606:	2300      	movs	r3, #0
 8005608:	603b      	str	r3, [r7, #0]
 800560a:	4b20      	ldr	r3, [pc, #128]	; (800568c <HAL_PWREx_EnableOverDrive+0x90>)
 800560c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560e:	4a1f      	ldr	r2, [pc, #124]	; (800568c <HAL_PWREx_EnableOverDrive+0x90>)
 8005610:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005614:	6413      	str	r3, [r2, #64]	; 0x40
 8005616:	4b1d      	ldr	r3, [pc, #116]	; (800568c <HAL_PWREx_EnableOverDrive+0x90>)
 8005618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800561e:	603b      	str	r3, [r7, #0]
 8005620:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005622:	4b1b      	ldr	r3, [pc, #108]	; (8005690 <HAL_PWREx_EnableOverDrive+0x94>)
 8005624:	2201      	movs	r2, #1
 8005626:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005628:	f7fe fc0e 	bl	8003e48 <HAL_GetTick>
 800562c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800562e:	e009      	b.n	8005644 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005630:	f7fe fc0a 	bl	8003e48 <HAL_GetTick>
 8005634:	4602      	mov	r2, r0
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800563e:	d901      	bls.n	8005644 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005640:	2303      	movs	r3, #3
 8005642:	e01f      	b.n	8005684 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005644:	4b13      	ldr	r3, [pc, #76]	; (8005694 <HAL_PWREx_EnableOverDrive+0x98>)
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800564c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005650:	d1ee      	bne.n	8005630 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005652:	4b11      	ldr	r3, [pc, #68]	; (8005698 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005654:	2201      	movs	r2, #1
 8005656:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005658:	f7fe fbf6 	bl	8003e48 <HAL_GetTick>
 800565c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800565e:	e009      	b.n	8005674 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005660:	f7fe fbf2 	bl	8003e48 <HAL_GetTick>
 8005664:	4602      	mov	r2, r0
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	1ad3      	subs	r3, r2, r3
 800566a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800566e:	d901      	bls.n	8005674 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005670:	2303      	movs	r3, #3
 8005672:	e007      	b.n	8005684 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005674:	4b07      	ldr	r3, [pc, #28]	; (8005694 <HAL_PWREx_EnableOverDrive+0x98>)
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800567c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005680:	d1ee      	bne.n	8005660 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8005682:	2300      	movs	r3, #0
}
 8005684:	4618      	mov	r0, r3
 8005686:	3708      	adds	r7, #8
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}
 800568c:	40023800 	.word	0x40023800
 8005690:	420e0040 	.word	0x420e0040
 8005694:	40007000 	.word	0x40007000
 8005698:	420e0044 	.word	0x420e0044

0800569c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b086      	sub	sp, #24
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d101      	bne.n	80056ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e25b      	b.n	8005b66 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f003 0301 	and.w	r3, r3, #1
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d075      	beq.n	80057a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80056ba:	4ba3      	ldr	r3, [pc, #652]	; (8005948 <HAL_RCC_OscConfig+0x2ac>)
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	f003 030c 	and.w	r3, r3, #12
 80056c2:	2b04      	cmp	r3, #4
 80056c4:	d00c      	beq.n	80056e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80056c6:	4ba0      	ldr	r3, [pc, #640]	; (8005948 <HAL_RCC_OscConfig+0x2ac>)
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80056ce:	2b08      	cmp	r3, #8
 80056d0:	d112      	bne.n	80056f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80056d2:	4b9d      	ldr	r3, [pc, #628]	; (8005948 <HAL_RCC_OscConfig+0x2ac>)
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056de:	d10b      	bne.n	80056f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056e0:	4b99      	ldr	r3, [pc, #612]	; (8005948 <HAL_RCC_OscConfig+0x2ac>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d05b      	beq.n	80057a4 <HAL_RCC_OscConfig+0x108>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d157      	bne.n	80057a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e236      	b.n	8005b66 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005700:	d106      	bne.n	8005710 <HAL_RCC_OscConfig+0x74>
 8005702:	4b91      	ldr	r3, [pc, #580]	; (8005948 <HAL_RCC_OscConfig+0x2ac>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a90      	ldr	r2, [pc, #576]	; (8005948 <HAL_RCC_OscConfig+0x2ac>)
 8005708:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800570c:	6013      	str	r3, [r2, #0]
 800570e:	e01d      	b.n	800574c <HAL_RCC_OscConfig+0xb0>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005718:	d10c      	bne.n	8005734 <HAL_RCC_OscConfig+0x98>
 800571a:	4b8b      	ldr	r3, [pc, #556]	; (8005948 <HAL_RCC_OscConfig+0x2ac>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a8a      	ldr	r2, [pc, #552]	; (8005948 <HAL_RCC_OscConfig+0x2ac>)
 8005720:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005724:	6013      	str	r3, [r2, #0]
 8005726:	4b88      	ldr	r3, [pc, #544]	; (8005948 <HAL_RCC_OscConfig+0x2ac>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a87      	ldr	r2, [pc, #540]	; (8005948 <HAL_RCC_OscConfig+0x2ac>)
 800572c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005730:	6013      	str	r3, [r2, #0]
 8005732:	e00b      	b.n	800574c <HAL_RCC_OscConfig+0xb0>
 8005734:	4b84      	ldr	r3, [pc, #528]	; (8005948 <HAL_RCC_OscConfig+0x2ac>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a83      	ldr	r2, [pc, #524]	; (8005948 <HAL_RCC_OscConfig+0x2ac>)
 800573a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800573e:	6013      	str	r3, [r2, #0]
 8005740:	4b81      	ldr	r3, [pc, #516]	; (8005948 <HAL_RCC_OscConfig+0x2ac>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a80      	ldr	r2, [pc, #512]	; (8005948 <HAL_RCC_OscConfig+0x2ac>)
 8005746:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800574a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d013      	beq.n	800577c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005754:	f7fe fb78 	bl	8003e48 <HAL_GetTick>
 8005758:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800575a:	e008      	b.n	800576e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800575c:	f7fe fb74 	bl	8003e48 <HAL_GetTick>
 8005760:	4602      	mov	r2, r0
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	2b64      	cmp	r3, #100	; 0x64
 8005768:	d901      	bls.n	800576e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800576a:	2303      	movs	r3, #3
 800576c:	e1fb      	b.n	8005b66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800576e:	4b76      	ldr	r3, [pc, #472]	; (8005948 <HAL_RCC_OscConfig+0x2ac>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005776:	2b00      	cmp	r3, #0
 8005778:	d0f0      	beq.n	800575c <HAL_RCC_OscConfig+0xc0>
 800577a:	e014      	b.n	80057a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800577c:	f7fe fb64 	bl	8003e48 <HAL_GetTick>
 8005780:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005782:	e008      	b.n	8005796 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005784:	f7fe fb60 	bl	8003e48 <HAL_GetTick>
 8005788:	4602      	mov	r2, r0
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	2b64      	cmp	r3, #100	; 0x64
 8005790:	d901      	bls.n	8005796 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	e1e7      	b.n	8005b66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005796:	4b6c      	ldr	r3, [pc, #432]	; (8005948 <HAL_RCC_OscConfig+0x2ac>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d1f0      	bne.n	8005784 <HAL_RCC_OscConfig+0xe8>
 80057a2:	e000      	b.n	80057a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f003 0302 	and.w	r3, r3, #2
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d063      	beq.n	800587a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80057b2:	4b65      	ldr	r3, [pc, #404]	; (8005948 <HAL_RCC_OscConfig+0x2ac>)
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	f003 030c 	and.w	r3, r3, #12
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d00b      	beq.n	80057d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057be:	4b62      	ldr	r3, [pc, #392]	; (8005948 <HAL_RCC_OscConfig+0x2ac>)
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80057c6:	2b08      	cmp	r3, #8
 80057c8:	d11c      	bne.n	8005804 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057ca:	4b5f      	ldr	r3, [pc, #380]	; (8005948 <HAL_RCC_OscConfig+0x2ac>)
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d116      	bne.n	8005804 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057d6:	4b5c      	ldr	r3, [pc, #368]	; (8005948 <HAL_RCC_OscConfig+0x2ac>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 0302 	and.w	r3, r3, #2
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d005      	beq.n	80057ee <HAL_RCC_OscConfig+0x152>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d001      	beq.n	80057ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	e1bb      	b.n	8005b66 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057ee:	4b56      	ldr	r3, [pc, #344]	; (8005948 <HAL_RCC_OscConfig+0x2ac>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	00db      	lsls	r3, r3, #3
 80057fc:	4952      	ldr	r1, [pc, #328]	; (8005948 <HAL_RCC_OscConfig+0x2ac>)
 80057fe:	4313      	orrs	r3, r2
 8005800:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005802:	e03a      	b.n	800587a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d020      	beq.n	800584e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800580c:	4b4f      	ldr	r3, [pc, #316]	; (800594c <HAL_RCC_OscConfig+0x2b0>)
 800580e:	2201      	movs	r2, #1
 8005810:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005812:	f7fe fb19 	bl	8003e48 <HAL_GetTick>
 8005816:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005818:	e008      	b.n	800582c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800581a:	f7fe fb15 	bl	8003e48 <HAL_GetTick>
 800581e:	4602      	mov	r2, r0
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	1ad3      	subs	r3, r2, r3
 8005824:	2b02      	cmp	r3, #2
 8005826:	d901      	bls.n	800582c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005828:	2303      	movs	r3, #3
 800582a:	e19c      	b.n	8005b66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800582c:	4b46      	ldr	r3, [pc, #280]	; (8005948 <HAL_RCC_OscConfig+0x2ac>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f003 0302 	and.w	r3, r3, #2
 8005834:	2b00      	cmp	r3, #0
 8005836:	d0f0      	beq.n	800581a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005838:	4b43      	ldr	r3, [pc, #268]	; (8005948 <HAL_RCC_OscConfig+0x2ac>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	691b      	ldr	r3, [r3, #16]
 8005844:	00db      	lsls	r3, r3, #3
 8005846:	4940      	ldr	r1, [pc, #256]	; (8005948 <HAL_RCC_OscConfig+0x2ac>)
 8005848:	4313      	orrs	r3, r2
 800584a:	600b      	str	r3, [r1, #0]
 800584c:	e015      	b.n	800587a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800584e:	4b3f      	ldr	r3, [pc, #252]	; (800594c <HAL_RCC_OscConfig+0x2b0>)
 8005850:	2200      	movs	r2, #0
 8005852:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005854:	f7fe faf8 	bl	8003e48 <HAL_GetTick>
 8005858:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800585a:	e008      	b.n	800586e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800585c:	f7fe faf4 	bl	8003e48 <HAL_GetTick>
 8005860:	4602      	mov	r2, r0
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	1ad3      	subs	r3, r2, r3
 8005866:	2b02      	cmp	r3, #2
 8005868:	d901      	bls.n	800586e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800586a:	2303      	movs	r3, #3
 800586c:	e17b      	b.n	8005b66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800586e:	4b36      	ldr	r3, [pc, #216]	; (8005948 <HAL_RCC_OscConfig+0x2ac>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 0302 	and.w	r3, r3, #2
 8005876:	2b00      	cmp	r3, #0
 8005878:	d1f0      	bne.n	800585c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 0308 	and.w	r3, r3, #8
 8005882:	2b00      	cmp	r3, #0
 8005884:	d030      	beq.n	80058e8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	695b      	ldr	r3, [r3, #20]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d016      	beq.n	80058bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800588e:	4b30      	ldr	r3, [pc, #192]	; (8005950 <HAL_RCC_OscConfig+0x2b4>)
 8005890:	2201      	movs	r2, #1
 8005892:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005894:	f7fe fad8 	bl	8003e48 <HAL_GetTick>
 8005898:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800589a:	e008      	b.n	80058ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800589c:	f7fe fad4 	bl	8003e48 <HAL_GetTick>
 80058a0:	4602      	mov	r2, r0
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	1ad3      	subs	r3, r2, r3
 80058a6:	2b02      	cmp	r3, #2
 80058a8:	d901      	bls.n	80058ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80058aa:	2303      	movs	r3, #3
 80058ac:	e15b      	b.n	8005b66 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058ae:	4b26      	ldr	r3, [pc, #152]	; (8005948 <HAL_RCC_OscConfig+0x2ac>)
 80058b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058b2:	f003 0302 	and.w	r3, r3, #2
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d0f0      	beq.n	800589c <HAL_RCC_OscConfig+0x200>
 80058ba:	e015      	b.n	80058e8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058bc:	4b24      	ldr	r3, [pc, #144]	; (8005950 <HAL_RCC_OscConfig+0x2b4>)
 80058be:	2200      	movs	r2, #0
 80058c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058c2:	f7fe fac1 	bl	8003e48 <HAL_GetTick>
 80058c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058c8:	e008      	b.n	80058dc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80058ca:	f7fe fabd 	bl	8003e48 <HAL_GetTick>
 80058ce:	4602      	mov	r2, r0
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	1ad3      	subs	r3, r2, r3
 80058d4:	2b02      	cmp	r3, #2
 80058d6:	d901      	bls.n	80058dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80058d8:	2303      	movs	r3, #3
 80058da:	e144      	b.n	8005b66 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058dc:	4b1a      	ldr	r3, [pc, #104]	; (8005948 <HAL_RCC_OscConfig+0x2ac>)
 80058de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058e0:	f003 0302 	and.w	r3, r3, #2
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d1f0      	bne.n	80058ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 0304 	and.w	r3, r3, #4
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	f000 80a0 	beq.w	8005a36 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058f6:	2300      	movs	r3, #0
 80058f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058fa:	4b13      	ldr	r3, [pc, #76]	; (8005948 <HAL_RCC_OscConfig+0x2ac>)
 80058fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005902:	2b00      	cmp	r3, #0
 8005904:	d10f      	bne.n	8005926 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005906:	2300      	movs	r3, #0
 8005908:	60bb      	str	r3, [r7, #8]
 800590a:	4b0f      	ldr	r3, [pc, #60]	; (8005948 <HAL_RCC_OscConfig+0x2ac>)
 800590c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800590e:	4a0e      	ldr	r2, [pc, #56]	; (8005948 <HAL_RCC_OscConfig+0x2ac>)
 8005910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005914:	6413      	str	r3, [r2, #64]	; 0x40
 8005916:	4b0c      	ldr	r3, [pc, #48]	; (8005948 <HAL_RCC_OscConfig+0x2ac>)
 8005918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800591e:	60bb      	str	r3, [r7, #8]
 8005920:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005922:	2301      	movs	r3, #1
 8005924:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005926:	4b0b      	ldr	r3, [pc, #44]	; (8005954 <HAL_RCC_OscConfig+0x2b8>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800592e:	2b00      	cmp	r3, #0
 8005930:	d121      	bne.n	8005976 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005932:	4b08      	ldr	r3, [pc, #32]	; (8005954 <HAL_RCC_OscConfig+0x2b8>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a07      	ldr	r2, [pc, #28]	; (8005954 <HAL_RCC_OscConfig+0x2b8>)
 8005938:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800593c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800593e:	f7fe fa83 	bl	8003e48 <HAL_GetTick>
 8005942:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005944:	e011      	b.n	800596a <HAL_RCC_OscConfig+0x2ce>
 8005946:	bf00      	nop
 8005948:	40023800 	.word	0x40023800
 800594c:	42470000 	.word	0x42470000
 8005950:	42470e80 	.word	0x42470e80
 8005954:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005958:	f7fe fa76 	bl	8003e48 <HAL_GetTick>
 800595c:	4602      	mov	r2, r0
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	1ad3      	subs	r3, r2, r3
 8005962:	2b02      	cmp	r3, #2
 8005964:	d901      	bls.n	800596a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005966:	2303      	movs	r3, #3
 8005968:	e0fd      	b.n	8005b66 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800596a:	4b81      	ldr	r3, [pc, #516]	; (8005b70 <HAL_RCC_OscConfig+0x4d4>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005972:	2b00      	cmp	r3, #0
 8005974:	d0f0      	beq.n	8005958 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	2b01      	cmp	r3, #1
 800597c:	d106      	bne.n	800598c <HAL_RCC_OscConfig+0x2f0>
 800597e:	4b7d      	ldr	r3, [pc, #500]	; (8005b74 <HAL_RCC_OscConfig+0x4d8>)
 8005980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005982:	4a7c      	ldr	r2, [pc, #496]	; (8005b74 <HAL_RCC_OscConfig+0x4d8>)
 8005984:	f043 0301 	orr.w	r3, r3, #1
 8005988:	6713      	str	r3, [r2, #112]	; 0x70
 800598a:	e01c      	b.n	80059c6 <HAL_RCC_OscConfig+0x32a>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	2b05      	cmp	r3, #5
 8005992:	d10c      	bne.n	80059ae <HAL_RCC_OscConfig+0x312>
 8005994:	4b77      	ldr	r3, [pc, #476]	; (8005b74 <HAL_RCC_OscConfig+0x4d8>)
 8005996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005998:	4a76      	ldr	r2, [pc, #472]	; (8005b74 <HAL_RCC_OscConfig+0x4d8>)
 800599a:	f043 0304 	orr.w	r3, r3, #4
 800599e:	6713      	str	r3, [r2, #112]	; 0x70
 80059a0:	4b74      	ldr	r3, [pc, #464]	; (8005b74 <HAL_RCC_OscConfig+0x4d8>)
 80059a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059a4:	4a73      	ldr	r2, [pc, #460]	; (8005b74 <HAL_RCC_OscConfig+0x4d8>)
 80059a6:	f043 0301 	orr.w	r3, r3, #1
 80059aa:	6713      	str	r3, [r2, #112]	; 0x70
 80059ac:	e00b      	b.n	80059c6 <HAL_RCC_OscConfig+0x32a>
 80059ae:	4b71      	ldr	r3, [pc, #452]	; (8005b74 <HAL_RCC_OscConfig+0x4d8>)
 80059b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059b2:	4a70      	ldr	r2, [pc, #448]	; (8005b74 <HAL_RCC_OscConfig+0x4d8>)
 80059b4:	f023 0301 	bic.w	r3, r3, #1
 80059b8:	6713      	str	r3, [r2, #112]	; 0x70
 80059ba:	4b6e      	ldr	r3, [pc, #440]	; (8005b74 <HAL_RCC_OscConfig+0x4d8>)
 80059bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059be:	4a6d      	ldr	r2, [pc, #436]	; (8005b74 <HAL_RCC_OscConfig+0x4d8>)
 80059c0:	f023 0304 	bic.w	r3, r3, #4
 80059c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d015      	beq.n	80059fa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059ce:	f7fe fa3b 	bl	8003e48 <HAL_GetTick>
 80059d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059d4:	e00a      	b.n	80059ec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059d6:	f7fe fa37 	bl	8003e48 <HAL_GetTick>
 80059da:	4602      	mov	r2, r0
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	1ad3      	subs	r3, r2, r3
 80059e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d901      	bls.n	80059ec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80059e8:	2303      	movs	r3, #3
 80059ea:	e0bc      	b.n	8005b66 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059ec:	4b61      	ldr	r3, [pc, #388]	; (8005b74 <HAL_RCC_OscConfig+0x4d8>)
 80059ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059f0:	f003 0302 	and.w	r3, r3, #2
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d0ee      	beq.n	80059d6 <HAL_RCC_OscConfig+0x33a>
 80059f8:	e014      	b.n	8005a24 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059fa:	f7fe fa25 	bl	8003e48 <HAL_GetTick>
 80059fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a00:	e00a      	b.n	8005a18 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a02:	f7fe fa21 	bl	8003e48 <HAL_GetTick>
 8005a06:	4602      	mov	r2, r0
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	1ad3      	subs	r3, r2, r3
 8005a0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d901      	bls.n	8005a18 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005a14:	2303      	movs	r3, #3
 8005a16:	e0a6      	b.n	8005b66 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a18:	4b56      	ldr	r3, [pc, #344]	; (8005b74 <HAL_RCC_OscConfig+0x4d8>)
 8005a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a1c:	f003 0302 	and.w	r3, r3, #2
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d1ee      	bne.n	8005a02 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a24:	7dfb      	ldrb	r3, [r7, #23]
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d105      	bne.n	8005a36 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a2a:	4b52      	ldr	r3, [pc, #328]	; (8005b74 <HAL_RCC_OscConfig+0x4d8>)
 8005a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2e:	4a51      	ldr	r2, [pc, #324]	; (8005b74 <HAL_RCC_OscConfig+0x4d8>)
 8005a30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a34:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	699b      	ldr	r3, [r3, #24]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	f000 8092 	beq.w	8005b64 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005a40:	4b4c      	ldr	r3, [pc, #304]	; (8005b74 <HAL_RCC_OscConfig+0x4d8>)
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	f003 030c 	and.w	r3, r3, #12
 8005a48:	2b08      	cmp	r3, #8
 8005a4a:	d05c      	beq.n	8005b06 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	699b      	ldr	r3, [r3, #24]
 8005a50:	2b02      	cmp	r3, #2
 8005a52:	d141      	bne.n	8005ad8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a54:	4b48      	ldr	r3, [pc, #288]	; (8005b78 <HAL_RCC_OscConfig+0x4dc>)
 8005a56:	2200      	movs	r2, #0
 8005a58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a5a:	f7fe f9f5 	bl	8003e48 <HAL_GetTick>
 8005a5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a60:	e008      	b.n	8005a74 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a62:	f7fe f9f1 	bl	8003e48 <HAL_GetTick>
 8005a66:	4602      	mov	r2, r0
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	1ad3      	subs	r3, r2, r3
 8005a6c:	2b02      	cmp	r3, #2
 8005a6e:	d901      	bls.n	8005a74 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005a70:	2303      	movs	r3, #3
 8005a72:	e078      	b.n	8005b66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a74:	4b3f      	ldr	r3, [pc, #252]	; (8005b74 <HAL_RCC_OscConfig+0x4d8>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d1f0      	bne.n	8005a62 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	69da      	ldr	r2, [r3, #28]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6a1b      	ldr	r3, [r3, #32]
 8005a88:	431a      	orrs	r2, r3
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8e:	019b      	lsls	r3, r3, #6
 8005a90:	431a      	orrs	r2, r3
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a96:	085b      	lsrs	r3, r3, #1
 8005a98:	3b01      	subs	r3, #1
 8005a9a:	041b      	lsls	r3, r3, #16
 8005a9c:	431a      	orrs	r2, r3
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa2:	061b      	lsls	r3, r3, #24
 8005aa4:	4933      	ldr	r1, [pc, #204]	; (8005b74 <HAL_RCC_OscConfig+0x4d8>)
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005aaa:	4b33      	ldr	r3, [pc, #204]	; (8005b78 <HAL_RCC_OscConfig+0x4dc>)
 8005aac:	2201      	movs	r2, #1
 8005aae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ab0:	f7fe f9ca 	bl	8003e48 <HAL_GetTick>
 8005ab4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ab6:	e008      	b.n	8005aca <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ab8:	f7fe f9c6 	bl	8003e48 <HAL_GetTick>
 8005abc:	4602      	mov	r2, r0
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	1ad3      	subs	r3, r2, r3
 8005ac2:	2b02      	cmp	r3, #2
 8005ac4:	d901      	bls.n	8005aca <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005ac6:	2303      	movs	r3, #3
 8005ac8:	e04d      	b.n	8005b66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005aca:	4b2a      	ldr	r3, [pc, #168]	; (8005b74 <HAL_RCC_OscConfig+0x4d8>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d0f0      	beq.n	8005ab8 <HAL_RCC_OscConfig+0x41c>
 8005ad6:	e045      	b.n	8005b64 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ad8:	4b27      	ldr	r3, [pc, #156]	; (8005b78 <HAL_RCC_OscConfig+0x4dc>)
 8005ada:	2200      	movs	r2, #0
 8005adc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ade:	f7fe f9b3 	bl	8003e48 <HAL_GetTick>
 8005ae2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ae4:	e008      	b.n	8005af8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ae6:	f7fe f9af 	bl	8003e48 <HAL_GetTick>
 8005aea:	4602      	mov	r2, r0
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	1ad3      	subs	r3, r2, r3
 8005af0:	2b02      	cmp	r3, #2
 8005af2:	d901      	bls.n	8005af8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005af4:	2303      	movs	r3, #3
 8005af6:	e036      	b.n	8005b66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005af8:	4b1e      	ldr	r3, [pc, #120]	; (8005b74 <HAL_RCC_OscConfig+0x4d8>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d1f0      	bne.n	8005ae6 <HAL_RCC_OscConfig+0x44a>
 8005b04:	e02e      	b.n	8005b64 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	699b      	ldr	r3, [r3, #24]
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d101      	bne.n	8005b12 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	e029      	b.n	8005b66 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005b12:	4b18      	ldr	r3, [pc, #96]	; (8005b74 <HAL_RCC_OscConfig+0x4d8>)
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	69db      	ldr	r3, [r3, #28]
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d11c      	bne.n	8005b60 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d115      	bne.n	8005b60 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005b34:	68fa      	ldr	r2, [r7, #12]
 8005b36:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	687a      	ldr	r2, [r7, #4]
 8005b3e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d10d      	bne.n	8005b60 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d106      	bne.n	8005b60 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d001      	beq.n	8005b64 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	e000      	b.n	8005b66 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005b64:	2300      	movs	r3, #0
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3718      	adds	r7, #24
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	40007000 	.word	0x40007000
 8005b74:	40023800 	.word	0x40023800
 8005b78:	42470060 	.word	0x42470060

08005b7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b084      	sub	sp, #16
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d101      	bne.n	8005b90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e0cc      	b.n	8005d2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b90:	4b68      	ldr	r3, [pc, #416]	; (8005d34 <HAL_RCC_ClockConfig+0x1b8>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 030f 	and.w	r3, r3, #15
 8005b98:	683a      	ldr	r2, [r7, #0]
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d90c      	bls.n	8005bb8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b9e:	4b65      	ldr	r3, [pc, #404]	; (8005d34 <HAL_RCC_ClockConfig+0x1b8>)
 8005ba0:	683a      	ldr	r2, [r7, #0]
 8005ba2:	b2d2      	uxtb	r2, r2
 8005ba4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ba6:	4b63      	ldr	r3, [pc, #396]	; (8005d34 <HAL_RCC_ClockConfig+0x1b8>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f003 030f 	and.w	r3, r3, #15
 8005bae:	683a      	ldr	r2, [r7, #0]
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d001      	beq.n	8005bb8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e0b8      	b.n	8005d2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f003 0302 	and.w	r3, r3, #2
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d020      	beq.n	8005c06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 0304 	and.w	r3, r3, #4
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d005      	beq.n	8005bdc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005bd0:	4b59      	ldr	r3, [pc, #356]	; (8005d38 <HAL_RCC_ClockConfig+0x1bc>)
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	4a58      	ldr	r2, [pc, #352]	; (8005d38 <HAL_RCC_ClockConfig+0x1bc>)
 8005bd6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005bda:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f003 0308 	and.w	r3, r3, #8
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d005      	beq.n	8005bf4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005be8:	4b53      	ldr	r3, [pc, #332]	; (8005d38 <HAL_RCC_ClockConfig+0x1bc>)
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	4a52      	ldr	r2, [pc, #328]	; (8005d38 <HAL_RCC_ClockConfig+0x1bc>)
 8005bee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005bf2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bf4:	4b50      	ldr	r3, [pc, #320]	; (8005d38 <HAL_RCC_ClockConfig+0x1bc>)
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	494d      	ldr	r1, [pc, #308]	; (8005d38 <HAL_RCC_ClockConfig+0x1bc>)
 8005c02:	4313      	orrs	r3, r2
 8005c04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 0301 	and.w	r3, r3, #1
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d044      	beq.n	8005c9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d107      	bne.n	8005c2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c1a:	4b47      	ldr	r3, [pc, #284]	; (8005d38 <HAL_RCC_ClockConfig+0x1bc>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d119      	bne.n	8005c5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e07f      	b.n	8005d2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	2b02      	cmp	r3, #2
 8005c30:	d003      	beq.n	8005c3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c36:	2b03      	cmp	r3, #3
 8005c38:	d107      	bne.n	8005c4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c3a:	4b3f      	ldr	r3, [pc, #252]	; (8005d38 <HAL_RCC_ClockConfig+0x1bc>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d109      	bne.n	8005c5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	e06f      	b.n	8005d2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c4a:	4b3b      	ldr	r3, [pc, #236]	; (8005d38 <HAL_RCC_ClockConfig+0x1bc>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f003 0302 	and.w	r3, r3, #2
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d101      	bne.n	8005c5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	e067      	b.n	8005d2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c5a:	4b37      	ldr	r3, [pc, #220]	; (8005d38 <HAL_RCC_ClockConfig+0x1bc>)
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	f023 0203 	bic.w	r2, r3, #3
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	4934      	ldr	r1, [pc, #208]	; (8005d38 <HAL_RCC_ClockConfig+0x1bc>)
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c6c:	f7fe f8ec 	bl	8003e48 <HAL_GetTick>
 8005c70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c72:	e00a      	b.n	8005c8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c74:	f7fe f8e8 	bl	8003e48 <HAL_GetTick>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	1ad3      	subs	r3, r2, r3
 8005c7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d901      	bls.n	8005c8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005c86:	2303      	movs	r3, #3
 8005c88:	e04f      	b.n	8005d2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c8a:	4b2b      	ldr	r3, [pc, #172]	; (8005d38 <HAL_RCC_ClockConfig+0x1bc>)
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	f003 020c 	and.w	r2, r3, #12
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d1eb      	bne.n	8005c74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c9c:	4b25      	ldr	r3, [pc, #148]	; (8005d34 <HAL_RCC_ClockConfig+0x1b8>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f003 030f 	and.w	r3, r3, #15
 8005ca4:	683a      	ldr	r2, [r7, #0]
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d20c      	bcs.n	8005cc4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005caa:	4b22      	ldr	r3, [pc, #136]	; (8005d34 <HAL_RCC_ClockConfig+0x1b8>)
 8005cac:	683a      	ldr	r2, [r7, #0]
 8005cae:	b2d2      	uxtb	r2, r2
 8005cb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cb2:	4b20      	ldr	r3, [pc, #128]	; (8005d34 <HAL_RCC_ClockConfig+0x1b8>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f003 030f 	and.w	r3, r3, #15
 8005cba:	683a      	ldr	r2, [r7, #0]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d001      	beq.n	8005cc4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e032      	b.n	8005d2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f003 0304 	and.w	r3, r3, #4
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d008      	beq.n	8005ce2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005cd0:	4b19      	ldr	r3, [pc, #100]	; (8005d38 <HAL_RCC_ClockConfig+0x1bc>)
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	68db      	ldr	r3, [r3, #12]
 8005cdc:	4916      	ldr	r1, [pc, #88]	; (8005d38 <HAL_RCC_ClockConfig+0x1bc>)
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f003 0308 	and.w	r3, r3, #8
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d009      	beq.n	8005d02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005cee:	4b12      	ldr	r3, [pc, #72]	; (8005d38 <HAL_RCC_ClockConfig+0x1bc>)
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	00db      	lsls	r3, r3, #3
 8005cfc:	490e      	ldr	r1, [pc, #56]	; (8005d38 <HAL_RCC_ClockConfig+0x1bc>)
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005d02:	f000 f821 	bl	8005d48 <HAL_RCC_GetSysClockFreq>
 8005d06:	4601      	mov	r1, r0
 8005d08:	4b0b      	ldr	r3, [pc, #44]	; (8005d38 <HAL_RCC_ClockConfig+0x1bc>)
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	091b      	lsrs	r3, r3, #4
 8005d0e:	f003 030f 	and.w	r3, r3, #15
 8005d12:	4a0a      	ldr	r2, [pc, #40]	; (8005d3c <HAL_RCC_ClockConfig+0x1c0>)
 8005d14:	5cd3      	ldrb	r3, [r2, r3]
 8005d16:	fa21 f303 	lsr.w	r3, r1, r3
 8005d1a:	4a09      	ldr	r2, [pc, #36]	; (8005d40 <HAL_RCC_ClockConfig+0x1c4>)
 8005d1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005d1e:	4b09      	ldr	r3, [pc, #36]	; (8005d44 <HAL_RCC_ClockConfig+0x1c8>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4618      	mov	r0, r3
 8005d24:	f7fe f84c 	bl	8003dc0 <HAL_InitTick>

  return HAL_OK;
 8005d28:	2300      	movs	r3, #0
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3710      	adds	r7, #16
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}
 8005d32:	bf00      	nop
 8005d34:	40023c00 	.word	0x40023c00
 8005d38:	40023800 	.word	0x40023800
 8005d3c:	08008e68 	.word	0x08008e68
 8005d40:	20000028 	.word	0x20000028
 8005d44:	2000002c 	.word	0x2000002c

08005d48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d4a:	b085      	sub	sp, #20
 8005d4c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	607b      	str	r3, [r7, #4]
 8005d52:	2300      	movs	r3, #0
 8005d54:	60fb      	str	r3, [r7, #12]
 8005d56:	2300      	movs	r3, #0
 8005d58:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d5e:	4b63      	ldr	r3, [pc, #396]	; (8005eec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	f003 030c 	and.w	r3, r3, #12
 8005d66:	2b04      	cmp	r3, #4
 8005d68:	d007      	beq.n	8005d7a <HAL_RCC_GetSysClockFreq+0x32>
 8005d6a:	2b08      	cmp	r3, #8
 8005d6c:	d008      	beq.n	8005d80 <HAL_RCC_GetSysClockFreq+0x38>
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	f040 80b4 	bne.w	8005edc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005d74:	4b5e      	ldr	r3, [pc, #376]	; (8005ef0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005d76:	60bb      	str	r3, [r7, #8]
       break;
 8005d78:	e0b3      	b.n	8005ee2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005d7a:	4b5e      	ldr	r3, [pc, #376]	; (8005ef4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005d7c:	60bb      	str	r3, [r7, #8]
      break;
 8005d7e:	e0b0      	b.n	8005ee2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d80:	4b5a      	ldr	r3, [pc, #360]	; (8005eec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d88:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005d8a:	4b58      	ldr	r3, [pc, #352]	; (8005eec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d04a      	beq.n	8005e2c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d96:	4b55      	ldr	r3, [pc, #340]	; (8005eec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	099b      	lsrs	r3, r3, #6
 8005d9c:	f04f 0400 	mov.w	r4, #0
 8005da0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005da4:	f04f 0200 	mov.w	r2, #0
 8005da8:	ea03 0501 	and.w	r5, r3, r1
 8005dac:	ea04 0602 	and.w	r6, r4, r2
 8005db0:	4629      	mov	r1, r5
 8005db2:	4632      	mov	r2, r6
 8005db4:	f04f 0300 	mov.w	r3, #0
 8005db8:	f04f 0400 	mov.w	r4, #0
 8005dbc:	0154      	lsls	r4, r2, #5
 8005dbe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005dc2:	014b      	lsls	r3, r1, #5
 8005dc4:	4619      	mov	r1, r3
 8005dc6:	4622      	mov	r2, r4
 8005dc8:	1b49      	subs	r1, r1, r5
 8005dca:	eb62 0206 	sbc.w	r2, r2, r6
 8005dce:	f04f 0300 	mov.w	r3, #0
 8005dd2:	f04f 0400 	mov.w	r4, #0
 8005dd6:	0194      	lsls	r4, r2, #6
 8005dd8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005ddc:	018b      	lsls	r3, r1, #6
 8005dde:	1a5b      	subs	r3, r3, r1
 8005de0:	eb64 0402 	sbc.w	r4, r4, r2
 8005de4:	f04f 0100 	mov.w	r1, #0
 8005de8:	f04f 0200 	mov.w	r2, #0
 8005dec:	00e2      	lsls	r2, r4, #3
 8005dee:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005df2:	00d9      	lsls	r1, r3, #3
 8005df4:	460b      	mov	r3, r1
 8005df6:	4614      	mov	r4, r2
 8005df8:	195b      	adds	r3, r3, r5
 8005dfa:	eb44 0406 	adc.w	r4, r4, r6
 8005dfe:	f04f 0100 	mov.w	r1, #0
 8005e02:	f04f 0200 	mov.w	r2, #0
 8005e06:	0262      	lsls	r2, r4, #9
 8005e08:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005e0c:	0259      	lsls	r1, r3, #9
 8005e0e:	460b      	mov	r3, r1
 8005e10:	4614      	mov	r4, r2
 8005e12:	4618      	mov	r0, r3
 8005e14:	4621      	mov	r1, r4
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f04f 0400 	mov.w	r4, #0
 8005e1c:	461a      	mov	r2, r3
 8005e1e:	4623      	mov	r3, r4
 8005e20:	f7fa fe04 	bl	8000a2c <__aeabi_uldivmod>
 8005e24:	4603      	mov	r3, r0
 8005e26:	460c      	mov	r4, r1
 8005e28:	60fb      	str	r3, [r7, #12]
 8005e2a:	e049      	b.n	8005ec0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e2c:	4b2f      	ldr	r3, [pc, #188]	; (8005eec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	099b      	lsrs	r3, r3, #6
 8005e32:	f04f 0400 	mov.w	r4, #0
 8005e36:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005e3a:	f04f 0200 	mov.w	r2, #0
 8005e3e:	ea03 0501 	and.w	r5, r3, r1
 8005e42:	ea04 0602 	and.w	r6, r4, r2
 8005e46:	4629      	mov	r1, r5
 8005e48:	4632      	mov	r2, r6
 8005e4a:	f04f 0300 	mov.w	r3, #0
 8005e4e:	f04f 0400 	mov.w	r4, #0
 8005e52:	0154      	lsls	r4, r2, #5
 8005e54:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005e58:	014b      	lsls	r3, r1, #5
 8005e5a:	4619      	mov	r1, r3
 8005e5c:	4622      	mov	r2, r4
 8005e5e:	1b49      	subs	r1, r1, r5
 8005e60:	eb62 0206 	sbc.w	r2, r2, r6
 8005e64:	f04f 0300 	mov.w	r3, #0
 8005e68:	f04f 0400 	mov.w	r4, #0
 8005e6c:	0194      	lsls	r4, r2, #6
 8005e6e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005e72:	018b      	lsls	r3, r1, #6
 8005e74:	1a5b      	subs	r3, r3, r1
 8005e76:	eb64 0402 	sbc.w	r4, r4, r2
 8005e7a:	f04f 0100 	mov.w	r1, #0
 8005e7e:	f04f 0200 	mov.w	r2, #0
 8005e82:	00e2      	lsls	r2, r4, #3
 8005e84:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005e88:	00d9      	lsls	r1, r3, #3
 8005e8a:	460b      	mov	r3, r1
 8005e8c:	4614      	mov	r4, r2
 8005e8e:	195b      	adds	r3, r3, r5
 8005e90:	eb44 0406 	adc.w	r4, r4, r6
 8005e94:	f04f 0100 	mov.w	r1, #0
 8005e98:	f04f 0200 	mov.w	r2, #0
 8005e9c:	02a2      	lsls	r2, r4, #10
 8005e9e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005ea2:	0299      	lsls	r1, r3, #10
 8005ea4:	460b      	mov	r3, r1
 8005ea6:	4614      	mov	r4, r2
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	4621      	mov	r1, r4
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f04f 0400 	mov.w	r4, #0
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	4623      	mov	r3, r4
 8005eb6:	f7fa fdb9 	bl	8000a2c <__aeabi_uldivmod>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	460c      	mov	r4, r1
 8005ebe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005ec0:	4b0a      	ldr	r3, [pc, #40]	; (8005eec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	0c1b      	lsrs	r3, r3, #16
 8005ec6:	f003 0303 	and.w	r3, r3, #3
 8005eca:	3301      	adds	r3, #1
 8005ecc:	005b      	lsls	r3, r3, #1
 8005ece:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005ed0:	68fa      	ldr	r2, [r7, #12]
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ed8:	60bb      	str	r3, [r7, #8]
      break;
 8005eda:	e002      	b.n	8005ee2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005edc:	4b04      	ldr	r3, [pc, #16]	; (8005ef0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005ede:	60bb      	str	r3, [r7, #8]
      break;
 8005ee0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ee2:	68bb      	ldr	r3, [r7, #8]
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3714      	adds	r7, #20
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005eec:	40023800 	.word	0x40023800
 8005ef0:	00f42400 	.word	0x00f42400
 8005ef4:	007a1200 	.word	0x007a1200

08005ef8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005efc:	4b03      	ldr	r3, [pc, #12]	; (8005f0c <HAL_RCC_GetHCLKFreq+0x14>)
 8005efe:	681b      	ldr	r3, [r3, #0]
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr
 8005f0a:	bf00      	nop
 8005f0c:	20000028 	.word	0x20000028

08005f10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005f14:	f7ff fff0 	bl	8005ef8 <HAL_RCC_GetHCLKFreq>
 8005f18:	4601      	mov	r1, r0
 8005f1a:	4b05      	ldr	r3, [pc, #20]	; (8005f30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	0a9b      	lsrs	r3, r3, #10
 8005f20:	f003 0307 	and.w	r3, r3, #7
 8005f24:	4a03      	ldr	r2, [pc, #12]	; (8005f34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f26:	5cd3      	ldrb	r3, [r2, r3]
 8005f28:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	bd80      	pop	{r7, pc}
 8005f30:	40023800 	.word	0x40023800
 8005f34:	08008e78 	.word	0x08008e78

08005f38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005f3c:	f7ff ffdc 	bl	8005ef8 <HAL_RCC_GetHCLKFreq>
 8005f40:	4601      	mov	r1, r0
 8005f42:	4b05      	ldr	r3, [pc, #20]	; (8005f58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	0b5b      	lsrs	r3, r3, #13
 8005f48:	f003 0307 	and.w	r3, r3, #7
 8005f4c:	4a03      	ldr	r2, [pc, #12]	; (8005f5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f4e:	5cd3      	ldrb	r3, [r2, r3]
 8005f50:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	bd80      	pop	{r7, pc}
 8005f58:	40023800 	.word	0x40023800
 8005f5c:	08008e78 	.word	0x08008e78

08005f60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b082      	sub	sp, #8
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d101      	bne.n	8005f72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e01d      	b.n	8005fae <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d106      	bne.n	8005f8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f7fd fd00 	bl	800398c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2202      	movs	r2, #2
 8005f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	3304      	adds	r3, #4
 8005f9c:	4619      	mov	r1, r3
 8005f9e:	4610      	mov	r0, r2
 8005fa0:	f000 fca2 	bl	80068e8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005fac:	2300      	movs	r3, #0
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3708      	adds	r7, #8
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}

08005fb6 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005fb6:	b480      	push	{r7}
 8005fb8:	b085      	sub	sp, #20
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2202      	movs	r2, #2
 8005fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	f003 0307 	and.w	r3, r3, #7
 8005fd0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2b06      	cmp	r3, #6
 8005fd6:	d007      	beq.n	8005fe8 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f042 0201 	orr.w	r2, r2, #1
 8005fe6:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2201      	movs	r2, #1
 8005fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005ff0:	2300      	movs	r3, #0
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3714      	adds	r7, #20
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr

08005ffe <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ffe:	b480      	push	{r7}
 8006000:	b085      	sub	sp, #20
 8006002:	af00      	add	r7, sp, #0
 8006004:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	68da      	ldr	r2, [r3, #12]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f042 0201 	orr.w	r2, r2, #1
 8006014:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	f003 0307 	and.w	r3, r3, #7
 8006020:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2b06      	cmp	r3, #6
 8006026:	d007      	beq.n	8006038 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f042 0201 	orr.w	r2, r2, #1
 8006036:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006038:	2300      	movs	r3, #0
}
 800603a:	4618      	mov	r0, r3
 800603c:	3714      	adds	r7, #20
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr

08006046 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006046:	b580      	push	{r7, lr}
 8006048:	b082      	sub	sp, #8
 800604a:	af00      	add	r7, sp, #0
 800604c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d101      	bne.n	8006058 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	e01d      	b.n	8006094 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800605e:	b2db      	uxtb	r3, r3
 8006060:	2b00      	cmp	r3, #0
 8006062:	d106      	bne.n	8006072 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f000 f815 	bl	800609c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2202      	movs	r2, #2
 8006076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	3304      	adds	r3, #4
 8006082:	4619      	mov	r1, r3
 8006084:	4610      	mov	r0, r2
 8006086:	f000 fc2f 	bl	80068e8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2201      	movs	r2, #1
 800608e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006092:	2300      	movs	r3, #0
}
 8006094:	4618      	mov	r0, r3
 8006096:	3708      	adds	r7, #8
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}

0800609c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800609c:	b480      	push	{r7}
 800609e:	b083      	sub	sp, #12
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80060a4:	bf00      	nop
 80060a6:	370c      	adds	r7, #12
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr

080060b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b084      	sub	sp, #16
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	2201      	movs	r2, #1
 80060c0:	6839      	ldr	r1, [r7, #0]
 80060c2:	4618      	mov	r0, r3
 80060c4:	f001 f824 	bl	8007110 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a15      	ldr	r2, [pc, #84]	; (8006124 <HAL_TIM_PWM_Start+0x74>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d004      	beq.n	80060dc <HAL_TIM_PWM_Start+0x2c>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a14      	ldr	r2, [pc, #80]	; (8006128 <HAL_TIM_PWM_Start+0x78>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d101      	bne.n	80060e0 <HAL_TIM_PWM_Start+0x30>
 80060dc:	2301      	movs	r3, #1
 80060de:	e000      	b.n	80060e2 <HAL_TIM_PWM_Start+0x32>
 80060e0:	2300      	movs	r3, #0
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d007      	beq.n	80060f6 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80060f4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	f003 0307 	and.w	r3, r3, #7
 8006100:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2b06      	cmp	r3, #6
 8006106:	d007      	beq.n	8006118 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f042 0201 	orr.w	r2, r2, #1
 8006116:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006118:	2300      	movs	r3, #0
}
 800611a:	4618      	mov	r0, r3
 800611c:	3710      	adds	r7, #16
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}
 8006122:	bf00      	nop
 8006124:	40010000 	.word	0x40010000
 8006128:	40010400 	.word	0x40010400

0800612c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b082      	sub	sp, #8
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d101      	bne.n	800613e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	e01d      	b.n	800617a <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006144:	b2db      	uxtb	r3, r3
 8006146:	2b00      	cmp	r3, #0
 8006148:	d106      	bne.n	8006158 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2200      	movs	r2, #0
 800614e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f000 f815 	bl	8006182 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2202      	movs	r2, #2
 800615c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	3304      	adds	r3, #4
 8006168:	4619      	mov	r1, r3
 800616a:	4610      	mov	r0, r2
 800616c:	f000 fbbc 	bl	80068e8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2201      	movs	r2, #1
 8006174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006178:	2300      	movs	r3, #0
}
 800617a:	4618      	mov	r0, r3
 800617c:	3708      	adds	r7, #8
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}

08006182 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006182:	b480      	push	{r7}
 8006184:	b083      	sub	sp, #12
 8006186:	af00      	add	r7, sp, #0
 8006188:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800618a:	bf00      	nop
 800618c:	370c      	adds	r7, #12
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr
	...

08006198 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b084      	sub	sp, #16
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	2b0c      	cmp	r3, #12
 80061a6:	d841      	bhi.n	800622c <HAL_TIM_IC_Start_IT+0x94>
 80061a8:	a201      	add	r2, pc, #4	; (adr r2, 80061b0 <HAL_TIM_IC_Start_IT+0x18>)
 80061aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ae:	bf00      	nop
 80061b0:	080061e5 	.word	0x080061e5
 80061b4:	0800622d 	.word	0x0800622d
 80061b8:	0800622d 	.word	0x0800622d
 80061bc:	0800622d 	.word	0x0800622d
 80061c0:	080061f7 	.word	0x080061f7
 80061c4:	0800622d 	.word	0x0800622d
 80061c8:	0800622d 	.word	0x0800622d
 80061cc:	0800622d 	.word	0x0800622d
 80061d0:	08006209 	.word	0x08006209
 80061d4:	0800622d 	.word	0x0800622d
 80061d8:	0800622d 	.word	0x0800622d
 80061dc:	0800622d 	.word	0x0800622d
 80061e0:	0800621b 	.word	0x0800621b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	68da      	ldr	r2, [r3, #12]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f042 0202 	orr.w	r2, r2, #2
 80061f2:	60da      	str	r2, [r3, #12]
      break;
 80061f4:	e01b      	b.n	800622e <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	68da      	ldr	r2, [r3, #12]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f042 0204 	orr.w	r2, r2, #4
 8006204:	60da      	str	r2, [r3, #12]
      break;
 8006206:	e012      	b.n	800622e <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	68da      	ldr	r2, [r3, #12]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f042 0208 	orr.w	r2, r2, #8
 8006216:	60da      	str	r2, [r3, #12]
      break;
 8006218:	e009      	b.n	800622e <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	68da      	ldr	r2, [r3, #12]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f042 0210 	orr.w	r2, r2, #16
 8006228:	60da      	str	r2, [r3, #12]
      break;
 800622a:	e000      	b.n	800622e <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 800622c:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	2201      	movs	r2, #1
 8006234:	6839      	ldr	r1, [r7, #0]
 8006236:	4618      	mov	r0, r3
 8006238:	f000 ff6a 	bl	8007110 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	f003 0307 	and.w	r3, r3, #7
 8006246:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2b06      	cmp	r3, #6
 800624c:	d007      	beq.n	800625e <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f042 0201 	orr.w	r2, r2, #1
 800625c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800625e:	2300      	movs	r3, #0
}
 8006260:	4618      	mov	r0, r3
 8006262:	3710      	adds	r7, #16
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}

08006268 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b082      	sub	sp, #8
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	691b      	ldr	r3, [r3, #16]
 8006276:	f003 0302 	and.w	r3, r3, #2
 800627a:	2b02      	cmp	r3, #2
 800627c:	d122      	bne.n	80062c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	68db      	ldr	r3, [r3, #12]
 8006284:	f003 0302 	and.w	r3, r3, #2
 8006288:	2b02      	cmp	r3, #2
 800628a:	d11b      	bne.n	80062c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f06f 0202 	mvn.w	r2, #2
 8006294:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2201      	movs	r2, #1
 800629a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	699b      	ldr	r3, [r3, #24]
 80062a2:	f003 0303 	and.w	r3, r3, #3
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d003      	beq.n	80062b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f7fb fc9e 	bl	8001bec <HAL_TIM_IC_CaptureCallback>
 80062b0:	e005      	b.n	80062be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f000 faf9 	bl	80068aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f000 fb00 	bl	80068be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2200      	movs	r2, #0
 80062c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	691b      	ldr	r3, [r3, #16]
 80062ca:	f003 0304 	and.w	r3, r3, #4
 80062ce:	2b04      	cmp	r3, #4
 80062d0:	d122      	bne.n	8006318 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	68db      	ldr	r3, [r3, #12]
 80062d8:	f003 0304 	and.w	r3, r3, #4
 80062dc:	2b04      	cmp	r3, #4
 80062de:	d11b      	bne.n	8006318 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f06f 0204 	mvn.w	r2, #4
 80062e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2202      	movs	r2, #2
 80062ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	699b      	ldr	r3, [r3, #24]
 80062f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d003      	beq.n	8006306 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f7fb fc74 	bl	8001bec <HAL_TIM_IC_CaptureCallback>
 8006304:	e005      	b.n	8006312 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 facf 	bl	80068aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f000 fad6 	bl	80068be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2200      	movs	r2, #0
 8006316:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	691b      	ldr	r3, [r3, #16]
 800631e:	f003 0308 	and.w	r3, r3, #8
 8006322:	2b08      	cmp	r3, #8
 8006324:	d122      	bne.n	800636c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	f003 0308 	and.w	r3, r3, #8
 8006330:	2b08      	cmp	r3, #8
 8006332:	d11b      	bne.n	800636c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f06f 0208 	mvn.w	r2, #8
 800633c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2204      	movs	r2, #4
 8006342:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	69db      	ldr	r3, [r3, #28]
 800634a:	f003 0303 	and.w	r3, r3, #3
 800634e:	2b00      	cmp	r3, #0
 8006350:	d003      	beq.n	800635a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f7fb fc4a 	bl	8001bec <HAL_TIM_IC_CaptureCallback>
 8006358:	e005      	b.n	8006366 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 faa5 	bl	80068aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f000 faac 	bl	80068be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	691b      	ldr	r3, [r3, #16]
 8006372:	f003 0310 	and.w	r3, r3, #16
 8006376:	2b10      	cmp	r3, #16
 8006378:	d122      	bne.n	80063c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	68db      	ldr	r3, [r3, #12]
 8006380:	f003 0310 	and.w	r3, r3, #16
 8006384:	2b10      	cmp	r3, #16
 8006386:	d11b      	bne.n	80063c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f06f 0210 	mvn.w	r2, #16
 8006390:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2208      	movs	r2, #8
 8006396:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	69db      	ldr	r3, [r3, #28]
 800639e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d003      	beq.n	80063ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f7fb fc20 	bl	8001bec <HAL_TIM_IC_CaptureCallback>
 80063ac:	e005      	b.n	80063ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 fa7b 	bl	80068aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f000 fa82 	bl	80068be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2200      	movs	r2, #0
 80063be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	691b      	ldr	r3, [r3, #16]
 80063c6:	f003 0301 	and.w	r3, r3, #1
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	d10e      	bne.n	80063ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	f003 0301 	and.w	r3, r3, #1
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d107      	bne.n	80063ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f06f 0201 	mvn.w	r2, #1
 80063e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f7fb fbe6 	bl	8001bb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	691b      	ldr	r3, [r3, #16]
 80063f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063f6:	2b80      	cmp	r3, #128	; 0x80
 80063f8:	d10e      	bne.n	8006418 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	68db      	ldr	r3, [r3, #12]
 8006400:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006404:	2b80      	cmp	r3, #128	; 0x80
 8006406:	d107      	bne.n	8006418 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006410:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f000 ff28 	bl	8007268 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	691b      	ldr	r3, [r3, #16]
 800641e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006422:	2b40      	cmp	r3, #64	; 0x40
 8006424:	d10e      	bne.n	8006444 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	68db      	ldr	r3, [r3, #12]
 800642c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006430:	2b40      	cmp	r3, #64	; 0x40
 8006432:	d107      	bne.n	8006444 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800643c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f000 fa47 	bl	80068d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	691b      	ldr	r3, [r3, #16]
 800644a:	f003 0320 	and.w	r3, r3, #32
 800644e:	2b20      	cmp	r3, #32
 8006450:	d10e      	bne.n	8006470 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	68db      	ldr	r3, [r3, #12]
 8006458:	f003 0320 	and.w	r3, r3, #32
 800645c:	2b20      	cmp	r3, #32
 800645e:	d107      	bne.n	8006470 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f06f 0220 	mvn.w	r2, #32
 8006468:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 fef2 	bl	8007254 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006470:	bf00      	nop
 8006472:	3708      	adds	r7, #8
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}

08006478 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b084      	sub	sp, #16
 800647c:	af00      	add	r7, sp, #0
 800647e:	60f8      	str	r0, [r7, #12]
 8006480:	60b9      	str	r1, [r7, #8]
 8006482:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800648a:	2b01      	cmp	r3, #1
 800648c:	d101      	bne.n	8006492 <HAL_TIM_IC_ConfigChannel+0x1a>
 800648e:	2302      	movs	r3, #2
 8006490:	e08a      	b.n	80065a8 <HAL_TIM_IC_ConfigChannel+0x130>
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2201      	movs	r2, #1
 8006496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2202      	movs	r2, #2
 800649e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d11b      	bne.n	80064e0 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	6818      	ldr	r0, [r3, #0]
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	6819      	ldr	r1, [r3, #0]
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	685a      	ldr	r2, [r3, #4]
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	68db      	ldr	r3, [r3, #12]
 80064b8:	f000 fc66 	bl	8006d88 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	699a      	ldr	r2, [r3, #24]
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f022 020c 	bic.w	r2, r2, #12
 80064ca:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	6999      	ldr	r1, [r3, #24]
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	689a      	ldr	r2, [r3, #8]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	430a      	orrs	r2, r1
 80064dc:	619a      	str	r2, [r3, #24]
 80064de:	e05a      	b.n	8006596 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2b04      	cmp	r3, #4
 80064e4:	d11c      	bne.n	8006520 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	6818      	ldr	r0, [r3, #0]
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	6819      	ldr	r1, [r3, #0]
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	685a      	ldr	r2, [r3, #4]
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	68db      	ldr	r3, [r3, #12]
 80064f6:	f000 fcea 	bl	8006ece <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	699a      	ldr	r2, [r3, #24]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006508:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	6999      	ldr	r1, [r3, #24]
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	021a      	lsls	r2, r3, #8
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	430a      	orrs	r2, r1
 800651c:	619a      	str	r2, [r3, #24]
 800651e:	e03a      	b.n	8006596 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2b08      	cmp	r3, #8
 8006524:	d11b      	bne.n	800655e <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	6818      	ldr	r0, [r3, #0]
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	6819      	ldr	r1, [r3, #0]
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	685a      	ldr	r2, [r3, #4]
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	68db      	ldr	r3, [r3, #12]
 8006536:	f000 fd37 	bl	8006fa8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	69da      	ldr	r2, [r3, #28]
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f022 020c 	bic.w	r2, r2, #12
 8006548:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	69d9      	ldr	r1, [r3, #28]
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	689a      	ldr	r2, [r3, #8]
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	430a      	orrs	r2, r1
 800655a:	61da      	str	r2, [r3, #28]
 800655c:	e01b      	b.n	8006596 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	6818      	ldr	r0, [r3, #0]
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	6819      	ldr	r1, [r3, #0]
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	685a      	ldr	r2, [r3, #4]
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	68db      	ldr	r3, [r3, #12]
 800656e:	f000 fd57 	bl	8007020 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	69da      	ldr	r2, [r3, #28]
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006580:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	69d9      	ldr	r1, [r3, #28]
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	021a      	lsls	r2, r3, #8
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	430a      	orrs	r2, r1
 8006594:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2201      	movs	r2, #1
 800659a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2200      	movs	r2, #0
 80065a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80065a6:	2300      	movs	r3, #0
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3710      	adds	r7, #16
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}

080065b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b084      	sub	sp, #16
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	60b9      	str	r1, [r7, #8]
 80065ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	d101      	bne.n	80065ca <HAL_TIM_PWM_ConfigChannel+0x1a>
 80065c6:	2302      	movs	r3, #2
 80065c8:	e0b4      	b.n	8006734 <HAL_TIM_PWM_ConfigChannel+0x184>
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2201      	movs	r2, #1
 80065ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2202      	movs	r2, #2
 80065d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2b0c      	cmp	r3, #12
 80065de:	f200 809f 	bhi.w	8006720 <HAL_TIM_PWM_ConfigChannel+0x170>
 80065e2:	a201      	add	r2, pc, #4	; (adr r2, 80065e8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80065e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065e8:	0800661d 	.word	0x0800661d
 80065ec:	08006721 	.word	0x08006721
 80065f0:	08006721 	.word	0x08006721
 80065f4:	08006721 	.word	0x08006721
 80065f8:	0800665d 	.word	0x0800665d
 80065fc:	08006721 	.word	0x08006721
 8006600:	08006721 	.word	0x08006721
 8006604:	08006721 	.word	0x08006721
 8006608:	0800669f 	.word	0x0800669f
 800660c:	08006721 	.word	0x08006721
 8006610:	08006721 	.word	0x08006721
 8006614:	08006721 	.word	0x08006721
 8006618:	080066df 	.word	0x080066df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	68b9      	ldr	r1, [r7, #8]
 8006622:	4618      	mov	r0, r3
 8006624:	f000 fa00 	bl	8006a28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	699a      	ldr	r2, [r3, #24]
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f042 0208 	orr.w	r2, r2, #8
 8006636:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	699a      	ldr	r2, [r3, #24]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f022 0204 	bic.w	r2, r2, #4
 8006646:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	6999      	ldr	r1, [r3, #24]
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	691a      	ldr	r2, [r3, #16]
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	430a      	orrs	r2, r1
 8006658:	619a      	str	r2, [r3, #24]
      break;
 800665a:	e062      	b.n	8006722 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	68b9      	ldr	r1, [r7, #8]
 8006662:	4618      	mov	r0, r3
 8006664:	f000 fa50 	bl	8006b08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	699a      	ldr	r2, [r3, #24]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006676:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	699a      	ldr	r2, [r3, #24]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006686:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	6999      	ldr	r1, [r3, #24]
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	691b      	ldr	r3, [r3, #16]
 8006692:	021a      	lsls	r2, r3, #8
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	430a      	orrs	r2, r1
 800669a:	619a      	str	r2, [r3, #24]
      break;
 800669c:	e041      	b.n	8006722 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	68b9      	ldr	r1, [r7, #8]
 80066a4:	4618      	mov	r0, r3
 80066a6:	f000 faa5 	bl	8006bf4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	69da      	ldr	r2, [r3, #28]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f042 0208 	orr.w	r2, r2, #8
 80066b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	69da      	ldr	r2, [r3, #28]
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f022 0204 	bic.w	r2, r2, #4
 80066c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	69d9      	ldr	r1, [r3, #28]
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	691a      	ldr	r2, [r3, #16]
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	430a      	orrs	r2, r1
 80066da:	61da      	str	r2, [r3, #28]
      break;
 80066dc:	e021      	b.n	8006722 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	68b9      	ldr	r1, [r7, #8]
 80066e4:	4618      	mov	r0, r3
 80066e6:	f000 faf9 	bl	8006cdc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	69da      	ldr	r2, [r3, #28]
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	69da      	ldr	r2, [r3, #28]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006708:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	69d9      	ldr	r1, [r3, #28]
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	691b      	ldr	r3, [r3, #16]
 8006714:	021a      	lsls	r2, r3, #8
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	430a      	orrs	r2, r1
 800671c:	61da      	str	r2, [r3, #28]
      break;
 800671e:	e000      	b.n	8006722 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8006720:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2201      	movs	r2, #1
 8006726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2200      	movs	r2, #0
 800672e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006732:	2300      	movs	r3, #0
}
 8006734:	4618      	mov	r0, r3
 8006736:	3710      	adds	r7, #16
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}

0800673c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b084      	sub	sp, #16
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800674c:	2b01      	cmp	r3, #1
 800674e:	d101      	bne.n	8006754 <HAL_TIM_ConfigClockSource+0x18>
 8006750:	2302      	movs	r3, #2
 8006752:	e0a6      	b.n	80068a2 <HAL_TIM_ConfigClockSource+0x166>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2201      	movs	r2, #1
 8006758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2202      	movs	r2, #2
 8006760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006772:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800677a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	68fa      	ldr	r2, [r7, #12]
 8006782:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	2b40      	cmp	r3, #64	; 0x40
 800678a:	d067      	beq.n	800685c <HAL_TIM_ConfigClockSource+0x120>
 800678c:	2b40      	cmp	r3, #64	; 0x40
 800678e:	d80b      	bhi.n	80067a8 <HAL_TIM_ConfigClockSource+0x6c>
 8006790:	2b10      	cmp	r3, #16
 8006792:	d073      	beq.n	800687c <HAL_TIM_ConfigClockSource+0x140>
 8006794:	2b10      	cmp	r3, #16
 8006796:	d802      	bhi.n	800679e <HAL_TIM_ConfigClockSource+0x62>
 8006798:	2b00      	cmp	r3, #0
 800679a:	d06f      	beq.n	800687c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800679c:	e078      	b.n	8006890 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800679e:	2b20      	cmp	r3, #32
 80067a0:	d06c      	beq.n	800687c <HAL_TIM_ConfigClockSource+0x140>
 80067a2:	2b30      	cmp	r3, #48	; 0x30
 80067a4:	d06a      	beq.n	800687c <HAL_TIM_ConfigClockSource+0x140>
      break;
 80067a6:	e073      	b.n	8006890 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80067a8:	2b70      	cmp	r3, #112	; 0x70
 80067aa:	d00d      	beq.n	80067c8 <HAL_TIM_ConfigClockSource+0x8c>
 80067ac:	2b70      	cmp	r3, #112	; 0x70
 80067ae:	d804      	bhi.n	80067ba <HAL_TIM_ConfigClockSource+0x7e>
 80067b0:	2b50      	cmp	r3, #80	; 0x50
 80067b2:	d033      	beq.n	800681c <HAL_TIM_ConfigClockSource+0xe0>
 80067b4:	2b60      	cmp	r3, #96	; 0x60
 80067b6:	d041      	beq.n	800683c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80067b8:	e06a      	b.n	8006890 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80067ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067be:	d066      	beq.n	800688e <HAL_TIM_ConfigClockSource+0x152>
 80067c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067c4:	d017      	beq.n	80067f6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80067c6:	e063      	b.n	8006890 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6818      	ldr	r0, [r3, #0]
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	6899      	ldr	r1, [r3, #8]
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	685a      	ldr	r2, [r3, #4]
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	68db      	ldr	r3, [r3, #12]
 80067d8:	f000 fc7a 	bl	80070d0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80067ea:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	68fa      	ldr	r2, [r7, #12]
 80067f2:	609a      	str	r2, [r3, #8]
      break;
 80067f4:	e04c      	b.n	8006890 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6818      	ldr	r0, [r3, #0]
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	6899      	ldr	r1, [r3, #8]
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	685a      	ldr	r2, [r3, #4]
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	68db      	ldr	r3, [r3, #12]
 8006806:	f000 fc63 	bl	80070d0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	689a      	ldr	r2, [r3, #8]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006818:	609a      	str	r2, [r3, #8]
      break;
 800681a:	e039      	b.n	8006890 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6818      	ldr	r0, [r3, #0]
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	6859      	ldr	r1, [r3, #4]
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	68db      	ldr	r3, [r3, #12]
 8006828:	461a      	mov	r2, r3
 800682a:	f000 fb21 	bl	8006e70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	2150      	movs	r1, #80	; 0x50
 8006834:	4618      	mov	r0, r3
 8006836:	f000 fc30 	bl	800709a <TIM_ITRx_SetConfig>
      break;
 800683a:	e029      	b.n	8006890 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6818      	ldr	r0, [r3, #0]
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	6859      	ldr	r1, [r3, #4]
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	68db      	ldr	r3, [r3, #12]
 8006848:	461a      	mov	r2, r3
 800684a:	f000 fb7d 	bl	8006f48 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	2160      	movs	r1, #96	; 0x60
 8006854:	4618      	mov	r0, r3
 8006856:	f000 fc20 	bl	800709a <TIM_ITRx_SetConfig>
      break;
 800685a:	e019      	b.n	8006890 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6818      	ldr	r0, [r3, #0]
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	6859      	ldr	r1, [r3, #4]
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	461a      	mov	r2, r3
 800686a:	f000 fb01 	bl	8006e70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	2140      	movs	r1, #64	; 0x40
 8006874:	4618      	mov	r0, r3
 8006876:	f000 fc10 	bl	800709a <TIM_ITRx_SetConfig>
      break;
 800687a:	e009      	b.n	8006890 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4619      	mov	r1, r3
 8006886:	4610      	mov	r0, r2
 8006888:	f000 fc07 	bl	800709a <TIM_ITRx_SetConfig>
      break;
 800688c:	e000      	b.n	8006890 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800688e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2201      	movs	r2, #1
 8006894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068a0:	2300      	movs	r3, #0
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3710      	adds	r7, #16
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}

080068aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80068aa:	b480      	push	{r7}
 80068ac:	b083      	sub	sp, #12
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80068b2:	bf00      	nop
 80068b4:	370c      	adds	r7, #12
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr

080068be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80068be:	b480      	push	{r7}
 80068c0:	b083      	sub	sp, #12
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80068c6:	bf00      	nop
 80068c8:	370c      	adds	r7, #12
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr

080068d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80068d2:	b480      	push	{r7}
 80068d4:	b083      	sub	sp, #12
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80068da:	bf00      	nop
 80068dc:	370c      	adds	r7, #12
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr
	...

080068e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b085      	sub	sp, #20
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	4a40      	ldr	r2, [pc, #256]	; (80069fc <TIM_Base_SetConfig+0x114>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d013      	beq.n	8006928 <TIM_Base_SetConfig+0x40>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006906:	d00f      	beq.n	8006928 <TIM_Base_SetConfig+0x40>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	4a3d      	ldr	r2, [pc, #244]	; (8006a00 <TIM_Base_SetConfig+0x118>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d00b      	beq.n	8006928 <TIM_Base_SetConfig+0x40>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	4a3c      	ldr	r2, [pc, #240]	; (8006a04 <TIM_Base_SetConfig+0x11c>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d007      	beq.n	8006928 <TIM_Base_SetConfig+0x40>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	4a3b      	ldr	r2, [pc, #236]	; (8006a08 <TIM_Base_SetConfig+0x120>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d003      	beq.n	8006928 <TIM_Base_SetConfig+0x40>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	4a3a      	ldr	r2, [pc, #232]	; (8006a0c <TIM_Base_SetConfig+0x124>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d108      	bne.n	800693a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800692e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	68fa      	ldr	r2, [r7, #12]
 8006936:	4313      	orrs	r3, r2
 8006938:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	4a2f      	ldr	r2, [pc, #188]	; (80069fc <TIM_Base_SetConfig+0x114>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d02b      	beq.n	800699a <TIM_Base_SetConfig+0xb2>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006948:	d027      	beq.n	800699a <TIM_Base_SetConfig+0xb2>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	4a2c      	ldr	r2, [pc, #176]	; (8006a00 <TIM_Base_SetConfig+0x118>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d023      	beq.n	800699a <TIM_Base_SetConfig+0xb2>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	4a2b      	ldr	r2, [pc, #172]	; (8006a04 <TIM_Base_SetConfig+0x11c>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d01f      	beq.n	800699a <TIM_Base_SetConfig+0xb2>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	4a2a      	ldr	r2, [pc, #168]	; (8006a08 <TIM_Base_SetConfig+0x120>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d01b      	beq.n	800699a <TIM_Base_SetConfig+0xb2>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	4a29      	ldr	r2, [pc, #164]	; (8006a0c <TIM_Base_SetConfig+0x124>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d017      	beq.n	800699a <TIM_Base_SetConfig+0xb2>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	4a28      	ldr	r2, [pc, #160]	; (8006a10 <TIM_Base_SetConfig+0x128>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d013      	beq.n	800699a <TIM_Base_SetConfig+0xb2>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	4a27      	ldr	r2, [pc, #156]	; (8006a14 <TIM_Base_SetConfig+0x12c>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d00f      	beq.n	800699a <TIM_Base_SetConfig+0xb2>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	4a26      	ldr	r2, [pc, #152]	; (8006a18 <TIM_Base_SetConfig+0x130>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d00b      	beq.n	800699a <TIM_Base_SetConfig+0xb2>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	4a25      	ldr	r2, [pc, #148]	; (8006a1c <TIM_Base_SetConfig+0x134>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d007      	beq.n	800699a <TIM_Base_SetConfig+0xb2>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	4a24      	ldr	r2, [pc, #144]	; (8006a20 <TIM_Base_SetConfig+0x138>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d003      	beq.n	800699a <TIM_Base_SetConfig+0xb2>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	4a23      	ldr	r2, [pc, #140]	; (8006a24 <TIM_Base_SetConfig+0x13c>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d108      	bne.n	80069ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	68db      	ldr	r3, [r3, #12]
 80069a6:	68fa      	ldr	r2, [r7, #12]
 80069a8:	4313      	orrs	r3, r2
 80069aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	695b      	ldr	r3, [r3, #20]
 80069b6:	4313      	orrs	r3, r2
 80069b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	68fa      	ldr	r2, [r7, #12]
 80069be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	689a      	ldr	r2, [r3, #8]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	4a0a      	ldr	r2, [pc, #40]	; (80069fc <TIM_Base_SetConfig+0x114>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d003      	beq.n	80069e0 <TIM_Base_SetConfig+0xf8>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	4a0c      	ldr	r2, [pc, #48]	; (8006a0c <TIM_Base_SetConfig+0x124>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d103      	bne.n	80069e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	691a      	ldr	r2, [r3, #16]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2201      	movs	r2, #1
 80069ec:	615a      	str	r2, [r3, #20]
}
 80069ee:	bf00      	nop
 80069f0:	3714      	adds	r7, #20
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr
 80069fa:	bf00      	nop
 80069fc:	40010000 	.word	0x40010000
 8006a00:	40000400 	.word	0x40000400
 8006a04:	40000800 	.word	0x40000800
 8006a08:	40000c00 	.word	0x40000c00
 8006a0c:	40010400 	.word	0x40010400
 8006a10:	40014000 	.word	0x40014000
 8006a14:	40014400 	.word	0x40014400
 8006a18:	40014800 	.word	0x40014800
 8006a1c:	40001800 	.word	0x40001800
 8006a20:	40001c00 	.word	0x40001c00
 8006a24:	40002000 	.word	0x40002000

08006a28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b087      	sub	sp, #28
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6a1b      	ldr	r3, [r3, #32]
 8006a36:	f023 0201 	bic.w	r2, r3, #1
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6a1b      	ldr	r3, [r3, #32]
 8006a42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	699b      	ldr	r3, [r3, #24]
 8006a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f023 0303 	bic.w	r3, r3, #3
 8006a5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	68fa      	ldr	r2, [r7, #12]
 8006a66:	4313      	orrs	r3, r2
 8006a68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	f023 0302 	bic.w	r3, r3, #2
 8006a70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	689b      	ldr	r3, [r3, #8]
 8006a76:	697a      	ldr	r2, [r7, #20]
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	4a20      	ldr	r2, [pc, #128]	; (8006b00 <TIM_OC1_SetConfig+0xd8>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d003      	beq.n	8006a8c <TIM_OC1_SetConfig+0x64>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	4a1f      	ldr	r2, [pc, #124]	; (8006b04 <TIM_OC1_SetConfig+0xdc>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d10c      	bne.n	8006aa6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	f023 0308 	bic.w	r3, r3, #8
 8006a92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	68db      	ldr	r3, [r3, #12]
 8006a98:	697a      	ldr	r2, [r7, #20]
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	f023 0304 	bic.w	r3, r3, #4
 8006aa4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	4a15      	ldr	r2, [pc, #84]	; (8006b00 <TIM_OC1_SetConfig+0xd8>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d003      	beq.n	8006ab6 <TIM_OC1_SetConfig+0x8e>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	4a14      	ldr	r2, [pc, #80]	; (8006b04 <TIM_OC1_SetConfig+0xdc>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d111      	bne.n	8006ada <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006abc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ac4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	695b      	ldr	r3, [r3, #20]
 8006aca:	693a      	ldr	r2, [r7, #16]
 8006acc:	4313      	orrs	r3, r2
 8006ace:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	699b      	ldr	r3, [r3, #24]
 8006ad4:	693a      	ldr	r2, [r7, #16]
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	693a      	ldr	r2, [r7, #16]
 8006ade:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	68fa      	ldr	r2, [r7, #12]
 8006ae4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	685a      	ldr	r2, [r3, #4]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	697a      	ldr	r2, [r7, #20]
 8006af2:	621a      	str	r2, [r3, #32]
}
 8006af4:	bf00      	nop
 8006af6:	371c      	adds	r7, #28
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr
 8006b00:	40010000 	.word	0x40010000
 8006b04:	40010400 	.word	0x40010400

08006b08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b087      	sub	sp, #28
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6a1b      	ldr	r3, [r3, #32]
 8006b16:	f023 0210 	bic.w	r2, r3, #16
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6a1b      	ldr	r3, [r3, #32]
 8006b22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	699b      	ldr	r3, [r3, #24]
 8006b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	021b      	lsls	r3, r3, #8
 8006b46:	68fa      	ldr	r2, [r7, #12]
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	f023 0320 	bic.w	r3, r3, #32
 8006b52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	011b      	lsls	r3, r3, #4
 8006b5a:	697a      	ldr	r2, [r7, #20]
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	4a22      	ldr	r2, [pc, #136]	; (8006bec <TIM_OC2_SetConfig+0xe4>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d003      	beq.n	8006b70 <TIM_OC2_SetConfig+0x68>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	4a21      	ldr	r2, [pc, #132]	; (8006bf0 <TIM_OC2_SetConfig+0xe8>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d10d      	bne.n	8006b8c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	011b      	lsls	r3, r3, #4
 8006b7e:	697a      	ldr	r2, [r7, #20]
 8006b80:	4313      	orrs	r3, r2
 8006b82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b8a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	4a17      	ldr	r2, [pc, #92]	; (8006bec <TIM_OC2_SetConfig+0xe4>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d003      	beq.n	8006b9c <TIM_OC2_SetConfig+0x94>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	4a16      	ldr	r2, [pc, #88]	; (8006bf0 <TIM_OC2_SetConfig+0xe8>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d113      	bne.n	8006bc4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ba2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006baa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	695b      	ldr	r3, [r3, #20]
 8006bb0:	009b      	lsls	r3, r3, #2
 8006bb2:	693a      	ldr	r2, [r7, #16]
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	699b      	ldr	r3, [r3, #24]
 8006bbc:	009b      	lsls	r3, r3, #2
 8006bbe:	693a      	ldr	r2, [r7, #16]
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	693a      	ldr	r2, [r7, #16]
 8006bc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	68fa      	ldr	r2, [r7, #12]
 8006bce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	685a      	ldr	r2, [r3, #4]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	697a      	ldr	r2, [r7, #20]
 8006bdc:	621a      	str	r2, [r3, #32]
}
 8006bde:	bf00      	nop
 8006be0:	371c      	adds	r7, #28
 8006be2:	46bd      	mov	sp, r7
 8006be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be8:	4770      	bx	lr
 8006bea:	bf00      	nop
 8006bec:	40010000 	.word	0x40010000
 8006bf0:	40010400 	.word	0x40010400

08006bf4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b087      	sub	sp, #28
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
 8006bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6a1b      	ldr	r3, [r3, #32]
 8006c02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6a1b      	ldr	r3, [r3, #32]
 8006c0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	69db      	ldr	r3, [r3, #28]
 8006c1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f023 0303 	bic.w	r3, r3, #3
 8006c2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	68fa      	ldr	r2, [r7, #12]
 8006c32:	4313      	orrs	r3, r2
 8006c34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	689b      	ldr	r3, [r3, #8]
 8006c42:	021b      	lsls	r3, r3, #8
 8006c44:	697a      	ldr	r2, [r7, #20]
 8006c46:	4313      	orrs	r3, r2
 8006c48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	4a21      	ldr	r2, [pc, #132]	; (8006cd4 <TIM_OC3_SetConfig+0xe0>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d003      	beq.n	8006c5a <TIM_OC3_SetConfig+0x66>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	4a20      	ldr	r2, [pc, #128]	; (8006cd8 <TIM_OC3_SetConfig+0xe4>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d10d      	bne.n	8006c76 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	68db      	ldr	r3, [r3, #12]
 8006c66:	021b      	lsls	r3, r3, #8
 8006c68:	697a      	ldr	r2, [r7, #20]
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	4a16      	ldr	r2, [pc, #88]	; (8006cd4 <TIM_OC3_SetConfig+0xe0>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d003      	beq.n	8006c86 <TIM_OC3_SetConfig+0x92>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	4a15      	ldr	r2, [pc, #84]	; (8006cd8 <TIM_OC3_SetConfig+0xe4>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d113      	bne.n	8006cae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	695b      	ldr	r3, [r3, #20]
 8006c9a:	011b      	lsls	r3, r3, #4
 8006c9c:	693a      	ldr	r2, [r7, #16]
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	699b      	ldr	r3, [r3, #24]
 8006ca6:	011b      	lsls	r3, r3, #4
 8006ca8:	693a      	ldr	r2, [r7, #16]
 8006caa:	4313      	orrs	r3, r2
 8006cac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	693a      	ldr	r2, [r7, #16]
 8006cb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	68fa      	ldr	r2, [r7, #12]
 8006cb8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	685a      	ldr	r2, [r3, #4]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	697a      	ldr	r2, [r7, #20]
 8006cc6:	621a      	str	r2, [r3, #32]
}
 8006cc8:	bf00      	nop
 8006cca:	371c      	adds	r7, #28
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr
 8006cd4:	40010000 	.word	0x40010000
 8006cd8:	40010400 	.word	0x40010400

08006cdc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b087      	sub	sp, #28
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6a1b      	ldr	r3, [r3, #32]
 8006cea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6a1b      	ldr	r3, [r3, #32]
 8006cf6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	69db      	ldr	r3, [r3, #28]
 8006d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	021b      	lsls	r3, r3, #8
 8006d1a:	68fa      	ldr	r2, [r7, #12]
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	031b      	lsls	r3, r3, #12
 8006d2e:	693a      	ldr	r2, [r7, #16]
 8006d30:	4313      	orrs	r3, r2
 8006d32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	4a12      	ldr	r2, [pc, #72]	; (8006d80 <TIM_OC4_SetConfig+0xa4>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d003      	beq.n	8006d44 <TIM_OC4_SetConfig+0x68>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	4a11      	ldr	r2, [pc, #68]	; (8006d84 <TIM_OC4_SetConfig+0xa8>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d109      	bne.n	8006d58 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	695b      	ldr	r3, [r3, #20]
 8006d50:	019b      	lsls	r3, r3, #6
 8006d52:	697a      	ldr	r2, [r7, #20]
 8006d54:	4313      	orrs	r3, r2
 8006d56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	697a      	ldr	r2, [r7, #20]
 8006d5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	68fa      	ldr	r2, [r7, #12]
 8006d62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	685a      	ldr	r2, [r3, #4]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	693a      	ldr	r2, [r7, #16]
 8006d70:	621a      	str	r2, [r3, #32]
}
 8006d72:	bf00      	nop
 8006d74:	371c      	adds	r7, #28
 8006d76:	46bd      	mov	sp, r7
 8006d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7c:	4770      	bx	lr
 8006d7e:	bf00      	nop
 8006d80:	40010000 	.word	0x40010000
 8006d84:	40010400 	.word	0x40010400

08006d88 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b087      	sub	sp, #28
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	60f8      	str	r0, [r7, #12]
 8006d90:	60b9      	str	r1, [r7, #8]
 8006d92:	607a      	str	r2, [r7, #4]
 8006d94:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	6a1b      	ldr	r3, [r3, #32]
 8006d9a:	f023 0201 	bic.w	r2, r3, #1
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	699b      	ldr	r3, [r3, #24]
 8006da6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	6a1b      	ldr	r3, [r3, #32]
 8006dac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	4a28      	ldr	r2, [pc, #160]	; (8006e54 <TIM_TI1_SetConfig+0xcc>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d01b      	beq.n	8006dee <TIM_TI1_SetConfig+0x66>
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dbc:	d017      	beq.n	8006dee <TIM_TI1_SetConfig+0x66>
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	4a25      	ldr	r2, [pc, #148]	; (8006e58 <TIM_TI1_SetConfig+0xd0>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d013      	beq.n	8006dee <TIM_TI1_SetConfig+0x66>
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	4a24      	ldr	r2, [pc, #144]	; (8006e5c <TIM_TI1_SetConfig+0xd4>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d00f      	beq.n	8006dee <TIM_TI1_SetConfig+0x66>
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	4a23      	ldr	r2, [pc, #140]	; (8006e60 <TIM_TI1_SetConfig+0xd8>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d00b      	beq.n	8006dee <TIM_TI1_SetConfig+0x66>
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	4a22      	ldr	r2, [pc, #136]	; (8006e64 <TIM_TI1_SetConfig+0xdc>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d007      	beq.n	8006dee <TIM_TI1_SetConfig+0x66>
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	4a21      	ldr	r2, [pc, #132]	; (8006e68 <TIM_TI1_SetConfig+0xe0>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d003      	beq.n	8006dee <TIM_TI1_SetConfig+0x66>
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	4a20      	ldr	r2, [pc, #128]	; (8006e6c <TIM_TI1_SetConfig+0xe4>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d101      	bne.n	8006df2 <TIM_TI1_SetConfig+0x6a>
 8006dee:	2301      	movs	r3, #1
 8006df0:	e000      	b.n	8006df4 <TIM_TI1_SetConfig+0x6c>
 8006df2:	2300      	movs	r3, #0
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d008      	beq.n	8006e0a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	f023 0303 	bic.w	r3, r3, #3
 8006dfe:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006e00:	697a      	ldr	r2, [r7, #20]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	4313      	orrs	r3, r2
 8006e06:	617b      	str	r3, [r7, #20]
 8006e08:	e003      	b.n	8006e12 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	f043 0301 	orr.w	r3, r3, #1
 8006e10:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	011b      	lsls	r3, r3, #4
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	697a      	ldr	r2, [r7, #20]
 8006e22:	4313      	orrs	r3, r2
 8006e24:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	f023 030a 	bic.w	r3, r3, #10
 8006e2c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	f003 030a 	and.w	r3, r3, #10
 8006e34:	693a      	ldr	r2, [r7, #16]
 8006e36:	4313      	orrs	r3, r2
 8006e38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	697a      	ldr	r2, [r7, #20]
 8006e3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	693a      	ldr	r2, [r7, #16]
 8006e44:	621a      	str	r2, [r3, #32]
}
 8006e46:	bf00      	nop
 8006e48:	371c      	adds	r7, #28
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e50:	4770      	bx	lr
 8006e52:	bf00      	nop
 8006e54:	40010000 	.word	0x40010000
 8006e58:	40000400 	.word	0x40000400
 8006e5c:	40000800 	.word	0x40000800
 8006e60:	40000c00 	.word	0x40000c00
 8006e64:	40010400 	.word	0x40010400
 8006e68:	40014000 	.word	0x40014000
 8006e6c:	40001800 	.word	0x40001800

08006e70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b087      	sub	sp, #28
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	60f8      	str	r0, [r7, #12]
 8006e78:	60b9      	str	r1, [r7, #8]
 8006e7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	6a1b      	ldr	r3, [r3, #32]
 8006e80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	6a1b      	ldr	r3, [r3, #32]
 8006e86:	f023 0201 	bic.w	r2, r3, #1
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	699b      	ldr	r3, [r3, #24]
 8006e92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	011b      	lsls	r3, r3, #4
 8006ea0:	693a      	ldr	r2, [r7, #16]
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	f023 030a 	bic.w	r3, r3, #10
 8006eac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006eae:	697a      	ldr	r2, [r7, #20]
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	693a      	ldr	r2, [r7, #16]
 8006eba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	697a      	ldr	r2, [r7, #20]
 8006ec0:	621a      	str	r2, [r3, #32]
}
 8006ec2:	bf00      	nop
 8006ec4:	371c      	adds	r7, #28
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ecc:	4770      	bx	lr

08006ece <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006ece:	b480      	push	{r7}
 8006ed0:	b087      	sub	sp, #28
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	60f8      	str	r0, [r7, #12]
 8006ed6:	60b9      	str	r1, [r7, #8]
 8006ed8:	607a      	str	r2, [r7, #4]
 8006eda:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	6a1b      	ldr	r3, [r3, #32]
 8006ee0:	f023 0210 	bic.w	r2, r3, #16
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	699b      	ldr	r3, [r3, #24]
 8006eec:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	6a1b      	ldr	r3, [r3, #32]
 8006ef2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006efa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	021b      	lsls	r3, r3, #8
 8006f00:	697a      	ldr	r2, [r7, #20]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f0c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	031b      	lsls	r3, r3, #12
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	697a      	ldr	r2, [r7, #20]
 8006f16:	4313      	orrs	r3, r2
 8006f18:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006f20:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	011b      	lsls	r3, r3, #4
 8006f26:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006f2a:	693a      	ldr	r2, [r7, #16]
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	697a      	ldr	r2, [r7, #20]
 8006f34:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	693a      	ldr	r2, [r7, #16]
 8006f3a:	621a      	str	r2, [r3, #32]
}
 8006f3c:	bf00      	nop
 8006f3e:	371c      	adds	r7, #28
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr

08006f48 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b087      	sub	sp, #28
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	60f8      	str	r0, [r7, #12]
 8006f50:	60b9      	str	r1, [r7, #8]
 8006f52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	6a1b      	ldr	r3, [r3, #32]
 8006f58:	f023 0210 	bic.w	r2, r3, #16
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	699b      	ldr	r3, [r3, #24]
 8006f64:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	6a1b      	ldr	r3, [r3, #32]
 8006f6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f72:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	031b      	lsls	r3, r3, #12
 8006f78:	697a      	ldr	r2, [r7, #20]
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006f84:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	011b      	lsls	r3, r3, #4
 8006f8a:	693a      	ldr	r2, [r7, #16]
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	697a      	ldr	r2, [r7, #20]
 8006f94:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	693a      	ldr	r2, [r7, #16]
 8006f9a:	621a      	str	r2, [r3, #32]
}
 8006f9c:	bf00      	nop
 8006f9e:	371c      	adds	r7, #28
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr

08006fa8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b087      	sub	sp, #28
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	60f8      	str	r0, [r7, #12]
 8006fb0:	60b9      	str	r1, [r7, #8]
 8006fb2:	607a      	str	r2, [r7, #4]
 8006fb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	6a1b      	ldr	r3, [r3, #32]
 8006fba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	69db      	ldr	r3, [r3, #28]
 8006fc6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	6a1b      	ldr	r3, [r3, #32]
 8006fcc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	f023 0303 	bic.w	r3, r3, #3
 8006fd4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006fd6:	697a      	ldr	r2, [r7, #20]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006fe4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	011b      	lsls	r3, r3, #4
 8006fea:	b2db      	uxtb	r3, r3
 8006fec:	697a      	ldr	r2, [r7, #20]
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006ff8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	021b      	lsls	r3, r3, #8
 8006ffe:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007002:	693a      	ldr	r2, [r7, #16]
 8007004:	4313      	orrs	r3, r2
 8007006:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	697a      	ldr	r2, [r7, #20]
 800700c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	693a      	ldr	r2, [r7, #16]
 8007012:	621a      	str	r2, [r3, #32]
}
 8007014:	bf00      	nop
 8007016:	371c      	adds	r7, #28
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr

08007020 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007020:	b480      	push	{r7}
 8007022:	b087      	sub	sp, #28
 8007024:	af00      	add	r7, sp, #0
 8007026:	60f8      	str	r0, [r7, #12]
 8007028:	60b9      	str	r1, [r7, #8]
 800702a:	607a      	str	r2, [r7, #4]
 800702c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	6a1b      	ldr	r3, [r3, #32]
 8007032:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	69db      	ldr	r3, [r3, #28]
 800703e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	6a1b      	ldr	r3, [r3, #32]
 8007044:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800704c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	021b      	lsls	r3, r3, #8
 8007052:	697a      	ldr	r2, [r7, #20]
 8007054:	4313      	orrs	r3, r2
 8007056:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800705e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	031b      	lsls	r3, r3, #12
 8007064:	b29b      	uxth	r3, r3
 8007066:	697a      	ldr	r2, [r7, #20]
 8007068:	4313      	orrs	r3, r2
 800706a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007072:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	031b      	lsls	r3, r3, #12
 8007078:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800707c:	693a      	ldr	r2, [r7, #16]
 800707e:	4313      	orrs	r3, r2
 8007080:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	697a      	ldr	r2, [r7, #20]
 8007086:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	693a      	ldr	r2, [r7, #16]
 800708c:	621a      	str	r2, [r3, #32]
}
 800708e:	bf00      	nop
 8007090:	371c      	adds	r7, #28
 8007092:	46bd      	mov	sp, r7
 8007094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007098:	4770      	bx	lr

0800709a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800709a:	b480      	push	{r7}
 800709c:	b085      	sub	sp, #20
 800709e:	af00      	add	r7, sp, #0
 80070a0:	6078      	str	r0, [r7, #4]
 80070a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80070b2:	683a      	ldr	r2, [r7, #0]
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	4313      	orrs	r3, r2
 80070b8:	f043 0307 	orr.w	r3, r3, #7
 80070bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	68fa      	ldr	r2, [r7, #12]
 80070c2:	609a      	str	r2, [r3, #8]
}
 80070c4:	bf00      	nop
 80070c6:	3714      	adds	r7, #20
 80070c8:	46bd      	mov	sp, r7
 80070ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ce:	4770      	bx	lr

080070d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b087      	sub	sp, #28
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	60f8      	str	r0, [r7, #12]
 80070d8:	60b9      	str	r1, [r7, #8]
 80070da:	607a      	str	r2, [r7, #4]
 80070dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80070ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	021a      	lsls	r2, r3, #8
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	431a      	orrs	r2, r3
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	4313      	orrs	r3, r2
 80070f8:	697a      	ldr	r2, [r7, #20]
 80070fa:	4313      	orrs	r3, r2
 80070fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	697a      	ldr	r2, [r7, #20]
 8007102:	609a      	str	r2, [r3, #8]
}
 8007104:	bf00      	nop
 8007106:	371c      	adds	r7, #28
 8007108:	46bd      	mov	sp, r7
 800710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710e:	4770      	bx	lr

08007110 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007110:	b480      	push	{r7}
 8007112:	b087      	sub	sp, #28
 8007114:	af00      	add	r7, sp, #0
 8007116:	60f8      	str	r0, [r7, #12]
 8007118:	60b9      	str	r1, [r7, #8]
 800711a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	f003 031f 	and.w	r3, r3, #31
 8007122:	2201      	movs	r2, #1
 8007124:	fa02 f303 	lsl.w	r3, r2, r3
 8007128:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	6a1a      	ldr	r2, [r3, #32]
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	43db      	mvns	r3, r3
 8007132:	401a      	ands	r2, r3
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	6a1a      	ldr	r2, [r3, #32]
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	f003 031f 	and.w	r3, r3, #31
 8007142:	6879      	ldr	r1, [r7, #4]
 8007144:	fa01 f303 	lsl.w	r3, r1, r3
 8007148:	431a      	orrs	r2, r3
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	621a      	str	r2, [r3, #32]
}
 800714e:	bf00      	nop
 8007150:	371c      	adds	r7, #28
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr
	...

0800715c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800715c:	b480      	push	{r7}
 800715e:	b085      	sub	sp, #20
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
 8007164:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800716c:	2b01      	cmp	r3, #1
 800716e:	d101      	bne.n	8007174 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007170:	2302      	movs	r3, #2
 8007172:	e05a      	b.n	800722a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2201      	movs	r2, #1
 8007178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2202      	movs	r2, #2
 8007180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	689b      	ldr	r3, [r3, #8]
 8007192:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800719a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	68fa      	ldr	r2, [r7, #12]
 80071a2:	4313      	orrs	r3, r2
 80071a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	68fa      	ldr	r2, [r7, #12]
 80071ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a21      	ldr	r2, [pc, #132]	; (8007238 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d022      	beq.n	80071fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071c0:	d01d      	beq.n	80071fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a1d      	ldr	r2, [pc, #116]	; (800723c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d018      	beq.n	80071fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a1b      	ldr	r2, [pc, #108]	; (8007240 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d013      	beq.n	80071fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a1a      	ldr	r2, [pc, #104]	; (8007244 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d00e      	beq.n	80071fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a18      	ldr	r2, [pc, #96]	; (8007248 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d009      	beq.n	80071fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a17      	ldr	r2, [pc, #92]	; (800724c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d004      	beq.n	80071fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a15      	ldr	r2, [pc, #84]	; (8007250 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d10c      	bne.n	8007218 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007204:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	68ba      	ldr	r2, [r7, #8]
 800720c:	4313      	orrs	r3, r2
 800720e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	68ba      	ldr	r2, [r7, #8]
 8007216:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2201      	movs	r2, #1
 800721c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007228:	2300      	movs	r3, #0
}
 800722a:	4618      	mov	r0, r3
 800722c:	3714      	adds	r7, #20
 800722e:	46bd      	mov	sp, r7
 8007230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007234:	4770      	bx	lr
 8007236:	bf00      	nop
 8007238:	40010000 	.word	0x40010000
 800723c:	40000400 	.word	0x40000400
 8007240:	40000800 	.word	0x40000800
 8007244:	40000c00 	.word	0x40000c00
 8007248:	40010400 	.word	0x40010400
 800724c:	40014000 	.word	0x40014000
 8007250:	40001800 	.word	0x40001800

08007254 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007254:	b480      	push	{r7}
 8007256:	b083      	sub	sp, #12
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800725c:	bf00      	nop
 800725e:	370c      	adds	r7, #12
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr

08007268 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007268:	b480      	push	{r7}
 800726a:	b083      	sub	sp, #12
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007270:	bf00      	nop
 8007272:	370c      	adds	r7, #12
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr

0800727c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b082      	sub	sp, #8
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d101      	bne.n	800728e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	e03f      	b.n	800730e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007294:	b2db      	uxtb	r3, r3
 8007296:	2b00      	cmp	r3, #0
 8007298:	d106      	bne.n	80072a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2200      	movs	r2, #0
 800729e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f7fc fcf0 	bl	8003c88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2224      	movs	r2, #36	; 0x24
 80072ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	68da      	ldr	r2, [r3, #12]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80072be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f000 faf9 	bl	80078b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	691a      	ldr	r2, [r3, #16]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80072d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	695a      	ldr	r2, [r3, #20]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80072e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	68da      	ldr	r2, [r3, #12]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80072f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2200      	movs	r2, #0
 80072fa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2220      	movs	r2, #32
 8007300:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2220      	movs	r2, #32
 8007308:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800730c:	2300      	movs	r3, #0
}
 800730e:	4618      	mov	r0, r3
 8007310:	3708      	adds	r7, #8
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}

08007316 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007316:	b480      	push	{r7}
 8007318:	b085      	sub	sp, #20
 800731a:	af00      	add	r7, sp, #0
 800731c:	60f8      	str	r0, [r7, #12]
 800731e:	60b9      	str	r1, [r7, #8]
 8007320:	4613      	mov	r3, r2
 8007322:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800732a:	b2db      	uxtb	r3, r3
 800732c:	2b20      	cmp	r3, #32
 800732e:	d130      	bne.n	8007392 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d002      	beq.n	800733c <HAL_UART_Transmit_IT+0x26>
 8007336:	88fb      	ldrh	r3, [r7, #6]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d101      	bne.n	8007340 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800733c:	2301      	movs	r3, #1
 800733e:	e029      	b.n	8007394 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007346:	2b01      	cmp	r3, #1
 8007348:	d101      	bne.n	800734e <HAL_UART_Transmit_IT+0x38>
 800734a:	2302      	movs	r3, #2
 800734c:	e022      	b.n	8007394 <HAL_UART_Transmit_IT+0x7e>
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2201      	movs	r2, #1
 8007352:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	68ba      	ldr	r2, [r7, #8]
 800735a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	88fa      	ldrh	r2, [r7, #6]
 8007360:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	88fa      	ldrh	r2, [r7, #6]
 8007366:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2200      	movs	r2, #0
 800736c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2221      	movs	r2, #33	; 0x21
 8007372:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2200      	movs	r2, #0
 800737a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	68da      	ldr	r2, [r3, #12]
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800738c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800738e:	2300      	movs	r3, #0
 8007390:	e000      	b.n	8007394 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8007392:	2302      	movs	r3, #2
  }
}
 8007394:	4618      	mov	r0, r3
 8007396:	3714      	adds	r7, #20
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr

080073a0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b085      	sub	sp, #20
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	60f8      	str	r0, [r7, #12]
 80073a8:	60b9      	str	r1, [r7, #8]
 80073aa:	4613      	mov	r3, r2
 80073ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80073b4:	b2db      	uxtb	r3, r3
 80073b6:	2b20      	cmp	r3, #32
 80073b8:	d140      	bne.n	800743c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d002      	beq.n	80073c6 <HAL_UART_Receive_IT+0x26>
 80073c0:	88fb      	ldrh	r3, [r7, #6]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d101      	bne.n	80073ca <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80073c6:	2301      	movs	r3, #1
 80073c8:	e039      	b.n	800743e <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	d101      	bne.n	80073d8 <HAL_UART_Receive_IT+0x38>
 80073d4:	2302      	movs	r3, #2
 80073d6:	e032      	b.n	800743e <HAL_UART_Receive_IT+0x9e>
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2201      	movs	r2, #1
 80073dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	68ba      	ldr	r2, [r7, #8]
 80073e4:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	88fa      	ldrh	r2, [r7, #6]
 80073ea:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	88fa      	ldrh	r2, [r7, #6]
 80073f0:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2200      	movs	r2, #0
 80073f6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2222      	movs	r2, #34	; 0x22
 80073fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2200      	movs	r2, #0
 8007404:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	68da      	ldr	r2, [r3, #12]
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007416:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	695a      	ldr	r2, [r3, #20]
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f042 0201 	orr.w	r2, r2, #1
 8007426:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	68da      	ldr	r2, [r3, #12]
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f042 0220 	orr.w	r2, r2, #32
 8007436:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8007438:	2300      	movs	r3, #0
 800743a:	e000      	b.n	800743e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800743c:	2302      	movs	r3, #2
  }
}
 800743e:	4618      	mov	r0, r3
 8007440:	3714      	adds	r7, #20
 8007442:	46bd      	mov	sp, r7
 8007444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007448:	4770      	bx	lr
	...

0800744c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b088      	sub	sp, #32
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	68db      	ldr	r3, [r3, #12]
 8007462:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	695b      	ldr	r3, [r3, #20]
 800746a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800746c:	2300      	movs	r3, #0
 800746e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8007470:	2300      	movs	r3, #0
 8007472:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007474:	69fb      	ldr	r3, [r7, #28]
 8007476:	f003 030f 	and.w	r3, r3, #15
 800747a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d10d      	bne.n	800749e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007482:	69fb      	ldr	r3, [r7, #28]
 8007484:	f003 0320 	and.w	r3, r3, #32
 8007488:	2b00      	cmp	r3, #0
 800748a:	d008      	beq.n	800749e <HAL_UART_IRQHandler+0x52>
 800748c:	69bb      	ldr	r3, [r7, #24]
 800748e:	f003 0320 	and.w	r3, r3, #32
 8007492:	2b00      	cmp	r3, #0
 8007494:	d003      	beq.n	800749e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f000 f98c 	bl	80077b4 <UART_Receive_IT>
      return;
 800749c:	e0d1      	b.n	8007642 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	f000 80b0 	beq.w	8007606 <HAL_UART_IRQHandler+0x1ba>
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	f003 0301 	and.w	r3, r3, #1
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d105      	bne.n	80074bc <HAL_UART_IRQHandler+0x70>
 80074b0:	69bb      	ldr	r3, [r7, #24]
 80074b2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	f000 80a5 	beq.w	8007606 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80074bc:	69fb      	ldr	r3, [r7, #28]
 80074be:	f003 0301 	and.w	r3, r3, #1
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d00a      	beq.n	80074dc <HAL_UART_IRQHandler+0x90>
 80074c6:	69bb      	ldr	r3, [r7, #24]
 80074c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d005      	beq.n	80074dc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074d4:	f043 0201 	orr.w	r2, r3, #1
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80074dc:	69fb      	ldr	r3, [r7, #28]
 80074de:	f003 0304 	and.w	r3, r3, #4
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d00a      	beq.n	80074fc <HAL_UART_IRQHandler+0xb0>
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	f003 0301 	and.w	r3, r3, #1
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d005      	beq.n	80074fc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074f4:	f043 0202 	orr.w	r2, r3, #2
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80074fc:	69fb      	ldr	r3, [r7, #28]
 80074fe:	f003 0302 	and.w	r3, r3, #2
 8007502:	2b00      	cmp	r3, #0
 8007504:	d00a      	beq.n	800751c <HAL_UART_IRQHandler+0xd0>
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	f003 0301 	and.w	r3, r3, #1
 800750c:	2b00      	cmp	r3, #0
 800750e:	d005      	beq.n	800751c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007514:	f043 0204 	orr.w	r2, r3, #4
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800751c:	69fb      	ldr	r3, [r7, #28]
 800751e:	f003 0308 	and.w	r3, r3, #8
 8007522:	2b00      	cmp	r3, #0
 8007524:	d00f      	beq.n	8007546 <HAL_UART_IRQHandler+0xfa>
 8007526:	69bb      	ldr	r3, [r7, #24]
 8007528:	f003 0320 	and.w	r3, r3, #32
 800752c:	2b00      	cmp	r3, #0
 800752e:	d104      	bne.n	800753a <HAL_UART_IRQHandler+0xee>
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	f003 0301 	and.w	r3, r3, #1
 8007536:	2b00      	cmp	r3, #0
 8007538:	d005      	beq.n	8007546 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800753e:	f043 0208 	orr.w	r2, r3, #8
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800754a:	2b00      	cmp	r3, #0
 800754c:	d078      	beq.n	8007640 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800754e:	69fb      	ldr	r3, [r7, #28]
 8007550:	f003 0320 	and.w	r3, r3, #32
 8007554:	2b00      	cmp	r3, #0
 8007556:	d007      	beq.n	8007568 <HAL_UART_IRQHandler+0x11c>
 8007558:	69bb      	ldr	r3, [r7, #24]
 800755a:	f003 0320 	and.w	r3, r3, #32
 800755e:	2b00      	cmp	r3, #0
 8007560:	d002      	beq.n	8007568 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f000 f926 	bl	80077b4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	695b      	ldr	r3, [r3, #20]
 800756e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007572:	2b40      	cmp	r3, #64	; 0x40
 8007574:	bf0c      	ite	eq
 8007576:	2301      	moveq	r3, #1
 8007578:	2300      	movne	r3, #0
 800757a:	b2db      	uxtb	r3, r3
 800757c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007582:	f003 0308 	and.w	r3, r3, #8
 8007586:	2b00      	cmp	r3, #0
 8007588:	d102      	bne.n	8007590 <HAL_UART_IRQHandler+0x144>
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d031      	beq.n	80075f4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f000 f86f 	bl	8007674 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	695b      	ldr	r3, [r3, #20]
 800759c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075a0:	2b40      	cmp	r3, #64	; 0x40
 80075a2:	d123      	bne.n	80075ec <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	695a      	ldr	r2, [r3, #20]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075b2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d013      	beq.n	80075e4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075c0:	4a21      	ldr	r2, [pc, #132]	; (8007648 <HAL_UART_IRQHandler+0x1fc>)
 80075c2:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075c8:	4618      	mov	r0, r3
 80075ca:	f7fc fdeb 	bl	80041a4 <HAL_DMA_Abort_IT>
 80075ce:	4603      	mov	r3, r0
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d016      	beq.n	8007602 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075da:	687a      	ldr	r2, [r7, #4]
 80075dc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80075de:	4610      	mov	r0, r2
 80075e0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075e2:	e00e      	b.n	8007602 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f000 f83b 	bl	8007660 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075ea:	e00a      	b.n	8007602 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f000 f837 	bl	8007660 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075f2:	e006      	b.n	8007602 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f000 f833 	bl	8007660 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2200      	movs	r2, #0
 80075fe:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8007600:	e01e      	b.n	8007640 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007602:	bf00      	nop
    return;
 8007604:	e01c      	b.n	8007640 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007606:	69fb      	ldr	r3, [r7, #28]
 8007608:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800760c:	2b00      	cmp	r3, #0
 800760e:	d008      	beq.n	8007622 <HAL_UART_IRQHandler+0x1d6>
 8007610:	69bb      	ldr	r3, [r7, #24]
 8007612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007616:	2b00      	cmp	r3, #0
 8007618:	d003      	beq.n	8007622 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f000 f85c 	bl	80076d8 <UART_Transmit_IT>
    return;
 8007620:	e00f      	b.n	8007642 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007622:	69fb      	ldr	r3, [r7, #28]
 8007624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007628:	2b00      	cmp	r3, #0
 800762a:	d00a      	beq.n	8007642 <HAL_UART_IRQHandler+0x1f6>
 800762c:	69bb      	ldr	r3, [r7, #24]
 800762e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007632:	2b00      	cmp	r3, #0
 8007634:	d005      	beq.n	8007642 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f000 f8a4 	bl	8007784 <UART_EndTransmit_IT>
    return;
 800763c:	bf00      	nop
 800763e:	e000      	b.n	8007642 <HAL_UART_IRQHandler+0x1f6>
    return;
 8007640:	bf00      	nop
  }
}
 8007642:	3720      	adds	r7, #32
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}
 8007648:	080076b1 	.word	0x080076b1

0800764c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800764c:	b480      	push	{r7}
 800764e:	b083      	sub	sp, #12
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007654:	bf00      	nop
 8007656:	370c      	adds	r7, #12
 8007658:	46bd      	mov	sp, r7
 800765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765e:	4770      	bx	lr

08007660 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007660:	b480      	push	{r7}
 8007662:	b083      	sub	sp, #12
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007668:	bf00      	nop
 800766a:	370c      	adds	r7, #12
 800766c:	46bd      	mov	sp, r7
 800766e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007672:	4770      	bx	lr

08007674 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007674:	b480      	push	{r7}
 8007676:	b083      	sub	sp, #12
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	68da      	ldr	r2, [r3, #12]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800768a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	695a      	ldr	r2, [r3, #20]
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f022 0201 	bic.w	r2, r2, #1
 800769a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2220      	movs	r2, #32
 80076a0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80076a4:	bf00      	nop
 80076a6:	370c      	adds	r7, #12
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr

080076b0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b084      	sub	sp, #16
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2200      	movs	r2, #0
 80076c2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2200      	movs	r2, #0
 80076c8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80076ca:	68f8      	ldr	r0, [r7, #12]
 80076cc:	f7ff ffc8 	bl	8007660 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076d0:	bf00      	nop
 80076d2:	3710      	adds	r7, #16
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}

080076d8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80076d8:	b480      	push	{r7}
 80076da:	b085      	sub	sp, #20
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80076e6:	b2db      	uxtb	r3, r3
 80076e8:	2b21      	cmp	r3, #33	; 0x21
 80076ea:	d144      	bne.n	8007776 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	689b      	ldr	r3, [r3, #8]
 80076f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076f4:	d11a      	bne.n	800772c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6a1b      	ldr	r3, [r3, #32]
 80076fa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	881b      	ldrh	r3, [r3, #0]
 8007700:	461a      	mov	r2, r3
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800770a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	691b      	ldr	r3, [r3, #16]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d105      	bne.n	8007720 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6a1b      	ldr	r3, [r3, #32]
 8007718:	1c9a      	adds	r2, r3, #2
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	621a      	str	r2, [r3, #32]
 800771e:	e00e      	b.n	800773e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6a1b      	ldr	r3, [r3, #32]
 8007724:	1c5a      	adds	r2, r3, #1
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	621a      	str	r2, [r3, #32]
 800772a:	e008      	b.n	800773e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6a1b      	ldr	r3, [r3, #32]
 8007730:	1c59      	adds	r1, r3, #1
 8007732:	687a      	ldr	r2, [r7, #4]
 8007734:	6211      	str	r1, [r2, #32]
 8007736:	781a      	ldrb	r2, [r3, #0]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007742:	b29b      	uxth	r3, r3
 8007744:	3b01      	subs	r3, #1
 8007746:	b29b      	uxth	r3, r3
 8007748:	687a      	ldr	r2, [r7, #4]
 800774a:	4619      	mov	r1, r3
 800774c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800774e:	2b00      	cmp	r3, #0
 8007750:	d10f      	bne.n	8007772 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	68da      	ldr	r2, [r3, #12]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007760:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	68da      	ldr	r2, [r3, #12]
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007770:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007772:	2300      	movs	r3, #0
 8007774:	e000      	b.n	8007778 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007776:	2302      	movs	r3, #2
  }
}
 8007778:	4618      	mov	r0, r3
 800777a:	3714      	adds	r7, #20
 800777c:	46bd      	mov	sp, r7
 800777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007782:	4770      	bx	lr

08007784 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b082      	sub	sp, #8
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	68da      	ldr	r2, [r3, #12]
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800779a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2220      	movs	r2, #32
 80077a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f7ff ff51 	bl	800764c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80077aa:	2300      	movs	r3, #0
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3708      	adds	r7, #8
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}

080077b4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b084      	sub	sp, #16
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80077c2:	b2db      	uxtb	r3, r3
 80077c4:	2b22      	cmp	r3, #34	; 0x22
 80077c6:	d171      	bne.n	80078ac <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	689b      	ldr	r3, [r3, #8]
 80077cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077d0:	d123      	bne.n	800781a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077d6:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	691b      	ldr	r3, [r3, #16]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d10e      	bne.n	80077fe <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	685b      	ldr	r3, [r3, #4]
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077ec:	b29a      	uxth	r2, r3
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077f6:	1c9a      	adds	r2, r3, #2
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	629a      	str	r2, [r3, #40]	; 0x28
 80077fc:	e029      	b.n	8007852 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	b29b      	uxth	r3, r3
 8007806:	b2db      	uxtb	r3, r3
 8007808:	b29a      	uxth	r2, r3
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007812:	1c5a      	adds	r2, r3, #1
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	629a      	str	r2, [r3, #40]	; 0x28
 8007818:	e01b      	b.n	8007852 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	691b      	ldr	r3, [r3, #16]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d10a      	bne.n	8007838 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	6858      	ldr	r0, [r3, #4]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800782c:	1c59      	adds	r1, r3, #1
 800782e:	687a      	ldr	r2, [r7, #4]
 8007830:	6291      	str	r1, [r2, #40]	; 0x28
 8007832:	b2c2      	uxtb	r2, r0
 8007834:	701a      	strb	r2, [r3, #0]
 8007836:	e00c      	b.n	8007852 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	b2da      	uxtb	r2, r3
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007844:	1c58      	adds	r0, r3, #1
 8007846:	6879      	ldr	r1, [r7, #4]
 8007848:	6288      	str	r0, [r1, #40]	; 0x28
 800784a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800784e:	b2d2      	uxtb	r2, r2
 8007850:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007856:	b29b      	uxth	r3, r3
 8007858:	3b01      	subs	r3, #1
 800785a:	b29b      	uxth	r3, r3
 800785c:	687a      	ldr	r2, [r7, #4]
 800785e:	4619      	mov	r1, r3
 8007860:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007862:	2b00      	cmp	r3, #0
 8007864:	d120      	bne.n	80078a8 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	68da      	ldr	r2, [r3, #12]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f022 0220 	bic.w	r2, r2, #32
 8007874:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	68da      	ldr	r2, [r3, #12]
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007884:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	695a      	ldr	r2, [r3, #20]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f022 0201 	bic.w	r2, r2, #1
 8007894:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2220      	movs	r2, #32
 800789a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f7fa f9d2 	bl	8001c48 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80078a4:	2300      	movs	r3, #0
 80078a6:	e002      	b.n	80078ae <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80078a8:	2300      	movs	r3, #0
 80078aa:	e000      	b.n	80078ae <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80078ac:	2302      	movs	r3, #2
  }
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3710      	adds	r7, #16
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}
	...

080078b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80078b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078bc:	b085      	sub	sp, #20
 80078be:	af00      	add	r7, sp, #0
 80078c0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	691b      	ldr	r3, [r3, #16]
 80078c8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	68da      	ldr	r2, [r3, #12]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	430a      	orrs	r2, r1
 80078d6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	689a      	ldr	r2, [r3, #8]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	691b      	ldr	r3, [r3, #16]
 80078e0:	431a      	orrs	r2, r3
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	695b      	ldr	r3, [r3, #20]
 80078e6:	431a      	orrs	r2, r3
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	69db      	ldr	r3, [r3, #28]
 80078ec:	4313      	orrs	r3, r2
 80078ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	68db      	ldr	r3, [r3, #12]
 80078f6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80078fa:	f023 030c 	bic.w	r3, r3, #12
 80078fe:	687a      	ldr	r2, [r7, #4]
 8007900:	6812      	ldr	r2, [r2, #0]
 8007902:	68f9      	ldr	r1, [r7, #12]
 8007904:	430b      	orrs	r3, r1
 8007906:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	695b      	ldr	r3, [r3, #20]
 800790e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	699a      	ldr	r2, [r3, #24]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	430a      	orrs	r2, r1
 800791c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	69db      	ldr	r3, [r3, #28]
 8007922:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007926:	f040 818b 	bne.w	8007c40 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4ac1      	ldr	r2, [pc, #772]	; (8007c34 <UART_SetConfig+0x37c>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d005      	beq.n	8007940 <UART_SetConfig+0x88>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4abf      	ldr	r2, [pc, #764]	; (8007c38 <UART_SetConfig+0x380>)
 800793a:	4293      	cmp	r3, r2
 800793c:	f040 80bd 	bne.w	8007aba <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007940:	f7fe fafa 	bl	8005f38 <HAL_RCC_GetPCLK2Freq>
 8007944:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	461d      	mov	r5, r3
 800794a:	f04f 0600 	mov.w	r6, #0
 800794e:	46a8      	mov	r8, r5
 8007950:	46b1      	mov	r9, r6
 8007952:	eb18 0308 	adds.w	r3, r8, r8
 8007956:	eb49 0409 	adc.w	r4, r9, r9
 800795a:	4698      	mov	r8, r3
 800795c:	46a1      	mov	r9, r4
 800795e:	eb18 0805 	adds.w	r8, r8, r5
 8007962:	eb49 0906 	adc.w	r9, r9, r6
 8007966:	f04f 0100 	mov.w	r1, #0
 800796a:	f04f 0200 	mov.w	r2, #0
 800796e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007972:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007976:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800797a:	4688      	mov	r8, r1
 800797c:	4691      	mov	r9, r2
 800797e:	eb18 0005 	adds.w	r0, r8, r5
 8007982:	eb49 0106 	adc.w	r1, r9, r6
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	461d      	mov	r5, r3
 800798c:	f04f 0600 	mov.w	r6, #0
 8007990:	196b      	adds	r3, r5, r5
 8007992:	eb46 0406 	adc.w	r4, r6, r6
 8007996:	461a      	mov	r2, r3
 8007998:	4623      	mov	r3, r4
 800799a:	f7f9 f847 	bl	8000a2c <__aeabi_uldivmod>
 800799e:	4603      	mov	r3, r0
 80079a0:	460c      	mov	r4, r1
 80079a2:	461a      	mov	r2, r3
 80079a4:	4ba5      	ldr	r3, [pc, #660]	; (8007c3c <UART_SetConfig+0x384>)
 80079a6:	fba3 2302 	umull	r2, r3, r3, r2
 80079aa:	095b      	lsrs	r3, r3, #5
 80079ac:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	461d      	mov	r5, r3
 80079b4:	f04f 0600 	mov.w	r6, #0
 80079b8:	46a9      	mov	r9, r5
 80079ba:	46b2      	mov	sl, r6
 80079bc:	eb19 0309 	adds.w	r3, r9, r9
 80079c0:	eb4a 040a 	adc.w	r4, sl, sl
 80079c4:	4699      	mov	r9, r3
 80079c6:	46a2      	mov	sl, r4
 80079c8:	eb19 0905 	adds.w	r9, r9, r5
 80079cc:	eb4a 0a06 	adc.w	sl, sl, r6
 80079d0:	f04f 0100 	mov.w	r1, #0
 80079d4:	f04f 0200 	mov.w	r2, #0
 80079d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80079dc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80079e0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80079e4:	4689      	mov	r9, r1
 80079e6:	4692      	mov	sl, r2
 80079e8:	eb19 0005 	adds.w	r0, r9, r5
 80079ec:	eb4a 0106 	adc.w	r1, sl, r6
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	461d      	mov	r5, r3
 80079f6:	f04f 0600 	mov.w	r6, #0
 80079fa:	196b      	adds	r3, r5, r5
 80079fc:	eb46 0406 	adc.w	r4, r6, r6
 8007a00:	461a      	mov	r2, r3
 8007a02:	4623      	mov	r3, r4
 8007a04:	f7f9 f812 	bl	8000a2c <__aeabi_uldivmod>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	460c      	mov	r4, r1
 8007a0c:	461a      	mov	r2, r3
 8007a0e:	4b8b      	ldr	r3, [pc, #556]	; (8007c3c <UART_SetConfig+0x384>)
 8007a10:	fba3 1302 	umull	r1, r3, r3, r2
 8007a14:	095b      	lsrs	r3, r3, #5
 8007a16:	2164      	movs	r1, #100	; 0x64
 8007a18:	fb01 f303 	mul.w	r3, r1, r3
 8007a1c:	1ad3      	subs	r3, r2, r3
 8007a1e:	00db      	lsls	r3, r3, #3
 8007a20:	3332      	adds	r3, #50	; 0x32
 8007a22:	4a86      	ldr	r2, [pc, #536]	; (8007c3c <UART_SetConfig+0x384>)
 8007a24:	fba2 2303 	umull	r2, r3, r2, r3
 8007a28:	095b      	lsrs	r3, r3, #5
 8007a2a:	005b      	lsls	r3, r3, #1
 8007a2c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007a30:	4498      	add	r8, r3
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	461d      	mov	r5, r3
 8007a36:	f04f 0600 	mov.w	r6, #0
 8007a3a:	46a9      	mov	r9, r5
 8007a3c:	46b2      	mov	sl, r6
 8007a3e:	eb19 0309 	adds.w	r3, r9, r9
 8007a42:	eb4a 040a 	adc.w	r4, sl, sl
 8007a46:	4699      	mov	r9, r3
 8007a48:	46a2      	mov	sl, r4
 8007a4a:	eb19 0905 	adds.w	r9, r9, r5
 8007a4e:	eb4a 0a06 	adc.w	sl, sl, r6
 8007a52:	f04f 0100 	mov.w	r1, #0
 8007a56:	f04f 0200 	mov.w	r2, #0
 8007a5a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007a5e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007a62:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007a66:	4689      	mov	r9, r1
 8007a68:	4692      	mov	sl, r2
 8007a6a:	eb19 0005 	adds.w	r0, r9, r5
 8007a6e:	eb4a 0106 	adc.w	r1, sl, r6
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	685b      	ldr	r3, [r3, #4]
 8007a76:	461d      	mov	r5, r3
 8007a78:	f04f 0600 	mov.w	r6, #0
 8007a7c:	196b      	adds	r3, r5, r5
 8007a7e:	eb46 0406 	adc.w	r4, r6, r6
 8007a82:	461a      	mov	r2, r3
 8007a84:	4623      	mov	r3, r4
 8007a86:	f7f8 ffd1 	bl	8000a2c <__aeabi_uldivmod>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	460c      	mov	r4, r1
 8007a8e:	461a      	mov	r2, r3
 8007a90:	4b6a      	ldr	r3, [pc, #424]	; (8007c3c <UART_SetConfig+0x384>)
 8007a92:	fba3 1302 	umull	r1, r3, r3, r2
 8007a96:	095b      	lsrs	r3, r3, #5
 8007a98:	2164      	movs	r1, #100	; 0x64
 8007a9a:	fb01 f303 	mul.w	r3, r1, r3
 8007a9e:	1ad3      	subs	r3, r2, r3
 8007aa0:	00db      	lsls	r3, r3, #3
 8007aa2:	3332      	adds	r3, #50	; 0x32
 8007aa4:	4a65      	ldr	r2, [pc, #404]	; (8007c3c <UART_SetConfig+0x384>)
 8007aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8007aaa:	095b      	lsrs	r3, r3, #5
 8007aac:	f003 0207 	and.w	r2, r3, #7
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4442      	add	r2, r8
 8007ab6:	609a      	str	r2, [r3, #8]
 8007ab8:	e26f      	b.n	8007f9a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007aba:	f7fe fa29 	bl	8005f10 <HAL_RCC_GetPCLK1Freq>
 8007abe:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	461d      	mov	r5, r3
 8007ac4:	f04f 0600 	mov.w	r6, #0
 8007ac8:	46a8      	mov	r8, r5
 8007aca:	46b1      	mov	r9, r6
 8007acc:	eb18 0308 	adds.w	r3, r8, r8
 8007ad0:	eb49 0409 	adc.w	r4, r9, r9
 8007ad4:	4698      	mov	r8, r3
 8007ad6:	46a1      	mov	r9, r4
 8007ad8:	eb18 0805 	adds.w	r8, r8, r5
 8007adc:	eb49 0906 	adc.w	r9, r9, r6
 8007ae0:	f04f 0100 	mov.w	r1, #0
 8007ae4:	f04f 0200 	mov.w	r2, #0
 8007ae8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007aec:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007af0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007af4:	4688      	mov	r8, r1
 8007af6:	4691      	mov	r9, r2
 8007af8:	eb18 0005 	adds.w	r0, r8, r5
 8007afc:	eb49 0106 	adc.w	r1, r9, r6
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	685b      	ldr	r3, [r3, #4]
 8007b04:	461d      	mov	r5, r3
 8007b06:	f04f 0600 	mov.w	r6, #0
 8007b0a:	196b      	adds	r3, r5, r5
 8007b0c:	eb46 0406 	adc.w	r4, r6, r6
 8007b10:	461a      	mov	r2, r3
 8007b12:	4623      	mov	r3, r4
 8007b14:	f7f8 ff8a 	bl	8000a2c <__aeabi_uldivmod>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	460c      	mov	r4, r1
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	4b47      	ldr	r3, [pc, #284]	; (8007c3c <UART_SetConfig+0x384>)
 8007b20:	fba3 2302 	umull	r2, r3, r3, r2
 8007b24:	095b      	lsrs	r3, r3, #5
 8007b26:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	461d      	mov	r5, r3
 8007b2e:	f04f 0600 	mov.w	r6, #0
 8007b32:	46a9      	mov	r9, r5
 8007b34:	46b2      	mov	sl, r6
 8007b36:	eb19 0309 	adds.w	r3, r9, r9
 8007b3a:	eb4a 040a 	adc.w	r4, sl, sl
 8007b3e:	4699      	mov	r9, r3
 8007b40:	46a2      	mov	sl, r4
 8007b42:	eb19 0905 	adds.w	r9, r9, r5
 8007b46:	eb4a 0a06 	adc.w	sl, sl, r6
 8007b4a:	f04f 0100 	mov.w	r1, #0
 8007b4e:	f04f 0200 	mov.w	r2, #0
 8007b52:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007b56:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007b5a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007b5e:	4689      	mov	r9, r1
 8007b60:	4692      	mov	sl, r2
 8007b62:	eb19 0005 	adds.w	r0, r9, r5
 8007b66:	eb4a 0106 	adc.w	r1, sl, r6
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	461d      	mov	r5, r3
 8007b70:	f04f 0600 	mov.w	r6, #0
 8007b74:	196b      	adds	r3, r5, r5
 8007b76:	eb46 0406 	adc.w	r4, r6, r6
 8007b7a:	461a      	mov	r2, r3
 8007b7c:	4623      	mov	r3, r4
 8007b7e:	f7f8 ff55 	bl	8000a2c <__aeabi_uldivmod>
 8007b82:	4603      	mov	r3, r0
 8007b84:	460c      	mov	r4, r1
 8007b86:	461a      	mov	r2, r3
 8007b88:	4b2c      	ldr	r3, [pc, #176]	; (8007c3c <UART_SetConfig+0x384>)
 8007b8a:	fba3 1302 	umull	r1, r3, r3, r2
 8007b8e:	095b      	lsrs	r3, r3, #5
 8007b90:	2164      	movs	r1, #100	; 0x64
 8007b92:	fb01 f303 	mul.w	r3, r1, r3
 8007b96:	1ad3      	subs	r3, r2, r3
 8007b98:	00db      	lsls	r3, r3, #3
 8007b9a:	3332      	adds	r3, #50	; 0x32
 8007b9c:	4a27      	ldr	r2, [pc, #156]	; (8007c3c <UART_SetConfig+0x384>)
 8007b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8007ba2:	095b      	lsrs	r3, r3, #5
 8007ba4:	005b      	lsls	r3, r3, #1
 8007ba6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007baa:	4498      	add	r8, r3
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	461d      	mov	r5, r3
 8007bb0:	f04f 0600 	mov.w	r6, #0
 8007bb4:	46a9      	mov	r9, r5
 8007bb6:	46b2      	mov	sl, r6
 8007bb8:	eb19 0309 	adds.w	r3, r9, r9
 8007bbc:	eb4a 040a 	adc.w	r4, sl, sl
 8007bc0:	4699      	mov	r9, r3
 8007bc2:	46a2      	mov	sl, r4
 8007bc4:	eb19 0905 	adds.w	r9, r9, r5
 8007bc8:	eb4a 0a06 	adc.w	sl, sl, r6
 8007bcc:	f04f 0100 	mov.w	r1, #0
 8007bd0:	f04f 0200 	mov.w	r2, #0
 8007bd4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007bd8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007bdc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007be0:	4689      	mov	r9, r1
 8007be2:	4692      	mov	sl, r2
 8007be4:	eb19 0005 	adds.w	r0, r9, r5
 8007be8:	eb4a 0106 	adc.w	r1, sl, r6
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	461d      	mov	r5, r3
 8007bf2:	f04f 0600 	mov.w	r6, #0
 8007bf6:	196b      	adds	r3, r5, r5
 8007bf8:	eb46 0406 	adc.w	r4, r6, r6
 8007bfc:	461a      	mov	r2, r3
 8007bfe:	4623      	mov	r3, r4
 8007c00:	f7f8 ff14 	bl	8000a2c <__aeabi_uldivmod>
 8007c04:	4603      	mov	r3, r0
 8007c06:	460c      	mov	r4, r1
 8007c08:	461a      	mov	r2, r3
 8007c0a:	4b0c      	ldr	r3, [pc, #48]	; (8007c3c <UART_SetConfig+0x384>)
 8007c0c:	fba3 1302 	umull	r1, r3, r3, r2
 8007c10:	095b      	lsrs	r3, r3, #5
 8007c12:	2164      	movs	r1, #100	; 0x64
 8007c14:	fb01 f303 	mul.w	r3, r1, r3
 8007c18:	1ad3      	subs	r3, r2, r3
 8007c1a:	00db      	lsls	r3, r3, #3
 8007c1c:	3332      	adds	r3, #50	; 0x32
 8007c1e:	4a07      	ldr	r2, [pc, #28]	; (8007c3c <UART_SetConfig+0x384>)
 8007c20:	fba2 2303 	umull	r2, r3, r2, r3
 8007c24:	095b      	lsrs	r3, r3, #5
 8007c26:	f003 0207 	and.w	r2, r3, #7
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4442      	add	r2, r8
 8007c30:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007c32:	e1b2      	b.n	8007f9a <UART_SetConfig+0x6e2>
 8007c34:	40011000 	.word	0x40011000
 8007c38:	40011400 	.word	0x40011400
 8007c3c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4ad7      	ldr	r2, [pc, #860]	; (8007fa4 <UART_SetConfig+0x6ec>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d005      	beq.n	8007c56 <UART_SetConfig+0x39e>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4ad6      	ldr	r2, [pc, #856]	; (8007fa8 <UART_SetConfig+0x6f0>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	f040 80d1 	bne.w	8007df8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007c56:	f7fe f96f 	bl	8005f38 <HAL_RCC_GetPCLK2Freq>
 8007c5a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	469a      	mov	sl, r3
 8007c60:	f04f 0b00 	mov.w	fp, #0
 8007c64:	46d0      	mov	r8, sl
 8007c66:	46d9      	mov	r9, fp
 8007c68:	eb18 0308 	adds.w	r3, r8, r8
 8007c6c:	eb49 0409 	adc.w	r4, r9, r9
 8007c70:	4698      	mov	r8, r3
 8007c72:	46a1      	mov	r9, r4
 8007c74:	eb18 080a 	adds.w	r8, r8, sl
 8007c78:	eb49 090b 	adc.w	r9, r9, fp
 8007c7c:	f04f 0100 	mov.w	r1, #0
 8007c80:	f04f 0200 	mov.w	r2, #0
 8007c84:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007c88:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007c8c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007c90:	4688      	mov	r8, r1
 8007c92:	4691      	mov	r9, r2
 8007c94:	eb1a 0508 	adds.w	r5, sl, r8
 8007c98:	eb4b 0609 	adc.w	r6, fp, r9
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	4619      	mov	r1, r3
 8007ca2:	f04f 0200 	mov.w	r2, #0
 8007ca6:	f04f 0300 	mov.w	r3, #0
 8007caa:	f04f 0400 	mov.w	r4, #0
 8007cae:	0094      	lsls	r4, r2, #2
 8007cb0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007cb4:	008b      	lsls	r3, r1, #2
 8007cb6:	461a      	mov	r2, r3
 8007cb8:	4623      	mov	r3, r4
 8007cba:	4628      	mov	r0, r5
 8007cbc:	4631      	mov	r1, r6
 8007cbe:	f7f8 feb5 	bl	8000a2c <__aeabi_uldivmod>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	460c      	mov	r4, r1
 8007cc6:	461a      	mov	r2, r3
 8007cc8:	4bb8      	ldr	r3, [pc, #736]	; (8007fac <UART_SetConfig+0x6f4>)
 8007cca:	fba3 2302 	umull	r2, r3, r3, r2
 8007cce:	095b      	lsrs	r3, r3, #5
 8007cd0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	469b      	mov	fp, r3
 8007cd8:	f04f 0c00 	mov.w	ip, #0
 8007cdc:	46d9      	mov	r9, fp
 8007cde:	46e2      	mov	sl, ip
 8007ce0:	eb19 0309 	adds.w	r3, r9, r9
 8007ce4:	eb4a 040a 	adc.w	r4, sl, sl
 8007ce8:	4699      	mov	r9, r3
 8007cea:	46a2      	mov	sl, r4
 8007cec:	eb19 090b 	adds.w	r9, r9, fp
 8007cf0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007cf4:	f04f 0100 	mov.w	r1, #0
 8007cf8:	f04f 0200 	mov.w	r2, #0
 8007cfc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007d00:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007d04:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007d08:	4689      	mov	r9, r1
 8007d0a:	4692      	mov	sl, r2
 8007d0c:	eb1b 0509 	adds.w	r5, fp, r9
 8007d10:	eb4c 060a 	adc.w	r6, ip, sl
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	4619      	mov	r1, r3
 8007d1a:	f04f 0200 	mov.w	r2, #0
 8007d1e:	f04f 0300 	mov.w	r3, #0
 8007d22:	f04f 0400 	mov.w	r4, #0
 8007d26:	0094      	lsls	r4, r2, #2
 8007d28:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007d2c:	008b      	lsls	r3, r1, #2
 8007d2e:	461a      	mov	r2, r3
 8007d30:	4623      	mov	r3, r4
 8007d32:	4628      	mov	r0, r5
 8007d34:	4631      	mov	r1, r6
 8007d36:	f7f8 fe79 	bl	8000a2c <__aeabi_uldivmod>
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	460c      	mov	r4, r1
 8007d3e:	461a      	mov	r2, r3
 8007d40:	4b9a      	ldr	r3, [pc, #616]	; (8007fac <UART_SetConfig+0x6f4>)
 8007d42:	fba3 1302 	umull	r1, r3, r3, r2
 8007d46:	095b      	lsrs	r3, r3, #5
 8007d48:	2164      	movs	r1, #100	; 0x64
 8007d4a:	fb01 f303 	mul.w	r3, r1, r3
 8007d4e:	1ad3      	subs	r3, r2, r3
 8007d50:	011b      	lsls	r3, r3, #4
 8007d52:	3332      	adds	r3, #50	; 0x32
 8007d54:	4a95      	ldr	r2, [pc, #596]	; (8007fac <UART_SetConfig+0x6f4>)
 8007d56:	fba2 2303 	umull	r2, r3, r2, r3
 8007d5a:	095b      	lsrs	r3, r3, #5
 8007d5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007d60:	4498      	add	r8, r3
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	469b      	mov	fp, r3
 8007d66:	f04f 0c00 	mov.w	ip, #0
 8007d6a:	46d9      	mov	r9, fp
 8007d6c:	46e2      	mov	sl, ip
 8007d6e:	eb19 0309 	adds.w	r3, r9, r9
 8007d72:	eb4a 040a 	adc.w	r4, sl, sl
 8007d76:	4699      	mov	r9, r3
 8007d78:	46a2      	mov	sl, r4
 8007d7a:	eb19 090b 	adds.w	r9, r9, fp
 8007d7e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007d82:	f04f 0100 	mov.w	r1, #0
 8007d86:	f04f 0200 	mov.w	r2, #0
 8007d8a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007d8e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007d92:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007d96:	4689      	mov	r9, r1
 8007d98:	4692      	mov	sl, r2
 8007d9a:	eb1b 0509 	adds.w	r5, fp, r9
 8007d9e:	eb4c 060a 	adc.w	r6, ip, sl
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	685b      	ldr	r3, [r3, #4]
 8007da6:	4619      	mov	r1, r3
 8007da8:	f04f 0200 	mov.w	r2, #0
 8007dac:	f04f 0300 	mov.w	r3, #0
 8007db0:	f04f 0400 	mov.w	r4, #0
 8007db4:	0094      	lsls	r4, r2, #2
 8007db6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007dba:	008b      	lsls	r3, r1, #2
 8007dbc:	461a      	mov	r2, r3
 8007dbe:	4623      	mov	r3, r4
 8007dc0:	4628      	mov	r0, r5
 8007dc2:	4631      	mov	r1, r6
 8007dc4:	f7f8 fe32 	bl	8000a2c <__aeabi_uldivmod>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	460c      	mov	r4, r1
 8007dcc:	461a      	mov	r2, r3
 8007dce:	4b77      	ldr	r3, [pc, #476]	; (8007fac <UART_SetConfig+0x6f4>)
 8007dd0:	fba3 1302 	umull	r1, r3, r3, r2
 8007dd4:	095b      	lsrs	r3, r3, #5
 8007dd6:	2164      	movs	r1, #100	; 0x64
 8007dd8:	fb01 f303 	mul.w	r3, r1, r3
 8007ddc:	1ad3      	subs	r3, r2, r3
 8007dde:	011b      	lsls	r3, r3, #4
 8007de0:	3332      	adds	r3, #50	; 0x32
 8007de2:	4a72      	ldr	r2, [pc, #456]	; (8007fac <UART_SetConfig+0x6f4>)
 8007de4:	fba2 2303 	umull	r2, r3, r2, r3
 8007de8:	095b      	lsrs	r3, r3, #5
 8007dea:	f003 020f 	and.w	r2, r3, #15
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	4442      	add	r2, r8
 8007df4:	609a      	str	r2, [r3, #8]
 8007df6:	e0d0      	b.n	8007f9a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007df8:	f7fe f88a 	bl	8005f10 <HAL_RCC_GetPCLK1Freq>
 8007dfc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	469a      	mov	sl, r3
 8007e02:	f04f 0b00 	mov.w	fp, #0
 8007e06:	46d0      	mov	r8, sl
 8007e08:	46d9      	mov	r9, fp
 8007e0a:	eb18 0308 	adds.w	r3, r8, r8
 8007e0e:	eb49 0409 	adc.w	r4, r9, r9
 8007e12:	4698      	mov	r8, r3
 8007e14:	46a1      	mov	r9, r4
 8007e16:	eb18 080a 	adds.w	r8, r8, sl
 8007e1a:	eb49 090b 	adc.w	r9, r9, fp
 8007e1e:	f04f 0100 	mov.w	r1, #0
 8007e22:	f04f 0200 	mov.w	r2, #0
 8007e26:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007e2a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007e2e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007e32:	4688      	mov	r8, r1
 8007e34:	4691      	mov	r9, r2
 8007e36:	eb1a 0508 	adds.w	r5, sl, r8
 8007e3a:	eb4b 0609 	adc.w	r6, fp, r9
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	685b      	ldr	r3, [r3, #4]
 8007e42:	4619      	mov	r1, r3
 8007e44:	f04f 0200 	mov.w	r2, #0
 8007e48:	f04f 0300 	mov.w	r3, #0
 8007e4c:	f04f 0400 	mov.w	r4, #0
 8007e50:	0094      	lsls	r4, r2, #2
 8007e52:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007e56:	008b      	lsls	r3, r1, #2
 8007e58:	461a      	mov	r2, r3
 8007e5a:	4623      	mov	r3, r4
 8007e5c:	4628      	mov	r0, r5
 8007e5e:	4631      	mov	r1, r6
 8007e60:	f7f8 fde4 	bl	8000a2c <__aeabi_uldivmod>
 8007e64:	4603      	mov	r3, r0
 8007e66:	460c      	mov	r4, r1
 8007e68:	461a      	mov	r2, r3
 8007e6a:	4b50      	ldr	r3, [pc, #320]	; (8007fac <UART_SetConfig+0x6f4>)
 8007e6c:	fba3 2302 	umull	r2, r3, r3, r2
 8007e70:	095b      	lsrs	r3, r3, #5
 8007e72:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	469b      	mov	fp, r3
 8007e7a:	f04f 0c00 	mov.w	ip, #0
 8007e7e:	46d9      	mov	r9, fp
 8007e80:	46e2      	mov	sl, ip
 8007e82:	eb19 0309 	adds.w	r3, r9, r9
 8007e86:	eb4a 040a 	adc.w	r4, sl, sl
 8007e8a:	4699      	mov	r9, r3
 8007e8c:	46a2      	mov	sl, r4
 8007e8e:	eb19 090b 	adds.w	r9, r9, fp
 8007e92:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007e96:	f04f 0100 	mov.w	r1, #0
 8007e9a:	f04f 0200 	mov.w	r2, #0
 8007e9e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007ea2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007ea6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007eaa:	4689      	mov	r9, r1
 8007eac:	4692      	mov	sl, r2
 8007eae:	eb1b 0509 	adds.w	r5, fp, r9
 8007eb2:	eb4c 060a 	adc.w	r6, ip, sl
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	4619      	mov	r1, r3
 8007ebc:	f04f 0200 	mov.w	r2, #0
 8007ec0:	f04f 0300 	mov.w	r3, #0
 8007ec4:	f04f 0400 	mov.w	r4, #0
 8007ec8:	0094      	lsls	r4, r2, #2
 8007eca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007ece:	008b      	lsls	r3, r1, #2
 8007ed0:	461a      	mov	r2, r3
 8007ed2:	4623      	mov	r3, r4
 8007ed4:	4628      	mov	r0, r5
 8007ed6:	4631      	mov	r1, r6
 8007ed8:	f7f8 fda8 	bl	8000a2c <__aeabi_uldivmod>
 8007edc:	4603      	mov	r3, r0
 8007ede:	460c      	mov	r4, r1
 8007ee0:	461a      	mov	r2, r3
 8007ee2:	4b32      	ldr	r3, [pc, #200]	; (8007fac <UART_SetConfig+0x6f4>)
 8007ee4:	fba3 1302 	umull	r1, r3, r3, r2
 8007ee8:	095b      	lsrs	r3, r3, #5
 8007eea:	2164      	movs	r1, #100	; 0x64
 8007eec:	fb01 f303 	mul.w	r3, r1, r3
 8007ef0:	1ad3      	subs	r3, r2, r3
 8007ef2:	011b      	lsls	r3, r3, #4
 8007ef4:	3332      	adds	r3, #50	; 0x32
 8007ef6:	4a2d      	ldr	r2, [pc, #180]	; (8007fac <UART_SetConfig+0x6f4>)
 8007ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8007efc:	095b      	lsrs	r3, r3, #5
 8007efe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007f02:	4498      	add	r8, r3
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	469b      	mov	fp, r3
 8007f08:	f04f 0c00 	mov.w	ip, #0
 8007f0c:	46d9      	mov	r9, fp
 8007f0e:	46e2      	mov	sl, ip
 8007f10:	eb19 0309 	adds.w	r3, r9, r9
 8007f14:	eb4a 040a 	adc.w	r4, sl, sl
 8007f18:	4699      	mov	r9, r3
 8007f1a:	46a2      	mov	sl, r4
 8007f1c:	eb19 090b 	adds.w	r9, r9, fp
 8007f20:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007f24:	f04f 0100 	mov.w	r1, #0
 8007f28:	f04f 0200 	mov.w	r2, #0
 8007f2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007f30:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007f34:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007f38:	4689      	mov	r9, r1
 8007f3a:	4692      	mov	sl, r2
 8007f3c:	eb1b 0509 	adds.w	r5, fp, r9
 8007f40:	eb4c 060a 	adc.w	r6, ip, sl
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	685b      	ldr	r3, [r3, #4]
 8007f48:	4619      	mov	r1, r3
 8007f4a:	f04f 0200 	mov.w	r2, #0
 8007f4e:	f04f 0300 	mov.w	r3, #0
 8007f52:	f04f 0400 	mov.w	r4, #0
 8007f56:	0094      	lsls	r4, r2, #2
 8007f58:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007f5c:	008b      	lsls	r3, r1, #2
 8007f5e:	461a      	mov	r2, r3
 8007f60:	4623      	mov	r3, r4
 8007f62:	4628      	mov	r0, r5
 8007f64:	4631      	mov	r1, r6
 8007f66:	f7f8 fd61 	bl	8000a2c <__aeabi_uldivmod>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	460c      	mov	r4, r1
 8007f6e:	461a      	mov	r2, r3
 8007f70:	4b0e      	ldr	r3, [pc, #56]	; (8007fac <UART_SetConfig+0x6f4>)
 8007f72:	fba3 1302 	umull	r1, r3, r3, r2
 8007f76:	095b      	lsrs	r3, r3, #5
 8007f78:	2164      	movs	r1, #100	; 0x64
 8007f7a:	fb01 f303 	mul.w	r3, r1, r3
 8007f7e:	1ad3      	subs	r3, r2, r3
 8007f80:	011b      	lsls	r3, r3, #4
 8007f82:	3332      	adds	r3, #50	; 0x32
 8007f84:	4a09      	ldr	r2, [pc, #36]	; (8007fac <UART_SetConfig+0x6f4>)
 8007f86:	fba2 2303 	umull	r2, r3, r2, r3
 8007f8a:	095b      	lsrs	r3, r3, #5
 8007f8c:	f003 020f 	and.w	r2, r3, #15
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4442      	add	r2, r8
 8007f96:	609a      	str	r2, [r3, #8]
}
 8007f98:	e7ff      	b.n	8007f9a <UART_SetConfig+0x6e2>
 8007f9a:	bf00      	nop
 8007f9c:	3714      	adds	r7, #20
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fa4:	40011000 	.word	0x40011000
 8007fa8:	40011400 	.word	0x40011400
 8007fac:	51eb851f 	.word	0x51eb851f

08007fb0 <__libc_init_array>:
 8007fb0:	b570      	push	{r4, r5, r6, lr}
 8007fb2:	4e0d      	ldr	r6, [pc, #52]	; (8007fe8 <__libc_init_array+0x38>)
 8007fb4:	4c0d      	ldr	r4, [pc, #52]	; (8007fec <__libc_init_array+0x3c>)
 8007fb6:	1ba4      	subs	r4, r4, r6
 8007fb8:	10a4      	asrs	r4, r4, #2
 8007fba:	2500      	movs	r5, #0
 8007fbc:	42a5      	cmp	r5, r4
 8007fbe:	d109      	bne.n	8007fd4 <__libc_init_array+0x24>
 8007fc0:	4e0b      	ldr	r6, [pc, #44]	; (8007ff0 <__libc_init_array+0x40>)
 8007fc2:	4c0c      	ldr	r4, [pc, #48]	; (8007ff4 <__libc_init_array+0x44>)
 8007fc4:	f000 ff30 	bl	8008e28 <_init>
 8007fc8:	1ba4      	subs	r4, r4, r6
 8007fca:	10a4      	asrs	r4, r4, #2
 8007fcc:	2500      	movs	r5, #0
 8007fce:	42a5      	cmp	r5, r4
 8007fd0:	d105      	bne.n	8007fde <__libc_init_array+0x2e>
 8007fd2:	bd70      	pop	{r4, r5, r6, pc}
 8007fd4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007fd8:	4798      	blx	r3
 8007fda:	3501      	adds	r5, #1
 8007fdc:	e7ee      	b.n	8007fbc <__libc_init_array+0xc>
 8007fde:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007fe2:	4798      	blx	r3
 8007fe4:	3501      	adds	r5, #1
 8007fe6:	e7f2      	b.n	8007fce <__libc_init_array+0x1e>
 8007fe8:	08009278 	.word	0x08009278
 8007fec:	08009278 	.word	0x08009278
 8007ff0:	08009278 	.word	0x08009278
 8007ff4:	0800927c 	.word	0x0800927c

08007ff8 <memset>:
 8007ff8:	4402      	add	r2, r0
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d100      	bne.n	8008002 <memset+0xa>
 8008000:	4770      	bx	lr
 8008002:	f803 1b01 	strb.w	r1, [r3], #1
 8008006:	e7f9      	b.n	8007ffc <memset+0x4>

08008008 <cosf>:
 8008008:	ee10 3a10 	vmov	r3, s0
 800800c:	b507      	push	{r0, r1, r2, lr}
 800800e:	4a1c      	ldr	r2, [pc, #112]	; (8008080 <cosf+0x78>)
 8008010:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008014:	4293      	cmp	r3, r2
 8008016:	dc04      	bgt.n	8008022 <cosf+0x1a>
 8008018:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8008084 <cosf+0x7c>
 800801c:	f000 fa52 	bl	80084c4 <__kernel_cosf>
 8008020:	e004      	b.n	800802c <cosf+0x24>
 8008022:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008026:	db04      	blt.n	8008032 <cosf+0x2a>
 8008028:	ee30 0a40 	vsub.f32	s0, s0, s0
 800802c:	b003      	add	sp, #12
 800802e:	f85d fb04 	ldr.w	pc, [sp], #4
 8008032:	4668      	mov	r0, sp
 8008034:	f000 f91a 	bl	800826c <__ieee754_rem_pio2f>
 8008038:	f000 0003 	and.w	r0, r0, #3
 800803c:	2801      	cmp	r0, #1
 800803e:	d007      	beq.n	8008050 <cosf+0x48>
 8008040:	2802      	cmp	r0, #2
 8008042:	d00e      	beq.n	8008062 <cosf+0x5a>
 8008044:	b9a0      	cbnz	r0, 8008070 <cosf+0x68>
 8008046:	eddd 0a01 	vldr	s1, [sp, #4]
 800804a:	ed9d 0a00 	vldr	s0, [sp]
 800804e:	e7e5      	b.n	800801c <cosf+0x14>
 8008050:	eddd 0a01 	vldr	s1, [sp, #4]
 8008054:	ed9d 0a00 	vldr	s0, [sp]
 8008058:	f000 fd14 	bl	8008a84 <__kernel_sinf>
 800805c:	eeb1 0a40 	vneg.f32	s0, s0
 8008060:	e7e4      	b.n	800802c <cosf+0x24>
 8008062:	eddd 0a01 	vldr	s1, [sp, #4]
 8008066:	ed9d 0a00 	vldr	s0, [sp]
 800806a:	f000 fa2b 	bl	80084c4 <__kernel_cosf>
 800806e:	e7f5      	b.n	800805c <cosf+0x54>
 8008070:	2001      	movs	r0, #1
 8008072:	eddd 0a01 	vldr	s1, [sp, #4]
 8008076:	ed9d 0a00 	vldr	s0, [sp]
 800807a:	f000 fd03 	bl	8008a84 <__kernel_sinf>
 800807e:	e7d5      	b.n	800802c <cosf+0x24>
 8008080:	3f490fd8 	.word	0x3f490fd8
 8008084:	00000000 	.word	0x00000000

08008088 <sinf>:
 8008088:	ee10 3a10 	vmov	r3, s0
 800808c:	b507      	push	{r0, r1, r2, lr}
 800808e:	4a1d      	ldr	r2, [pc, #116]	; (8008104 <sinf+0x7c>)
 8008090:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008094:	4293      	cmp	r3, r2
 8008096:	dc05      	bgt.n	80080a4 <sinf+0x1c>
 8008098:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8008108 <sinf+0x80>
 800809c:	2000      	movs	r0, #0
 800809e:	f000 fcf1 	bl	8008a84 <__kernel_sinf>
 80080a2:	e004      	b.n	80080ae <sinf+0x26>
 80080a4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80080a8:	db04      	blt.n	80080b4 <sinf+0x2c>
 80080aa:	ee30 0a40 	vsub.f32	s0, s0, s0
 80080ae:	b003      	add	sp, #12
 80080b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80080b4:	4668      	mov	r0, sp
 80080b6:	f000 f8d9 	bl	800826c <__ieee754_rem_pio2f>
 80080ba:	f000 0003 	and.w	r0, r0, #3
 80080be:	2801      	cmp	r0, #1
 80080c0:	d008      	beq.n	80080d4 <sinf+0x4c>
 80080c2:	2802      	cmp	r0, #2
 80080c4:	d00d      	beq.n	80080e2 <sinf+0x5a>
 80080c6:	b9b0      	cbnz	r0, 80080f6 <sinf+0x6e>
 80080c8:	2001      	movs	r0, #1
 80080ca:	eddd 0a01 	vldr	s1, [sp, #4]
 80080ce:	ed9d 0a00 	vldr	s0, [sp]
 80080d2:	e7e4      	b.n	800809e <sinf+0x16>
 80080d4:	eddd 0a01 	vldr	s1, [sp, #4]
 80080d8:	ed9d 0a00 	vldr	s0, [sp]
 80080dc:	f000 f9f2 	bl	80084c4 <__kernel_cosf>
 80080e0:	e7e5      	b.n	80080ae <sinf+0x26>
 80080e2:	2001      	movs	r0, #1
 80080e4:	eddd 0a01 	vldr	s1, [sp, #4]
 80080e8:	ed9d 0a00 	vldr	s0, [sp]
 80080ec:	f000 fcca 	bl	8008a84 <__kernel_sinf>
 80080f0:	eeb1 0a40 	vneg.f32	s0, s0
 80080f4:	e7db      	b.n	80080ae <sinf+0x26>
 80080f6:	eddd 0a01 	vldr	s1, [sp, #4]
 80080fa:	ed9d 0a00 	vldr	s0, [sp]
 80080fe:	f000 f9e1 	bl	80084c4 <__kernel_cosf>
 8008102:	e7f5      	b.n	80080f0 <sinf+0x68>
 8008104:	3f490fd8 	.word	0x3f490fd8
 8008108:	00000000 	.word	0x00000000

0800810c <atan2f>:
 800810c:	f000 b800 	b.w	8008110 <__ieee754_atan2f>

08008110 <__ieee754_atan2f>:
 8008110:	ee10 2a90 	vmov	r2, s1
 8008114:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8008118:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800811c:	b510      	push	{r4, lr}
 800811e:	eef0 7a40 	vmov.f32	s15, s0
 8008122:	dc06      	bgt.n	8008132 <__ieee754_atan2f+0x22>
 8008124:	ee10 0a10 	vmov	r0, s0
 8008128:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800812c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008130:	dd04      	ble.n	800813c <__ieee754_atan2f+0x2c>
 8008132:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8008136:	eeb0 0a67 	vmov.f32	s0, s15
 800813a:	bd10      	pop	{r4, pc}
 800813c:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8008140:	d103      	bne.n	800814a <__ieee754_atan2f+0x3a>
 8008142:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008146:	f000 bce5 	b.w	8008b14 <atanf>
 800814a:	1794      	asrs	r4, r2, #30
 800814c:	f004 0402 	and.w	r4, r4, #2
 8008150:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8008154:	b943      	cbnz	r3, 8008168 <__ieee754_atan2f+0x58>
 8008156:	2c02      	cmp	r4, #2
 8008158:	d06e      	beq.n	8008238 <__ieee754_atan2f+0x128>
 800815a:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8008240 <__ieee754_atan2f+0x130>
 800815e:	2c03      	cmp	r4, #3
 8008160:	bf08      	it	eq
 8008162:	eef0 7a47 	vmoveq.f32	s15, s14
 8008166:	e7e6      	b.n	8008136 <__ieee754_atan2f+0x26>
 8008168:	b941      	cbnz	r1, 800817c <__ieee754_atan2f+0x6c>
 800816a:	eddf 7a36 	vldr	s15, [pc, #216]	; 8008244 <__ieee754_atan2f+0x134>
 800816e:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8008248 <__ieee754_atan2f+0x138>
 8008172:	2800      	cmp	r0, #0
 8008174:	bfb8      	it	lt
 8008176:	eef0 7a47 	vmovlt.f32	s15, s14
 800817a:	e7dc      	b.n	8008136 <__ieee754_atan2f+0x26>
 800817c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8008180:	d122      	bne.n	80081c8 <__ieee754_atan2f+0xb8>
 8008182:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008186:	d112      	bne.n	80081ae <__ieee754_atan2f+0x9e>
 8008188:	2c02      	cmp	r4, #2
 800818a:	d00a      	beq.n	80081a2 <__ieee754_atan2f+0x92>
 800818c:	2c03      	cmp	r4, #3
 800818e:	d00b      	beq.n	80081a8 <__ieee754_atan2f+0x98>
 8008190:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800824c <__ieee754_atan2f+0x13c>
 8008194:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8008250 <__ieee754_atan2f+0x140>
 8008198:	2c01      	cmp	r4, #1
 800819a:	bf18      	it	ne
 800819c:	eef0 7a47 	vmovne.f32	s15, s14
 80081a0:	e7c9      	b.n	8008136 <__ieee754_atan2f+0x26>
 80081a2:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8008254 <__ieee754_atan2f+0x144>
 80081a6:	e7c6      	b.n	8008136 <__ieee754_atan2f+0x26>
 80081a8:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8008258 <__ieee754_atan2f+0x148>
 80081ac:	e7c3      	b.n	8008136 <__ieee754_atan2f+0x26>
 80081ae:	2c02      	cmp	r4, #2
 80081b0:	d042      	beq.n	8008238 <__ieee754_atan2f+0x128>
 80081b2:	2c03      	cmp	r4, #3
 80081b4:	d005      	beq.n	80081c2 <__ieee754_atan2f+0xb2>
 80081b6:	2c01      	cmp	r4, #1
 80081b8:	eddf 7a28 	vldr	s15, [pc, #160]	; 800825c <__ieee754_atan2f+0x14c>
 80081bc:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8008260 <__ieee754_atan2f+0x150>
 80081c0:	e7eb      	b.n	800819a <__ieee754_atan2f+0x8a>
 80081c2:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8008240 <__ieee754_atan2f+0x130>
 80081c6:	e7b6      	b.n	8008136 <__ieee754_atan2f+0x26>
 80081c8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80081cc:	d0cd      	beq.n	800816a <__ieee754_atan2f+0x5a>
 80081ce:	1a5b      	subs	r3, r3, r1
 80081d0:	15db      	asrs	r3, r3, #23
 80081d2:	2b3c      	cmp	r3, #60	; 0x3c
 80081d4:	dc1a      	bgt.n	800820c <__ieee754_atan2f+0xfc>
 80081d6:	2a00      	cmp	r2, #0
 80081d8:	da01      	bge.n	80081de <__ieee754_atan2f+0xce>
 80081da:	333c      	adds	r3, #60	; 0x3c
 80081dc:	db19      	blt.n	8008212 <__ieee754_atan2f+0x102>
 80081de:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80081e2:	f000 fd6b 	bl	8008cbc <fabsf>
 80081e6:	f000 fc95 	bl	8008b14 <atanf>
 80081ea:	eef0 7a40 	vmov.f32	s15, s0
 80081ee:	2c01      	cmp	r4, #1
 80081f0:	d012      	beq.n	8008218 <__ieee754_atan2f+0x108>
 80081f2:	2c02      	cmp	r4, #2
 80081f4:	d017      	beq.n	8008226 <__ieee754_atan2f+0x116>
 80081f6:	2c00      	cmp	r4, #0
 80081f8:	d09d      	beq.n	8008136 <__ieee754_atan2f+0x26>
 80081fa:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8008264 <__ieee754_atan2f+0x154>
 80081fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008202:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8008268 <__ieee754_atan2f+0x158>
 8008206:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800820a:	e794      	b.n	8008136 <__ieee754_atan2f+0x26>
 800820c:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8008244 <__ieee754_atan2f+0x134>
 8008210:	e7ed      	b.n	80081ee <__ieee754_atan2f+0xde>
 8008212:	eddf 7a13 	vldr	s15, [pc, #76]	; 8008260 <__ieee754_atan2f+0x150>
 8008216:	e7ea      	b.n	80081ee <__ieee754_atan2f+0xde>
 8008218:	ee17 3a90 	vmov	r3, s15
 800821c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008220:	ee07 3a90 	vmov	s15, r3
 8008224:	e787      	b.n	8008136 <__ieee754_atan2f+0x26>
 8008226:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8008264 <__ieee754_atan2f+0x154>
 800822a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800822e:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8008268 <__ieee754_atan2f+0x158>
 8008232:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008236:	e77e      	b.n	8008136 <__ieee754_atan2f+0x26>
 8008238:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8008268 <__ieee754_atan2f+0x158>
 800823c:	e77b      	b.n	8008136 <__ieee754_atan2f+0x26>
 800823e:	bf00      	nop
 8008240:	c0490fdb 	.word	0xc0490fdb
 8008244:	3fc90fdb 	.word	0x3fc90fdb
 8008248:	bfc90fdb 	.word	0xbfc90fdb
 800824c:	bf490fdb 	.word	0xbf490fdb
 8008250:	3f490fdb 	.word	0x3f490fdb
 8008254:	4016cbe4 	.word	0x4016cbe4
 8008258:	c016cbe4 	.word	0xc016cbe4
 800825c:	80000000 	.word	0x80000000
 8008260:	00000000 	.word	0x00000000
 8008264:	33bbbd2e 	.word	0x33bbbd2e
 8008268:	40490fdb 	.word	0x40490fdb

0800826c <__ieee754_rem_pio2f>:
 800826c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800826e:	ee10 6a10 	vmov	r6, s0
 8008272:	4b86      	ldr	r3, [pc, #536]	; (800848c <__ieee754_rem_pio2f+0x220>)
 8008274:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8008278:	429c      	cmp	r4, r3
 800827a:	b087      	sub	sp, #28
 800827c:	4605      	mov	r5, r0
 800827e:	dc05      	bgt.n	800828c <__ieee754_rem_pio2f+0x20>
 8008280:	2300      	movs	r3, #0
 8008282:	ed85 0a00 	vstr	s0, [r5]
 8008286:	6043      	str	r3, [r0, #4]
 8008288:	2000      	movs	r0, #0
 800828a:	e020      	b.n	80082ce <__ieee754_rem_pio2f+0x62>
 800828c:	4b80      	ldr	r3, [pc, #512]	; (8008490 <__ieee754_rem_pio2f+0x224>)
 800828e:	429c      	cmp	r4, r3
 8008290:	dc38      	bgt.n	8008304 <__ieee754_rem_pio2f+0x98>
 8008292:	2e00      	cmp	r6, #0
 8008294:	f024 040f 	bic.w	r4, r4, #15
 8008298:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8008494 <__ieee754_rem_pio2f+0x228>
 800829c:	4b7e      	ldr	r3, [pc, #504]	; (8008498 <__ieee754_rem_pio2f+0x22c>)
 800829e:	dd18      	ble.n	80082d2 <__ieee754_rem_pio2f+0x66>
 80082a0:	429c      	cmp	r4, r3
 80082a2:	ee70 7a47 	vsub.f32	s15, s0, s14
 80082a6:	bf09      	itett	eq
 80082a8:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 800849c <__ieee754_rem_pio2f+0x230>
 80082ac:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 80084a0 <__ieee754_rem_pio2f+0x234>
 80082b0:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80082b4:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 80084a4 <__ieee754_rem_pio2f+0x238>
 80082b8:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80082bc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80082c0:	edc0 6a00 	vstr	s13, [r0]
 80082c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80082c8:	edc0 7a01 	vstr	s15, [r0, #4]
 80082cc:	2001      	movs	r0, #1
 80082ce:	b007      	add	sp, #28
 80082d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082d2:	429c      	cmp	r4, r3
 80082d4:	ee70 7a07 	vadd.f32	s15, s0, s14
 80082d8:	bf09      	itett	eq
 80082da:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 800849c <__ieee754_rem_pio2f+0x230>
 80082de:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 80084a0 <__ieee754_rem_pio2f+0x234>
 80082e2:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 80082e6:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 80084a4 <__ieee754_rem_pio2f+0x238>
 80082ea:	ee77 6a87 	vadd.f32	s13, s15, s14
 80082ee:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80082f2:	edc0 6a00 	vstr	s13, [r0]
 80082f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80082fa:	edc0 7a01 	vstr	s15, [r0, #4]
 80082fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008302:	e7e4      	b.n	80082ce <__ieee754_rem_pio2f+0x62>
 8008304:	4b68      	ldr	r3, [pc, #416]	; (80084a8 <__ieee754_rem_pio2f+0x23c>)
 8008306:	429c      	cmp	r4, r3
 8008308:	dc71      	bgt.n	80083ee <__ieee754_rem_pio2f+0x182>
 800830a:	f000 fcd7 	bl	8008cbc <fabsf>
 800830e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80084ac <__ieee754_rem_pio2f+0x240>
 8008312:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8008316:	eee0 7a07 	vfma.f32	s15, s0, s14
 800831a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800831e:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8008322:	ee17 0a90 	vmov	r0, s15
 8008326:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8008494 <__ieee754_rem_pio2f+0x228>
 800832a:	eeb1 7a46 	vneg.f32	s14, s12
 800832e:	eea7 0a27 	vfma.f32	s0, s14, s15
 8008332:	281f      	cmp	r0, #31
 8008334:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80084a0 <__ieee754_rem_pio2f+0x234>
 8008338:	ee66 7a27 	vmul.f32	s15, s12, s15
 800833c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8008340:	ee16 3a90 	vmov	r3, s13
 8008344:	dc1c      	bgt.n	8008380 <__ieee754_rem_pio2f+0x114>
 8008346:	1e47      	subs	r7, r0, #1
 8008348:	4959      	ldr	r1, [pc, #356]	; (80084b0 <__ieee754_rem_pio2f+0x244>)
 800834a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800834e:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 8008352:	428a      	cmp	r2, r1
 8008354:	d014      	beq.n	8008380 <__ieee754_rem_pio2f+0x114>
 8008356:	602b      	str	r3, [r5, #0]
 8008358:	ed95 7a00 	vldr	s14, [r5]
 800835c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8008360:	2e00      	cmp	r6, #0
 8008362:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008366:	ed85 0a01 	vstr	s0, [r5, #4]
 800836a:	dab0      	bge.n	80082ce <__ieee754_rem_pio2f+0x62>
 800836c:	eeb1 7a47 	vneg.f32	s14, s14
 8008370:	eeb1 0a40 	vneg.f32	s0, s0
 8008374:	ed85 7a00 	vstr	s14, [r5]
 8008378:	ed85 0a01 	vstr	s0, [r5, #4]
 800837c:	4240      	negs	r0, r0
 800837e:	e7a6      	b.n	80082ce <__ieee754_rem_pio2f+0x62>
 8008380:	15e4      	asrs	r4, r4, #23
 8008382:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008386:	1aa2      	subs	r2, r4, r2
 8008388:	2a08      	cmp	r2, #8
 800838a:	dde4      	ble.n	8008356 <__ieee754_rem_pio2f+0xea>
 800838c:	eddf 7a43 	vldr	s15, [pc, #268]	; 800849c <__ieee754_rem_pio2f+0x230>
 8008390:	eef0 6a40 	vmov.f32	s13, s0
 8008394:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008398:	ee30 0a66 	vsub.f32	s0, s0, s13
 800839c:	eea7 0a27 	vfma.f32	s0, s14, s15
 80083a0:	eddf 7a40 	vldr	s15, [pc, #256]	; 80084a4 <__ieee754_rem_pio2f+0x238>
 80083a4:	ee96 0a27 	vfnms.f32	s0, s12, s15
 80083a8:	ee76 5ac0 	vsub.f32	s11, s13, s0
 80083ac:	eef0 7a40 	vmov.f32	s15, s0
 80083b0:	ee15 3a90 	vmov	r3, s11
 80083b4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80083b8:	1aa4      	subs	r4, r4, r2
 80083ba:	2c19      	cmp	r4, #25
 80083bc:	dc04      	bgt.n	80083c8 <__ieee754_rem_pio2f+0x15c>
 80083be:	edc5 5a00 	vstr	s11, [r5]
 80083c2:	eeb0 0a66 	vmov.f32	s0, s13
 80083c6:	e7c7      	b.n	8008358 <__ieee754_rem_pio2f+0xec>
 80083c8:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80084b4 <__ieee754_rem_pio2f+0x248>
 80083cc:	eeb0 0a66 	vmov.f32	s0, s13
 80083d0:	eea7 0a25 	vfma.f32	s0, s14, s11
 80083d4:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80083d8:	eee7 7a25 	vfma.f32	s15, s14, s11
 80083dc:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80084b8 <__ieee754_rem_pio2f+0x24c>
 80083e0:	eed6 7a07 	vfnms.f32	s15, s12, s14
 80083e4:	ee30 7a67 	vsub.f32	s14, s0, s15
 80083e8:	ed85 7a00 	vstr	s14, [r5]
 80083ec:	e7b4      	b.n	8008358 <__ieee754_rem_pio2f+0xec>
 80083ee:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80083f2:	db06      	blt.n	8008402 <__ieee754_rem_pio2f+0x196>
 80083f4:	ee70 7a40 	vsub.f32	s15, s0, s0
 80083f8:	edc0 7a01 	vstr	s15, [r0, #4]
 80083fc:	edc0 7a00 	vstr	s15, [r0]
 8008400:	e742      	b.n	8008288 <__ieee754_rem_pio2f+0x1c>
 8008402:	15e2      	asrs	r2, r4, #23
 8008404:	3a86      	subs	r2, #134	; 0x86
 8008406:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 800840a:	ee07 3a90 	vmov	s15, r3
 800840e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008412:	eddf 6a2a 	vldr	s13, [pc, #168]	; 80084bc <__ieee754_rem_pio2f+0x250>
 8008416:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800841a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800841e:	ed8d 7a03 	vstr	s14, [sp, #12]
 8008422:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008426:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800842a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800842e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008432:	ed8d 7a04 	vstr	s14, [sp, #16]
 8008436:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800843a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800843e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008442:	edcd 7a05 	vstr	s15, [sp, #20]
 8008446:	d11e      	bne.n	8008486 <__ieee754_rem_pio2f+0x21a>
 8008448:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800844c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008450:	bf0c      	ite	eq
 8008452:	2301      	moveq	r3, #1
 8008454:	2302      	movne	r3, #2
 8008456:	491a      	ldr	r1, [pc, #104]	; (80084c0 <__ieee754_rem_pio2f+0x254>)
 8008458:	9101      	str	r1, [sp, #4]
 800845a:	2102      	movs	r1, #2
 800845c:	9100      	str	r1, [sp, #0]
 800845e:	a803      	add	r0, sp, #12
 8008460:	4629      	mov	r1, r5
 8008462:	f000 f88d 	bl	8008580 <__kernel_rem_pio2f>
 8008466:	2e00      	cmp	r6, #0
 8008468:	f6bf af31 	bge.w	80082ce <__ieee754_rem_pio2f+0x62>
 800846c:	edd5 7a00 	vldr	s15, [r5]
 8008470:	eef1 7a67 	vneg.f32	s15, s15
 8008474:	edc5 7a00 	vstr	s15, [r5]
 8008478:	edd5 7a01 	vldr	s15, [r5, #4]
 800847c:	eef1 7a67 	vneg.f32	s15, s15
 8008480:	edc5 7a01 	vstr	s15, [r5, #4]
 8008484:	e77a      	b.n	800837c <__ieee754_rem_pio2f+0x110>
 8008486:	2303      	movs	r3, #3
 8008488:	e7e5      	b.n	8008456 <__ieee754_rem_pio2f+0x1ea>
 800848a:	bf00      	nop
 800848c:	3f490fd8 	.word	0x3f490fd8
 8008490:	4016cbe3 	.word	0x4016cbe3
 8008494:	3fc90f80 	.word	0x3fc90f80
 8008498:	3fc90fd0 	.word	0x3fc90fd0
 800849c:	37354400 	.word	0x37354400
 80084a0:	37354443 	.word	0x37354443
 80084a4:	2e85a308 	.word	0x2e85a308
 80084a8:	43490f80 	.word	0x43490f80
 80084ac:	3f22f984 	.word	0x3f22f984
 80084b0:	08008e80 	.word	0x08008e80
 80084b4:	2e85a300 	.word	0x2e85a300
 80084b8:	248d3132 	.word	0x248d3132
 80084bc:	43800000 	.word	0x43800000
 80084c0:	08008f00 	.word	0x08008f00

080084c4 <__kernel_cosf>:
 80084c4:	ee10 3a10 	vmov	r3, s0
 80084c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80084cc:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80084d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084d4:	da05      	bge.n	80084e2 <__kernel_cosf+0x1e>
 80084d6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80084da:	ee17 2a90 	vmov	r2, s15
 80084de:	2a00      	cmp	r2, #0
 80084e0:	d03b      	beq.n	800855a <__kernel_cosf+0x96>
 80084e2:	ee20 6a00 	vmul.f32	s12, s0, s0
 80084e6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80084ea:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008560 <__kernel_cosf+0x9c>
 80084ee:	4a1d      	ldr	r2, [pc, #116]	; (8008564 <__kernel_cosf+0xa0>)
 80084f0:	ee66 7a07 	vmul.f32	s15, s12, s14
 80084f4:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8008568 <__kernel_cosf+0xa4>
 80084f8:	eea6 7a25 	vfma.f32	s14, s12, s11
 80084fc:	4293      	cmp	r3, r2
 80084fe:	eddf 5a1b 	vldr	s11, [pc, #108]	; 800856c <__kernel_cosf+0xa8>
 8008502:	eee7 5a06 	vfma.f32	s11, s14, s12
 8008506:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8008570 <__kernel_cosf+0xac>
 800850a:	eea5 7a86 	vfma.f32	s14, s11, s12
 800850e:	eddf 5a19 	vldr	s11, [pc, #100]	; 8008574 <__kernel_cosf+0xb0>
 8008512:	eee7 5a06 	vfma.f32	s11, s14, s12
 8008516:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8008578 <__kernel_cosf+0xb4>
 800851a:	eea5 7a86 	vfma.f32	s14, s11, s12
 800851e:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8008522:	ee27 7a06 	vmul.f32	s14, s14, s12
 8008526:	eee6 0a07 	vfma.f32	s1, s12, s14
 800852a:	dc04      	bgt.n	8008536 <__kernel_cosf+0x72>
 800852c:	ee77 0ae0 	vsub.f32	s1, s15, s1
 8008530:	ee36 0ae0 	vsub.f32	s0, s13, s1
 8008534:	4770      	bx	lr
 8008536:	4a11      	ldr	r2, [pc, #68]	; (800857c <__kernel_cosf+0xb8>)
 8008538:	4293      	cmp	r3, r2
 800853a:	bfda      	itte	le
 800853c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8008540:	ee07 3a10 	vmovle	s14, r3
 8008544:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 8008548:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800854c:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8008550:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8008554:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008558:	4770      	bx	lr
 800855a:	eeb0 0a66 	vmov.f32	s0, s13
 800855e:	4770      	bx	lr
 8008560:	ad47d74e 	.word	0xad47d74e
 8008564:	3e999999 	.word	0x3e999999
 8008568:	310f74f6 	.word	0x310f74f6
 800856c:	b493f27c 	.word	0xb493f27c
 8008570:	37d00d01 	.word	0x37d00d01
 8008574:	bab60b61 	.word	0xbab60b61
 8008578:	3d2aaaab 	.word	0x3d2aaaab
 800857c:	3f480000 	.word	0x3f480000

08008580 <__kernel_rem_pio2f>:
 8008580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008584:	ed2d 8b04 	vpush	{d8-d9}
 8008588:	b0d7      	sub	sp, #348	; 0x15c
 800858a:	469b      	mov	fp, r3
 800858c:	460e      	mov	r6, r1
 800858e:	4bbe      	ldr	r3, [pc, #760]	; (8008888 <__kernel_rem_pio2f+0x308>)
 8008590:	9964      	ldr	r1, [sp, #400]	; 0x190
 8008592:	9002      	str	r0, [sp, #8]
 8008594:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8008598:	9865      	ldr	r0, [sp, #404]	; 0x194
 800859a:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8008898 <__kernel_rem_pio2f+0x318>
 800859e:	1ed1      	subs	r1, r2, #3
 80085a0:	2308      	movs	r3, #8
 80085a2:	fb91 f1f3 	sdiv	r1, r1, r3
 80085a6:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 80085aa:	f10b 3aff 	add.w	sl, fp, #4294967295	; 0xffffffff
 80085ae:	1c4c      	adds	r4, r1, #1
 80085b0:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 80085b4:	eba1 050a 	sub.w	r5, r1, sl
 80085b8:	aa1a      	add	r2, sp, #104	; 0x68
 80085ba:	eb09 070a 	add.w	r7, r9, sl
 80085be:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 80085c2:	4696      	mov	lr, r2
 80085c4:	2300      	movs	r3, #0
 80085c6:	42bb      	cmp	r3, r7
 80085c8:	dd0f      	ble.n	80085ea <__kernel_rem_pio2f+0x6a>
 80085ca:	af42      	add	r7, sp, #264	; 0x108
 80085cc:	2200      	movs	r2, #0
 80085ce:	454a      	cmp	r2, r9
 80085d0:	dc27      	bgt.n	8008622 <__kernel_rem_pio2f+0xa2>
 80085d2:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 80085d6:	eb0b 0302 	add.w	r3, fp, r2
 80085da:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 80085de:	9d02      	ldr	r5, [sp, #8]
 80085e0:	eddf 7aad 	vldr	s15, [pc, #692]	; 8008898 <__kernel_rem_pio2f+0x318>
 80085e4:	f04f 0c00 	mov.w	ip, #0
 80085e8:	e015      	b.n	8008616 <__kernel_rem_pio2f+0x96>
 80085ea:	42dd      	cmn	r5, r3
 80085ec:	bf5d      	ittte	pl
 80085ee:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 80085f2:	ee07 2a90 	vmovpl	s15, r2
 80085f6:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80085fa:	eef0 7a47 	vmovmi.f32	s15, s14
 80085fe:	ecee 7a01 	vstmia	lr!, {s15}
 8008602:	3301      	adds	r3, #1
 8008604:	e7df      	b.n	80085c6 <__kernel_rem_pio2f+0x46>
 8008606:	ecf5 6a01 	vldmia	r5!, {s13}
 800860a:	ed33 7a01 	vldmdb	r3!, {s14}
 800860e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008612:	f10c 0c01 	add.w	ip, ip, #1
 8008616:	45d4      	cmp	ip, sl
 8008618:	ddf5      	ble.n	8008606 <__kernel_rem_pio2f+0x86>
 800861a:	ece7 7a01 	vstmia	r7!, {s15}
 800861e:	3201      	adds	r2, #1
 8008620:	e7d5      	b.n	80085ce <__kernel_rem_pio2f+0x4e>
 8008622:	ab06      	add	r3, sp, #24
 8008624:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8008628:	9304      	str	r3, [sp, #16]
 800862a:	eddf 8a9a 	vldr	s17, [pc, #616]	; 8008894 <__kernel_rem_pio2f+0x314>
 800862e:	ed9f 9a98 	vldr	s18, [pc, #608]	; 8008890 <__kernel_rem_pio2f+0x310>
 8008632:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8008636:	9303      	str	r3, [sp, #12]
 8008638:	464d      	mov	r5, r9
 800863a:	ab56      	add	r3, sp, #344	; 0x158
 800863c:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 8008640:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8008644:	3f01      	subs	r7, #1
 8008646:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 800864a:	00bf      	lsls	r7, r7, #2
 800864c:	ab56      	add	r3, sp, #344	; 0x158
 800864e:	19da      	adds	r2, r3, r7
 8008650:	3a4c      	subs	r2, #76	; 0x4c
 8008652:	2300      	movs	r3, #0
 8008654:	1ae9      	subs	r1, r5, r3
 8008656:	2900      	cmp	r1, #0
 8008658:	dc4c      	bgt.n	80086f4 <__kernel_rem_pio2f+0x174>
 800865a:	4620      	mov	r0, r4
 800865c:	f000 fb78 	bl	8008d50 <scalbnf>
 8008660:	eeb0 8a40 	vmov.f32	s16, s0
 8008664:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8008668:	ee28 0a00 	vmul.f32	s0, s16, s0
 800866c:	f000 fb2e 	bl	8008ccc <floorf>
 8008670:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8008674:	eea0 8a67 	vfms.f32	s16, s0, s15
 8008678:	2c00      	cmp	r4, #0
 800867a:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800867e:	edcd 7a01 	vstr	s15, [sp, #4]
 8008682:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008686:	ee38 8a67 	vsub.f32	s16, s16, s15
 800868a:	dd48      	ble.n	800871e <__kernel_rem_pio2f+0x19e>
 800868c:	1e69      	subs	r1, r5, #1
 800868e:	ab06      	add	r3, sp, #24
 8008690:	f1c4 0008 	rsb	r0, r4, #8
 8008694:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 8008698:	9a01      	ldr	r2, [sp, #4]
 800869a:	fa4c f300 	asr.w	r3, ip, r0
 800869e:	441a      	add	r2, r3
 80086a0:	4083      	lsls	r3, r0
 80086a2:	9201      	str	r2, [sp, #4]
 80086a4:	ebac 0203 	sub.w	r2, ip, r3
 80086a8:	ab06      	add	r3, sp, #24
 80086aa:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 80086ae:	f1c4 0307 	rsb	r3, r4, #7
 80086b2:	fa42 f803 	asr.w	r8, r2, r3
 80086b6:	f1b8 0f00 	cmp.w	r8, #0
 80086ba:	dd41      	ble.n	8008740 <__kernel_rem_pio2f+0x1c0>
 80086bc:	9b01      	ldr	r3, [sp, #4]
 80086be:	2000      	movs	r0, #0
 80086c0:	3301      	adds	r3, #1
 80086c2:	9301      	str	r3, [sp, #4]
 80086c4:	4601      	mov	r1, r0
 80086c6:	4285      	cmp	r5, r0
 80086c8:	dc6d      	bgt.n	80087a6 <__kernel_rem_pio2f+0x226>
 80086ca:	2c00      	cmp	r4, #0
 80086cc:	dd04      	ble.n	80086d8 <__kernel_rem_pio2f+0x158>
 80086ce:	2c01      	cmp	r4, #1
 80086d0:	d07e      	beq.n	80087d0 <__kernel_rem_pio2f+0x250>
 80086d2:	2c02      	cmp	r4, #2
 80086d4:	f000 8086 	beq.w	80087e4 <__kernel_rem_pio2f+0x264>
 80086d8:	f1b8 0f02 	cmp.w	r8, #2
 80086dc:	d130      	bne.n	8008740 <__kernel_rem_pio2f+0x1c0>
 80086de:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80086e2:	ee30 8a48 	vsub.f32	s16, s0, s16
 80086e6:	b359      	cbz	r1, 8008740 <__kernel_rem_pio2f+0x1c0>
 80086e8:	4620      	mov	r0, r4
 80086ea:	f000 fb31 	bl	8008d50 <scalbnf>
 80086ee:	ee38 8a40 	vsub.f32	s16, s16, s0
 80086f2:	e025      	b.n	8008740 <__kernel_rem_pio2f+0x1c0>
 80086f4:	ee60 7a28 	vmul.f32	s15, s0, s17
 80086f8:	a806      	add	r0, sp, #24
 80086fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80086fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008702:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8008706:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800870a:	ee10 1a10 	vmov	r1, s0
 800870e:	ed32 0a01 	vldmdb	r2!, {s0}
 8008712:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 8008716:	ee37 0a80 	vadd.f32	s0, s15, s0
 800871a:	3301      	adds	r3, #1
 800871c:	e79a      	b.n	8008654 <__kernel_rem_pio2f+0xd4>
 800871e:	d106      	bne.n	800872e <__kernel_rem_pio2f+0x1ae>
 8008720:	1e6b      	subs	r3, r5, #1
 8008722:	aa06      	add	r2, sp, #24
 8008724:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008728:	ea4f 2822 	mov.w	r8, r2, asr #8
 800872c:	e7c3      	b.n	80086b6 <__kernel_rem_pio2f+0x136>
 800872e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8008732:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8008736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800873a:	da31      	bge.n	80087a0 <__kernel_rem_pio2f+0x220>
 800873c:	f04f 0800 	mov.w	r8, #0
 8008740:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8008744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008748:	f040 80a8 	bne.w	800889c <__kernel_rem_pio2f+0x31c>
 800874c:	1e6b      	subs	r3, r5, #1
 800874e:	4618      	mov	r0, r3
 8008750:	2200      	movs	r2, #0
 8008752:	4548      	cmp	r0, r9
 8008754:	da4d      	bge.n	80087f2 <__kernel_rem_pio2f+0x272>
 8008756:	2a00      	cmp	r2, #0
 8008758:	f000 8087 	beq.w	800886a <__kernel_rem_pio2f+0x2ea>
 800875c:	aa06      	add	r2, sp, #24
 800875e:	3c08      	subs	r4, #8
 8008760:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008764:	2900      	cmp	r1, #0
 8008766:	f000 808d 	beq.w	8008884 <__kernel_rem_pio2f+0x304>
 800876a:	4620      	mov	r0, r4
 800876c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008770:	9302      	str	r3, [sp, #8]
 8008772:	f000 faed 	bl	8008d50 <scalbnf>
 8008776:	9b02      	ldr	r3, [sp, #8]
 8008778:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8008894 <__kernel_rem_pio2f+0x314>
 800877c:	0099      	lsls	r1, r3, #2
 800877e:	aa42      	add	r2, sp, #264	; 0x108
 8008780:	1850      	adds	r0, r2, r1
 8008782:	1d05      	adds	r5, r0, #4
 8008784:	461c      	mov	r4, r3
 8008786:	2c00      	cmp	r4, #0
 8008788:	f280 80b8 	bge.w	80088fc <__kernel_rem_pio2f+0x37c>
 800878c:	2500      	movs	r5, #0
 800878e:	1b5c      	subs	r4, r3, r5
 8008790:	2c00      	cmp	r4, #0
 8008792:	f2c0 80d8 	blt.w	8008946 <__kernel_rem_pio2f+0x3c6>
 8008796:	4f3d      	ldr	r7, [pc, #244]	; (800888c <__kernel_rem_pio2f+0x30c>)
 8008798:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8008898 <__kernel_rem_pio2f+0x318>
 800879c:	2400      	movs	r4, #0
 800879e:	e0c6      	b.n	800892e <__kernel_rem_pio2f+0x3ae>
 80087a0:	f04f 0802 	mov.w	r8, #2
 80087a4:	e78a      	b.n	80086bc <__kernel_rem_pio2f+0x13c>
 80087a6:	ab06      	add	r3, sp, #24
 80087a8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80087ac:	b949      	cbnz	r1, 80087c2 <__kernel_rem_pio2f+0x242>
 80087ae:	b12b      	cbz	r3, 80087bc <__kernel_rem_pio2f+0x23c>
 80087b0:	aa06      	add	r2, sp, #24
 80087b2:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80087b6:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 80087ba:	2301      	movs	r3, #1
 80087bc:	3001      	adds	r0, #1
 80087be:	4619      	mov	r1, r3
 80087c0:	e781      	b.n	80086c6 <__kernel_rem_pio2f+0x146>
 80087c2:	aa06      	add	r2, sp, #24
 80087c4:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80087c8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 80087cc:	460b      	mov	r3, r1
 80087ce:	e7f5      	b.n	80087bc <__kernel_rem_pio2f+0x23c>
 80087d0:	1e68      	subs	r0, r5, #1
 80087d2:	ab06      	add	r3, sp, #24
 80087d4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80087d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087dc:	aa06      	add	r2, sp, #24
 80087de:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 80087e2:	e779      	b.n	80086d8 <__kernel_rem_pio2f+0x158>
 80087e4:	1e68      	subs	r0, r5, #1
 80087e6:	ab06      	add	r3, sp, #24
 80087e8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80087ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80087f0:	e7f4      	b.n	80087dc <__kernel_rem_pio2f+0x25c>
 80087f2:	a906      	add	r1, sp, #24
 80087f4:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80087f8:	3801      	subs	r0, #1
 80087fa:	430a      	orrs	r2, r1
 80087fc:	e7a9      	b.n	8008752 <__kernel_rem_pio2f+0x1d2>
 80087fe:	f10c 0c01 	add.w	ip, ip, #1
 8008802:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008806:	2a00      	cmp	r2, #0
 8008808:	d0f9      	beq.n	80087fe <__kernel_rem_pio2f+0x27e>
 800880a:	eb0b 0305 	add.w	r3, fp, r5
 800880e:	aa1a      	add	r2, sp, #104	; 0x68
 8008810:	009b      	lsls	r3, r3, #2
 8008812:	1898      	adds	r0, r3, r2
 8008814:	3004      	adds	r0, #4
 8008816:	1c69      	adds	r1, r5, #1
 8008818:	3704      	adds	r7, #4
 800881a:	2200      	movs	r2, #0
 800881c:	4465      	add	r5, ip
 800881e:	9005      	str	r0, [sp, #20]
 8008820:	428d      	cmp	r5, r1
 8008822:	f6ff af0a 	blt.w	800863a <__kernel_rem_pio2f+0xba>
 8008826:	a81a      	add	r0, sp, #104	; 0x68
 8008828:	eb02 0c03 	add.w	ip, r2, r3
 800882c:	4484      	add	ip, r0
 800882e:	9803      	ldr	r0, [sp, #12]
 8008830:	f8dd e008 	ldr.w	lr, [sp, #8]
 8008834:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8008838:	9001      	str	r0, [sp, #4]
 800883a:	ee07 0a90 	vmov	s15, r0
 800883e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008842:	9805      	ldr	r0, [sp, #20]
 8008844:	edcc 7a00 	vstr	s15, [ip]
 8008848:	eddf 7a13 	vldr	s15, [pc, #76]	; 8008898 <__kernel_rem_pio2f+0x318>
 800884c:	eb00 0802 	add.w	r8, r0, r2
 8008850:	f04f 0c00 	mov.w	ip, #0
 8008854:	45d4      	cmp	ip, sl
 8008856:	dd0c      	ble.n	8008872 <__kernel_rem_pio2f+0x2f2>
 8008858:	eb02 0c07 	add.w	ip, r2, r7
 800885c:	a842      	add	r0, sp, #264	; 0x108
 800885e:	4484      	add	ip, r0
 8008860:	edcc 7a01 	vstr	s15, [ip, #4]
 8008864:	3101      	adds	r1, #1
 8008866:	3204      	adds	r2, #4
 8008868:	e7da      	b.n	8008820 <__kernel_rem_pio2f+0x2a0>
 800886a:	9b04      	ldr	r3, [sp, #16]
 800886c:	f04f 0c01 	mov.w	ip, #1
 8008870:	e7c7      	b.n	8008802 <__kernel_rem_pio2f+0x282>
 8008872:	ecfe 6a01 	vldmia	lr!, {s13}
 8008876:	ed38 7a01 	vldmdb	r8!, {s14}
 800887a:	f10c 0c01 	add.w	ip, ip, #1
 800887e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008882:	e7e7      	b.n	8008854 <__kernel_rem_pio2f+0x2d4>
 8008884:	3b01      	subs	r3, #1
 8008886:	e769      	b.n	800875c <__kernel_rem_pio2f+0x1dc>
 8008888:	08009244 	.word	0x08009244
 800888c:	08009218 	.word	0x08009218
 8008890:	43800000 	.word	0x43800000
 8008894:	3b800000 	.word	0x3b800000
 8008898:	00000000 	.word	0x00000000
 800889c:	4260      	negs	r0, r4
 800889e:	eeb0 0a48 	vmov.f32	s0, s16
 80088a2:	f000 fa55 	bl	8008d50 <scalbnf>
 80088a6:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 8008890 <__kernel_rem_pio2f+0x310>
 80088aa:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80088ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088b2:	db1a      	blt.n	80088ea <__kernel_rem_pio2f+0x36a>
 80088b4:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8008894 <__kernel_rem_pio2f+0x314>
 80088b8:	ee60 7a27 	vmul.f32	s15, s0, s15
 80088bc:	aa06      	add	r2, sp, #24
 80088be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80088c2:	a906      	add	r1, sp, #24
 80088c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80088c8:	3408      	adds	r4, #8
 80088ca:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80088ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80088d2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80088d6:	ee10 3a10 	vmov	r3, s0
 80088da:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 80088de:	1c6b      	adds	r3, r5, #1
 80088e0:	ee17 2a90 	vmov	r2, s15
 80088e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80088e8:	e73f      	b.n	800876a <__kernel_rem_pio2f+0x1ea>
 80088ea:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80088ee:	aa06      	add	r2, sp, #24
 80088f0:	ee10 3a10 	vmov	r3, s0
 80088f4:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 80088f8:	462b      	mov	r3, r5
 80088fa:	e736      	b.n	800876a <__kernel_rem_pio2f+0x1ea>
 80088fc:	aa06      	add	r2, sp, #24
 80088fe:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8008902:	9202      	str	r2, [sp, #8]
 8008904:	ee07 2a90 	vmov	s15, r2
 8008908:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800890c:	3c01      	subs	r4, #1
 800890e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8008912:	ee20 0a07 	vmul.f32	s0, s0, s14
 8008916:	ed65 7a01 	vstmdb	r5!, {s15}
 800891a:	e734      	b.n	8008786 <__kernel_rem_pio2f+0x206>
 800891c:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 8008920:	ecf7 6a01 	vldmia	r7!, {s13}
 8008924:	ed9c 7a00 	vldr	s14, [ip]
 8008928:	eee6 7a87 	vfma.f32	s15, s13, s14
 800892c:	3401      	adds	r4, #1
 800892e:	454c      	cmp	r4, r9
 8008930:	dc01      	bgt.n	8008936 <__kernel_rem_pio2f+0x3b6>
 8008932:	42a5      	cmp	r5, r4
 8008934:	daf2      	bge.n	800891c <__kernel_rem_pio2f+0x39c>
 8008936:	aa56      	add	r2, sp, #344	; 0x158
 8008938:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 800893c:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 8008940:	3501      	adds	r5, #1
 8008942:	3804      	subs	r0, #4
 8008944:	e723      	b.n	800878e <__kernel_rem_pio2f+0x20e>
 8008946:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8008948:	2a03      	cmp	r2, #3
 800894a:	d84d      	bhi.n	80089e8 <__kernel_rem_pio2f+0x468>
 800894c:	e8df f002 	tbb	[pc, r2]
 8008950:	021f1f3e 	.word	0x021f1f3e
 8008954:	aa56      	add	r2, sp, #344	; 0x158
 8008956:	4411      	add	r1, r2
 8008958:	399c      	subs	r1, #156	; 0x9c
 800895a:	4608      	mov	r0, r1
 800895c:	461c      	mov	r4, r3
 800895e:	2c00      	cmp	r4, #0
 8008960:	dc5f      	bgt.n	8008a22 <__kernel_rem_pio2f+0x4a2>
 8008962:	4608      	mov	r0, r1
 8008964:	461c      	mov	r4, r3
 8008966:	2c01      	cmp	r4, #1
 8008968:	dc6b      	bgt.n	8008a42 <__kernel_rem_pio2f+0x4c2>
 800896a:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 8008898 <__kernel_rem_pio2f+0x318>
 800896e:	2b01      	cmp	r3, #1
 8008970:	dc77      	bgt.n	8008a62 <__kernel_rem_pio2f+0x4e2>
 8008972:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8008976:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 800897a:	f1b8 0f00 	cmp.w	r8, #0
 800897e:	d176      	bne.n	8008a6e <__kernel_rem_pio2f+0x4ee>
 8008980:	edc6 6a00 	vstr	s13, [r6]
 8008984:	ed86 7a01 	vstr	s14, [r6, #4]
 8008988:	edc6 7a02 	vstr	s15, [r6, #8]
 800898c:	e02c      	b.n	80089e8 <__kernel_rem_pio2f+0x468>
 800898e:	aa56      	add	r2, sp, #344	; 0x158
 8008990:	4411      	add	r1, r2
 8008992:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 8008898 <__kernel_rem_pio2f+0x318>
 8008996:	399c      	subs	r1, #156	; 0x9c
 8008998:	4618      	mov	r0, r3
 800899a:	2800      	cmp	r0, #0
 800899c:	da32      	bge.n	8008a04 <__kernel_rem_pio2f+0x484>
 800899e:	f1b8 0f00 	cmp.w	r8, #0
 80089a2:	d035      	beq.n	8008a10 <__kernel_rem_pio2f+0x490>
 80089a4:	eef1 7a47 	vneg.f32	s15, s14
 80089a8:	edc6 7a00 	vstr	s15, [r6]
 80089ac:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 80089b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80089b4:	a82f      	add	r0, sp, #188	; 0xbc
 80089b6:	2101      	movs	r1, #1
 80089b8:	428b      	cmp	r3, r1
 80089ba:	da2c      	bge.n	8008a16 <__kernel_rem_pio2f+0x496>
 80089bc:	f1b8 0f00 	cmp.w	r8, #0
 80089c0:	d001      	beq.n	80089c6 <__kernel_rem_pio2f+0x446>
 80089c2:	eef1 7a67 	vneg.f32	s15, s15
 80089c6:	edc6 7a01 	vstr	s15, [r6, #4]
 80089ca:	e00d      	b.n	80089e8 <__kernel_rem_pio2f+0x468>
 80089cc:	aa56      	add	r2, sp, #344	; 0x158
 80089ce:	4411      	add	r1, r2
 80089d0:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8008898 <__kernel_rem_pio2f+0x318>
 80089d4:	399c      	subs	r1, #156	; 0x9c
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	da0e      	bge.n	80089f8 <__kernel_rem_pio2f+0x478>
 80089da:	f1b8 0f00 	cmp.w	r8, #0
 80089de:	d001      	beq.n	80089e4 <__kernel_rem_pio2f+0x464>
 80089e0:	eef1 7a67 	vneg.f32	s15, s15
 80089e4:	edc6 7a00 	vstr	s15, [r6]
 80089e8:	9b01      	ldr	r3, [sp, #4]
 80089ea:	f003 0007 	and.w	r0, r3, #7
 80089ee:	b057      	add	sp, #348	; 0x15c
 80089f0:	ecbd 8b04 	vpop	{d8-d9}
 80089f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089f8:	ed31 7a01 	vldmdb	r1!, {s14}
 80089fc:	3b01      	subs	r3, #1
 80089fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008a02:	e7e8      	b.n	80089d6 <__kernel_rem_pio2f+0x456>
 8008a04:	ed71 7a01 	vldmdb	r1!, {s15}
 8008a08:	3801      	subs	r0, #1
 8008a0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008a0e:	e7c4      	b.n	800899a <__kernel_rem_pio2f+0x41a>
 8008a10:	eef0 7a47 	vmov.f32	s15, s14
 8008a14:	e7c8      	b.n	80089a8 <__kernel_rem_pio2f+0x428>
 8008a16:	ecb0 7a01 	vldmia	r0!, {s14}
 8008a1a:	3101      	adds	r1, #1
 8008a1c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008a20:	e7ca      	b.n	80089b8 <__kernel_rem_pio2f+0x438>
 8008a22:	ed50 7a02 	vldr	s15, [r0, #-8]
 8008a26:	ed70 6a01 	vldmdb	r0!, {s13}
 8008a2a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008a2e:	3c01      	subs	r4, #1
 8008a30:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008a34:	ed00 7a01 	vstr	s14, [r0, #-4]
 8008a38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a3c:	edc0 7a00 	vstr	s15, [r0]
 8008a40:	e78d      	b.n	800895e <__kernel_rem_pio2f+0x3de>
 8008a42:	ed50 7a02 	vldr	s15, [r0, #-8]
 8008a46:	ed70 6a01 	vldmdb	r0!, {s13}
 8008a4a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008a4e:	3c01      	subs	r4, #1
 8008a50:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008a54:	ed00 7a01 	vstr	s14, [r0, #-4]
 8008a58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a5c:	edc0 7a00 	vstr	s15, [r0]
 8008a60:	e781      	b.n	8008966 <__kernel_rem_pio2f+0x3e6>
 8008a62:	ed31 7a01 	vldmdb	r1!, {s14}
 8008a66:	3b01      	subs	r3, #1
 8008a68:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008a6c:	e77f      	b.n	800896e <__kernel_rem_pio2f+0x3ee>
 8008a6e:	eef1 6a66 	vneg.f32	s13, s13
 8008a72:	eeb1 7a47 	vneg.f32	s14, s14
 8008a76:	edc6 6a00 	vstr	s13, [r6]
 8008a7a:	ed86 7a01 	vstr	s14, [r6, #4]
 8008a7e:	eef1 7a67 	vneg.f32	s15, s15
 8008a82:	e781      	b.n	8008988 <__kernel_rem_pio2f+0x408>

08008a84 <__kernel_sinf>:
 8008a84:	ee10 3a10 	vmov	r3, s0
 8008a88:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008a8c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8008a90:	da04      	bge.n	8008a9c <__kernel_sinf+0x18>
 8008a92:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8008a96:	ee17 3a90 	vmov	r3, s15
 8008a9a:	b35b      	cbz	r3, 8008af4 <__kernel_sinf+0x70>
 8008a9c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8008aa0:	eddf 7a15 	vldr	s15, [pc, #84]	; 8008af8 <__kernel_sinf+0x74>
 8008aa4:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8008afc <__kernel_sinf+0x78>
 8008aa8:	eea7 6a27 	vfma.f32	s12, s14, s15
 8008aac:	eddf 7a14 	vldr	s15, [pc, #80]	; 8008b00 <__kernel_sinf+0x7c>
 8008ab0:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008ab4:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8008b04 <__kernel_sinf+0x80>
 8008ab8:	eea7 6a87 	vfma.f32	s12, s15, s14
 8008abc:	eddf 7a12 	vldr	s15, [pc, #72]	; 8008b08 <__kernel_sinf+0x84>
 8008ac0:	ee60 6a07 	vmul.f32	s13, s0, s14
 8008ac4:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008ac8:	b930      	cbnz	r0, 8008ad8 <__kernel_sinf+0x54>
 8008aca:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8008b0c <__kernel_sinf+0x88>
 8008ace:	eea7 6a27 	vfma.f32	s12, s14, s15
 8008ad2:	eea6 0a26 	vfma.f32	s0, s12, s13
 8008ad6:	4770      	bx	lr
 8008ad8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8008adc:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8008ae0:	eee0 7a86 	vfma.f32	s15, s1, s12
 8008ae4:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8008ae8:	eddf 7a09 	vldr	s15, [pc, #36]	; 8008b10 <__kernel_sinf+0x8c>
 8008aec:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8008af0:	ee30 0a60 	vsub.f32	s0, s0, s1
 8008af4:	4770      	bx	lr
 8008af6:	bf00      	nop
 8008af8:	2f2ec9d3 	.word	0x2f2ec9d3
 8008afc:	b2d72f34 	.word	0xb2d72f34
 8008b00:	3638ef1b 	.word	0x3638ef1b
 8008b04:	b9500d01 	.word	0xb9500d01
 8008b08:	3c088889 	.word	0x3c088889
 8008b0c:	be2aaaab 	.word	0xbe2aaaab
 8008b10:	3e2aaaab 	.word	0x3e2aaaab

08008b14 <atanf>:
 8008b14:	b538      	push	{r3, r4, r5, lr}
 8008b16:	ee10 5a10 	vmov	r5, s0
 8008b1a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8008b1e:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8008b22:	eef0 7a40 	vmov.f32	s15, s0
 8008b26:	db10      	blt.n	8008b4a <atanf+0x36>
 8008b28:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8008b2c:	dd04      	ble.n	8008b38 <atanf+0x24>
 8008b2e:	ee70 7a00 	vadd.f32	s15, s0, s0
 8008b32:	eeb0 0a67 	vmov.f32	s0, s15
 8008b36:	bd38      	pop	{r3, r4, r5, pc}
 8008b38:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8008c70 <atanf+0x15c>
 8008b3c:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8008c74 <atanf+0x160>
 8008b40:	2d00      	cmp	r5, #0
 8008b42:	bfd8      	it	le
 8008b44:	eef0 7a47 	vmovle.f32	s15, s14
 8008b48:	e7f3      	b.n	8008b32 <atanf+0x1e>
 8008b4a:	4b4b      	ldr	r3, [pc, #300]	; (8008c78 <atanf+0x164>)
 8008b4c:	429c      	cmp	r4, r3
 8008b4e:	dc10      	bgt.n	8008b72 <atanf+0x5e>
 8008b50:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8008b54:	da0a      	bge.n	8008b6c <atanf+0x58>
 8008b56:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8008c7c <atanf+0x168>
 8008b5a:	ee30 7a07 	vadd.f32	s14, s0, s14
 8008b5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b62:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8008b66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b6a:	dce2      	bgt.n	8008b32 <atanf+0x1e>
 8008b6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008b70:	e013      	b.n	8008b9a <atanf+0x86>
 8008b72:	f000 f8a3 	bl	8008cbc <fabsf>
 8008b76:	4b42      	ldr	r3, [pc, #264]	; (8008c80 <atanf+0x16c>)
 8008b78:	429c      	cmp	r4, r3
 8008b7a:	dc4f      	bgt.n	8008c1c <atanf+0x108>
 8008b7c:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8008b80:	429c      	cmp	r4, r3
 8008b82:	dc41      	bgt.n	8008c08 <atanf+0xf4>
 8008b84:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8008b88:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8008b8c:	eea0 7a27 	vfma.f32	s14, s0, s15
 8008b90:	2300      	movs	r3, #0
 8008b92:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008b96:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8008b9a:	1c5a      	adds	r2, r3, #1
 8008b9c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8008ba0:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8008c84 <atanf+0x170>
 8008ba4:	eddf 5a38 	vldr	s11, [pc, #224]	; 8008c88 <atanf+0x174>
 8008ba8:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8008c8c <atanf+0x178>
 8008bac:	ee66 6a06 	vmul.f32	s13, s12, s12
 8008bb0:	eee6 5a87 	vfma.f32	s11, s13, s14
 8008bb4:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8008c90 <atanf+0x17c>
 8008bb8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8008bbc:	eddf 5a35 	vldr	s11, [pc, #212]	; 8008c94 <atanf+0x180>
 8008bc0:	eee7 5a26 	vfma.f32	s11, s14, s13
 8008bc4:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8008c98 <atanf+0x184>
 8008bc8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8008bcc:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008c9c <atanf+0x188>
 8008bd0:	eee7 5a26 	vfma.f32	s11, s14, s13
 8008bd4:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8008ca0 <atanf+0x18c>
 8008bd8:	eea6 5a87 	vfma.f32	s10, s13, s14
 8008bdc:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8008ca4 <atanf+0x190>
 8008be0:	eea5 7a26 	vfma.f32	s14, s10, s13
 8008be4:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8008ca8 <atanf+0x194>
 8008be8:	eea7 5a26 	vfma.f32	s10, s14, s13
 8008bec:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8008cac <atanf+0x198>
 8008bf0:	eea5 7a26 	vfma.f32	s14, s10, s13
 8008bf4:	ee27 7a26 	vmul.f32	s14, s14, s13
 8008bf8:	eea5 7a86 	vfma.f32	s14, s11, s12
 8008bfc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008c00:	d121      	bne.n	8008c46 <atanf+0x132>
 8008c02:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008c06:	e794      	b.n	8008b32 <atanf+0x1e>
 8008c08:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8008c0c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8008c10:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008c14:	2301      	movs	r3, #1
 8008c16:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8008c1a:	e7be      	b.n	8008b9a <atanf+0x86>
 8008c1c:	4b24      	ldr	r3, [pc, #144]	; (8008cb0 <atanf+0x19c>)
 8008c1e:	429c      	cmp	r4, r3
 8008c20:	dc0b      	bgt.n	8008c3a <atanf+0x126>
 8008c22:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8008c26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008c2a:	eea0 7a27 	vfma.f32	s14, s0, s15
 8008c2e:	2302      	movs	r3, #2
 8008c30:	ee70 6a67 	vsub.f32	s13, s0, s15
 8008c34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c38:	e7af      	b.n	8008b9a <atanf+0x86>
 8008c3a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8008c3e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8008c42:	2303      	movs	r3, #3
 8008c44:	e7a9      	b.n	8008b9a <atanf+0x86>
 8008c46:	4a1b      	ldr	r2, [pc, #108]	; (8008cb4 <atanf+0x1a0>)
 8008c48:	491b      	ldr	r1, [pc, #108]	; (8008cb8 <atanf+0x1a4>)
 8008c4a:	009b      	lsls	r3, r3, #2
 8008c4c:	441a      	add	r2, r3
 8008c4e:	440b      	add	r3, r1
 8008c50:	edd3 6a00 	vldr	s13, [r3]
 8008c54:	ee37 7a66 	vsub.f32	s14, s14, s13
 8008c58:	2d00      	cmp	r5, #0
 8008c5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008c5e:	ed92 7a00 	vldr	s14, [r2]
 8008c62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008c66:	bfb8      	it	lt
 8008c68:	eef1 7a67 	vneglt.f32	s15, s15
 8008c6c:	e761      	b.n	8008b32 <atanf+0x1e>
 8008c6e:	bf00      	nop
 8008c70:	bfc90fdb 	.word	0xbfc90fdb
 8008c74:	3fc90fdb 	.word	0x3fc90fdb
 8008c78:	3edfffff 	.word	0x3edfffff
 8008c7c:	7149f2ca 	.word	0x7149f2ca
 8008c80:	3f97ffff 	.word	0x3f97ffff
 8008c84:	3c8569d7 	.word	0x3c8569d7
 8008c88:	3d4bda59 	.word	0x3d4bda59
 8008c8c:	bd6ef16b 	.word	0xbd6ef16b
 8008c90:	3d886b35 	.word	0x3d886b35
 8008c94:	3dba2e6e 	.word	0x3dba2e6e
 8008c98:	3e124925 	.word	0x3e124925
 8008c9c:	3eaaaaab 	.word	0x3eaaaaab
 8008ca0:	bd15a221 	.word	0xbd15a221
 8008ca4:	bd9d8795 	.word	0xbd9d8795
 8008ca8:	bde38e38 	.word	0xbde38e38
 8008cac:	be4ccccd 	.word	0xbe4ccccd
 8008cb0:	401bffff 	.word	0x401bffff
 8008cb4:	08009250 	.word	0x08009250
 8008cb8:	08009260 	.word	0x08009260

08008cbc <fabsf>:
 8008cbc:	ee10 3a10 	vmov	r3, s0
 8008cc0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008cc4:	ee00 3a10 	vmov	s0, r3
 8008cc8:	4770      	bx	lr
	...

08008ccc <floorf>:
 8008ccc:	ee10 3a10 	vmov	r3, s0
 8008cd0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008cd4:	0dca      	lsrs	r2, r1, #23
 8008cd6:	3a7f      	subs	r2, #127	; 0x7f
 8008cd8:	2a16      	cmp	r2, #22
 8008cda:	dc2a      	bgt.n	8008d32 <floorf+0x66>
 8008cdc:	2a00      	cmp	r2, #0
 8008cde:	da11      	bge.n	8008d04 <floorf+0x38>
 8008ce0:	eddf 7a18 	vldr	s15, [pc, #96]	; 8008d44 <floorf+0x78>
 8008ce4:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008ce8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008cec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cf0:	dd05      	ble.n	8008cfe <floorf+0x32>
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	da23      	bge.n	8008d3e <floorf+0x72>
 8008cf6:	4a14      	ldr	r2, [pc, #80]	; (8008d48 <floorf+0x7c>)
 8008cf8:	2900      	cmp	r1, #0
 8008cfa:	bf18      	it	ne
 8008cfc:	4613      	movne	r3, r2
 8008cfe:	ee00 3a10 	vmov	s0, r3
 8008d02:	4770      	bx	lr
 8008d04:	4911      	ldr	r1, [pc, #68]	; (8008d4c <floorf+0x80>)
 8008d06:	4111      	asrs	r1, r2
 8008d08:	420b      	tst	r3, r1
 8008d0a:	d0fa      	beq.n	8008d02 <floorf+0x36>
 8008d0c:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8008d44 <floorf+0x78>
 8008d10:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008d14:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d1c:	ddef      	ble.n	8008cfe <floorf+0x32>
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	bfbe      	ittt	lt
 8008d22:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8008d26:	fa40 f202 	asrlt.w	r2, r0, r2
 8008d2a:	189b      	addlt	r3, r3, r2
 8008d2c:	ea23 0301 	bic.w	r3, r3, r1
 8008d30:	e7e5      	b.n	8008cfe <floorf+0x32>
 8008d32:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8008d36:	d3e4      	bcc.n	8008d02 <floorf+0x36>
 8008d38:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008d3c:	4770      	bx	lr
 8008d3e:	2300      	movs	r3, #0
 8008d40:	e7dd      	b.n	8008cfe <floorf+0x32>
 8008d42:	bf00      	nop
 8008d44:	7149f2ca 	.word	0x7149f2ca
 8008d48:	bf800000 	.word	0xbf800000
 8008d4c:	007fffff 	.word	0x007fffff

08008d50 <scalbnf>:
 8008d50:	b508      	push	{r3, lr}
 8008d52:	ee10 2a10 	vmov	r2, s0
 8008d56:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8008d5a:	ed2d 8b02 	vpush	{d8}
 8008d5e:	eef0 0a40 	vmov.f32	s1, s0
 8008d62:	d004      	beq.n	8008d6e <scalbnf+0x1e>
 8008d64:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008d68:	d306      	bcc.n	8008d78 <scalbnf+0x28>
 8008d6a:	ee70 0a00 	vadd.f32	s1, s0, s0
 8008d6e:	ecbd 8b02 	vpop	{d8}
 8008d72:	eeb0 0a60 	vmov.f32	s0, s1
 8008d76:	bd08      	pop	{r3, pc}
 8008d78:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008d7c:	d21c      	bcs.n	8008db8 <scalbnf+0x68>
 8008d7e:	4b1f      	ldr	r3, [pc, #124]	; (8008dfc <scalbnf+0xac>)
 8008d80:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8008e00 <scalbnf+0xb0>
 8008d84:	4298      	cmp	r0, r3
 8008d86:	ee60 0a27 	vmul.f32	s1, s0, s15
 8008d8a:	db10      	blt.n	8008dae <scalbnf+0x5e>
 8008d8c:	ee10 2a90 	vmov	r2, s1
 8008d90:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8008d94:	3b19      	subs	r3, #25
 8008d96:	4403      	add	r3, r0
 8008d98:	2bfe      	cmp	r3, #254	; 0xfe
 8008d9a:	dd0f      	ble.n	8008dbc <scalbnf+0x6c>
 8008d9c:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8008e04 <scalbnf+0xb4>
 8008da0:	eeb0 0a48 	vmov.f32	s0, s16
 8008da4:	f000 f834 	bl	8008e10 <copysignf>
 8008da8:	ee60 0a08 	vmul.f32	s1, s0, s16
 8008dac:	e7df      	b.n	8008d6e <scalbnf+0x1e>
 8008dae:	eddf 7a16 	vldr	s15, [pc, #88]	; 8008e08 <scalbnf+0xb8>
 8008db2:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8008db6:	e7da      	b.n	8008d6e <scalbnf+0x1e>
 8008db8:	0ddb      	lsrs	r3, r3, #23
 8008dba:	e7ec      	b.n	8008d96 <scalbnf+0x46>
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	dd06      	ble.n	8008dce <scalbnf+0x7e>
 8008dc0:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8008dc4:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8008dc8:	ee00 3a90 	vmov	s1, r3
 8008dcc:	e7cf      	b.n	8008d6e <scalbnf+0x1e>
 8008dce:	f113 0f16 	cmn.w	r3, #22
 8008dd2:	da06      	bge.n	8008de2 <scalbnf+0x92>
 8008dd4:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008dd8:	4298      	cmp	r0, r3
 8008dda:	dcdf      	bgt.n	8008d9c <scalbnf+0x4c>
 8008ddc:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8008e08 <scalbnf+0xb8>
 8008de0:	e7de      	b.n	8008da0 <scalbnf+0x50>
 8008de2:	3319      	adds	r3, #25
 8008de4:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8008de8:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8008dec:	eddf 7a07 	vldr	s15, [pc, #28]	; 8008e0c <scalbnf+0xbc>
 8008df0:	ee07 3a10 	vmov	s14, r3
 8008df4:	ee67 0a27 	vmul.f32	s1, s14, s15
 8008df8:	e7b9      	b.n	8008d6e <scalbnf+0x1e>
 8008dfa:	bf00      	nop
 8008dfc:	ffff3cb0 	.word	0xffff3cb0
 8008e00:	4c000000 	.word	0x4c000000
 8008e04:	7149f2ca 	.word	0x7149f2ca
 8008e08:	0da24260 	.word	0x0da24260
 8008e0c:	33000000 	.word	0x33000000

08008e10 <copysignf>:
 8008e10:	ee10 3a10 	vmov	r3, s0
 8008e14:	ee10 2a90 	vmov	r2, s1
 8008e18:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008e1c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008e20:	4313      	orrs	r3, r2
 8008e22:	ee00 3a10 	vmov	s0, r3
 8008e26:	4770      	bx	lr

08008e28 <_init>:
 8008e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e2a:	bf00      	nop
 8008e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e2e:	bc08      	pop	{r3}
 8008e30:	469e      	mov	lr, r3
 8008e32:	4770      	bx	lr

08008e34 <_fini>:
 8008e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e36:	bf00      	nop
 8008e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e3a:	bc08      	pop	{r3}
 8008e3c:	469e      	mov	lr, r3
 8008e3e:	4770      	bx	lr
