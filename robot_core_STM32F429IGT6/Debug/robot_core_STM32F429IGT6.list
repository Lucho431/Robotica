
robot_core_STM32F429IGT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071cc  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800737c  0800737c  0001737c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073b4  080073b4  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080073b4  080073b4  000173b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080073bc  080073bc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073bc  080073bc  000173bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080073c0  080073c0  000173c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080073c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000268  20000010  080073d4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  080073d4  00020278  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000124e0  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002893  00000000  00000000  00032520  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001100  00000000  00000000  00034db8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fc0  00000000  00000000  00035eb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000250e7  00000000  00000000  00036e78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e936  00000000  00000000  0005bf5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dd1d4  00000000  00000000  0006a895  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00147a69  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000480c  00000000  00000000  00147ae4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000010 	.word	0x20000010
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007364 	.word	0x08007364

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000014 	.word	0x20000014
 80001ec:	08007364 	.word	0x08007364

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032e:	f1a4 0401 	sub.w	r4, r4, #1
 8000332:	d1e9      	bne.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__aeabi_d2f>:
 800098c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000990:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000994:	bf24      	itt	cs
 8000996:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800099a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800099e:	d90d      	bls.n	80009bc <__aeabi_d2f+0x30>
 80009a0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009a4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009a8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009ac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009b0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009b4:	bf08      	it	eq
 80009b6:	f020 0001 	biceq.w	r0, r0, #1
 80009ba:	4770      	bx	lr
 80009bc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009c0:	d121      	bne.n	8000a06 <__aeabi_d2f+0x7a>
 80009c2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009c6:	bfbc      	itt	lt
 80009c8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009cc:	4770      	bxlt	lr
 80009ce:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009d2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009d6:	f1c2 0218 	rsb	r2, r2, #24
 80009da:	f1c2 0c20 	rsb	ip, r2, #32
 80009de:	fa10 f30c 	lsls.w	r3, r0, ip
 80009e2:	fa20 f002 	lsr.w	r0, r0, r2
 80009e6:	bf18      	it	ne
 80009e8:	f040 0001 	orrne.w	r0, r0, #1
 80009ec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009f0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009f4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009f8:	ea40 000c 	orr.w	r0, r0, ip
 80009fc:	fa23 f302 	lsr.w	r3, r3, r2
 8000a00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a04:	e7cc      	b.n	80009a0 <__aeabi_d2f+0x14>
 8000a06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a0a:	d107      	bne.n	8000a1c <__aeabi_d2f+0x90>
 8000a0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a10:	bf1e      	ittt	ne
 8000a12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a1a:	4770      	bxne	lr
 8000a1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop

08000a2c <__aeabi_uldivmod>:
 8000a2c:	b953      	cbnz	r3, 8000a44 <__aeabi_uldivmod+0x18>
 8000a2e:	b94a      	cbnz	r2, 8000a44 <__aeabi_uldivmod+0x18>
 8000a30:	2900      	cmp	r1, #0
 8000a32:	bf08      	it	eq
 8000a34:	2800      	cmpeq	r0, #0
 8000a36:	bf1c      	itt	ne
 8000a38:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a3c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a40:	f000 b972 	b.w	8000d28 <__aeabi_idiv0>
 8000a44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a4c:	f000 f806 	bl	8000a5c <__udivmoddi4>
 8000a50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a58:	b004      	add	sp, #16
 8000a5a:	4770      	bx	lr

08000a5c <__udivmoddi4>:
 8000a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a60:	9e08      	ldr	r6, [sp, #32]
 8000a62:	4604      	mov	r4, r0
 8000a64:	4688      	mov	r8, r1
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d14b      	bne.n	8000b02 <__udivmoddi4+0xa6>
 8000a6a:	428a      	cmp	r2, r1
 8000a6c:	4615      	mov	r5, r2
 8000a6e:	d967      	bls.n	8000b40 <__udivmoddi4+0xe4>
 8000a70:	fab2 f282 	clz	r2, r2
 8000a74:	b14a      	cbz	r2, 8000a8a <__udivmoddi4+0x2e>
 8000a76:	f1c2 0720 	rsb	r7, r2, #32
 8000a7a:	fa01 f302 	lsl.w	r3, r1, r2
 8000a7e:	fa20 f707 	lsr.w	r7, r0, r7
 8000a82:	4095      	lsls	r5, r2
 8000a84:	ea47 0803 	orr.w	r8, r7, r3
 8000a88:	4094      	lsls	r4, r2
 8000a8a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a8e:	0c23      	lsrs	r3, r4, #16
 8000a90:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a94:	fa1f fc85 	uxth.w	ip, r5
 8000a98:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a9c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000aa0:	fb07 f10c 	mul.w	r1, r7, ip
 8000aa4:	4299      	cmp	r1, r3
 8000aa6:	d909      	bls.n	8000abc <__udivmoddi4+0x60>
 8000aa8:	18eb      	adds	r3, r5, r3
 8000aaa:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000aae:	f080 811b 	bcs.w	8000ce8 <__udivmoddi4+0x28c>
 8000ab2:	4299      	cmp	r1, r3
 8000ab4:	f240 8118 	bls.w	8000ce8 <__udivmoddi4+0x28c>
 8000ab8:	3f02      	subs	r7, #2
 8000aba:	442b      	add	r3, r5
 8000abc:	1a5b      	subs	r3, r3, r1
 8000abe:	b2a4      	uxth	r4, r4
 8000ac0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ac4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ac8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000acc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ad0:	45a4      	cmp	ip, r4
 8000ad2:	d909      	bls.n	8000ae8 <__udivmoddi4+0x8c>
 8000ad4:	192c      	adds	r4, r5, r4
 8000ad6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ada:	f080 8107 	bcs.w	8000cec <__udivmoddi4+0x290>
 8000ade:	45a4      	cmp	ip, r4
 8000ae0:	f240 8104 	bls.w	8000cec <__udivmoddi4+0x290>
 8000ae4:	3802      	subs	r0, #2
 8000ae6:	442c      	add	r4, r5
 8000ae8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000aec:	eba4 040c 	sub.w	r4, r4, ip
 8000af0:	2700      	movs	r7, #0
 8000af2:	b11e      	cbz	r6, 8000afc <__udivmoddi4+0xa0>
 8000af4:	40d4      	lsrs	r4, r2
 8000af6:	2300      	movs	r3, #0
 8000af8:	e9c6 4300 	strd	r4, r3, [r6]
 8000afc:	4639      	mov	r1, r7
 8000afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b02:	428b      	cmp	r3, r1
 8000b04:	d909      	bls.n	8000b1a <__udivmoddi4+0xbe>
 8000b06:	2e00      	cmp	r6, #0
 8000b08:	f000 80eb 	beq.w	8000ce2 <__udivmoddi4+0x286>
 8000b0c:	2700      	movs	r7, #0
 8000b0e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b12:	4638      	mov	r0, r7
 8000b14:	4639      	mov	r1, r7
 8000b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b1a:	fab3 f783 	clz	r7, r3
 8000b1e:	2f00      	cmp	r7, #0
 8000b20:	d147      	bne.n	8000bb2 <__udivmoddi4+0x156>
 8000b22:	428b      	cmp	r3, r1
 8000b24:	d302      	bcc.n	8000b2c <__udivmoddi4+0xd0>
 8000b26:	4282      	cmp	r2, r0
 8000b28:	f200 80fa 	bhi.w	8000d20 <__udivmoddi4+0x2c4>
 8000b2c:	1a84      	subs	r4, r0, r2
 8000b2e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b32:	2001      	movs	r0, #1
 8000b34:	4698      	mov	r8, r3
 8000b36:	2e00      	cmp	r6, #0
 8000b38:	d0e0      	beq.n	8000afc <__udivmoddi4+0xa0>
 8000b3a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b3e:	e7dd      	b.n	8000afc <__udivmoddi4+0xa0>
 8000b40:	b902      	cbnz	r2, 8000b44 <__udivmoddi4+0xe8>
 8000b42:	deff      	udf	#255	; 0xff
 8000b44:	fab2 f282 	clz	r2, r2
 8000b48:	2a00      	cmp	r2, #0
 8000b4a:	f040 808f 	bne.w	8000c6c <__udivmoddi4+0x210>
 8000b4e:	1b49      	subs	r1, r1, r5
 8000b50:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b54:	fa1f f885 	uxth.w	r8, r5
 8000b58:	2701      	movs	r7, #1
 8000b5a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b5e:	0c23      	lsrs	r3, r4, #16
 8000b60:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b68:	fb08 f10c 	mul.w	r1, r8, ip
 8000b6c:	4299      	cmp	r1, r3
 8000b6e:	d907      	bls.n	8000b80 <__udivmoddi4+0x124>
 8000b70:	18eb      	adds	r3, r5, r3
 8000b72:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000b76:	d202      	bcs.n	8000b7e <__udivmoddi4+0x122>
 8000b78:	4299      	cmp	r1, r3
 8000b7a:	f200 80cd 	bhi.w	8000d18 <__udivmoddi4+0x2bc>
 8000b7e:	4684      	mov	ip, r0
 8000b80:	1a59      	subs	r1, r3, r1
 8000b82:	b2a3      	uxth	r3, r4
 8000b84:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b88:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b8c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b90:	fb08 f800 	mul.w	r8, r8, r0
 8000b94:	45a0      	cmp	r8, r4
 8000b96:	d907      	bls.n	8000ba8 <__udivmoddi4+0x14c>
 8000b98:	192c      	adds	r4, r5, r4
 8000b9a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0x14a>
 8000ba0:	45a0      	cmp	r8, r4
 8000ba2:	f200 80b6 	bhi.w	8000d12 <__udivmoddi4+0x2b6>
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	eba4 0408 	sub.w	r4, r4, r8
 8000bac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bb0:	e79f      	b.n	8000af2 <__udivmoddi4+0x96>
 8000bb2:	f1c7 0c20 	rsb	ip, r7, #32
 8000bb6:	40bb      	lsls	r3, r7
 8000bb8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000bbc:	ea4e 0e03 	orr.w	lr, lr, r3
 8000bc0:	fa01 f407 	lsl.w	r4, r1, r7
 8000bc4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000bc8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000bcc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000bd0:	4325      	orrs	r5, r4
 8000bd2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000bd6:	0c2c      	lsrs	r4, r5, #16
 8000bd8:	fb08 3319 	mls	r3, r8, r9, r3
 8000bdc:	fa1f fa8e 	uxth.w	sl, lr
 8000be0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000be4:	fb09 f40a 	mul.w	r4, r9, sl
 8000be8:	429c      	cmp	r4, r3
 8000bea:	fa02 f207 	lsl.w	r2, r2, r7
 8000bee:	fa00 f107 	lsl.w	r1, r0, r7
 8000bf2:	d90b      	bls.n	8000c0c <__udivmoddi4+0x1b0>
 8000bf4:	eb1e 0303 	adds.w	r3, lr, r3
 8000bf8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000bfc:	f080 8087 	bcs.w	8000d0e <__udivmoddi4+0x2b2>
 8000c00:	429c      	cmp	r4, r3
 8000c02:	f240 8084 	bls.w	8000d0e <__udivmoddi4+0x2b2>
 8000c06:	f1a9 0902 	sub.w	r9, r9, #2
 8000c0a:	4473      	add	r3, lr
 8000c0c:	1b1b      	subs	r3, r3, r4
 8000c0e:	b2ad      	uxth	r5, r5
 8000c10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c14:	fb08 3310 	mls	r3, r8, r0, r3
 8000c18:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c1c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c20:	45a2      	cmp	sl, r4
 8000c22:	d908      	bls.n	8000c36 <__udivmoddi4+0x1da>
 8000c24:	eb1e 0404 	adds.w	r4, lr, r4
 8000c28:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c2c:	d26b      	bcs.n	8000d06 <__udivmoddi4+0x2aa>
 8000c2e:	45a2      	cmp	sl, r4
 8000c30:	d969      	bls.n	8000d06 <__udivmoddi4+0x2aa>
 8000c32:	3802      	subs	r0, #2
 8000c34:	4474      	add	r4, lr
 8000c36:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c3e:	eba4 040a 	sub.w	r4, r4, sl
 8000c42:	454c      	cmp	r4, r9
 8000c44:	46c2      	mov	sl, r8
 8000c46:	464b      	mov	r3, r9
 8000c48:	d354      	bcc.n	8000cf4 <__udivmoddi4+0x298>
 8000c4a:	d051      	beq.n	8000cf0 <__udivmoddi4+0x294>
 8000c4c:	2e00      	cmp	r6, #0
 8000c4e:	d069      	beq.n	8000d24 <__udivmoddi4+0x2c8>
 8000c50:	ebb1 050a 	subs.w	r5, r1, sl
 8000c54:	eb64 0403 	sbc.w	r4, r4, r3
 8000c58:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c5c:	40fd      	lsrs	r5, r7
 8000c5e:	40fc      	lsrs	r4, r7
 8000c60:	ea4c 0505 	orr.w	r5, ip, r5
 8000c64:	e9c6 5400 	strd	r5, r4, [r6]
 8000c68:	2700      	movs	r7, #0
 8000c6a:	e747      	b.n	8000afc <__udivmoddi4+0xa0>
 8000c6c:	f1c2 0320 	rsb	r3, r2, #32
 8000c70:	fa20 f703 	lsr.w	r7, r0, r3
 8000c74:	4095      	lsls	r5, r2
 8000c76:	fa01 f002 	lsl.w	r0, r1, r2
 8000c7a:	fa21 f303 	lsr.w	r3, r1, r3
 8000c7e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c82:	4338      	orrs	r0, r7
 8000c84:	0c01      	lsrs	r1, r0, #16
 8000c86:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c8a:	fa1f f885 	uxth.w	r8, r5
 8000c8e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c92:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c96:	fb07 f308 	mul.w	r3, r7, r8
 8000c9a:	428b      	cmp	r3, r1
 8000c9c:	fa04 f402 	lsl.w	r4, r4, r2
 8000ca0:	d907      	bls.n	8000cb2 <__udivmoddi4+0x256>
 8000ca2:	1869      	adds	r1, r5, r1
 8000ca4:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000ca8:	d22f      	bcs.n	8000d0a <__udivmoddi4+0x2ae>
 8000caa:	428b      	cmp	r3, r1
 8000cac:	d92d      	bls.n	8000d0a <__udivmoddi4+0x2ae>
 8000cae:	3f02      	subs	r7, #2
 8000cb0:	4429      	add	r1, r5
 8000cb2:	1acb      	subs	r3, r1, r3
 8000cb4:	b281      	uxth	r1, r0
 8000cb6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cba:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cbe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc2:	fb00 f308 	mul.w	r3, r0, r8
 8000cc6:	428b      	cmp	r3, r1
 8000cc8:	d907      	bls.n	8000cda <__udivmoddi4+0x27e>
 8000cca:	1869      	adds	r1, r5, r1
 8000ccc:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000cd0:	d217      	bcs.n	8000d02 <__udivmoddi4+0x2a6>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d915      	bls.n	8000d02 <__udivmoddi4+0x2a6>
 8000cd6:	3802      	subs	r0, #2
 8000cd8:	4429      	add	r1, r5
 8000cda:	1ac9      	subs	r1, r1, r3
 8000cdc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000ce0:	e73b      	b.n	8000b5a <__udivmoddi4+0xfe>
 8000ce2:	4637      	mov	r7, r6
 8000ce4:	4630      	mov	r0, r6
 8000ce6:	e709      	b.n	8000afc <__udivmoddi4+0xa0>
 8000ce8:	4607      	mov	r7, r0
 8000cea:	e6e7      	b.n	8000abc <__udivmoddi4+0x60>
 8000cec:	4618      	mov	r0, r3
 8000cee:	e6fb      	b.n	8000ae8 <__udivmoddi4+0x8c>
 8000cf0:	4541      	cmp	r1, r8
 8000cf2:	d2ab      	bcs.n	8000c4c <__udivmoddi4+0x1f0>
 8000cf4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000cf8:	eb69 020e 	sbc.w	r2, r9, lr
 8000cfc:	3801      	subs	r0, #1
 8000cfe:	4613      	mov	r3, r2
 8000d00:	e7a4      	b.n	8000c4c <__udivmoddi4+0x1f0>
 8000d02:	4660      	mov	r0, ip
 8000d04:	e7e9      	b.n	8000cda <__udivmoddi4+0x27e>
 8000d06:	4618      	mov	r0, r3
 8000d08:	e795      	b.n	8000c36 <__udivmoddi4+0x1da>
 8000d0a:	4667      	mov	r7, ip
 8000d0c:	e7d1      	b.n	8000cb2 <__udivmoddi4+0x256>
 8000d0e:	4681      	mov	r9, r0
 8000d10:	e77c      	b.n	8000c0c <__udivmoddi4+0x1b0>
 8000d12:	3802      	subs	r0, #2
 8000d14:	442c      	add	r4, r5
 8000d16:	e747      	b.n	8000ba8 <__udivmoddi4+0x14c>
 8000d18:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d1c:	442b      	add	r3, r5
 8000d1e:	e72f      	b.n	8000b80 <__udivmoddi4+0x124>
 8000d20:	4638      	mov	r0, r7
 8000d22:	e708      	b.n	8000b36 <__udivmoddi4+0xda>
 8000d24:	4637      	mov	r7, r6
 8000d26:	e6e9      	b.n	8000afc <__udivmoddi4+0xa0>

08000d28 <__aeabi_idiv0>:
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop

08000d2c <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8000d32:	463b      	mov	r3, r7
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000d3a:	4b14      	ldr	r3, [pc, #80]	; (8000d8c <MX_DAC_Init+0x60>)
 8000d3c:	4a14      	ldr	r2, [pc, #80]	; (8000d90 <MX_DAC_Init+0x64>)
 8000d3e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000d40:	4812      	ldr	r0, [pc, #72]	; (8000d8c <MX_DAC_Init+0x60>)
 8000d42:	f002 f8f2 	bl	8002f2a <HAL_DAC_Init>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000d4c:	f001 f9a0 	bl	8002090 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000d50:	2300      	movs	r3, #0
 8000d52:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000d54:	2300      	movs	r3, #0
 8000d56:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000d58:	463b      	mov	r3, r7
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	480b      	ldr	r0, [pc, #44]	; (8000d8c <MX_DAC_Init+0x60>)
 8000d60:	f002 f905 	bl	8002f6e <HAL_DAC_ConfigChannel>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000d6a:	f001 f991 	bl	8002090 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000d6e:	463b      	mov	r3, r7
 8000d70:	2210      	movs	r2, #16
 8000d72:	4619      	mov	r1, r3
 8000d74:	4805      	ldr	r0, [pc, #20]	; (8000d8c <MX_DAC_Init+0x60>)
 8000d76:	f002 f8fa 	bl	8002f6e <HAL_DAC_ConfigChannel>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8000d80:	f001 f986 	bl	8002090 <Error_Handler>
  }

}
 8000d84:	bf00      	nop
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	20000054 	.word	0x20000054
 8000d90:	40007400 	.word	0x40007400

08000d94 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b08a      	sub	sp, #40	; 0x28
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9c:	f107 0314 	add.w	r3, r7, #20
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	60da      	str	r2, [r3, #12]
 8000daa:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a17      	ldr	r2, [pc, #92]	; (8000e10 <HAL_DAC_MspInit+0x7c>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d127      	bne.n	8000e06 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	613b      	str	r3, [r7, #16]
 8000dba:	4b16      	ldr	r3, [pc, #88]	; (8000e14 <HAL_DAC_MspInit+0x80>)
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbe:	4a15      	ldr	r2, [pc, #84]	; (8000e14 <HAL_DAC_MspInit+0x80>)
 8000dc0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc6:	4b13      	ldr	r3, [pc, #76]	; (8000e14 <HAL_DAC_MspInit+0x80>)
 8000dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000dce:	613b      	str	r3, [r7, #16]
 8000dd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60fb      	str	r3, [r7, #12]
 8000dd6:	4b0f      	ldr	r3, [pc, #60]	; (8000e14 <HAL_DAC_MspInit+0x80>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	4a0e      	ldr	r2, [pc, #56]	; (8000e14 <HAL_DAC_MspInit+0x80>)
 8000ddc:	f043 0301 	orr.w	r3, r3, #1
 8000de0:	6313      	str	r3, [r2, #48]	; 0x30
 8000de2:	4b0c      	ldr	r3, [pc, #48]	; (8000e14 <HAL_DAC_MspInit+0x80>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	f003 0301 	and.w	r3, r3, #1
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000dee:	2330      	movs	r3, #48	; 0x30
 8000df0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000df2:	2303      	movs	r3, #3
 8000df4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfa:	f107 0314 	add.w	r3, r7, #20
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4805      	ldr	r0, [pc, #20]	; (8000e18 <HAL_DAC_MspInit+0x84>)
 8000e02:	f002 f923 	bl	800304c <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8000e06:	bf00      	nop
 8000e08:	3728      	adds	r7, #40	; 0x28
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40007400 	.word	0x40007400
 8000e14:	40023800 	.word	0x40023800
 8000e18:	40020000 	.word	0x40020000

08000e1c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b08c      	sub	sp, #48	; 0x30
 8000e20:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e22:	f107 031c 	add.w	r3, r7, #28
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	605a      	str	r2, [r3, #4]
 8000e2c:	609a      	str	r2, [r3, #8]
 8000e2e:	60da      	str	r2, [r3, #12]
 8000e30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	61bb      	str	r3, [r7, #24]
 8000e36:	4b45      	ldr	r3, [pc, #276]	; (8000f4c <MX_GPIO_Init+0x130>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	4a44      	ldr	r2, [pc, #272]	; (8000f4c <MX_GPIO_Init+0x130>)
 8000e3c:	f043 0320 	orr.w	r3, r3, #32
 8000e40:	6313      	str	r3, [r2, #48]	; 0x30
 8000e42:	4b42      	ldr	r3, [pc, #264]	; (8000f4c <MX_GPIO_Init+0x130>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	f003 0320 	and.w	r3, r3, #32
 8000e4a:	61bb      	str	r3, [r7, #24]
 8000e4c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	617b      	str	r3, [r7, #20]
 8000e52:	4b3e      	ldr	r3, [pc, #248]	; (8000f4c <MX_GPIO_Init+0x130>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	4a3d      	ldr	r2, [pc, #244]	; (8000f4c <MX_GPIO_Init+0x130>)
 8000e58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5e:	4b3b      	ldr	r3, [pc, #236]	; (8000f4c <MX_GPIO_Init+0x130>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e66:	617b      	str	r3, [r7, #20]
 8000e68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	613b      	str	r3, [r7, #16]
 8000e6e:	4b37      	ldr	r3, [pc, #220]	; (8000f4c <MX_GPIO_Init+0x130>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	4a36      	ldr	r2, [pc, #216]	; (8000f4c <MX_GPIO_Init+0x130>)
 8000e74:	f043 0301 	orr.w	r3, r3, #1
 8000e78:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7a:	4b34      	ldr	r3, [pc, #208]	; (8000f4c <MX_GPIO_Init+0x130>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	f003 0301 	and.w	r3, r3, #1
 8000e82:	613b      	str	r3, [r7, #16]
 8000e84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	60fb      	str	r3, [r7, #12]
 8000e8a:	4b30      	ldr	r3, [pc, #192]	; (8000f4c <MX_GPIO_Init+0x130>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	4a2f      	ldr	r2, [pc, #188]	; (8000f4c <MX_GPIO_Init+0x130>)
 8000e90:	f043 0308 	orr.w	r3, r3, #8
 8000e94:	6313      	str	r3, [r2, #48]	; 0x30
 8000e96:	4b2d      	ldr	r3, [pc, #180]	; (8000f4c <MX_GPIO_Init+0x130>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	f003 0308 	and.w	r3, r3, #8
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60bb      	str	r3, [r7, #8]
 8000ea6:	4b29      	ldr	r3, [pc, #164]	; (8000f4c <MX_GPIO_Init+0x130>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	4a28      	ldr	r2, [pc, #160]	; (8000f4c <MX_GPIO_Init+0x130>)
 8000eac:	f043 0304 	orr.w	r3, r3, #4
 8000eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb2:	4b26      	ldr	r3, [pc, #152]	; (8000f4c <MX_GPIO_Init+0x130>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	f003 0304 	and.w	r3, r3, #4
 8000eba:	60bb      	str	r3, [r7, #8]
 8000ebc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	607b      	str	r3, [r7, #4]
 8000ec2:	4b22      	ldr	r3, [pc, #136]	; (8000f4c <MX_GPIO_Init+0x130>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	4a21      	ldr	r2, [pc, #132]	; (8000f4c <MX_GPIO_Init+0x130>)
 8000ec8:	f043 0302 	orr.w	r3, r3, #2
 8000ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ece:	4b1f      	ldr	r3, [pc, #124]	; (8000f4c <MX_GPIO_Init+0x130>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	f003 0302 	and.w	r3, r3, #2
 8000ed6:	607b      	str	r3, [r7, #4]
 8000ed8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_in4_Pin|OUT_in3_Pin|OUT_in2_Pin, GPIO_PIN_RESET);
 8000eda:	2200      	movs	r2, #0
 8000edc:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8000ee0:	481b      	ldr	r0, [pc, #108]	; (8000f50 <MX_GPIO_Init+0x134>)
 8000ee2:	f002 fa75 	bl	80033d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, GPIO_PIN_RESET);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2101      	movs	r1, #1
 8000eea:	481a      	ldr	r0, [pc, #104]	; (8000f54 <MX_GPIO_Init+0x138>)
 8000eec:	f002 fa70 	bl	80033d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = OUT_in4_Pin|OUT_in3_Pin|OUT_in2_Pin;
 8000ef0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000ef4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efe:	2300      	movs	r3, #0
 8000f00:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f02:	f107 031c 	add.w	r3, r7, #28
 8000f06:	4619      	mov	r1, r3
 8000f08:	4811      	ldr	r0, [pc, #68]	; (8000f50 <MX_GPIO_Init+0x134>)
 8000f0a:	f002 f89f 	bl	800304c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OUT_in1_Pin;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f12:	2301      	movs	r3, #1
 8000f14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OUT_in1_GPIO_Port, &GPIO_InitStruct);
 8000f1e:	f107 031c 	add.w	r3, r7, #28
 8000f22:	4619      	mov	r1, r3
 8000f24:	480b      	ldr	r0, [pc, #44]	; (8000f54 <MX_GPIO_Init+0x138>)
 8000f26:	f002 f891 	bl	800304c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = IN_sensorL_Pin|IN_sensorR_Pin;
 8000f2a:	230a      	movs	r3, #10
 8000f2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f32:	2301      	movs	r3, #1
 8000f34:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f36:	f107 031c 	add.w	r3, r7, #28
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4805      	ldr	r0, [pc, #20]	; (8000f54 <MX_GPIO_Init+0x138>)
 8000f3e:	f002 f885 	bl	800304c <HAL_GPIO_Init>

}
 8000f42:	bf00      	nop
 8000f44:	3730      	adds	r7, #48	; 0x30
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40023800 	.word	0x40023800
 8000f50:	40020800 	.word	0x40020800
 8000f54:	40020c00 	.word	0x40020c00

08000f58 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000f5c:	4b1b      	ldr	r3, [pc, #108]	; (8000fcc <MX_I2C1_Init+0x74>)
 8000f5e:	4a1c      	ldr	r2, [pc, #112]	; (8000fd0 <MX_I2C1_Init+0x78>)
 8000f60:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000f62:	4b1a      	ldr	r3, [pc, #104]	; (8000fcc <MX_I2C1_Init+0x74>)
 8000f64:	4a1b      	ldr	r2, [pc, #108]	; (8000fd4 <MX_I2C1_Init+0x7c>)
 8000f66:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f68:	4b18      	ldr	r3, [pc, #96]	; (8000fcc <MX_I2C1_Init+0x74>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f6e:	4b17      	ldr	r3, [pc, #92]	; (8000fcc <MX_I2C1_Init+0x74>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f74:	4b15      	ldr	r3, [pc, #84]	; (8000fcc <MX_I2C1_Init+0x74>)
 8000f76:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f7a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f7c:	4b13      	ldr	r3, [pc, #76]	; (8000fcc <MX_I2C1_Init+0x74>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f82:	4b12      	ldr	r3, [pc, #72]	; (8000fcc <MX_I2C1_Init+0x74>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f88:	4b10      	ldr	r3, [pc, #64]	; (8000fcc <MX_I2C1_Init+0x74>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f8e:	4b0f      	ldr	r3, [pc, #60]	; (8000fcc <MX_I2C1_Init+0x74>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f94:	480d      	ldr	r0, [pc, #52]	; (8000fcc <MX_I2C1_Init+0x74>)
 8000f96:	f002 fa35 	bl	8003404 <HAL_I2C_Init>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000fa0:	f001 f876 	bl	8002090 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	4809      	ldr	r0, [pc, #36]	; (8000fcc <MX_I2C1_Init+0x74>)
 8000fa8:	f003 f9df 	bl	800436a <HAL_I2CEx_ConfigAnalogFilter>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000fb2:	f001 f86d 	bl	8002090 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	4804      	ldr	r0, [pc, #16]	; (8000fcc <MX_I2C1_Init+0x74>)
 8000fba:	f003 fa12 	bl	80043e2 <HAL_I2CEx_ConfigDigitalFilter>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000fc4:	f001 f864 	bl	8002090 <Error_Handler>
  }

}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	20000068 	.word	0x20000068
 8000fd0:	40005400 	.word	0x40005400
 8000fd4:	00061a80 	.word	0x00061a80

08000fd8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b08a      	sub	sp, #40	; 0x28
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe0:	f107 0314 	add.w	r3, r7, #20
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
 8000fee:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a19      	ldr	r2, [pc, #100]	; (800105c <HAL_I2C_MspInit+0x84>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d12b      	bne.n	8001052 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	613b      	str	r3, [r7, #16]
 8000ffe:	4b18      	ldr	r3, [pc, #96]	; (8001060 <HAL_I2C_MspInit+0x88>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	4a17      	ldr	r2, [pc, #92]	; (8001060 <HAL_I2C_MspInit+0x88>)
 8001004:	f043 0302 	orr.w	r3, r3, #2
 8001008:	6313      	str	r3, [r2, #48]	; 0x30
 800100a:	4b15      	ldr	r3, [pc, #84]	; (8001060 <HAL_I2C_MspInit+0x88>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	f003 0302 	and.w	r3, r3, #2
 8001012:	613b      	str	r3, [r7, #16]
 8001014:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001016:	23c0      	movs	r3, #192	; 0xc0
 8001018:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800101a:	2312      	movs	r3, #18
 800101c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800101e:	2301      	movs	r3, #1
 8001020:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001022:	2303      	movs	r3, #3
 8001024:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001026:	2304      	movs	r3, #4
 8001028:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800102a:	f107 0314 	add.w	r3, r7, #20
 800102e:	4619      	mov	r1, r3
 8001030:	480c      	ldr	r0, [pc, #48]	; (8001064 <HAL_I2C_MspInit+0x8c>)
 8001032:	f002 f80b 	bl	800304c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	60fb      	str	r3, [r7, #12]
 800103a:	4b09      	ldr	r3, [pc, #36]	; (8001060 <HAL_I2C_MspInit+0x88>)
 800103c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103e:	4a08      	ldr	r2, [pc, #32]	; (8001060 <HAL_I2C_MspInit+0x88>)
 8001040:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001044:	6413      	str	r3, [r2, #64]	; 0x40
 8001046:	4b06      	ldr	r3, [pc, #24]	; (8001060 <HAL_I2C_MspInit+0x88>)
 8001048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001052:	bf00      	nop
 8001054:	3728      	adds	r7, #40	; 0x28
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40005400 	.word	0x40005400
 8001060:	40023800 	.word	0x40023800
 8001064:	40020400 	.word	0x40020400

08001068 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800106c:	f001 fdb8 	bl	8002be0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001070:	f000 f8da 	bl	8001228 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001074:	f7ff fed2 	bl	8000e1c <MX_GPIO_Init>
  MX_DAC_Init();
 8001078:	f7ff fe58 	bl	8000d2c <MX_DAC_Init>
  MX_TIM2_Init();
 800107c:	f001 f9b2 	bl	80023e4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001080:	f001 fa02 	bl	8002488 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001084:	f001 fa54 	bl	8002530 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001088:	f001 fad2 	bl	8002630 <MX_TIM5_Init>
  MX_UART7_Init();
 800108c:	f001 fd04 	bl	8002a98 <MX_UART7_Init>
  MX_TIM7_Init();
 8001090:	f001 fb78 	bl	8002784 <MX_TIM7_Init>
  MX_I2C1_Init();
 8001094:	f7ff ff60 	bl	8000f58 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim7); //desborda cada 10 ms.
 8001098:	4853      	ldr	r0, [pc, #332]	; (80011e8 <main+0x180>)
 800109a:	f003 fee2 	bl	8004e62 <HAL_TIM_Base_Start_IT>

  HAL_TIM_Base_Start(&htim2); //encoder R.
 800109e:	4853      	ldr	r0, [pc, #332]	; (80011ec <main+0x184>)
 80010a0:	f003 febb 	bl	8004e1a <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3); //encoder L.
 80010a4:	4852      	ldr	r0, [pc, #328]	; (80011f0 <main+0x188>)
 80010a6:	f003 feb8 	bl	8004e1a <HAL_TIM_Base_Start>

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1); //rueda izquierda.
 80010aa:	2100      	movs	r1, #0
 80010ac:	4851      	ldr	r0, [pc, #324]	; (80011f4 <main+0x18c>)
 80010ae:	f003 ff31 	bl	8004f14 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2); //rueda derecha.
 80010b2:	2104      	movs	r1, #4
 80010b4:	484f      	ldr	r0, [pc, #316]	; (80011f4 <main+0x18c>)
 80010b6:	f003 ff2d 	bl	8004f14 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start(&htim5); //control del SR-04.
 80010ba:	484f      	ldr	r0, [pc, #316]	; (80011f8 <main+0x190>)
 80010bc:	f003 fead 	bl	8004e1a <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1); //para el pulso del trigger.
 80010c0:	2100      	movs	r1, #0
 80010c2:	484d      	ldr	r0, [pc, #308]	; (80011f8 <main+0x190>)
 80010c4:	f003 ff26 	bl	8004f14 <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_3); //para capturar el eco (flanco ascendente).
 80010c8:	2108      	movs	r1, #8
 80010ca:	484b      	ldr	r0, [pc, #300]	; (80011f8 <main+0x190>)
 80010cc:	f003 ff96 	bl	8004ffc <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_4); //para capturar el eco (flanco descendente).
 80010d0:	210c      	movs	r1, #12
 80010d2:	4849      	ldr	r0, [pc, #292]	; (80011f8 <main+0x190>)
 80010d4:	f003 ff92 	bl	8004ffc <HAL_TIM_IC_Start_IT>

  mpu9265_Init(&hi2c1);
 80010d8:	4848      	ldr	r0, [pc, #288]	; (80011fc <main+0x194>)
 80010da:	f000 ffe1 	bl	80020a0 <mpu9265_Init>


  HAL_UART_Receive(&huart7, rxUart, 4, 500);
 80010de:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80010e2:	2204      	movs	r2, #4
 80010e4:	4946      	ldr	r1, [pc, #280]	; (8001200 <main+0x198>)
 80010e6:	4847      	ldr	r0, [pc, #284]	; (8001204 <main+0x19c>)
 80010e8:	f005 f847 	bl	800617a <HAL_UART_Receive>

  if (rxUart[0] == HOLA){
 80010ec:	4b44      	ldr	r3, [pc, #272]	; (8001200 <main+0x198>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d11d      	bne.n	8001130 <main+0xc8>

	  if (!rxUart[3]){
 80010f4:	4b42      	ldr	r3, [pc, #264]	; (8001200 <main+0x198>)
 80010f6:	78db      	ldrb	r3, [r3, #3]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d10b      	bne.n	8001114 <main+0xac>
		  txUart[0] = CMD_ERROR;
 80010fc:	4b42      	ldr	r3, [pc, #264]	; (8001208 <main+0x1a0>)
 80010fe:	2204      	movs	r2, #4
 8001100:	701a      	strb	r2, [r3, #0]
		  txUart[3] = '\0';
 8001102:	4b41      	ldr	r3, [pc, #260]	; (8001208 <main+0x1a0>)
 8001104:	2200      	movs	r2, #0
 8001106:	70da      	strb	r2, [r3, #3]
		  HAL_UART_Transmit_IT(&huart7, txUart, 4);
 8001108:	2204      	movs	r2, #4
 800110a:	493f      	ldr	r1, [pc, #252]	; (8001208 <main+0x1a0>)
 800110c:	483d      	ldr	r0, [pc, #244]	; (8001204 <main+0x19c>)
 800110e:	f005 f8da 	bl	80062c6 <HAL_UART_Transmit_IT>
 8001112:	e00d      	b.n	8001130 <main+0xc8>
	  } else {
		  esp01Presente = 1;
 8001114:	4b3d      	ldr	r3, [pc, #244]	; (800120c <main+0x1a4>)
 8001116:	2201      	movs	r2, #1
 8001118:	701a      	strb	r2, [r3, #0]
		  txUart[0] = HOLA;
 800111a:	4b3b      	ldr	r3, [pc, #236]	; (8001208 <main+0x1a0>)
 800111c:	2201      	movs	r2, #1
 800111e:	701a      	strb	r2, [r3, #0]
		  txUart[3] = '\0';
 8001120:	4b39      	ldr	r3, [pc, #228]	; (8001208 <main+0x1a0>)
 8001122:	2200      	movs	r2, #0
 8001124:	70da      	strb	r2, [r3, #3]
		  HAL_UART_Transmit_IT(&huart7, txUart, 4);
 8001126:	2204      	movs	r2, #4
 8001128:	4937      	ldr	r1, [pc, #220]	; (8001208 <main+0x1a0>)
 800112a:	4836      	ldr	r0, [pc, #216]	; (8001204 <main+0x19c>)
 800112c:	f005 f8cb 	bl	80062c6 <HAL_UART_Transmit_IT>
	  }

  }

  HAL_UART_Receive_IT(&huart7, rxUart, 4);
 8001130:	2204      	movs	r2, #4
 8001132:	4933      	ldr	r1, [pc, #204]	; (8001200 <main+0x198>)
 8001134:	4833      	ldr	r0, [pc, #204]	; (8001204 <main+0x19c>)
 8001136:	f005 f90b 	bl	8006350 <HAL_UART_Receive_IT>

  if (!esp01Presente) {
 800113a:	4b34      	ldr	r3, [pc, #208]	; (800120c <main+0x1a4>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d103      	bne.n	800114a <main+0xe2>
	  modoFuncionamiento = AUTOMATICO;
 8001142:	4b33      	ldr	r3, [pc, #204]	; (8001210 <main+0x1a8>)
 8001144:	2200      	movs	r2, #0
 8001146:	701a      	strb	r2, [r3, #0]
 8001148:	e002      	b.n	8001150 <main+0xe8>
  }else{
	  modoFuncionamiento = MANUAL;
 800114a:	4b31      	ldr	r3, [pc, #196]	; (8001210 <main+0x1a8>)
 800114c:	2201      	movs	r2, #1
 800114e:	701a      	strb	r2, [r3, #0]
		  }
	  }
	  last_button = read_button;
	  */

	  if (flag_cmd != 0){
 8001150:	4b30      	ldr	r3, [pc, #192]	; (8001214 <main+0x1ac>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d004      	beq.n	8001162 <main+0xfa>
		  check_rxUart();
 8001158:	f000 fdce 	bl	8001cf8 <check_rxUart>
		  flag_cmd = 0;
 800115c:	4b2d      	ldr	r3, [pc, #180]	; (8001214 <main+0x1ac>)
 800115e:	2200      	movs	r2, #0
 8001160:	701a      	strb	r2, [r3, #0]
	  }

	  SR_04();
 8001162:	f000 f92b 	bl	80013bc <SR_04>
	  sensores();
 8001166:	f000 f96f 	bl	8001448 <sensores>
	  modo_funcionamiento();
 800116a:	f000 ff7b 	bl	8002064 <modo_funcionamiento>

	  if (desbordeTIM7 > 21){
 800116e:	4b2a      	ldr	r3, [pc, #168]	; (8001218 <main+0x1b0>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2b15      	cmp	r3, #21
 8001174:	d90a      	bls.n	800118c <main+0x124>
		  flag_encoders = 1;
 8001176:	4b29      	ldr	r3, [pc, #164]	; (800121c <main+0x1b4>)
 8001178:	2201      	movs	r2, #1
 800117a:	701a      	strb	r2, [r3, #0]
		  desbordeTIM7 = 0;
 800117c:	4b26      	ldr	r3, [pc, #152]	; (8001218 <main+0x1b0>)
 800117e:	2200      	movs	r2, #0
 8001180:	701a      	strb	r2, [r3, #0]

		  TRIG_SR04;
 8001182:	4b1d      	ldr	r3, [pc, #116]	; (80011f8 <main+0x190>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f06f 020a 	mvn.w	r2, #10
 800118a:	625a      	str	r2, [r3, #36]	; 0x24
	  }

	  if (desbordeTIM7 != 0){
 800118c:	4b22      	ldr	r3, [pc, #136]	; (8001218 <main+0x1b0>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d0dd      	beq.n	8001150 <main+0xe8>
		  periodo_Encoder += desbordeTIM7;
 8001194:	4b22      	ldr	r3, [pc, #136]	; (8001220 <main+0x1b8>)
 8001196:	781a      	ldrb	r2, [r3, #0]
 8001198:	4b1f      	ldr	r3, [pc, #124]	; (8001218 <main+0x1b0>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	4413      	add	r3, r2
 800119e:	b2da      	uxtb	r2, r3
 80011a0:	4b1f      	ldr	r3, [pc, #124]	; (8001220 <main+0x1b8>)
 80011a2:	701a      	strb	r2, [r3, #0]
		  periodo_SR04 += desbordeTIM7;
 80011a4:	4b1f      	ldr	r3, [pc, #124]	; (8001224 <main+0x1bc>)
 80011a6:	781a      	ldrb	r2, [r3, #0]
 80011a8:	4b1b      	ldr	r3, [pc, #108]	; (8001218 <main+0x1b0>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	4413      	add	r3, r2
 80011ae:	b2da      	uxtb	r2, r3
 80011b0:	4b1c      	ldr	r3, [pc, #112]	; (8001224 <main+0x1bc>)
 80011b2:	701a      	strb	r2, [r3, #0]
		  desbordeTIM7 = 0;
 80011b4:	4b18      	ldr	r3, [pc, #96]	; (8001218 <main+0x1b0>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	701a      	strb	r2, [r3, #0]
		  if (periodo_Encoder > 21){ // en 10 * ms
 80011ba:	4b19      	ldr	r3, [pc, #100]	; (8001220 <main+0x1b8>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	2b15      	cmp	r3, #21
 80011c0:	d905      	bls.n	80011ce <main+0x166>
			  flag_encoders = 1;
 80011c2:	4b16      	ldr	r3, [pc, #88]	; (800121c <main+0x1b4>)
 80011c4:	2201      	movs	r2, #1
 80011c6:	701a      	strb	r2, [r3, #0]
			  periodo_Encoder = 0;
 80011c8:	4b15      	ldr	r3, [pc, #84]	; (8001220 <main+0x1b8>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	701a      	strb	r2, [r3, #0]
		  }
		  if (periodo_SR04 > 21){
 80011ce:	4b15      	ldr	r3, [pc, #84]	; (8001224 <main+0x1bc>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	2b15      	cmp	r3, #21
 80011d4:	d9bc      	bls.n	8001150 <main+0xe8>
			  TRIG_SR04;
 80011d6:	4b08      	ldr	r3, [pc, #32]	; (80011f8 <main+0x190>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f06f 020a 	mvn.w	r2, #10
 80011de:	625a      	str	r2, [r3, #36]	; 0x24
			  periodo_SR04 = 0;
 80011e0:	4b10      	ldr	r3, [pc, #64]	; (8001224 <main+0x1bc>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	701a      	strb	r2, [r3, #0]
	  if (flag_cmd != 0){
 80011e6:	e7b3      	b.n	8001150 <main+0xe8>
 80011e8:	200001f4 	.word	0x200001f4
 80011ec:	200001b4 	.word	0x200001b4
 80011f0:	20000174 	.word	0x20000174
 80011f4:	200000f4 	.word	0x200000f4
 80011f8:	20000134 	.word	0x20000134
 80011fc:	20000068 	.word	0x20000068
 8001200:	200000c4 	.word	0x200000c4
 8001204:	20000234 	.word	0x20000234
 8001208:	200000c8 	.word	0x200000c8
 800120c:	2000002d 	.word	0x2000002d
 8001210:	20000000 	.word	0x20000000
 8001214:	2000002c 	.word	0x2000002c
 8001218:	20000039 	.word	0x20000039
 800121c:	2000004e 	.word	0x2000004e
 8001220:	2000003a 	.word	0x2000003a
 8001224:	2000003b 	.word	0x2000003b

08001228 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b094      	sub	sp, #80	; 0x50
 800122c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800122e:	f107 0320 	add.w	r3, r7, #32
 8001232:	2230      	movs	r2, #48	; 0x30
 8001234:	2100      	movs	r1, #0
 8001236:	4618      	mov	r0, r3
 8001238:	f005 ff00 	bl	800703c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800123c:	f107 030c 	add.w	r3, r7, #12
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
 800124a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800124c:	2300      	movs	r3, #0
 800124e:	60bb      	str	r3, [r7, #8]
 8001250:	4b2c      	ldr	r3, [pc, #176]	; (8001304 <SystemClock_Config+0xdc>)
 8001252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001254:	4a2b      	ldr	r2, [pc, #172]	; (8001304 <SystemClock_Config+0xdc>)
 8001256:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800125a:	6413      	str	r3, [r2, #64]	; 0x40
 800125c:	4b29      	ldr	r3, [pc, #164]	; (8001304 <SystemClock_Config+0xdc>)
 800125e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001260:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001264:	60bb      	str	r3, [r7, #8]
 8001266:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001268:	2300      	movs	r3, #0
 800126a:	607b      	str	r3, [r7, #4]
 800126c:	4b26      	ldr	r3, [pc, #152]	; (8001308 <SystemClock_Config+0xe0>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a25      	ldr	r2, [pc, #148]	; (8001308 <SystemClock_Config+0xe0>)
 8001272:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001276:	6013      	str	r3, [r2, #0]
 8001278:	4b23      	ldr	r3, [pc, #140]	; (8001308 <SystemClock_Config+0xe0>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001280:	607b      	str	r3, [r7, #4]
 8001282:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001284:	2309      	movs	r3, #9
 8001286:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001288:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800128c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800128e:	2301      	movs	r3, #1
 8001290:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001292:	2302      	movs	r3, #2
 8001294:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001296:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800129a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800129c:	2304      	movs	r3, #4
 800129e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80012a0:	23b4      	movs	r3, #180	; 0xb4
 80012a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012a4:	2302      	movs	r3, #2
 80012a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012a8:	2304      	movs	r3, #4
 80012aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012ac:	f107 0320 	add.w	r3, r7, #32
 80012b0:	4618      	mov	r0, r3
 80012b2:	f003 f925 	bl	8004500 <HAL_RCC_OscConfig>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80012bc:	f000 fee8 	bl	8002090 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80012c0:	f003 f8ce 	bl	8004460 <HAL_PWREx_EnableOverDrive>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80012ca:	f000 fee1 	bl	8002090 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012ce:	230f      	movs	r3, #15
 80012d0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012d2:	2302      	movs	r3, #2
 80012d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012d6:	2300      	movs	r3, #0
 80012d8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012da:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012e4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012e6:	f107 030c 	add.w	r3, r7, #12
 80012ea:	2105      	movs	r1, #5
 80012ec:	4618      	mov	r0, r3
 80012ee:	f003 fb77 	bl	80049e0 <HAL_RCC_ClockConfig>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80012f8:	f000 feca 	bl	8002090 <Error_Handler>
  }
}
 80012fc:	bf00      	nop
 80012fe:	3750      	adds	r7, #80	; 0x50
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40023800 	.word	0x40023800
 8001308:	40007000 	.word	0x40007000

0800130c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
	if (htim->Instance==TIM7){
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a07      	ldr	r2, [pc, #28]	; (8001338 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d105      	bne.n	800132a <HAL_TIM_PeriodElapsedCallback+0x1e>
		desbordeTIM7++;
 800131e:	4b07      	ldr	r3, [pc, #28]	; (800133c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	3301      	adds	r3, #1
 8001324:	b2da      	uxtb	r2, r3
 8001326:	4b05      	ldr	r3, [pc, #20]	; (800133c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001328:	701a      	strb	r2, [r3, #0]
	}
}
 800132a:	bf00      	nop
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	40001400 	.word	0x40001400
 800133c:	20000039 	.word	0x20000039

08001340 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3){
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	7f1b      	ldrb	r3, [r3, #28]
 800134c:	2b04      	cmp	r3, #4
 800134e:	d10a      	bne.n	8001366 <HAL_TIM_IC_CaptureCallback+0x26>
		ic1 = htim->Instance->CCR3;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001356:	4a0e      	ldr	r2, [pc, #56]	; (8001390 <HAL_TIM_IC_CaptureCallback+0x50>)
 8001358:	6013      	str	r3, [r2, #0]
		flancoEco++;
 800135a:	4b0e      	ldr	r3, [pc, #56]	; (8001394 <HAL_TIM_IC_CaptureCallback+0x54>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	3301      	adds	r3, #1
 8001360:	b2da      	uxtb	r2, r3
 8001362:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <HAL_TIM_IC_CaptureCallback+0x54>)
 8001364:	701a      	strb	r2, [r3, #0]
	}

	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4){
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	7f1b      	ldrb	r3, [r3, #28]
 800136a:	2b08      	cmp	r3, #8
 800136c:	d10a      	bne.n	8001384 <HAL_TIM_IC_CaptureCallback+0x44>
		ic2 = htim->Instance->CCR4;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001374:	4a08      	ldr	r2, [pc, #32]	; (8001398 <HAL_TIM_IC_CaptureCallback+0x58>)
 8001376:	6013      	str	r3, [r2, #0]
		flancoEco++;
 8001378:	4b06      	ldr	r3, [pc, #24]	; (8001394 <HAL_TIM_IC_CaptureCallback+0x54>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	3301      	adds	r3, #1
 800137e:	b2da      	uxtb	r2, r3
 8001380:	4b04      	ldr	r3, [pc, #16]	; (8001394 <HAL_TIM_IC_CaptureCallback+0x54>)
 8001382:	701a      	strb	r2, [r3, #0]
	}
}
 8001384:	bf00      	nop
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr
 8001390:	2000003c 	.word	0x2000003c
 8001394:	20000044 	.word	0x20000044
 8001398:	20000040 	.word	0x20000040

0800139c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
	flag_cmd = 1;
 80013a4:	4b04      	ldr	r3, [pc, #16]	; (80013b8 <HAL_UART_RxCpltCallback+0x1c>)
 80013a6:	2201      	movs	r2, #1
 80013a8:	701a      	strb	r2, [r3, #0]
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	2000002c 	.word	0x2000002c

080013bc <SR_04>:


void SR_04 (void){
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0

	switch (flancoEco){
 80013c0:	4b1b      	ldr	r3, [pc, #108]	; (8001430 <SR_04+0x74>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	db29      	blt.n	800141c <SR_04+0x60>
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	dd2c      	ble.n	8001426 <SR_04+0x6a>
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d125      	bne.n	800141c <SR_04+0x60>
		case 0:
		case 1:
			return;
		case 2:
			cuentaPulsos = (int32_t)(ic2 - ic1);
 80013d0:	4b18      	ldr	r3, [pc, #96]	; (8001434 <SR_04+0x78>)
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	4b18      	ldr	r3, [pc, #96]	; (8001438 <SR_04+0x7c>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	461a      	mov	r2, r3
 80013dc:	4b17      	ldr	r3, [pc, #92]	; (800143c <SR_04+0x80>)
 80013de:	601a      	str	r2, [r3, #0]
			if (cuentaPulsos < 23310){
 80013e0:	4b16      	ldr	r3, [pc, #88]	; (800143c <SR_04+0x80>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f645 320d 	movw	r2, #23309	; 0x5b0d
 80013e8:	4293      	cmp	r3, r2
 80013ea:	dc0f      	bgt.n	800140c <SR_04+0x50>
				distanciaSR04 = cuentaPulsos * 34 / 2000;
 80013ec:	4b13      	ldr	r3, [pc, #76]	; (800143c <SR_04+0x80>)
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	4613      	mov	r3, r2
 80013f2:	011b      	lsls	r3, r3, #4
 80013f4:	4413      	add	r3, r2
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	4a11      	ldr	r2, [pc, #68]	; (8001440 <SR_04+0x84>)
 80013fa:	fb82 1203 	smull	r1, r2, r2, r3
 80013fe:	11d2      	asrs	r2, r2, #7
 8001400:	17db      	asrs	r3, r3, #31
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	b29a      	uxth	r2, r3
 8001406:	4b0f      	ldr	r3, [pc, #60]	; (8001444 <SR_04+0x88>)
 8001408:	801a      	strh	r2, [r3, #0]
 800140a:	e003      	b.n	8001414 <SR_04+0x58>
			}else{
				distanciaSR04 = 400;
 800140c:	4b0d      	ldr	r3, [pc, #52]	; (8001444 <SR_04+0x88>)
 800140e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001412:	801a      	strh	r2, [r3, #0]
			}
			flancoEco = 0;
 8001414:	4b06      	ldr	r3, [pc, #24]	; (8001430 <SR_04+0x74>)
 8001416:	2200      	movs	r2, #0
 8001418:	701a      	strb	r2, [r3, #0]
		break;
 800141a:	e005      	b.n	8001428 <SR_04+0x6c>
		default:
			flancoEco = 0;
 800141c:	4b04      	ldr	r3, [pc, #16]	; (8001430 <SR_04+0x74>)
 800141e:	2200      	movs	r2, #0
 8001420:	701a      	strb	r2, [r3, #0]
		break;
 8001422:	bf00      	nop
 8001424:	e000      	b.n	8001428 <SR_04+0x6c>
			return;
 8001426:	bf00      	nop
	} //end switch flancoEco

} //end SR_04()
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	20000044 	.word	0x20000044
 8001434:	20000040 	.word	0x20000040
 8001438:	2000003c 	.word	0x2000003c
 800143c:	20000048 	.word	0x20000048
 8001440:	10624dd3 	.word	0x10624dd3
 8001444:	2000004c 	.word	0x2000004c

08001448 <sensores>:

void sensores (void){
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
	//sensores_dist = SI << 2 | SF << 1 | SD (logica negativa)
	SI = (HAL_GPIO_ReadPin(IN_sensorL_GPIO_Port, IN_sensorL_Pin)) ;
 800144c:	2102      	movs	r1, #2
 800144e:	4817      	ldr	r0, [pc, #92]	; (80014ac <sensores+0x64>)
 8001450:	f001 ffa6 	bl	80033a0 <HAL_GPIO_ReadPin>
 8001454:	4603      	mov	r3, r0
 8001456:	461a      	mov	r2, r3
 8001458:	4b15      	ldr	r3, [pc, #84]	; (80014b0 <sensores+0x68>)
 800145a:	701a      	strb	r2, [r3, #0]
	SD = HAL_GPIO_ReadPin(IN_sensorR_GPIO_Port, IN_sensorR_Pin);
 800145c:	2108      	movs	r1, #8
 800145e:	4813      	ldr	r0, [pc, #76]	; (80014ac <sensores+0x64>)
 8001460:	f001 ff9e 	bl	80033a0 <HAL_GPIO_ReadPin>
 8001464:	4603      	mov	r3, r0
 8001466:	461a      	mov	r2, r3
 8001468:	4b12      	ldr	r3, [pc, #72]	; (80014b4 <sensores+0x6c>)
 800146a:	701a      	strb	r2, [r3, #0]
	if (distanciaSR04 < 25) SF = 0; else SF = 1;
 800146c:	4b12      	ldr	r3, [pc, #72]	; (80014b8 <sensores+0x70>)
 800146e:	881b      	ldrh	r3, [r3, #0]
 8001470:	2b18      	cmp	r3, #24
 8001472:	d803      	bhi.n	800147c <sensores+0x34>
 8001474:	4b11      	ldr	r3, [pc, #68]	; (80014bc <sensores+0x74>)
 8001476:	2200      	movs	r2, #0
 8001478:	701a      	strb	r2, [r3, #0]
 800147a:	e002      	b.n	8001482 <sensores+0x3a>
 800147c:	4b0f      	ldr	r3, [pc, #60]	; (80014bc <sensores+0x74>)
 800147e:	2201      	movs	r2, #1
 8001480:	701a      	strb	r2, [r3, #0]

	sensores_dist = SI << 2 | SF << 1 | SD;
 8001482:	4b0b      	ldr	r3, [pc, #44]	; (80014b0 <sensores+0x68>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	b25a      	sxtb	r2, r3
 800148a:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <sensores+0x74>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	b25b      	sxtb	r3, r3
 8001492:	4313      	orrs	r3, r2
 8001494:	b25a      	sxtb	r2, r3
 8001496:	4b07      	ldr	r3, [pc, #28]	; (80014b4 <sensores+0x6c>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	b25b      	sxtb	r3, r3
 800149c:	4313      	orrs	r3, r2
 800149e:	b25b      	sxtb	r3, r3
 80014a0:	b2da      	uxtb	r2, r3
 80014a2:	4b07      	ldr	r3, [pc, #28]	; (80014c0 <sensores+0x78>)
 80014a4:	701a      	strb	r2, [r3, #0]
} //end sensores()
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40020c00 	.word	0x40020c00
 80014b0:	200000cd 	.word	0x200000cd
 80014b4:	200000cc 	.word	0x200000cc
 80014b8:	2000004c 	.word	0x2000004c
 80014bc:	200000c2 	.word	0x200000c2
 80014c0:	20000038 	.word	0x20000038

080014c4 <movimientoLibre>:
	velLFinal = abs(vl);
	velRFinal = abs(vr);

} //end velocidades()

void movimientoLibre (void){
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0

	if (avance_cant != 0) avance_cant = 0;
 80014c8:	4bba      	ldr	r3, [pc, #744]	; (80017b4 <movimientoLibre+0x2f0>)
 80014ca:	881b      	ldrh	r3, [r3, #0]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d002      	beq.n	80014d6 <movimientoLibre+0x12>
 80014d0:	4bb8      	ldr	r3, [pc, #736]	; (80017b4 <movimientoLibre+0x2f0>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	801a      	strh	r2, [r3, #0]
	if (retroceso_cant != 0) retroceso_cant = 0;
 80014d6:	4bb8      	ldr	r3, [pc, #736]	; (80017b8 <movimientoLibre+0x2f4>)
 80014d8:	881b      	ldrh	r3, [r3, #0]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d002      	beq.n	80014e4 <movimientoLibre+0x20>
 80014de:	4bb6      	ldr	r3, [pc, #728]	; (80017b8 <movimientoLibre+0x2f4>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	801a      	strh	r2, [r3, #0]
	if (giroIzq_cant != 0) giroIzq_cant = 0;
 80014e4:	4bb5      	ldr	r3, [pc, #724]	; (80017bc <movimientoLibre+0x2f8>)
 80014e6:	881b      	ldrh	r3, [r3, #0]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d002      	beq.n	80014f2 <movimientoLibre+0x2e>
 80014ec:	4bb3      	ldr	r3, [pc, #716]	; (80017bc <movimientoLibre+0x2f8>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	801a      	strh	r2, [r3, #0]
	if (giroDer_cant != 0) giroDer_cant = 0;
 80014f2:	4bb3      	ldr	r3, [pc, #716]	; (80017c0 <movimientoLibre+0x2fc>)
 80014f4:	881b      	ldrh	r3, [r3, #0]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d002      	beq.n	8001500 <movimientoLibre+0x3c>
 80014fa:	4bb1      	ldr	r3, [pc, #708]	; (80017c0 <movimientoLibre+0x2fc>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	801a      	strh	r2, [r3, #0]

	switch (status_movimiento) {
 8001500:	4bb0      	ldr	r3, [pc, #704]	; (80017c4 <movimientoLibre+0x300>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	2b06      	cmp	r3, #6
 8001506:	f200 816f 	bhi.w	80017e8 <movimientoLibre+0x324>
 800150a:	a201      	add	r2, pc, #4	; (adr r2, 8001510 <movimientoLibre+0x4c>)
 800150c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001510:	0800152d 	.word	0x0800152d
 8001514:	08001575 	.word	0x08001575
 8001518:	080016b1 	.word	0x080016b1
 800151c:	080015fd 	.word	0x080015fd
 8001520:	08001657 	.word	0x08001657
 8001524:	080016f3 	.word	0x080016f3
 8001528:	08001759 	.word	0x08001759
		case QUIETO:

			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 0);
 800152c:	2200      	movs	r2, #0
 800152e:	2101      	movs	r1, #1
 8001530:	48a5      	ldr	r0, [pc, #660]	; (80017c8 <movimientoLibre+0x304>)
 8001532:	f001 ff4d 	bl	80033d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 0);
 8001536:	2200      	movs	r2, #0
 8001538:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800153c:	48a3      	ldr	r0, [pc, #652]	; (80017cc <movimientoLibre+0x308>)
 800153e:	f001 ff47 	bl	80033d0 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 0);
 8001542:	2200      	movs	r2, #0
 8001544:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001548:	48a0      	ldr	r0, [pc, #640]	; (80017cc <movimientoLibre+0x308>)
 800154a:	f001 ff41 	bl	80033d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 0);
 800154e:	2200      	movs	r2, #0
 8001550:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001554:	489d      	ldr	r0, [pc, #628]	; (80017cc <movimientoLibre+0x308>)
 8001556:	f001 ff3b 	bl	80033d0 <HAL_GPIO_WritePin>

			velL = 0;
 800155a:	4b9d      	ldr	r3, [pc, #628]	; (80017d0 <movimientoLibre+0x30c>)
 800155c:	2200      	movs	r2, #0
 800155e:	701a      	strb	r2, [r3, #0]
			velR = 0;
 8001560:	4b9c      	ldr	r3, [pc, #624]	; (80017d4 <movimientoLibre+0x310>)
 8001562:	2200      	movs	r2, #0
 8001564:	701a      	strb	r2, [r3, #0]
			periodo_Encoder = 0;
 8001566:	4b9c      	ldr	r3, [pc, #624]	; (80017d8 <movimientoLibre+0x314>)
 8001568:	2200      	movs	r2, #0
 800156a:	701a      	strb	r2, [r3, #0]

			status_movimiento = AVANZANDO;
 800156c:	4b95      	ldr	r3, [pc, #596]	; (80017c4 <movimientoLibre+0x300>)
 800156e:	2201      	movs	r2, #1
 8001570:	701a      	strb	r2, [r3, #0]
		break;
 8001572:	e13a      	b.n	80017ea <movimientoLibre+0x326>
		case AVANZANDO:

			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 1);
 8001574:	2201      	movs	r2, #1
 8001576:	2101      	movs	r1, #1
 8001578:	4893      	ldr	r0, [pc, #588]	; (80017c8 <movimientoLibre+0x304>)
 800157a:	f001 ff29 	bl	80033d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 1);
 800157e:	2201      	movs	r2, #1
 8001580:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001584:	4891      	ldr	r0, [pc, #580]	; (80017cc <movimientoLibre+0x308>)
 8001586:	f001 ff23 	bl	80033d0 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 0);
 800158a:	2200      	movs	r2, #0
 800158c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001590:	488e      	ldr	r0, [pc, #568]	; (80017cc <movimientoLibre+0x308>)
 8001592:	f001 ff1d 	bl	80033d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 0);
 8001596:	2200      	movs	r2, #0
 8001598:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800159c:	488b      	ldr	r0, [pc, #556]	; (80017cc <movimientoLibre+0x308>)
 800159e:	f001 ff17 	bl	80033d0 <HAL_GPIO_WritePin>

			velL = 5;
 80015a2:	4b8b      	ldr	r3, [pc, #556]	; (80017d0 <movimientoLibre+0x30c>)
 80015a4:	2205      	movs	r2, #5
 80015a6:	701a      	strb	r2, [r3, #0]
			velR = 5;
 80015a8:	4b8a      	ldr	r3, [pc, #552]	; (80017d4 <movimientoLibre+0x310>)
 80015aa:	2205      	movs	r2, #5
 80015ac:	701a      	strb	r2, [r3, #0]

			switch (sensores_dist) {
 80015ae:	4b8b      	ldr	r3, [pc, #556]	; (80017dc <movimientoLibre+0x318>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	2b06      	cmp	r3, #6
 80015b4:	d820      	bhi.n	80015f8 <movimientoLibre+0x134>
 80015b6:	a201      	add	r2, pc, #4	; (adr r2, 80015bc <movimientoLibre+0xf8>)
 80015b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015bc:	080015e1 	.word	0x080015e1
 80015c0:	080015f1 	.word	0x080015f1
 80015c4:	080015f9 	.word	0x080015f9
 80015c8:	080015e9 	.word	0x080015e9
 80015cc:	080015e1 	.word	0x080015e1
 80015d0:	080015e1 	.word	0x080015e1
 80015d4:	080015d9 	.word	0x080015d9
				case 0b110:
					//agregado para prueba
					//status_movimiento = PIVOTE_IZQ_AVAN;
					status_movimiento = ROTANDO_IZQ;
 80015d8:	4b7a      	ldr	r3, [pc, #488]	; (80017c4 <movimientoLibre+0x300>)
 80015da:	2203      	movs	r2, #3
 80015dc:	701a      	strb	r2, [r3, #0]

				break;
 80015de:	e00c      	b.n	80015fa <movimientoLibre+0x136>
				case 0b101:
				case 0b100:
				case 0b000:
					status_movimiento = ROTANDO_IZQ;
 80015e0:	4b78      	ldr	r3, [pc, #480]	; (80017c4 <movimientoLibre+0x300>)
 80015e2:	2203      	movs	r2, #3
 80015e4:	701a      	strb	r2, [r3, #0]
				break;
 80015e6:	e008      	b.n	80015fa <movimientoLibre+0x136>
				case 0b011:
					//agregado para prueba
					//status_movimiento = PIVOTE_DER_AVAN;
					status_movimiento = ROTANDO_DER;
 80015e8:	4b76      	ldr	r3, [pc, #472]	; (80017c4 <movimientoLibre+0x300>)
 80015ea:	2204      	movs	r2, #4
 80015ec:	701a      	strb	r2, [r3, #0]
				break;
 80015ee:	e004      	b.n	80015fa <movimientoLibre+0x136>
				case 0b001:
					status_movimiento = ROTANDO_DER;
 80015f0:	4b74      	ldr	r3, [pc, #464]	; (80017c4 <movimientoLibre+0x300>)
 80015f2:	2204      	movs	r2, #4
 80015f4:	701a      	strb	r2, [r3, #0]
				break;
 80015f6:	e000      	b.n	80015fa <movimientoLibre+0x136>
				default:
				break;
 80015f8:	bf00      	nop
			} //end switch sensores_dist

		break;
 80015fa:	e0f6      	b.n	80017ea <movimientoLibre+0x326>
		case ROTANDO_IZQ:

			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 0);
 80015fc:	2200      	movs	r2, #0
 80015fe:	2101      	movs	r1, #1
 8001600:	4871      	ldr	r0, [pc, #452]	; (80017c8 <movimientoLibre+0x304>)
 8001602:	f001 fee5 	bl	80033d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 1);
 8001606:	2201      	movs	r2, #1
 8001608:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800160c:	486f      	ldr	r0, [pc, #444]	; (80017cc <movimientoLibre+0x308>)
 800160e:	f001 fedf 	bl	80033d0 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 1);
 8001612:	2201      	movs	r2, #1
 8001614:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001618:	486c      	ldr	r0, [pc, #432]	; (80017cc <movimientoLibre+0x308>)
 800161a:	f001 fed9 	bl	80033d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 0);
 800161e:	2200      	movs	r2, #0
 8001620:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001624:	4869      	ldr	r0, [pc, #420]	; (80017cc <movimientoLibre+0x308>)
 8001626:	f001 fed3 	bl	80033d0 <HAL_GPIO_WritePin>

			velL = 5;
 800162a:	4b69      	ldr	r3, [pc, #420]	; (80017d0 <movimientoLibre+0x30c>)
 800162c:	2205      	movs	r2, #5
 800162e:	701a      	strb	r2, [r3, #0]
			velR = 5;
 8001630:	4b68      	ldr	r3, [pc, #416]	; (80017d4 <movimientoLibre+0x310>)
 8001632:	2205      	movs	r2, #5
 8001634:	701a      	strb	r2, [r3, #0]

			switch (sensores_dist){
 8001636:	4b69      	ldr	r3, [pc, #420]	; (80017dc <movimientoLibre+0x318>)
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	2b03      	cmp	r3, #3
 800163c:	d006      	beq.n	800164c <movimientoLibre+0x188>
 800163e:	2b07      	cmp	r3, #7
 8001640:	d000      	beq.n	8001644 <movimientoLibre+0x180>
					status_movimiento = AVANZANDO;
					break;
				case 0b011:
					status_movimiento = ROTANDO_DER;
				default:
					break;
 8001642:	e006      	b.n	8001652 <movimientoLibre+0x18e>
					status_movimiento = AVANZANDO;
 8001644:	4b5f      	ldr	r3, [pc, #380]	; (80017c4 <movimientoLibre+0x300>)
 8001646:	2201      	movs	r2, #1
 8001648:	701a      	strb	r2, [r3, #0]
					break;
 800164a:	e003      	b.n	8001654 <movimientoLibre+0x190>
					status_movimiento = ROTANDO_DER;
 800164c:	4b5d      	ldr	r3, [pc, #372]	; (80017c4 <movimientoLibre+0x300>)
 800164e:	2204      	movs	r2, #4
 8001650:	701a      	strb	r2, [r3, #0]
					break;
 8001652:	bf00      	nop
			} //end switch sensores_dist

		break;
 8001654:	e0c9      	b.n	80017ea <movimientoLibre+0x326>
		case ROTANDO_DER:
			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 1);
 8001656:	2201      	movs	r2, #1
 8001658:	2101      	movs	r1, #1
 800165a:	485b      	ldr	r0, [pc, #364]	; (80017c8 <movimientoLibre+0x304>)
 800165c:	f001 feb8 	bl	80033d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 0);
 8001660:	2200      	movs	r2, #0
 8001662:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001666:	4859      	ldr	r0, [pc, #356]	; (80017cc <movimientoLibre+0x308>)
 8001668:	f001 feb2 	bl	80033d0 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 0);
 800166c:	2200      	movs	r2, #0
 800166e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001672:	4856      	ldr	r0, [pc, #344]	; (80017cc <movimientoLibre+0x308>)
 8001674:	f001 feac 	bl	80033d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 1);
 8001678:	2201      	movs	r2, #1
 800167a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800167e:	4853      	ldr	r0, [pc, #332]	; (80017cc <movimientoLibre+0x308>)
 8001680:	f001 fea6 	bl	80033d0 <HAL_GPIO_WritePin>

			velL = 5;
 8001684:	4b52      	ldr	r3, [pc, #328]	; (80017d0 <movimientoLibre+0x30c>)
 8001686:	2205      	movs	r2, #5
 8001688:	701a      	strb	r2, [r3, #0]
			velR = 5;
 800168a:	4b52      	ldr	r3, [pc, #328]	; (80017d4 <movimientoLibre+0x310>)
 800168c:	2205      	movs	r2, #5
 800168e:	701a      	strb	r2, [r3, #0]

			switch (sensores_dist){
 8001690:	4b52      	ldr	r3, [pc, #328]	; (80017dc <movimientoLibre+0x318>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	2b06      	cmp	r3, #6
 8001696:	d006      	beq.n	80016a6 <movimientoLibre+0x1e2>
 8001698:	2b07      	cmp	r3, #7
 800169a:	d000      	beq.n	800169e <movimientoLibre+0x1da>
					status_movimiento = AVANZANDO;
					break;
				case 0b110:
					status_movimiento = ROTANDO_IZQ;
				default:
					break;
 800169c:	e006      	b.n	80016ac <movimientoLibre+0x1e8>
					status_movimiento = AVANZANDO;
 800169e:	4b49      	ldr	r3, [pc, #292]	; (80017c4 <movimientoLibre+0x300>)
 80016a0:	2201      	movs	r2, #1
 80016a2:	701a      	strb	r2, [r3, #0]
					break;
 80016a4:	e003      	b.n	80016ae <movimientoLibre+0x1ea>
					status_movimiento = ROTANDO_IZQ;
 80016a6:	4b47      	ldr	r3, [pc, #284]	; (80017c4 <movimientoLibre+0x300>)
 80016a8:	2203      	movs	r2, #3
 80016aa:	701a      	strb	r2, [r3, #0]
					break;
 80016ac:	bf00      	nop
			} //end switch sensores_dist

		break;
 80016ae:	e09c      	b.n	80017ea <movimientoLibre+0x326>
		case RETROCEDIENDO:
			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 0);
 80016b0:	2200      	movs	r2, #0
 80016b2:	2101      	movs	r1, #1
 80016b4:	4844      	ldr	r0, [pc, #272]	; (80017c8 <movimientoLibre+0x304>)
 80016b6:	f001 fe8b 	bl	80033d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 0);
 80016ba:	2200      	movs	r2, #0
 80016bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016c0:	4842      	ldr	r0, [pc, #264]	; (80017cc <movimientoLibre+0x308>)
 80016c2:	f001 fe85 	bl	80033d0 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 1);
 80016c6:	2201      	movs	r2, #1
 80016c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016cc:	483f      	ldr	r0, [pc, #252]	; (80017cc <movimientoLibre+0x308>)
 80016ce:	f001 fe7f 	bl	80033d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 1);
 80016d2:	2201      	movs	r2, #1
 80016d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016d8:	483c      	ldr	r0, [pc, #240]	; (80017cc <movimientoLibre+0x308>)
 80016da:	f001 fe79 	bl	80033d0 <HAL_GPIO_WritePin>

			velL = 5;
 80016de:	4b3c      	ldr	r3, [pc, #240]	; (80017d0 <movimientoLibre+0x30c>)
 80016e0:	2205      	movs	r2, #5
 80016e2:	701a      	strb	r2, [r3, #0]
			velR = 5;
 80016e4:	4b3b      	ldr	r3, [pc, #236]	; (80017d4 <movimientoLibre+0x310>)
 80016e6:	2205      	movs	r2, #5
 80016e8:	701a      	strb	r2, [r3, #0]

			status_movimiento = AVANZANDO;
 80016ea:	4b36      	ldr	r3, [pc, #216]	; (80017c4 <movimientoLibre+0x300>)
 80016ec:	2201      	movs	r2, #1
 80016ee:	701a      	strb	r2, [r3, #0]
			break;
 80016f0:	e07b      	b.n	80017ea <movimientoLibre+0x326>
		case PIVOTE_IZQ_AVAN:
			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 0);
 80016f2:	2200      	movs	r2, #0
 80016f4:	2101      	movs	r1, #1
 80016f6:	4834      	ldr	r0, [pc, #208]	; (80017c8 <movimientoLibre+0x304>)
 80016f8:	f001 fe6a 	bl	80033d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 1);
 80016fc:	2201      	movs	r2, #1
 80016fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001702:	4832      	ldr	r0, [pc, #200]	; (80017cc <movimientoLibre+0x308>)
 8001704:	f001 fe64 	bl	80033d0 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 0);
 8001708:	2200      	movs	r2, #0
 800170a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800170e:	482f      	ldr	r0, [pc, #188]	; (80017cc <movimientoLibre+0x308>)
 8001710:	f001 fe5e 	bl	80033d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 0);
 8001714:	2200      	movs	r2, #0
 8001716:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800171a:	482c      	ldr	r0, [pc, #176]	; (80017cc <movimientoLibre+0x308>)
 800171c:	f001 fe58 	bl	80033d0 <HAL_GPIO_WritePin>

			velL = 0;
 8001720:	4b2b      	ldr	r3, [pc, #172]	; (80017d0 <movimientoLibre+0x30c>)
 8001722:	2200      	movs	r2, #0
 8001724:	701a      	strb	r2, [r3, #0]
			velR = 5;
 8001726:	4b2b      	ldr	r3, [pc, #172]	; (80017d4 <movimientoLibre+0x310>)
 8001728:	2205      	movs	r2, #5
 800172a:	701a      	strb	r2, [r3, #0]

			switch (sensores_dist){
 800172c:	4b2b      	ldr	r3, [pc, #172]	; (80017dc <movimientoLibre+0x318>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	2b04      	cmp	r3, #4
 8001732:	d00c      	beq.n	800174e <movimientoLibre+0x28a>
 8001734:	2b07      	cmp	r3, #7
 8001736:	d002      	beq.n	800173e <movimientoLibre+0x27a>
 8001738:	2b03      	cmp	r3, #3
 800173a:	d004      	beq.n	8001746 <movimientoLibre+0x282>
					status_movimiento = ROTANDO_DER;
				break;
				case 0b100:
					status_movimiento = ROTANDO_IZQ;
				default:
				break;
 800173c:	e00a      	b.n	8001754 <movimientoLibre+0x290>
					status_movimiento = AVANZANDO;
 800173e:	4b21      	ldr	r3, [pc, #132]	; (80017c4 <movimientoLibre+0x300>)
 8001740:	2201      	movs	r2, #1
 8001742:	701a      	strb	r2, [r3, #0]
				break;
 8001744:	e007      	b.n	8001756 <movimientoLibre+0x292>
					status_movimiento = ROTANDO_DER;
 8001746:	4b1f      	ldr	r3, [pc, #124]	; (80017c4 <movimientoLibre+0x300>)
 8001748:	2204      	movs	r2, #4
 800174a:	701a      	strb	r2, [r3, #0]
				break;
 800174c:	e003      	b.n	8001756 <movimientoLibre+0x292>
					status_movimiento = ROTANDO_IZQ;
 800174e:	4b1d      	ldr	r3, [pc, #116]	; (80017c4 <movimientoLibre+0x300>)
 8001750:	2203      	movs	r2, #3
 8001752:	701a      	strb	r2, [r3, #0]
				break;
 8001754:	bf00      	nop
			} //end switch sensores_dist

		break;
 8001756:	e048      	b.n	80017ea <movimientoLibre+0x326>
		case PIVOTE_DER_AVAN:
			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 1);
 8001758:	2201      	movs	r2, #1
 800175a:	2101      	movs	r1, #1
 800175c:	481a      	ldr	r0, [pc, #104]	; (80017c8 <movimientoLibre+0x304>)
 800175e:	f001 fe37 	bl	80033d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 0);
 8001762:	2200      	movs	r2, #0
 8001764:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001768:	4818      	ldr	r0, [pc, #96]	; (80017cc <movimientoLibre+0x308>)
 800176a:	f001 fe31 	bl	80033d0 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 0);
 800176e:	2200      	movs	r2, #0
 8001770:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001774:	4815      	ldr	r0, [pc, #84]	; (80017cc <movimientoLibre+0x308>)
 8001776:	f001 fe2b 	bl	80033d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 0);
 800177a:	2200      	movs	r2, #0
 800177c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001780:	4812      	ldr	r0, [pc, #72]	; (80017cc <movimientoLibre+0x308>)
 8001782:	f001 fe25 	bl	80033d0 <HAL_GPIO_WritePin>

			velL = 5;
 8001786:	4b12      	ldr	r3, [pc, #72]	; (80017d0 <movimientoLibre+0x30c>)
 8001788:	2205      	movs	r2, #5
 800178a:	701a      	strb	r2, [r3, #0]
			velR = 0;
 800178c:	4b11      	ldr	r3, [pc, #68]	; (80017d4 <movimientoLibre+0x310>)
 800178e:	2200      	movs	r2, #0
 8001790:	701a      	strb	r2, [r3, #0]

			switch (sensores_dist){
 8001792:	4b12      	ldr	r3, [pc, #72]	; (80017dc <movimientoLibre+0x318>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	2b06      	cmp	r3, #6
 8001798:	d008      	beq.n	80017ac <movimientoLibre+0x2e8>
 800179a:	2b07      	cmp	r3, #7
 800179c:	d002      	beq.n	80017a4 <movimientoLibre+0x2e0>
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d01e      	beq.n	80017e0 <movimientoLibre+0x31c>
					status_movimiento = ROTANDO_IZQ;
				break;
				case 0b001:
					status_movimiento = ROTANDO_DER;
				default:
				break;
 80017a2:	e020      	b.n	80017e6 <movimientoLibre+0x322>
					status_movimiento = AVANZANDO;
 80017a4:	4b07      	ldr	r3, [pc, #28]	; (80017c4 <movimientoLibre+0x300>)
 80017a6:	2201      	movs	r2, #1
 80017a8:	701a      	strb	r2, [r3, #0]
				break;
 80017aa:	e01d      	b.n	80017e8 <movimientoLibre+0x324>
					status_movimiento = ROTANDO_IZQ;
 80017ac:	4b05      	ldr	r3, [pc, #20]	; (80017c4 <movimientoLibre+0x300>)
 80017ae:	2203      	movs	r2, #3
 80017b0:	701a      	strb	r2, [r3, #0]
				break;
 80017b2:	e019      	b.n	80017e8 <movimientoLibre+0x324>
 80017b4:	20000030 	.word	0x20000030
 80017b8:	20000032 	.word	0x20000032
 80017bc:	20000034 	.word	0x20000034
 80017c0:	20000036 	.word	0x20000036
 80017c4:	2000002e 	.word	0x2000002e
 80017c8:	40020c00 	.word	0x40020c00
 80017cc:	40020800 	.word	0x40020800
 80017d0:	20000001 	.word	0x20000001
 80017d4:	20000002 	.word	0x20000002
 80017d8:	2000003a 	.word	0x2000003a
 80017dc:	20000038 	.word	0x20000038
					status_movimiento = ROTANDO_DER;
 80017e0:	4b03      	ldr	r3, [pc, #12]	; (80017f0 <movimientoLibre+0x32c>)
 80017e2:	2204      	movs	r2, #4
 80017e4:	701a      	strb	r2, [r3, #0]
				break;
 80017e6:	bf00      	nop
			} //end switch sensores_dist

		default:
		break;
 80017e8:	bf00      	nop

	} //fin switch status_movimiento

} //fin movimientoLibre()
 80017ea:	bf00      	nop
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	2000002e 	.word	0x2000002e

080017f4 <movimientoRC>:

void movimientoRC (void){
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0

	if (!avance_cant && !retroceso_cant && !giroIzq_cant && !giroDer_cant ){
 80017f8:	4bb2      	ldr	r3, [pc, #712]	; (8001ac4 <movimientoRC+0x2d0>)
 80017fa:	881b      	ldrh	r3, [r3, #0]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d10e      	bne.n	800181e <movimientoRC+0x2a>
 8001800:	4bb1      	ldr	r3, [pc, #708]	; (8001ac8 <movimientoRC+0x2d4>)
 8001802:	881b      	ldrh	r3, [r3, #0]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d10a      	bne.n	800181e <movimientoRC+0x2a>
 8001808:	4bb0      	ldr	r3, [pc, #704]	; (8001acc <movimientoRC+0x2d8>)
 800180a:	881b      	ldrh	r3, [r3, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d106      	bne.n	800181e <movimientoRC+0x2a>
 8001810:	4baf      	ldr	r3, [pc, #700]	; (8001ad0 <movimientoRC+0x2dc>)
 8001812:	881b      	ldrh	r3, [r3, #0]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d102      	bne.n	800181e <movimientoRC+0x2a>
		status_movimiento = QUIETO;
 8001818:	4bae      	ldr	r3, [pc, #696]	; (8001ad4 <movimientoRC+0x2e0>)
 800181a:	2200      	movs	r2, #0
 800181c:	701a      	strb	r2, [r3, #0]
	}

	switch (status_movimiento) {
 800181e:	4bad      	ldr	r3, [pc, #692]	; (8001ad4 <movimientoRC+0x2e0>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	2b05      	cmp	r3, #5
 8001824:	f200 81d3 	bhi.w	8001bce <movimientoRC+0x3da>
 8001828:	a201      	add	r2, pc, #4	; (adr r2, 8001830 <movimientoRC+0x3c>)
 800182a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800182e:	bf00      	nop
 8001830:	08001849 	.word	0x08001849
 8001834:	080018e9 	.word	0x080018e9
 8001838:	08001b21 	.word	0x08001b21
 800183c:	0800199b 	.word	0x0800199b
 8001840:	08001a4d 	.word	0x08001a4d
 8001844:	08001bcf 	.word	0x08001bcf
		case QUIETO:

			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 0);
 8001848:	2200      	movs	r2, #0
 800184a:	2101      	movs	r1, #1
 800184c:	48a2      	ldr	r0, [pc, #648]	; (8001ad8 <movimientoRC+0x2e4>)
 800184e:	f001 fdbf 	bl	80033d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 0);
 8001852:	2200      	movs	r2, #0
 8001854:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001858:	48a0      	ldr	r0, [pc, #640]	; (8001adc <movimientoRC+0x2e8>)
 800185a:	f001 fdb9 	bl	80033d0 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 0);
 800185e:	2200      	movs	r2, #0
 8001860:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001864:	489d      	ldr	r0, [pc, #628]	; (8001adc <movimientoRC+0x2e8>)
 8001866:	f001 fdb3 	bl	80033d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 0);
 800186a:	2200      	movs	r2, #0
 800186c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001870:	489a      	ldr	r0, [pc, #616]	; (8001adc <movimientoRC+0x2e8>)
 8001872:	f001 fdad 	bl	80033d0 <HAL_GPIO_WritePin>

			if (avance_cant != 0){
 8001876:	4b93      	ldr	r3, [pc, #588]	; (8001ac4 <movimientoRC+0x2d0>)
 8001878:	881b      	ldrh	r3, [r3, #0]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d009      	beq.n	8001892 <movimientoRC+0x9e>
				acum_encoderL = 0;
 800187e:	4b98      	ldr	r3, [pc, #608]	; (8001ae0 <movimientoRC+0x2ec>)
 8001880:	2200      	movs	r2, #0
 8001882:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 8001884:	4b97      	ldr	r3, [pc, #604]	; (8001ae4 <movimientoRC+0x2f0>)
 8001886:	2200      	movs	r2, #0
 8001888:	801a      	strh	r2, [r3, #0]
				status_movimiento = AVANZANDO;
 800188a:	4b92      	ldr	r3, [pc, #584]	; (8001ad4 <movimientoRC+0x2e0>)
 800188c:	2201      	movs	r2, #1
 800188e:	701a      	strb	r2, [r3, #0]
				break;
 8001890:	e1b0      	b.n	8001bf4 <movimientoRC+0x400>
			}

			if (retroceso_cant != 0){
 8001892:	4b8d      	ldr	r3, [pc, #564]	; (8001ac8 <movimientoRC+0x2d4>)
 8001894:	881b      	ldrh	r3, [r3, #0]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d009      	beq.n	80018ae <movimientoRC+0xba>
				acum_encoderL = 0;
 800189a:	4b91      	ldr	r3, [pc, #580]	; (8001ae0 <movimientoRC+0x2ec>)
 800189c:	2200      	movs	r2, #0
 800189e:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 80018a0:	4b90      	ldr	r3, [pc, #576]	; (8001ae4 <movimientoRC+0x2f0>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	801a      	strh	r2, [r3, #0]
				status_movimiento = RETROCEDIENDO;
 80018a6:	4b8b      	ldr	r3, [pc, #556]	; (8001ad4 <movimientoRC+0x2e0>)
 80018a8:	2202      	movs	r2, #2
 80018aa:	701a      	strb	r2, [r3, #0]
				break;
 80018ac:	e1a2      	b.n	8001bf4 <movimientoRC+0x400>
			}

			if (giroIzq_cant != 0){
 80018ae:	4b87      	ldr	r3, [pc, #540]	; (8001acc <movimientoRC+0x2d8>)
 80018b0:	881b      	ldrh	r3, [r3, #0]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d009      	beq.n	80018ca <movimientoRC+0xd6>
				acum_encoderL = 0;
 80018b6:	4b8a      	ldr	r3, [pc, #552]	; (8001ae0 <movimientoRC+0x2ec>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 80018bc:	4b89      	ldr	r3, [pc, #548]	; (8001ae4 <movimientoRC+0x2f0>)
 80018be:	2200      	movs	r2, #0
 80018c0:	801a      	strh	r2, [r3, #0]
				status_movimiento = ROTANDO_IZQ;
 80018c2:	4b84      	ldr	r3, [pc, #528]	; (8001ad4 <movimientoRC+0x2e0>)
 80018c4:	2203      	movs	r2, #3
 80018c6:	701a      	strb	r2, [r3, #0]
				break;
 80018c8:	e194      	b.n	8001bf4 <movimientoRC+0x400>
			}

			if (giroDer_cant != 0){
 80018ca:	4b81      	ldr	r3, [pc, #516]	; (8001ad0 <movimientoRC+0x2dc>)
 80018cc:	881b      	ldrh	r3, [r3, #0]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	f000 817f 	beq.w	8001bd2 <movimientoRC+0x3de>
				acum_encoderL = 0;
 80018d4:	4b82      	ldr	r3, [pc, #520]	; (8001ae0 <movimientoRC+0x2ec>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 80018da:	4b82      	ldr	r3, [pc, #520]	; (8001ae4 <movimientoRC+0x2f0>)
 80018dc:	2200      	movs	r2, #0
 80018de:	801a      	strh	r2, [r3, #0]
				status_movimiento = ROTANDO_DER;
 80018e0:	4b7c      	ldr	r3, [pc, #496]	; (8001ad4 <movimientoRC+0x2e0>)
 80018e2:	2204      	movs	r2, #4
 80018e4:	701a      	strb	r2, [r3, #0]
				break;
 80018e6:	e185      	b.n	8001bf4 <movimientoRC+0x400>
			}

		break;
		case AVANZANDO:

			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 1);
 80018e8:	2201      	movs	r2, #1
 80018ea:	2101      	movs	r1, #1
 80018ec:	487a      	ldr	r0, [pc, #488]	; (8001ad8 <movimientoRC+0x2e4>)
 80018ee:	f001 fd6f 	bl	80033d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 1);
 80018f2:	2201      	movs	r2, #1
 80018f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018f8:	4878      	ldr	r0, [pc, #480]	; (8001adc <movimientoRC+0x2e8>)
 80018fa:	f001 fd69 	bl	80033d0 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 0);
 80018fe:	2200      	movs	r2, #0
 8001900:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001904:	4875      	ldr	r0, [pc, #468]	; (8001adc <movimientoRC+0x2e8>)
 8001906:	f001 fd63 	bl	80033d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 0);
 800190a:	2200      	movs	r2, #0
 800190c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001910:	4872      	ldr	r0, [pc, #456]	; (8001adc <movimientoRC+0x2e8>)
 8001912:	f001 fd5d 	bl	80033d0 <HAL_GPIO_WritePin>

			encoders();
 8001916:	f000 f981 	bl	8001c1c <encoders>

			if (avance_cant > ((acum_encoderL + acum_encoderR) >> 1) ) break;
 800191a:	4b6a      	ldr	r3, [pc, #424]	; (8001ac4 <movimientoRC+0x2d0>)
 800191c:	881b      	ldrh	r3, [r3, #0]
 800191e:	461a      	mov	r2, r3
 8001920:	4b6f      	ldr	r3, [pc, #444]	; (8001ae0 <movimientoRC+0x2ec>)
 8001922:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001926:	4619      	mov	r1, r3
 8001928:	4b6e      	ldr	r3, [pc, #440]	; (8001ae4 <movimientoRC+0x2f0>)
 800192a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800192e:	440b      	add	r3, r1
 8001930:	105b      	asrs	r3, r3, #1
 8001932:	429a      	cmp	r2, r3
 8001934:	f300 814f 	bgt.w	8001bd6 <movimientoRC+0x3e2>

			avance_cant = 0;
 8001938:	4b62      	ldr	r3, [pc, #392]	; (8001ac4 <movimientoRC+0x2d0>)
 800193a:	2200      	movs	r2, #0
 800193c:	801a      	strh	r2, [r3, #0]

			status_movimiento = QUIETO;
 800193e:	4b65      	ldr	r3, [pc, #404]	; (8001ad4 <movimientoRC+0x2e0>)
 8001940:	2200      	movs	r2, #0
 8001942:	701a      	strb	r2, [r3, #0]

			if (retroceso_cant != 0){
 8001944:	4b60      	ldr	r3, [pc, #384]	; (8001ac8 <movimientoRC+0x2d4>)
 8001946:	881b      	ldrh	r3, [r3, #0]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d009      	beq.n	8001960 <movimientoRC+0x16c>
				acum_encoderL = 0;
 800194c:	4b64      	ldr	r3, [pc, #400]	; (8001ae0 <movimientoRC+0x2ec>)
 800194e:	2200      	movs	r2, #0
 8001950:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 8001952:	4b64      	ldr	r3, [pc, #400]	; (8001ae4 <movimientoRC+0x2f0>)
 8001954:	2200      	movs	r2, #0
 8001956:	801a      	strh	r2, [r3, #0]
				status_movimiento = RETROCEDIENDO;
 8001958:	4b5e      	ldr	r3, [pc, #376]	; (8001ad4 <movimientoRC+0x2e0>)
 800195a:	2202      	movs	r2, #2
 800195c:	701a      	strb	r2, [r3, #0]
				break;
 800195e:	e149      	b.n	8001bf4 <movimientoRC+0x400>
			}

			if (giroIzq_cant != 0){
 8001960:	4b5a      	ldr	r3, [pc, #360]	; (8001acc <movimientoRC+0x2d8>)
 8001962:	881b      	ldrh	r3, [r3, #0]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d009      	beq.n	800197c <movimientoRC+0x188>
				acum_encoderL = 0;
 8001968:	4b5d      	ldr	r3, [pc, #372]	; (8001ae0 <movimientoRC+0x2ec>)
 800196a:	2200      	movs	r2, #0
 800196c:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 800196e:	4b5d      	ldr	r3, [pc, #372]	; (8001ae4 <movimientoRC+0x2f0>)
 8001970:	2200      	movs	r2, #0
 8001972:	801a      	strh	r2, [r3, #0]
				status_movimiento = ROTANDO_IZQ;
 8001974:	4b57      	ldr	r3, [pc, #348]	; (8001ad4 <movimientoRC+0x2e0>)
 8001976:	2203      	movs	r2, #3
 8001978:	701a      	strb	r2, [r3, #0]
				break;
 800197a:	e13b      	b.n	8001bf4 <movimientoRC+0x400>
			}

			if (giroDer_cant != 0){
 800197c:	4b54      	ldr	r3, [pc, #336]	; (8001ad0 <movimientoRC+0x2dc>)
 800197e:	881b      	ldrh	r3, [r3, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	f000 812a 	beq.w	8001bda <movimientoRC+0x3e6>
				acum_encoderL = 0;
 8001986:	4b56      	ldr	r3, [pc, #344]	; (8001ae0 <movimientoRC+0x2ec>)
 8001988:	2200      	movs	r2, #0
 800198a:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 800198c:	4b55      	ldr	r3, [pc, #340]	; (8001ae4 <movimientoRC+0x2f0>)
 800198e:	2200      	movs	r2, #0
 8001990:	801a      	strh	r2, [r3, #0]
				status_movimiento = ROTANDO_DER;
 8001992:	4b50      	ldr	r3, [pc, #320]	; (8001ad4 <movimientoRC+0x2e0>)
 8001994:	2204      	movs	r2, #4
 8001996:	701a      	strb	r2, [r3, #0]
				break;
 8001998:	e12c      	b.n	8001bf4 <movimientoRC+0x400>
			}

		break;
		case ROTANDO_IZQ:

			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 0);
 800199a:	2200      	movs	r2, #0
 800199c:	2101      	movs	r1, #1
 800199e:	484e      	ldr	r0, [pc, #312]	; (8001ad8 <movimientoRC+0x2e4>)
 80019a0:	f001 fd16 	bl	80033d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 1);
 80019a4:	2201      	movs	r2, #1
 80019a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019aa:	484c      	ldr	r0, [pc, #304]	; (8001adc <movimientoRC+0x2e8>)
 80019ac:	f001 fd10 	bl	80033d0 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 1);
 80019b0:	2201      	movs	r2, #1
 80019b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019b6:	4849      	ldr	r0, [pc, #292]	; (8001adc <movimientoRC+0x2e8>)
 80019b8:	f001 fd0a 	bl	80033d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 0);
 80019bc:	2200      	movs	r2, #0
 80019be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019c2:	4846      	ldr	r0, [pc, #280]	; (8001adc <movimientoRC+0x2e8>)
 80019c4:	f001 fd04 	bl	80033d0 <HAL_GPIO_WritePin>

			encoders();
 80019c8:	f000 f928 	bl	8001c1c <encoders>

			if (giroIzq_cant > ((acum_encoderL + acum_encoderR) >> 1) ) break;
 80019cc:	4b3f      	ldr	r3, [pc, #252]	; (8001acc <movimientoRC+0x2d8>)
 80019ce:	881b      	ldrh	r3, [r3, #0]
 80019d0:	461a      	mov	r2, r3
 80019d2:	4b43      	ldr	r3, [pc, #268]	; (8001ae0 <movimientoRC+0x2ec>)
 80019d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019d8:	4619      	mov	r1, r3
 80019da:	4b42      	ldr	r3, [pc, #264]	; (8001ae4 <movimientoRC+0x2f0>)
 80019dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019e0:	440b      	add	r3, r1
 80019e2:	105b      	asrs	r3, r3, #1
 80019e4:	429a      	cmp	r2, r3
 80019e6:	f300 80fa 	bgt.w	8001bde <movimientoRC+0x3ea>

			giroIzq_cant = 0;
 80019ea:	4b38      	ldr	r3, [pc, #224]	; (8001acc <movimientoRC+0x2d8>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	801a      	strh	r2, [r3, #0]

			status_movimiento = QUIETO;
 80019f0:	4b38      	ldr	r3, [pc, #224]	; (8001ad4 <movimientoRC+0x2e0>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	701a      	strb	r2, [r3, #0]

			if (avance_cant != 0){
 80019f6:	4b33      	ldr	r3, [pc, #204]	; (8001ac4 <movimientoRC+0x2d0>)
 80019f8:	881b      	ldrh	r3, [r3, #0]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d009      	beq.n	8001a12 <movimientoRC+0x21e>
				acum_encoderL = 0;
 80019fe:	4b38      	ldr	r3, [pc, #224]	; (8001ae0 <movimientoRC+0x2ec>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 8001a04:	4b37      	ldr	r3, [pc, #220]	; (8001ae4 <movimientoRC+0x2f0>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	801a      	strh	r2, [r3, #0]
				status_movimiento = AVANZANDO;
 8001a0a:	4b32      	ldr	r3, [pc, #200]	; (8001ad4 <movimientoRC+0x2e0>)
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	701a      	strb	r2, [r3, #0]
				break;
 8001a10:	e0f0      	b.n	8001bf4 <movimientoRC+0x400>
			}

			if (retroceso_cant != 0){
 8001a12:	4b2d      	ldr	r3, [pc, #180]	; (8001ac8 <movimientoRC+0x2d4>)
 8001a14:	881b      	ldrh	r3, [r3, #0]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d009      	beq.n	8001a2e <movimientoRC+0x23a>
				acum_encoderL = 0;
 8001a1a:	4b31      	ldr	r3, [pc, #196]	; (8001ae0 <movimientoRC+0x2ec>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 8001a20:	4b30      	ldr	r3, [pc, #192]	; (8001ae4 <movimientoRC+0x2f0>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	801a      	strh	r2, [r3, #0]
				status_movimiento = RETROCEDIENDO;
 8001a26:	4b2b      	ldr	r3, [pc, #172]	; (8001ad4 <movimientoRC+0x2e0>)
 8001a28:	2202      	movs	r2, #2
 8001a2a:	701a      	strb	r2, [r3, #0]
				break;
 8001a2c:	e0e2      	b.n	8001bf4 <movimientoRC+0x400>
			}

			if (giroDer_cant != 0){
 8001a2e:	4b28      	ldr	r3, [pc, #160]	; (8001ad0 <movimientoRC+0x2dc>)
 8001a30:	881b      	ldrh	r3, [r3, #0]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	f000 80d5 	beq.w	8001be2 <movimientoRC+0x3ee>
				acum_encoderL = 0;
 8001a38:	4b29      	ldr	r3, [pc, #164]	; (8001ae0 <movimientoRC+0x2ec>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 8001a3e:	4b29      	ldr	r3, [pc, #164]	; (8001ae4 <movimientoRC+0x2f0>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	801a      	strh	r2, [r3, #0]
				status_movimiento = ROTANDO_DER;
 8001a44:	4b23      	ldr	r3, [pc, #140]	; (8001ad4 <movimientoRC+0x2e0>)
 8001a46:	2204      	movs	r2, #4
 8001a48:	701a      	strb	r2, [r3, #0]
				break;
 8001a4a:	e0d3      	b.n	8001bf4 <movimientoRC+0x400>
			}

		break;
		case ROTANDO_DER:
			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 1);
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	2101      	movs	r1, #1
 8001a50:	4821      	ldr	r0, [pc, #132]	; (8001ad8 <movimientoRC+0x2e4>)
 8001a52:	f001 fcbd 	bl	80033d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 0);
 8001a56:	2200      	movs	r2, #0
 8001a58:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a5c:	481f      	ldr	r0, [pc, #124]	; (8001adc <movimientoRC+0x2e8>)
 8001a5e:	f001 fcb7 	bl	80033d0 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 0);
 8001a62:	2200      	movs	r2, #0
 8001a64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a68:	481c      	ldr	r0, [pc, #112]	; (8001adc <movimientoRC+0x2e8>)
 8001a6a:	f001 fcb1 	bl	80033d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 1);
 8001a6e:	2201      	movs	r2, #1
 8001a70:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a74:	4819      	ldr	r0, [pc, #100]	; (8001adc <movimientoRC+0x2e8>)
 8001a76:	f001 fcab 	bl	80033d0 <HAL_GPIO_WritePin>

			encoders();
 8001a7a:	f000 f8cf 	bl	8001c1c <encoders>

			if (giroDer_cant > ((acum_encoderL + acum_encoderR) >> 1) ) break;
 8001a7e:	4b14      	ldr	r3, [pc, #80]	; (8001ad0 <movimientoRC+0x2dc>)
 8001a80:	881b      	ldrh	r3, [r3, #0]
 8001a82:	461a      	mov	r2, r3
 8001a84:	4b16      	ldr	r3, [pc, #88]	; (8001ae0 <movimientoRC+0x2ec>)
 8001a86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4b15      	ldr	r3, [pc, #84]	; (8001ae4 <movimientoRC+0x2f0>)
 8001a8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a92:	440b      	add	r3, r1
 8001a94:	105b      	asrs	r3, r3, #1
 8001a96:	429a      	cmp	r2, r3
 8001a98:	f300 80a5 	bgt.w	8001be6 <movimientoRC+0x3f2>

			giroDer_cant = 0;
 8001a9c:	4b0c      	ldr	r3, [pc, #48]	; (8001ad0 <movimientoRC+0x2dc>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	801a      	strh	r2, [r3, #0]

			status_movimiento = QUIETO;
 8001aa2:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <movimientoRC+0x2e0>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	701a      	strb	r2, [r3, #0]

			if (avance_cant != 0){
 8001aa8:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <movimientoRC+0x2d0>)
 8001aaa:	881b      	ldrh	r3, [r3, #0]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d01b      	beq.n	8001ae8 <movimientoRC+0x2f4>
				acum_encoderL = 0;
 8001ab0:	4b0b      	ldr	r3, [pc, #44]	; (8001ae0 <movimientoRC+0x2ec>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 8001ab6:	4b0b      	ldr	r3, [pc, #44]	; (8001ae4 <movimientoRC+0x2f0>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	801a      	strh	r2, [r3, #0]
				status_movimiento = AVANZANDO;
 8001abc:	4b05      	ldr	r3, [pc, #20]	; (8001ad4 <movimientoRC+0x2e0>)
 8001abe:	2201      	movs	r2, #1
 8001ac0:	701a      	strb	r2, [r3, #0]
				break;
 8001ac2:	e097      	b.n	8001bf4 <movimientoRC+0x400>
 8001ac4:	20000030 	.word	0x20000030
 8001ac8:	20000032 	.word	0x20000032
 8001acc:	20000034 	.word	0x20000034
 8001ad0:	20000036 	.word	0x20000036
 8001ad4:	2000002e 	.word	0x2000002e
 8001ad8:	40020c00 	.word	0x40020c00
 8001adc:	40020800 	.word	0x40020800
 8001ae0:	20000050 	.word	0x20000050
 8001ae4:	20000052 	.word	0x20000052
			}

			if (retroceso_cant != 0){
 8001ae8:	4b43      	ldr	r3, [pc, #268]	; (8001bf8 <movimientoRC+0x404>)
 8001aea:	881b      	ldrh	r3, [r3, #0]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d009      	beq.n	8001b04 <movimientoRC+0x310>
				acum_encoderL = 0;
 8001af0:	4b42      	ldr	r3, [pc, #264]	; (8001bfc <movimientoRC+0x408>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 8001af6:	4b42      	ldr	r3, [pc, #264]	; (8001c00 <movimientoRC+0x40c>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	801a      	strh	r2, [r3, #0]
				status_movimiento = RETROCEDIENDO;
 8001afc:	4b41      	ldr	r3, [pc, #260]	; (8001c04 <movimientoRC+0x410>)
 8001afe:	2202      	movs	r2, #2
 8001b00:	701a      	strb	r2, [r3, #0]
				break;
 8001b02:	e077      	b.n	8001bf4 <movimientoRC+0x400>
			}

			if (giroIzq_cant != 0){
 8001b04:	4b40      	ldr	r3, [pc, #256]	; (8001c08 <movimientoRC+0x414>)
 8001b06:	881b      	ldrh	r3, [r3, #0]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d06e      	beq.n	8001bea <movimientoRC+0x3f6>
				acum_encoderL = 0;
 8001b0c:	4b3b      	ldr	r3, [pc, #236]	; (8001bfc <movimientoRC+0x408>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 8001b12:	4b3b      	ldr	r3, [pc, #236]	; (8001c00 <movimientoRC+0x40c>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	801a      	strh	r2, [r3, #0]
				status_movimiento = ROTANDO_IZQ;
 8001b18:	4b3a      	ldr	r3, [pc, #232]	; (8001c04 <movimientoRC+0x410>)
 8001b1a:	2203      	movs	r2, #3
 8001b1c:	701a      	strb	r2, [r3, #0]
				break;
 8001b1e:	e069      	b.n	8001bf4 <movimientoRC+0x400>
			}

		break;
		case RETROCEDIENDO:
			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 0);
 8001b20:	2200      	movs	r2, #0
 8001b22:	2101      	movs	r1, #1
 8001b24:	4839      	ldr	r0, [pc, #228]	; (8001c0c <movimientoRC+0x418>)
 8001b26:	f001 fc53 	bl	80033d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 0);
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b30:	4837      	ldr	r0, [pc, #220]	; (8001c10 <movimientoRC+0x41c>)
 8001b32:	f001 fc4d 	bl	80033d0 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 1);
 8001b36:	2201      	movs	r2, #1
 8001b38:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b3c:	4834      	ldr	r0, [pc, #208]	; (8001c10 <movimientoRC+0x41c>)
 8001b3e:	f001 fc47 	bl	80033d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 1);
 8001b42:	2201      	movs	r2, #1
 8001b44:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b48:	4831      	ldr	r0, [pc, #196]	; (8001c10 <movimientoRC+0x41c>)
 8001b4a:	f001 fc41 	bl	80033d0 <HAL_GPIO_WritePin>

			encoders();
 8001b4e:	f000 f865 	bl	8001c1c <encoders>

			if (retroceso_cant > ((acum_encoderL + acum_encoderR) >> 1) ) break;
 8001b52:	4b29      	ldr	r3, [pc, #164]	; (8001bf8 <movimientoRC+0x404>)
 8001b54:	881b      	ldrh	r3, [r3, #0]
 8001b56:	461a      	mov	r2, r3
 8001b58:	4b28      	ldr	r3, [pc, #160]	; (8001bfc <movimientoRC+0x408>)
 8001b5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4b27      	ldr	r3, [pc, #156]	; (8001c00 <movimientoRC+0x40c>)
 8001b62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b66:	440b      	add	r3, r1
 8001b68:	105b      	asrs	r3, r3, #1
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	dc3f      	bgt.n	8001bee <movimientoRC+0x3fa>

			retroceso_cant = 0;
 8001b6e:	4b22      	ldr	r3, [pc, #136]	; (8001bf8 <movimientoRC+0x404>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	801a      	strh	r2, [r3, #0]

			status_movimiento = QUIETO;
 8001b74:	4b23      	ldr	r3, [pc, #140]	; (8001c04 <movimientoRC+0x410>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	701a      	strb	r2, [r3, #0]

			if (avance_cant != 0){
 8001b7a:	4b26      	ldr	r3, [pc, #152]	; (8001c14 <movimientoRC+0x420>)
 8001b7c:	881b      	ldrh	r3, [r3, #0]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d009      	beq.n	8001b96 <movimientoRC+0x3a2>
				acum_encoderL = 0;
 8001b82:	4b1e      	ldr	r3, [pc, #120]	; (8001bfc <movimientoRC+0x408>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 8001b88:	4b1d      	ldr	r3, [pc, #116]	; (8001c00 <movimientoRC+0x40c>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	801a      	strh	r2, [r3, #0]
				status_movimiento = AVANZANDO;
 8001b8e:	4b1d      	ldr	r3, [pc, #116]	; (8001c04 <movimientoRC+0x410>)
 8001b90:	2201      	movs	r2, #1
 8001b92:	701a      	strb	r2, [r3, #0]
				break;
 8001b94:	e02e      	b.n	8001bf4 <movimientoRC+0x400>
			}

			if (giroIzq_cant != 0){
 8001b96:	4b1c      	ldr	r3, [pc, #112]	; (8001c08 <movimientoRC+0x414>)
 8001b98:	881b      	ldrh	r3, [r3, #0]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d009      	beq.n	8001bb2 <movimientoRC+0x3be>
				acum_encoderL = 0;
 8001b9e:	4b17      	ldr	r3, [pc, #92]	; (8001bfc <movimientoRC+0x408>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 8001ba4:	4b16      	ldr	r3, [pc, #88]	; (8001c00 <movimientoRC+0x40c>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	801a      	strh	r2, [r3, #0]
				status_movimiento = ROTANDO_IZQ;
 8001baa:	4b16      	ldr	r3, [pc, #88]	; (8001c04 <movimientoRC+0x410>)
 8001bac:	2203      	movs	r2, #3
 8001bae:	701a      	strb	r2, [r3, #0]
				break;
 8001bb0:	e020      	b.n	8001bf4 <movimientoRC+0x400>
			}

			if (giroDer_cant != 0){
 8001bb2:	4b19      	ldr	r3, [pc, #100]	; (8001c18 <movimientoRC+0x424>)
 8001bb4:	881b      	ldrh	r3, [r3, #0]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d01b      	beq.n	8001bf2 <movimientoRC+0x3fe>
				acum_encoderL = 0;
 8001bba:	4b10      	ldr	r3, [pc, #64]	; (8001bfc <movimientoRC+0x408>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 8001bc0:	4b0f      	ldr	r3, [pc, #60]	; (8001c00 <movimientoRC+0x40c>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	801a      	strh	r2, [r3, #0]
				status_movimiento = ROTANDO_DER;
 8001bc6:	4b0f      	ldr	r3, [pc, #60]	; (8001c04 <movimientoRC+0x410>)
 8001bc8:	2204      	movs	r2, #4
 8001bca:	701a      	strb	r2, [r3, #0]
				break;
 8001bcc:	e012      	b.n	8001bf4 <movimientoRC+0x400>

		break;
		case PIVOTE_DER_AVAN:

		default:
		break;
 8001bce:	bf00      	nop
 8001bd0:	e010      	b.n	8001bf4 <movimientoRC+0x400>
		break;
 8001bd2:	bf00      	nop
 8001bd4:	e00e      	b.n	8001bf4 <movimientoRC+0x400>
			if (avance_cant > ((acum_encoderL + acum_encoderR) >> 1) ) break;
 8001bd6:	bf00      	nop
 8001bd8:	e00c      	b.n	8001bf4 <movimientoRC+0x400>
		break;
 8001bda:	bf00      	nop
 8001bdc:	e00a      	b.n	8001bf4 <movimientoRC+0x400>
			if (giroIzq_cant > ((acum_encoderL + acum_encoderR) >> 1) ) break;
 8001bde:	bf00      	nop
 8001be0:	e008      	b.n	8001bf4 <movimientoRC+0x400>
		break;
 8001be2:	bf00      	nop
 8001be4:	e006      	b.n	8001bf4 <movimientoRC+0x400>
			if (giroDer_cant > ((acum_encoderL + acum_encoderR) >> 1) ) break;
 8001be6:	bf00      	nop
 8001be8:	e004      	b.n	8001bf4 <movimientoRC+0x400>
		break;
 8001bea:	bf00      	nop
 8001bec:	e002      	b.n	8001bf4 <movimientoRC+0x400>
			if (retroceso_cant > ((acum_encoderL + acum_encoderR) >> 1) ) break;
 8001bee:	bf00      	nop
 8001bf0:	e000      	b.n	8001bf4 <movimientoRC+0x400>
		break;
 8001bf2:	bf00      	nop

	} //fin switch status_movimiento

} //fin movimientoRC()
 8001bf4:	bf00      	nop
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	20000032 	.word	0x20000032
 8001bfc:	20000050 	.word	0x20000050
 8001c00:	20000052 	.word	0x20000052
 8001c04:	2000002e 	.word	0x2000002e
 8001c08:	20000034 	.word	0x20000034
 8001c0c:	40020c00 	.word	0x40020c00
 8001c10:	40020800 	.word	0x40020800
 8001c14:	20000030 	.word	0x20000030
 8001c18:	20000036 	.word	0x20000036

08001c1c <encoders>:

void encoders (void){
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0

	if (!flag_encoders) return;
 8001c20:	4b2a      	ldr	r3, [pc, #168]	; (8001ccc <encoders+0xb0>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d04b      	beq.n	8001cc0 <encoders+0xa4>

	encoderL = __HAL_TIM_GET_COUNTER(&htim3);
 8001c28:	4b29      	ldr	r3, [pc, #164]	; (8001cd0 <encoders+0xb4>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2e:	b21a      	sxth	r2, r3
 8001c30:	4b28      	ldr	r3, [pc, #160]	; (8001cd4 <encoders+0xb8>)
 8001c32:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8001c34:	4b26      	ldr	r3, [pc, #152]	; (8001cd0 <encoders+0xb4>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	625a      	str	r2, [r3, #36]	; 0x24
	encoderR = __HAL_TIM_GET_COUNTER(&htim2);
 8001c3c:	4b26      	ldr	r3, [pc, #152]	; (8001cd8 <encoders+0xbc>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c42:	b21a      	sxth	r2, r3
 8001c44:	4b25      	ldr	r3, [pc, #148]	; (8001cdc <encoders+0xc0>)
 8001c46:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8001c48:	4b23      	ldr	r3, [pc, #140]	; (8001cd8 <encoders+0xbc>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	625a      	str	r2, [r3, #36]	; 0x24
//	}else if (encoderL < velL){
//		if (TIM4->CCR1 < 85)
//			TIM4->CCR1++;
//	}

	TIM4->CCR1 += velL - encoderL;
 8001c50:	4b23      	ldr	r3, [pc, #140]	; (8001ce0 <encoders+0xc4>)
 8001c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c54:	4a23      	ldr	r2, [pc, #140]	; (8001ce4 <encoders+0xc8>)
 8001c56:	7812      	ldrb	r2, [r2, #0]
 8001c58:	4611      	mov	r1, r2
 8001c5a:	4a1e      	ldr	r2, [pc, #120]	; (8001cd4 <encoders+0xb8>)
 8001c5c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001c60:	1a8a      	subs	r2, r1, r2
 8001c62:	4611      	mov	r1, r2
 8001c64:	4a1e      	ldr	r2, [pc, #120]	; (8001ce0 <encoders+0xc4>)
 8001c66:	440b      	add	r3, r1
 8001c68:	6353      	str	r3, [r2, #52]	; 0x34
//	}else if (encoderR < velR){
//		if (TIM4->CCR2 < 85)
//			TIM4->CCR2++;
//	}

	TIM4->CCR2 += velR - encoderR;
 8001c6a:	4b1d      	ldr	r3, [pc, #116]	; (8001ce0 <encoders+0xc4>)
 8001c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c6e:	4a1e      	ldr	r2, [pc, #120]	; (8001ce8 <encoders+0xcc>)
 8001c70:	7812      	ldrb	r2, [r2, #0]
 8001c72:	4611      	mov	r1, r2
 8001c74:	4a19      	ldr	r2, [pc, #100]	; (8001cdc <encoders+0xc0>)
 8001c76:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001c7a:	1a8a      	subs	r2, r1, r2
 8001c7c:	4611      	mov	r1, r2
 8001c7e:	4a18      	ldr	r2, [pc, #96]	; (8001ce0 <encoders+0xc4>)
 8001c80:	440b      	add	r3, r1
 8001c82:	6393      	str	r3, [r2, #56]	; 0x38

	acum_encoderL += encoderL;
 8001c84:	4b19      	ldr	r3, [pc, #100]	; (8001cec <encoders+0xd0>)
 8001c86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c8a:	b29a      	uxth	r2, r3
 8001c8c:	4b11      	ldr	r3, [pc, #68]	; (8001cd4 <encoders+0xb8>)
 8001c8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	4413      	add	r3, r2
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	b21a      	sxth	r2, r3
 8001c9a:	4b14      	ldr	r3, [pc, #80]	; (8001cec <encoders+0xd0>)
 8001c9c:	801a      	strh	r2, [r3, #0]
	acum_encoderR += encoderR;
 8001c9e:	4b14      	ldr	r3, [pc, #80]	; (8001cf0 <encoders+0xd4>)
 8001ca0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ca4:	b29a      	uxth	r2, r3
 8001ca6:	4b0d      	ldr	r3, [pc, #52]	; (8001cdc <encoders+0xc0>)
 8001ca8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	4413      	add	r3, r2
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	b21a      	sxth	r2, r3
 8001cb4:	4b0e      	ldr	r3, [pc, #56]	; (8001cf0 <encoders+0xd4>)
 8001cb6:	801a      	strh	r2, [r3, #0]

	flag_encoders = 0;
 8001cb8:	4b04      	ldr	r3, [pc, #16]	; (8001ccc <encoders+0xb0>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	701a      	strb	r2, [r3, #0]
 8001cbe:	e000      	b.n	8001cc2 <encoders+0xa6>
	if (!flag_encoders) return;
 8001cc0:	bf00      	nop

} //fin encoders()
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	2000004e 	.word	0x2000004e
 8001cd0:	20000174 	.word	0x20000174
 8001cd4:	200000ce 	.word	0x200000ce
 8001cd8:	200001b4 	.word	0x200001b4
 8001cdc:	200000ec 	.word	0x200000ec
 8001ce0:	40000800 	.word	0x40000800
 8001ce4:	20000001 	.word	0x20000001
 8001ce8:	20000002 	.word	0x20000002
 8001cec:	20000050 	.word	0x20000050
 8001cf0:	20000052 	.word	0x20000052
 8001cf4:	00000000 	.word	0x00000000

08001cf8 <check_rxUart>:

	HAL_UART_Transmit(&huart7, txUart, 4, 20);
	HAL_UART_Receive_IT(&huart7, rxUart, 4);
}

void check_rxUart (void){
 8001cf8:	b598      	push	{r3, r4, r7, lr}
 8001cfa:	af00      	add	r7, sp, #0

	if (rxUart[3] != 0){
 8001cfc:	4b8c      	ldr	r3, [pc, #560]	; (8001f30 <check_rxUart+0x238>)
 8001cfe:	78db      	ldrb	r3, [r3, #3]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d010      	beq.n	8001d26 <check_rxUart+0x2e>
		txUart[0] = CMD_ERROR;
 8001d04:	4b8b      	ldr	r3, [pc, #556]	; (8001f34 <check_rxUart+0x23c>)
 8001d06:	2204      	movs	r2, #4
 8001d08:	701a      	strb	r2, [r3, #0]
		txUart[3] = '\0';
 8001d0a:	4b8a      	ldr	r3, [pc, #552]	; (8001f34 <check_rxUart+0x23c>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	70da      	strb	r2, [r3, #3]
		HAL_UART_Transmit_IT(&huart7, txUart, 4);
 8001d10:	2204      	movs	r2, #4
 8001d12:	4988      	ldr	r1, [pc, #544]	; (8001f34 <check_rxUart+0x23c>)
 8001d14:	4888      	ldr	r0, [pc, #544]	; (8001f38 <check_rxUart+0x240>)
 8001d16:	f004 fad6 	bl	80062c6 <HAL_UART_Transmit_IT>
		HAL_UART_Receive_IT(&huart7, rxUart, 4);
 8001d1a:	2204      	movs	r2, #4
 8001d1c:	4984      	ldr	r1, [pc, #528]	; (8001f30 <check_rxUart+0x238>)
 8001d1e:	4886      	ldr	r0, [pc, #536]	; (8001f38 <check_rxUart+0x240>)
 8001d20:	f004 fb16 	bl	8006350 <HAL_UART_Receive_IT>
		return;
 8001d24:	e184      	b.n	8002030 <check_rxUart+0x338>
	}

	switch (rxUart[0]) {
 8001d26:	4b82      	ldr	r3, [pc, #520]	; (8001f30 <check_rxUart+0x238>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	2b13      	cmp	r3, #19
 8001d2e:	f200 817a 	bhi.w	8002026 <check_rxUart+0x32e>
 8001d32:	a201      	add	r2, pc, #4	; (adr r2, 8001d38 <check_rxUart+0x40>)
 8001d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d38:	08001d89 	.word	0x08001d89
 8001d3c:	08002027 	.word	0x08002027
 8001d40:	08002027 	.word	0x08002027
 8001d44:	08002027 	.word	0x08002027
 8001d48:	08001da7 	.word	0x08001da7
 8001d4c:	08002027 	.word	0x08002027
 8001d50:	08002027 	.word	0x08002027
 8001d54:	08001f61 	.word	0x08001f61
 8001d58:	08002027 	.word	0x08002027
 8001d5c:	08002027 	.word	0x08002027
 8001d60:	08002027 	.word	0x08002027
 8001d64:	08002027 	.word	0x08002027
 8001d68:	08001e17 	.word	0x08001e17
 8001d6c:	08001e87 	.word	0x08001e87
 8001d70:	08001ebf 	.word	0x08001ebf
 8001d74:	08001e4f 	.word	0x08001e4f
 8001d78:	08002027 	.word	0x08002027
 8001d7c:	08002027 	.word	0x08002027
 8001d80:	08002027 	.word	0x08002027
 8001d84:	08001ef7 	.word	0x08001ef7
		case HOLA:
			esp01Presente = 1;
 8001d88:	4b6c      	ldr	r3, [pc, #432]	; (8001f3c <check_rxUart+0x244>)
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	701a      	strb	r2, [r3, #0]
			txUart[0] = HOLA;
 8001d8e:	4b69      	ldr	r3, [pc, #420]	; (8001f34 <check_rxUart+0x23c>)
 8001d90:	2201      	movs	r2, #1
 8001d92:	701a      	strb	r2, [r3, #0]
			txUart[3] = '\0';
 8001d94:	4b67      	ldr	r3, [pc, #412]	; (8001f34 <check_rxUart+0x23c>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	70da      	strb	r2, [r3, #3]
			HAL_UART_Transmit_IT(&huart7, txUart, 4);
 8001d9a:	2204      	movs	r2, #4
 8001d9c:	4965      	ldr	r1, [pc, #404]	; (8001f34 <check_rxUart+0x23c>)
 8001d9e:	4866      	ldr	r0, [pc, #408]	; (8001f38 <check_rxUart+0x240>)
 8001da0:	f004 fa91 	bl	80062c6 <HAL_UART_Transmit_IT>

		break;
 8001da4:	e13f      	b.n	8002026 <check_rxUart+0x32e>
		case MODO:

			switch (rxUart[1]) {
 8001da6:	4b62      	ldr	r3, [pc, #392]	; (8001f30 <check_rxUart+0x238>)
 8001da8:	785b      	ldrb	r3, [r3, #1]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d002      	beq.n	8001db4 <check_rxUart+0xbc>
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d012      	beq.n	8001dd8 <check_rxUart+0xe0>
 8001db2:	e023      	b.n	8001dfc <check_rxUart+0x104>
				case AUTOMATICO:
					modoFuncionamiento = AUTOMATICO;
 8001db4:	4b62      	ldr	r3, [pc, #392]	; (8001f40 <check_rxUart+0x248>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	701a      	strb	r2, [r3, #0]
					flag_encoders = 0;
 8001dba:	4b62      	ldr	r3, [pc, #392]	; (8001f44 <check_rxUart+0x24c>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	701a      	strb	r2, [r3, #0]
					txUart[0] = OK_;
 8001dc0:	4b5c      	ldr	r3, [pc, #368]	; (8001f34 <check_rxUart+0x23c>)
 8001dc2:	2202      	movs	r2, #2
 8001dc4:	701a      	strb	r2, [r3, #0]
					txUart[3] = '\0';
 8001dc6:	4b5b      	ldr	r3, [pc, #364]	; (8001f34 <check_rxUart+0x23c>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	70da      	strb	r2, [r3, #3]
					HAL_UART_Transmit_IT(&huart7, txUart, 4);
 8001dcc:	2204      	movs	r2, #4
 8001dce:	4959      	ldr	r1, [pc, #356]	; (8001f34 <check_rxUart+0x23c>)
 8001dd0:	4859      	ldr	r0, [pc, #356]	; (8001f38 <check_rxUart+0x240>)
 8001dd2:	f004 fa78 	bl	80062c6 <HAL_UART_Transmit_IT>
				break;
 8001dd6:	e01d      	b.n	8001e14 <check_rxUart+0x11c>
				case MANUAL:
					status_movimiento = QUIETO;
 8001dd8:	4b5b      	ldr	r3, [pc, #364]	; (8001f48 <check_rxUart+0x250>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	701a      	strb	r2, [r3, #0]
					modoFuncionamiento = MANUAL;
 8001dde:	4b58      	ldr	r3, [pc, #352]	; (8001f40 <check_rxUart+0x248>)
 8001de0:	2201      	movs	r2, #1
 8001de2:	701a      	strb	r2, [r3, #0]
					txUart[0] = OK_;
 8001de4:	4b53      	ldr	r3, [pc, #332]	; (8001f34 <check_rxUart+0x23c>)
 8001de6:	2202      	movs	r2, #2
 8001de8:	701a      	strb	r2, [r3, #0]
					txUart[3] = '\0';
 8001dea:	4b52      	ldr	r3, [pc, #328]	; (8001f34 <check_rxUart+0x23c>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	70da      	strb	r2, [r3, #3]
					HAL_UART_Transmit_IT(&huart7, txUart, 4);
 8001df0:	2204      	movs	r2, #4
 8001df2:	4950      	ldr	r1, [pc, #320]	; (8001f34 <check_rxUart+0x23c>)
 8001df4:	4850      	ldr	r0, [pc, #320]	; (8001f38 <check_rxUart+0x240>)
 8001df6:	f004 fa66 	bl	80062c6 <HAL_UART_Transmit_IT>
				break;
 8001dfa:	e00b      	b.n	8001e14 <check_rxUart+0x11c>
				default:
					txUart[0] = CMD_ERROR;
 8001dfc:	4b4d      	ldr	r3, [pc, #308]	; (8001f34 <check_rxUart+0x23c>)
 8001dfe:	2204      	movs	r2, #4
 8001e00:	701a      	strb	r2, [r3, #0]
					txUart[3] = '\0';
 8001e02:	4b4c      	ldr	r3, [pc, #304]	; (8001f34 <check_rxUart+0x23c>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	70da      	strb	r2, [r3, #3]
					HAL_UART_Transmit_IT(&huart7, txUart, 4);
 8001e08:	2204      	movs	r2, #4
 8001e0a:	494a      	ldr	r1, [pc, #296]	; (8001f34 <check_rxUart+0x23c>)
 8001e0c:	484a      	ldr	r0, [pc, #296]	; (8001f38 <check_rxUart+0x240>)
 8001e0e:	f004 fa5a 	bl	80062c6 <HAL_UART_Transmit_IT>
			} //end switch rxUart[1]

		break;
 8001e12:	e108      	b.n	8002026 <check_rxUart+0x32e>
 8001e14:	e107      	b.n	8002026 <check_rxUart+0x32e>
		case AVANCE:
			avance_cant += (uint16_t) (rxUart[2] + (rxUart[1] << 8));
 8001e16:	4b46      	ldr	r3, [pc, #280]	; (8001f30 <check_rxUart+0x238>)
 8001e18:	789b      	ldrb	r3, [r3, #2]
 8001e1a:	b29a      	uxth	r2, r3
 8001e1c:	4b44      	ldr	r3, [pc, #272]	; (8001f30 <check_rxUart+0x238>)
 8001e1e:	785b      	ldrb	r3, [r3, #1]
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	021b      	lsls	r3, r3, #8
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	4413      	add	r3, r2
 8001e28:	b29a      	uxth	r2, r3
 8001e2a:	4b48      	ldr	r3, [pc, #288]	; (8001f4c <check_rxUart+0x254>)
 8001e2c:	881b      	ldrh	r3, [r3, #0]
 8001e2e:	4413      	add	r3, r2
 8001e30:	b29a      	uxth	r2, r3
 8001e32:	4b46      	ldr	r3, [pc, #280]	; (8001f4c <check_rxUart+0x254>)
 8001e34:	801a      	strh	r2, [r3, #0]

			txUart[0] = OK_;
 8001e36:	4b3f      	ldr	r3, [pc, #252]	; (8001f34 <check_rxUart+0x23c>)
 8001e38:	2202      	movs	r2, #2
 8001e3a:	701a      	strb	r2, [r3, #0]
			txUart[3] = '\0';
 8001e3c:	4b3d      	ldr	r3, [pc, #244]	; (8001f34 <check_rxUart+0x23c>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	70da      	strb	r2, [r3, #3]
			HAL_UART_Transmit_IT(&huart7, txUart, 4);
 8001e42:	2204      	movs	r2, #4
 8001e44:	493b      	ldr	r1, [pc, #236]	; (8001f34 <check_rxUart+0x23c>)
 8001e46:	483c      	ldr	r0, [pc, #240]	; (8001f38 <check_rxUart+0x240>)
 8001e48:	f004 fa3d 	bl	80062c6 <HAL_UART_Transmit_IT>
		break;
 8001e4c:	e0eb      	b.n	8002026 <check_rxUart+0x32e>
		case RETROCEDE:
			retroceso_cant += (uint16_t) (rxUart[2] + (rxUart[1] << 8));
 8001e4e:	4b38      	ldr	r3, [pc, #224]	; (8001f30 <check_rxUart+0x238>)
 8001e50:	789b      	ldrb	r3, [r3, #2]
 8001e52:	b29a      	uxth	r2, r3
 8001e54:	4b36      	ldr	r3, [pc, #216]	; (8001f30 <check_rxUart+0x238>)
 8001e56:	785b      	ldrb	r3, [r3, #1]
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	021b      	lsls	r3, r3, #8
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	4413      	add	r3, r2
 8001e60:	b29a      	uxth	r2, r3
 8001e62:	4b3b      	ldr	r3, [pc, #236]	; (8001f50 <check_rxUart+0x258>)
 8001e64:	881b      	ldrh	r3, [r3, #0]
 8001e66:	4413      	add	r3, r2
 8001e68:	b29a      	uxth	r2, r3
 8001e6a:	4b39      	ldr	r3, [pc, #228]	; (8001f50 <check_rxUart+0x258>)
 8001e6c:	801a      	strh	r2, [r3, #0]

			txUart[0] = OK_;
 8001e6e:	4b31      	ldr	r3, [pc, #196]	; (8001f34 <check_rxUart+0x23c>)
 8001e70:	2202      	movs	r2, #2
 8001e72:	701a      	strb	r2, [r3, #0]
			txUart[3] = '\0';
 8001e74:	4b2f      	ldr	r3, [pc, #188]	; (8001f34 <check_rxUart+0x23c>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	70da      	strb	r2, [r3, #3]
			HAL_UART_Transmit_IT(&huart7, txUart, 4);
 8001e7a:	2204      	movs	r2, #4
 8001e7c:	492d      	ldr	r1, [pc, #180]	; (8001f34 <check_rxUart+0x23c>)
 8001e7e:	482e      	ldr	r0, [pc, #184]	; (8001f38 <check_rxUart+0x240>)
 8001e80:	f004 fa21 	bl	80062c6 <HAL_UART_Transmit_IT>
			//sprintf(txUart, "RETR");
		break;
 8001e84:	e0cf      	b.n	8002026 <check_rxUart+0x32e>
		case GIRO_IZQ:
			giroIzq_cant += (uint16_t) (rxUart[2] + (rxUart[1] << 8));
 8001e86:	4b2a      	ldr	r3, [pc, #168]	; (8001f30 <check_rxUart+0x238>)
 8001e88:	789b      	ldrb	r3, [r3, #2]
 8001e8a:	b29a      	uxth	r2, r3
 8001e8c:	4b28      	ldr	r3, [pc, #160]	; (8001f30 <check_rxUart+0x238>)
 8001e8e:	785b      	ldrb	r3, [r3, #1]
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	021b      	lsls	r3, r3, #8
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	4413      	add	r3, r2
 8001e98:	b29a      	uxth	r2, r3
 8001e9a:	4b2e      	ldr	r3, [pc, #184]	; (8001f54 <check_rxUart+0x25c>)
 8001e9c:	881b      	ldrh	r3, [r3, #0]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	b29a      	uxth	r2, r3
 8001ea2:	4b2c      	ldr	r3, [pc, #176]	; (8001f54 <check_rxUart+0x25c>)
 8001ea4:	801a      	strh	r2, [r3, #0]

			txUart[0] = OK_;
 8001ea6:	4b23      	ldr	r3, [pc, #140]	; (8001f34 <check_rxUart+0x23c>)
 8001ea8:	2202      	movs	r2, #2
 8001eaa:	701a      	strb	r2, [r3, #0]
			txUart[3] = '\0';
 8001eac:	4b21      	ldr	r3, [pc, #132]	; (8001f34 <check_rxUart+0x23c>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	70da      	strb	r2, [r3, #3]
			HAL_UART_Transmit_IT(&huart7, txUart, 4);
 8001eb2:	2204      	movs	r2, #4
 8001eb4:	491f      	ldr	r1, [pc, #124]	; (8001f34 <check_rxUart+0x23c>)
 8001eb6:	4820      	ldr	r0, [pc, #128]	; (8001f38 <check_rxUart+0x240>)
 8001eb8:	f004 fa05 	bl	80062c6 <HAL_UART_Transmit_IT>
			//sprintf(txUart, "IZQU");
		break;
 8001ebc:	e0b3      	b.n	8002026 <check_rxUart+0x32e>
		case GIRO_DER:
			giroDer_cant += (uint16_t) (rxUart[2] + (rxUart[1] << 8));
 8001ebe:	4b1c      	ldr	r3, [pc, #112]	; (8001f30 <check_rxUart+0x238>)
 8001ec0:	789b      	ldrb	r3, [r3, #2]
 8001ec2:	b29a      	uxth	r2, r3
 8001ec4:	4b1a      	ldr	r3, [pc, #104]	; (8001f30 <check_rxUart+0x238>)
 8001ec6:	785b      	ldrb	r3, [r3, #1]
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	021b      	lsls	r3, r3, #8
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	4413      	add	r3, r2
 8001ed0:	b29a      	uxth	r2, r3
 8001ed2:	4b21      	ldr	r3, [pc, #132]	; (8001f58 <check_rxUart+0x260>)
 8001ed4:	881b      	ldrh	r3, [r3, #0]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	b29a      	uxth	r2, r3
 8001eda:	4b1f      	ldr	r3, [pc, #124]	; (8001f58 <check_rxUart+0x260>)
 8001edc:	801a      	strh	r2, [r3, #0]

			txUart[0] = OK_;
 8001ede:	4b15      	ldr	r3, [pc, #84]	; (8001f34 <check_rxUart+0x23c>)
 8001ee0:	2202      	movs	r2, #2
 8001ee2:	701a      	strb	r2, [r3, #0]
			txUart[3] = '\0';
 8001ee4:	4b13      	ldr	r3, [pc, #76]	; (8001f34 <check_rxUart+0x23c>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	70da      	strb	r2, [r3, #3]
			HAL_UART_Transmit_IT(&huart7, txUart, 4);
 8001eea:	2204      	movs	r2, #4
 8001eec:	4911      	ldr	r1, [pc, #68]	; (8001f34 <check_rxUart+0x23c>)
 8001eee:	4812      	ldr	r0, [pc, #72]	; (8001f38 <check_rxUart+0x240>)
 8001ef0:	f004 f9e9 	bl	80062c6 <HAL_UART_Transmit_IT>
			//sprintf(txUart, "DERE");
		break;
 8001ef4:	e097      	b.n	8002026 <check_rxUart+0x32e>
		case VEL_AVANCE:
			mpu9265_Read_Accel(&mpu9265);
 8001ef6:	4819      	ldr	r0, [pc, #100]	; (8001f5c <check_rxUart+0x264>)
 8001ef8:	f000 f96a 	bl	80021d0 <mpu9265_Read_Accel>

			txUart[0] = VEL_AVANCE;
 8001efc:	4b0d      	ldr	r3, [pc, #52]	; (8001f34 <check_rxUart+0x23c>)
 8001efe:	2214      	movs	r2, #20
 8001f00:	701a      	strb	r2, [r3, #0]
			txUart[1] = (uint8_t)(mpu9265.Accel_X_RAW >> 8);
 8001f02:	4b16      	ldr	r3, [pc, #88]	; (8001f5c <check_rxUart+0x264>)
 8001f04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f08:	121b      	asrs	r3, r3, #8
 8001f0a:	b21b      	sxth	r3, r3
 8001f0c:	b2da      	uxtb	r2, r3
 8001f0e:	4b09      	ldr	r3, [pc, #36]	; (8001f34 <check_rxUart+0x23c>)
 8001f10:	705a      	strb	r2, [r3, #1]
			txUart[2] = (uint8_t)(mpu9265.Accel_X_RAW & 0xFF);
 8001f12:	4b12      	ldr	r3, [pc, #72]	; (8001f5c <check_rxUart+0x264>)
 8001f14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f18:	b2da      	uxtb	r2, r3
 8001f1a:	4b06      	ldr	r3, [pc, #24]	; (8001f34 <check_rxUart+0x23c>)
 8001f1c:	709a      	strb	r2, [r3, #2]
			txUart[3] = '\0';
 8001f1e:	4b05      	ldr	r3, [pc, #20]	; (8001f34 <check_rxUart+0x23c>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	70da      	strb	r2, [r3, #3]
			HAL_UART_Transmit_IT(&huart7, txUart, 4);
 8001f24:	2204      	movs	r2, #4
 8001f26:	4903      	ldr	r1, [pc, #12]	; (8001f34 <check_rxUart+0x23c>)
 8001f28:	4803      	ldr	r0, [pc, #12]	; (8001f38 <check_rxUart+0x240>)
 8001f2a:	f004 f9cc 	bl	80062c6 <HAL_UART_Transmit_IT>
		break;
 8001f2e:	e07a      	b.n	8002026 <check_rxUart+0x32e>
 8001f30:	200000c4 	.word	0x200000c4
 8001f34:	200000c8 	.word	0x200000c8
 8001f38:	20000234 	.word	0x20000234
 8001f3c:	2000002d 	.word	0x2000002d
 8001f40:	20000000 	.word	0x20000000
 8001f44:	2000004e 	.word	0x2000004e
 8001f48:	2000002e 	.word	0x2000002e
 8001f4c:	20000030 	.word	0x20000030
 8001f50:	20000032 	.word	0x20000032
 8001f54:	20000034 	.word	0x20000034
 8001f58:	20000036 	.word	0x20000036
 8001f5c:	200000d0 	.word	0x200000d0
		case COORD_ANG:
			mpu9265_Read_Magnet(&mpu9265);
 8001f60:	4837      	ldr	r0, [pc, #220]	; (8002040 <check_rxUart+0x348>)
 8001f62:	f000 f969 	bl	8002238 <mpu9265_Read_Magnet>
			magX = mpu9265.Magnet_X_RAW;
 8001f66:	4b36      	ldr	r3, [pc, #216]	; (8002040 <check_rxUart+0x348>)
 8001f68:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001f6c:	ee07 3a90 	vmov	s15, r3
 8001f70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f74:	4b33      	ldr	r3, [pc, #204]	; (8002044 <check_rxUart+0x34c>)
 8001f76:	edc3 7a00 	vstr	s15, [r3]
			magY = mpu9265.Magnet_Y_RAW;
 8001f7a:	4b31      	ldr	r3, [pc, #196]	; (8002040 <check_rxUart+0x348>)
 8001f7c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001f80:	ee07 3a90 	vmov	s15, r3
 8001f84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f88:	4b2f      	ldr	r3, [pc, #188]	; (8002048 <check_rxUart+0x350>)
 8001f8a:	edc3 7a00 	vstr	s15, [r3]

			direccion_f32 = atan2f(magY, magX);
 8001f8e:	4b2e      	ldr	r3, [pc, #184]	; (8002048 <check_rxUart+0x350>)
 8001f90:	edd3 7a00 	vldr	s15, [r3]
 8001f94:	4b2b      	ldr	r3, [pc, #172]	; (8002044 <check_rxUart+0x34c>)
 8001f96:	ed93 7a00 	vldr	s14, [r3]
 8001f9a:	eef0 0a47 	vmov.f32	s1, s14
 8001f9e:	eeb0 0a67 	vmov.f32	s0, s15
 8001fa2:	f005 f853 	bl	800704c <atan2f>
 8001fa6:	eef0 7a40 	vmov.f32	s15, s0
 8001faa:	4b28      	ldr	r3, [pc, #160]	; (800204c <check_rxUart+0x354>)
 8001fac:	edc3 7a00 	vstr	s15, [r3]
			direccion_f32 *= (180.0/M_PI);
 8001fb0:	4b26      	ldr	r3, [pc, #152]	; (800204c <check_rxUart+0x354>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7fe fa7f 	bl	80004b8 <__aeabi_f2d>
 8001fba:	a31f      	add	r3, pc, #124	; (adr r3, 8002038 <check_rxUart+0x340>)
 8001fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fc0:	f7fe fad2 	bl	8000568 <__aeabi_dmul>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	460c      	mov	r4, r1
 8001fc8:	4618      	mov	r0, r3
 8001fca:	4621      	mov	r1, r4
 8001fcc:	f7fe fcde 	bl	800098c <__aeabi_d2f>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	4b1e      	ldr	r3, [pc, #120]	; (800204c <check_rxUart+0x354>)
 8001fd4:	601a      	str	r2, [r3, #0]
			direccion_i16 = direccion_f32/180;
 8001fd6:	4b1d      	ldr	r3, [pc, #116]	; (800204c <check_rxUart+0x354>)
 8001fd8:	ed93 7a00 	vldr	s14, [r3]
 8001fdc:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8002050 <check_rxUart+0x358>
 8001fe0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fe4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fe8:	ee17 3a90 	vmov	r3, s15
 8001fec:	b21a      	sxth	r2, r3
 8001fee:	4b19      	ldr	r3, [pc, #100]	; (8002054 <check_rxUart+0x35c>)
 8001ff0:	801a      	strh	r2, [r3, #0]

			txUart[0] = COORD_ANG;
 8001ff2:	4b19      	ldr	r3, [pc, #100]	; (8002058 <check_rxUart+0x360>)
 8001ff4:	2208      	movs	r2, #8
 8001ff6:	701a      	strb	r2, [r3, #0]
			txUart[1] = (uint8_t)(direccion_i16 >> 8);
 8001ff8:	4b16      	ldr	r3, [pc, #88]	; (8002054 <check_rxUart+0x35c>)
 8001ffa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ffe:	121b      	asrs	r3, r3, #8
 8002000:	b21b      	sxth	r3, r3
 8002002:	b2da      	uxtb	r2, r3
 8002004:	4b14      	ldr	r3, [pc, #80]	; (8002058 <check_rxUart+0x360>)
 8002006:	705a      	strb	r2, [r3, #1]
			txUart[2] = (uint8_t)(direccion_i16 & 0xFF);
 8002008:	4b12      	ldr	r3, [pc, #72]	; (8002054 <check_rxUart+0x35c>)
 800200a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800200e:	b2da      	uxtb	r2, r3
 8002010:	4b11      	ldr	r3, [pc, #68]	; (8002058 <check_rxUart+0x360>)
 8002012:	709a      	strb	r2, [r3, #2]
			txUart[3] = '\0';
 8002014:	4b10      	ldr	r3, [pc, #64]	; (8002058 <check_rxUart+0x360>)
 8002016:	2200      	movs	r2, #0
 8002018:	70da      	strb	r2, [r3, #3]
			HAL_UART_Transmit_IT(&huart7, txUart, 4);
 800201a:	2204      	movs	r2, #4
 800201c:	490e      	ldr	r1, [pc, #56]	; (8002058 <check_rxUart+0x360>)
 800201e:	480f      	ldr	r0, [pc, #60]	; (800205c <check_rxUart+0x364>)
 8002020:	f004 f951 	bl	80062c6 <HAL_UART_Transmit_IT>
		break;
 8002024:	bf00      	nop

	} //end switch rxUart[0]

	HAL_UART_Receive_IT(&huart7, rxUart, 4);
 8002026:	2204      	movs	r2, #4
 8002028:	490d      	ldr	r1, [pc, #52]	; (8002060 <check_rxUart+0x368>)
 800202a:	480c      	ldr	r0, [pc, #48]	; (800205c <check_rxUart+0x364>)
 800202c:	f004 f990 	bl	8006350 <HAL_UART_Receive_IT>

} //end check_rxUart ()
 8002030:	bd98      	pop	{r3, r4, r7, pc}
 8002032:	bf00      	nop
 8002034:	f3af 8000 	nop.w
 8002038:	1a63c1f8 	.word	0x1a63c1f8
 800203c:	404ca5dc 	.word	0x404ca5dc
 8002040:	200000d0 	.word	0x200000d0
 8002044:	200000e4 	.word	0x200000e4
 8002048:	200000bc 	.word	0x200000bc
 800204c:	200000e8 	.word	0x200000e8
 8002050:	43340000 	.word	0x43340000
 8002054:	200000c0 	.word	0x200000c0
 8002058:	200000c8 	.word	0x200000c8
 800205c:	20000234 	.word	0x20000234
 8002060:	200000c4 	.word	0x200000c4

08002064 <modo_funcionamiento>:

void modo_funcionamiento (void){
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0

	switch (modoFuncionamiento) {
 8002068:	4b08      	ldr	r3, [pc, #32]	; (800208c <modo_funcionamiento+0x28>)
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d002      	beq.n	8002076 <modo_funcionamiento+0x12>
 8002070:	2b01      	cmp	r3, #1
 8002072:	d005      	beq.n	8002080 <modo_funcionamiento+0x1c>
		break;
		case MANUAL:
			movimientoRC();
		break;
		default:
		break;
 8002074:	e007      	b.n	8002086 <modo_funcionamiento+0x22>
			movimientoLibre();
 8002076:	f7ff fa25 	bl	80014c4 <movimientoLibre>
			encoders();
 800207a:	f7ff fdcf 	bl	8001c1c <encoders>
		break;
 800207e:	e002      	b.n	8002086 <modo_funcionamiento+0x22>
			movimientoRC();
 8002080:	f7ff fbb8 	bl	80017f4 <movimientoRC>
		break;
 8002084:	bf00      	nop
	} //end switch modoFuncionamiento

} //end modo_funcionamiento ()
 8002086:	bf00      	nop
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	20000000 	.word	0x20000000

08002090 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002094:	bf00      	nop
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
	...

080020a0 <mpu9265_Init>:
//#define MPU9250_ADDRESS 0x69  // Device address when ADO = 1
#define AK8963_ADDRESS 0x0C   //  Address of magnetometer

I2C_HandleTypeDef* hi2c_mpu;

void mpu9265_Init(I2C_HandleTypeDef* i2c_handler){
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b088      	sub	sp, #32
 80020a4:	af04      	add	r7, sp, #16
 80020a6:	6078      	str	r0, [r7, #4]
	uint8_t check, data;

	hi2c_mpu = i2c_handler;
 80020a8:	4a48      	ldr	r2, [pc, #288]	; (80021cc <mpu9265_Init+0x12c>)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6013      	str	r3, [r2, #0]

	HAL_I2C_Mem_Read(hi2c_mpu, MPU9250_ADDRESS << 1, WHO_AM_I_MPU9250, 1, &check, 1, 1000);
 80020ae:	4b47      	ldr	r3, [pc, #284]	; (80021cc <mpu9265_Init+0x12c>)
 80020b0:	6818      	ldr	r0, [r3, #0]
 80020b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020b6:	9302      	str	r3, [sp, #8]
 80020b8:	2301      	movs	r3, #1
 80020ba:	9301      	str	r3, [sp, #4]
 80020bc:	f107 030f 	add.w	r3, r7, #15
 80020c0:	9300      	str	r3, [sp, #0]
 80020c2:	2301      	movs	r3, #1
 80020c4:	2275      	movs	r2, #117	; 0x75
 80020c6:	21d0      	movs	r1, #208	; 0xd0
 80020c8:	f001 fbce 	bl	8003868 <HAL_I2C_Mem_Read>

	if (check == 0X73){ //successfull respond
 80020cc:	7bfb      	ldrb	r3, [r7, #15]
 80020ce:	2b73      	cmp	r3, #115	; 0x73
 80020d0:	d141      	bne.n	8002156 <mpu9265_Init+0xb6>
		data = 0;
 80020d2:	2300      	movs	r3, #0
 80020d4:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(hi2c_mpu, MPU9250_ADDRESS << 1, PWR_MGMT_1, 1, &data, 1, 1000); //writing 0 in PWR_MGMT_1 reg to wake it up.
 80020d6:	4b3d      	ldr	r3, [pc, #244]	; (80021cc <mpu9265_Init+0x12c>)
 80020d8:	6818      	ldr	r0, [r3, #0]
 80020da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020de:	9302      	str	r3, [sp, #8]
 80020e0:	2301      	movs	r3, #1
 80020e2:	9301      	str	r3, [sp, #4]
 80020e4:	f107 030e 	add.w	r3, r7, #14
 80020e8:	9300      	str	r3, [sp, #0]
 80020ea:	2301      	movs	r3, #1
 80020ec:	226b      	movs	r2, #107	; 0x6b
 80020ee:	21d0      	movs	r1, #208	; 0xd0
 80020f0:	f001 fac0 	bl	8003674 <HAL_I2C_Mem_Write>

		data = 0X07;
 80020f4:	2307      	movs	r3, #7
 80020f6:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(hi2c_mpu, MPU9250_ADDRESS << 1, SMPLRT_DIV, 1, &data, 1, 1000); //seting data rate in 1kHz by writing 0x07 in SMPLRT_DIV reg.
 80020f8:	4b34      	ldr	r3, [pc, #208]	; (80021cc <mpu9265_Init+0x12c>)
 80020fa:	6818      	ldr	r0, [r3, #0]
 80020fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002100:	9302      	str	r3, [sp, #8]
 8002102:	2301      	movs	r3, #1
 8002104:	9301      	str	r3, [sp, #4]
 8002106:	f107 030e 	add.w	r3, r7, #14
 800210a:	9300      	str	r3, [sp, #0]
 800210c:	2301      	movs	r3, #1
 800210e:	2219      	movs	r2, #25
 8002110:	21d0      	movs	r1, #208	; 0xd0
 8002112:	f001 faaf 	bl	8003674 <HAL_I2C_Mem_Write>

		data = 0;
 8002116:	2300      	movs	r3, #0
 8002118:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(hi2c_mpu, MPU9250_ADDRESS << 1, GYRO_CONFIG, 1, &data, 1, 1000); //SET GYROSCOPIC CONFIGURATION: XG_ST=0; YG_ST=0; ZG_ST=0; FS_SEL=0 -> +/- 250 º/s.
 800211a:	4b2c      	ldr	r3, [pc, #176]	; (80021cc <mpu9265_Init+0x12c>)
 800211c:	6818      	ldr	r0, [r3, #0]
 800211e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002122:	9302      	str	r3, [sp, #8]
 8002124:	2301      	movs	r3, #1
 8002126:	9301      	str	r3, [sp, #4]
 8002128:	f107 030e 	add.w	r3, r7, #14
 800212c:	9300      	str	r3, [sp, #0]
 800212e:	2301      	movs	r3, #1
 8002130:	221b      	movs	r2, #27
 8002132:	21d0      	movs	r1, #208	; 0xd0
 8002134:	f001 fa9e 	bl	8003674 <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Write(hi2c_mpu, MPU9250_ADDRESS << 1, ACCEL_CONFIG, 1, &data, 1, 1000); //SET accelerometer CONFIGURATION: XA_ST=0; YA_ST=0; ZA_ST=0; FS_SEL=0 -> +/- 2g.
 8002138:	4b24      	ldr	r3, [pc, #144]	; (80021cc <mpu9265_Init+0x12c>)
 800213a:	6818      	ldr	r0, [r3, #0]
 800213c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002140:	9302      	str	r3, [sp, #8]
 8002142:	2301      	movs	r3, #1
 8002144:	9301      	str	r3, [sp, #4]
 8002146:	f107 030e 	add.w	r3, r7, #14
 800214a:	9300      	str	r3, [sp, #0]
 800214c:	2301      	movs	r3, #1
 800214e:	221c      	movs	r2, #28
 8002150:	21d0      	movs	r1, #208	; 0xd0
 8002152:	f001 fa8f 	bl	8003674 <HAL_I2C_Mem_Write>
	}else{
		//Error_Handler();
	}

	data = 0b10; //i2c bypass bit, in INT_PIN_CFG reg. (made to reach the magnetometer)
 8002156:	2302      	movs	r3, #2
 8002158:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(hi2c_mpu, MPU9250_ADDRESS << 1, INT_PIN_CFG, 1, &data, 1, 1000);
 800215a:	4b1c      	ldr	r3, [pc, #112]	; (80021cc <mpu9265_Init+0x12c>)
 800215c:	6818      	ldr	r0, [r3, #0]
 800215e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002162:	9302      	str	r3, [sp, #8]
 8002164:	2301      	movs	r3, #1
 8002166:	9301      	str	r3, [sp, #4]
 8002168:	f107 030e 	add.w	r3, r7, #14
 800216c:	9300      	str	r3, [sp, #0]
 800216e:	2301      	movs	r3, #1
 8002170:	2237      	movs	r2, #55	; 0x37
 8002172:	21d0      	movs	r1, #208	; 0xd0
 8002174:	f001 fa7e 	bl	8003674 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Read(hi2c_mpu, AK8963_ADDRESS << 1, WHO_AM_I_AK8963, 1, &check, 1, 1000);
 8002178:	4b14      	ldr	r3, [pc, #80]	; (80021cc <mpu9265_Init+0x12c>)
 800217a:	6818      	ldr	r0, [r3, #0]
 800217c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002180:	9302      	str	r3, [sp, #8]
 8002182:	2301      	movs	r3, #1
 8002184:	9301      	str	r3, [sp, #4]
 8002186:	f107 030f 	add.w	r3, r7, #15
 800218a:	9300      	str	r3, [sp, #0]
 800218c:	2301      	movs	r3, #1
 800218e:	2200      	movs	r2, #0
 8002190:	2118      	movs	r1, #24
 8002192:	f001 fb69 	bl	8003868 <HAL_I2C_Mem_Read>
	HAL_Delay(1);
 8002196:	2001      	movs	r0, #1
 8002198:	f000 fd94 	bl	8002cc4 <HAL_Delay>
	if (check == 0X48){ //successfull respond
 800219c:	7bfb      	ldrb	r3, [r7, #15]
 800219e:	2b48      	cmp	r3, #72	; 0x48
 80021a0:	d110      	bne.n	80021c4 <mpu9265_Init+0x124>
		data = 0B00110;// 0b10110: 0001 (MSB, 16 bit resolution) 0110 (LSB, 100Hz sample rate).
 80021a2:	2306      	movs	r3, #6
 80021a4:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(hi2c_mpu, AK8963_ADDRESS << 1, AK8963_CNTL, 1, &data, 1, 1000); //
 80021a6:	4b09      	ldr	r3, [pc, #36]	; (80021cc <mpu9265_Init+0x12c>)
 80021a8:	6818      	ldr	r0, [r3, #0]
 80021aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021ae:	9302      	str	r3, [sp, #8]
 80021b0:	2301      	movs	r3, #1
 80021b2:	9301      	str	r3, [sp, #4]
 80021b4:	f107 030e 	add.w	r3, r7, #14
 80021b8:	9300      	str	r3, [sp, #0]
 80021ba:	2301      	movs	r3, #1
 80021bc:	220a      	movs	r2, #10
 80021be:	2118      	movs	r1, #24
 80021c0:	f001 fa58 	bl	8003674 <HAL_I2C_Mem_Write>
		//Error_Handler();
	}



}
 80021c4:	bf00      	nop
 80021c6:	3710      	adds	r7, #16
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	200000f0 	.word	0x200000f0

080021d0 <mpu9265_Read_Accel>:

void mpu9265_Read_Accel(mpuData_t* mpuData){
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b088      	sub	sp, #32
 80021d4:	af04      	add	r7, sp, #16
 80021d6:	6078      	str	r0, [r7, #4]

	uint8_t data[6];

	HAL_I2C_Mem_Read(hi2c_mpu, MPU9250_ADDRESS << 1, ACCEL_XOUT_H, 1, data, 6, 1000);
 80021d8:	4b16      	ldr	r3, [pc, #88]	; (8002234 <mpu9265_Read_Accel+0x64>)
 80021da:	6818      	ldr	r0, [r3, #0]
 80021dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021e0:	9302      	str	r3, [sp, #8]
 80021e2:	2306      	movs	r3, #6
 80021e4:	9301      	str	r3, [sp, #4]
 80021e6:	f107 0308 	add.w	r3, r7, #8
 80021ea:	9300      	str	r3, [sp, #0]
 80021ec:	2301      	movs	r3, #1
 80021ee:	223b      	movs	r2, #59	; 0x3b
 80021f0:	21d0      	movs	r1, #208	; 0xd0
 80021f2:	f001 fb39 	bl	8003868 <HAL_I2C_Mem_Read>
	mpuData->Accel_X_RAW = (uint16_t) ( data[0]<<8 | data[1] );
 80021f6:	7a3b      	ldrb	r3, [r7, #8]
 80021f8:	021b      	lsls	r3, r3, #8
 80021fa:	b21a      	sxth	r2, r3
 80021fc:	7a7b      	ldrb	r3, [r7, #9]
 80021fe:	b21b      	sxth	r3, r3
 8002200:	4313      	orrs	r3, r2
 8002202:	b21a      	sxth	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	801a      	strh	r2, [r3, #0]
	mpuData->Accel_Y_RAW = (uint16_t) ( data[2]<<8 | data[3] );
 8002208:	7abb      	ldrb	r3, [r7, #10]
 800220a:	021b      	lsls	r3, r3, #8
 800220c:	b21a      	sxth	r2, r3
 800220e:	7afb      	ldrb	r3, [r7, #11]
 8002210:	b21b      	sxth	r3, r3
 8002212:	4313      	orrs	r3, r2
 8002214:	b21a      	sxth	r2, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	805a      	strh	r2, [r3, #2]
	mpuData->Accel_Z_RAW = (uint16_t) ( data[4]<<8 | data[5] );
 800221a:	7b3b      	ldrb	r3, [r7, #12]
 800221c:	021b      	lsls	r3, r3, #8
 800221e:	b21a      	sxth	r2, r3
 8002220:	7b7b      	ldrb	r3, [r7, #13]
 8002222:	b21b      	sxth	r3, r3
 8002224:	4313      	orrs	r3, r2
 8002226:	b21a      	sxth	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	809a      	strh	r2, [r3, #4]
}
 800222c:	bf00      	nop
 800222e:	3710      	adds	r7, #16
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	200000f0 	.word	0x200000f0

08002238 <mpu9265_Read_Magnet>:
	mpuData->Gyro_X_RAW = (uint16_t) ( data[0]<<8 | data[1] );
	mpuData->Gyro_Y_RAW = (uint16_t) ( data[2]<<8 | data[3] );
	mpuData->Gyro_Z_RAW = (uint16_t) ( data[4]<<8 | data[5] );
}

void mpu9265_Read_Magnet(mpuData_t* mpuData){
 8002238:	b580      	push	{r7, lr}
 800223a:	b088      	sub	sp, #32
 800223c:	af04      	add	r7, sp, #16
 800223e:	6078      	str	r0, [r7, #4]

	uint8_t ready, data[7];

	HAL_I2C_Mem_Read(hi2c_mpu, AK8963_ADDRESS << 1, AK8963_ST1, 1, &ready, 1, 1000);
 8002240:	4b22      	ldr	r3, [pc, #136]	; (80022cc <mpu9265_Read_Magnet+0x94>)
 8002242:	6818      	ldr	r0, [r3, #0]
 8002244:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002248:	9302      	str	r3, [sp, #8]
 800224a:	2301      	movs	r3, #1
 800224c:	9301      	str	r3, [sp, #4]
 800224e:	f107 030f 	add.w	r3, r7, #15
 8002252:	9300      	str	r3, [sp, #0]
 8002254:	2301      	movs	r3, #1
 8002256:	2202      	movs	r2, #2
 8002258:	2118      	movs	r1, #24
 800225a:	f001 fb05 	bl	8003868 <HAL_I2C_Mem_Read>

	if (ready){
 800225e:	7bfb      	ldrb	r3, [r7, #15]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d02e      	beq.n	80022c2 <mpu9265_Read_Magnet+0x8a>
		HAL_I2C_Mem_Read(hi2c_mpu, AK8963_ADDRESS << 1, AK8963_XOUT_L, 1, data, 7, 1000);
 8002264:	4b19      	ldr	r3, [pc, #100]	; (80022cc <mpu9265_Read_Magnet+0x94>)
 8002266:	6818      	ldr	r0, [r3, #0]
 8002268:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800226c:	9302      	str	r3, [sp, #8]
 800226e:	2307      	movs	r3, #7
 8002270:	9301      	str	r3, [sp, #4]
 8002272:	f107 0308 	add.w	r3, r7, #8
 8002276:	9300      	str	r3, [sp, #0]
 8002278:	2301      	movs	r3, #1
 800227a:	2203      	movs	r2, #3
 800227c:	2118      	movs	r1, #24
 800227e:	f001 faf3 	bl	8003868 <HAL_I2C_Mem_Read>
		if (!(data[6] & 0x08)){// Check if magnetic sensor overflow set, if not then report data
 8002282:	7bbb      	ldrb	r3, [r7, #14]
 8002284:	f003 0308 	and.w	r3, r3, #8
 8002288:	2b00      	cmp	r3, #0
 800228a:	d11a      	bne.n	80022c2 <mpu9265_Read_Magnet+0x8a>
			mpuData->Magnet_X_RAW = (uint16_t) ( data[1]<<8 | data[0] );
 800228c:	7a7b      	ldrb	r3, [r7, #9]
 800228e:	021b      	lsls	r3, r3, #8
 8002290:	b21a      	sxth	r2, r3
 8002292:	7a3b      	ldrb	r3, [r7, #8]
 8002294:	b21b      	sxth	r3, r3
 8002296:	4313      	orrs	r3, r2
 8002298:	b21a      	sxth	r2, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	819a      	strh	r2, [r3, #12]
			mpuData->Magnet_Y_RAW = (uint16_t) ( data[3]<<8 | data[2] );
 800229e:	7afb      	ldrb	r3, [r7, #11]
 80022a0:	021b      	lsls	r3, r3, #8
 80022a2:	b21a      	sxth	r2, r3
 80022a4:	7abb      	ldrb	r3, [r7, #10]
 80022a6:	b21b      	sxth	r3, r3
 80022a8:	4313      	orrs	r3, r2
 80022aa:	b21a      	sxth	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	81da      	strh	r2, [r3, #14]
			mpuData->Magnet_Z_RAW = (uint16_t) ( data[5]<<8 | data[4] );
 80022b0:	7b7b      	ldrb	r3, [r7, #13]
 80022b2:	021b      	lsls	r3, r3, #8
 80022b4:	b21a      	sxth	r2, r3
 80022b6:	7b3b      	ldrb	r3, [r7, #12]
 80022b8:	b21b      	sxth	r3, r3
 80022ba:	4313      	orrs	r3, r2
 80022bc:	b21a      	sxth	r2, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	821a      	strh	r2, [r3, #16]
		}
	}
}
 80022c2:	bf00      	nop
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	200000f0 	.word	0x200000f0

080022d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022d6:	2300      	movs	r3, #0
 80022d8:	607b      	str	r3, [r7, #4]
 80022da:	4b10      	ldr	r3, [pc, #64]	; (800231c <HAL_MspInit+0x4c>)
 80022dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022de:	4a0f      	ldr	r2, [pc, #60]	; (800231c <HAL_MspInit+0x4c>)
 80022e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022e4:	6453      	str	r3, [r2, #68]	; 0x44
 80022e6:	4b0d      	ldr	r3, [pc, #52]	; (800231c <HAL_MspInit+0x4c>)
 80022e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022ee:	607b      	str	r3, [r7, #4]
 80022f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022f2:	2300      	movs	r3, #0
 80022f4:	603b      	str	r3, [r7, #0]
 80022f6:	4b09      	ldr	r3, [pc, #36]	; (800231c <HAL_MspInit+0x4c>)
 80022f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fa:	4a08      	ldr	r2, [pc, #32]	; (800231c <HAL_MspInit+0x4c>)
 80022fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002300:	6413      	str	r3, [r2, #64]	; 0x40
 8002302:	4b06      	ldr	r3, [pc, #24]	; (800231c <HAL_MspInit+0x4c>)
 8002304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800230a:	603b      	str	r3, [r7, #0]
 800230c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800230e:	bf00      	nop
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	40023800 	.word	0x40023800

08002320 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002324:	bf00      	nop
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr

0800232e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800232e:	b480      	push	{r7}
 8002330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002332:	e7fe      	b.n	8002332 <HardFault_Handler+0x4>

08002334 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002338:	e7fe      	b.n	8002338 <MemManage_Handler+0x4>

0800233a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800233a:	b480      	push	{r7}
 800233c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800233e:	e7fe      	b.n	800233e <BusFault_Handler+0x4>

08002340 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002344:	e7fe      	b.n	8002344 <UsageFault_Handler+0x4>

08002346 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002346:	b480      	push	{r7}
 8002348:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800234a:	bf00      	nop
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002358:	bf00      	nop
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr

08002362 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002362:	b480      	push	{r7}
 8002364:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002366:	bf00      	nop
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002374:	f000 fc86 	bl	8002c84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002378:	bf00      	nop
 800237a:	bd80      	pop	{r7, pc}

0800237c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002380:	4802      	ldr	r0, [pc, #8]	; (800238c <TIM5_IRQHandler+0x10>)
 8002382:	f002 fea3 	bl	80050cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002386:	bf00      	nop
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	20000134 	.word	0x20000134

08002390 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002394:	4802      	ldr	r0, [pc, #8]	; (80023a0 <TIM7_IRQHandler+0x10>)
 8002396:	f002 fe99 	bl	80050cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800239a:	bf00      	nop
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	200001f4 	.word	0x200001f4

080023a4 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 80023a8:	4802      	ldr	r0, [pc, #8]	; (80023b4 <UART7_IRQHandler+0x10>)
 80023aa:	f004 f827 	bl	80063fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 80023ae:	bf00      	nop
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	20000234 	.word	0x20000234

080023b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023bc:	4b08      	ldr	r3, [pc, #32]	; (80023e0 <SystemInit+0x28>)
 80023be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023c2:	4a07      	ldr	r2, [pc, #28]	; (80023e0 <SystemInit+0x28>)
 80023c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80023cc:	4b04      	ldr	r3, [pc, #16]	; (80023e0 <SystemInit+0x28>)
 80023ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80023d2:	609a      	str	r2, [r3, #8]
#endif
}
 80023d4:	bf00      	nop
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	e000ed00 	.word	0xe000ed00

080023e4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b086      	sub	sp, #24
 80023e8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023ea:	f107 0308 	add.w	r3, r7, #8
 80023ee:	2200      	movs	r2, #0
 80023f0:	601a      	str	r2, [r3, #0]
 80023f2:	605a      	str	r2, [r3, #4]
 80023f4:	609a      	str	r2, [r3, #8]
 80023f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023f8:	463b      	mov	r3, r7
 80023fa:	2200      	movs	r2, #0
 80023fc:	601a      	str	r2, [r3, #0]
 80023fe:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8002400:	4b20      	ldr	r3, [pc, #128]	; (8002484 <MX_TIM2_Init+0xa0>)
 8002402:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002406:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002408:	4b1e      	ldr	r3, [pc, #120]	; (8002484 <MX_TIM2_Init+0xa0>)
 800240a:	2200      	movs	r2, #0
 800240c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800240e:	4b1d      	ldr	r3, [pc, #116]	; (8002484 <MX_TIM2_Init+0xa0>)
 8002410:	2200      	movs	r2, #0
 8002412:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002414:	4b1b      	ldr	r3, [pc, #108]	; (8002484 <MX_TIM2_Init+0xa0>)
 8002416:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800241a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800241c:	4b19      	ldr	r3, [pc, #100]	; (8002484 <MX_TIM2_Init+0xa0>)
 800241e:	2200      	movs	r2, #0
 8002420:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002422:	4b18      	ldr	r3, [pc, #96]	; (8002484 <MX_TIM2_Init+0xa0>)
 8002424:	2200      	movs	r2, #0
 8002426:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002428:	4816      	ldr	r0, [pc, #88]	; (8002484 <MX_TIM2_Init+0xa0>)
 800242a:	f002 fccb 	bl	8004dc4 <HAL_TIM_Base_Init>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002434:	f7ff fe2c 	bl	8002090 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8002438:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800243c:	60bb      	str	r3, [r7, #8]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 800243e:	2300      	movs	r3, #0
 8002440:	60fb      	str	r3, [r7, #12]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8002442:	2300      	movs	r3, #0
 8002444:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockFilter = 0;
 8002446:	2300      	movs	r3, #0
 8002448:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800244a:	f107 0308 	add.w	r3, r7, #8
 800244e:	4619      	mov	r1, r3
 8002450:	480c      	ldr	r0, [pc, #48]	; (8002484 <MX_TIM2_Init+0xa0>)
 8002452:	f003 f8a5 	bl	80055a0 <HAL_TIM_ConfigClockSource>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d001      	beq.n	8002460 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 800245c:	f7ff fe18 	bl	8002090 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002460:	2300      	movs	r3, #0
 8002462:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002464:	2300      	movs	r3, #0
 8002466:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002468:	463b      	mov	r3, r7
 800246a:	4619      	mov	r1, r3
 800246c:	4805      	ldr	r0, [pc, #20]	; (8002484 <MX_TIM2_Init+0xa0>)
 800246e:	f003 fda7 	bl	8005fc0 <HAL_TIMEx_MasterConfigSynchronization>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8002478:	f7ff fe0a 	bl	8002090 <Error_Handler>
  }

}
 800247c:	bf00      	nop
 800247e:	3718      	adds	r7, #24
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	200001b4 	.word	0x200001b4

08002488 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800248e:	f107 0308 	add.w	r3, r7, #8
 8002492:	2200      	movs	r2, #0
 8002494:	601a      	str	r2, [r3, #0]
 8002496:	605a      	str	r2, [r3, #4]
 8002498:	609a      	str	r2, [r3, #8]
 800249a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800249c:	463b      	mov	r3, r7
 800249e:	2200      	movs	r2, #0
 80024a0:	601a      	str	r2, [r3, #0]
 80024a2:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 80024a4:	4b20      	ldr	r3, [pc, #128]	; (8002528 <MX_TIM3_Init+0xa0>)
 80024a6:	4a21      	ldr	r2, [pc, #132]	; (800252c <MX_TIM3_Init+0xa4>)
 80024a8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80024aa:	4b1f      	ldr	r3, [pc, #124]	; (8002528 <MX_TIM3_Init+0xa0>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024b0:	4b1d      	ldr	r3, [pc, #116]	; (8002528 <MX_TIM3_Init+0xa0>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80024b6:	4b1c      	ldr	r3, [pc, #112]	; (8002528 <MX_TIM3_Init+0xa0>)
 80024b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024bc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024be:	4b1a      	ldr	r3, [pc, #104]	; (8002528 <MX_TIM3_Init+0xa0>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024c4:	4b18      	ldr	r3, [pc, #96]	; (8002528 <MX_TIM3_Init+0xa0>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80024ca:	4817      	ldr	r0, [pc, #92]	; (8002528 <MX_TIM3_Init+0xa0>)
 80024cc:	f002 fc7a 	bl	8004dc4 <HAL_TIM_Base_Init>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80024d6:	f7ff fddb 	bl	8002090 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 80024da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024de:	60bb      	str	r3, [r7, #8]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 80024e0:	2300      	movs	r3, #0
 80024e2:	60fb      	str	r3, [r7, #12]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 80024e4:	2300      	movs	r3, #0
 80024e6:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockFilter = 0;
 80024e8:	2300      	movs	r3, #0
 80024ea:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80024ec:	f107 0308 	add.w	r3, r7, #8
 80024f0:	4619      	mov	r1, r3
 80024f2:	480d      	ldr	r0, [pc, #52]	; (8002528 <MX_TIM3_Init+0xa0>)
 80024f4:	f003 f854 	bl	80055a0 <HAL_TIM_ConfigClockSource>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80024fe:	f7ff fdc7 	bl	8002090 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002502:	2300      	movs	r3, #0
 8002504:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002506:	2300      	movs	r3, #0
 8002508:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800250a:	463b      	mov	r3, r7
 800250c:	4619      	mov	r1, r3
 800250e:	4806      	ldr	r0, [pc, #24]	; (8002528 <MX_TIM3_Init+0xa0>)
 8002510:	f003 fd56 	bl	8005fc0 <HAL_TIMEx_MasterConfigSynchronization>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800251a:	f7ff fdb9 	bl	8002090 <Error_Handler>
  }

}
 800251e:	bf00      	nop
 8002520:	3718      	adds	r7, #24
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	20000174 	.word	0x20000174
 800252c:	40000400 	.word	0x40000400

08002530 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b08e      	sub	sp, #56	; 0x38
 8002534:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002536:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800253a:	2200      	movs	r2, #0
 800253c:	601a      	str	r2, [r3, #0]
 800253e:	605a      	str	r2, [r3, #4]
 8002540:	609a      	str	r2, [r3, #8]
 8002542:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002544:	f107 0320 	add.w	r3, r7, #32
 8002548:	2200      	movs	r2, #0
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800254e:	1d3b      	adds	r3, r7, #4
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]
 8002554:	605a      	str	r2, [r3, #4]
 8002556:	609a      	str	r2, [r3, #8]
 8002558:	60da      	str	r2, [r3, #12]
 800255a:	611a      	str	r2, [r3, #16]
 800255c:	615a      	str	r2, [r3, #20]
 800255e:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8002560:	4b31      	ldr	r3, [pc, #196]	; (8002628 <MX_TIM4_Init+0xf8>)
 8002562:	4a32      	ldr	r2, [pc, #200]	; (800262c <MX_TIM4_Init+0xfc>)
 8002564:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 15-1;
 8002566:	4b30      	ldr	r3, [pc, #192]	; (8002628 <MX_TIM4_Init+0xf8>)
 8002568:	220e      	movs	r2, #14
 800256a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800256c:	4b2e      	ldr	r3, [pc, #184]	; (8002628 <MX_TIM4_Init+0xf8>)
 800256e:	2200      	movs	r2, #0
 8002570:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 200-1;
 8002572:	4b2d      	ldr	r3, [pc, #180]	; (8002628 <MX_TIM4_Init+0xf8>)
 8002574:	22c7      	movs	r2, #199	; 0xc7
 8002576:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002578:	4b2b      	ldr	r3, [pc, #172]	; (8002628 <MX_TIM4_Init+0xf8>)
 800257a:	2200      	movs	r2, #0
 800257c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800257e:	4b2a      	ldr	r3, [pc, #168]	; (8002628 <MX_TIM4_Init+0xf8>)
 8002580:	2200      	movs	r2, #0
 8002582:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002584:	4828      	ldr	r0, [pc, #160]	; (8002628 <MX_TIM4_Init+0xf8>)
 8002586:	f002 fc1d 	bl	8004dc4 <HAL_TIM_Base_Init>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d001      	beq.n	8002594 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8002590:	f7ff fd7e 	bl	8002090 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002594:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002598:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800259a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800259e:	4619      	mov	r1, r3
 80025a0:	4821      	ldr	r0, [pc, #132]	; (8002628 <MX_TIM4_Init+0xf8>)
 80025a2:	f002 fffd 	bl	80055a0 <HAL_TIM_ConfigClockSource>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d001      	beq.n	80025b0 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 80025ac:	f7ff fd70 	bl	8002090 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80025b0:	481d      	ldr	r0, [pc, #116]	; (8002628 <MX_TIM4_Init+0xf8>)
 80025b2:	f002 fc7a 	bl	8004eaa <HAL_TIM_PWM_Init>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 80025bc:	f7ff fd68 	bl	8002090 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025c0:	2300      	movs	r3, #0
 80025c2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025c4:	2300      	movs	r3, #0
 80025c6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80025c8:	f107 0320 	add.w	r3, r7, #32
 80025cc:	4619      	mov	r1, r3
 80025ce:	4816      	ldr	r0, [pc, #88]	; (8002628 <MX_TIM4_Init+0xf8>)
 80025d0:	f003 fcf6 	bl	8005fc0 <HAL_TIMEx_MasterConfigSynchronization>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 80025da:	f7ff fd59 	bl	8002090 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025de:	2360      	movs	r3, #96	; 0x60
 80025e0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 72-1;
 80025e2:	2347      	movs	r3, #71	; 0x47
 80025e4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025e6:	2300      	movs	r3, #0
 80025e8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025ea:	2300      	movs	r3, #0
 80025ec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025ee:	1d3b      	adds	r3, r7, #4
 80025f0:	2200      	movs	r2, #0
 80025f2:	4619      	mov	r1, r3
 80025f4:	480c      	ldr	r0, [pc, #48]	; (8002628 <MX_TIM4_Init+0xf8>)
 80025f6:	f002 ff0d 	bl	8005414 <HAL_TIM_PWM_ConfigChannel>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8002600:	f7ff fd46 	bl	8002090 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002604:	1d3b      	adds	r3, r7, #4
 8002606:	2204      	movs	r2, #4
 8002608:	4619      	mov	r1, r3
 800260a:	4807      	ldr	r0, [pc, #28]	; (8002628 <MX_TIM4_Init+0xf8>)
 800260c:	f002 ff02 	bl	8005414 <HAL_TIM_PWM_ConfigChannel>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d001      	beq.n	800261a <MX_TIM4_Init+0xea>
  {
    Error_Handler();
 8002616:	f7ff fd3b 	bl	8002090 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 800261a:	4803      	ldr	r0, [pc, #12]	; (8002628 <MX_TIM4_Init+0xf8>)
 800261c:	f000 f9d8 	bl	80029d0 <HAL_TIM_MspPostInit>

}
 8002620:	bf00      	nop
 8002622:	3738      	adds	r7, #56	; 0x38
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	200000f4 	.word	0x200000f4
 800262c:	40000800 	.word	0x40000800

08002630 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b092      	sub	sp, #72	; 0x48
 8002634:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002636:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800263a:	2200      	movs	r2, #0
 800263c:	601a      	str	r2, [r3, #0]
 800263e:	605a      	str	r2, [r3, #4]
 8002640:	609a      	str	r2, [r3, #8]
 8002642:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002644:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002648:	2200      	movs	r2, #0
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800264e:	f107 0314 	add.w	r3, r7, #20
 8002652:	2200      	movs	r2, #0
 8002654:	601a      	str	r2, [r3, #0]
 8002656:	605a      	str	r2, [r3, #4]
 8002658:	609a      	str	r2, [r3, #8]
 800265a:	60da      	str	r2, [r3, #12]
 800265c:	611a      	str	r2, [r3, #16]
 800265e:	615a      	str	r2, [r3, #20]
 8002660:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002662:	1d3b      	adds	r3, r7, #4
 8002664:	2200      	movs	r2, #0
 8002666:	601a      	str	r2, [r3, #0]
 8002668:	605a      	str	r2, [r3, #4]
 800266a:	609a      	str	r2, [r3, #8]
 800266c:	60da      	str	r2, [r3, #12]

  htim5.Instance = TIM5;
 800266e:	4b43      	ldr	r3, [pc, #268]	; (800277c <MX_TIM5_Init+0x14c>)
 8002670:	4a43      	ldr	r2, [pc, #268]	; (8002780 <MX_TIM5_Init+0x150>)
 8002672:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 90-1;
 8002674:	4b41      	ldr	r3, [pc, #260]	; (800277c <MX_TIM5_Init+0x14c>)
 8002676:	2259      	movs	r2, #89	; 0x59
 8002678:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800267a:	4b40      	ldr	r3, [pc, #256]	; (800277c <MX_TIM5_Init+0x14c>)
 800267c:	2200      	movs	r2, #0
 800267e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002680:	4b3e      	ldr	r3, [pc, #248]	; (800277c <MX_TIM5_Init+0x14c>)
 8002682:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002686:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002688:	4b3c      	ldr	r3, [pc, #240]	; (800277c <MX_TIM5_Init+0x14c>)
 800268a:	2200      	movs	r2, #0
 800268c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800268e:	4b3b      	ldr	r3, [pc, #236]	; (800277c <MX_TIM5_Init+0x14c>)
 8002690:	2200      	movs	r2, #0
 8002692:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002694:	4839      	ldr	r0, [pc, #228]	; (800277c <MX_TIM5_Init+0x14c>)
 8002696:	f002 fb95 	bl	8004dc4 <HAL_TIM_Base_Init>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 80026a0:	f7ff fcf6 	bl	8002090 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026a8:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80026aa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80026ae:	4619      	mov	r1, r3
 80026b0:	4832      	ldr	r0, [pc, #200]	; (800277c <MX_TIM5_Init+0x14c>)
 80026b2:	f002 ff75 	bl	80055a0 <HAL_TIM_ConfigClockSource>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d001      	beq.n	80026c0 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 80026bc:	f7ff fce8 	bl	8002090 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80026c0:	482e      	ldr	r0, [pc, #184]	; (800277c <MX_TIM5_Init+0x14c>)
 80026c2:	f002 fbf2 	bl	8004eaa <HAL_TIM_PWM_Init>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d001      	beq.n	80026d0 <MX_TIM5_Init+0xa0>
  {
    Error_Handler();
 80026cc:	f7ff fce0 	bl	8002090 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 80026d0:	482a      	ldr	r0, [pc, #168]	; (800277c <MX_TIM5_Init+0x14c>)
 80026d2:	f002 fc5d 	bl	8004f90 <HAL_TIM_IC_Init>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d001      	beq.n	80026e0 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 80026dc:	f7ff fcd8 	bl	8002090 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026e0:	2300      	movs	r3, #0
 80026e2:	633b      	str	r3, [r7, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026e4:	2300      	movs	r3, #0
 80026e6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80026e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80026ec:	4619      	mov	r1, r3
 80026ee:	4823      	ldr	r0, [pc, #140]	; (800277c <MX_TIM5_Init+0x14c>)
 80026f0:	f003 fc66 	bl	8005fc0 <HAL_TIMEx_MasterConfigSynchronization>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <MX_TIM5_Init+0xce>
  {
    Error_Handler();
 80026fa:	f7ff fcc9 	bl	8002090 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026fe:	2360      	movs	r3, #96	; 0x60
 8002700:	617b      	str	r3, [r7, #20]
  sConfigOC.Pulse = 0xFFFFFFF5;
 8002702:	f06f 030a 	mvn.w	r3, #10
 8002706:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8002708:	2302      	movs	r3, #2
 800270a:	61fb      	str	r3, [r7, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800270c:	2300      	movs	r3, #0
 800270e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002710:	f107 0314 	add.w	r3, r7, #20
 8002714:	2200      	movs	r2, #0
 8002716:	4619      	mov	r1, r3
 8002718:	4818      	ldr	r0, [pc, #96]	; (800277c <MX_TIM5_Init+0x14c>)
 800271a:	f002 fe7b 	bl	8005414 <HAL_TIM_PWM_ConfigChannel>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d001      	beq.n	8002728 <MX_TIM5_Init+0xf8>
  {
    Error_Handler();
 8002724:	f7ff fcb4 	bl	8002090 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002728:	2300      	movs	r3, #0
 800272a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800272c:	2301      	movs	r3, #1
 800272e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002730:	2300      	movs	r3, #0
 8002732:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8002734:	2300      	movs	r3, #0
 8002736:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002738:	1d3b      	adds	r3, r7, #4
 800273a:	2208      	movs	r2, #8
 800273c:	4619      	mov	r1, r3
 800273e:	480f      	ldr	r0, [pc, #60]	; (800277c <MX_TIM5_Init+0x14c>)
 8002740:	f002 fdcc 	bl	80052dc <HAL_TIM_IC_ConfigChannel>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <MX_TIM5_Init+0x11e>
  {
    Error_Handler();
 800274a:	f7ff fca1 	bl	8002090 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800274e:	2302      	movs	r3, #2
 8002750:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002752:	2302      	movs	r3, #2
 8002754:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8002756:	1d3b      	adds	r3, r7, #4
 8002758:	220c      	movs	r2, #12
 800275a:	4619      	mov	r1, r3
 800275c:	4807      	ldr	r0, [pc, #28]	; (800277c <MX_TIM5_Init+0x14c>)
 800275e:	f002 fdbd 	bl	80052dc <HAL_TIM_IC_ConfigChannel>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d001      	beq.n	800276c <MX_TIM5_Init+0x13c>
  {
    Error_Handler();
 8002768:	f7ff fc92 	bl	8002090 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim5);
 800276c:	4803      	ldr	r0, [pc, #12]	; (800277c <MX_TIM5_Init+0x14c>)
 800276e:	f000 f92f 	bl	80029d0 <HAL_TIM_MspPostInit>

}
 8002772:	bf00      	nop
 8002774:	3748      	adds	r7, #72	; 0x48
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	20000134 	.word	0x20000134
 8002780:	40000c00 	.word	0x40000c00

08002784 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800278a:	463b      	mov	r3, r7
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	605a      	str	r2, [r3, #4]

  htim7.Instance = TIM7;
 8002792:	4b15      	ldr	r3, [pc, #84]	; (80027e8 <MX_TIM7_Init+0x64>)
 8002794:	4a15      	ldr	r2, [pc, #84]	; (80027ec <MX_TIM7_Init+0x68>)
 8002796:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 900-1;
 8002798:	4b13      	ldr	r3, [pc, #76]	; (80027e8 <MX_TIM7_Init+0x64>)
 800279a:	f240 3283 	movw	r2, #899	; 0x383
 800279e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027a0:	4b11      	ldr	r3, [pc, #68]	; (80027e8 <MX_TIM7_Init+0x64>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 80027a6:	4b10      	ldr	r3, [pc, #64]	; (80027e8 <MX_TIM7_Init+0x64>)
 80027a8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80027ac:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027ae:	4b0e      	ldr	r3, [pc, #56]	; (80027e8 <MX_TIM7_Init+0x64>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80027b4:	480c      	ldr	r0, [pc, #48]	; (80027e8 <MX_TIM7_Init+0x64>)
 80027b6:	f002 fb05 	bl	8004dc4 <HAL_TIM_Base_Init>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80027c0:	f7ff fc66 	bl	8002090 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027c4:	2300      	movs	r3, #0
 80027c6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027c8:	2300      	movs	r3, #0
 80027ca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80027cc:	463b      	mov	r3, r7
 80027ce:	4619      	mov	r1, r3
 80027d0:	4805      	ldr	r0, [pc, #20]	; (80027e8 <MX_TIM7_Init+0x64>)
 80027d2:	f003 fbf5 	bl	8005fc0 <HAL_TIMEx_MasterConfigSynchronization>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d001      	beq.n	80027e0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80027dc:	f7ff fc58 	bl	8002090 <Error_Handler>
  }

}
 80027e0:	bf00      	nop
 80027e2:	3708      	adds	r7, #8
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	200001f4 	.word	0x200001f4
 80027ec:	40001400 	.word	0x40001400

080027f0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b090      	sub	sp, #64	; 0x40
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027fc:	2200      	movs	r2, #0
 80027fe:	601a      	str	r2, [r3, #0]
 8002800:	605a      	str	r2, [r3, #4]
 8002802:	609a      	str	r2, [r3, #8]
 8002804:	60da      	str	r2, [r3, #12]
 8002806:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002810:	d12d      	bne.n	800286e <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002812:	2300      	movs	r3, #0
 8002814:	62bb      	str	r3, [r7, #40]	; 0x28
 8002816:	4b66      	ldr	r3, [pc, #408]	; (80029b0 <HAL_TIM_Base_MspInit+0x1c0>)
 8002818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281a:	4a65      	ldr	r2, [pc, #404]	; (80029b0 <HAL_TIM_Base_MspInit+0x1c0>)
 800281c:	f043 0301 	orr.w	r3, r3, #1
 8002820:	6413      	str	r3, [r2, #64]	; 0x40
 8002822:	4b63      	ldr	r3, [pc, #396]	; (80029b0 <HAL_TIM_Base_MspInit+0x1c0>)
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	62bb      	str	r3, [r7, #40]	; 0x28
 800282c:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800282e:	2300      	movs	r3, #0
 8002830:	627b      	str	r3, [r7, #36]	; 0x24
 8002832:	4b5f      	ldr	r3, [pc, #380]	; (80029b0 <HAL_TIM_Base_MspInit+0x1c0>)
 8002834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002836:	4a5e      	ldr	r2, [pc, #376]	; (80029b0 <HAL_TIM_Base_MspInit+0x1c0>)
 8002838:	f043 0301 	orr.w	r3, r3, #1
 800283c:	6313      	str	r3, [r2, #48]	; 0x30
 800283e:	4b5c      	ldr	r3, [pc, #368]	; (80029b0 <HAL_TIM_Base_MspInit+0x1c0>)
 8002840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002842:	f003 0301 	and.w	r3, r3, #1
 8002846:	627b      	str	r3, [r7, #36]	; 0x24
 8002848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800284a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800284e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002850:	2302      	movs	r3, #2
 8002852:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002854:	2300      	movs	r3, #0
 8002856:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002858:	2300      	movs	r3, #0
 800285a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800285c:	2301      	movs	r3, #1
 800285e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002860:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002864:	4619      	mov	r1, r3
 8002866:	4853      	ldr	r0, [pc, #332]	; (80029b4 <HAL_TIM_Base_MspInit+0x1c4>)
 8002868:	f000 fbf0 	bl	800304c <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800286c:	e09b      	b.n	80029a6 <HAL_TIM_Base_MspInit+0x1b6>
  else if(tim_baseHandle->Instance==TIM3)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a51      	ldr	r2, [pc, #324]	; (80029b8 <HAL_TIM_Base_MspInit+0x1c8>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d12c      	bne.n	80028d2 <HAL_TIM_Base_MspInit+0xe2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002878:	2300      	movs	r3, #0
 800287a:	623b      	str	r3, [r7, #32]
 800287c:	4b4c      	ldr	r3, [pc, #304]	; (80029b0 <HAL_TIM_Base_MspInit+0x1c0>)
 800287e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002880:	4a4b      	ldr	r2, [pc, #300]	; (80029b0 <HAL_TIM_Base_MspInit+0x1c0>)
 8002882:	f043 0302 	orr.w	r3, r3, #2
 8002886:	6413      	str	r3, [r2, #64]	; 0x40
 8002888:	4b49      	ldr	r3, [pc, #292]	; (80029b0 <HAL_TIM_Base_MspInit+0x1c0>)
 800288a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288c:	f003 0302 	and.w	r3, r3, #2
 8002890:	623b      	str	r3, [r7, #32]
 8002892:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002894:	2300      	movs	r3, #0
 8002896:	61fb      	str	r3, [r7, #28]
 8002898:	4b45      	ldr	r3, [pc, #276]	; (80029b0 <HAL_TIM_Base_MspInit+0x1c0>)
 800289a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289c:	4a44      	ldr	r2, [pc, #272]	; (80029b0 <HAL_TIM_Base_MspInit+0x1c0>)
 800289e:	f043 0308 	orr.w	r3, r3, #8
 80028a2:	6313      	str	r3, [r2, #48]	; 0x30
 80028a4:	4b42      	ldr	r3, [pc, #264]	; (80029b0 <HAL_TIM_Base_MspInit+0x1c0>)
 80028a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a8:	f003 0308 	and.w	r3, r3, #8
 80028ac:	61fb      	str	r3, [r7, #28]
 80028ae:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80028b0:	2304      	movs	r3, #4
 80028b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b4:	2302      	movs	r3, #2
 80028b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b8:	2300      	movs	r3, #0
 80028ba:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028bc:	2300      	movs	r3, #0
 80028be:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80028c0:	2302      	movs	r3, #2
 80028c2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028c8:	4619      	mov	r1, r3
 80028ca:	483c      	ldr	r0, [pc, #240]	; (80029bc <HAL_TIM_Base_MspInit+0x1cc>)
 80028cc:	f000 fbbe 	bl	800304c <HAL_GPIO_Init>
}
 80028d0:	e069      	b.n	80029a6 <HAL_TIM_Base_MspInit+0x1b6>
  else if(tim_baseHandle->Instance==TIM4)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a3a      	ldr	r2, [pc, #232]	; (80029c0 <HAL_TIM_Base_MspInit+0x1d0>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d10e      	bne.n	80028fa <HAL_TIM_Base_MspInit+0x10a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80028dc:	2300      	movs	r3, #0
 80028de:	61bb      	str	r3, [r7, #24]
 80028e0:	4b33      	ldr	r3, [pc, #204]	; (80029b0 <HAL_TIM_Base_MspInit+0x1c0>)
 80028e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e4:	4a32      	ldr	r2, [pc, #200]	; (80029b0 <HAL_TIM_Base_MspInit+0x1c0>)
 80028e6:	f043 0304 	orr.w	r3, r3, #4
 80028ea:	6413      	str	r3, [r2, #64]	; 0x40
 80028ec:	4b30      	ldr	r3, [pc, #192]	; (80029b0 <HAL_TIM_Base_MspInit+0x1c0>)
 80028ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f0:	f003 0304 	and.w	r3, r3, #4
 80028f4:	61bb      	str	r3, [r7, #24]
 80028f6:	69bb      	ldr	r3, [r7, #24]
}
 80028f8:	e055      	b.n	80029a6 <HAL_TIM_Base_MspInit+0x1b6>
  else if(tim_baseHandle->Instance==TIM5)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a31      	ldr	r2, [pc, #196]	; (80029c4 <HAL_TIM_Base_MspInit+0x1d4>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d135      	bne.n	8002970 <HAL_TIM_Base_MspInit+0x180>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002904:	2300      	movs	r3, #0
 8002906:	617b      	str	r3, [r7, #20]
 8002908:	4b29      	ldr	r3, [pc, #164]	; (80029b0 <HAL_TIM_Base_MspInit+0x1c0>)
 800290a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290c:	4a28      	ldr	r2, [pc, #160]	; (80029b0 <HAL_TIM_Base_MspInit+0x1c0>)
 800290e:	f043 0308 	orr.w	r3, r3, #8
 8002912:	6413      	str	r3, [r2, #64]	; 0x40
 8002914:	4b26      	ldr	r3, [pc, #152]	; (80029b0 <HAL_TIM_Base_MspInit+0x1c0>)
 8002916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002918:	f003 0308 	and.w	r3, r3, #8
 800291c:	617b      	str	r3, [r7, #20]
 800291e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002920:	2300      	movs	r3, #0
 8002922:	613b      	str	r3, [r7, #16]
 8002924:	4b22      	ldr	r3, [pc, #136]	; (80029b0 <HAL_TIM_Base_MspInit+0x1c0>)
 8002926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002928:	4a21      	ldr	r2, [pc, #132]	; (80029b0 <HAL_TIM_Base_MspInit+0x1c0>)
 800292a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800292e:	6313      	str	r3, [r2, #48]	; 0x30
 8002930:	4b1f      	ldr	r3, [pc, #124]	; (80029b0 <HAL_TIM_Base_MspInit+0x1c0>)
 8002932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002934:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002938:	613b      	str	r3, [r7, #16]
 800293a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = IC_Eco_Pin;
 800293c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002940:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002942:	2302      	movs	r3, #2
 8002944:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002946:	2300      	movs	r3, #0
 8002948:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800294a:	2300      	movs	r3, #0
 800294c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800294e:	2302      	movs	r3, #2
 8002950:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(IC_Eco_GPIO_Port, &GPIO_InitStruct);
 8002952:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002956:	4619      	mov	r1, r3
 8002958:	481b      	ldr	r0, [pc, #108]	; (80029c8 <HAL_TIM_Base_MspInit+0x1d8>)
 800295a:	f000 fb77 	bl	800304c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800295e:	2200      	movs	r2, #0
 8002960:	2100      	movs	r1, #0
 8002962:	2032      	movs	r0, #50	; 0x32
 8002964:	f000 faab 	bl	8002ebe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002968:	2032      	movs	r0, #50	; 0x32
 800296a:	f000 fac4 	bl	8002ef6 <HAL_NVIC_EnableIRQ>
}
 800296e:	e01a      	b.n	80029a6 <HAL_TIM_Base_MspInit+0x1b6>
  else if(tim_baseHandle->Instance==TIM7)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a15      	ldr	r2, [pc, #84]	; (80029cc <HAL_TIM_Base_MspInit+0x1dc>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d115      	bne.n	80029a6 <HAL_TIM_Base_MspInit+0x1b6>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800297a:	2300      	movs	r3, #0
 800297c:	60fb      	str	r3, [r7, #12]
 800297e:	4b0c      	ldr	r3, [pc, #48]	; (80029b0 <HAL_TIM_Base_MspInit+0x1c0>)
 8002980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002982:	4a0b      	ldr	r2, [pc, #44]	; (80029b0 <HAL_TIM_Base_MspInit+0x1c0>)
 8002984:	f043 0320 	orr.w	r3, r3, #32
 8002988:	6413      	str	r3, [r2, #64]	; 0x40
 800298a:	4b09      	ldr	r3, [pc, #36]	; (80029b0 <HAL_TIM_Base_MspInit+0x1c0>)
 800298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298e:	f003 0320 	and.w	r3, r3, #32
 8002992:	60fb      	str	r3, [r7, #12]
 8002994:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002996:	2200      	movs	r2, #0
 8002998:	2100      	movs	r1, #0
 800299a:	2037      	movs	r0, #55	; 0x37
 800299c:	f000 fa8f 	bl	8002ebe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80029a0:	2037      	movs	r0, #55	; 0x37
 80029a2:	f000 faa8 	bl	8002ef6 <HAL_NVIC_EnableIRQ>
}
 80029a6:	bf00      	nop
 80029a8:	3740      	adds	r7, #64	; 0x40
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	40023800 	.word	0x40023800
 80029b4:	40020000 	.word	0x40020000
 80029b8:	40000400 	.word	0x40000400
 80029bc:	40020c00 	.word	0x40020c00
 80029c0:	40000800 	.word	0x40000800
 80029c4:	40000c00 	.word	0x40000c00
 80029c8:	40021c00 	.word	0x40021c00
 80029cc:	40001400 	.word	0x40001400

080029d0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b08a      	sub	sp, #40	; 0x28
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029d8:	f107 0314 	add.w	r3, r7, #20
 80029dc:	2200      	movs	r2, #0
 80029de:	601a      	str	r2, [r3, #0]
 80029e0:	605a      	str	r2, [r3, #4]
 80029e2:	609a      	str	r2, [r3, #8]
 80029e4:	60da      	str	r2, [r3, #12]
 80029e6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a25      	ldr	r2, [pc, #148]	; (8002a84 <HAL_TIM_MspPostInit+0xb4>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d11f      	bne.n	8002a32 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80029f2:	2300      	movs	r3, #0
 80029f4:	613b      	str	r3, [r7, #16]
 80029f6:	4b24      	ldr	r3, [pc, #144]	; (8002a88 <HAL_TIM_MspPostInit+0xb8>)
 80029f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fa:	4a23      	ldr	r2, [pc, #140]	; (8002a88 <HAL_TIM_MspPostInit+0xb8>)
 80029fc:	f043 0308 	orr.w	r3, r3, #8
 8002a00:	6313      	str	r3, [r2, #48]	; 0x30
 8002a02:	4b21      	ldr	r3, [pc, #132]	; (8002a88 <HAL_TIM_MspPostInit+0xb8>)
 8002a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a06:	f003 0308 	and.w	r3, r3, #8
 8002a0a:	613b      	str	r3, [r7, #16]
 8002a0c:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = PWM_R_Pin|PWM_L_Pin;
 8002a0e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002a12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a14:	2302      	movs	r3, #2
 8002a16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002a20:	2302      	movs	r3, #2
 8002a22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a24:	f107 0314 	add.w	r3, r7, #20
 8002a28:	4619      	mov	r1, r3
 8002a2a:	4818      	ldr	r0, [pc, #96]	; (8002a8c <HAL_TIM_MspPostInit+0xbc>)
 8002a2c:	f000 fb0e 	bl	800304c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002a30:	e023      	b.n	8002a7a <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM5)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a16      	ldr	r2, [pc, #88]	; (8002a90 <HAL_TIM_MspPostInit+0xc0>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d11e      	bne.n	8002a7a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	60fb      	str	r3, [r7, #12]
 8002a40:	4b11      	ldr	r3, [pc, #68]	; (8002a88 <HAL_TIM_MspPostInit+0xb8>)
 8002a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a44:	4a10      	ldr	r2, [pc, #64]	; (8002a88 <HAL_TIM_MspPostInit+0xb8>)
 8002a46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a4a:	6313      	str	r3, [r2, #48]	; 0x30
 8002a4c:	4b0e      	ldr	r3, [pc, #56]	; (8002a88 <HAL_TIM_MspPostInit+0xb8>)
 8002a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a54:	60fb      	str	r3, [r7, #12]
 8002a56:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_Trig_Pin;
 8002a58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a5e:	2302      	movs	r3, #2
 8002a60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a62:	2300      	movs	r3, #0
 8002a64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a66:	2300      	movs	r3, #0
 8002a68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_Trig_GPIO_Port, &GPIO_InitStruct);
 8002a6e:	f107 0314 	add.w	r3, r7, #20
 8002a72:	4619      	mov	r1, r3
 8002a74:	4807      	ldr	r0, [pc, #28]	; (8002a94 <HAL_TIM_MspPostInit+0xc4>)
 8002a76:	f000 fae9 	bl	800304c <HAL_GPIO_Init>
}
 8002a7a:	bf00      	nop
 8002a7c:	3728      	adds	r7, #40	; 0x28
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	40000800 	.word	0x40000800
 8002a88:	40023800 	.word	0x40023800
 8002a8c:	40020c00 	.word	0x40020c00
 8002a90:	40000c00 	.word	0x40000c00
 8002a94:	40021c00 	.word	0x40021c00

08002a98 <MX_UART7_Init>:

UART_HandleTypeDef huart7;

/* UART7 init function */
void MX_UART7_Init(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	af00      	add	r7, sp, #0

  huart7.Instance = UART7;
 8002a9c:	4b11      	ldr	r3, [pc, #68]	; (8002ae4 <MX_UART7_Init+0x4c>)
 8002a9e:	4a12      	ldr	r2, [pc, #72]	; (8002ae8 <MX_UART7_Init+0x50>)
 8002aa0:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8002aa2:	4b10      	ldr	r3, [pc, #64]	; (8002ae4 <MX_UART7_Init+0x4c>)
 8002aa4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002aa8:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8002aaa:	4b0e      	ldr	r3, [pc, #56]	; (8002ae4 <MX_UART7_Init+0x4c>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8002ab0:	4b0c      	ldr	r3, [pc, #48]	; (8002ae4 <MX_UART7_Init+0x4c>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8002ab6:	4b0b      	ldr	r3, [pc, #44]	; (8002ae4 <MX_UART7_Init+0x4c>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8002abc:	4b09      	ldr	r3, [pc, #36]	; (8002ae4 <MX_UART7_Init+0x4c>)
 8002abe:	220c      	movs	r2, #12
 8002ac0:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ac2:	4b08      	ldr	r3, [pc, #32]	; (8002ae4 <MX_UART7_Init+0x4c>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ac8:	4b06      	ldr	r3, [pc, #24]	; (8002ae4 <MX_UART7_Init+0x4c>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8002ace:	4805      	ldr	r0, [pc, #20]	; (8002ae4 <MX_UART7_Init+0x4c>)
 8002ad0:	f003 fb06 	bl	80060e0 <HAL_UART_Init>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <MX_UART7_Init+0x46>
  {
    Error_Handler();
 8002ada:	f7ff fad9 	bl	8002090 <Error_Handler>
  }

}
 8002ade:	bf00      	nop
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	20000234 	.word	0x20000234
 8002ae8:	40007800 	.word	0x40007800

08002aec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b08a      	sub	sp, #40	; 0x28
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002af4:	f107 0314 	add.w	r3, r7, #20
 8002af8:	2200      	movs	r2, #0
 8002afa:	601a      	str	r2, [r3, #0]
 8002afc:	605a      	str	r2, [r3, #4]
 8002afe:	609a      	str	r2, [r3, #8]
 8002b00:	60da      	str	r2, [r3, #12]
 8002b02:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART7)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a1d      	ldr	r2, [pc, #116]	; (8002b80 <HAL_UART_MspInit+0x94>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d133      	bne.n	8002b76 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8002b0e:	2300      	movs	r3, #0
 8002b10:	613b      	str	r3, [r7, #16]
 8002b12:	4b1c      	ldr	r3, [pc, #112]	; (8002b84 <HAL_UART_MspInit+0x98>)
 8002b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b16:	4a1b      	ldr	r2, [pc, #108]	; (8002b84 <HAL_UART_MspInit+0x98>)
 8002b18:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002b1c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b1e:	4b19      	ldr	r3, [pc, #100]	; (8002b84 <HAL_UART_MspInit+0x98>)
 8002b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b22:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002b26:	613b      	str	r3, [r7, #16]
 8002b28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	60fb      	str	r3, [r7, #12]
 8002b2e:	4b15      	ldr	r3, [pc, #84]	; (8002b84 <HAL_UART_MspInit+0x98>)
 8002b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b32:	4a14      	ldr	r2, [pc, #80]	; (8002b84 <HAL_UART_MspInit+0x98>)
 8002b34:	f043 0320 	orr.w	r3, r3, #32
 8002b38:	6313      	str	r3, [r2, #48]	; 0x30
 8002b3a:	4b12      	ldr	r3, [pc, #72]	; (8002b84 <HAL_UART_MspInit+0x98>)
 8002b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3e:	f003 0320 	and.w	r3, r3, #32
 8002b42:	60fb      	str	r3, [r7, #12]
 8002b44:	68fb      	ldr	r3, [r7, #12]
    /**UART7 GPIO Configuration
    PF6     ------> UART7_RX
    PF7     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b46:	23c0      	movs	r3, #192	; 0xc0
 8002b48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b52:	2303      	movs	r3, #3
 8002b54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8002b56:	2308      	movs	r3, #8
 8002b58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002b5a:	f107 0314 	add.w	r3, r7, #20
 8002b5e:	4619      	mov	r1, r3
 8002b60:	4809      	ldr	r0, [pc, #36]	; (8002b88 <HAL_UART_MspInit+0x9c>)
 8002b62:	f000 fa73 	bl	800304c <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8002b66:	2200      	movs	r2, #0
 8002b68:	2100      	movs	r1, #0
 8002b6a:	2052      	movs	r0, #82	; 0x52
 8002b6c:	f000 f9a7 	bl	8002ebe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8002b70:	2052      	movs	r0, #82	; 0x52
 8002b72:	f000 f9c0 	bl	8002ef6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }
}
 8002b76:	bf00      	nop
 8002b78:	3728      	adds	r7, #40	; 0x28
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	40007800 	.word	0x40007800
 8002b84:	40023800 	.word	0x40023800
 8002b88:	40021400 	.word	0x40021400

08002b8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002b8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002bc4 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002b90:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002b92:	e003      	b.n	8002b9c <LoopCopyDataInit>

08002b94 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002b94:	4b0c      	ldr	r3, [pc, #48]	; (8002bc8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002b96:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002b98:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002b9a:	3104      	adds	r1, #4

08002b9c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002b9c:	480b      	ldr	r0, [pc, #44]	; (8002bcc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002b9e:	4b0c      	ldr	r3, [pc, #48]	; (8002bd0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002ba0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002ba2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002ba4:	d3f6      	bcc.n	8002b94 <CopyDataInit>
  ldr  r2, =_sbss
 8002ba6:	4a0b      	ldr	r2, [pc, #44]	; (8002bd4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002ba8:	e002      	b.n	8002bb0 <LoopFillZerobss>

08002baa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002baa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002bac:	f842 3b04 	str.w	r3, [r2], #4

08002bb0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002bb0:	4b09      	ldr	r3, [pc, #36]	; (8002bd8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002bb2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002bb4:	d3f9      	bcc.n	8002baa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002bb6:	f7ff fbff 	bl	80023b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002bba:	f004 fa1b 	bl	8006ff4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bbe:	f7fe fa53 	bl	8001068 <main>
  bx  lr    
 8002bc2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002bc4:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002bc8:	080073c4 	.word	0x080073c4
  ldr  r0, =_sdata
 8002bcc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002bd0:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8002bd4:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8002bd8:	20000278 	.word	0x20000278

08002bdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002bdc:	e7fe      	b.n	8002bdc <ADC_IRQHandler>
	...

08002be0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002be4:	4b0e      	ldr	r3, [pc, #56]	; (8002c20 <HAL_Init+0x40>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a0d      	ldr	r2, [pc, #52]	; (8002c20 <HAL_Init+0x40>)
 8002bea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002bf0:	4b0b      	ldr	r3, [pc, #44]	; (8002c20 <HAL_Init+0x40>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a0a      	ldr	r2, [pc, #40]	; (8002c20 <HAL_Init+0x40>)
 8002bf6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bfa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bfc:	4b08      	ldr	r3, [pc, #32]	; (8002c20 <HAL_Init+0x40>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a07      	ldr	r2, [pc, #28]	; (8002c20 <HAL_Init+0x40>)
 8002c02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c08:	2003      	movs	r0, #3
 8002c0a:	f000 f94d 	bl	8002ea8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c0e:	2000      	movs	r0, #0
 8002c10:	f000 f808 	bl	8002c24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c14:	f7ff fb5c 	bl	80022d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	40023c00 	.word	0x40023c00

08002c24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c2c:	4b12      	ldr	r3, [pc, #72]	; (8002c78 <HAL_InitTick+0x54>)
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	4b12      	ldr	r3, [pc, #72]	; (8002c7c <HAL_InitTick+0x58>)
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	4619      	mov	r1, r3
 8002c36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c42:	4618      	mov	r0, r3
 8002c44:	f000 f965 	bl	8002f12 <HAL_SYSTICK_Config>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e00e      	b.n	8002c70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2b0f      	cmp	r3, #15
 8002c56:	d80a      	bhi.n	8002c6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c58:	2200      	movs	r2, #0
 8002c5a:	6879      	ldr	r1, [r7, #4]
 8002c5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c60:	f000 f92d 	bl	8002ebe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c64:	4a06      	ldr	r2, [pc, #24]	; (8002c80 <HAL_InitTick+0x5c>)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	e000      	b.n	8002c70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3708      	adds	r7, #8
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	20000004 	.word	0x20000004
 8002c7c:	2000000c 	.word	0x2000000c
 8002c80:	20000008 	.word	0x20000008

08002c84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c88:	4b06      	ldr	r3, [pc, #24]	; (8002ca4 <HAL_IncTick+0x20>)
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	4b06      	ldr	r3, [pc, #24]	; (8002ca8 <HAL_IncTick+0x24>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4413      	add	r3, r2
 8002c94:	4a04      	ldr	r2, [pc, #16]	; (8002ca8 <HAL_IncTick+0x24>)
 8002c96:	6013      	str	r3, [r2, #0]
}
 8002c98:	bf00      	nop
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	2000000c 	.word	0x2000000c
 8002ca8:	20000274 	.word	0x20000274

08002cac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
  return uwTick;
 8002cb0:	4b03      	ldr	r3, [pc, #12]	; (8002cc0 <HAL_GetTick+0x14>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	20000274 	.word	0x20000274

08002cc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ccc:	f7ff ffee 	bl	8002cac <HAL_GetTick>
 8002cd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cdc:	d005      	beq.n	8002cea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cde:	4b09      	ldr	r3, [pc, #36]	; (8002d04 <HAL_Delay+0x40>)
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002cea:	bf00      	nop
 8002cec:	f7ff ffde 	bl	8002cac <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	68fa      	ldr	r2, [r7, #12]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d8f7      	bhi.n	8002cec <HAL_Delay+0x28>
  {
  }
}
 8002cfc:	bf00      	nop
 8002cfe:	3710      	adds	r7, #16
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	2000000c 	.word	0x2000000c

08002d08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b085      	sub	sp, #20
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f003 0307 	and.w	r3, r3, #7
 8002d16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d18:	4b0c      	ldr	r3, [pc, #48]	; (8002d4c <__NVIC_SetPriorityGrouping+0x44>)
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d1e:	68ba      	ldr	r2, [r7, #8]
 8002d20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d24:	4013      	ands	r3, r2
 8002d26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d3a:	4a04      	ldr	r2, [pc, #16]	; (8002d4c <__NVIC_SetPriorityGrouping+0x44>)
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	60d3      	str	r3, [r2, #12]
}
 8002d40:	bf00      	nop
 8002d42:	3714      	adds	r7, #20
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr
 8002d4c:	e000ed00 	.word	0xe000ed00

08002d50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d54:	4b04      	ldr	r3, [pc, #16]	; (8002d68 <__NVIC_GetPriorityGrouping+0x18>)
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	0a1b      	lsrs	r3, r3, #8
 8002d5a:	f003 0307 	and.w	r3, r3, #7
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr
 8002d68:	e000ed00 	.word	0xe000ed00

08002d6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	4603      	mov	r3, r0
 8002d74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	db0b      	blt.n	8002d96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d7e:	79fb      	ldrb	r3, [r7, #7]
 8002d80:	f003 021f 	and.w	r2, r3, #31
 8002d84:	4907      	ldr	r1, [pc, #28]	; (8002da4 <__NVIC_EnableIRQ+0x38>)
 8002d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d8a:	095b      	lsrs	r3, r3, #5
 8002d8c:	2001      	movs	r0, #1
 8002d8e:	fa00 f202 	lsl.w	r2, r0, r2
 8002d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d96:	bf00      	nop
 8002d98:	370c      	adds	r7, #12
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop
 8002da4:	e000e100 	.word	0xe000e100

08002da8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	4603      	mov	r3, r0
 8002db0:	6039      	str	r1, [r7, #0]
 8002db2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	db0a      	blt.n	8002dd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	b2da      	uxtb	r2, r3
 8002dc0:	490c      	ldr	r1, [pc, #48]	; (8002df4 <__NVIC_SetPriority+0x4c>)
 8002dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc6:	0112      	lsls	r2, r2, #4
 8002dc8:	b2d2      	uxtb	r2, r2
 8002dca:	440b      	add	r3, r1
 8002dcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dd0:	e00a      	b.n	8002de8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	b2da      	uxtb	r2, r3
 8002dd6:	4908      	ldr	r1, [pc, #32]	; (8002df8 <__NVIC_SetPriority+0x50>)
 8002dd8:	79fb      	ldrb	r3, [r7, #7]
 8002dda:	f003 030f 	and.w	r3, r3, #15
 8002dde:	3b04      	subs	r3, #4
 8002de0:	0112      	lsls	r2, r2, #4
 8002de2:	b2d2      	uxtb	r2, r2
 8002de4:	440b      	add	r3, r1
 8002de6:	761a      	strb	r2, [r3, #24]
}
 8002de8:	bf00      	nop
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr
 8002df4:	e000e100 	.word	0xe000e100
 8002df8:	e000ed00 	.word	0xe000ed00

08002dfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b089      	sub	sp, #36	; 0x24
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f003 0307 	and.w	r3, r3, #7
 8002e0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	f1c3 0307 	rsb	r3, r3, #7
 8002e16:	2b04      	cmp	r3, #4
 8002e18:	bf28      	it	cs
 8002e1a:	2304      	movcs	r3, #4
 8002e1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	3304      	adds	r3, #4
 8002e22:	2b06      	cmp	r3, #6
 8002e24:	d902      	bls.n	8002e2c <NVIC_EncodePriority+0x30>
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	3b03      	subs	r3, #3
 8002e2a:	e000      	b.n	8002e2e <NVIC_EncodePriority+0x32>
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3a:	43da      	mvns	r2, r3
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	401a      	ands	r2, r3
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e44:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e4e:	43d9      	mvns	r1, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e54:	4313      	orrs	r3, r2
         );
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3724      	adds	r7, #36	; 0x24
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
	...

08002e64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e74:	d301      	bcc.n	8002e7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e76:	2301      	movs	r3, #1
 8002e78:	e00f      	b.n	8002e9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e7a:	4a0a      	ldr	r2, [pc, #40]	; (8002ea4 <SysTick_Config+0x40>)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e82:	210f      	movs	r1, #15
 8002e84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e88:	f7ff ff8e 	bl	8002da8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e8c:	4b05      	ldr	r3, [pc, #20]	; (8002ea4 <SysTick_Config+0x40>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e92:	4b04      	ldr	r3, [pc, #16]	; (8002ea4 <SysTick_Config+0x40>)
 8002e94:	2207      	movs	r2, #7
 8002e96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3708      	adds	r7, #8
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	e000e010 	.word	0xe000e010

08002ea8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f7ff ff29 	bl	8002d08 <__NVIC_SetPriorityGrouping>
}
 8002eb6:	bf00      	nop
 8002eb8:	3708      	adds	r7, #8
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	b086      	sub	sp, #24
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	60b9      	str	r1, [r7, #8]
 8002ec8:	607a      	str	r2, [r7, #4]
 8002eca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ed0:	f7ff ff3e 	bl	8002d50 <__NVIC_GetPriorityGrouping>
 8002ed4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	68b9      	ldr	r1, [r7, #8]
 8002eda:	6978      	ldr	r0, [r7, #20]
 8002edc:	f7ff ff8e 	bl	8002dfc <NVIC_EncodePriority>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ee6:	4611      	mov	r1, r2
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7ff ff5d 	bl	8002da8 <__NVIC_SetPriority>
}
 8002eee:	bf00      	nop
 8002ef0:	3718      	adds	r7, #24
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b082      	sub	sp, #8
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	4603      	mov	r3, r0
 8002efe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7ff ff31 	bl	8002d6c <__NVIC_EnableIRQ>
}
 8002f0a:	bf00      	nop
 8002f0c:	3708      	adds	r7, #8
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f12:	b580      	push	{r7, lr}
 8002f14:	b082      	sub	sp, #8
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f7ff ffa2 	bl	8002e64 <SysTick_Config>
 8002f20:	4603      	mov	r3, r0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3708      	adds	r7, #8
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	b082      	sub	sp, #8
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d101      	bne.n	8002f3c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e014      	b.n	8002f66 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	791b      	ldrb	r3, [r3, #4]
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d105      	bne.n	8002f52 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f7fd ff21 	bl	8000d94 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2202      	movs	r2, #2
 8002f56:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2201      	movs	r2, #1
 8002f62:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3708      	adds	r7, #8
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002f6e:	b480      	push	{r7}
 8002f70:	b087      	sub	sp, #28
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	60f8      	str	r0, [r7, #12]
 8002f76:	60b9      	str	r1, [r7, #8]
 8002f78:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	617b      	str	r3, [r7, #20]
 8002f7e:	2300      	movs	r3, #0
 8002f80:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	795b      	ldrb	r3, [r3, #5]
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d101      	bne.n	8002f8e <HAL_DAC_ConfigChannel+0x20>
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	e036      	b.n	8002ffc <HAL_DAC_ConfigChannel+0x8e>
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2201      	movs	r2, #1
 8002f92:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2202      	movs	r2, #2
 8002f98:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8002fa2:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fac:	43db      	mvns	r3, r3
 8002fae:	697a      	ldr	r2, [r7, #20]
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002fc0:	693a      	ldr	r2, [r7, #16]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc8:	697a      	ldr	r2, [r7, #20]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	697a      	ldr	r2, [r7, #20]
 8002fd4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	6819      	ldr	r1, [r3, #0]
 8002fdc:	22c0      	movs	r2, #192	; 0xc0
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe4:	43da      	mvns	r2, r3
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	400a      	ands	r2, r1
 8002fec:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002ffa:	2300      	movs	r3, #0
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	371c      	adds	r7, #28
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003016:	b2db      	uxtb	r3, r3
 8003018:	2b02      	cmp	r3, #2
 800301a:	d004      	beq.n	8003026 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2280      	movs	r2, #128	; 0x80
 8003020:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e00c      	b.n	8003040 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2205      	movs	r2, #5
 800302a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f022 0201 	bic.w	r2, r2, #1
 800303c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800303e:	2300      	movs	r3, #0
}
 8003040:	4618      	mov	r0, r3
 8003042:	370c      	adds	r7, #12
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800304c:	b480      	push	{r7}
 800304e:	b089      	sub	sp, #36	; 0x24
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003056:	2300      	movs	r3, #0
 8003058:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800305a:	2300      	movs	r3, #0
 800305c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800305e:	2300      	movs	r3, #0
 8003060:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003062:	2300      	movs	r3, #0
 8003064:	61fb      	str	r3, [r7, #28]
 8003066:	e177      	b.n	8003358 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003068:	2201      	movs	r2, #1
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	fa02 f303 	lsl.w	r3, r2, r3
 8003070:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	4013      	ands	r3, r2
 800307a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800307c:	693a      	ldr	r2, [r7, #16]
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	429a      	cmp	r2, r3
 8003082:	f040 8166 	bne.w	8003352 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	2b01      	cmp	r3, #1
 800308c:	d00b      	beq.n	80030a6 <HAL_GPIO_Init+0x5a>
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	2b02      	cmp	r3, #2
 8003094:	d007      	beq.n	80030a6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800309a:	2b11      	cmp	r3, #17
 800309c:	d003      	beq.n	80030a6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	2b12      	cmp	r3, #18
 80030a4:	d130      	bne.n	8003108 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	005b      	lsls	r3, r3, #1
 80030b0:	2203      	movs	r2, #3
 80030b2:	fa02 f303 	lsl.w	r3, r2, r3
 80030b6:	43db      	mvns	r3, r3
 80030b8:	69ba      	ldr	r2, [r7, #24]
 80030ba:	4013      	ands	r3, r2
 80030bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	68da      	ldr	r2, [r3, #12]
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ca:	69ba      	ldr	r2, [r7, #24]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	69ba      	ldr	r2, [r7, #24]
 80030d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030dc:	2201      	movs	r2, #1
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	fa02 f303 	lsl.w	r3, r2, r3
 80030e4:	43db      	mvns	r3, r3
 80030e6:	69ba      	ldr	r2, [r7, #24]
 80030e8:	4013      	ands	r3, r2
 80030ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	091b      	lsrs	r3, r3, #4
 80030f2:	f003 0201 	and.w	r2, r3, #1
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	fa02 f303 	lsl.w	r3, r2, r3
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	4313      	orrs	r3, r2
 8003100:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	2203      	movs	r2, #3
 8003114:	fa02 f303 	lsl.w	r3, r2, r3
 8003118:	43db      	mvns	r3, r3
 800311a:	69ba      	ldr	r2, [r7, #24]
 800311c:	4013      	ands	r3, r2
 800311e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	689a      	ldr	r2, [r3, #8]
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	005b      	lsls	r3, r3, #1
 8003128:	fa02 f303 	lsl.w	r3, r2, r3
 800312c:	69ba      	ldr	r2, [r7, #24]
 800312e:	4313      	orrs	r3, r2
 8003130:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	69ba      	ldr	r2, [r7, #24]
 8003136:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	2b02      	cmp	r3, #2
 800313e:	d003      	beq.n	8003148 <HAL_GPIO_Init+0xfc>
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	2b12      	cmp	r3, #18
 8003146:	d123      	bne.n	8003190 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	08da      	lsrs	r2, r3, #3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	3208      	adds	r2, #8
 8003150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003154:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	f003 0307 	and.w	r3, r3, #7
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	220f      	movs	r2, #15
 8003160:	fa02 f303 	lsl.w	r3, r2, r3
 8003164:	43db      	mvns	r3, r3
 8003166:	69ba      	ldr	r2, [r7, #24]
 8003168:	4013      	ands	r3, r2
 800316a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	691a      	ldr	r2, [r3, #16]
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	f003 0307 	and.w	r3, r3, #7
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	fa02 f303 	lsl.w	r3, r2, r3
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	4313      	orrs	r3, r2
 8003180:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	08da      	lsrs	r2, r3, #3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	3208      	adds	r2, #8
 800318a:	69b9      	ldr	r1, [r7, #24]
 800318c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	005b      	lsls	r3, r3, #1
 800319a:	2203      	movs	r2, #3
 800319c:	fa02 f303 	lsl.w	r3, r2, r3
 80031a0:	43db      	mvns	r3, r3
 80031a2:	69ba      	ldr	r2, [r7, #24]
 80031a4:	4013      	ands	r3, r2
 80031a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f003 0203 	and.w	r2, r3, #3
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	005b      	lsls	r3, r3, #1
 80031b4:	fa02 f303 	lsl.w	r3, r2, r3
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	f000 80c0 	beq.w	8003352 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031d2:	2300      	movs	r3, #0
 80031d4:	60fb      	str	r3, [r7, #12]
 80031d6:	4b65      	ldr	r3, [pc, #404]	; (800336c <HAL_GPIO_Init+0x320>)
 80031d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031da:	4a64      	ldr	r2, [pc, #400]	; (800336c <HAL_GPIO_Init+0x320>)
 80031dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031e0:	6453      	str	r3, [r2, #68]	; 0x44
 80031e2:	4b62      	ldr	r3, [pc, #392]	; (800336c <HAL_GPIO_Init+0x320>)
 80031e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031ea:	60fb      	str	r3, [r7, #12]
 80031ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031ee:	4a60      	ldr	r2, [pc, #384]	; (8003370 <HAL_GPIO_Init+0x324>)
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	089b      	lsrs	r3, r3, #2
 80031f4:	3302      	adds	r3, #2
 80031f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	f003 0303 	and.w	r3, r3, #3
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	220f      	movs	r2, #15
 8003206:	fa02 f303 	lsl.w	r3, r2, r3
 800320a:	43db      	mvns	r3, r3
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	4013      	ands	r3, r2
 8003210:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a57      	ldr	r2, [pc, #348]	; (8003374 <HAL_GPIO_Init+0x328>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d037      	beq.n	800328a <HAL_GPIO_Init+0x23e>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a56      	ldr	r2, [pc, #344]	; (8003378 <HAL_GPIO_Init+0x32c>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d031      	beq.n	8003286 <HAL_GPIO_Init+0x23a>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a55      	ldr	r2, [pc, #340]	; (800337c <HAL_GPIO_Init+0x330>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d02b      	beq.n	8003282 <HAL_GPIO_Init+0x236>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a54      	ldr	r2, [pc, #336]	; (8003380 <HAL_GPIO_Init+0x334>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d025      	beq.n	800327e <HAL_GPIO_Init+0x232>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a53      	ldr	r2, [pc, #332]	; (8003384 <HAL_GPIO_Init+0x338>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d01f      	beq.n	800327a <HAL_GPIO_Init+0x22e>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a52      	ldr	r2, [pc, #328]	; (8003388 <HAL_GPIO_Init+0x33c>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d019      	beq.n	8003276 <HAL_GPIO_Init+0x22a>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a51      	ldr	r2, [pc, #324]	; (800338c <HAL_GPIO_Init+0x340>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d013      	beq.n	8003272 <HAL_GPIO_Init+0x226>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a50      	ldr	r2, [pc, #320]	; (8003390 <HAL_GPIO_Init+0x344>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d00d      	beq.n	800326e <HAL_GPIO_Init+0x222>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a4f      	ldr	r2, [pc, #316]	; (8003394 <HAL_GPIO_Init+0x348>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d007      	beq.n	800326a <HAL_GPIO_Init+0x21e>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a4e      	ldr	r2, [pc, #312]	; (8003398 <HAL_GPIO_Init+0x34c>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d101      	bne.n	8003266 <HAL_GPIO_Init+0x21a>
 8003262:	2309      	movs	r3, #9
 8003264:	e012      	b.n	800328c <HAL_GPIO_Init+0x240>
 8003266:	230a      	movs	r3, #10
 8003268:	e010      	b.n	800328c <HAL_GPIO_Init+0x240>
 800326a:	2308      	movs	r3, #8
 800326c:	e00e      	b.n	800328c <HAL_GPIO_Init+0x240>
 800326e:	2307      	movs	r3, #7
 8003270:	e00c      	b.n	800328c <HAL_GPIO_Init+0x240>
 8003272:	2306      	movs	r3, #6
 8003274:	e00a      	b.n	800328c <HAL_GPIO_Init+0x240>
 8003276:	2305      	movs	r3, #5
 8003278:	e008      	b.n	800328c <HAL_GPIO_Init+0x240>
 800327a:	2304      	movs	r3, #4
 800327c:	e006      	b.n	800328c <HAL_GPIO_Init+0x240>
 800327e:	2303      	movs	r3, #3
 8003280:	e004      	b.n	800328c <HAL_GPIO_Init+0x240>
 8003282:	2302      	movs	r3, #2
 8003284:	e002      	b.n	800328c <HAL_GPIO_Init+0x240>
 8003286:	2301      	movs	r3, #1
 8003288:	e000      	b.n	800328c <HAL_GPIO_Init+0x240>
 800328a:	2300      	movs	r3, #0
 800328c:	69fa      	ldr	r2, [r7, #28]
 800328e:	f002 0203 	and.w	r2, r2, #3
 8003292:	0092      	lsls	r2, r2, #2
 8003294:	4093      	lsls	r3, r2
 8003296:	69ba      	ldr	r2, [r7, #24]
 8003298:	4313      	orrs	r3, r2
 800329a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800329c:	4934      	ldr	r1, [pc, #208]	; (8003370 <HAL_GPIO_Init+0x324>)
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	089b      	lsrs	r3, r3, #2
 80032a2:	3302      	adds	r3, #2
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032aa:	4b3c      	ldr	r3, [pc, #240]	; (800339c <HAL_GPIO_Init+0x350>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	43db      	mvns	r3, r3
 80032b4:	69ba      	ldr	r2, [r7, #24]
 80032b6:	4013      	ands	r3, r2
 80032b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d003      	beq.n	80032ce <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80032c6:	69ba      	ldr	r2, [r7, #24]
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032ce:	4a33      	ldr	r2, [pc, #204]	; (800339c <HAL_GPIO_Init+0x350>)
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80032d4:	4b31      	ldr	r3, [pc, #196]	; (800339c <HAL_GPIO_Init+0x350>)
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	43db      	mvns	r3, r3
 80032de:	69ba      	ldr	r2, [r7, #24]
 80032e0:	4013      	ands	r3, r2
 80032e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d003      	beq.n	80032f8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80032f0:	69ba      	ldr	r2, [r7, #24]
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032f8:	4a28      	ldr	r2, [pc, #160]	; (800339c <HAL_GPIO_Init+0x350>)
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032fe:	4b27      	ldr	r3, [pc, #156]	; (800339c <HAL_GPIO_Init+0x350>)
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	43db      	mvns	r3, r3
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	4013      	ands	r3, r2
 800330c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d003      	beq.n	8003322 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800331a:	69ba      	ldr	r2, [r7, #24]
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	4313      	orrs	r3, r2
 8003320:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003322:	4a1e      	ldr	r2, [pc, #120]	; (800339c <HAL_GPIO_Init+0x350>)
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003328:	4b1c      	ldr	r3, [pc, #112]	; (800339c <HAL_GPIO_Init+0x350>)
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	43db      	mvns	r3, r3
 8003332:	69ba      	ldr	r2, [r7, #24]
 8003334:	4013      	ands	r3, r2
 8003336:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003340:	2b00      	cmp	r3, #0
 8003342:	d003      	beq.n	800334c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003344:	69ba      	ldr	r2, [r7, #24]
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	4313      	orrs	r3, r2
 800334a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800334c:	4a13      	ldr	r2, [pc, #76]	; (800339c <HAL_GPIO_Init+0x350>)
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	3301      	adds	r3, #1
 8003356:	61fb      	str	r3, [r7, #28]
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	2b0f      	cmp	r3, #15
 800335c:	f67f ae84 	bls.w	8003068 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003360:	bf00      	nop
 8003362:	3724      	adds	r7, #36	; 0x24
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr
 800336c:	40023800 	.word	0x40023800
 8003370:	40013800 	.word	0x40013800
 8003374:	40020000 	.word	0x40020000
 8003378:	40020400 	.word	0x40020400
 800337c:	40020800 	.word	0x40020800
 8003380:	40020c00 	.word	0x40020c00
 8003384:	40021000 	.word	0x40021000
 8003388:	40021400 	.word	0x40021400
 800338c:	40021800 	.word	0x40021800
 8003390:	40021c00 	.word	0x40021c00
 8003394:	40022000 	.word	0x40022000
 8003398:	40022400 	.word	0x40022400
 800339c:	40013c00 	.word	0x40013c00

080033a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b085      	sub	sp, #20
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	460b      	mov	r3, r1
 80033aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	691a      	ldr	r2, [r3, #16]
 80033b0:	887b      	ldrh	r3, [r7, #2]
 80033b2:	4013      	ands	r3, r2
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d002      	beq.n	80033be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80033b8:	2301      	movs	r3, #1
 80033ba:	73fb      	strb	r3, [r7, #15]
 80033bc:	e001      	b.n	80033c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80033be:	2300      	movs	r3, #0
 80033c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80033c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3714      	adds	r7, #20
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	460b      	mov	r3, r1
 80033da:	807b      	strh	r3, [r7, #2]
 80033dc:	4613      	mov	r3, r2
 80033de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033e0:	787b      	ldrb	r3, [r7, #1]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d003      	beq.n	80033ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033e6:	887a      	ldrh	r2, [r7, #2]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80033ec:	e003      	b.n	80033f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80033ee:	887b      	ldrh	r3, [r7, #2]
 80033f0:	041a      	lsls	r2, r3, #16
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	619a      	str	r2, [r3, #24]
}
 80033f6:	bf00      	nop
 80033f8:	370c      	adds	r7, #12
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
	...

08003404 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d101      	bne.n	8003416 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e11f      	b.n	8003656 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800341c:	b2db      	uxtb	r3, r3
 800341e:	2b00      	cmp	r3, #0
 8003420:	d106      	bne.n	8003430 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f7fd fdd4 	bl	8000fd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2224      	movs	r2, #36	; 0x24
 8003434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f022 0201 	bic.w	r2, r2, #1
 8003446:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003456:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003466:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003468:	f001 fc84 	bl	8004d74 <HAL_RCC_GetPCLK1Freq>
 800346c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	4a7b      	ldr	r2, [pc, #492]	; (8003660 <HAL_I2C_Init+0x25c>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d807      	bhi.n	8003488 <HAL_I2C_Init+0x84>
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	4a7a      	ldr	r2, [pc, #488]	; (8003664 <HAL_I2C_Init+0x260>)
 800347c:	4293      	cmp	r3, r2
 800347e:	bf94      	ite	ls
 8003480:	2301      	movls	r3, #1
 8003482:	2300      	movhi	r3, #0
 8003484:	b2db      	uxtb	r3, r3
 8003486:	e006      	b.n	8003496 <HAL_I2C_Init+0x92>
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	4a77      	ldr	r2, [pc, #476]	; (8003668 <HAL_I2C_Init+0x264>)
 800348c:	4293      	cmp	r3, r2
 800348e:	bf94      	ite	ls
 8003490:	2301      	movls	r3, #1
 8003492:	2300      	movhi	r3, #0
 8003494:	b2db      	uxtb	r3, r3
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e0db      	b.n	8003656 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	4a72      	ldr	r2, [pc, #456]	; (800366c <HAL_I2C_Init+0x268>)
 80034a2:	fba2 2303 	umull	r2, r3, r2, r3
 80034a6:	0c9b      	lsrs	r3, r3, #18
 80034a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68ba      	ldr	r2, [r7, #8]
 80034ba:	430a      	orrs	r2, r1
 80034bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	6a1b      	ldr	r3, [r3, #32]
 80034c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	4a64      	ldr	r2, [pc, #400]	; (8003660 <HAL_I2C_Init+0x25c>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d802      	bhi.n	80034d8 <HAL_I2C_Init+0xd4>
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	3301      	adds	r3, #1
 80034d6:	e009      	b.n	80034ec <HAL_I2C_Init+0xe8>
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80034de:	fb02 f303 	mul.w	r3, r2, r3
 80034e2:	4a63      	ldr	r2, [pc, #396]	; (8003670 <HAL_I2C_Init+0x26c>)
 80034e4:	fba2 2303 	umull	r2, r3, r2, r3
 80034e8:	099b      	lsrs	r3, r3, #6
 80034ea:	3301      	adds	r3, #1
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	6812      	ldr	r2, [r2, #0]
 80034f0:	430b      	orrs	r3, r1
 80034f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	69db      	ldr	r3, [r3, #28]
 80034fa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80034fe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	4956      	ldr	r1, [pc, #344]	; (8003660 <HAL_I2C_Init+0x25c>)
 8003508:	428b      	cmp	r3, r1
 800350a:	d80d      	bhi.n	8003528 <HAL_I2C_Init+0x124>
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	1e59      	subs	r1, r3, #1
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	005b      	lsls	r3, r3, #1
 8003516:	fbb1 f3f3 	udiv	r3, r1, r3
 800351a:	3301      	adds	r3, #1
 800351c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003520:	2b04      	cmp	r3, #4
 8003522:	bf38      	it	cc
 8003524:	2304      	movcc	r3, #4
 8003526:	e04f      	b.n	80035c8 <HAL_I2C_Init+0x1c4>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d111      	bne.n	8003554 <HAL_I2C_Init+0x150>
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	1e58      	subs	r0, r3, #1
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6859      	ldr	r1, [r3, #4]
 8003538:	460b      	mov	r3, r1
 800353a:	005b      	lsls	r3, r3, #1
 800353c:	440b      	add	r3, r1
 800353e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003542:	3301      	adds	r3, #1
 8003544:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003548:	2b00      	cmp	r3, #0
 800354a:	bf0c      	ite	eq
 800354c:	2301      	moveq	r3, #1
 800354e:	2300      	movne	r3, #0
 8003550:	b2db      	uxtb	r3, r3
 8003552:	e012      	b.n	800357a <HAL_I2C_Init+0x176>
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	1e58      	subs	r0, r3, #1
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6859      	ldr	r1, [r3, #4]
 800355c:	460b      	mov	r3, r1
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	440b      	add	r3, r1
 8003562:	0099      	lsls	r1, r3, #2
 8003564:	440b      	add	r3, r1
 8003566:	fbb0 f3f3 	udiv	r3, r0, r3
 800356a:	3301      	adds	r3, #1
 800356c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003570:	2b00      	cmp	r3, #0
 8003572:	bf0c      	ite	eq
 8003574:	2301      	moveq	r3, #1
 8003576:	2300      	movne	r3, #0
 8003578:	b2db      	uxtb	r3, r3
 800357a:	2b00      	cmp	r3, #0
 800357c:	d001      	beq.n	8003582 <HAL_I2C_Init+0x17e>
 800357e:	2301      	movs	r3, #1
 8003580:	e022      	b.n	80035c8 <HAL_I2C_Init+0x1c4>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d10e      	bne.n	80035a8 <HAL_I2C_Init+0x1a4>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	1e58      	subs	r0, r3, #1
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6859      	ldr	r1, [r3, #4]
 8003592:	460b      	mov	r3, r1
 8003594:	005b      	lsls	r3, r3, #1
 8003596:	440b      	add	r3, r1
 8003598:	fbb0 f3f3 	udiv	r3, r0, r3
 800359c:	3301      	adds	r3, #1
 800359e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035a6:	e00f      	b.n	80035c8 <HAL_I2C_Init+0x1c4>
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	1e58      	subs	r0, r3, #1
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6859      	ldr	r1, [r3, #4]
 80035b0:	460b      	mov	r3, r1
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	440b      	add	r3, r1
 80035b6:	0099      	lsls	r1, r3, #2
 80035b8:	440b      	add	r3, r1
 80035ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80035be:	3301      	adds	r3, #1
 80035c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035c8:	6879      	ldr	r1, [r7, #4]
 80035ca:	6809      	ldr	r1, [r1, #0]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	69da      	ldr	r2, [r3, #28]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a1b      	ldr	r3, [r3, #32]
 80035e2:	431a      	orrs	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	430a      	orrs	r2, r1
 80035ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80035f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	6911      	ldr	r1, [r2, #16]
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	68d2      	ldr	r2, [r2, #12]
 8003602:	4311      	orrs	r1, r2
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	6812      	ldr	r2, [r2, #0]
 8003608:	430b      	orrs	r3, r1
 800360a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	695a      	ldr	r2, [r3, #20]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	431a      	orrs	r2, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	430a      	orrs	r2, r1
 8003626:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f042 0201 	orr.w	r2, r2, #1
 8003636:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2220      	movs	r2, #32
 8003642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3710      	adds	r7, #16
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	000186a0 	.word	0x000186a0
 8003664:	001e847f 	.word	0x001e847f
 8003668:	003d08ff 	.word	0x003d08ff
 800366c:	431bde83 	.word	0x431bde83
 8003670:	10624dd3 	.word	0x10624dd3

08003674 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b088      	sub	sp, #32
 8003678:	af02      	add	r7, sp, #8
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	4608      	mov	r0, r1
 800367e:	4611      	mov	r1, r2
 8003680:	461a      	mov	r2, r3
 8003682:	4603      	mov	r3, r0
 8003684:	817b      	strh	r3, [r7, #10]
 8003686:	460b      	mov	r3, r1
 8003688:	813b      	strh	r3, [r7, #8]
 800368a:	4613      	mov	r3, r2
 800368c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800368e:	f7ff fb0d 	bl	8002cac <HAL_GetTick>
 8003692:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800369a:	b2db      	uxtb	r3, r3
 800369c:	2b20      	cmp	r3, #32
 800369e:	f040 80d9 	bne.w	8003854 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	9300      	str	r3, [sp, #0]
 80036a6:	2319      	movs	r3, #25
 80036a8:	2201      	movs	r2, #1
 80036aa:	496d      	ldr	r1, [pc, #436]	; (8003860 <HAL_I2C_Mem_Write+0x1ec>)
 80036ac:	68f8      	ldr	r0, [r7, #12]
 80036ae:	f000 fc7f 	bl	8003fb0 <I2C_WaitOnFlagUntilTimeout>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d001      	beq.n	80036bc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80036b8:	2302      	movs	r3, #2
 80036ba:	e0cc      	b.n	8003856 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d101      	bne.n	80036ca <HAL_I2C_Mem_Write+0x56>
 80036c6:	2302      	movs	r3, #2
 80036c8:	e0c5      	b.n	8003856 <HAL_I2C_Mem_Write+0x1e2>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2201      	movs	r2, #1
 80036ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0301 	and.w	r3, r3, #1
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d007      	beq.n	80036f0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f042 0201 	orr.w	r2, r2, #1
 80036ee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036fe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2221      	movs	r2, #33	; 0x21
 8003704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2240      	movs	r2, #64	; 0x40
 800370c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2200      	movs	r2, #0
 8003714:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6a3a      	ldr	r2, [r7, #32]
 800371a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003720:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003726:	b29a      	uxth	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	4a4d      	ldr	r2, [pc, #308]	; (8003864 <HAL_I2C_Mem_Write+0x1f0>)
 8003730:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003732:	88f8      	ldrh	r0, [r7, #6]
 8003734:	893a      	ldrh	r2, [r7, #8]
 8003736:	8979      	ldrh	r1, [r7, #10]
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	9301      	str	r3, [sp, #4]
 800373c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800373e:	9300      	str	r3, [sp, #0]
 8003740:	4603      	mov	r3, r0
 8003742:	68f8      	ldr	r0, [r7, #12]
 8003744:	f000 fab6 	bl	8003cb4 <I2C_RequestMemoryWrite>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d052      	beq.n	80037f4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e081      	b.n	8003856 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003752:	697a      	ldr	r2, [r7, #20]
 8003754:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003756:	68f8      	ldr	r0, [r7, #12]
 8003758:	f000 fd00 	bl	800415c <I2C_WaitOnTXEFlagUntilTimeout>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00d      	beq.n	800377e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003766:	2b04      	cmp	r3, #4
 8003768:	d107      	bne.n	800377a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003778:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e06b      	b.n	8003856 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003782:	781a      	ldrb	r2, [r3, #0]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378e:	1c5a      	adds	r2, r3, #1
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003798:	3b01      	subs	r3, #1
 800379a:	b29a      	uxth	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	3b01      	subs	r3, #1
 80037a8:	b29a      	uxth	r2, r3
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	695b      	ldr	r3, [r3, #20]
 80037b4:	f003 0304 	and.w	r3, r3, #4
 80037b8:	2b04      	cmp	r3, #4
 80037ba:	d11b      	bne.n	80037f4 <HAL_I2C_Mem_Write+0x180>
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d017      	beq.n	80037f4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c8:	781a      	ldrb	r2, [r3, #0]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d4:	1c5a      	adds	r2, r3, #1
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037de:	3b01      	subs	r3, #1
 80037e0:	b29a      	uxth	r2, r3
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	3b01      	subs	r3, #1
 80037ee:	b29a      	uxth	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d1aa      	bne.n	8003752 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037fc:	697a      	ldr	r2, [r7, #20]
 80037fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003800:	68f8      	ldr	r0, [r7, #12]
 8003802:	f000 fcec 	bl	80041de <I2C_WaitOnBTFFlagUntilTimeout>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d00d      	beq.n	8003828 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003810:	2b04      	cmp	r3, #4
 8003812:	d107      	bne.n	8003824 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003822:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e016      	b.n	8003856 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003836:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2220      	movs	r2, #32
 800383c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003850:	2300      	movs	r3, #0
 8003852:	e000      	b.n	8003856 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003854:	2302      	movs	r3, #2
  }
}
 8003856:	4618      	mov	r0, r3
 8003858:	3718      	adds	r7, #24
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	00100002 	.word	0x00100002
 8003864:	ffff0000 	.word	0xffff0000

08003868 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b08c      	sub	sp, #48	; 0x30
 800386c:	af02      	add	r7, sp, #8
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	4608      	mov	r0, r1
 8003872:	4611      	mov	r1, r2
 8003874:	461a      	mov	r2, r3
 8003876:	4603      	mov	r3, r0
 8003878:	817b      	strh	r3, [r7, #10]
 800387a:	460b      	mov	r3, r1
 800387c:	813b      	strh	r3, [r7, #8]
 800387e:	4613      	mov	r3, r2
 8003880:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003882:	f7ff fa13 	bl	8002cac <HAL_GetTick>
 8003886:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800388e:	b2db      	uxtb	r3, r3
 8003890:	2b20      	cmp	r3, #32
 8003892:	f040 8208 	bne.w	8003ca6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003898:	9300      	str	r3, [sp, #0]
 800389a:	2319      	movs	r3, #25
 800389c:	2201      	movs	r2, #1
 800389e:	497b      	ldr	r1, [pc, #492]	; (8003a8c <HAL_I2C_Mem_Read+0x224>)
 80038a0:	68f8      	ldr	r0, [r7, #12]
 80038a2:	f000 fb85 	bl	8003fb0 <I2C_WaitOnFlagUntilTimeout>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d001      	beq.n	80038b0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80038ac:	2302      	movs	r3, #2
 80038ae:	e1fb      	b.n	8003ca8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d101      	bne.n	80038be <HAL_I2C_Mem_Read+0x56>
 80038ba:	2302      	movs	r3, #2
 80038bc:	e1f4      	b.n	8003ca8 <HAL_I2C_Mem_Read+0x440>
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2201      	movs	r2, #1
 80038c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0301 	and.w	r3, r3, #1
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d007      	beq.n	80038e4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f042 0201 	orr.w	r2, r2, #1
 80038e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2222      	movs	r2, #34	; 0x22
 80038f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2240      	movs	r2, #64	; 0x40
 8003900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2200      	movs	r2, #0
 8003908:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800390e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003914:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800391a:	b29a      	uxth	r2, r3
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	4a5b      	ldr	r2, [pc, #364]	; (8003a90 <HAL_I2C_Mem_Read+0x228>)
 8003924:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003926:	88f8      	ldrh	r0, [r7, #6]
 8003928:	893a      	ldrh	r2, [r7, #8]
 800392a:	8979      	ldrh	r1, [r7, #10]
 800392c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392e:	9301      	str	r3, [sp, #4]
 8003930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003932:	9300      	str	r3, [sp, #0]
 8003934:	4603      	mov	r3, r0
 8003936:	68f8      	ldr	r0, [r7, #12]
 8003938:	f000 fa52 	bl	8003de0 <I2C_RequestMemoryRead>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d001      	beq.n	8003946 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e1b0      	b.n	8003ca8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800394a:	2b00      	cmp	r3, #0
 800394c:	d113      	bne.n	8003976 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800394e:	2300      	movs	r3, #0
 8003950:	623b      	str	r3, [r7, #32]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	695b      	ldr	r3, [r3, #20]
 8003958:	623b      	str	r3, [r7, #32]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	699b      	ldr	r3, [r3, #24]
 8003960:	623b      	str	r3, [r7, #32]
 8003962:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003972:	601a      	str	r2, [r3, #0]
 8003974:	e184      	b.n	8003c80 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800397a:	2b01      	cmp	r3, #1
 800397c:	d11b      	bne.n	80039b6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800398c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800398e:	2300      	movs	r3, #0
 8003990:	61fb      	str	r3, [r7, #28]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	695b      	ldr	r3, [r3, #20]
 8003998:	61fb      	str	r3, [r7, #28]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	699b      	ldr	r3, [r3, #24]
 80039a0:	61fb      	str	r3, [r7, #28]
 80039a2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039b2:	601a      	str	r2, [r3, #0]
 80039b4:	e164      	b.n	8003c80 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d11b      	bne.n	80039f6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039cc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039de:	2300      	movs	r3, #0
 80039e0:	61bb      	str	r3, [r7, #24]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	695b      	ldr	r3, [r3, #20]
 80039e8:	61bb      	str	r3, [r7, #24]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	699b      	ldr	r3, [r3, #24]
 80039f0:	61bb      	str	r3, [r7, #24]
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	e144      	b.n	8003c80 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039f6:	2300      	movs	r3, #0
 80039f8:	617b      	str	r3, [r7, #20]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	695b      	ldr	r3, [r3, #20]
 8003a00:	617b      	str	r3, [r7, #20]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	699b      	ldr	r3, [r3, #24]
 8003a08:	617b      	str	r3, [r7, #20]
 8003a0a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003a0c:	e138      	b.n	8003c80 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a12:	2b03      	cmp	r3, #3
 8003a14:	f200 80f1 	bhi.w	8003bfa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d123      	bne.n	8003a68 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a22:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003a24:	68f8      	ldr	r0, [r7, #12]
 8003a26:	f000 fc1b 	bl	8004260 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d001      	beq.n	8003a34 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e139      	b.n	8003ca8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	691a      	ldr	r2, [r3, #16]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3e:	b2d2      	uxtb	r2, r2
 8003a40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a46:	1c5a      	adds	r2, r3, #1
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a50:	3b01      	subs	r3, #1
 8003a52:	b29a      	uxth	r2, r3
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	b29a      	uxth	r2, r3
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a66:	e10b      	b.n	8003c80 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d14e      	bne.n	8003b0e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a72:	9300      	str	r3, [sp, #0]
 8003a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a76:	2200      	movs	r2, #0
 8003a78:	4906      	ldr	r1, [pc, #24]	; (8003a94 <HAL_I2C_Mem_Read+0x22c>)
 8003a7a:	68f8      	ldr	r0, [r7, #12]
 8003a7c:	f000 fa98 	bl	8003fb0 <I2C_WaitOnFlagUntilTimeout>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d008      	beq.n	8003a98 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e10e      	b.n	8003ca8 <HAL_I2C_Mem_Read+0x440>
 8003a8a:	bf00      	nop
 8003a8c:	00100002 	.word	0x00100002
 8003a90:	ffff0000 	.word	0xffff0000
 8003a94:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aa6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	691a      	ldr	r2, [r3, #16]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab2:	b2d2      	uxtb	r2, r2
 8003ab4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aba:	1c5a      	adds	r2, r3, #1
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ac4:	3b01      	subs	r3, #1
 8003ac6:	b29a      	uxth	r2, r3
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	b29a      	uxth	r2, r3
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	691a      	ldr	r2, [r3, #16]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae4:	b2d2      	uxtb	r2, r2
 8003ae6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aec:	1c5a      	adds	r2, r3, #1
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003af6:	3b01      	subs	r3, #1
 8003af8:	b29a      	uxth	r2, r3
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	3b01      	subs	r3, #1
 8003b06:	b29a      	uxth	r2, r3
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b0c:	e0b8      	b.n	8003c80 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b10:	9300      	str	r3, [sp, #0]
 8003b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b14:	2200      	movs	r2, #0
 8003b16:	4966      	ldr	r1, [pc, #408]	; (8003cb0 <HAL_I2C_Mem_Read+0x448>)
 8003b18:	68f8      	ldr	r0, [r7, #12]
 8003b1a:	f000 fa49 	bl	8003fb0 <I2C_WaitOnFlagUntilTimeout>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d001      	beq.n	8003b28 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e0bf      	b.n	8003ca8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	691a      	ldr	r2, [r3, #16]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b42:	b2d2      	uxtb	r2, r2
 8003b44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4a:	1c5a      	adds	r2, r3, #1
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b54:	3b01      	subs	r3, #1
 8003b56:	b29a      	uxth	r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	3b01      	subs	r3, #1
 8003b64:	b29a      	uxth	r2, r3
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6c:	9300      	str	r3, [sp, #0]
 8003b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b70:	2200      	movs	r2, #0
 8003b72:	494f      	ldr	r1, [pc, #316]	; (8003cb0 <HAL_I2C_Mem_Read+0x448>)
 8003b74:	68f8      	ldr	r0, [r7, #12]
 8003b76:	f000 fa1b 	bl	8003fb0 <I2C_WaitOnFlagUntilTimeout>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d001      	beq.n	8003b84 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e091      	b.n	8003ca8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	691a      	ldr	r2, [r3, #16]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9e:	b2d2      	uxtb	r2, r2
 8003ba0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba6:	1c5a      	adds	r2, r3, #1
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	b29a      	uxth	r2, r3
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	3b01      	subs	r3, #1
 8003bc0:	b29a      	uxth	r2, r3
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	691a      	ldr	r2, [r3, #16]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd0:	b2d2      	uxtb	r2, r2
 8003bd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd8:	1c5a      	adds	r2, r3, #1
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003be2:	3b01      	subs	r3, #1
 8003be4:	b29a      	uxth	r2, r3
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	3b01      	subs	r3, #1
 8003bf2:	b29a      	uxth	r2, r3
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003bf8:	e042      	b.n	8003c80 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bfc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003bfe:	68f8      	ldr	r0, [r7, #12]
 8003c00:	f000 fb2e 	bl	8004260 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d001      	beq.n	8003c0e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e04c      	b.n	8003ca8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	691a      	ldr	r2, [r3, #16]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c18:	b2d2      	uxtb	r2, r2
 8003c1a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c20:	1c5a      	adds	r2, r3, #1
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	b29a      	uxth	r2, r3
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	b29a      	uxth	r2, r3
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	695b      	ldr	r3, [r3, #20]
 8003c46:	f003 0304 	and.w	r3, r3, #4
 8003c4a:	2b04      	cmp	r3, #4
 8003c4c:	d118      	bne.n	8003c80 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	691a      	ldr	r2, [r3, #16]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c58:	b2d2      	uxtb	r2, r2
 8003c5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c60:	1c5a      	adds	r2, r3, #1
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	b29a      	uxth	r2, r3
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	3b01      	subs	r3, #1
 8003c7a:	b29a      	uxth	r2, r3
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	f47f aec2 	bne.w	8003a0e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2220      	movs	r2, #32
 8003c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	e000      	b.n	8003ca8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003ca6:	2302      	movs	r3, #2
  }
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3728      	adds	r7, #40	; 0x28
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	00010004 	.word	0x00010004

08003cb4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b088      	sub	sp, #32
 8003cb8:	af02      	add	r7, sp, #8
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	4608      	mov	r0, r1
 8003cbe:	4611      	mov	r1, r2
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	817b      	strh	r3, [r7, #10]
 8003cc6:	460b      	mov	r3, r1
 8003cc8:	813b      	strh	r3, [r7, #8]
 8003cca:	4613      	mov	r3, r2
 8003ccc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cdc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce0:	9300      	str	r3, [sp, #0]
 8003ce2:	6a3b      	ldr	r3, [r7, #32]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003cea:	68f8      	ldr	r0, [r7, #12]
 8003cec:	f000 f960 	bl	8003fb0 <I2C_WaitOnFlagUntilTimeout>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00d      	beq.n	8003d12 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d04:	d103      	bne.n	8003d0e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d0c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e05f      	b.n	8003dd2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d12:	897b      	ldrh	r3, [r7, #10]
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	461a      	mov	r2, r3
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d20:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d24:	6a3a      	ldr	r2, [r7, #32]
 8003d26:	492d      	ldr	r1, [pc, #180]	; (8003ddc <I2C_RequestMemoryWrite+0x128>)
 8003d28:	68f8      	ldr	r0, [r7, #12]
 8003d2a:	f000 f998 	bl	800405e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d001      	beq.n	8003d38 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e04c      	b.n	8003dd2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d38:	2300      	movs	r3, #0
 8003d3a:	617b      	str	r3, [r7, #20]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	617b      	str	r3, [r7, #20]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	699b      	ldr	r3, [r3, #24]
 8003d4a:	617b      	str	r3, [r7, #20]
 8003d4c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d50:	6a39      	ldr	r1, [r7, #32]
 8003d52:	68f8      	ldr	r0, [r7, #12]
 8003d54:	f000 fa02 	bl	800415c <I2C_WaitOnTXEFlagUntilTimeout>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00d      	beq.n	8003d7a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d62:	2b04      	cmp	r3, #4
 8003d64:	d107      	bne.n	8003d76 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d74:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e02b      	b.n	8003dd2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d7a:	88fb      	ldrh	r3, [r7, #6]
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d105      	bne.n	8003d8c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d80:	893b      	ldrh	r3, [r7, #8]
 8003d82:	b2da      	uxtb	r2, r3
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	611a      	str	r2, [r3, #16]
 8003d8a:	e021      	b.n	8003dd0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003d8c:	893b      	ldrh	r3, [r7, #8]
 8003d8e:	0a1b      	lsrs	r3, r3, #8
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	b2da      	uxtb	r2, r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d9c:	6a39      	ldr	r1, [r7, #32]
 8003d9e:	68f8      	ldr	r0, [r7, #12]
 8003da0:	f000 f9dc 	bl	800415c <I2C_WaitOnTXEFlagUntilTimeout>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00d      	beq.n	8003dc6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dae:	2b04      	cmp	r3, #4
 8003db0:	d107      	bne.n	8003dc2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dc0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e005      	b.n	8003dd2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003dc6:	893b      	ldrh	r3, [r7, #8]
 8003dc8:	b2da      	uxtb	r2, r3
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3718      	adds	r7, #24
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	00010002 	.word	0x00010002

08003de0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b088      	sub	sp, #32
 8003de4:	af02      	add	r7, sp, #8
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	4608      	mov	r0, r1
 8003dea:	4611      	mov	r1, r2
 8003dec:	461a      	mov	r2, r3
 8003dee:	4603      	mov	r3, r0
 8003df0:	817b      	strh	r3, [r7, #10]
 8003df2:	460b      	mov	r3, r1
 8003df4:	813b      	strh	r3, [r7, #8]
 8003df6:	4613      	mov	r3, r2
 8003df8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e08:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e18:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1c:	9300      	str	r3, [sp, #0]
 8003e1e:	6a3b      	ldr	r3, [r7, #32]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e26:	68f8      	ldr	r0, [r7, #12]
 8003e28:	f000 f8c2 	bl	8003fb0 <I2C_WaitOnFlagUntilTimeout>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d00d      	beq.n	8003e4e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e40:	d103      	bne.n	8003e4a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e48:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e0aa      	b.n	8003fa4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e4e:	897b      	ldrh	r3, [r7, #10]
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	461a      	mov	r2, r3
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e5c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e60:	6a3a      	ldr	r2, [r7, #32]
 8003e62:	4952      	ldr	r1, [pc, #328]	; (8003fac <I2C_RequestMemoryRead+0x1cc>)
 8003e64:	68f8      	ldr	r0, [r7, #12]
 8003e66:	f000 f8fa 	bl	800405e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d001      	beq.n	8003e74 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e097      	b.n	8003fa4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e74:	2300      	movs	r3, #0
 8003e76:	617b      	str	r3, [r7, #20]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	695b      	ldr	r3, [r3, #20]
 8003e7e:	617b      	str	r3, [r7, #20]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	699b      	ldr	r3, [r3, #24]
 8003e86:	617b      	str	r3, [r7, #20]
 8003e88:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e8c:	6a39      	ldr	r1, [r7, #32]
 8003e8e:	68f8      	ldr	r0, [r7, #12]
 8003e90:	f000 f964 	bl	800415c <I2C_WaitOnTXEFlagUntilTimeout>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d00d      	beq.n	8003eb6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9e:	2b04      	cmp	r3, #4
 8003ea0:	d107      	bne.n	8003eb2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eb0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e076      	b.n	8003fa4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003eb6:	88fb      	ldrh	r3, [r7, #6]
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d105      	bne.n	8003ec8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ebc:	893b      	ldrh	r3, [r7, #8]
 8003ebe:	b2da      	uxtb	r2, r3
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	611a      	str	r2, [r3, #16]
 8003ec6:	e021      	b.n	8003f0c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ec8:	893b      	ldrh	r3, [r7, #8]
 8003eca:	0a1b      	lsrs	r3, r3, #8
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	b2da      	uxtb	r2, r3
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ed6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ed8:	6a39      	ldr	r1, [r7, #32]
 8003eda:	68f8      	ldr	r0, [r7, #12]
 8003edc:	f000 f93e 	bl	800415c <I2C_WaitOnTXEFlagUntilTimeout>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d00d      	beq.n	8003f02 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eea:	2b04      	cmp	r3, #4
 8003eec:	d107      	bne.n	8003efe <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003efc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e050      	b.n	8003fa4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f02:	893b      	ldrh	r3, [r7, #8]
 8003f04:	b2da      	uxtb	r2, r3
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f0e:	6a39      	ldr	r1, [r7, #32]
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	f000 f923 	bl	800415c <I2C_WaitOnTXEFlagUntilTimeout>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00d      	beq.n	8003f38 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f20:	2b04      	cmp	r3, #4
 8003f22:	d107      	bne.n	8003f34 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f32:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e035      	b.n	8003fa4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f46:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4a:	9300      	str	r3, [sp, #0]
 8003f4c:	6a3b      	ldr	r3, [r7, #32]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f54:	68f8      	ldr	r0, [r7, #12]
 8003f56:	f000 f82b 	bl	8003fb0 <I2C_WaitOnFlagUntilTimeout>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d00d      	beq.n	8003f7c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f6e:	d103      	bne.n	8003f78 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f76:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	e013      	b.n	8003fa4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003f7c:	897b      	ldrh	r3, [r7, #10]
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	f043 0301 	orr.w	r3, r3, #1
 8003f84:	b2da      	uxtb	r2, r3
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8e:	6a3a      	ldr	r2, [r7, #32]
 8003f90:	4906      	ldr	r1, [pc, #24]	; (8003fac <I2C_RequestMemoryRead+0x1cc>)
 8003f92:	68f8      	ldr	r0, [r7, #12]
 8003f94:	f000 f863 	bl	800405e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d001      	beq.n	8003fa2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e000      	b.n	8003fa4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003fa2:	2300      	movs	r3, #0
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3718      	adds	r7, #24
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	00010002 	.word	0x00010002

08003fb0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	603b      	str	r3, [r7, #0]
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003fc0:	e025      	b.n	800400e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fc8:	d021      	beq.n	800400e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fca:	f7fe fe6f 	bl	8002cac <HAL_GetTick>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	683a      	ldr	r2, [r7, #0]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d302      	bcc.n	8003fe0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d116      	bne.n	800400e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2220      	movs	r2, #32
 8003fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffa:	f043 0220 	orr.w	r2, r3, #32
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2200      	movs	r2, #0
 8004006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e023      	b.n	8004056 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	0c1b      	lsrs	r3, r3, #16
 8004012:	b2db      	uxtb	r3, r3
 8004014:	2b01      	cmp	r3, #1
 8004016:	d10d      	bne.n	8004034 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	43da      	mvns	r2, r3
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	4013      	ands	r3, r2
 8004024:	b29b      	uxth	r3, r3
 8004026:	2b00      	cmp	r3, #0
 8004028:	bf0c      	ite	eq
 800402a:	2301      	moveq	r3, #1
 800402c:	2300      	movne	r3, #0
 800402e:	b2db      	uxtb	r3, r3
 8004030:	461a      	mov	r2, r3
 8004032:	e00c      	b.n	800404e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	699b      	ldr	r3, [r3, #24]
 800403a:	43da      	mvns	r2, r3
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	4013      	ands	r3, r2
 8004040:	b29b      	uxth	r3, r3
 8004042:	2b00      	cmp	r3, #0
 8004044:	bf0c      	ite	eq
 8004046:	2301      	moveq	r3, #1
 8004048:	2300      	movne	r3, #0
 800404a:	b2db      	uxtb	r3, r3
 800404c:	461a      	mov	r2, r3
 800404e:	79fb      	ldrb	r3, [r7, #7]
 8004050:	429a      	cmp	r2, r3
 8004052:	d0b6      	beq.n	8003fc2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3710      	adds	r7, #16
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}

0800405e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800405e:	b580      	push	{r7, lr}
 8004060:	b084      	sub	sp, #16
 8004062:	af00      	add	r7, sp, #0
 8004064:	60f8      	str	r0, [r7, #12]
 8004066:	60b9      	str	r1, [r7, #8]
 8004068:	607a      	str	r2, [r7, #4]
 800406a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800406c:	e051      	b.n	8004112 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	695b      	ldr	r3, [r3, #20]
 8004074:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004078:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800407c:	d123      	bne.n	80040c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800408c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004096:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2200      	movs	r2, #0
 800409c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2220      	movs	r2, #32
 80040a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b2:	f043 0204 	orr.w	r2, r3, #4
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e046      	b.n	8004154 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040cc:	d021      	beq.n	8004112 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040ce:	f7fe fded 	bl	8002cac <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d302      	bcc.n	80040e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d116      	bne.n	8004112 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2200      	movs	r2, #0
 80040e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2220      	movs	r2, #32
 80040ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fe:	f043 0220 	orr.w	r2, r3, #32
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2200      	movs	r2, #0
 800410a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e020      	b.n	8004154 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	0c1b      	lsrs	r3, r3, #16
 8004116:	b2db      	uxtb	r3, r3
 8004118:	2b01      	cmp	r3, #1
 800411a:	d10c      	bne.n	8004136 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	43da      	mvns	r2, r3
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	4013      	ands	r3, r2
 8004128:	b29b      	uxth	r3, r3
 800412a:	2b00      	cmp	r3, #0
 800412c:	bf14      	ite	ne
 800412e:	2301      	movne	r3, #1
 8004130:	2300      	moveq	r3, #0
 8004132:	b2db      	uxtb	r3, r3
 8004134:	e00b      	b.n	800414e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	699b      	ldr	r3, [r3, #24]
 800413c:	43da      	mvns	r2, r3
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	4013      	ands	r3, r2
 8004142:	b29b      	uxth	r3, r3
 8004144:	2b00      	cmp	r3, #0
 8004146:	bf14      	ite	ne
 8004148:	2301      	movne	r3, #1
 800414a:	2300      	moveq	r3, #0
 800414c:	b2db      	uxtb	r3, r3
 800414e:	2b00      	cmp	r3, #0
 8004150:	d18d      	bne.n	800406e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004152:	2300      	movs	r3, #0
}
 8004154:	4618      	mov	r0, r3
 8004156:	3710      	adds	r7, #16
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	60b9      	str	r1, [r7, #8]
 8004166:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004168:	e02d      	b.n	80041c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800416a:	68f8      	ldr	r0, [r7, #12]
 800416c:	f000 f8ce 	bl	800430c <I2C_IsAcknowledgeFailed>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d001      	beq.n	800417a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e02d      	b.n	80041d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004180:	d021      	beq.n	80041c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004182:	f7fe fd93 	bl	8002cac <HAL_GetTick>
 8004186:	4602      	mov	r2, r0
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	68ba      	ldr	r2, [r7, #8]
 800418e:	429a      	cmp	r2, r3
 8004190:	d302      	bcc.n	8004198 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d116      	bne.n	80041c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2200      	movs	r2, #0
 800419c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2220      	movs	r2, #32
 80041a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b2:	f043 0220 	orr.w	r2, r3, #32
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e007      	b.n	80041d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	695b      	ldr	r3, [r3, #20]
 80041cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041d0:	2b80      	cmp	r3, #128	; 0x80
 80041d2:	d1ca      	bne.n	800416a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3710      	adds	r7, #16
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}

080041de <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041de:	b580      	push	{r7, lr}
 80041e0:	b084      	sub	sp, #16
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	60f8      	str	r0, [r7, #12]
 80041e6:	60b9      	str	r1, [r7, #8]
 80041e8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80041ea:	e02d      	b.n	8004248 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80041ec:	68f8      	ldr	r0, [r7, #12]
 80041ee:	f000 f88d 	bl	800430c <I2C_IsAcknowledgeFailed>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d001      	beq.n	80041fc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e02d      	b.n	8004258 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004202:	d021      	beq.n	8004248 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004204:	f7fe fd52 	bl	8002cac <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	68ba      	ldr	r2, [r7, #8]
 8004210:	429a      	cmp	r2, r3
 8004212:	d302      	bcc.n	800421a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d116      	bne.n	8004248 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2200      	movs	r2, #0
 800421e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2220      	movs	r2, #32
 8004224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2200      	movs	r2, #0
 800422c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004234:	f043 0220 	orr.w	r2, r3, #32
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2200      	movs	r2, #0
 8004240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e007      	b.n	8004258 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	f003 0304 	and.w	r3, r3, #4
 8004252:	2b04      	cmp	r3, #4
 8004254:	d1ca      	bne.n	80041ec <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004256:	2300      	movs	r3, #0
}
 8004258:	4618      	mov	r0, r3
 800425a:	3710      	adds	r7, #16
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800426c:	e042      	b.n	80042f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	695b      	ldr	r3, [r3, #20]
 8004274:	f003 0310 	and.w	r3, r3, #16
 8004278:	2b10      	cmp	r3, #16
 800427a:	d119      	bne.n	80042b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f06f 0210 	mvn.w	r2, #16
 8004284:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2200      	movs	r2, #0
 800428a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2220      	movs	r2, #32
 8004290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2200      	movs	r2, #0
 8004298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e029      	b.n	8004304 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042b0:	f7fe fcfc 	bl	8002cac <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	68ba      	ldr	r2, [r7, #8]
 80042bc:	429a      	cmp	r2, r3
 80042be:	d302      	bcc.n	80042c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d116      	bne.n	80042f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2200      	movs	r2, #0
 80042ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2220      	movs	r2, #32
 80042d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e0:	f043 0220 	orr.w	r2, r3, #32
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e007      	b.n	8004304 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	695b      	ldr	r3, [r3, #20]
 80042fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042fe:	2b40      	cmp	r3, #64	; 0x40
 8004300:	d1b5      	bne.n	800426e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004302:	2300      	movs	r3, #0
}
 8004304:	4618      	mov	r0, r3
 8004306:	3710      	adds	r7, #16
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}

0800430c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	695b      	ldr	r3, [r3, #20]
 800431a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800431e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004322:	d11b      	bne.n	800435c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800432c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2200      	movs	r2, #0
 8004332:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2220      	movs	r2, #32
 8004338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004348:	f043 0204 	orr.w	r2, r3, #4
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	e000      	b.n	800435e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800435c:	2300      	movs	r3, #0
}
 800435e:	4618      	mov	r0, r3
 8004360:	370c      	adds	r7, #12
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr

0800436a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800436a:	b480      	push	{r7}
 800436c:	b083      	sub	sp, #12
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
 8004372:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800437a:	b2db      	uxtb	r3, r3
 800437c:	2b20      	cmp	r3, #32
 800437e:	d129      	bne.n	80043d4 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2224      	movs	r2, #36	; 0x24
 8004384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f022 0201 	bic.w	r2, r2, #1
 8004396:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f022 0210 	bic.w	r2, r2, #16
 80043a6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	683a      	ldr	r2, [r7, #0]
 80043b4:	430a      	orrs	r2, r1
 80043b6:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f042 0201 	orr.w	r2, r2, #1
 80043c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2220      	movs	r2, #32
 80043cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80043d0:	2300      	movs	r3, #0
 80043d2:	e000      	b.n	80043d6 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80043d4:	2302      	movs	r3, #2
  }
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	370c      	adds	r7, #12
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr

080043e2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80043e2:	b480      	push	{r7}
 80043e4:	b085      	sub	sp, #20
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
 80043ea:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80043ec:	2300      	movs	r3, #0
 80043ee:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	2b20      	cmp	r3, #32
 80043fa:	d12a      	bne.n	8004452 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2224      	movs	r2, #36	; 0x24
 8004400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f022 0201 	bic.w	r2, r2, #1
 8004412:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441a:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800441c:	89fb      	ldrh	r3, [r7, #14]
 800441e:	f023 030f 	bic.w	r3, r3, #15
 8004422:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	b29a      	uxth	r2, r3
 8004428:	89fb      	ldrh	r3, [r7, #14]
 800442a:	4313      	orrs	r3, r2
 800442c:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	89fa      	ldrh	r2, [r7, #14]
 8004434:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f042 0201 	orr.w	r2, r2, #1
 8004444:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2220      	movs	r2, #32
 800444a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800444e:	2300      	movs	r3, #0
 8004450:	e000      	b.n	8004454 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004452:	2302      	movs	r3, #2
  }
}
 8004454:	4618      	mov	r0, r3
 8004456:	3714      	adds	r7, #20
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr

08004460 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004466:	2300      	movs	r3, #0
 8004468:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800446a:	2300      	movs	r3, #0
 800446c:	603b      	str	r3, [r7, #0]
 800446e:	4b20      	ldr	r3, [pc, #128]	; (80044f0 <HAL_PWREx_EnableOverDrive+0x90>)
 8004470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004472:	4a1f      	ldr	r2, [pc, #124]	; (80044f0 <HAL_PWREx_EnableOverDrive+0x90>)
 8004474:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004478:	6413      	str	r3, [r2, #64]	; 0x40
 800447a:	4b1d      	ldr	r3, [pc, #116]	; (80044f0 <HAL_PWREx_EnableOverDrive+0x90>)
 800447c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004482:	603b      	str	r3, [r7, #0]
 8004484:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004486:	4b1b      	ldr	r3, [pc, #108]	; (80044f4 <HAL_PWREx_EnableOverDrive+0x94>)
 8004488:	2201      	movs	r2, #1
 800448a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800448c:	f7fe fc0e 	bl	8002cac <HAL_GetTick>
 8004490:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004492:	e009      	b.n	80044a8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004494:	f7fe fc0a 	bl	8002cac <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80044a2:	d901      	bls.n	80044a8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	e01f      	b.n	80044e8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80044a8:	4b13      	ldr	r3, [pc, #76]	; (80044f8 <HAL_PWREx_EnableOverDrive+0x98>)
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044b4:	d1ee      	bne.n	8004494 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80044b6:	4b11      	ldr	r3, [pc, #68]	; (80044fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80044b8:	2201      	movs	r2, #1
 80044ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80044bc:	f7fe fbf6 	bl	8002cac <HAL_GetTick>
 80044c0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80044c2:	e009      	b.n	80044d8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80044c4:	f7fe fbf2 	bl	8002cac <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80044d2:	d901      	bls.n	80044d8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e007      	b.n	80044e8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80044d8:	4b07      	ldr	r3, [pc, #28]	; (80044f8 <HAL_PWREx_EnableOverDrive+0x98>)
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044e4:	d1ee      	bne.n	80044c4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80044e6:	2300      	movs	r3, #0
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3708      	adds	r7, #8
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	40023800 	.word	0x40023800
 80044f4:	420e0040 	.word	0x420e0040
 80044f8:	40007000 	.word	0x40007000
 80044fc:	420e0044 	.word	0x420e0044

08004500 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b086      	sub	sp, #24
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d101      	bne.n	8004512 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e25b      	b.n	80049ca <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0301 	and.w	r3, r3, #1
 800451a:	2b00      	cmp	r3, #0
 800451c:	d075      	beq.n	800460a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800451e:	4ba3      	ldr	r3, [pc, #652]	; (80047ac <HAL_RCC_OscConfig+0x2ac>)
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	f003 030c 	and.w	r3, r3, #12
 8004526:	2b04      	cmp	r3, #4
 8004528:	d00c      	beq.n	8004544 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800452a:	4ba0      	ldr	r3, [pc, #640]	; (80047ac <HAL_RCC_OscConfig+0x2ac>)
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004532:	2b08      	cmp	r3, #8
 8004534:	d112      	bne.n	800455c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004536:	4b9d      	ldr	r3, [pc, #628]	; (80047ac <HAL_RCC_OscConfig+0x2ac>)
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800453e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004542:	d10b      	bne.n	800455c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004544:	4b99      	ldr	r3, [pc, #612]	; (80047ac <HAL_RCC_OscConfig+0x2ac>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800454c:	2b00      	cmp	r3, #0
 800454e:	d05b      	beq.n	8004608 <HAL_RCC_OscConfig+0x108>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d157      	bne.n	8004608 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e236      	b.n	80049ca <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004564:	d106      	bne.n	8004574 <HAL_RCC_OscConfig+0x74>
 8004566:	4b91      	ldr	r3, [pc, #580]	; (80047ac <HAL_RCC_OscConfig+0x2ac>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a90      	ldr	r2, [pc, #576]	; (80047ac <HAL_RCC_OscConfig+0x2ac>)
 800456c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004570:	6013      	str	r3, [r2, #0]
 8004572:	e01d      	b.n	80045b0 <HAL_RCC_OscConfig+0xb0>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800457c:	d10c      	bne.n	8004598 <HAL_RCC_OscConfig+0x98>
 800457e:	4b8b      	ldr	r3, [pc, #556]	; (80047ac <HAL_RCC_OscConfig+0x2ac>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a8a      	ldr	r2, [pc, #552]	; (80047ac <HAL_RCC_OscConfig+0x2ac>)
 8004584:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004588:	6013      	str	r3, [r2, #0]
 800458a:	4b88      	ldr	r3, [pc, #544]	; (80047ac <HAL_RCC_OscConfig+0x2ac>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a87      	ldr	r2, [pc, #540]	; (80047ac <HAL_RCC_OscConfig+0x2ac>)
 8004590:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004594:	6013      	str	r3, [r2, #0]
 8004596:	e00b      	b.n	80045b0 <HAL_RCC_OscConfig+0xb0>
 8004598:	4b84      	ldr	r3, [pc, #528]	; (80047ac <HAL_RCC_OscConfig+0x2ac>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a83      	ldr	r2, [pc, #524]	; (80047ac <HAL_RCC_OscConfig+0x2ac>)
 800459e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045a2:	6013      	str	r3, [r2, #0]
 80045a4:	4b81      	ldr	r3, [pc, #516]	; (80047ac <HAL_RCC_OscConfig+0x2ac>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a80      	ldr	r2, [pc, #512]	; (80047ac <HAL_RCC_OscConfig+0x2ac>)
 80045aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d013      	beq.n	80045e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045b8:	f7fe fb78 	bl	8002cac <HAL_GetTick>
 80045bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045be:	e008      	b.n	80045d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045c0:	f7fe fb74 	bl	8002cac <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	2b64      	cmp	r3, #100	; 0x64
 80045cc:	d901      	bls.n	80045d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e1fb      	b.n	80049ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045d2:	4b76      	ldr	r3, [pc, #472]	; (80047ac <HAL_RCC_OscConfig+0x2ac>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d0f0      	beq.n	80045c0 <HAL_RCC_OscConfig+0xc0>
 80045de:	e014      	b.n	800460a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045e0:	f7fe fb64 	bl	8002cac <HAL_GetTick>
 80045e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045e6:	e008      	b.n	80045fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045e8:	f7fe fb60 	bl	8002cac <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	2b64      	cmp	r3, #100	; 0x64
 80045f4:	d901      	bls.n	80045fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e1e7      	b.n	80049ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045fa:	4b6c      	ldr	r3, [pc, #432]	; (80047ac <HAL_RCC_OscConfig+0x2ac>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d1f0      	bne.n	80045e8 <HAL_RCC_OscConfig+0xe8>
 8004606:	e000      	b.n	800460a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004608:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0302 	and.w	r3, r3, #2
 8004612:	2b00      	cmp	r3, #0
 8004614:	d063      	beq.n	80046de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004616:	4b65      	ldr	r3, [pc, #404]	; (80047ac <HAL_RCC_OscConfig+0x2ac>)
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	f003 030c 	and.w	r3, r3, #12
 800461e:	2b00      	cmp	r3, #0
 8004620:	d00b      	beq.n	800463a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004622:	4b62      	ldr	r3, [pc, #392]	; (80047ac <HAL_RCC_OscConfig+0x2ac>)
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800462a:	2b08      	cmp	r3, #8
 800462c:	d11c      	bne.n	8004668 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800462e:	4b5f      	ldr	r3, [pc, #380]	; (80047ac <HAL_RCC_OscConfig+0x2ac>)
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d116      	bne.n	8004668 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800463a:	4b5c      	ldr	r3, [pc, #368]	; (80047ac <HAL_RCC_OscConfig+0x2ac>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 0302 	and.w	r3, r3, #2
 8004642:	2b00      	cmp	r3, #0
 8004644:	d005      	beq.n	8004652 <HAL_RCC_OscConfig+0x152>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	2b01      	cmp	r3, #1
 800464c:	d001      	beq.n	8004652 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e1bb      	b.n	80049ca <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004652:	4b56      	ldr	r3, [pc, #344]	; (80047ac <HAL_RCC_OscConfig+0x2ac>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	691b      	ldr	r3, [r3, #16]
 800465e:	00db      	lsls	r3, r3, #3
 8004660:	4952      	ldr	r1, [pc, #328]	; (80047ac <HAL_RCC_OscConfig+0x2ac>)
 8004662:	4313      	orrs	r3, r2
 8004664:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004666:	e03a      	b.n	80046de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d020      	beq.n	80046b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004670:	4b4f      	ldr	r3, [pc, #316]	; (80047b0 <HAL_RCC_OscConfig+0x2b0>)
 8004672:	2201      	movs	r2, #1
 8004674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004676:	f7fe fb19 	bl	8002cac <HAL_GetTick>
 800467a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800467c:	e008      	b.n	8004690 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800467e:	f7fe fb15 	bl	8002cac <HAL_GetTick>
 8004682:	4602      	mov	r2, r0
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	2b02      	cmp	r3, #2
 800468a:	d901      	bls.n	8004690 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e19c      	b.n	80049ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004690:	4b46      	ldr	r3, [pc, #280]	; (80047ac <HAL_RCC_OscConfig+0x2ac>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0302 	and.w	r3, r3, #2
 8004698:	2b00      	cmp	r3, #0
 800469a:	d0f0      	beq.n	800467e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800469c:	4b43      	ldr	r3, [pc, #268]	; (80047ac <HAL_RCC_OscConfig+0x2ac>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	691b      	ldr	r3, [r3, #16]
 80046a8:	00db      	lsls	r3, r3, #3
 80046aa:	4940      	ldr	r1, [pc, #256]	; (80047ac <HAL_RCC_OscConfig+0x2ac>)
 80046ac:	4313      	orrs	r3, r2
 80046ae:	600b      	str	r3, [r1, #0]
 80046b0:	e015      	b.n	80046de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046b2:	4b3f      	ldr	r3, [pc, #252]	; (80047b0 <HAL_RCC_OscConfig+0x2b0>)
 80046b4:	2200      	movs	r2, #0
 80046b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046b8:	f7fe faf8 	bl	8002cac <HAL_GetTick>
 80046bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046be:	e008      	b.n	80046d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046c0:	f7fe faf4 	bl	8002cac <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d901      	bls.n	80046d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e17b      	b.n	80049ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046d2:	4b36      	ldr	r3, [pc, #216]	; (80047ac <HAL_RCC_OscConfig+0x2ac>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0302 	and.w	r3, r3, #2
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1f0      	bne.n	80046c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0308 	and.w	r3, r3, #8
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d030      	beq.n	800474c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	695b      	ldr	r3, [r3, #20]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d016      	beq.n	8004720 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046f2:	4b30      	ldr	r3, [pc, #192]	; (80047b4 <HAL_RCC_OscConfig+0x2b4>)
 80046f4:	2201      	movs	r2, #1
 80046f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046f8:	f7fe fad8 	bl	8002cac <HAL_GetTick>
 80046fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046fe:	e008      	b.n	8004712 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004700:	f7fe fad4 	bl	8002cac <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	2b02      	cmp	r3, #2
 800470c:	d901      	bls.n	8004712 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e15b      	b.n	80049ca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004712:	4b26      	ldr	r3, [pc, #152]	; (80047ac <HAL_RCC_OscConfig+0x2ac>)
 8004714:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004716:	f003 0302 	and.w	r3, r3, #2
 800471a:	2b00      	cmp	r3, #0
 800471c:	d0f0      	beq.n	8004700 <HAL_RCC_OscConfig+0x200>
 800471e:	e015      	b.n	800474c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004720:	4b24      	ldr	r3, [pc, #144]	; (80047b4 <HAL_RCC_OscConfig+0x2b4>)
 8004722:	2200      	movs	r2, #0
 8004724:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004726:	f7fe fac1 	bl	8002cac <HAL_GetTick>
 800472a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800472c:	e008      	b.n	8004740 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800472e:	f7fe fabd 	bl	8002cac <HAL_GetTick>
 8004732:	4602      	mov	r2, r0
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	2b02      	cmp	r3, #2
 800473a:	d901      	bls.n	8004740 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800473c:	2303      	movs	r3, #3
 800473e:	e144      	b.n	80049ca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004740:	4b1a      	ldr	r3, [pc, #104]	; (80047ac <HAL_RCC_OscConfig+0x2ac>)
 8004742:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004744:	f003 0302 	and.w	r3, r3, #2
 8004748:	2b00      	cmp	r3, #0
 800474a:	d1f0      	bne.n	800472e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0304 	and.w	r3, r3, #4
 8004754:	2b00      	cmp	r3, #0
 8004756:	f000 80a0 	beq.w	800489a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800475a:	2300      	movs	r3, #0
 800475c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800475e:	4b13      	ldr	r3, [pc, #76]	; (80047ac <HAL_RCC_OscConfig+0x2ac>)
 8004760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d10f      	bne.n	800478a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800476a:	2300      	movs	r3, #0
 800476c:	60bb      	str	r3, [r7, #8]
 800476e:	4b0f      	ldr	r3, [pc, #60]	; (80047ac <HAL_RCC_OscConfig+0x2ac>)
 8004770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004772:	4a0e      	ldr	r2, [pc, #56]	; (80047ac <HAL_RCC_OscConfig+0x2ac>)
 8004774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004778:	6413      	str	r3, [r2, #64]	; 0x40
 800477a:	4b0c      	ldr	r3, [pc, #48]	; (80047ac <HAL_RCC_OscConfig+0x2ac>)
 800477c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004782:	60bb      	str	r3, [r7, #8]
 8004784:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004786:	2301      	movs	r3, #1
 8004788:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800478a:	4b0b      	ldr	r3, [pc, #44]	; (80047b8 <HAL_RCC_OscConfig+0x2b8>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004792:	2b00      	cmp	r3, #0
 8004794:	d121      	bne.n	80047da <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004796:	4b08      	ldr	r3, [pc, #32]	; (80047b8 <HAL_RCC_OscConfig+0x2b8>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a07      	ldr	r2, [pc, #28]	; (80047b8 <HAL_RCC_OscConfig+0x2b8>)
 800479c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047a2:	f7fe fa83 	bl	8002cac <HAL_GetTick>
 80047a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047a8:	e011      	b.n	80047ce <HAL_RCC_OscConfig+0x2ce>
 80047aa:	bf00      	nop
 80047ac:	40023800 	.word	0x40023800
 80047b0:	42470000 	.word	0x42470000
 80047b4:	42470e80 	.word	0x42470e80
 80047b8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047bc:	f7fe fa76 	bl	8002cac <HAL_GetTick>
 80047c0:	4602      	mov	r2, r0
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	2b02      	cmp	r3, #2
 80047c8:	d901      	bls.n	80047ce <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80047ca:	2303      	movs	r3, #3
 80047cc:	e0fd      	b.n	80049ca <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047ce:	4b81      	ldr	r3, [pc, #516]	; (80049d4 <HAL_RCC_OscConfig+0x4d4>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d0f0      	beq.n	80047bc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d106      	bne.n	80047f0 <HAL_RCC_OscConfig+0x2f0>
 80047e2:	4b7d      	ldr	r3, [pc, #500]	; (80049d8 <HAL_RCC_OscConfig+0x4d8>)
 80047e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047e6:	4a7c      	ldr	r2, [pc, #496]	; (80049d8 <HAL_RCC_OscConfig+0x4d8>)
 80047e8:	f043 0301 	orr.w	r3, r3, #1
 80047ec:	6713      	str	r3, [r2, #112]	; 0x70
 80047ee:	e01c      	b.n	800482a <HAL_RCC_OscConfig+0x32a>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	2b05      	cmp	r3, #5
 80047f6:	d10c      	bne.n	8004812 <HAL_RCC_OscConfig+0x312>
 80047f8:	4b77      	ldr	r3, [pc, #476]	; (80049d8 <HAL_RCC_OscConfig+0x4d8>)
 80047fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047fc:	4a76      	ldr	r2, [pc, #472]	; (80049d8 <HAL_RCC_OscConfig+0x4d8>)
 80047fe:	f043 0304 	orr.w	r3, r3, #4
 8004802:	6713      	str	r3, [r2, #112]	; 0x70
 8004804:	4b74      	ldr	r3, [pc, #464]	; (80049d8 <HAL_RCC_OscConfig+0x4d8>)
 8004806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004808:	4a73      	ldr	r2, [pc, #460]	; (80049d8 <HAL_RCC_OscConfig+0x4d8>)
 800480a:	f043 0301 	orr.w	r3, r3, #1
 800480e:	6713      	str	r3, [r2, #112]	; 0x70
 8004810:	e00b      	b.n	800482a <HAL_RCC_OscConfig+0x32a>
 8004812:	4b71      	ldr	r3, [pc, #452]	; (80049d8 <HAL_RCC_OscConfig+0x4d8>)
 8004814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004816:	4a70      	ldr	r2, [pc, #448]	; (80049d8 <HAL_RCC_OscConfig+0x4d8>)
 8004818:	f023 0301 	bic.w	r3, r3, #1
 800481c:	6713      	str	r3, [r2, #112]	; 0x70
 800481e:	4b6e      	ldr	r3, [pc, #440]	; (80049d8 <HAL_RCC_OscConfig+0x4d8>)
 8004820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004822:	4a6d      	ldr	r2, [pc, #436]	; (80049d8 <HAL_RCC_OscConfig+0x4d8>)
 8004824:	f023 0304 	bic.w	r3, r3, #4
 8004828:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d015      	beq.n	800485e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004832:	f7fe fa3b 	bl	8002cac <HAL_GetTick>
 8004836:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004838:	e00a      	b.n	8004850 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800483a:	f7fe fa37 	bl	8002cac <HAL_GetTick>
 800483e:	4602      	mov	r2, r0
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	1ad3      	subs	r3, r2, r3
 8004844:	f241 3288 	movw	r2, #5000	; 0x1388
 8004848:	4293      	cmp	r3, r2
 800484a:	d901      	bls.n	8004850 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800484c:	2303      	movs	r3, #3
 800484e:	e0bc      	b.n	80049ca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004850:	4b61      	ldr	r3, [pc, #388]	; (80049d8 <HAL_RCC_OscConfig+0x4d8>)
 8004852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004854:	f003 0302 	and.w	r3, r3, #2
 8004858:	2b00      	cmp	r3, #0
 800485a:	d0ee      	beq.n	800483a <HAL_RCC_OscConfig+0x33a>
 800485c:	e014      	b.n	8004888 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800485e:	f7fe fa25 	bl	8002cac <HAL_GetTick>
 8004862:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004864:	e00a      	b.n	800487c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004866:	f7fe fa21 	bl	8002cac <HAL_GetTick>
 800486a:	4602      	mov	r2, r0
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	f241 3288 	movw	r2, #5000	; 0x1388
 8004874:	4293      	cmp	r3, r2
 8004876:	d901      	bls.n	800487c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004878:	2303      	movs	r3, #3
 800487a:	e0a6      	b.n	80049ca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800487c:	4b56      	ldr	r3, [pc, #344]	; (80049d8 <HAL_RCC_OscConfig+0x4d8>)
 800487e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004880:	f003 0302 	and.w	r3, r3, #2
 8004884:	2b00      	cmp	r3, #0
 8004886:	d1ee      	bne.n	8004866 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004888:	7dfb      	ldrb	r3, [r7, #23]
 800488a:	2b01      	cmp	r3, #1
 800488c:	d105      	bne.n	800489a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800488e:	4b52      	ldr	r3, [pc, #328]	; (80049d8 <HAL_RCC_OscConfig+0x4d8>)
 8004890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004892:	4a51      	ldr	r2, [pc, #324]	; (80049d8 <HAL_RCC_OscConfig+0x4d8>)
 8004894:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004898:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	699b      	ldr	r3, [r3, #24]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	f000 8092 	beq.w	80049c8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048a4:	4b4c      	ldr	r3, [pc, #304]	; (80049d8 <HAL_RCC_OscConfig+0x4d8>)
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	f003 030c 	and.w	r3, r3, #12
 80048ac:	2b08      	cmp	r3, #8
 80048ae:	d05c      	beq.n	800496a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	699b      	ldr	r3, [r3, #24]
 80048b4:	2b02      	cmp	r3, #2
 80048b6:	d141      	bne.n	800493c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048b8:	4b48      	ldr	r3, [pc, #288]	; (80049dc <HAL_RCC_OscConfig+0x4dc>)
 80048ba:	2200      	movs	r2, #0
 80048bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048be:	f7fe f9f5 	bl	8002cac <HAL_GetTick>
 80048c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048c4:	e008      	b.n	80048d8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048c6:	f7fe f9f1 	bl	8002cac <HAL_GetTick>
 80048ca:	4602      	mov	r2, r0
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	d901      	bls.n	80048d8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80048d4:	2303      	movs	r3, #3
 80048d6:	e078      	b.n	80049ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048d8:	4b3f      	ldr	r3, [pc, #252]	; (80049d8 <HAL_RCC_OscConfig+0x4d8>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d1f0      	bne.n	80048c6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	69da      	ldr	r2, [r3, #28]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a1b      	ldr	r3, [r3, #32]
 80048ec:	431a      	orrs	r2, r3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f2:	019b      	lsls	r3, r3, #6
 80048f4:	431a      	orrs	r2, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048fa:	085b      	lsrs	r3, r3, #1
 80048fc:	3b01      	subs	r3, #1
 80048fe:	041b      	lsls	r3, r3, #16
 8004900:	431a      	orrs	r2, r3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004906:	061b      	lsls	r3, r3, #24
 8004908:	4933      	ldr	r1, [pc, #204]	; (80049d8 <HAL_RCC_OscConfig+0x4d8>)
 800490a:	4313      	orrs	r3, r2
 800490c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800490e:	4b33      	ldr	r3, [pc, #204]	; (80049dc <HAL_RCC_OscConfig+0x4dc>)
 8004910:	2201      	movs	r2, #1
 8004912:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004914:	f7fe f9ca 	bl	8002cac <HAL_GetTick>
 8004918:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800491a:	e008      	b.n	800492e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800491c:	f7fe f9c6 	bl	8002cac <HAL_GetTick>
 8004920:	4602      	mov	r2, r0
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	2b02      	cmp	r3, #2
 8004928:	d901      	bls.n	800492e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	e04d      	b.n	80049ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800492e:	4b2a      	ldr	r3, [pc, #168]	; (80049d8 <HAL_RCC_OscConfig+0x4d8>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d0f0      	beq.n	800491c <HAL_RCC_OscConfig+0x41c>
 800493a:	e045      	b.n	80049c8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800493c:	4b27      	ldr	r3, [pc, #156]	; (80049dc <HAL_RCC_OscConfig+0x4dc>)
 800493e:	2200      	movs	r2, #0
 8004940:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004942:	f7fe f9b3 	bl	8002cac <HAL_GetTick>
 8004946:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004948:	e008      	b.n	800495c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800494a:	f7fe f9af 	bl	8002cac <HAL_GetTick>
 800494e:	4602      	mov	r2, r0
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	1ad3      	subs	r3, r2, r3
 8004954:	2b02      	cmp	r3, #2
 8004956:	d901      	bls.n	800495c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004958:	2303      	movs	r3, #3
 800495a:	e036      	b.n	80049ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800495c:	4b1e      	ldr	r3, [pc, #120]	; (80049d8 <HAL_RCC_OscConfig+0x4d8>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d1f0      	bne.n	800494a <HAL_RCC_OscConfig+0x44a>
 8004968:	e02e      	b.n	80049c8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	699b      	ldr	r3, [r3, #24]
 800496e:	2b01      	cmp	r3, #1
 8004970:	d101      	bne.n	8004976 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e029      	b.n	80049ca <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004976:	4b18      	ldr	r3, [pc, #96]	; (80049d8 <HAL_RCC_OscConfig+0x4d8>)
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	69db      	ldr	r3, [r3, #28]
 8004986:	429a      	cmp	r2, r3
 8004988:	d11c      	bne.n	80049c4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004994:	429a      	cmp	r2, r3
 8004996:	d115      	bne.n	80049c4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004998:	68fa      	ldr	r2, [r7, #12]
 800499a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800499e:	4013      	ands	r3, r2
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d10d      	bne.n	80049c4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d106      	bne.n	80049c4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d001      	beq.n	80049c8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e000      	b.n	80049ca <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3718      	adds	r7, #24
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop
 80049d4:	40007000 	.word	0x40007000
 80049d8:	40023800 	.word	0x40023800
 80049dc:	42470060 	.word	0x42470060

080049e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d101      	bne.n	80049f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e0cc      	b.n	8004b8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80049f4:	4b68      	ldr	r3, [pc, #416]	; (8004b98 <HAL_RCC_ClockConfig+0x1b8>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 030f 	and.w	r3, r3, #15
 80049fc:	683a      	ldr	r2, [r7, #0]
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d90c      	bls.n	8004a1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a02:	4b65      	ldr	r3, [pc, #404]	; (8004b98 <HAL_RCC_ClockConfig+0x1b8>)
 8004a04:	683a      	ldr	r2, [r7, #0]
 8004a06:	b2d2      	uxtb	r2, r2
 8004a08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a0a:	4b63      	ldr	r3, [pc, #396]	; (8004b98 <HAL_RCC_ClockConfig+0x1b8>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 030f 	and.w	r3, r3, #15
 8004a12:	683a      	ldr	r2, [r7, #0]
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d001      	beq.n	8004a1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e0b8      	b.n	8004b8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0302 	and.w	r3, r3, #2
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d020      	beq.n	8004a6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0304 	and.w	r3, r3, #4
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d005      	beq.n	8004a40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a34:	4b59      	ldr	r3, [pc, #356]	; (8004b9c <HAL_RCC_ClockConfig+0x1bc>)
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	4a58      	ldr	r2, [pc, #352]	; (8004b9c <HAL_RCC_ClockConfig+0x1bc>)
 8004a3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0308 	and.w	r3, r3, #8
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d005      	beq.n	8004a58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a4c:	4b53      	ldr	r3, [pc, #332]	; (8004b9c <HAL_RCC_ClockConfig+0x1bc>)
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	4a52      	ldr	r2, [pc, #328]	; (8004b9c <HAL_RCC_ClockConfig+0x1bc>)
 8004a52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a58:	4b50      	ldr	r3, [pc, #320]	; (8004b9c <HAL_RCC_ClockConfig+0x1bc>)
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	494d      	ldr	r1, [pc, #308]	; (8004b9c <HAL_RCC_ClockConfig+0x1bc>)
 8004a66:	4313      	orrs	r3, r2
 8004a68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0301 	and.w	r3, r3, #1
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d044      	beq.n	8004b00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d107      	bne.n	8004a8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a7e:	4b47      	ldr	r3, [pc, #284]	; (8004b9c <HAL_RCC_ClockConfig+0x1bc>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d119      	bne.n	8004abe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e07f      	b.n	8004b8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	d003      	beq.n	8004a9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a9a:	2b03      	cmp	r3, #3
 8004a9c:	d107      	bne.n	8004aae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a9e:	4b3f      	ldr	r3, [pc, #252]	; (8004b9c <HAL_RCC_ClockConfig+0x1bc>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d109      	bne.n	8004abe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e06f      	b.n	8004b8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004aae:	4b3b      	ldr	r3, [pc, #236]	; (8004b9c <HAL_RCC_ClockConfig+0x1bc>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0302 	and.w	r3, r3, #2
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d101      	bne.n	8004abe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e067      	b.n	8004b8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004abe:	4b37      	ldr	r3, [pc, #220]	; (8004b9c <HAL_RCC_ClockConfig+0x1bc>)
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	f023 0203 	bic.w	r2, r3, #3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	4934      	ldr	r1, [pc, #208]	; (8004b9c <HAL_RCC_ClockConfig+0x1bc>)
 8004acc:	4313      	orrs	r3, r2
 8004ace:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ad0:	f7fe f8ec 	bl	8002cac <HAL_GetTick>
 8004ad4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ad6:	e00a      	b.n	8004aee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ad8:	f7fe f8e8 	bl	8002cac <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d901      	bls.n	8004aee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e04f      	b.n	8004b8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aee:	4b2b      	ldr	r3, [pc, #172]	; (8004b9c <HAL_RCC_ClockConfig+0x1bc>)
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	f003 020c 	and.w	r2, r3, #12
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d1eb      	bne.n	8004ad8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b00:	4b25      	ldr	r3, [pc, #148]	; (8004b98 <HAL_RCC_ClockConfig+0x1b8>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 030f 	and.w	r3, r3, #15
 8004b08:	683a      	ldr	r2, [r7, #0]
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d20c      	bcs.n	8004b28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b0e:	4b22      	ldr	r3, [pc, #136]	; (8004b98 <HAL_RCC_ClockConfig+0x1b8>)
 8004b10:	683a      	ldr	r2, [r7, #0]
 8004b12:	b2d2      	uxtb	r2, r2
 8004b14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b16:	4b20      	ldr	r3, [pc, #128]	; (8004b98 <HAL_RCC_ClockConfig+0x1b8>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 030f 	and.w	r3, r3, #15
 8004b1e:	683a      	ldr	r2, [r7, #0]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d001      	beq.n	8004b28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e032      	b.n	8004b8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0304 	and.w	r3, r3, #4
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d008      	beq.n	8004b46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b34:	4b19      	ldr	r3, [pc, #100]	; (8004b9c <HAL_RCC_ClockConfig+0x1bc>)
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	4916      	ldr	r1, [pc, #88]	; (8004b9c <HAL_RCC_ClockConfig+0x1bc>)
 8004b42:	4313      	orrs	r3, r2
 8004b44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 0308 	and.w	r3, r3, #8
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d009      	beq.n	8004b66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b52:	4b12      	ldr	r3, [pc, #72]	; (8004b9c <HAL_RCC_ClockConfig+0x1bc>)
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	00db      	lsls	r3, r3, #3
 8004b60:	490e      	ldr	r1, [pc, #56]	; (8004b9c <HAL_RCC_ClockConfig+0x1bc>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b66:	f000 f821 	bl	8004bac <HAL_RCC_GetSysClockFreq>
 8004b6a:	4601      	mov	r1, r0
 8004b6c:	4b0b      	ldr	r3, [pc, #44]	; (8004b9c <HAL_RCC_ClockConfig+0x1bc>)
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	091b      	lsrs	r3, r3, #4
 8004b72:	f003 030f 	and.w	r3, r3, #15
 8004b76:	4a0a      	ldr	r2, [pc, #40]	; (8004ba0 <HAL_RCC_ClockConfig+0x1c0>)
 8004b78:	5cd3      	ldrb	r3, [r2, r3]
 8004b7a:	fa21 f303 	lsr.w	r3, r1, r3
 8004b7e:	4a09      	ldr	r2, [pc, #36]	; (8004ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004b82:	4b09      	ldr	r3, [pc, #36]	; (8004ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4618      	mov	r0, r3
 8004b88:	f7fe f84c 	bl	8002c24 <HAL_InitTick>

  return HAL_OK;
 8004b8c:	2300      	movs	r3, #0
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3710      	adds	r7, #16
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	40023c00 	.word	0x40023c00
 8004b9c:	40023800 	.word	0x40023800
 8004ba0:	0800737c 	.word	0x0800737c
 8004ba4:	20000004 	.word	0x20000004
 8004ba8:	20000008 	.word	0x20000008

08004bac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bae:	b085      	sub	sp, #20
 8004bb0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	607b      	str	r3, [r7, #4]
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	60fb      	str	r3, [r7, #12]
 8004bba:	2300      	movs	r3, #0
 8004bbc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004bc2:	4b63      	ldr	r3, [pc, #396]	; (8004d50 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	f003 030c 	and.w	r3, r3, #12
 8004bca:	2b04      	cmp	r3, #4
 8004bcc:	d007      	beq.n	8004bde <HAL_RCC_GetSysClockFreq+0x32>
 8004bce:	2b08      	cmp	r3, #8
 8004bd0:	d008      	beq.n	8004be4 <HAL_RCC_GetSysClockFreq+0x38>
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	f040 80b4 	bne.w	8004d40 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004bd8:	4b5e      	ldr	r3, [pc, #376]	; (8004d54 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004bda:	60bb      	str	r3, [r7, #8]
       break;
 8004bdc:	e0b3      	b.n	8004d46 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004bde:	4b5e      	ldr	r3, [pc, #376]	; (8004d58 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004be0:	60bb      	str	r3, [r7, #8]
      break;
 8004be2:	e0b0      	b.n	8004d46 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004be4:	4b5a      	ldr	r3, [pc, #360]	; (8004d50 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bec:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004bee:	4b58      	ldr	r3, [pc, #352]	; (8004d50 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d04a      	beq.n	8004c90 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bfa:	4b55      	ldr	r3, [pc, #340]	; (8004d50 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	099b      	lsrs	r3, r3, #6
 8004c00:	f04f 0400 	mov.w	r4, #0
 8004c04:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004c08:	f04f 0200 	mov.w	r2, #0
 8004c0c:	ea03 0501 	and.w	r5, r3, r1
 8004c10:	ea04 0602 	and.w	r6, r4, r2
 8004c14:	4629      	mov	r1, r5
 8004c16:	4632      	mov	r2, r6
 8004c18:	f04f 0300 	mov.w	r3, #0
 8004c1c:	f04f 0400 	mov.w	r4, #0
 8004c20:	0154      	lsls	r4, r2, #5
 8004c22:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004c26:	014b      	lsls	r3, r1, #5
 8004c28:	4619      	mov	r1, r3
 8004c2a:	4622      	mov	r2, r4
 8004c2c:	1b49      	subs	r1, r1, r5
 8004c2e:	eb62 0206 	sbc.w	r2, r2, r6
 8004c32:	f04f 0300 	mov.w	r3, #0
 8004c36:	f04f 0400 	mov.w	r4, #0
 8004c3a:	0194      	lsls	r4, r2, #6
 8004c3c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004c40:	018b      	lsls	r3, r1, #6
 8004c42:	1a5b      	subs	r3, r3, r1
 8004c44:	eb64 0402 	sbc.w	r4, r4, r2
 8004c48:	f04f 0100 	mov.w	r1, #0
 8004c4c:	f04f 0200 	mov.w	r2, #0
 8004c50:	00e2      	lsls	r2, r4, #3
 8004c52:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004c56:	00d9      	lsls	r1, r3, #3
 8004c58:	460b      	mov	r3, r1
 8004c5a:	4614      	mov	r4, r2
 8004c5c:	195b      	adds	r3, r3, r5
 8004c5e:	eb44 0406 	adc.w	r4, r4, r6
 8004c62:	f04f 0100 	mov.w	r1, #0
 8004c66:	f04f 0200 	mov.w	r2, #0
 8004c6a:	0262      	lsls	r2, r4, #9
 8004c6c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004c70:	0259      	lsls	r1, r3, #9
 8004c72:	460b      	mov	r3, r1
 8004c74:	4614      	mov	r4, r2
 8004c76:	4618      	mov	r0, r3
 8004c78:	4621      	mov	r1, r4
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f04f 0400 	mov.w	r4, #0
 8004c80:	461a      	mov	r2, r3
 8004c82:	4623      	mov	r3, r4
 8004c84:	f7fb fed2 	bl	8000a2c <__aeabi_uldivmod>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	460c      	mov	r4, r1
 8004c8c:	60fb      	str	r3, [r7, #12]
 8004c8e:	e049      	b.n	8004d24 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c90:	4b2f      	ldr	r3, [pc, #188]	; (8004d50 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	099b      	lsrs	r3, r3, #6
 8004c96:	f04f 0400 	mov.w	r4, #0
 8004c9a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004c9e:	f04f 0200 	mov.w	r2, #0
 8004ca2:	ea03 0501 	and.w	r5, r3, r1
 8004ca6:	ea04 0602 	and.w	r6, r4, r2
 8004caa:	4629      	mov	r1, r5
 8004cac:	4632      	mov	r2, r6
 8004cae:	f04f 0300 	mov.w	r3, #0
 8004cb2:	f04f 0400 	mov.w	r4, #0
 8004cb6:	0154      	lsls	r4, r2, #5
 8004cb8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004cbc:	014b      	lsls	r3, r1, #5
 8004cbe:	4619      	mov	r1, r3
 8004cc0:	4622      	mov	r2, r4
 8004cc2:	1b49      	subs	r1, r1, r5
 8004cc4:	eb62 0206 	sbc.w	r2, r2, r6
 8004cc8:	f04f 0300 	mov.w	r3, #0
 8004ccc:	f04f 0400 	mov.w	r4, #0
 8004cd0:	0194      	lsls	r4, r2, #6
 8004cd2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004cd6:	018b      	lsls	r3, r1, #6
 8004cd8:	1a5b      	subs	r3, r3, r1
 8004cda:	eb64 0402 	sbc.w	r4, r4, r2
 8004cde:	f04f 0100 	mov.w	r1, #0
 8004ce2:	f04f 0200 	mov.w	r2, #0
 8004ce6:	00e2      	lsls	r2, r4, #3
 8004ce8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004cec:	00d9      	lsls	r1, r3, #3
 8004cee:	460b      	mov	r3, r1
 8004cf0:	4614      	mov	r4, r2
 8004cf2:	195b      	adds	r3, r3, r5
 8004cf4:	eb44 0406 	adc.w	r4, r4, r6
 8004cf8:	f04f 0100 	mov.w	r1, #0
 8004cfc:	f04f 0200 	mov.w	r2, #0
 8004d00:	02a2      	lsls	r2, r4, #10
 8004d02:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004d06:	0299      	lsls	r1, r3, #10
 8004d08:	460b      	mov	r3, r1
 8004d0a:	4614      	mov	r4, r2
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	4621      	mov	r1, r4
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f04f 0400 	mov.w	r4, #0
 8004d16:	461a      	mov	r2, r3
 8004d18:	4623      	mov	r3, r4
 8004d1a:	f7fb fe87 	bl	8000a2c <__aeabi_uldivmod>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	460c      	mov	r4, r1
 8004d22:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d24:	4b0a      	ldr	r3, [pc, #40]	; (8004d50 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	0c1b      	lsrs	r3, r3, #16
 8004d2a:	f003 0303 	and.w	r3, r3, #3
 8004d2e:	3301      	adds	r3, #1
 8004d30:	005b      	lsls	r3, r3, #1
 8004d32:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004d34:	68fa      	ldr	r2, [r7, #12]
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d3c:	60bb      	str	r3, [r7, #8]
      break;
 8004d3e:	e002      	b.n	8004d46 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d40:	4b04      	ldr	r3, [pc, #16]	; (8004d54 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004d42:	60bb      	str	r3, [r7, #8]
      break;
 8004d44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d46:	68bb      	ldr	r3, [r7, #8]
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3714      	adds	r7, #20
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d50:	40023800 	.word	0x40023800
 8004d54:	00f42400 	.word	0x00f42400
 8004d58:	007a1200 	.word	0x007a1200

08004d5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d60:	4b03      	ldr	r3, [pc, #12]	; (8004d70 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d62:	681b      	ldr	r3, [r3, #0]
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
 8004d6e:	bf00      	nop
 8004d70:	20000004 	.word	0x20000004

08004d74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004d78:	f7ff fff0 	bl	8004d5c <HAL_RCC_GetHCLKFreq>
 8004d7c:	4601      	mov	r1, r0
 8004d7e:	4b05      	ldr	r3, [pc, #20]	; (8004d94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	0a9b      	lsrs	r3, r3, #10
 8004d84:	f003 0307 	and.w	r3, r3, #7
 8004d88:	4a03      	ldr	r2, [pc, #12]	; (8004d98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d8a:	5cd3      	ldrb	r3, [r2, r3]
 8004d8c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	40023800 	.word	0x40023800
 8004d98:	0800738c 	.word	0x0800738c

08004d9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004da0:	f7ff ffdc 	bl	8004d5c <HAL_RCC_GetHCLKFreq>
 8004da4:	4601      	mov	r1, r0
 8004da6:	4b05      	ldr	r3, [pc, #20]	; (8004dbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	0b5b      	lsrs	r3, r3, #13
 8004dac:	f003 0307 	and.w	r3, r3, #7
 8004db0:	4a03      	ldr	r2, [pc, #12]	; (8004dc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004db2:	5cd3      	ldrb	r3, [r2, r3]
 8004db4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	bd80      	pop	{r7, pc}
 8004dbc:	40023800 	.word	0x40023800
 8004dc0:	0800738c 	.word	0x0800738c

08004dc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b082      	sub	sp, #8
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d101      	bne.n	8004dd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e01d      	b.n	8004e12 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d106      	bne.n	8004df0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f7fd fd00 	bl	80027f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2202      	movs	r2, #2
 8004df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	3304      	adds	r3, #4
 8004e00:	4619      	mov	r1, r3
 8004e02:	4610      	mov	r0, r2
 8004e04:	f000 fca2 	bl	800574c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e10:	2300      	movs	r3, #0
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3708      	adds	r7, #8
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}

08004e1a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004e1a:	b480      	push	{r7}
 8004e1c:	b085      	sub	sp, #20
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2202      	movs	r2, #2
 8004e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	f003 0307 	and.w	r3, r3, #7
 8004e34:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2b06      	cmp	r3, #6
 8004e3a:	d007      	beq.n	8004e4c <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f042 0201 	orr.w	r2, r2, #1
 8004e4a:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3714      	adds	r7, #20
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr

08004e62 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e62:	b480      	push	{r7}
 8004e64:	b085      	sub	sp, #20
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	68da      	ldr	r2, [r3, #12]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f042 0201 	orr.w	r2, r2, #1
 8004e78:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	f003 0307 	and.w	r3, r3, #7
 8004e84:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2b06      	cmp	r3, #6
 8004e8a:	d007      	beq.n	8004e9c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f042 0201 	orr.w	r2, r2, #1
 8004e9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e9c:	2300      	movs	r3, #0
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3714      	adds	r7, #20
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr

08004eaa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004eaa:	b580      	push	{r7, lr}
 8004eac:	b082      	sub	sp, #8
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d101      	bne.n	8004ebc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e01d      	b.n	8004ef8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d106      	bne.n	8004ed6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f000 f815 	bl	8004f00 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2202      	movs	r2, #2
 8004eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	3304      	adds	r3, #4
 8004ee6:	4619      	mov	r1, r3
 8004ee8:	4610      	mov	r0, r2
 8004eea:	f000 fc2f 	bl	800574c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ef6:	2300      	movs	r3, #0
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3708      	adds	r7, #8
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004f08:	bf00      	nop
 8004f0a:	370c      	adds	r7, #12
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	2201      	movs	r2, #1
 8004f24:	6839      	ldr	r1, [r7, #0]
 8004f26:	4618      	mov	r0, r3
 8004f28:	f001 f824 	bl	8005f74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a15      	ldr	r2, [pc, #84]	; (8004f88 <HAL_TIM_PWM_Start+0x74>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d004      	beq.n	8004f40 <HAL_TIM_PWM_Start+0x2c>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a14      	ldr	r2, [pc, #80]	; (8004f8c <HAL_TIM_PWM_Start+0x78>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d101      	bne.n	8004f44 <HAL_TIM_PWM_Start+0x30>
 8004f40:	2301      	movs	r3, #1
 8004f42:	e000      	b.n	8004f46 <HAL_TIM_PWM_Start+0x32>
 8004f44:	2300      	movs	r3, #0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d007      	beq.n	8004f5a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f58:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	f003 0307 	and.w	r3, r3, #7
 8004f64:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2b06      	cmp	r3, #6
 8004f6a:	d007      	beq.n	8004f7c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f042 0201 	orr.w	r2, r2, #1
 8004f7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f7c:	2300      	movs	r3, #0
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3710      	adds	r7, #16
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	bf00      	nop
 8004f88:	40010000 	.word	0x40010000
 8004f8c:	40010400 	.word	0x40010400

08004f90 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b082      	sub	sp, #8
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d101      	bne.n	8004fa2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e01d      	b.n	8004fde <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d106      	bne.n	8004fbc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 f815 	bl	8004fe6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2202      	movs	r2, #2
 8004fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	3304      	adds	r3, #4
 8004fcc:	4619      	mov	r1, r3
 8004fce:	4610      	mov	r0, r2
 8004fd0:	f000 fbbc 	bl	800574c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3708      	adds	r7, #8
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}

08004fe6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004fe6:	b480      	push	{r7}
 8004fe8:	b083      	sub	sp, #12
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004fee:	bf00      	nop
 8004ff0:	370c      	adds	r7, #12
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
	...

08004ffc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b084      	sub	sp, #16
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	2b0c      	cmp	r3, #12
 800500a:	d841      	bhi.n	8005090 <HAL_TIM_IC_Start_IT+0x94>
 800500c:	a201      	add	r2, pc, #4	; (adr r2, 8005014 <HAL_TIM_IC_Start_IT+0x18>)
 800500e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005012:	bf00      	nop
 8005014:	08005049 	.word	0x08005049
 8005018:	08005091 	.word	0x08005091
 800501c:	08005091 	.word	0x08005091
 8005020:	08005091 	.word	0x08005091
 8005024:	0800505b 	.word	0x0800505b
 8005028:	08005091 	.word	0x08005091
 800502c:	08005091 	.word	0x08005091
 8005030:	08005091 	.word	0x08005091
 8005034:	0800506d 	.word	0x0800506d
 8005038:	08005091 	.word	0x08005091
 800503c:	08005091 	.word	0x08005091
 8005040:	08005091 	.word	0x08005091
 8005044:	0800507f 	.word	0x0800507f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	68da      	ldr	r2, [r3, #12]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f042 0202 	orr.w	r2, r2, #2
 8005056:	60da      	str	r2, [r3, #12]
      break;
 8005058:	e01b      	b.n	8005092 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	68da      	ldr	r2, [r3, #12]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f042 0204 	orr.w	r2, r2, #4
 8005068:	60da      	str	r2, [r3, #12]
      break;
 800506a:	e012      	b.n	8005092 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	68da      	ldr	r2, [r3, #12]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f042 0208 	orr.w	r2, r2, #8
 800507a:	60da      	str	r2, [r3, #12]
      break;
 800507c:	e009      	b.n	8005092 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	68da      	ldr	r2, [r3, #12]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f042 0210 	orr.w	r2, r2, #16
 800508c:	60da      	str	r2, [r3, #12]
      break;
 800508e:	e000      	b.n	8005092 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8005090:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	2201      	movs	r2, #1
 8005098:	6839      	ldr	r1, [r7, #0]
 800509a:	4618      	mov	r0, r3
 800509c:	f000 ff6a 	bl	8005f74 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	f003 0307 	and.w	r3, r3, #7
 80050aa:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2b06      	cmp	r3, #6
 80050b0:	d007      	beq.n	80050c2 <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f042 0201 	orr.w	r2, r2, #1
 80050c0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050c2:	2300      	movs	r3, #0
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3710      	adds	r7, #16
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b082      	sub	sp, #8
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	691b      	ldr	r3, [r3, #16]
 80050da:	f003 0302 	and.w	r3, r3, #2
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d122      	bne.n	8005128 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	f003 0302 	and.w	r3, r3, #2
 80050ec:	2b02      	cmp	r3, #2
 80050ee:	d11b      	bne.n	8005128 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f06f 0202 	mvn.w	r2, #2
 80050f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2201      	movs	r2, #1
 80050fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	699b      	ldr	r3, [r3, #24]
 8005106:	f003 0303 	and.w	r3, r3, #3
 800510a:	2b00      	cmp	r3, #0
 800510c:	d003      	beq.n	8005116 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f7fc f916 	bl	8001340 <HAL_TIM_IC_CaptureCallback>
 8005114:	e005      	b.n	8005122 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f000 faf9 	bl	800570e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f000 fb00 	bl	8005722 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	f003 0304 	and.w	r3, r3, #4
 8005132:	2b04      	cmp	r3, #4
 8005134:	d122      	bne.n	800517c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	f003 0304 	and.w	r3, r3, #4
 8005140:	2b04      	cmp	r3, #4
 8005142:	d11b      	bne.n	800517c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f06f 0204 	mvn.w	r2, #4
 800514c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2202      	movs	r2, #2
 8005152:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	699b      	ldr	r3, [r3, #24]
 800515a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800515e:	2b00      	cmp	r3, #0
 8005160:	d003      	beq.n	800516a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f7fc f8ec 	bl	8001340 <HAL_TIM_IC_CaptureCallback>
 8005168:	e005      	b.n	8005176 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f000 facf 	bl	800570e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f000 fad6 	bl	8005722 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	691b      	ldr	r3, [r3, #16]
 8005182:	f003 0308 	and.w	r3, r3, #8
 8005186:	2b08      	cmp	r3, #8
 8005188:	d122      	bne.n	80051d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	f003 0308 	and.w	r3, r3, #8
 8005194:	2b08      	cmp	r3, #8
 8005196:	d11b      	bne.n	80051d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f06f 0208 	mvn.w	r2, #8
 80051a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2204      	movs	r2, #4
 80051a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	69db      	ldr	r3, [r3, #28]
 80051ae:	f003 0303 	and.w	r3, r3, #3
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d003      	beq.n	80051be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f7fc f8c2 	bl	8001340 <HAL_TIM_IC_CaptureCallback>
 80051bc:	e005      	b.n	80051ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f000 faa5 	bl	800570e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f000 faac 	bl	8005722 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	f003 0310 	and.w	r3, r3, #16
 80051da:	2b10      	cmp	r3, #16
 80051dc:	d122      	bne.n	8005224 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	f003 0310 	and.w	r3, r3, #16
 80051e8:	2b10      	cmp	r3, #16
 80051ea:	d11b      	bne.n	8005224 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f06f 0210 	mvn.w	r2, #16
 80051f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2208      	movs	r2, #8
 80051fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	69db      	ldr	r3, [r3, #28]
 8005202:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005206:	2b00      	cmp	r3, #0
 8005208:	d003      	beq.n	8005212 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f7fc f898 	bl	8001340 <HAL_TIM_IC_CaptureCallback>
 8005210:	e005      	b.n	800521e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f000 fa7b 	bl	800570e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f000 fa82 	bl	8005722 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	f003 0301 	and.w	r3, r3, #1
 800522e:	2b01      	cmp	r3, #1
 8005230:	d10e      	bne.n	8005250 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	f003 0301 	and.w	r3, r3, #1
 800523c:	2b01      	cmp	r3, #1
 800523e:	d107      	bne.n	8005250 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f06f 0201 	mvn.w	r2, #1
 8005248:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f7fc f85e 	bl	800130c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800525a:	2b80      	cmp	r3, #128	; 0x80
 800525c:	d10e      	bne.n	800527c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005268:	2b80      	cmp	r3, #128	; 0x80
 800526a:	d107      	bne.n	800527c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005274:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 ff28 	bl	80060cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005286:	2b40      	cmp	r3, #64	; 0x40
 8005288:	d10e      	bne.n	80052a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005294:	2b40      	cmp	r3, #64	; 0x40
 8005296:	d107      	bne.n	80052a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80052a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f000 fa47 	bl	8005736 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	691b      	ldr	r3, [r3, #16]
 80052ae:	f003 0320 	and.w	r3, r3, #32
 80052b2:	2b20      	cmp	r3, #32
 80052b4:	d10e      	bne.n	80052d4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	f003 0320 	and.w	r3, r3, #32
 80052c0:	2b20      	cmp	r3, #32
 80052c2:	d107      	bne.n	80052d4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f06f 0220 	mvn.w	r2, #32
 80052cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 fef2 	bl	80060b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052d4:	bf00      	nop
 80052d6:	3708      	adds	r7, #8
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}

080052dc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	60f8      	str	r0, [r7, #12]
 80052e4:	60b9      	str	r1, [r7, #8]
 80052e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d101      	bne.n	80052f6 <HAL_TIM_IC_ConfigChannel+0x1a>
 80052f2:	2302      	movs	r3, #2
 80052f4:	e08a      	b.n	800540c <HAL_TIM_IC_ConfigChannel+0x130>
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2201      	movs	r2, #1
 80052fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2202      	movs	r2, #2
 8005302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d11b      	bne.n	8005344 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6818      	ldr	r0, [r3, #0]
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	6819      	ldr	r1, [r3, #0]
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	685a      	ldr	r2, [r3, #4]
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	f000 fc66 	bl	8005bec <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	699a      	ldr	r2, [r3, #24]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f022 020c 	bic.w	r2, r2, #12
 800532e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	6999      	ldr	r1, [r3, #24]
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	689a      	ldr	r2, [r3, #8]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	430a      	orrs	r2, r1
 8005340:	619a      	str	r2, [r3, #24]
 8005342:	e05a      	b.n	80053fa <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2b04      	cmp	r3, #4
 8005348:	d11c      	bne.n	8005384 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	6818      	ldr	r0, [r3, #0]
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	6819      	ldr	r1, [r3, #0]
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	685a      	ldr	r2, [r3, #4]
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	f000 fcea 	bl	8005d32 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	699a      	ldr	r2, [r3, #24]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800536c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	6999      	ldr	r1, [r3, #24]
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	021a      	lsls	r2, r3, #8
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	430a      	orrs	r2, r1
 8005380:	619a      	str	r2, [r3, #24]
 8005382:	e03a      	b.n	80053fa <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2b08      	cmp	r3, #8
 8005388:	d11b      	bne.n	80053c2 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	6818      	ldr	r0, [r3, #0]
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	6819      	ldr	r1, [r3, #0]
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	685a      	ldr	r2, [r3, #4]
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	f000 fd37 	bl	8005e0c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	69da      	ldr	r2, [r3, #28]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f022 020c 	bic.w	r2, r2, #12
 80053ac:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	69d9      	ldr	r1, [r3, #28]
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	689a      	ldr	r2, [r3, #8]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	430a      	orrs	r2, r1
 80053be:	61da      	str	r2, [r3, #28]
 80053c0:	e01b      	b.n	80053fa <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	6818      	ldr	r0, [r3, #0]
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	6819      	ldr	r1, [r3, #0]
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	685a      	ldr	r2, [r3, #4]
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	f000 fd57 	bl	8005e84 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	69da      	ldr	r2, [r3, #28]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80053e4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	69d9      	ldr	r1, [r3, #28]
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	021a      	lsls	r2, r3, #8
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	430a      	orrs	r2, r1
 80053f8:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2201      	movs	r2, #1
 80053fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2200      	movs	r2, #0
 8005406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800540a:	2300      	movs	r3, #0
}
 800540c:	4618      	mov	r0, r3
 800540e:	3710      	adds	r7, #16
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}

08005414 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b084      	sub	sp, #16
 8005418:	af00      	add	r7, sp, #0
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	60b9      	str	r1, [r7, #8]
 800541e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005426:	2b01      	cmp	r3, #1
 8005428:	d101      	bne.n	800542e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800542a:	2302      	movs	r3, #2
 800542c:	e0b4      	b.n	8005598 <HAL_TIM_PWM_ConfigChannel+0x184>
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2201      	movs	r2, #1
 8005432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2202      	movs	r2, #2
 800543a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2b0c      	cmp	r3, #12
 8005442:	f200 809f 	bhi.w	8005584 <HAL_TIM_PWM_ConfigChannel+0x170>
 8005446:	a201      	add	r2, pc, #4	; (adr r2, 800544c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800544c:	08005481 	.word	0x08005481
 8005450:	08005585 	.word	0x08005585
 8005454:	08005585 	.word	0x08005585
 8005458:	08005585 	.word	0x08005585
 800545c:	080054c1 	.word	0x080054c1
 8005460:	08005585 	.word	0x08005585
 8005464:	08005585 	.word	0x08005585
 8005468:	08005585 	.word	0x08005585
 800546c:	08005503 	.word	0x08005503
 8005470:	08005585 	.word	0x08005585
 8005474:	08005585 	.word	0x08005585
 8005478:	08005585 	.word	0x08005585
 800547c:	08005543 	.word	0x08005543
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	68b9      	ldr	r1, [r7, #8]
 8005486:	4618      	mov	r0, r3
 8005488:	f000 fa00 	bl	800588c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	699a      	ldr	r2, [r3, #24]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f042 0208 	orr.w	r2, r2, #8
 800549a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	699a      	ldr	r2, [r3, #24]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f022 0204 	bic.w	r2, r2, #4
 80054aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	6999      	ldr	r1, [r3, #24]
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	691a      	ldr	r2, [r3, #16]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	430a      	orrs	r2, r1
 80054bc:	619a      	str	r2, [r3, #24]
      break;
 80054be:	e062      	b.n	8005586 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	68b9      	ldr	r1, [r7, #8]
 80054c6:	4618      	mov	r0, r3
 80054c8:	f000 fa50 	bl	800596c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	699a      	ldr	r2, [r3, #24]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	699a      	ldr	r2, [r3, #24]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	6999      	ldr	r1, [r3, #24]
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	021a      	lsls	r2, r3, #8
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	430a      	orrs	r2, r1
 80054fe:	619a      	str	r2, [r3, #24]
      break;
 8005500:	e041      	b.n	8005586 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	68b9      	ldr	r1, [r7, #8]
 8005508:	4618      	mov	r0, r3
 800550a:	f000 faa5 	bl	8005a58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	69da      	ldr	r2, [r3, #28]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f042 0208 	orr.w	r2, r2, #8
 800551c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	69da      	ldr	r2, [r3, #28]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f022 0204 	bic.w	r2, r2, #4
 800552c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	69d9      	ldr	r1, [r3, #28]
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	691a      	ldr	r2, [r3, #16]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	430a      	orrs	r2, r1
 800553e:	61da      	str	r2, [r3, #28]
      break;
 8005540:	e021      	b.n	8005586 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	68b9      	ldr	r1, [r7, #8]
 8005548:	4618      	mov	r0, r3
 800554a:	f000 faf9 	bl	8005b40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	69da      	ldr	r2, [r3, #28]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800555c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	69da      	ldr	r2, [r3, #28]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800556c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	69d9      	ldr	r1, [r3, #28]
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	691b      	ldr	r3, [r3, #16]
 8005578:	021a      	lsls	r2, r3, #8
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	430a      	orrs	r2, r1
 8005580:	61da      	str	r2, [r3, #28]
      break;
 8005582:	e000      	b.n	8005586 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005584:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2201      	movs	r2, #1
 800558a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2200      	movs	r2, #0
 8005592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005596:	2300      	movs	r3, #0
}
 8005598:	4618      	mov	r0, r3
 800559a:	3710      	adds	r7, #16
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}

080055a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b084      	sub	sp, #16
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d101      	bne.n	80055b8 <HAL_TIM_ConfigClockSource+0x18>
 80055b4:	2302      	movs	r3, #2
 80055b6:	e0a6      	b.n	8005706 <HAL_TIM_ConfigClockSource+0x166>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2202      	movs	r2, #2
 80055c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80055d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055de:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	68fa      	ldr	r2, [r7, #12]
 80055e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2b40      	cmp	r3, #64	; 0x40
 80055ee:	d067      	beq.n	80056c0 <HAL_TIM_ConfigClockSource+0x120>
 80055f0:	2b40      	cmp	r3, #64	; 0x40
 80055f2:	d80b      	bhi.n	800560c <HAL_TIM_ConfigClockSource+0x6c>
 80055f4:	2b10      	cmp	r3, #16
 80055f6:	d073      	beq.n	80056e0 <HAL_TIM_ConfigClockSource+0x140>
 80055f8:	2b10      	cmp	r3, #16
 80055fa:	d802      	bhi.n	8005602 <HAL_TIM_ConfigClockSource+0x62>
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d06f      	beq.n	80056e0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005600:	e078      	b.n	80056f4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005602:	2b20      	cmp	r3, #32
 8005604:	d06c      	beq.n	80056e0 <HAL_TIM_ConfigClockSource+0x140>
 8005606:	2b30      	cmp	r3, #48	; 0x30
 8005608:	d06a      	beq.n	80056e0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800560a:	e073      	b.n	80056f4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800560c:	2b70      	cmp	r3, #112	; 0x70
 800560e:	d00d      	beq.n	800562c <HAL_TIM_ConfigClockSource+0x8c>
 8005610:	2b70      	cmp	r3, #112	; 0x70
 8005612:	d804      	bhi.n	800561e <HAL_TIM_ConfigClockSource+0x7e>
 8005614:	2b50      	cmp	r3, #80	; 0x50
 8005616:	d033      	beq.n	8005680 <HAL_TIM_ConfigClockSource+0xe0>
 8005618:	2b60      	cmp	r3, #96	; 0x60
 800561a:	d041      	beq.n	80056a0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800561c:	e06a      	b.n	80056f4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800561e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005622:	d066      	beq.n	80056f2 <HAL_TIM_ConfigClockSource+0x152>
 8005624:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005628:	d017      	beq.n	800565a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800562a:	e063      	b.n	80056f4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6818      	ldr	r0, [r3, #0]
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	6899      	ldr	r1, [r3, #8]
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	685a      	ldr	r2, [r3, #4]
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	f000 fc7a 	bl	8005f34 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800564e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	68fa      	ldr	r2, [r7, #12]
 8005656:	609a      	str	r2, [r3, #8]
      break;
 8005658:	e04c      	b.n	80056f4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6818      	ldr	r0, [r3, #0]
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	6899      	ldr	r1, [r3, #8]
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	685a      	ldr	r2, [r3, #4]
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	f000 fc63 	bl	8005f34 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	689a      	ldr	r2, [r3, #8]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800567c:	609a      	str	r2, [r3, #8]
      break;
 800567e:	e039      	b.n	80056f4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6818      	ldr	r0, [r3, #0]
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	6859      	ldr	r1, [r3, #4]
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	461a      	mov	r2, r3
 800568e:	f000 fb21 	bl	8005cd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	2150      	movs	r1, #80	; 0x50
 8005698:	4618      	mov	r0, r3
 800569a:	f000 fc30 	bl	8005efe <TIM_ITRx_SetConfig>
      break;
 800569e:	e029      	b.n	80056f4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6818      	ldr	r0, [r3, #0]
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	6859      	ldr	r1, [r3, #4]
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	461a      	mov	r2, r3
 80056ae:	f000 fb7d 	bl	8005dac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	2160      	movs	r1, #96	; 0x60
 80056b8:	4618      	mov	r0, r3
 80056ba:	f000 fc20 	bl	8005efe <TIM_ITRx_SetConfig>
      break;
 80056be:	e019      	b.n	80056f4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6818      	ldr	r0, [r3, #0]
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	6859      	ldr	r1, [r3, #4]
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	461a      	mov	r2, r3
 80056ce:	f000 fb01 	bl	8005cd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	2140      	movs	r1, #64	; 0x40
 80056d8:	4618      	mov	r0, r3
 80056da:	f000 fc10 	bl	8005efe <TIM_ITRx_SetConfig>
      break;
 80056de:	e009      	b.n	80056f4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4619      	mov	r1, r3
 80056ea:	4610      	mov	r0, r2
 80056ec:	f000 fc07 	bl	8005efe <TIM_ITRx_SetConfig>
      break;
 80056f0:	e000      	b.n	80056f4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80056f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005704:	2300      	movs	r3, #0
}
 8005706:	4618      	mov	r0, r3
 8005708:	3710      	adds	r7, #16
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}

0800570e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800570e:	b480      	push	{r7}
 8005710:	b083      	sub	sp, #12
 8005712:	af00      	add	r7, sp, #0
 8005714:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005716:	bf00      	nop
 8005718:	370c      	adds	r7, #12
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr

08005722 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005722:	b480      	push	{r7}
 8005724:	b083      	sub	sp, #12
 8005726:	af00      	add	r7, sp, #0
 8005728:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800572a:	bf00      	nop
 800572c:	370c      	adds	r7, #12
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr

08005736 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005736:	b480      	push	{r7}
 8005738:	b083      	sub	sp, #12
 800573a:	af00      	add	r7, sp, #0
 800573c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800573e:	bf00      	nop
 8005740:	370c      	adds	r7, #12
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr
	...

0800574c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800574c:	b480      	push	{r7}
 800574e:	b085      	sub	sp, #20
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	4a40      	ldr	r2, [pc, #256]	; (8005860 <TIM_Base_SetConfig+0x114>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d013      	beq.n	800578c <TIM_Base_SetConfig+0x40>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800576a:	d00f      	beq.n	800578c <TIM_Base_SetConfig+0x40>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	4a3d      	ldr	r2, [pc, #244]	; (8005864 <TIM_Base_SetConfig+0x118>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d00b      	beq.n	800578c <TIM_Base_SetConfig+0x40>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	4a3c      	ldr	r2, [pc, #240]	; (8005868 <TIM_Base_SetConfig+0x11c>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d007      	beq.n	800578c <TIM_Base_SetConfig+0x40>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	4a3b      	ldr	r2, [pc, #236]	; (800586c <TIM_Base_SetConfig+0x120>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d003      	beq.n	800578c <TIM_Base_SetConfig+0x40>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	4a3a      	ldr	r2, [pc, #232]	; (8005870 <TIM_Base_SetConfig+0x124>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d108      	bne.n	800579e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005792:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	68fa      	ldr	r2, [r7, #12]
 800579a:	4313      	orrs	r3, r2
 800579c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a2f      	ldr	r2, [pc, #188]	; (8005860 <TIM_Base_SetConfig+0x114>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d02b      	beq.n	80057fe <TIM_Base_SetConfig+0xb2>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057ac:	d027      	beq.n	80057fe <TIM_Base_SetConfig+0xb2>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4a2c      	ldr	r2, [pc, #176]	; (8005864 <TIM_Base_SetConfig+0x118>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d023      	beq.n	80057fe <TIM_Base_SetConfig+0xb2>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4a2b      	ldr	r2, [pc, #172]	; (8005868 <TIM_Base_SetConfig+0x11c>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d01f      	beq.n	80057fe <TIM_Base_SetConfig+0xb2>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4a2a      	ldr	r2, [pc, #168]	; (800586c <TIM_Base_SetConfig+0x120>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d01b      	beq.n	80057fe <TIM_Base_SetConfig+0xb2>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4a29      	ldr	r2, [pc, #164]	; (8005870 <TIM_Base_SetConfig+0x124>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d017      	beq.n	80057fe <TIM_Base_SetConfig+0xb2>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4a28      	ldr	r2, [pc, #160]	; (8005874 <TIM_Base_SetConfig+0x128>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d013      	beq.n	80057fe <TIM_Base_SetConfig+0xb2>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	4a27      	ldr	r2, [pc, #156]	; (8005878 <TIM_Base_SetConfig+0x12c>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d00f      	beq.n	80057fe <TIM_Base_SetConfig+0xb2>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4a26      	ldr	r2, [pc, #152]	; (800587c <TIM_Base_SetConfig+0x130>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d00b      	beq.n	80057fe <TIM_Base_SetConfig+0xb2>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	4a25      	ldr	r2, [pc, #148]	; (8005880 <TIM_Base_SetConfig+0x134>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d007      	beq.n	80057fe <TIM_Base_SetConfig+0xb2>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4a24      	ldr	r2, [pc, #144]	; (8005884 <TIM_Base_SetConfig+0x138>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d003      	beq.n	80057fe <TIM_Base_SetConfig+0xb2>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4a23      	ldr	r2, [pc, #140]	; (8005888 <TIM_Base_SetConfig+0x13c>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d108      	bne.n	8005810 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005804:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	68fa      	ldr	r2, [r7, #12]
 800580c:	4313      	orrs	r3, r2
 800580e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	695b      	ldr	r3, [r3, #20]
 800581a:	4313      	orrs	r3, r2
 800581c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	689a      	ldr	r2, [r3, #8]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	4a0a      	ldr	r2, [pc, #40]	; (8005860 <TIM_Base_SetConfig+0x114>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d003      	beq.n	8005844 <TIM_Base_SetConfig+0xf8>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	4a0c      	ldr	r2, [pc, #48]	; (8005870 <TIM_Base_SetConfig+0x124>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d103      	bne.n	800584c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	691a      	ldr	r2, [r3, #16]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	615a      	str	r2, [r3, #20]
}
 8005852:	bf00      	nop
 8005854:	3714      	adds	r7, #20
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr
 800585e:	bf00      	nop
 8005860:	40010000 	.word	0x40010000
 8005864:	40000400 	.word	0x40000400
 8005868:	40000800 	.word	0x40000800
 800586c:	40000c00 	.word	0x40000c00
 8005870:	40010400 	.word	0x40010400
 8005874:	40014000 	.word	0x40014000
 8005878:	40014400 	.word	0x40014400
 800587c:	40014800 	.word	0x40014800
 8005880:	40001800 	.word	0x40001800
 8005884:	40001c00 	.word	0x40001c00
 8005888:	40002000 	.word	0x40002000

0800588c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800588c:	b480      	push	{r7}
 800588e:	b087      	sub	sp, #28
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a1b      	ldr	r3, [r3, #32]
 800589a:	f023 0201 	bic.w	r2, r3, #1
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a1b      	ldr	r3, [r3, #32]
 80058a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	699b      	ldr	r3, [r3, #24]
 80058b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f023 0303 	bic.w	r3, r3, #3
 80058c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	68fa      	ldr	r2, [r7, #12]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	f023 0302 	bic.w	r3, r3, #2
 80058d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	697a      	ldr	r2, [r7, #20]
 80058dc:	4313      	orrs	r3, r2
 80058de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a20      	ldr	r2, [pc, #128]	; (8005964 <TIM_OC1_SetConfig+0xd8>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d003      	beq.n	80058f0 <TIM_OC1_SetConfig+0x64>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4a1f      	ldr	r2, [pc, #124]	; (8005968 <TIM_OC1_SetConfig+0xdc>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d10c      	bne.n	800590a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	f023 0308 	bic.w	r3, r3, #8
 80058f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	697a      	ldr	r2, [r7, #20]
 80058fe:	4313      	orrs	r3, r2
 8005900:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	f023 0304 	bic.w	r3, r3, #4
 8005908:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a15      	ldr	r2, [pc, #84]	; (8005964 <TIM_OC1_SetConfig+0xd8>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d003      	beq.n	800591a <TIM_OC1_SetConfig+0x8e>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a14      	ldr	r2, [pc, #80]	; (8005968 <TIM_OC1_SetConfig+0xdc>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d111      	bne.n	800593e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005920:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005928:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	695b      	ldr	r3, [r3, #20]
 800592e:	693a      	ldr	r2, [r7, #16]
 8005930:	4313      	orrs	r3, r2
 8005932:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	699b      	ldr	r3, [r3, #24]
 8005938:	693a      	ldr	r2, [r7, #16]
 800593a:	4313      	orrs	r3, r2
 800593c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	693a      	ldr	r2, [r7, #16]
 8005942:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	68fa      	ldr	r2, [r7, #12]
 8005948:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	685a      	ldr	r2, [r3, #4]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	697a      	ldr	r2, [r7, #20]
 8005956:	621a      	str	r2, [r3, #32]
}
 8005958:	bf00      	nop
 800595a:	371c      	adds	r7, #28
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr
 8005964:	40010000 	.word	0x40010000
 8005968:	40010400 	.word	0x40010400

0800596c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800596c:	b480      	push	{r7}
 800596e:	b087      	sub	sp, #28
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a1b      	ldr	r3, [r3, #32]
 800597a:	f023 0210 	bic.w	r2, r3, #16
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a1b      	ldr	r3, [r3, #32]
 8005986:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	699b      	ldr	r3, [r3, #24]
 8005992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800599a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	021b      	lsls	r3, r3, #8
 80059aa:	68fa      	ldr	r2, [r7, #12]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	f023 0320 	bic.w	r3, r3, #32
 80059b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	011b      	lsls	r3, r3, #4
 80059be:	697a      	ldr	r2, [r7, #20]
 80059c0:	4313      	orrs	r3, r2
 80059c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	4a22      	ldr	r2, [pc, #136]	; (8005a50 <TIM_OC2_SetConfig+0xe4>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d003      	beq.n	80059d4 <TIM_OC2_SetConfig+0x68>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	4a21      	ldr	r2, [pc, #132]	; (8005a54 <TIM_OC2_SetConfig+0xe8>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d10d      	bne.n	80059f0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	011b      	lsls	r3, r3, #4
 80059e2:	697a      	ldr	r2, [r7, #20]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	4a17      	ldr	r2, [pc, #92]	; (8005a50 <TIM_OC2_SetConfig+0xe4>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d003      	beq.n	8005a00 <TIM_OC2_SetConfig+0x94>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	4a16      	ldr	r2, [pc, #88]	; (8005a54 <TIM_OC2_SetConfig+0xe8>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d113      	bne.n	8005a28 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	695b      	ldr	r3, [r3, #20]
 8005a14:	009b      	lsls	r3, r3, #2
 8005a16:	693a      	ldr	r2, [r7, #16]
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	699b      	ldr	r3, [r3, #24]
 8005a20:	009b      	lsls	r3, r3, #2
 8005a22:	693a      	ldr	r2, [r7, #16]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	693a      	ldr	r2, [r7, #16]
 8005a2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	68fa      	ldr	r2, [r7, #12]
 8005a32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	685a      	ldr	r2, [r3, #4]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	697a      	ldr	r2, [r7, #20]
 8005a40:	621a      	str	r2, [r3, #32]
}
 8005a42:	bf00      	nop
 8005a44:	371c      	adds	r7, #28
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr
 8005a4e:	bf00      	nop
 8005a50:	40010000 	.word	0x40010000
 8005a54:	40010400 	.word	0x40010400

08005a58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b087      	sub	sp, #28
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6a1b      	ldr	r3, [r3, #32]
 8005a66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a1b      	ldr	r3, [r3, #32]
 8005a72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	69db      	ldr	r3, [r3, #28]
 8005a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f023 0303 	bic.w	r3, r3, #3
 8005a8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005aa0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	021b      	lsls	r3, r3, #8
 8005aa8:	697a      	ldr	r2, [r7, #20]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4a21      	ldr	r2, [pc, #132]	; (8005b38 <TIM_OC3_SetConfig+0xe0>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d003      	beq.n	8005abe <TIM_OC3_SetConfig+0x66>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4a20      	ldr	r2, [pc, #128]	; (8005b3c <TIM_OC3_SetConfig+0xe4>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d10d      	bne.n	8005ada <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ac4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	68db      	ldr	r3, [r3, #12]
 8005aca:	021b      	lsls	r3, r3, #8
 8005acc:	697a      	ldr	r2, [r7, #20]
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ad8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	4a16      	ldr	r2, [pc, #88]	; (8005b38 <TIM_OC3_SetConfig+0xe0>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d003      	beq.n	8005aea <TIM_OC3_SetConfig+0x92>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	4a15      	ldr	r2, [pc, #84]	; (8005b3c <TIM_OC3_SetConfig+0xe4>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d113      	bne.n	8005b12 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005af0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005af8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	695b      	ldr	r3, [r3, #20]
 8005afe:	011b      	lsls	r3, r3, #4
 8005b00:	693a      	ldr	r2, [r7, #16]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	699b      	ldr	r3, [r3, #24]
 8005b0a:	011b      	lsls	r3, r3, #4
 8005b0c:	693a      	ldr	r2, [r7, #16]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	693a      	ldr	r2, [r7, #16]
 8005b16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	68fa      	ldr	r2, [r7, #12]
 8005b1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	685a      	ldr	r2, [r3, #4]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	697a      	ldr	r2, [r7, #20]
 8005b2a:	621a      	str	r2, [r3, #32]
}
 8005b2c:	bf00      	nop
 8005b2e:	371c      	adds	r7, #28
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr
 8005b38:	40010000 	.word	0x40010000
 8005b3c:	40010400 	.word	0x40010400

08005b40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b087      	sub	sp, #28
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6a1b      	ldr	r3, [r3, #32]
 8005b4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a1b      	ldr	r3, [r3, #32]
 8005b5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	69db      	ldr	r3, [r3, #28]
 8005b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	021b      	lsls	r3, r3, #8
 8005b7e:	68fa      	ldr	r2, [r7, #12]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	031b      	lsls	r3, r3, #12
 8005b92:	693a      	ldr	r2, [r7, #16]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4a12      	ldr	r2, [pc, #72]	; (8005be4 <TIM_OC4_SetConfig+0xa4>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d003      	beq.n	8005ba8 <TIM_OC4_SetConfig+0x68>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	4a11      	ldr	r2, [pc, #68]	; (8005be8 <TIM_OC4_SetConfig+0xa8>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d109      	bne.n	8005bbc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	695b      	ldr	r3, [r3, #20]
 8005bb4:	019b      	lsls	r3, r3, #6
 8005bb6:	697a      	ldr	r2, [r7, #20]
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	697a      	ldr	r2, [r7, #20]
 8005bc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	68fa      	ldr	r2, [r7, #12]
 8005bc6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	685a      	ldr	r2, [r3, #4]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	693a      	ldr	r2, [r7, #16]
 8005bd4:	621a      	str	r2, [r3, #32]
}
 8005bd6:	bf00      	nop
 8005bd8:	371c      	adds	r7, #28
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr
 8005be2:	bf00      	nop
 8005be4:	40010000 	.word	0x40010000
 8005be8:	40010400 	.word	0x40010400

08005bec <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b087      	sub	sp, #28
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	60f8      	str	r0, [r7, #12]
 8005bf4:	60b9      	str	r1, [r7, #8]
 8005bf6:	607a      	str	r2, [r7, #4]
 8005bf8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	6a1b      	ldr	r3, [r3, #32]
 8005bfe:	f023 0201 	bic.w	r2, r3, #1
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	699b      	ldr	r3, [r3, #24]
 8005c0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	6a1b      	ldr	r3, [r3, #32]
 8005c10:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	4a28      	ldr	r2, [pc, #160]	; (8005cb8 <TIM_TI1_SetConfig+0xcc>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d01b      	beq.n	8005c52 <TIM_TI1_SetConfig+0x66>
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c20:	d017      	beq.n	8005c52 <TIM_TI1_SetConfig+0x66>
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	4a25      	ldr	r2, [pc, #148]	; (8005cbc <TIM_TI1_SetConfig+0xd0>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d013      	beq.n	8005c52 <TIM_TI1_SetConfig+0x66>
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	4a24      	ldr	r2, [pc, #144]	; (8005cc0 <TIM_TI1_SetConfig+0xd4>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d00f      	beq.n	8005c52 <TIM_TI1_SetConfig+0x66>
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	4a23      	ldr	r2, [pc, #140]	; (8005cc4 <TIM_TI1_SetConfig+0xd8>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d00b      	beq.n	8005c52 <TIM_TI1_SetConfig+0x66>
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	4a22      	ldr	r2, [pc, #136]	; (8005cc8 <TIM_TI1_SetConfig+0xdc>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d007      	beq.n	8005c52 <TIM_TI1_SetConfig+0x66>
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	4a21      	ldr	r2, [pc, #132]	; (8005ccc <TIM_TI1_SetConfig+0xe0>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d003      	beq.n	8005c52 <TIM_TI1_SetConfig+0x66>
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	4a20      	ldr	r2, [pc, #128]	; (8005cd0 <TIM_TI1_SetConfig+0xe4>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d101      	bne.n	8005c56 <TIM_TI1_SetConfig+0x6a>
 8005c52:	2301      	movs	r3, #1
 8005c54:	e000      	b.n	8005c58 <TIM_TI1_SetConfig+0x6c>
 8005c56:	2300      	movs	r3, #0
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d008      	beq.n	8005c6e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	f023 0303 	bic.w	r3, r3, #3
 8005c62:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005c64:	697a      	ldr	r2, [r7, #20]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	617b      	str	r3, [r7, #20]
 8005c6c:	e003      	b.n	8005c76 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	f043 0301 	orr.w	r3, r3, #1
 8005c74:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c7c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	011b      	lsls	r3, r3, #4
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	697a      	ldr	r2, [r7, #20]
 8005c86:	4313      	orrs	r3, r2
 8005c88:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	f023 030a 	bic.w	r3, r3, #10
 8005c90:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	f003 030a 	and.w	r3, r3, #10
 8005c98:	693a      	ldr	r2, [r7, #16]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	697a      	ldr	r2, [r7, #20]
 8005ca2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	693a      	ldr	r2, [r7, #16]
 8005ca8:	621a      	str	r2, [r3, #32]
}
 8005caa:	bf00      	nop
 8005cac:	371c      	adds	r7, #28
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb4:	4770      	bx	lr
 8005cb6:	bf00      	nop
 8005cb8:	40010000 	.word	0x40010000
 8005cbc:	40000400 	.word	0x40000400
 8005cc0:	40000800 	.word	0x40000800
 8005cc4:	40000c00 	.word	0x40000c00
 8005cc8:	40010400 	.word	0x40010400
 8005ccc:	40014000 	.word	0x40014000
 8005cd0:	40001800 	.word	0x40001800

08005cd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b087      	sub	sp, #28
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	60f8      	str	r0, [r7, #12]
 8005cdc:	60b9      	str	r1, [r7, #8]
 8005cde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	6a1b      	ldr	r3, [r3, #32]
 8005ce4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	6a1b      	ldr	r3, [r3, #32]
 8005cea:	f023 0201 	bic.w	r2, r3, #1
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	699b      	ldr	r3, [r3, #24]
 8005cf6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005cfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	011b      	lsls	r3, r3, #4
 8005d04:	693a      	ldr	r2, [r7, #16]
 8005d06:	4313      	orrs	r3, r2
 8005d08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	f023 030a 	bic.w	r3, r3, #10
 8005d10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d12:	697a      	ldr	r2, [r7, #20]
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	4313      	orrs	r3, r2
 8005d18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	693a      	ldr	r2, [r7, #16]
 8005d1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	697a      	ldr	r2, [r7, #20]
 8005d24:	621a      	str	r2, [r3, #32]
}
 8005d26:	bf00      	nop
 8005d28:	371c      	adds	r7, #28
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr

08005d32 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005d32:	b480      	push	{r7}
 8005d34:	b087      	sub	sp, #28
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	60f8      	str	r0, [r7, #12]
 8005d3a:	60b9      	str	r1, [r7, #8]
 8005d3c:	607a      	str	r2, [r7, #4]
 8005d3e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	6a1b      	ldr	r3, [r3, #32]
 8005d44:	f023 0210 	bic.w	r2, r3, #16
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	699b      	ldr	r3, [r3, #24]
 8005d50:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	6a1b      	ldr	r3, [r3, #32]
 8005d56:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d5e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	021b      	lsls	r3, r3, #8
 8005d64:	697a      	ldr	r2, [r7, #20]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d70:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	031b      	lsls	r3, r3, #12
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	697a      	ldr	r2, [r7, #20]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d84:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	011b      	lsls	r3, r3, #4
 8005d8a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005d8e:	693a      	ldr	r2, [r7, #16]
 8005d90:	4313      	orrs	r3, r2
 8005d92:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	697a      	ldr	r2, [r7, #20]
 8005d98:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	693a      	ldr	r2, [r7, #16]
 8005d9e:	621a      	str	r2, [r3, #32]
}
 8005da0:	bf00      	nop
 8005da2:	371c      	adds	r7, #28
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr

08005dac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b087      	sub	sp, #28
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	60f8      	str	r0, [r7, #12]
 8005db4:	60b9      	str	r1, [r7, #8]
 8005db6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6a1b      	ldr	r3, [r3, #32]
 8005dbc:	f023 0210 	bic.w	r2, r3, #16
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	699b      	ldr	r3, [r3, #24]
 8005dc8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	6a1b      	ldr	r3, [r3, #32]
 8005dce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005dd6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	031b      	lsls	r3, r3, #12
 8005ddc:	697a      	ldr	r2, [r7, #20]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005de8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	011b      	lsls	r3, r3, #4
 8005dee:	693a      	ldr	r2, [r7, #16]
 8005df0:	4313      	orrs	r3, r2
 8005df2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	697a      	ldr	r2, [r7, #20]
 8005df8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	693a      	ldr	r2, [r7, #16]
 8005dfe:	621a      	str	r2, [r3, #32]
}
 8005e00:	bf00      	nop
 8005e02:	371c      	adds	r7, #28
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr

08005e0c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b087      	sub	sp, #28
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	60f8      	str	r0, [r7, #12]
 8005e14:	60b9      	str	r1, [r7, #8]
 8005e16:	607a      	str	r2, [r7, #4]
 8005e18:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	6a1b      	ldr	r3, [r3, #32]
 8005e1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	69db      	ldr	r3, [r3, #28]
 8005e2a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6a1b      	ldr	r3, [r3, #32]
 8005e30:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	f023 0303 	bic.w	r3, r3, #3
 8005e38:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005e3a:	697a      	ldr	r2, [r7, #20]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e48:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	011b      	lsls	r3, r3, #4
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	697a      	ldr	r2, [r7, #20]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005e5c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	021b      	lsls	r3, r3, #8
 8005e62:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005e66:	693a      	ldr	r2, [r7, #16]
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	697a      	ldr	r2, [r7, #20]
 8005e70:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	693a      	ldr	r2, [r7, #16]
 8005e76:	621a      	str	r2, [r3, #32]
}
 8005e78:	bf00      	nop
 8005e7a:	371c      	adds	r7, #28
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b087      	sub	sp, #28
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	60f8      	str	r0, [r7, #12]
 8005e8c:	60b9      	str	r1, [r7, #8]
 8005e8e:	607a      	str	r2, [r7, #4]
 8005e90:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	6a1b      	ldr	r3, [r3, #32]
 8005e96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	69db      	ldr	r3, [r3, #28]
 8005ea2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	6a1b      	ldr	r3, [r3, #32]
 8005ea8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005eb0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	021b      	lsls	r3, r3, #8
 8005eb6:	697a      	ldr	r2, [r7, #20]
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ec2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	031b      	lsls	r3, r3, #12
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	697a      	ldr	r2, [r7, #20]
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005ed6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	031b      	lsls	r3, r3, #12
 8005edc:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005ee0:	693a      	ldr	r2, [r7, #16]
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	697a      	ldr	r2, [r7, #20]
 8005eea:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	693a      	ldr	r2, [r7, #16]
 8005ef0:	621a      	str	r2, [r3, #32]
}
 8005ef2:	bf00      	nop
 8005ef4:	371c      	adds	r7, #28
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr

08005efe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005efe:	b480      	push	{r7}
 8005f00:	b085      	sub	sp, #20
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	6078      	str	r0, [r7, #4]
 8005f06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f16:	683a      	ldr	r2, [r7, #0]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	f043 0307 	orr.w	r3, r3, #7
 8005f20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	68fa      	ldr	r2, [r7, #12]
 8005f26:	609a      	str	r2, [r3, #8]
}
 8005f28:	bf00      	nop
 8005f2a:	3714      	adds	r7, #20
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr

08005f34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b087      	sub	sp, #28
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	60f8      	str	r0, [r7, #12]
 8005f3c:	60b9      	str	r1, [r7, #8]
 8005f3e:	607a      	str	r2, [r7, #4]
 8005f40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	021a      	lsls	r2, r3, #8
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	431a      	orrs	r2, r3
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	697a      	ldr	r2, [r7, #20]
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	697a      	ldr	r2, [r7, #20]
 8005f66:	609a      	str	r2, [r3, #8]
}
 8005f68:	bf00      	nop
 8005f6a:	371c      	adds	r7, #28
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b087      	sub	sp, #28
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	60f8      	str	r0, [r7, #12]
 8005f7c:	60b9      	str	r1, [r7, #8]
 8005f7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	f003 031f 	and.w	r3, r3, #31
 8005f86:	2201      	movs	r2, #1
 8005f88:	fa02 f303 	lsl.w	r3, r2, r3
 8005f8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	6a1a      	ldr	r2, [r3, #32]
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	43db      	mvns	r3, r3
 8005f96:	401a      	ands	r2, r3
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6a1a      	ldr	r2, [r3, #32]
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	f003 031f 	and.w	r3, r3, #31
 8005fa6:	6879      	ldr	r1, [r7, #4]
 8005fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8005fac:	431a      	orrs	r2, r3
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	621a      	str	r2, [r3, #32]
}
 8005fb2:	bf00      	nop
 8005fb4:	371c      	adds	r7, #28
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr
	...

08005fc0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b085      	sub	sp, #20
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d101      	bne.n	8005fd8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005fd4:	2302      	movs	r3, #2
 8005fd6:	e05a      	b.n	800608e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2202      	movs	r2, #2
 8005fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ffe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	68fa      	ldr	r2, [r7, #12]
 8006006:	4313      	orrs	r3, r2
 8006008:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	68fa      	ldr	r2, [r7, #12]
 8006010:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a21      	ldr	r2, [pc, #132]	; (800609c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d022      	beq.n	8006062 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006024:	d01d      	beq.n	8006062 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a1d      	ldr	r2, [pc, #116]	; (80060a0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d018      	beq.n	8006062 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a1b      	ldr	r2, [pc, #108]	; (80060a4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d013      	beq.n	8006062 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a1a      	ldr	r2, [pc, #104]	; (80060a8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d00e      	beq.n	8006062 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a18      	ldr	r2, [pc, #96]	; (80060ac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d009      	beq.n	8006062 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a17      	ldr	r2, [pc, #92]	; (80060b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d004      	beq.n	8006062 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a15      	ldr	r2, [pc, #84]	; (80060b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d10c      	bne.n	800607c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006068:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	68ba      	ldr	r2, [r7, #8]
 8006070:	4313      	orrs	r3, r2
 8006072:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	68ba      	ldr	r2, [r7, #8]
 800607a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2201      	movs	r2, #1
 8006080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2200      	movs	r2, #0
 8006088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800608c:	2300      	movs	r3, #0
}
 800608e:	4618      	mov	r0, r3
 8006090:	3714      	adds	r7, #20
 8006092:	46bd      	mov	sp, r7
 8006094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006098:	4770      	bx	lr
 800609a:	bf00      	nop
 800609c:	40010000 	.word	0x40010000
 80060a0:	40000400 	.word	0x40000400
 80060a4:	40000800 	.word	0x40000800
 80060a8:	40000c00 	.word	0x40000c00
 80060ac:	40010400 	.word	0x40010400
 80060b0:	40014000 	.word	0x40014000
 80060b4:	40001800 	.word	0x40001800

080060b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80060c0:	bf00      	nop
 80060c2:	370c      	adds	r7, #12
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr

080060cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b083      	sub	sp, #12
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80060d4:	bf00      	nop
 80060d6:	370c      	adds	r7, #12
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr

080060e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b082      	sub	sp, #8
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d101      	bne.n	80060f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060ee:	2301      	movs	r3, #1
 80060f0:	e03f      	b.n	8006172 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d106      	bne.n	800610c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2200      	movs	r2, #0
 8006102:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f7fc fcf0 	bl	8002aec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2224      	movs	r2, #36	; 0x24
 8006110:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	68da      	ldr	r2, [r3, #12]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006122:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f000 fbe9 	bl	80068fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	691a      	ldr	r2, [r3, #16]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006138:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	695a      	ldr	r2, [r3, #20]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006148:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	68da      	ldr	r2, [r3, #12]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006158:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2220      	movs	r2, #32
 8006164:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2220      	movs	r2, #32
 800616c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006170:	2300      	movs	r3, #0
}
 8006172:	4618      	mov	r0, r3
 8006174:	3708      	adds	r7, #8
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}

0800617a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800617a:	b580      	push	{r7, lr}
 800617c:	b088      	sub	sp, #32
 800617e:	af02      	add	r7, sp, #8
 8006180:	60f8      	str	r0, [r7, #12]
 8006182:	60b9      	str	r1, [r7, #8]
 8006184:	603b      	str	r3, [r7, #0]
 8006186:	4613      	mov	r3, r2
 8006188:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800618a:	2300      	movs	r3, #0
 800618c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006194:	b2db      	uxtb	r3, r3
 8006196:	2b20      	cmp	r3, #32
 8006198:	f040 8090 	bne.w	80062bc <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d002      	beq.n	80061a8 <HAL_UART_Receive+0x2e>
 80061a2:	88fb      	ldrh	r3, [r7, #6]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d101      	bne.n	80061ac <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80061a8:	2301      	movs	r3, #1
 80061aa:	e088      	b.n	80062be <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d101      	bne.n	80061ba <HAL_UART_Receive+0x40>
 80061b6:	2302      	movs	r3, #2
 80061b8:	e081      	b.n	80062be <HAL_UART_Receive+0x144>
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2201      	movs	r2, #1
 80061be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2200      	movs	r2, #0
 80061c6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2222      	movs	r2, #34	; 0x22
 80061cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80061d0:	f7fc fd6c 	bl	8002cac <HAL_GetTick>
 80061d4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	88fa      	ldrh	r2, [r7, #6]
 80061da:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	88fa      	ldrh	r2, [r7, #6]
 80061e0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2200      	movs	r2, #0
 80061e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80061ea:	e05c      	b.n	80062a6 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	3b01      	subs	r3, #1
 80061f4:	b29a      	uxth	r2, r3
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006202:	d12b      	bne.n	800625c <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	9300      	str	r3, [sp, #0]
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	2200      	movs	r2, #0
 800620c:	2120      	movs	r1, #32
 800620e:	68f8      	ldr	r0, [r7, #12]
 8006210:	f000 fa08 	bl	8006624 <UART_WaitOnFlagUntilTimeout>
 8006214:	4603      	mov	r3, r0
 8006216:	2b00      	cmp	r3, #0
 8006218:	d001      	beq.n	800621e <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 800621a:	2303      	movs	r3, #3
 800621c:	e04f      	b.n	80062be <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	691b      	ldr	r3, [r3, #16]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d10c      	bne.n	8006244 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	b29b      	uxth	r3, r3
 8006232:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006236:	b29a      	uxth	r2, r3
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	3302      	adds	r3, #2
 8006240:	60bb      	str	r3, [r7, #8]
 8006242:	e030      	b.n	80062a6 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	b29b      	uxth	r3, r3
 800624c:	b2db      	uxtb	r3, r3
 800624e:	b29a      	uxth	r2, r3
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	3301      	adds	r3, #1
 8006258:	60bb      	str	r3, [r7, #8]
 800625a:	e024      	b.n	80062a6 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	9300      	str	r3, [sp, #0]
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	2200      	movs	r2, #0
 8006264:	2120      	movs	r1, #32
 8006266:	68f8      	ldr	r0, [r7, #12]
 8006268:	f000 f9dc 	bl	8006624 <UART_WaitOnFlagUntilTimeout>
 800626c:	4603      	mov	r3, r0
 800626e:	2b00      	cmp	r3, #0
 8006270:	d001      	beq.n	8006276 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8006272:	2303      	movs	r3, #3
 8006274:	e023      	b.n	80062be <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	691b      	ldr	r3, [r3, #16]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d108      	bne.n	8006290 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	6859      	ldr	r1, [r3, #4]
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	1c5a      	adds	r2, r3, #1
 8006288:	60ba      	str	r2, [r7, #8]
 800628a:	b2ca      	uxtb	r2, r1
 800628c:	701a      	strb	r2, [r3, #0]
 800628e:	e00a      	b.n	80062a6 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	b2da      	uxtb	r2, r3
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	1c59      	adds	r1, r3, #1
 800629c:	60b9      	str	r1, [r7, #8]
 800629e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80062a2:	b2d2      	uxtb	r2, r2
 80062a4:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d19d      	bne.n	80061ec <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2220      	movs	r2, #32
 80062b4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 80062b8:	2300      	movs	r3, #0
 80062ba:	e000      	b.n	80062be <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80062bc:	2302      	movs	r3, #2
  }
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3718      	adds	r7, #24
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}

080062c6 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80062c6:	b480      	push	{r7}
 80062c8:	b085      	sub	sp, #20
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	60f8      	str	r0, [r7, #12]
 80062ce:	60b9      	str	r1, [r7, #8]
 80062d0:	4613      	mov	r3, r2
 80062d2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80062da:	b2db      	uxtb	r3, r3
 80062dc:	2b20      	cmp	r3, #32
 80062de:	d130      	bne.n	8006342 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d002      	beq.n	80062ec <HAL_UART_Transmit_IT+0x26>
 80062e6:	88fb      	ldrh	r3, [r7, #6]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d101      	bne.n	80062f0 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	e029      	b.n	8006344 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d101      	bne.n	80062fe <HAL_UART_Transmit_IT+0x38>
 80062fa:	2302      	movs	r3, #2
 80062fc:	e022      	b.n	8006344 <HAL_UART_Transmit_IT+0x7e>
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2201      	movs	r2, #1
 8006302:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	68ba      	ldr	r2, [r7, #8]
 800630a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	88fa      	ldrh	r2, [r7, #6]
 8006310:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	88fa      	ldrh	r2, [r7, #6]
 8006316:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2200      	movs	r2, #0
 800631c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2221      	movs	r2, #33	; 0x21
 8006322:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2200      	movs	r2, #0
 800632a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	68da      	ldr	r2, [r3, #12]
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800633c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800633e:	2300      	movs	r3, #0
 8006340:	e000      	b.n	8006344 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8006342:	2302      	movs	r3, #2
  }
}
 8006344:	4618      	mov	r0, r3
 8006346:	3714      	adds	r7, #20
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr

08006350 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006350:	b480      	push	{r7}
 8006352:	b085      	sub	sp, #20
 8006354:	af00      	add	r7, sp, #0
 8006356:	60f8      	str	r0, [r7, #12]
 8006358:	60b9      	str	r1, [r7, #8]
 800635a:	4613      	mov	r3, r2
 800635c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006364:	b2db      	uxtb	r3, r3
 8006366:	2b20      	cmp	r3, #32
 8006368:	d140      	bne.n	80063ec <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d002      	beq.n	8006376 <HAL_UART_Receive_IT+0x26>
 8006370:	88fb      	ldrh	r3, [r7, #6]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d101      	bne.n	800637a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	e039      	b.n	80063ee <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006380:	2b01      	cmp	r3, #1
 8006382:	d101      	bne.n	8006388 <HAL_UART_Receive_IT+0x38>
 8006384:	2302      	movs	r3, #2
 8006386:	e032      	b.n	80063ee <HAL_UART_Receive_IT+0x9e>
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2201      	movs	r2, #1
 800638c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	68ba      	ldr	r2, [r7, #8]
 8006394:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	88fa      	ldrh	r2, [r7, #6]
 800639a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	88fa      	ldrh	r2, [r7, #6]
 80063a0:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2200      	movs	r2, #0
 80063a6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2222      	movs	r2, #34	; 0x22
 80063ac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2200      	movs	r2, #0
 80063b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	68da      	ldr	r2, [r3, #12]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063c6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	695a      	ldr	r2, [r3, #20]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f042 0201 	orr.w	r2, r2, #1
 80063d6:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	68da      	ldr	r2, [r3, #12]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f042 0220 	orr.w	r2, r2, #32
 80063e6:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80063e8:	2300      	movs	r3, #0
 80063ea:	e000      	b.n	80063ee <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80063ec:	2302      	movs	r3, #2
  }
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3714      	adds	r7, #20
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr
	...

080063fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b088      	sub	sp, #32
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	68db      	ldr	r3, [r3, #12]
 8006412:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	695b      	ldr	r3, [r3, #20]
 800641a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800641c:	2300      	movs	r3, #0
 800641e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006420:	2300      	movs	r3, #0
 8006422:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006424:	69fb      	ldr	r3, [r7, #28]
 8006426:	f003 030f 	and.w	r3, r3, #15
 800642a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d10d      	bne.n	800644e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006432:	69fb      	ldr	r3, [r7, #28]
 8006434:	f003 0320 	and.w	r3, r3, #32
 8006438:	2b00      	cmp	r3, #0
 800643a:	d008      	beq.n	800644e <HAL_UART_IRQHandler+0x52>
 800643c:	69bb      	ldr	r3, [r7, #24]
 800643e:	f003 0320 	and.w	r3, r3, #32
 8006442:	2b00      	cmp	r3, #0
 8006444:	d003      	beq.n	800644e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 f9d6 	bl	80067f8 <UART_Receive_IT>
      return;
 800644c:	e0d1      	b.n	80065f2 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	2b00      	cmp	r3, #0
 8006452:	f000 80b0 	beq.w	80065b6 <HAL_UART_IRQHandler+0x1ba>
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	f003 0301 	and.w	r3, r3, #1
 800645c:	2b00      	cmp	r3, #0
 800645e:	d105      	bne.n	800646c <HAL_UART_IRQHandler+0x70>
 8006460:	69bb      	ldr	r3, [r7, #24]
 8006462:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006466:	2b00      	cmp	r3, #0
 8006468:	f000 80a5 	beq.w	80065b6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800646c:	69fb      	ldr	r3, [r7, #28]
 800646e:	f003 0301 	and.w	r3, r3, #1
 8006472:	2b00      	cmp	r3, #0
 8006474:	d00a      	beq.n	800648c <HAL_UART_IRQHandler+0x90>
 8006476:	69bb      	ldr	r3, [r7, #24]
 8006478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800647c:	2b00      	cmp	r3, #0
 800647e:	d005      	beq.n	800648c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006484:	f043 0201 	orr.w	r2, r3, #1
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800648c:	69fb      	ldr	r3, [r7, #28]
 800648e:	f003 0304 	and.w	r3, r3, #4
 8006492:	2b00      	cmp	r3, #0
 8006494:	d00a      	beq.n	80064ac <HAL_UART_IRQHandler+0xb0>
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	f003 0301 	and.w	r3, r3, #1
 800649c:	2b00      	cmp	r3, #0
 800649e:	d005      	beq.n	80064ac <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064a4:	f043 0202 	orr.w	r2, r3, #2
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80064ac:	69fb      	ldr	r3, [r7, #28]
 80064ae:	f003 0302 	and.w	r3, r3, #2
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d00a      	beq.n	80064cc <HAL_UART_IRQHandler+0xd0>
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	f003 0301 	and.w	r3, r3, #1
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d005      	beq.n	80064cc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064c4:	f043 0204 	orr.w	r2, r3, #4
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80064cc:	69fb      	ldr	r3, [r7, #28]
 80064ce:	f003 0308 	and.w	r3, r3, #8
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d00f      	beq.n	80064f6 <HAL_UART_IRQHandler+0xfa>
 80064d6:	69bb      	ldr	r3, [r7, #24]
 80064d8:	f003 0320 	and.w	r3, r3, #32
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d104      	bne.n	80064ea <HAL_UART_IRQHandler+0xee>
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	f003 0301 	and.w	r3, r3, #1
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d005      	beq.n	80064f6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064ee:	f043 0208 	orr.w	r2, r3, #8
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d078      	beq.n	80065f0 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80064fe:	69fb      	ldr	r3, [r7, #28]
 8006500:	f003 0320 	and.w	r3, r3, #32
 8006504:	2b00      	cmp	r3, #0
 8006506:	d007      	beq.n	8006518 <HAL_UART_IRQHandler+0x11c>
 8006508:	69bb      	ldr	r3, [r7, #24]
 800650a:	f003 0320 	and.w	r3, r3, #32
 800650e:	2b00      	cmp	r3, #0
 8006510:	d002      	beq.n	8006518 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f000 f970 	bl	80067f8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	695b      	ldr	r3, [r3, #20]
 800651e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006522:	2b40      	cmp	r3, #64	; 0x40
 8006524:	bf0c      	ite	eq
 8006526:	2301      	moveq	r3, #1
 8006528:	2300      	movne	r3, #0
 800652a:	b2db      	uxtb	r3, r3
 800652c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006532:	f003 0308 	and.w	r3, r3, #8
 8006536:	2b00      	cmp	r3, #0
 8006538:	d102      	bne.n	8006540 <HAL_UART_IRQHandler+0x144>
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d031      	beq.n	80065a4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f000 f8b9 	bl	80066b8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	695b      	ldr	r3, [r3, #20]
 800654c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006550:	2b40      	cmp	r3, #64	; 0x40
 8006552:	d123      	bne.n	800659c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	695a      	ldr	r2, [r3, #20]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006562:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006568:	2b00      	cmp	r3, #0
 800656a:	d013      	beq.n	8006594 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006570:	4a21      	ldr	r2, [pc, #132]	; (80065f8 <HAL_UART_IRQHandler+0x1fc>)
 8006572:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006578:	4618      	mov	r0, r3
 800657a:	f7fc fd45 	bl	8003008 <HAL_DMA_Abort_IT>
 800657e:	4603      	mov	r3, r0
 8006580:	2b00      	cmp	r3, #0
 8006582:	d016      	beq.n	80065b2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006588:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800658e:	4610      	mov	r0, r2
 8006590:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006592:	e00e      	b.n	80065b2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f000 f83b 	bl	8006610 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800659a:	e00a      	b.n	80065b2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f000 f837 	bl	8006610 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065a2:	e006      	b.n	80065b2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f000 f833 	bl	8006610 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2200      	movs	r2, #0
 80065ae:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80065b0:	e01e      	b.n	80065f0 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065b2:	bf00      	nop
    return;
 80065b4:	e01c      	b.n	80065f0 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80065b6:	69fb      	ldr	r3, [r7, #28]
 80065b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d008      	beq.n	80065d2 <HAL_UART_IRQHandler+0x1d6>
 80065c0:	69bb      	ldr	r3, [r7, #24]
 80065c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d003      	beq.n	80065d2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f000 f8a6 	bl	800671c <UART_Transmit_IT>
    return;
 80065d0:	e00f      	b.n	80065f2 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80065d2:	69fb      	ldr	r3, [r7, #28]
 80065d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d00a      	beq.n	80065f2 <HAL_UART_IRQHandler+0x1f6>
 80065dc:	69bb      	ldr	r3, [r7, #24]
 80065de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d005      	beq.n	80065f2 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f000 f8ee 	bl	80067c8 <UART_EndTransmit_IT>
    return;
 80065ec:	bf00      	nop
 80065ee:	e000      	b.n	80065f2 <HAL_UART_IRQHandler+0x1f6>
    return;
 80065f0:	bf00      	nop
  }
}
 80065f2:	3720      	adds	r7, #32
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}
 80065f8:	080066f5 	.word	0x080066f5

080065fc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b083      	sub	sp, #12
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006604:	bf00      	nop
 8006606:	370c      	adds	r7, #12
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr

08006610 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006610:	b480      	push	{r7}
 8006612:	b083      	sub	sp, #12
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006618:	bf00      	nop
 800661a:	370c      	adds	r7, #12
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr

08006624 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b084      	sub	sp, #16
 8006628:	af00      	add	r7, sp, #0
 800662a:	60f8      	str	r0, [r7, #12]
 800662c:	60b9      	str	r1, [r7, #8]
 800662e:	603b      	str	r3, [r7, #0]
 8006630:	4613      	mov	r3, r2
 8006632:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006634:	e02c      	b.n	8006690 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006636:	69bb      	ldr	r3, [r7, #24]
 8006638:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800663c:	d028      	beq.n	8006690 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800663e:	69bb      	ldr	r3, [r7, #24]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d007      	beq.n	8006654 <UART_WaitOnFlagUntilTimeout+0x30>
 8006644:	f7fc fb32 	bl	8002cac <HAL_GetTick>
 8006648:	4602      	mov	r2, r0
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	1ad3      	subs	r3, r2, r3
 800664e:	69ba      	ldr	r2, [r7, #24]
 8006650:	429a      	cmp	r2, r3
 8006652:	d21d      	bcs.n	8006690 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	68da      	ldr	r2, [r3, #12]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006662:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	695a      	ldr	r2, [r3, #20]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f022 0201 	bic.w	r2, r2, #1
 8006672:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2220      	movs	r2, #32
 8006678:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2220      	movs	r2, #32
 8006680:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2200      	movs	r2, #0
 8006688:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800668c:	2303      	movs	r3, #3
 800668e:	e00f      	b.n	80066b0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	4013      	ands	r3, r2
 800669a:	68ba      	ldr	r2, [r7, #8]
 800669c:	429a      	cmp	r2, r3
 800669e:	bf0c      	ite	eq
 80066a0:	2301      	moveq	r3, #1
 80066a2:	2300      	movne	r3, #0
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	461a      	mov	r2, r3
 80066a8:	79fb      	ldrb	r3, [r7, #7]
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d0c3      	beq.n	8006636 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80066ae:	2300      	movs	r3, #0
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	3710      	adds	r7, #16
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}

080066b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b083      	sub	sp, #12
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	68da      	ldr	r2, [r3, #12]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80066ce:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	695a      	ldr	r2, [r3, #20]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f022 0201 	bic.w	r2, r2, #1
 80066de:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2220      	movs	r2, #32
 80066e4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80066e8:	bf00      	nop
 80066ea:	370c      	adds	r7, #12
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr

080066f4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b084      	sub	sp, #16
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006700:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2200      	movs	r2, #0
 8006706:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2200      	movs	r2, #0
 800670c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800670e:	68f8      	ldr	r0, [r7, #12]
 8006710:	f7ff ff7e 	bl	8006610 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006714:	bf00      	nop
 8006716:	3710      	adds	r7, #16
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}

0800671c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800671c:	b480      	push	{r7}
 800671e:	b085      	sub	sp, #20
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800672a:	b2db      	uxtb	r3, r3
 800672c:	2b21      	cmp	r3, #33	; 0x21
 800672e:	d144      	bne.n	80067ba <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006738:	d11a      	bne.n	8006770 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6a1b      	ldr	r3, [r3, #32]
 800673e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	881b      	ldrh	r3, [r3, #0]
 8006744:	461a      	mov	r2, r3
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800674e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	691b      	ldr	r3, [r3, #16]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d105      	bne.n	8006764 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6a1b      	ldr	r3, [r3, #32]
 800675c:	1c9a      	adds	r2, r3, #2
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	621a      	str	r2, [r3, #32]
 8006762:	e00e      	b.n	8006782 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6a1b      	ldr	r3, [r3, #32]
 8006768:	1c5a      	adds	r2, r3, #1
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	621a      	str	r2, [r3, #32]
 800676e:	e008      	b.n	8006782 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6a1b      	ldr	r3, [r3, #32]
 8006774:	1c59      	adds	r1, r3, #1
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	6211      	str	r1, [r2, #32]
 800677a:	781a      	ldrb	r2, [r3, #0]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006786:	b29b      	uxth	r3, r3
 8006788:	3b01      	subs	r3, #1
 800678a:	b29b      	uxth	r3, r3
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	4619      	mov	r1, r3
 8006790:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006792:	2b00      	cmp	r3, #0
 8006794:	d10f      	bne.n	80067b6 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	68da      	ldr	r2, [r3, #12]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80067a4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	68da      	ldr	r2, [r3, #12]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067b4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80067b6:	2300      	movs	r3, #0
 80067b8:	e000      	b.n	80067bc <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80067ba:	2302      	movs	r3, #2
  }
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3714      	adds	r7, #20
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr

080067c8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b082      	sub	sp, #8
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	68da      	ldr	r2, [r3, #12]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067de:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2220      	movs	r2, #32
 80067e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f7ff ff07 	bl	80065fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80067ee:	2300      	movs	r3, #0
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3708      	adds	r7, #8
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}

080067f8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b084      	sub	sp, #16
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006806:	b2db      	uxtb	r3, r3
 8006808:	2b22      	cmp	r3, #34	; 0x22
 800680a:	d171      	bne.n	80068f0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006814:	d123      	bne.n	800685e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800681a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	691b      	ldr	r3, [r3, #16]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d10e      	bne.n	8006842 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	b29b      	uxth	r3, r3
 800682c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006830:	b29a      	uxth	r2, r3
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800683a:	1c9a      	adds	r2, r3, #2
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	629a      	str	r2, [r3, #40]	; 0x28
 8006840:	e029      	b.n	8006896 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	b29b      	uxth	r3, r3
 800684a:	b2db      	uxtb	r3, r3
 800684c:	b29a      	uxth	r2, r3
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006856:	1c5a      	adds	r2, r3, #1
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	629a      	str	r2, [r3, #40]	; 0x28
 800685c:	e01b      	b.n	8006896 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	691b      	ldr	r3, [r3, #16]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d10a      	bne.n	800687c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	6858      	ldr	r0, [r3, #4]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006870:	1c59      	adds	r1, r3, #1
 8006872:	687a      	ldr	r2, [r7, #4]
 8006874:	6291      	str	r1, [r2, #40]	; 0x28
 8006876:	b2c2      	uxtb	r2, r0
 8006878:	701a      	strb	r2, [r3, #0]
 800687a:	e00c      	b.n	8006896 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	b2da      	uxtb	r2, r3
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006888:	1c58      	adds	r0, r3, #1
 800688a:	6879      	ldr	r1, [r7, #4]
 800688c:	6288      	str	r0, [r1, #40]	; 0x28
 800688e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006892:	b2d2      	uxtb	r2, r2
 8006894:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800689a:	b29b      	uxth	r3, r3
 800689c:	3b01      	subs	r3, #1
 800689e:	b29b      	uxth	r3, r3
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	4619      	mov	r1, r3
 80068a4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d120      	bne.n	80068ec <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	68da      	ldr	r2, [r3, #12]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f022 0220 	bic.w	r2, r2, #32
 80068b8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	68da      	ldr	r2, [r3, #12]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80068c8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	695a      	ldr	r2, [r3, #20]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f022 0201 	bic.w	r2, r2, #1
 80068d8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2220      	movs	r2, #32
 80068de:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f7fa fd5a 	bl	800139c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80068e8:	2300      	movs	r3, #0
 80068ea:	e002      	b.n	80068f2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80068ec:	2300      	movs	r3, #0
 80068ee:	e000      	b.n	80068f2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80068f0:	2302      	movs	r3, #2
  }
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3710      	adds	r7, #16
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}
	...

080068fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006900:	b085      	sub	sp, #20
 8006902:	af00      	add	r7, sp, #0
 8006904:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	691b      	ldr	r3, [r3, #16]
 800690c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	68da      	ldr	r2, [r3, #12]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	430a      	orrs	r2, r1
 800691a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	689a      	ldr	r2, [r3, #8]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	691b      	ldr	r3, [r3, #16]
 8006924:	431a      	orrs	r2, r3
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	695b      	ldr	r3, [r3, #20]
 800692a:	431a      	orrs	r2, r3
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	69db      	ldr	r3, [r3, #28]
 8006930:	4313      	orrs	r3, r2
 8006932:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	68db      	ldr	r3, [r3, #12]
 800693a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800693e:	f023 030c 	bic.w	r3, r3, #12
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	6812      	ldr	r2, [r2, #0]
 8006946:	68f9      	ldr	r1, [r7, #12]
 8006948:	430b      	orrs	r3, r1
 800694a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	695b      	ldr	r3, [r3, #20]
 8006952:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	699a      	ldr	r2, [r3, #24]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	430a      	orrs	r2, r1
 8006960:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	69db      	ldr	r3, [r3, #28]
 8006966:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800696a:	f040 818b 	bne.w	8006c84 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4ac1      	ldr	r2, [pc, #772]	; (8006c78 <UART_SetConfig+0x37c>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d005      	beq.n	8006984 <UART_SetConfig+0x88>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4abf      	ldr	r2, [pc, #764]	; (8006c7c <UART_SetConfig+0x380>)
 800697e:	4293      	cmp	r3, r2
 8006980:	f040 80bd 	bne.w	8006afe <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006984:	f7fe fa0a 	bl	8004d9c <HAL_RCC_GetPCLK2Freq>
 8006988:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	461d      	mov	r5, r3
 800698e:	f04f 0600 	mov.w	r6, #0
 8006992:	46a8      	mov	r8, r5
 8006994:	46b1      	mov	r9, r6
 8006996:	eb18 0308 	adds.w	r3, r8, r8
 800699a:	eb49 0409 	adc.w	r4, r9, r9
 800699e:	4698      	mov	r8, r3
 80069a0:	46a1      	mov	r9, r4
 80069a2:	eb18 0805 	adds.w	r8, r8, r5
 80069a6:	eb49 0906 	adc.w	r9, r9, r6
 80069aa:	f04f 0100 	mov.w	r1, #0
 80069ae:	f04f 0200 	mov.w	r2, #0
 80069b2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80069b6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80069ba:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80069be:	4688      	mov	r8, r1
 80069c0:	4691      	mov	r9, r2
 80069c2:	eb18 0005 	adds.w	r0, r8, r5
 80069c6:	eb49 0106 	adc.w	r1, r9, r6
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	461d      	mov	r5, r3
 80069d0:	f04f 0600 	mov.w	r6, #0
 80069d4:	196b      	adds	r3, r5, r5
 80069d6:	eb46 0406 	adc.w	r4, r6, r6
 80069da:	461a      	mov	r2, r3
 80069dc:	4623      	mov	r3, r4
 80069de:	f7fa f825 	bl	8000a2c <__aeabi_uldivmod>
 80069e2:	4603      	mov	r3, r0
 80069e4:	460c      	mov	r4, r1
 80069e6:	461a      	mov	r2, r3
 80069e8:	4ba5      	ldr	r3, [pc, #660]	; (8006c80 <UART_SetConfig+0x384>)
 80069ea:	fba3 2302 	umull	r2, r3, r3, r2
 80069ee:	095b      	lsrs	r3, r3, #5
 80069f0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	461d      	mov	r5, r3
 80069f8:	f04f 0600 	mov.w	r6, #0
 80069fc:	46a9      	mov	r9, r5
 80069fe:	46b2      	mov	sl, r6
 8006a00:	eb19 0309 	adds.w	r3, r9, r9
 8006a04:	eb4a 040a 	adc.w	r4, sl, sl
 8006a08:	4699      	mov	r9, r3
 8006a0a:	46a2      	mov	sl, r4
 8006a0c:	eb19 0905 	adds.w	r9, r9, r5
 8006a10:	eb4a 0a06 	adc.w	sl, sl, r6
 8006a14:	f04f 0100 	mov.w	r1, #0
 8006a18:	f04f 0200 	mov.w	r2, #0
 8006a1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a20:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006a24:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006a28:	4689      	mov	r9, r1
 8006a2a:	4692      	mov	sl, r2
 8006a2c:	eb19 0005 	adds.w	r0, r9, r5
 8006a30:	eb4a 0106 	adc.w	r1, sl, r6
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	461d      	mov	r5, r3
 8006a3a:	f04f 0600 	mov.w	r6, #0
 8006a3e:	196b      	adds	r3, r5, r5
 8006a40:	eb46 0406 	adc.w	r4, r6, r6
 8006a44:	461a      	mov	r2, r3
 8006a46:	4623      	mov	r3, r4
 8006a48:	f7f9 fff0 	bl	8000a2c <__aeabi_uldivmod>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	460c      	mov	r4, r1
 8006a50:	461a      	mov	r2, r3
 8006a52:	4b8b      	ldr	r3, [pc, #556]	; (8006c80 <UART_SetConfig+0x384>)
 8006a54:	fba3 1302 	umull	r1, r3, r3, r2
 8006a58:	095b      	lsrs	r3, r3, #5
 8006a5a:	2164      	movs	r1, #100	; 0x64
 8006a5c:	fb01 f303 	mul.w	r3, r1, r3
 8006a60:	1ad3      	subs	r3, r2, r3
 8006a62:	00db      	lsls	r3, r3, #3
 8006a64:	3332      	adds	r3, #50	; 0x32
 8006a66:	4a86      	ldr	r2, [pc, #536]	; (8006c80 <UART_SetConfig+0x384>)
 8006a68:	fba2 2303 	umull	r2, r3, r2, r3
 8006a6c:	095b      	lsrs	r3, r3, #5
 8006a6e:	005b      	lsls	r3, r3, #1
 8006a70:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006a74:	4498      	add	r8, r3
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	461d      	mov	r5, r3
 8006a7a:	f04f 0600 	mov.w	r6, #0
 8006a7e:	46a9      	mov	r9, r5
 8006a80:	46b2      	mov	sl, r6
 8006a82:	eb19 0309 	adds.w	r3, r9, r9
 8006a86:	eb4a 040a 	adc.w	r4, sl, sl
 8006a8a:	4699      	mov	r9, r3
 8006a8c:	46a2      	mov	sl, r4
 8006a8e:	eb19 0905 	adds.w	r9, r9, r5
 8006a92:	eb4a 0a06 	adc.w	sl, sl, r6
 8006a96:	f04f 0100 	mov.w	r1, #0
 8006a9a:	f04f 0200 	mov.w	r2, #0
 8006a9e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006aa2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006aa6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006aaa:	4689      	mov	r9, r1
 8006aac:	4692      	mov	sl, r2
 8006aae:	eb19 0005 	adds.w	r0, r9, r5
 8006ab2:	eb4a 0106 	adc.w	r1, sl, r6
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	461d      	mov	r5, r3
 8006abc:	f04f 0600 	mov.w	r6, #0
 8006ac0:	196b      	adds	r3, r5, r5
 8006ac2:	eb46 0406 	adc.w	r4, r6, r6
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	4623      	mov	r3, r4
 8006aca:	f7f9 ffaf 	bl	8000a2c <__aeabi_uldivmod>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	460c      	mov	r4, r1
 8006ad2:	461a      	mov	r2, r3
 8006ad4:	4b6a      	ldr	r3, [pc, #424]	; (8006c80 <UART_SetConfig+0x384>)
 8006ad6:	fba3 1302 	umull	r1, r3, r3, r2
 8006ada:	095b      	lsrs	r3, r3, #5
 8006adc:	2164      	movs	r1, #100	; 0x64
 8006ade:	fb01 f303 	mul.w	r3, r1, r3
 8006ae2:	1ad3      	subs	r3, r2, r3
 8006ae4:	00db      	lsls	r3, r3, #3
 8006ae6:	3332      	adds	r3, #50	; 0x32
 8006ae8:	4a65      	ldr	r2, [pc, #404]	; (8006c80 <UART_SetConfig+0x384>)
 8006aea:	fba2 2303 	umull	r2, r3, r2, r3
 8006aee:	095b      	lsrs	r3, r3, #5
 8006af0:	f003 0207 	and.w	r2, r3, #7
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4442      	add	r2, r8
 8006afa:	609a      	str	r2, [r3, #8]
 8006afc:	e26f      	b.n	8006fde <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006afe:	f7fe f939 	bl	8004d74 <HAL_RCC_GetPCLK1Freq>
 8006b02:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	461d      	mov	r5, r3
 8006b08:	f04f 0600 	mov.w	r6, #0
 8006b0c:	46a8      	mov	r8, r5
 8006b0e:	46b1      	mov	r9, r6
 8006b10:	eb18 0308 	adds.w	r3, r8, r8
 8006b14:	eb49 0409 	adc.w	r4, r9, r9
 8006b18:	4698      	mov	r8, r3
 8006b1a:	46a1      	mov	r9, r4
 8006b1c:	eb18 0805 	adds.w	r8, r8, r5
 8006b20:	eb49 0906 	adc.w	r9, r9, r6
 8006b24:	f04f 0100 	mov.w	r1, #0
 8006b28:	f04f 0200 	mov.w	r2, #0
 8006b2c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006b30:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006b34:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006b38:	4688      	mov	r8, r1
 8006b3a:	4691      	mov	r9, r2
 8006b3c:	eb18 0005 	adds.w	r0, r8, r5
 8006b40:	eb49 0106 	adc.w	r1, r9, r6
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	461d      	mov	r5, r3
 8006b4a:	f04f 0600 	mov.w	r6, #0
 8006b4e:	196b      	adds	r3, r5, r5
 8006b50:	eb46 0406 	adc.w	r4, r6, r6
 8006b54:	461a      	mov	r2, r3
 8006b56:	4623      	mov	r3, r4
 8006b58:	f7f9 ff68 	bl	8000a2c <__aeabi_uldivmod>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	460c      	mov	r4, r1
 8006b60:	461a      	mov	r2, r3
 8006b62:	4b47      	ldr	r3, [pc, #284]	; (8006c80 <UART_SetConfig+0x384>)
 8006b64:	fba3 2302 	umull	r2, r3, r3, r2
 8006b68:	095b      	lsrs	r3, r3, #5
 8006b6a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	461d      	mov	r5, r3
 8006b72:	f04f 0600 	mov.w	r6, #0
 8006b76:	46a9      	mov	r9, r5
 8006b78:	46b2      	mov	sl, r6
 8006b7a:	eb19 0309 	adds.w	r3, r9, r9
 8006b7e:	eb4a 040a 	adc.w	r4, sl, sl
 8006b82:	4699      	mov	r9, r3
 8006b84:	46a2      	mov	sl, r4
 8006b86:	eb19 0905 	adds.w	r9, r9, r5
 8006b8a:	eb4a 0a06 	adc.w	sl, sl, r6
 8006b8e:	f04f 0100 	mov.w	r1, #0
 8006b92:	f04f 0200 	mov.w	r2, #0
 8006b96:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b9a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006b9e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006ba2:	4689      	mov	r9, r1
 8006ba4:	4692      	mov	sl, r2
 8006ba6:	eb19 0005 	adds.w	r0, r9, r5
 8006baa:	eb4a 0106 	adc.w	r1, sl, r6
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	461d      	mov	r5, r3
 8006bb4:	f04f 0600 	mov.w	r6, #0
 8006bb8:	196b      	adds	r3, r5, r5
 8006bba:	eb46 0406 	adc.w	r4, r6, r6
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	4623      	mov	r3, r4
 8006bc2:	f7f9 ff33 	bl	8000a2c <__aeabi_uldivmod>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	460c      	mov	r4, r1
 8006bca:	461a      	mov	r2, r3
 8006bcc:	4b2c      	ldr	r3, [pc, #176]	; (8006c80 <UART_SetConfig+0x384>)
 8006bce:	fba3 1302 	umull	r1, r3, r3, r2
 8006bd2:	095b      	lsrs	r3, r3, #5
 8006bd4:	2164      	movs	r1, #100	; 0x64
 8006bd6:	fb01 f303 	mul.w	r3, r1, r3
 8006bda:	1ad3      	subs	r3, r2, r3
 8006bdc:	00db      	lsls	r3, r3, #3
 8006bde:	3332      	adds	r3, #50	; 0x32
 8006be0:	4a27      	ldr	r2, [pc, #156]	; (8006c80 <UART_SetConfig+0x384>)
 8006be2:	fba2 2303 	umull	r2, r3, r2, r3
 8006be6:	095b      	lsrs	r3, r3, #5
 8006be8:	005b      	lsls	r3, r3, #1
 8006bea:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006bee:	4498      	add	r8, r3
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	461d      	mov	r5, r3
 8006bf4:	f04f 0600 	mov.w	r6, #0
 8006bf8:	46a9      	mov	r9, r5
 8006bfa:	46b2      	mov	sl, r6
 8006bfc:	eb19 0309 	adds.w	r3, r9, r9
 8006c00:	eb4a 040a 	adc.w	r4, sl, sl
 8006c04:	4699      	mov	r9, r3
 8006c06:	46a2      	mov	sl, r4
 8006c08:	eb19 0905 	adds.w	r9, r9, r5
 8006c0c:	eb4a 0a06 	adc.w	sl, sl, r6
 8006c10:	f04f 0100 	mov.w	r1, #0
 8006c14:	f04f 0200 	mov.w	r2, #0
 8006c18:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c1c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006c20:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006c24:	4689      	mov	r9, r1
 8006c26:	4692      	mov	sl, r2
 8006c28:	eb19 0005 	adds.w	r0, r9, r5
 8006c2c:	eb4a 0106 	adc.w	r1, sl, r6
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	461d      	mov	r5, r3
 8006c36:	f04f 0600 	mov.w	r6, #0
 8006c3a:	196b      	adds	r3, r5, r5
 8006c3c:	eb46 0406 	adc.w	r4, r6, r6
 8006c40:	461a      	mov	r2, r3
 8006c42:	4623      	mov	r3, r4
 8006c44:	f7f9 fef2 	bl	8000a2c <__aeabi_uldivmod>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	460c      	mov	r4, r1
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	4b0c      	ldr	r3, [pc, #48]	; (8006c80 <UART_SetConfig+0x384>)
 8006c50:	fba3 1302 	umull	r1, r3, r3, r2
 8006c54:	095b      	lsrs	r3, r3, #5
 8006c56:	2164      	movs	r1, #100	; 0x64
 8006c58:	fb01 f303 	mul.w	r3, r1, r3
 8006c5c:	1ad3      	subs	r3, r2, r3
 8006c5e:	00db      	lsls	r3, r3, #3
 8006c60:	3332      	adds	r3, #50	; 0x32
 8006c62:	4a07      	ldr	r2, [pc, #28]	; (8006c80 <UART_SetConfig+0x384>)
 8006c64:	fba2 2303 	umull	r2, r3, r2, r3
 8006c68:	095b      	lsrs	r3, r3, #5
 8006c6a:	f003 0207 	and.w	r2, r3, #7
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4442      	add	r2, r8
 8006c74:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006c76:	e1b2      	b.n	8006fde <UART_SetConfig+0x6e2>
 8006c78:	40011000 	.word	0x40011000
 8006c7c:	40011400 	.word	0x40011400
 8006c80:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4ad7      	ldr	r2, [pc, #860]	; (8006fe8 <UART_SetConfig+0x6ec>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d005      	beq.n	8006c9a <UART_SetConfig+0x39e>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4ad6      	ldr	r2, [pc, #856]	; (8006fec <UART_SetConfig+0x6f0>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	f040 80d1 	bne.w	8006e3c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006c9a:	f7fe f87f 	bl	8004d9c <HAL_RCC_GetPCLK2Freq>
 8006c9e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	469a      	mov	sl, r3
 8006ca4:	f04f 0b00 	mov.w	fp, #0
 8006ca8:	46d0      	mov	r8, sl
 8006caa:	46d9      	mov	r9, fp
 8006cac:	eb18 0308 	adds.w	r3, r8, r8
 8006cb0:	eb49 0409 	adc.w	r4, r9, r9
 8006cb4:	4698      	mov	r8, r3
 8006cb6:	46a1      	mov	r9, r4
 8006cb8:	eb18 080a 	adds.w	r8, r8, sl
 8006cbc:	eb49 090b 	adc.w	r9, r9, fp
 8006cc0:	f04f 0100 	mov.w	r1, #0
 8006cc4:	f04f 0200 	mov.w	r2, #0
 8006cc8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006ccc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006cd0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006cd4:	4688      	mov	r8, r1
 8006cd6:	4691      	mov	r9, r2
 8006cd8:	eb1a 0508 	adds.w	r5, sl, r8
 8006cdc:	eb4b 0609 	adc.w	r6, fp, r9
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	4619      	mov	r1, r3
 8006ce6:	f04f 0200 	mov.w	r2, #0
 8006cea:	f04f 0300 	mov.w	r3, #0
 8006cee:	f04f 0400 	mov.w	r4, #0
 8006cf2:	0094      	lsls	r4, r2, #2
 8006cf4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006cf8:	008b      	lsls	r3, r1, #2
 8006cfa:	461a      	mov	r2, r3
 8006cfc:	4623      	mov	r3, r4
 8006cfe:	4628      	mov	r0, r5
 8006d00:	4631      	mov	r1, r6
 8006d02:	f7f9 fe93 	bl	8000a2c <__aeabi_uldivmod>
 8006d06:	4603      	mov	r3, r0
 8006d08:	460c      	mov	r4, r1
 8006d0a:	461a      	mov	r2, r3
 8006d0c:	4bb8      	ldr	r3, [pc, #736]	; (8006ff0 <UART_SetConfig+0x6f4>)
 8006d0e:	fba3 2302 	umull	r2, r3, r3, r2
 8006d12:	095b      	lsrs	r3, r3, #5
 8006d14:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	469b      	mov	fp, r3
 8006d1c:	f04f 0c00 	mov.w	ip, #0
 8006d20:	46d9      	mov	r9, fp
 8006d22:	46e2      	mov	sl, ip
 8006d24:	eb19 0309 	adds.w	r3, r9, r9
 8006d28:	eb4a 040a 	adc.w	r4, sl, sl
 8006d2c:	4699      	mov	r9, r3
 8006d2e:	46a2      	mov	sl, r4
 8006d30:	eb19 090b 	adds.w	r9, r9, fp
 8006d34:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006d38:	f04f 0100 	mov.w	r1, #0
 8006d3c:	f04f 0200 	mov.w	r2, #0
 8006d40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d44:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006d48:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006d4c:	4689      	mov	r9, r1
 8006d4e:	4692      	mov	sl, r2
 8006d50:	eb1b 0509 	adds.w	r5, fp, r9
 8006d54:	eb4c 060a 	adc.w	r6, ip, sl
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	4619      	mov	r1, r3
 8006d5e:	f04f 0200 	mov.w	r2, #0
 8006d62:	f04f 0300 	mov.w	r3, #0
 8006d66:	f04f 0400 	mov.w	r4, #0
 8006d6a:	0094      	lsls	r4, r2, #2
 8006d6c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006d70:	008b      	lsls	r3, r1, #2
 8006d72:	461a      	mov	r2, r3
 8006d74:	4623      	mov	r3, r4
 8006d76:	4628      	mov	r0, r5
 8006d78:	4631      	mov	r1, r6
 8006d7a:	f7f9 fe57 	bl	8000a2c <__aeabi_uldivmod>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	460c      	mov	r4, r1
 8006d82:	461a      	mov	r2, r3
 8006d84:	4b9a      	ldr	r3, [pc, #616]	; (8006ff0 <UART_SetConfig+0x6f4>)
 8006d86:	fba3 1302 	umull	r1, r3, r3, r2
 8006d8a:	095b      	lsrs	r3, r3, #5
 8006d8c:	2164      	movs	r1, #100	; 0x64
 8006d8e:	fb01 f303 	mul.w	r3, r1, r3
 8006d92:	1ad3      	subs	r3, r2, r3
 8006d94:	011b      	lsls	r3, r3, #4
 8006d96:	3332      	adds	r3, #50	; 0x32
 8006d98:	4a95      	ldr	r2, [pc, #596]	; (8006ff0 <UART_SetConfig+0x6f4>)
 8006d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d9e:	095b      	lsrs	r3, r3, #5
 8006da0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006da4:	4498      	add	r8, r3
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	469b      	mov	fp, r3
 8006daa:	f04f 0c00 	mov.w	ip, #0
 8006dae:	46d9      	mov	r9, fp
 8006db0:	46e2      	mov	sl, ip
 8006db2:	eb19 0309 	adds.w	r3, r9, r9
 8006db6:	eb4a 040a 	adc.w	r4, sl, sl
 8006dba:	4699      	mov	r9, r3
 8006dbc:	46a2      	mov	sl, r4
 8006dbe:	eb19 090b 	adds.w	r9, r9, fp
 8006dc2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006dc6:	f04f 0100 	mov.w	r1, #0
 8006dca:	f04f 0200 	mov.w	r2, #0
 8006dce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006dd2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006dd6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006dda:	4689      	mov	r9, r1
 8006ddc:	4692      	mov	sl, r2
 8006dde:	eb1b 0509 	adds.w	r5, fp, r9
 8006de2:	eb4c 060a 	adc.w	r6, ip, sl
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	4619      	mov	r1, r3
 8006dec:	f04f 0200 	mov.w	r2, #0
 8006df0:	f04f 0300 	mov.w	r3, #0
 8006df4:	f04f 0400 	mov.w	r4, #0
 8006df8:	0094      	lsls	r4, r2, #2
 8006dfa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006dfe:	008b      	lsls	r3, r1, #2
 8006e00:	461a      	mov	r2, r3
 8006e02:	4623      	mov	r3, r4
 8006e04:	4628      	mov	r0, r5
 8006e06:	4631      	mov	r1, r6
 8006e08:	f7f9 fe10 	bl	8000a2c <__aeabi_uldivmod>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	460c      	mov	r4, r1
 8006e10:	461a      	mov	r2, r3
 8006e12:	4b77      	ldr	r3, [pc, #476]	; (8006ff0 <UART_SetConfig+0x6f4>)
 8006e14:	fba3 1302 	umull	r1, r3, r3, r2
 8006e18:	095b      	lsrs	r3, r3, #5
 8006e1a:	2164      	movs	r1, #100	; 0x64
 8006e1c:	fb01 f303 	mul.w	r3, r1, r3
 8006e20:	1ad3      	subs	r3, r2, r3
 8006e22:	011b      	lsls	r3, r3, #4
 8006e24:	3332      	adds	r3, #50	; 0x32
 8006e26:	4a72      	ldr	r2, [pc, #456]	; (8006ff0 <UART_SetConfig+0x6f4>)
 8006e28:	fba2 2303 	umull	r2, r3, r2, r3
 8006e2c:	095b      	lsrs	r3, r3, #5
 8006e2e:	f003 020f 	and.w	r2, r3, #15
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4442      	add	r2, r8
 8006e38:	609a      	str	r2, [r3, #8]
 8006e3a:	e0d0      	b.n	8006fde <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006e3c:	f7fd ff9a 	bl	8004d74 <HAL_RCC_GetPCLK1Freq>
 8006e40:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	469a      	mov	sl, r3
 8006e46:	f04f 0b00 	mov.w	fp, #0
 8006e4a:	46d0      	mov	r8, sl
 8006e4c:	46d9      	mov	r9, fp
 8006e4e:	eb18 0308 	adds.w	r3, r8, r8
 8006e52:	eb49 0409 	adc.w	r4, r9, r9
 8006e56:	4698      	mov	r8, r3
 8006e58:	46a1      	mov	r9, r4
 8006e5a:	eb18 080a 	adds.w	r8, r8, sl
 8006e5e:	eb49 090b 	adc.w	r9, r9, fp
 8006e62:	f04f 0100 	mov.w	r1, #0
 8006e66:	f04f 0200 	mov.w	r2, #0
 8006e6a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006e6e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006e72:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006e76:	4688      	mov	r8, r1
 8006e78:	4691      	mov	r9, r2
 8006e7a:	eb1a 0508 	adds.w	r5, sl, r8
 8006e7e:	eb4b 0609 	adc.w	r6, fp, r9
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	4619      	mov	r1, r3
 8006e88:	f04f 0200 	mov.w	r2, #0
 8006e8c:	f04f 0300 	mov.w	r3, #0
 8006e90:	f04f 0400 	mov.w	r4, #0
 8006e94:	0094      	lsls	r4, r2, #2
 8006e96:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006e9a:	008b      	lsls	r3, r1, #2
 8006e9c:	461a      	mov	r2, r3
 8006e9e:	4623      	mov	r3, r4
 8006ea0:	4628      	mov	r0, r5
 8006ea2:	4631      	mov	r1, r6
 8006ea4:	f7f9 fdc2 	bl	8000a2c <__aeabi_uldivmod>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	460c      	mov	r4, r1
 8006eac:	461a      	mov	r2, r3
 8006eae:	4b50      	ldr	r3, [pc, #320]	; (8006ff0 <UART_SetConfig+0x6f4>)
 8006eb0:	fba3 2302 	umull	r2, r3, r3, r2
 8006eb4:	095b      	lsrs	r3, r3, #5
 8006eb6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	469b      	mov	fp, r3
 8006ebe:	f04f 0c00 	mov.w	ip, #0
 8006ec2:	46d9      	mov	r9, fp
 8006ec4:	46e2      	mov	sl, ip
 8006ec6:	eb19 0309 	adds.w	r3, r9, r9
 8006eca:	eb4a 040a 	adc.w	r4, sl, sl
 8006ece:	4699      	mov	r9, r3
 8006ed0:	46a2      	mov	sl, r4
 8006ed2:	eb19 090b 	adds.w	r9, r9, fp
 8006ed6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006eda:	f04f 0100 	mov.w	r1, #0
 8006ede:	f04f 0200 	mov.w	r2, #0
 8006ee2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ee6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006eea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006eee:	4689      	mov	r9, r1
 8006ef0:	4692      	mov	sl, r2
 8006ef2:	eb1b 0509 	adds.w	r5, fp, r9
 8006ef6:	eb4c 060a 	adc.w	r6, ip, sl
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	4619      	mov	r1, r3
 8006f00:	f04f 0200 	mov.w	r2, #0
 8006f04:	f04f 0300 	mov.w	r3, #0
 8006f08:	f04f 0400 	mov.w	r4, #0
 8006f0c:	0094      	lsls	r4, r2, #2
 8006f0e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006f12:	008b      	lsls	r3, r1, #2
 8006f14:	461a      	mov	r2, r3
 8006f16:	4623      	mov	r3, r4
 8006f18:	4628      	mov	r0, r5
 8006f1a:	4631      	mov	r1, r6
 8006f1c:	f7f9 fd86 	bl	8000a2c <__aeabi_uldivmod>
 8006f20:	4603      	mov	r3, r0
 8006f22:	460c      	mov	r4, r1
 8006f24:	461a      	mov	r2, r3
 8006f26:	4b32      	ldr	r3, [pc, #200]	; (8006ff0 <UART_SetConfig+0x6f4>)
 8006f28:	fba3 1302 	umull	r1, r3, r3, r2
 8006f2c:	095b      	lsrs	r3, r3, #5
 8006f2e:	2164      	movs	r1, #100	; 0x64
 8006f30:	fb01 f303 	mul.w	r3, r1, r3
 8006f34:	1ad3      	subs	r3, r2, r3
 8006f36:	011b      	lsls	r3, r3, #4
 8006f38:	3332      	adds	r3, #50	; 0x32
 8006f3a:	4a2d      	ldr	r2, [pc, #180]	; (8006ff0 <UART_SetConfig+0x6f4>)
 8006f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8006f40:	095b      	lsrs	r3, r3, #5
 8006f42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f46:	4498      	add	r8, r3
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	469b      	mov	fp, r3
 8006f4c:	f04f 0c00 	mov.w	ip, #0
 8006f50:	46d9      	mov	r9, fp
 8006f52:	46e2      	mov	sl, ip
 8006f54:	eb19 0309 	adds.w	r3, r9, r9
 8006f58:	eb4a 040a 	adc.w	r4, sl, sl
 8006f5c:	4699      	mov	r9, r3
 8006f5e:	46a2      	mov	sl, r4
 8006f60:	eb19 090b 	adds.w	r9, r9, fp
 8006f64:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006f68:	f04f 0100 	mov.w	r1, #0
 8006f6c:	f04f 0200 	mov.w	r2, #0
 8006f70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006f74:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006f78:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006f7c:	4689      	mov	r9, r1
 8006f7e:	4692      	mov	sl, r2
 8006f80:	eb1b 0509 	adds.w	r5, fp, r9
 8006f84:	eb4c 060a 	adc.w	r6, ip, sl
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	4619      	mov	r1, r3
 8006f8e:	f04f 0200 	mov.w	r2, #0
 8006f92:	f04f 0300 	mov.w	r3, #0
 8006f96:	f04f 0400 	mov.w	r4, #0
 8006f9a:	0094      	lsls	r4, r2, #2
 8006f9c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006fa0:	008b      	lsls	r3, r1, #2
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	4623      	mov	r3, r4
 8006fa6:	4628      	mov	r0, r5
 8006fa8:	4631      	mov	r1, r6
 8006faa:	f7f9 fd3f 	bl	8000a2c <__aeabi_uldivmod>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	460c      	mov	r4, r1
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	4b0e      	ldr	r3, [pc, #56]	; (8006ff0 <UART_SetConfig+0x6f4>)
 8006fb6:	fba3 1302 	umull	r1, r3, r3, r2
 8006fba:	095b      	lsrs	r3, r3, #5
 8006fbc:	2164      	movs	r1, #100	; 0x64
 8006fbe:	fb01 f303 	mul.w	r3, r1, r3
 8006fc2:	1ad3      	subs	r3, r2, r3
 8006fc4:	011b      	lsls	r3, r3, #4
 8006fc6:	3332      	adds	r3, #50	; 0x32
 8006fc8:	4a09      	ldr	r2, [pc, #36]	; (8006ff0 <UART_SetConfig+0x6f4>)
 8006fca:	fba2 2303 	umull	r2, r3, r2, r3
 8006fce:	095b      	lsrs	r3, r3, #5
 8006fd0:	f003 020f 	and.w	r2, r3, #15
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4442      	add	r2, r8
 8006fda:	609a      	str	r2, [r3, #8]
}
 8006fdc:	e7ff      	b.n	8006fde <UART_SetConfig+0x6e2>
 8006fde:	bf00      	nop
 8006fe0:	3714      	adds	r7, #20
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fe8:	40011000 	.word	0x40011000
 8006fec:	40011400 	.word	0x40011400
 8006ff0:	51eb851f 	.word	0x51eb851f

08006ff4 <__libc_init_array>:
 8006ff4:	b570      	push	{r4, r5, r6, lr}
 8006ff6:	4e0d      	ldr	r6, [pc, #52]	; (800702c <__libc_init_array+0x38>)
 8006ff8:	4c0d      	ldr	r4, [pc, #52]	; (8007030 <__libc_init_array+0x3c>)
 8006ffa:	1ba4      	subs	r4, r4, r6
 8006ffc:	10a4      	asrs	r4, r4, #2
 8006ffe:	2500      	movs	r5, #0
 8007000:	42a5      	cmp	r5, r4
 8007002:	d109      	bne.n	8007018 <__libc_init_array+0x24>
 8007004:	4e0b      	ldr	r6, [pc, #44]	; (8007034 <__libc_init_array+0x40>)
 8007006:	4c0c      	ldr	r4, [pc, #48]	; (8007038 <__libc_init_array+0x44>)
 8007008:	f000 f9ac 	bl	8007364 <_init>
 800700c:	1ba4      	subs	r4, r4, r6
 800700e:	10a4      	asrs	r4, r4, #2
 8007010:	2500      	movs	r5, #0
 8007012:	42a5      	cmp	r5, r4
 8007014:	d105      	bne.n	8007022 <__libc_init_array+0x2e>
 8007016:	bd70      	pop	{r4, r5, r6, pc}
 8007018:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800701c:	4798      	blx	r3
 800701e:	3501      	adds	r5, #1
 8007020:	e7ee      	b.n	8007000 <__libc_init_array+0xc>
 8007022:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007026:	4798      	blx	r3
 8007028:	3501      	adds	r5, #1
 800702a:	e7f2      	b.n	8007012 <__libc_init_array+0x1e>
 800702c:	080073bc 	.word	0x080073bc
 8007030:	080073bc 	.word	0x080073bc
 8007034:	080073bc 	.word	0x080073bc
 8007038:	080073c0 	.word	0x080073c0

0800703c <memset>:
 800703c:	4402      	add	r2, r0
 800703e:	4603      	mov	r3, r0
 8007040:	4293      	cmp	r3, r2
 8007042:	d100      	bne.n	8007046 <memset+0xa>
 8007044:	4770      	bx	lr
 8007046:	f803 1b01 	strb.w	r1, [r3], #1
 800704a:	e7f9      	b.n	8007040 <memset+0x4>

0800704c <atan2f>:
 800704c:	f000 b800 	b.w	8007050 <__ieee754_atan2f>

08007050 <__ieee754_atan2f>:
 8007050:	ee10 2a90 	vmov	r2, s1
 8007054:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8007058:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800705c:	b510      	push	{r4, lr}
 800705e:	eef0 7a40 	vmov.f32	s15, s0
 8007062:	dc06      	bgt.n	8007072 <__ieee754_atan2f+0x22>
 8007064:	ee10 0a10 	vmov	r0, s0
 8007068:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800706c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007070:	dd04      	ble.n	800707c <__ieee754_atan2f+0x2c>
 8007072:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8007076:	eeb0 0a67 	vmov.f32	s0, s15
 800707a:	bd10      	pop	{r4, pc}
 800707c:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8007080:	d103      	bne.n	800708a <__ieee754_atan2f+0x3a>
 8007082:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007086:	f000 b891 	b.w	80071ac <atanf>
 800708a:	1794      	asrs	r4, r2, #30
 800708c:	f004 0402 	and.w	r4, r4, #2
 8007090:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8007094:	b943      	cbnz	r3, 80070a8 <__ieee754_atan2f+0x58>
 8007096:	2c02      	cmp	r4, #2
 8007098:	d06e      	beq.n	8007178 <__ieee754_atan2f+0x128>
 800709a:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8007180 <__ieee754_atan2f+0x130>
 800709e:	2c03      	cmp	r4, #3
 80070a0:	bf08      	it	eq
 80070a2:	eef0 7a47 	vmoveq.f32	s15, s14
 80070a6:	e7e6      	b.n	8007076 <__ieee754_atan2f+0x26>
 80070a8:	b941      	cbnz	r1, 80070bc <__ieee754_atan2f+0x6c>
 80070aa:	eddf 7a36 	vldr	s15, [pc, #216]	; 8007184 <__ieee754_atan2f+0x134>
 80070ae:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8007188 <__ieee754_atan2f+0x138>
 80070b2:	2800      	cmp	r0, #0
 80070b4:	bfb8      	it	lt
 80070b6:	eef0 7a47 	vmovlt.f32	s15, s14
 80070ba:	e7dc      	b.n	8007076 <__ieee754_atan2f+0x26>
 80070bc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80070c0:	d122      	bne.n	8007108 <__ieee754_atan2f+0xb8>
 80070c2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80070c6:	d112      	bne.n	80070ee <__ieee754_atan2f+0x9e>
 80070c8:	2c02      	cmp	r4, #2
 80070ca:	d00a      	beq.n	80070e2 <__ieee754_atan2f+0x92>
 80070cc:	2c03      	cmp	r4, #3
 80070ce:	d00b      	beq.n	80070e8 <__ieee754_atan2f+0x98>
 80070d0:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800718c <__ieee754_atan2f+0x13c>
 80070d4:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8007190 <__ieee754_atan2f+0x140>
 80070d8:	2c01      	cmp	r4, #1
 80070da:	bf18      	it	ne
 80070dc:	eef0 7a47 	vmovne.f32	s15, s14
 80070e0:	e7c9      	b.n	8007076 <__ieee754_atan2f+0x26>
 80070e2:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8007194 <__ieee754_atan2f+0x144>
 80070e6:	e7c6      	b.n	8007076 <__ieee754_atan2f+0x26>
 80070e8:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8007198 <__ieee754_atan2f+0x148>
 80070ec:	e7c3      	b.n	8007076 <__ieee754_atan2f+0x26>
 80070ee:	2c02      	cmp	r4, #2
 80070f0:	d042      	beq.n	8007178 <__ieee754_atan2f+0x128>
 80070f2:	2c03      	cmp	r4, #3
 80070f4:	d005      	beq.n	8007102 <__ieee754_atan2f+0xb2>
 80070f6:	2c01      	cmp	r4, #1
 80070f8:	eddf 7a28 	vldr	s15, [pc, #160]	; 800719c <__ieee754_atan2f+0x14c>
 80070fc:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80071a0 <__ieee754_atan2f+0x150>
 8007100:	e7eb      	b.n	80070da <__ieee754_atan2f+0x8a>
 8007102:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8007180 <__ieee754_atan2f+0x130>
 8007106:	e7b6      	b.n	8007076 <__ieee754_atan2f+0x26>
 8007108:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800710c:	d0cd      	beq.n	80070aa <__ieee754_atan2f+0x5a>
 800710e:	1a5b      	subs	r3, r3, r1
 8007110:	15db      	asrs	r3, r3, #23
 8007112:	2b3c      	cmp	r3, #60	; 0x3c
 8007114:	dc1a      	bgt.n	800714c <__ieee754_atan2f+0xfc>
 8007116:	2a00      	cmp	r2, #0
 8007118:	da01      	bge.n	800711e <__ieee754_atan2f+0xce>
 800711a:	333c      	adds	r3, #60	; 0x3c
 800711c:	db19      	blt.n	8007152 <__ieee754_atan2f+0x102>
 800711e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8007122:	f000 f917 	bl	8007354 <fabsf>
 8007126:	f000 f841 	bl	80071ac <atanf>
 800712a:	eef0 7a40 	vmov.f32	s15, s0
 800712e:	2c01      	cmp	r4, #1
 8007130:	d012      	beq.n	8007158 <__ieee754_atan2f+0x108>
 8007132:	2c02      	cmp	r4, #2
 8007134:	d017      	beq.n	8007166 <__ieee754_atan2f+0x116>
 8007136:	2c00      	cmp	r4, #0
 8007138:	d09d      	beq.n	8007076 <__ieee754_atan2f+0x26>
 800713a:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80071a4 <__ieee754_atan2f+0x154>
 800713e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007142:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80071a8 <__ieee754_atan2f+0x158>
 8007146:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800714a:	e794      	b.n	8007076 <__ieee754_atan2f+0x26>
 800714c:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8007184 <__ieee754_atan2f+0x134>
 8007150:	e7ed      	b.n	800712e <__ieee754_atan2f+0xde>
 8007152:	eddf 7a13 	vldr	s15, [pc, #76]	; 80071a0 <__ieee754_atan2f+0x150>
 8007156:	e7ea      	b.n	800712e <__ieee754_atan2f+0xde>
 8007158:	ee17 3a90 	vmov	r3, s15
 800715c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007160:	ee07 3a90 	vmov	s15, r3
 8007164:	e787      	b.n	8007076 <__ieee754_atan2f+0x26>
 8007166:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80071a4 <__ieee754_atan2f+0x154>
 800716a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800716e:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80071a8 <__ieee754_atan2f+0x158>
 8007172:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007176:	e77e      	b.n	8007076 <__ieee754_atan2f+0x26>
 8007178:	eddf 7a0b 	vldr	s15, [pc, #44]	; 80071a8 <__ieee754_atan2f+0x158>
 800717c:	e77b      	b.n	8007076 <__ieee754_atan2f+0x26>
 800717e:	bf00      	nop
 8007180:	c0490fdb 	.word	0xc0490fdb
 8007184:	3fc90fdb 	.word	0x3fc90fdb
 8007188:	bfc90fdb 	.word	0xbfc90fdb
 800718c:	bf490fdb 	.word	0xbf490fdb
 8007190:	3f490fdb 	.word	0x3f490fdb
 8007194:	4016cbe4 	.word	0x4016cbe4
 8007198:	c016cbe4 	.word	0xc016cbe4
 800719c:	80000000 	.word	0x80000000
 80071a0:	00000000 	.word	0x00000000
 80071a4:	33bbbd2e 	.word	0x33bbbd2e
 80071a8:	40490fdb 	.word	0x40490fdb

080071ac <atanf>:
 80071ac:	b538      	push	{r3, r4, r5, lr}
 80071ae:	ee10 5a10 	vmov	r5, s0
 80071b2:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80071b6:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 80071ba:	eef0 7a40 	vmov.f32	s15, s0
 80071be:	db10      	blt.n	80071e2 <atanf+0x36>
 80071c0:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80071c4:	dd04      	ble.n	80071d0 <atanf+0x24>
 80071c6:	ee70 7a00 	vadd.f32	s15, s0, s0
 80071ca:	eeb0 0a67 	vmov.f32	s0, s15
 80071ce:	bd38      	pop	{r3, r4, r5, pc}
 80071d0:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8007308 <atanf+0x15c>
 80071d4:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800730c <atanf+0x160>
 80071d8:	2d00      	cmp	r5, #0
 80071da:	bfd8      	it	le
 80071dc:	eef0 7a47 	vmovle.f32	s15, s14
 80071e0:	e7f3      	b.n	80071ca <atanf+0x1e>
 80071e2:	4b4b      	ldr	r3, [pc, #300]	; (8007310 <atanf+0x164>)
 80071e4:	429c      	cmp	r4, r3
 80071e6:	dc10      	bgt.n	800720a <atanf+0x5e>
 80071e8:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 80071ec:	da0a      	bge.n	8007204 <atanf+0x58>
 80071ee:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8007314 <atanf+0x168>
 80071f2:	ee30 7a07 	vadd.f32	s14, s0, s14
 80071f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071fa:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80071fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007202:	dce2      	bgt.n	80071ca <atanf+0x1e>
 8007204:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007208:	e013      	b.n	8007232 <atanf+0x86>
 800720a:	f000 f8a3 	bl	8007354 <fabsf>
 800720e:	4b42      	ldr	r3, [pc, #264]	; (8007318 <atanf+0x16c>)
 8007210:	429c      	cmp	r4, r3
 8007212:	dc4f      	bgt.n	80072b4 <atanf+0x108>
 8007214:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8007218:	429c      	cmp	r4, r3
 800721a:	dc41      	bgt.n	80072a0 <atanf+0xf4>
 800721c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8007220:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8007224:	eea0 7a27 	vfma.f32	s14, s0, s15
 8007228:	2300      	movs	r3, #0
 800722a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800722e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8007232:	1c5a      	adds	r2, r3, #1
 8007234:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8007238:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800731c <atanf+0x170>
 800723c:	eddf 5a38 	vldr	s11, [pc, #224]	; 8007320 <atanf+0x174>
 8007240:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8007324 <atanf+0x178>
 8007244:	ee66 6a06 	vmul.f32	s13, s12, s12
 8007248:	eee6 5a87 	vfma.f32	s11, s13, s14
 800724c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8007328 <atanf+0x17c>
 8007250:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8007254:	eddf 5a35 	vldr	s11, [pc, #212]	; 800732c <atanf+0x180>
 8007258:	eee7 5a26 	vfma.f32	s11, s14, s13
 800725c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8007330 <atanf+0x184>
 8007260:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8007264:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007334 <atanf+0x188>
 8007268:	eee7 5a26 	vfma.f32	s11, s14, s13
 800726c:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8007338 <atanf+0x18c>
 8007270:	eea6 5a87 	vfma.f32	s10, s13, s14
 8007274:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800733c <atanf+0x190>
 8007278:	eea5 7a26 	vfma.f32	s14, s10, s13
 800727c:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8007340 <atanf+0x194>
 8007280:	eea7 5a26 	vfma.f32	s10, s14, s13
 8007284:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8007344 <atanf+0x198>
 8007288:	eea5 7a26 	vfma.f32	s14, s10, s13
 800728c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8007290:	eea5 7a86 	vfma.f32	s14, s11, s12
 8007294:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007298:	d121      	bne.n	80072de <atanf+0x132>
 800729a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800729e:	e794      	b.n	80071ca <atanf+0x1e>
 80072a0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80072a4:	ee30 7a67 	vsub.f32	s14, s0, s15
 80072a8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80072ac:	2301      	movs	r3, #1
 80072ae:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80072b2:	e7be      	b.n	8007232 <atanf+0x86>
 80072b4:	4b24      	ldr	r3, [pc, #144]	; (8007348 <atanf+0x19c>)
 80072b6:	429c      	cmp	r4, r3
 80072b8:	dc0b      	bgt.n	80072d2 <atanf+0x126>
 80072ba:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 80072be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072c2:	eea0 7a27 	vfma.f32	s14, s0, s15
 80072c6:	2302      	movs	r3, #2
 80072c8:	ee70 6a67 	vsub.f32	s13, s0, s15
 80072cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072d0:	e7af      	b.n	8007232 <atanf+0x86>
 80072d2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80072d6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80072da:	2303      	movs	r3, #3
 80072dc:	e7a9      	b.n	8007232 <atanf+0x86>
 80072de:	4a1b      	ldr	r2, [pc, #108]	; (800734c <atanf+0x1a0>)
 80072e0:	491b      	ldr	r1, [pc, #108]	; (8007350 <atanf+0x1a4>)
 80072e2:	009b      	lsls	r3, r3, #2
 80072e4:	441a      	add	r2, r3
 80072e6:	440b      	add	r3, r1
 80072e8:	edd3 6a00 	vldr	s13, [r3]
 80072ec:	ee37 7a66 	vsub.f32	s14, s14, s13
 80072f0:	2d00      	cmp	r5, #0
 80072f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80072f6:	ed92 7a00 	vldr	s14, [r2]
 80072fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80072fe:	bfb8      	it	lt
 8007300:	eef1 7a67 	vneglt.f32	s15, s15
 8007304:	e761      	b.n	80071ca <atanf+0x1e>
 8007306:	bf00      	nop
 8007308:	bfc90fdb 	.word	0xbfc90fdb
 800730c:	3fc90fdb 	.word	0x3fc90fdb
 8007310:	3edfffff 	.word	0x3edfffff
 8007314:	7149f2ca 	.word	0x7149f2ca
 8007318:	3f97ffff 	.word	0x3f97ffff
 800731c:	3c8569d7 	.word	0x3c8569d7
 8007320:	3d4bda59 	.word	0x3d4bda59
 8007324:	bd6ef16b 	.word	0xbd6ef16b
 8007328:	3d886b35 	.word	0x3d886b35
 800732c:	3dba2e6e 	.word	0x3dba2e6e
 8007330:	3e124925 	.word	0x3e124925
 8007334:	3eaaaaab 	.word	0x3eaaaaab
 8007338:	bd15a221 	.word	0xbd15a221
 800733c:	bd9d8795 	.word	0xbd9d8795
 8007340:	bde38e38 	.word	0xbde38e38
 8007344:	be4ccccd 	.word	0xbe4ccccd
 8007348:	401bffff 	.word	0x401bffff
 800734c:	08007394 	.word	0x08007394
 8007350:	080073a4 	.word	0x080073a4

08007354 <fabsf>:
 8007354:	ee10 3a10 	vmov	r3, s0
 8007358:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800735c:	ee00 3a10 	vmov	s0, r3
 8007360:	4770      	bx	lr
	...

08007364 <_init>:
 8007364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007366:	bf00      	nop
 8007368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800736a:	bc08      	pop	{r3}
 800736c:	469e      	mov	lr, r3
 800736e:	4770      	bx	lr

08007370 <_fini>:
 8007370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007372:	bf00      	nop
 8007374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007376:	bc08      	pop	{r3}
 8007378:	469e      	mov	lr, r3
 800737a:	4770      	bx	lr
