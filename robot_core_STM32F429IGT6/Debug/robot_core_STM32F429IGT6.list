
robot_core_STM32F429IGT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ff0  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e8  080081a0  080081a0  000181a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008588  08008588  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08008588  08008588  00018588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008590  08008590  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008590  08008590  00018590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008594  08008594  00018594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08008598  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000280  20000014  080085ac  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000294  080085ac  00020294  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012edf  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dd1  00000000  00000000  00032f23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001140  00000000  00000000  00035cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ff0  00000000  00000000  00036e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002537b  00000000  00000000  00037e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000147db  00000000  00000000  0005d1a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd297  00000000  00000000  0007197e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014ec15  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049e4  00000000  00000000  0014ec68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000014 	.word	0x20000014
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008188 	.word	0x08008188

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000018 	.word	0x20000018
 80001ec:	08008188 	.word	0x08008188

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__aeabi_d2f>:
 800098c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000990:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000994:	bf24      	itt	cs
 8000996:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800099a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800099e:	d90d      	bls.n	80009bc <__aeabi_d2f+0x30>
 80009a0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009a4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009a8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009ac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009b0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009b4:	bf08      	it	eq
 80009b6:	f020 0001 	biceq.w	r0, r0, #1
 80009ba:	4770      	bx	lr
 80009bc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009c0:	d121      	bne.n	8000a06 <__aeabi_d2f+0x7a>
 80009c2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009c6:	bfbc      	itt	lt
 80009c8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009cc:	4770      	bxlt	lr
 80009ce:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009d2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009d6:	f1c2 0218 	rsb	r2, r2, #24
 80009da:	f1c2 0c20 	rsb	ip, r2, #32
 80009de:	fa10 f30c 	lsls.w	r3, r0, ip
 80009e2:	fa20 f002 	lsr.w	r0, r0, r2
 80009e6:	bf18      	it	ne
 80009e8:	f040 0001 	orrne.w	r0, r0, #1
 80009ec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009f0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009f4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009f8:	ea40 000c 	orr.w	r0, r0, ip
 80009fc:	fa23 f302 	lsr.w	r3, r3, r2
 8000a00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a04:	e7cc      	b.n	80009a0 <__aeabi_d2f+0x14>
 8000a06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a0a:	d107      	bne.n	8000a1c <__aeabi_d2f+0x90>
 8000a0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a10:	bf1e      	ittt	ne
 8000a12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a1a:	4770      	bxne	lr
 8000a1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop

08000a2c <__aeabi_uldivmod>:
 8000a2c:	b953      	cbnz	r3, 8000a44 <__aeabi_uldivmod+0x18>
 8000a2e:	b94a      	cbnz	r2, 8000a44 <__aeabi_uldivmod+0x18>
 8000a30:	2900      	cmp	r1, #0
 8000a32:	bf08      	it	eq
 8000a34:	2800      	cmpeq	r0, #0
 8000a36:	bf1c      	itt	ne
 8000a38:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a3c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a40:	f000 b974 	b.w	8000d2c <__aeabi_idiv0>
 8000a44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a4c:	f000 f806 	bl	8000a5c <__udivmoddi4>
 8000a50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a58:	b004      	add	sp, #16
 8000a5a:	4770      	bx	lr

08000a5c <__udivmoddi4>:
 8000a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a60:	9d08      	ldr	r5, [sp, #32]
 8000a62:	4604      	mov	r4, r0
 8000a64:	468e      	mov	lr, r1
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d14d      	bne.n	8000b06 <__udivmoddi4+0xaa>
 8000a6a:	428a      	cmp	r2, r1
 8000a6c:	4694      	mov	ip, r2
 8000a6e:	d969      	bls.n	8000b44 <__udivmoddi4+0xe8>
 8000a70:	fab2 f282 	clz	r2, r2
 8000a74:	b152      	cbz	r2, 8000a8c <__udivmoddi4+0x30>
 8000a76:	fa01 f302 	lsl.w	r3, r1, r2
 8000a7a:	f1c2 0120 	rsb	r1, r2, #32
 8000a7e:	fa20 f101 	lsr.w	r1, r0, r1
 8000a82:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a86:	ea41 0e03 	orr.w	lr, r1, r3
 8000a8a:	4094      	lsls	r4, r2
 8000a8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a90:	0c21      	lsrs	r1, r4, #16
 8000a92:	fbbe f6f8 	udiv	r6, lr, r8
 8000a96:	fa1f f78c 	uxth.w	r7, ip
 8000a9a:	fb08 e316 	mls	r3, r8, r6, lr
 8000a9e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000aa2:	fb06 f107 	mul.w	r1, r6, r7
 8000aa6:	4299      	cmp	r1, r3
 8000aa8:	d90a      	bls.n	8000ac0 <__udivmoddi4+0x64>
 8000aaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000aae:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000ab2:	f080 811f 	bcs.w	8000cf4 <__udivmoddi4+0x298>
 8000ab6:	4299      	cmp	r1, r3
 8000ab8:	f240 811c 	bls.w	8000cf4 <__udivmoddi4+0x298>
 8000abc:	3e02      	subs	r6, #2
 8000abe:	4463      	add	r3, ip
 8000ac0:	1a5b      	subs	r3, r3, r1
 8000ac2:	b2a4      	uxth	r4, r4
 8000ac4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ac8:	fb08 3310 	mls	r3, r8, r0, r3
 8000acc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ad0:	fb00 f707 	mul.w	r7, r0, r7
 8000ad4:	42a7      	cmp	r7, r4
 8000ad6:	d90a      	bls.n	8000aee <__udivmoddi4+0x92>
 8000ad8:	eb1c 0404 	adds.w	r4, ip, r4
 8000adc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ae0:	f080 810a 	bcs.w	8000cf8 <__udivmoddi4+0x29c>
 8000ae4:	42a7      	cmp	r7, r4
 8000ae6:	f240 8107 	bls.w	8000cf8 <__udivmoddi4+0x29c>
 8000aea:	4464      	add	r4, ip
 8000aec:	3802      	subs	r0, #2
 8000aee:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000af2:	1be4      	subs	r4, r4, r7
 8000af4:	2600      	movs	r6, #0
 8000af6:	b11d      	cbz	r5, 8000b00 <__udivmoddi4+0xa4>
 8000af8:	40d4      	lsrs	r4, r2
 8000afa:	2300      	movs	r3, #0
 8000afc:	e9c5 4300 	strd	r4, r3, [r5]
 8000b00:	4631      	mov	r1, r6
 8000b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b06:	428b      	cmp	r3, r1
 8000b08:	d909      	bls.n	8000b1e <__udivmoddi4+0xc2>
 8000b0a:	2d00      	cmp	r5, #0
 8000b0c:	f000 80ef 	beq.w	8000cee <__udivmoddi4+0x292>
 8000b10:	2600      	movs	r6, #0
 8000b12:	e9c5 0100 	strd	r0, r1, [r5]
 8000b16:	4630      	mov	r0, r6
 8000b18:	4631      	mov	r1, r6
 8000b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b1e:	fab3 f683 	clz	r6, r3
 8000b22:	2e00      	cmp	r6, #0
 8000b24:	d14a      	bne.n	8000bbc <__udivmoddi4+0x160>
 8000b26:	428b      	cmp	r3, r1
 8000b28:	d302      	bcc.n	8000b30 <__udivmoddi4+0xd4>
 8000b2a:	4282      	cmp	r2, r0
 8000b2c:	f200 80f9 	bhi.w	8000d22 <__udivmoddi4+0x2c6>
 8000b30:	1a84      	subs	r4, r0, r2
 8000b32:	eb61 0303 	sbc.w	r3, r1, r3
 8000b36:	2001      	movs	r0, #1
 8000b38:	469e      	mov	lr, r3
 8000b3a:	2d00      	cmp	r5, #0
 8000b3c:	d0e0      	beq.n	8000b00 <__udivmoddi4+0xa4>
 8000b3e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b42:	e7dd      	b.n	8000b00 <__udivmoddi4+0xa4>
 8000b44:	b902      	cbnz	r2, 8000b48 <__udivmoddi4+0xec>
 8000b46:	deff      	udf	#255	; 0xff
 8000b48:	fab2 f282 	clz	r2, r2
 8000b4c:	2a00      	cmp	r2, #0
 8000b4e:	f040 8092 	bne.w	8000c76 <__udivmoddi4+0x21a>
 8000b52:	eba1 010c 	sub.w	r1, r1, ip
 8000b56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b5a:	fa1f fe8c 	uxth.w	lr, ip
 8000b5e:	2601      	movs	r6, #1
 8000b60:	0c20      	lsrs	r0, r4, #16
 8000b62:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b66:	fb07 1113 	mls	r1, r7, r3, r1
 8000b6a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b6e:	fb0e f003 	mul.w	r0, lr, r3
 8000b72:	4288      	cmp	r0, r1
 8000b74:	d908      	bls.n	8000b88 <__udivmoddi4+0x12c>
 8000b76:	eb1c 0101 	adds.w	r1, ip, r1
 8000b7a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000b7e:	d202      	bcs.n	8000b86 <__udivmoddi4+0x12a>
 8000b80:	4288      	cmp	r0, r1
 8000b82:	f200 80cb 	bhi.w	8000d1c <__udivmoddi4+0x2c0>
 8000b86:	4643      	mov	r3, r8
 8000b88:	1a09      	subs	r1, r1, r0
 8000b8a:	b2a4      	uxth	r4, r4
 8000b8c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b90:	fb07 1110 	mls	r1, r7, r0, r1
 8000b94:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b98:	fb0e fe00 	mul.w	lr, lr, r0
 8000b9c:	45a6      	cmp	lr, r4
 8000b9e:	d908      	bls.n	8000bb2 <__udivmoddi4+0x156>
 8000ba0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ba4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ba8:	d202      	bcs.n	8000bb0 <__udivmoddi4+0x154>
 8000baa:	45a6      	cmp	lr, r4
 8000bac:	f200 80bb 	bhi.w	8000d26 <__udivmoddi4+0x2ca>
 8000bb0:	4608      	mov	r0, r1
 8000bb2:	eba4 040e 	sub.w	r4, r4, lr
 8000bb6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bba:	e79c      	b.n	8000af6 <__udivmoddi4+0x9a>
 8000bbc:	f1c6 0720 	rsb	r7, r6, #32
 8000bc0:	40b3      	lsls	r3, r6
 8000bc2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bc6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bca:	fa20 f407 	lsr.w	r4, r0, r7
 8000bce:	fa01 f306 	lsl.w	r3, r1, r6
 8000bd2:	431c      	orrs	r4, r3
 8000bd4:	40f9      	lsrs	r1, r7
 8000bd6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bda:	fa00 f306 	lsl.w	r3, r0, r6
 8000bde:	fbb1 f8f9 	udiv	r8, r1, r9
 8000be2:	0c20      	lsrs	r0, r4, #16
 8000be4:	fa1f fe8c 	uxth.w	lr, ip
 8000be8:	fb09 1118 	mls	r1, r9, r8, r1
 8000bec:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bf0:	fb08 f00e 	mul.w	r0, r8, lr
 8000bf4:	4288      	cmp	r0, r1
 8000bf6:	fa02 f206 	lsl.w	r2, r2, r6
 8000bfa:	d90b      	bls.n	8000c14 <__udivmoddi4+0x1b8>
 8000bfc:	eb1c 0101 	adds.w	r1, ip, r1
 8000c00:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000c04:	f080 8088 	bcs.w	8000d18 <__udivmoddi4+0x2bc>
 8000c08:	4288      	cmp	r0, r1
 8000c0a:	f240 8085 	bls.w	8000d18 <__udivmoddi4+0x2bc>
 8000c0e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c12:	4461      	add	r1, ip
 8000c14:	1a09      	subs	r1, r1, r0
 8000c16:	b2a4      	uxth	r4, r4
 8000c18:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c1c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c20:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c24:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c28:	458e      	cmp	lr, r1
 8000c2a:	d908      	bls.n	8000c3e <__udivmoddi4+0x1e2>
 8000c2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c30:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000c34:	d26c      	bcs.n	8000d10 <__udivmoddi4+0x2b4>
 8000c36:	458e      	cmp	lr, r1
 8000c38:	d96a      	bls.n	8000d10 <__udivmoddi4+0x2b4>
 8000c3a:	3802      	subs	r0, #2
 8000c3c:	4461      	add	r1, ip
 8000c3e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c42:	fba0 9402 	umull	r9, r4, r0, r2
 8000c46:	eba1 010e 	sub.w	r1, r1, lr
 8000c4a:	42a1      	cmp	r1, r4
 8000c4c:	46c8      	mov	r8, r9
 8000c4e:	46a6      	mov	lr, r4
 8000c50:	d356      	bcc.n	8000d00 <__udivmoddi4+0x2a4>
 8000c52:	d053      	beq.n	8000cfc <__udivmoddi4+0x2a0>
 8000c54:	b15d      	cbz	r5, 8000c6e <__udivmoddi4+0x212>
 8000c56:	ebb3 0208 	subs.w	r2, r3, r8
 8000c5a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c5e:	fa01 f707 	lsl.w	r7, r1, r7
 8000c62:	fa22 f306 	lsr.w	r3, r2, r6
 8000c66:	40f1      	lsrs	r1, r6
 8000c68:	431f      	orrs	r7, r3
 8000c6a:	e9c5 7100 	strd	r7, r1, [r5]
 8000c6e:	2600      	movs	r6, #0
 8000c70:	4631      	mov	r1, r6
 8000c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c76:	f1c2 0320 	rsb	r3, r2, #32
 8000c7a:	40d8      	lsrs	r0, r3
 8000c7c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c80:	fa21 f303 	lsr.w	r3, r1, r3
 8000c84:	4091      	lsls	r1, r2
 8000c86:	4301      	orrs	r1, r0
 8000c88:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c8c:	fa1f fe8c 	uxth.w	lr, ip
 8000c90:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c94:	fb07 3610 	mls	r6, r7, r0, r3
 8000c98:	0c0b      	lsrs	r3, r1, #16
 8000c9a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c9e:	fb00 f60e 	mul.w	r6, r0, lr
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ca8:	d908      	bls.n	8000cbc <__udivmoddi4+0x260>
 8000caa:	eb1c 0303 	adds.w	r3, ip, r3
 8000cae:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000cb2:	d22f      	bcs.n	8000d14 <__udivmoddi4+0x2b8>
 8000cb4:	429e      	cmp	r6, r3
 8000cb6:	d92d      	bls.n	8000d14 <__udivmoddi4+0x2b8>
 8000cb8:	3802      	subs	r0, #2
 8000cba:	4463      	add	r3, ip
 8000cbc:	1b9b      	subs	r3, r3, r6
 8000cbe:	b289      	uxth	r1, r1
 8000cc0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cc4:	fb07 3316 	mls	r3, r7, r6, r3
 8000cc8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ccc:	fb06 f30e 	mul.w	r3, r6, lr
 8000cd0:	428b      	cmp	r3, r1
 8000cd2:	d908      	bls.n	8000ce6 <__udivmoddi4+0x28a>
 8000cd4:	eb1c 0101 	adds.w	r1, ip, r1
 8000cd8:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000cdc:	d216      	bcs.n	8000d0c <__udivmoddi4+0x2b0>
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d914      	bls.n	8000d0c <__udivmoddi4+0x2b0>
 8000ce2:	3e02      	subs	r6, #2
 8000ce4:	4461      	add	r1, ip
 8000ce6:	1ac9      	subs	r1, r1, r3
 8000ce8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000cec:	e738      	b.n	8000b60 <__udivmoddi4+0x104>
 8000cee:	462e      	mov	r6, r5
 8000cf0:	4628      	mov	r0, r5
 8000cf2:	e705      	b.n	8000b00 <__udivmoddi4+0xa4>
 8000cf4:	4606      	mov	r6, r0
 8000cf6:	e6e3      	b.n	8000ac0 <__udivmoddi4+0x64>
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	e6f8      	b.n	8000aee <__udivmoddi4+0x92>
 8000cfc:	454b      	cmp	r3, r9
 8000cfe:	d2a9      	bcs.n	8000c54 <__udivmoddi4+0x1f8>
 8000d00:	ebb9 0802 	subs.w	r8, r9, r2
 8000d04:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d08:	3801      	subs	r0, #1
 8000d0a:	e7a3      	b.n	8000c54 <__udivmoddi4+0x1f8>
 8000d0c:	4646      	mov	r6, r8
 8000d0e:	e7ea      	b.n	8000ce6 <__udivmoddi4+0x28a>
 8000d10:	4620      	mov	r0, r4
 8000d12:	e794      	b.n	8000c3e <__udivmoddi4+0x1e2>
 8000d14:	4640      	mov	r0, r8
 8000d16:	e7d1      	b.n	8000cbc <__udivmoddi4+0x260>
 8000d18:	46d0      	mov	r8, sl
 8000d1a:	e77b      	b.n	8000c14 <__udivmoddi4+0x1b8>
 8000d1c:	3b02      	subs	r3, #2
 8000d1e:	4461      	add	r1, ip
 8000d20:	e732      	b.n	8000b88 <__udivmoddi4+0x12c>
 8000d22:	4630      	mov	r0, r6
 8000d24:	e709      	b.n	8000b3a <__udivmoddi4+0xde>
 8000d26:	4464      	add	r4, ip
 8000d28:	3802      	subs	r0, #2
 8000d2a:	e742      	b.n	8000bb2 <__udivmoddi4+0x156>

08000d2c <__aeabi_idiv0>:
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop

08000d30 <init_controlRxTx>:

////prototipos de funciones/////
void iniciaInstruccion(void);
void continuaInstruccion(void);

void init_controlRxTx (UART_HandleTypeDef* huart){
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
	uart_handler = huart;
 8000d38:	4a04      	ldr	r2, [pc, #16]	; (8000d4c <init_controlRxTx+0x1c>)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6013      	str	r3, [r2, #0]
} //end init_controlRxTx ()
 8000d3e:	bf00      	nop
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	20000030 	.word	0x20000030

08000d50 <controlRxTxUART>:


void controlRxTxUART (uint8_t rx[]){
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]

	if (rx[3] != 0){
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	3303      	adds	r3, #3
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d014      	beq.n	8000d8c <controlRxTxUART+0x3c>
		tx[0] = CMD_ERROR;
 8000d62:	4b16      	ldr	r3, [pc, #88]	; (8000dbc <controlRxTxUART+0x6c>)
 8000d64:	2204      	movs	r2, #4
 8000d66:	701a      	strb	r2, [r3, #0]
		tx[3] = '\0';
 8000d68:	4b14      	ldr	r3, [pc, #80]	; (8000dbc <controlRxTxUART+0x6c>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	70da      	strb	r2, [r3, #3]
		HAL_UART_Transmit_IT(uart_handler, tx, 4);
 8000d6e:	4b14      	ldr	r3, [pc, #80]	; (8000dc0 <controlRxTxUART+0x70>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	2204      	movs	r2, #4
 8000d74:	4911      	ldr	r1, [pc, #68]	; (8000dbc <controlRxTxUART+0x6c>)
 8000d76:	4618      	mov	r0, r3
 8000d78:	f005 fc9b 	bl	80066b2 <HAL_UART_Transmit_IT>
		HAL_UART_Receive_IT(uart_handler, rx, 4);
 8000d7c:	4b10      	ldr	r3, [pc, #64]	; (8000dc0 <controlRxTxUART+0x70>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	2204      	movs	r2, #4
 8000d82:	6879      	ldr	r1, [r7, #4]
 8000d84:	4618      	mov	r0, r3
 8000d86:	f005 fcd9 	bl	800673c <HAL_UART_Receive_IT>
		return;
 8000d8a:	e013      	b.n	8000db4 <controlRxTxUART+0x64>
	}

	p_rx = &rx[0];
 8000d8c:	4a0d      	ldr	r2, [pc, #52]	; (8000dc4 <controlRxTxUART+0x74>)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6013      	str	r3, [r2, #0]

	if (cmdEsperado != NO_CMD){
 8000d92:	4b0d      	ldr	r3, [pc, #52]	; (8000dc8 <controlRxTxUART+0x78>)
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d002      	beq.n	8000da0 <controlRxTxUART+0x50>
		continuaInstruccion();
 8000d9a:	f000 f9f7 	bl	800118c <continuaInstruccion>
 8000d9e:	e001      	b.n	8000da4 <controlRxTxUART+0x54>
	}else{
		iniciaInstruccion();
 8000da0:	f000 f814 	bl	8000dcc <iniciaInstruccion>
	}

	HAL_UART_Receive_IT(uart_handler, p_rx, 4);
 8000da4:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <controlRxTxUART+0x70>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a06      	ldr	r2, [pc, #24]	; (8000dc4 <controlRxTxUART+0x74>)
 8000daa:	6811      	ldr	r1, [r2, #0]
 8000dac:	2204      	movs	r2, #4
 8000dae:	4618      	mov	r0, r3
 8000db0:	f005 fcc4 	bl	800673c <HAL_UART_Receive_IT>

} //end controlRxTxUART ()
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20000034 	.word	0x20000034
 8000dc0:	20000030 	.word	0x20000030
 8000dc4:	20000038 	.word	0x20000038
 8000dc8:	2000003c 	.word	0x2000003c

08000dcc <iniciaInstruccion>:


void iniciaInstruccion (void){
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0

	switch (p_rx[0]){
 8000dd0:	4ba8      	ldr	r3, [pc, #672]	; (8001074 <iniciaInstruccion+0x2a8>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	3b01      	subs	r3, #1
 8000dd8:	2b16      	cmp	r3, #22
 8000dda:	f200 81ba 	bhi.w	8001152 <iniciaInstruccion+0x386>
 8000dde:	a201      	add	r2, pc, #4	; (adr r2, 8000de4 <iniciaInstruccion+0x18>)
 8000de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000de4:	08000e41 	.word	0x08000e41
 8000de8:	08001153 	.word	0x08001153
 8000dec:	08001153 	.word	0x08001153
 8000df0:	08001153 	.word	0x08001153
 8000df4:	08000e69 	.word	0x08000e69
 8000df8:	08001153 	.word	0x08001153
 8000dfc:	08001153 	.word	0x08001153
 8000e00:	08001153 	.word	0x08001153
 8000e04:	08000ee3 	.word	0x08000ee3
 8000e08:	08001153 	.word	0x08001153
 8000e0c:	08000f2d 	.word	0x08000f2d
 8000e10:	08001153 	.word	0x08001153
 8000e14:	08000f6d 	.word	0x08000f6d
 8000e18:	08000f95 	.word	0x08000f95
 8000e1c:	08001029 	.word	0x08001029
 8000e20:	080010a9 	.word	0x080010a9
 8000e24:	08000fdf 	.word	0x08000fdf
 8000e28:	08001153 	.word	0x08001153
 8000e2c:	08001153 	.word	0x08001153
 8000e30:	08001153 	.word	0x08001153
 8000e34:	080010f3 	.word	0x080010f3
 8000e38:	08001153 	.word	0x08001153
 8000e3c:	08001115 	.word	0x08001115
		case HOLA:
			esp01Presente = 1;
 8000e40:	4b8d      	ldr	r3, [pc, #564]	; (8001078 <iniciaInstruccion+0x2ac>)
 8000e42:	2201      	movs	r2, #1
 8000e44:	701a      	strb	r2, [r3, #0]
			cmdEsperado = NO_CMD;
 8000e46:	4b8d      	ldr	r3, [pc, #564]	; (800107c <iniciaInstruccion+0x2b0>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	701a      	strb	r2, [r3, #0]
			tx[0] = HOLA;
 8000e4c:	4b8c      	ldr	r3, [pc, #560]	; (8001080 <iniciaInstruccion+0x2b4>)
 8000e4e:	2201      	movs	r2, #1
 8000e50:	701a      	strb	r2, [r3, #0]
			tx[3] = '\0';
 8000e52:	4b8b      	ldr	r3, [pc, #556]	; (8001080 <iniciaInstruccion+0x2b4>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	70da      	strb	r2, [r3, #3]
			HAL_UART_Transmit_IT(uart_handler, tx, 4);
 8000e58:	4b8a      	ldr	r3, [pc, #552]	; (8001084 <iniciaInstruccion+0x2b8>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	2204      	movs	r2, #4
 8000e5e:	4988      	ldr	r1, [pc, #544]	; (8001080 <iniciaInstruccion+0x2b4>)
 8000e60:	4618      	mov	r0, r3
 8000e62:	f005 fc26 	bl	80066b2 <HAL_UART_Transmit_IT>
		break;
 8000e66:	e182      	b.n	800116e <iniciaInstruccion+0x3a2>

		case MODO:
			switch (p_rx[1]) {
 8000e68:	4b82      	ldr	r3, [pc, #520]	; (8001074 <iniciaInstruccion+0x2a8>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d002      	beq.n	8000e7a <iniciaInstruccion+0xae>
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	d014      	beq.n	8000ea2 <iniciaInstruccion+0xd6>
 8000e78:	e024      	b.n	8000ec4 <iniciaInstruccion+0xf8>
				case AUTOMATICO:
					modoFuncionamiento = AUTOMATICO;
 8000e7a:	4b83      	ldr	r3, [pc, #524]	; (8001088 <iniciaInstruccion+0x2bc>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	701a      	strb	r2, [r3, #0]
					flag_encoders = 0;
 8000e80:	4b82      	ldr	r3, [pc, #520]	; (800108c <iniciaInstruccion+0x2c0>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	701a      	strb	r2, [r3, #0]
					tx[0] = OK_;
 8000e86:	4b7e      	ldr	r3, [pc, #504]	; (8001080 <iniciaInstruccion+0x2b4>)
 8000e88:	2202      	movs	r2, #2
 8000e8a:	701a      	strb	r2, [r3, #0]
					tx[3] = '\0';
 8000e8c:	4b7c      	ldr	r3, [pc, #496]	; (8001080 <iniciaInstruccion+0x2b4>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	70da      	strb	r2, [r3, #3]
					HAL_UART_Transmit_IT(uart_handler, tx, 4);
 8000e92:	4b7c      	ldr	r3, [pc, #496]	; (8001084 <iniciaInstruccion+0x2b8>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	2204      	movs	r2, #4
 8000e98:	4979      	ldr	r1, [pc, #484]	; (8001080 <iniciaInstruccion+0x2b4>)
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f005 fc09 	bl	80066b2 <HAL_UART_Transmit_IT>
					break;
 8000ea0:	e01e      	b.n	8000ee0 <iniciaInstruccion+0x114>
				case MANUAL:
//					status_movimiento = QUIETO;
					modoFuncionamiento = MANUAL;
 8000ea2:	4b79      	ldr	r3, [pc, #484]	; (8001088 <iniciaInstruccion+0x2bc>)
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	701a      	strb	r2, [r3, #0]
					tx[0] = OK_;
 8000ea8:	4b75      	ldr	r3, [pc, #468]	; (8001080 <iniciaInstruccion+0x2b4>)
 8000eaa:	2202      	movs	r2, #2
 8000eac:	701a      	strb	r2, [r3, #0]
					tx[3] = '\0';
 8000eae:	4b74      	ldr	r3, [pc, #464]	; (8001080 <iniciaInstruccion+0x2b4>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	70da      	strb	r2, [r3, #3]
					HAL_UART_Transmit_IT(uart_handler, tx, 4);
 8000eb4:	4b73      	ldr	r3, [pc, #460]	; (8001084 <iniciaInstruccion+0x2b8>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2204      	movs	r2, #4
 8000eba:	4971      	ldr	r1, [pc, #452]	; (8001080 <iniciaInstruccion+0x2b4>)
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f005 fbf8 	bl	80066b2 <HAL_UART_Transmit_IT>
					break;
 8000ec2:	e00d      	b.n	8000ee0 <iniciaInstruccion+0x114>
				default:
					tx[0] = CMD_ERROR;
 8000ec4:	4b6e      	ldr	r3, [pc, #440]	; (8001080 <iniciaInstruccion+0x2b4>)
 8000ec6:	2204      	movs	r2, #4
 8000ec8:	701a      	strb	r2, [r3, #0]
					tx[3] = '\0';
 8000eca:	4b6d      	ldr	r3, [pc, #436]	; (8001080 <iniciaInstruccion+0x2b4>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	70da      	strb	r2, [r3, #3]
					HAL_UART_Transmit_IT(uart_handler, tx, 4);
 8000ed0:	4b6c      	ldr	r3, [pc, #432]	; (8001084 <iniciaInstruccion+0x2b8>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2204      	movs	r2, #4
 8000ed6:	496a      	ldr	r1, [pc, #424]	; (8001080 <iniciaInstruccion+0x2b4>)
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f005 fbea 	bl	80066b2 <HAL_UART_Transmit_IT>
			} //end switch p_rx[1]
		break;
 8000ede:	e146      	b.n	800116e <iniciaInstruccion+0x3a2>
 8000ee0:	e145      	b.n	800116e <iniciaInstruccion+0x3a2>
		case POSICION:
			cmdActual = POSICION;
 8000ee2:	4b6b      	ldr	r3, [pc, #428]	; (8001090 <iniciaInstruccion+0x2c4>)
 8000ee4:	2209      	movs	r2, #9
 8000ee6:	701a      	strb	r2, [r3, #0]
			tx[0] = COORD_X;
 8000ee8:	4b65      	ldr	r3, [pc, #404]	; (8001080 <iniciaInstruccion+0x2b4>)
 8000eea:	2206      	movs	r2, #6
 8000eec:	701a      	strb	r2, [r3, #0]
			tx[1] = posX_i16 >> 8;
 8000eee:	4b69      	ldr	r3, [pc, #420]	; (8001094 <iniciaInstruccion+0x2c8>)
 8000ef0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ef4:	121b      	asrs	r3, r3, #8
 8000ef6:	b21b      	sxth	r3, r3
 8000ef8:	b2da      	uxtb	r2, r3
 8000efa:	4b61      	ldr	r3, [pc, #388]	; (8001080 <iniciaInstruccion+0x2b4>)
 8000efc:	705a      	strb	r2, [r3, #1]
			tx[2] = posX_i16 & 0xFF;
 8000efe:	4b65      	ldr	r3, [pc, #404]	; (8001094 <iniciaInstruccion+0x2c8>)
 8000f00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f04:	b2da      	uxtb	r2, r3
 8000f06:	4b5e      	ldr	r3, [pc, #376]	; (8001080 <iniciaInstruccion+0x2b4>)
 8000f08:	709a      	strb	r2, [r3, #2]
			tx[3] = '\0';
 8000f0a:	4b5d      	ldr	r3, [pc, #372]	; (8001080 <iniciaInstruccion+0x2b4>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	70da      	strb	r2, [r3, #3]
			cmdEsperado = OK_;
 8000f10:	4b5a      	ldr	r3, [pc, #360]	; (800107c <iniciaInstruccion+0x2b0>)
 8000f12:	2202      	movs	r2, #2
 8000f14:	701a      	strb	r2, [r3, #0]
			cmdSecuencia = 2;
 8000f16:	4b60      	ldr	r3, [pc, #384]	; (8001098 <iniciaInstruccion+0x2cc>)
 8000f18:	2202      	movs	r2, #2
 8000f1a:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(uart_handler, tx, 4);
 8000f1c:	4b59      	ldr	r3, [pc, #356]	; (8001084 <iniciaInstruccion+0x2b8>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2204      	movs	r2, #4
 8000f22:	4957      	ldr	r1, [pc, #348]	; (8001080 <iniciaInstruccion+0x2b4>)
 8000f24:	4618      	mov	r0, r3
 8000f26:	f005 fbc4 	bl	80066b2 <HAL_UART_Transmit_IT>
		break;
 8000f2a:	e120      	b.n	800116e <iniciaInstruccion+0x3a2>
		case HOME:
			cmdActual = HOME;
 8000f2c:	4b58      	ldr	r3, [pc, #352]	; (8001090 <iniciaInstruccion+0x2c4>)
 8000f2e:	220b      	movs	r2, #11
 8000f30:	701a      	strb	r2, [r3, #0]
			tx[0] = COORD_X;
 8000f32:	4b53      	ldr	r3, [pc, #332]	; (8001080 <iniciaInstruccion+0x2b4>)
 8000f34:	2206      	movs	r2, #6
 8000f36:	701a      	strb	r2, [r3, #0]
			tx[1] = 0x0;
 8000f38:	4b51      	ldr	r3, [pc, #324]	; (8001080 <iniciaInstruccion+0x2b4>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	705a      	strb	r2, [r3, #1]
			tx[2] = posX_i16 & 0xFF;
 8000f3e:	4b55      	ldr	r3, [pc, #340]	; (8001094 <iniciaInstruccion+0x2c8>)
 8000f40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f44:	b2da      	uxtb	r2, r3
 8000f46:	4b4e      	ldr	r3, [pc, #312]	; (8001080 <iniciaInstruccion+0x2b4>)
 8000f48:	709a      	strb	r2, [r3, #2]
			tx[3] = '\0';
 8000f4a:	4b4d      	ldr	r3, [pc, #308]	; (8001080 <iniciaInstruccion+0x2b4>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	70da      	strb	r2, [r3, #3]
			cmdEsperado = OK_;
 8000f50:	4b4a      	ldr	r3, [pc, #296]	; (800107c <iniciaInstruccion+0x2b0>)
 8000f52:	2202      	movs	r2, #2
 8000f54:	701a      	strb	r2, [r3, #0]
			cmdSecuencia = 2;
 8000f56:	4b50      	ldr	r3, [pc, #320]	; (8001098 <iniciaInstruccion+0x2cc>)
 8000f58:	2202      	movs	r2, #2
 8000f5a:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(uart_handler, tx, 4);
 8000f5c:	4b49      	ldr	r3, [pc, #292]	; (8001084 <iniciaInstruccion+0x2b8>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2204      	movs	r2, #4
 8000f62:	4947      	ldr	r1, [pc, #284]	; (8001080 <iniciaInstruccion+0x2b4>)
 8000f64:	4618      	mov	r0, r3
 8000f66:	f005 fba4 	bl	80066b2 <HAL_UART_Transmit_IT>
		break;
 8000f6a:	e100      	b.n	800116e <iniciaInstruccion+0x3a2>
		case SET_HOME:
			cmdActual = SET_HOME;
 8000f6c:	4b48      	ldr	r3, [pc, #288]	; (8001090 <iniciaInstruccion+0x2c4>)
 8000f6e:	220d      	movs	r2, #13
 8000f70:	701a      	strb	r2, [r3, #0]
			tx[0] = OK_;
 8000f72:	4b43      	ldr	r3, [pc, #268]	; (8001080 <iniciaInstruccion+0x2b4>)
 8000f74:	2202      	movs	r2, #2
 8000f76:	701a      	strb	r2, [r3, #0]
			tx[3] = '\0';
 8000f78:	4b41      	ldr	r3, [pc, #260]	; (8001080 <iniciaInstruccion+0x2b4>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	70da      	strb	r2, [r3, #3]
			cmdEsperado = COORD_X;
 8000f7e:	4b3f      	ldr	r3, [pc, #252]	; (800107c <iniciaInstruccion+0x2b0>)
 8000f80:	2206      	movs	r2, #6
 8000f82:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(uart_handler, tx, 4);
 8000f84:	4b3f      	ldr	r3, [pc, #252]	; (8001084 <iniciaInstruccion+0x2b8>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2204      	movs	r2, #4
 8000f8a:	493d      	ldr	r1, [pc, #244]	; (8001080 <iniciaInstruccion+0x2b4>)
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f005 fb90 	bl	80066b2 <HAL_UART_Transmit_IT>
		break;
 8000f92:	e0ec      	b.n	800116e <iniciaInstruccion+0x3a2>
		case AVANCE:
			avance_cant += (uint16_t) (p_rx[2] + (p_rx[1] << 8));
 8000f94:	4b37      	ldr	r3, [pc, #220]	; (8001074 <iniciaInstruccion+0x2a8>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	3302      	adds	r3, #2
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	b29a      	uxth	r2, r3
 8000f9e:	4b35      	ldr	r3, [pc, #212]	; (8001074 <iniciaInstruccion+0x2a8>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	b29b      	uxth	r3, r3
 8000fa8:	021b      	lsls	r3, r3, #8
 8000faa:	b29b      	uxth	r3, r3
 8000fac:	4413      	add	r3, r2
 8000fae:	b29a      	uxth	r2, r3
 8000fb0:	4b3a      	ldr	r3, [pc, #232]	; (800109c <iniciaInstruccion+0x2d0>)
 8000fb2:	881b      	ldrh	r3, [r3, #0]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	b29a      	uxth	r2, r3
 8000fb8:	4b38      	ldr	r3, [pc, #224]	; (800109c <iniciaInstruccion+0x2d0>)
 8000fba:	801a      	strh	r2, [r3, #0]
			cmdEsperado = NO_CMD;
 8000fbc:	4b2f      	ldr	r3, [pc, #188]	; (800107c <iniciaInstruccion+0x2b0>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	701a      	strb	r2, [r3, #0]
			tx[0] = OK_;
 8000fc2:	4b2f      	ldr	r3, [pc, #188]	; (8001080 <iniciaInstruccion+0x2b4>)
 8000fc4:	2202      	movs	r2, #2
 8000fc6:	701a      	strb	r2, [r3, #0]
			tx[3] = '\0';
 8000fc8:	4b2d      	ldr	r3, [pc, #180]	; (8001080 <iniciaInstruccion+0x2b4>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	70da      	strb	r2, [r3, #3]
			HAL_UART_Transmit_IT(uart_handler, tx, 4);
 8000fce:	4b2d      	ldr	r3, [pc, #180]	; (8001084 <iniciaInstruccion+0x2b8>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	2204      	movs	r2, #4
 8000fd4:	492a      	ldr	r1, [pc, #168]	; (8001080 <iniciaInstruccion+0x2b4>)
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f005 fb6b 	bl	80066b2 <HAL_UART_Transmit_IT>
		break;
 8000fdc:	e0c7      	b.n	800116e <iniciaInstruccion+0x3a2>
		case RETROCEDE:
			retroceso_cant += (uint16_t) (p_rx[2] + (p_rx[1] << 8));
 8000fde:	4b25      	ldr	r3, [pc, #148]	; (8001074 <iniciaInstruccion+0x2a8>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	3302      	adds	r3, #2
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	b29a      	uxth	r2, r3
 8000fe8:	4b22      	ldr	r3, [pc, #136]	; (8001074 <iniciaInstruccion+0x2a8>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	3301      	adds	r3, #1
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	b29b      	uxth	r3, r3
 8000ff2:	021b      	lsls	r3, r3, #8
 8000ff4:	b29b      	uxth	r3, r3
 8000ff6:	4413      	add	r3, r2
 8000ff8:	b29a      	uxth	r2, r3
 8000ffa:	4b29      	ldr	r3, [pc, #164]	; (80010a0 <iniciaInstruccion+0x2d4>)
 8000ffc:	881b      	ldrh	r3, [r3, #0]
 8000ffe:	4413      	add	r3, r2
 8001000:	b29a      	uxth	r2, r3
 8001002:	4b27      	ldr	r3, [pc, #156]	; (80010a0 <iniciaInstruccion+0x2d4>)
 8001004:	801a      	strh	r2, [r3, #0]
			cmdEsperado = NO_CMD;
 8001006:	4b1d      	ldr	r3, [pc, #116]	; (800107c <iniciaInstruccion+0x2b0>)
 8001008:	2200      	movs	r2, #0
 800100a:	701a      	strb	r2, [r3, #0]
			tx[0] = OK_;
 800100c:	4b1c      	ldr	r3, [pc, #112]	; (8001080 <iniciaInstruccion+0x2b4>)
 800100e:	2202      	movs	r2, #2
 8001010:	701a      	strb	r2, [r3, #0]
			tx[3] = '\0';
 8001012:	4b1b      	ldr	r3, [pc, #108]	; (8001080 <iniciaInstruccion+0x2b4>)
 8001014:	2200      	movs	r2, #0
 8001016:	70da      	strb	r2, [r3, #3]
			HAL_UART_Transmit_IT(uart_handler, tx, 4);
 8001018:	4b1a      	ldr	r3, [pc, #104]	; (8001084 <iniciaInstruccion+0x2b8>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2204      	movs	r2, #4
 800101e:	4918      	ldr	r1, [pc, #96]	; (8001080 <iniciaInstruccion+0x2b4>)
 8001020:	4618      	mov	r0, r3
 8001022:	f005 fb46 	bl	80066b2 <HAL_UART_Transmit_IT>
		break;
 8001026:	e0a2      	b.n	800116e <iniciaInstruccion+0x3a2>
		case GIRO_IZQ:
			giroIzq_cant += (uint16_t) (p_rx[2] + (p_rx[1] << 8));
 8001028:	4b12      	ldr	r3, [pc, #72]	; (8001074 <iniciaInstruccion+0x2a8>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	3302      	adds	r3, #2
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	b29a      	uxth	r2, r3
 8001032:	4b10      	ldr	r3, [pc, #64]	; (8001074 <iniciaInstruccion+0x2a8>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	3301      	adds	r3, #1
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	b29b      	uxth	r3, r3
 800103c:	021b      	lsls	r3, r3, #8
 800103e:	b29b      	uxth	r3, r3
 8001040:	4413      	add	r3, r2
 8001042:	b29a      	uxth	r2, r3
 8001044:	4b17      	ldr	r3, [pc, #92]	; (80010a4 <iniciaInstruccion+0x2d8>)
 8001046:	881b      	ldrh	r3, [r3, #0]
 8001048:	4413      	add	r3, r2
 800104a:	b29a      	uxth	r2, r3
 800104c:	4b15      	ldr	r3, [pc, #84]	; (80010a4 <iniciaInstruccion+0x2d8>)
 800104e:	801a      	strh	r2, [r3, #0]
			cmdEsperado = NO_CMD;
 8001050:	4b0a      	ldr	r3, [pc, #40]	; (800107c <iniciaInstruccion+0x2b0>)
 8001052:	2200      	movs	r2, #0
 8001054:	701a      	strb	r2, [r3, #0]
			tx[0] = OK_;
 8001056:	4b0a      	ldr	r3, [pc, #40]	; (8001080 <iniciaInstruccion+0x2b4>)
 8001058:	2202      	movs	r2, #2
 800105a:	701a      	strb	r2, [r3, #0]
			tx[3] = '\0';
 800105c:	4b08      	ldr	r3, [pc, #32]	; (8001080 <iniciaInstruccion+0x2b4>)
 800105e:	2200      	movs	r2, #0
 8001060:	70da      	strb	r2, [r3, #3]
			HAL_UART_Transmit_IT(uart_handler, tx, 4);
 8001062:	4b08      	ldr	r3, [pc, #32]	; (8001084 <iniciaInstruccion+0x2b8>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	2204      	movs	r2, #4
 8001068:	4905      	ldr	r1, [pc, #20]	; (8001080 <iniciaInstruccion+0x2b4>)
 800106a:	4618      	mov	r0, r3
 800106c:	f005 fb21 	bl	80066b2 <HAL_UART_Transmit_IT>
		break;
 8001070:	e07d      	b.n	800116e <iniciaInstruccion+0x3a2>
 8001072:	bf00      	nop
 8001074:	20000038 	.word	0x20000038
 8001078:	200000ad 	.word	0x200000ad
 800107c:	2000003c 	.word	0x2000003c
 8001080:	20000034 	.word	0x20000034
 8001084:	20000030 	.word	0x20000030
 8001088:	20000000 	.word	0x20000000
 800108c:	200000f6 	.word	0x200000f6
 8001090:	2000003d 	.word	0x2000003d
 8001094:	200000d8 	.word	0x200000d8
 8001098:	2000003e 	.word	0x2000003e
 800109c:	200000c2 	.word	0x200000c2
 80010a0:	200000c4 	.word	0x200000c4
 80010a4:	200000c6 	.word	0x200000c6
		case GIRO_DER:
			giroDer_cant += (uint16_t) (p_rx[2] + (p_rx[1] << 8));
 80010a8:	4b32      	ldr	r3, [pc, #200]	; (8001174 <iniciaInstruccion+0x3a8>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	3302      	adds	r3, #2
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	b29a      	uxth	r2, r3
 80010b2:	4b30      	ldr	r3, [pc, #192]	; (8001174 <iniciaInstruccion+0x3a8>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	3301      	adds	r3, #1
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	b29b      	uxth	r3, r3
 80010bc:	021b      	lsls	r3, r3, #8
 80010be:	b29b      	uxth	r3, r3
 80010c0:	4413      	add	r3, r2
 80010c2:	b29a      	uxth	r2, r3
 80010c4:	4b2c      	ldr	r3, [pc, #176]	; (8001178 <iniciaInstruccion+0x3ac>)
 80010c6:	881b      	ldrh	r3, [r3, #0]
 80010c8:	4413      	add	r3, r2
 80010ca:	b29a      	uxth	r2, r3
 80010cc:	4b2a      	ldr	r3, [pc, #168]	; (8001178 <iniciaInstruccion+0x3ac>)
 80010ce:	801a      	strh	r2, [r3, #0]
			cmdEsperado = NO_CMD;
 80010d0:	4b2a      	ldr	r3, [pc, #168]	; (800117c <iniciaInstruccion+0x3b0>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	701a      	strb	r2, [r3, #0]
			tx[0] = OK_;
 80010d6:	4b2a      	ldr	r3, [pc, #168]	; (8001180 <iniciaInstruccion+0x3b4>)
 80010d8:	2202      	movs	r2, #2
 80010da:	701a      	strb	r2, [r3, #0]
			tx[3] = '\0';
 80010dc:	4b28      	ldr	r3, [pc, #160]	; (8001180 <iniciaInstruccion+0x3b4>)
 80010de:	2200      	movs	r2, #0
 80010e0:	70da      	strb	r2, [r3, #3]
			HAL_UART_Transmit_IT(uart_handler, tx, 4);
 80010e2:	4b28      	ldr	r3, [pc, #160]	; (8001184 <iniciaInstruccion+0x3b8>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2204      	movs	r2, #4
 80010e8:	4925      	ldr	r1, [pc, #148]	; (8001180 <iniciaInstruccion+0x3b4>)
 80010ea:	4618      	mov	r0, r3
 80010ec:	f005 fae1 	bl	80066b2 <HAL_UART_Transmit_IT>
		break;
 80010f0:	e03d      	b.n	800116e <iniciaInstruccion+0x3a2>
		case VEL_AVANCE:
			cmdEsperado = NO_CMD;
 80010f2:	4b22      	ldr	r3, [pc, #136]	; (800117c <iniciaInstruccion+0x3b0>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	701a      	strb	r2, [r3, #0]

//			mpu9265_Read_Accel(&mpu9265);

			tx[0] = VEL_AVANCE;
 80010f8:	4b21      	ldr	r3, [pc, #132]	; (8001180 <iniciaInstruccion+0x3b4>)
 80010fa:	2215      	movs	r2, #21
 80010fc:	701a      	strb	r2, [r3, #0]
//			tx[1] = (uint8_t)(mpu9265.Accel_X_RAW >> 8);
//			tx[2] = (uint8_t)(mpu9265.Accel_X_RAW & 0xFF);
			tx[3] = '\0';
 80010fe:	4b20      	ldr	r3, [pc, #128]	; (8001180 <iniciaInstruccion+0x3b4>)
 8001100:	2200      	movs	r2, #0
 8001102:	70da      	strb	r2, [r3, #3]
			HAL_UART_Transmit_IT(uart_handler, tx, 4);
 8001104:	4b1f      	ldr	r3, [pc, #124]	; (8001184 <iniciaInstruccion+0x3b8>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2204      	movs	r2, #4
 800110a:	491d      	ldr	r1, [pc, #116]	; (8001180 <iniciaInstruccion+0x3b4>)
 800110c:	4618      	mov	r0, r3
 800110e:	f005 fad0 	bl	80066b2 <HAL_UART_Transmit_IT>
		break;
 8001112:	e02c      	b.n	800116e <iniciaInstruccion+0x3a2>
		case DIST_GIRO:
			cmdEsperado = NO_CMD;
 8001114:	4b19      	ldr	r3, [pc, #100]	; (800117c <iniciaInstruccion+0x3b0>)
 8001116:	2200      	movs	r2, #0
 8001118:	701a      	strb	r2, [r3, #0]

			tx[0] = COORD_ANG;
 800111a:	4b19      	ldr	r3, [pc, #100]	; (8001180 <iniciaInstruccion+0x3b4>)
 800111c:	2208      	movs	r2, #8
 800111e:	701a      	strb	r2, [r3, #0]
			tx[1] = (uint8_t)(direccion_i16 >> 8);
 8001120:	4b19      	ldr	r3, [pc, #100]	; (8001188 <iniciaInstruccion+0x3bc>)
 8001122:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001126:	121b      	asrs	r3, r3, #8
 8001128:	b21b      	sxth	r3, r3
 800112a:	b2da      	uxtb	r2, r3
 800112c:	4b14      	ldr	r3, [pc, #80]	; (8001180 <iniciaInstruccion+0x3b4>)
 800112e:	705a      	strb	r2, [r3, #1]
			tx[2] = (uint8_t)(direccion_i16 & 0xFF);
 8001130:	4b15      	ldr	r3, [pc, #84]	; (8001188 <iniciaInstruccion+0x3bc>)
 8001132:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001136:	b2da      	uxtb	r2, r3
 8001138:	4b11      	ldr	r3, [pc, #68]	; (8001180 <iniciaInstruccion+0x3b4>)
 800113a:	709a      	strb	r2, [r3, #2]
			tx[3] = '\0';
 800113c:	4b10      	ldr	r3, [pc, #64]	; (8001180 <iniciaInstruccion+0x3b4>)
 800113e:	2200      	movs	r2, #0
 8001140:	70da      	strb	r2, [r3, #3]
			HAL_UART_Transmit_IT(uart_handler, tx, 4);
 8001142:	4b10      	ldr	r3, [pc, #64]	; (8001184 <iniciaInstruccion+0x3b8>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	2204      	movs	r2, #4
 8001148:	490d      	ldr	r1, [pc, #52]	; (8001180 <iniciaInstruccion+0x3b4>)
 800114a:	4618      	mov	r0, r3
 800114c:	f005 fab1 	bl	80066b2 <HAL_UART_Transmit_IT>
		break;
 8001150:	e00d      	b.n	800116e <iniciaInstruccion+0x3a2>
		default:
			tx[0] = CMD_ERROR;
 8001152:	4b0b      	ldr	r3, [pc, #44]	; (8001180 <iniciaInstruccion+0x3b4>)
 8001154:	2204      	movs	r2, #4
 8001156:	701a      	strb	r2, [r3, #0]
			tx[3] = '\0';
 8001158:	4b09      	ldr	r3, [pc, #36]	; (8001180 <iniciaInstruccion+0x3b4>)
 800115a:	2200      	movs	r2, #0
 800115c:	70da      	strb	r2, [r3, #3]
			HAL_UART_Transmit_IT(uart_handler, tx, 4);
 800115e:	4b09      	ldr	r3, [pc, #36]	; (8001184 <iniciaInstruccion+0x3b8>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2204      	movs	r2, #4
 8001164:	4906      	ldr	r1, [pc, #24]	; (8001180 <iniciaInstruccion+0x3b4>)
 8001166:	4618      	mov	r0, r3
 8001168:	f005 faa3 	bl	80066b2 <HAL_UART_Transmit_IT>
		break;
 800116c:	bf00      	nop
	} //end switch (cmdEsperado)

} //end iniciaInstruccion ()
 800116e:	bf00      	nop
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	20000038 	.word	0x20000038
 8001178:	200000c8 	.word	0x200000c8
 800117c:	2000003c 	.word	0x2000003c
 8001180:	20000034 	.word	0x20000034
 8001184:	20000030 	.word	0x20000030
 8001188:	200000c0 	.word	0x200000c0

0800118c <continuaInstruccion>:



void continuaInstruccion(void){
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0

	if (cmdEsperado != p_rx[0]){
 8001190:	4b91      	ldr	r3, [pc, #580]	; (80013d8 <continuaInstruccion+0x24c>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	781a      	ldrb	r2, [r3, #0]
 8001196:	4b91      	ldr	r3, [pc, #580]	; (80013dc <continuaInstruccion+0x250>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	429a      	cmp	r2, r3
 800119c:	d016      	beq.n	80011cc <continuaInstruccion+0x40>
		cmdActual = NO_CMD;
 800119e:	4b90      	ldr	r3, [pc, #576]	; (80013e0 <continuaInstruccion+0x254>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	701a      	strb	r2, [r3, #0]
		cmdEsperado = NO_CMD;
 80011a4:	4b8d      	ldr	r3, [pc, #564]	; (80013dc <continuaInstruccion+0x250>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	701a      	strb	r2, [r3, #0]
		cmdSecuencia = 0;
 80011aa:	4b8e      	ldr	r3, [pc, #568]	; (80013e4 <continuaInstruccion+0x258>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	701a      	strb	r2, [r3, #0]
		tx[0] = CMD_ERROR;
 80011b0:	4b8d      	ldr	r3, [pc, #564]	; (80013e8 <continuaInstruccion+0x25c>)
 80011b2:	2204      	movs	r2, #4
 80011b4:	701a      	strb	r2, [r3, #0]
		tx[3] = '\0';
 80011b6:	4b8c      	ldr	r3, [pc, #560]	; (80013e8 <continuaInstruccion+0x25c>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	70da      	strb	r2, [r3, #3]
		HAL_UART_Transmit_IT(uart_handler, tx, 4);
 80011bc:	4b8b      	ldr	r3, [pc, #556]	; (80013ec <continuaInstruccion+0x260>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2204      	movs	r2, #4
 80011c2:	4989      	ldr	r1, [pc, #548]	; (80013e8 <continuaInstruccion+0x25c>)
 80011c4:	4618      	mov	r0, r3
 80011c6:	f005 fa74 	bl	80066b2 <HAL_UART_Transmit_IT>
		return;
 80011ca:	e104      	b.n	80013d6 <continuaInstruccion+0x24a>
	}

	switch (cmdActual) {
 80011cc:	4b84      	ldr	r3, [pc, #528]	; (80013e0 <continuaInstruccion+0x254>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b0d      	cmp	r3, #13
 80011d2:	f000 80ac 	beq.w	800132e <continuaInstruccion+0x1a2>
 80011d6:	2b0d      	cmp	r3, #13
 80011d8:	f300 80f8 	bgt.w	80013cc <continuaInstruccion+0x240>
 80011dc:	2b09      	cmp	r3, #9
 80011de:	d002      	beq.n	80011e6 <continuaInstruccion+0x5a>
 80011e0:	2b0b      	cmp	r3, #11
 80011e2:	d058      	beq.n	8001296 <continuaInstruccion+0x10a>
				default:
				break;
			} //end switch cmdEsperado
		break;
		default:
		break;
 80011e4:	e0f2      	b.n	80013cc <continuaInstruccion+0x240>
			switch (cmdSecuencia){
 80011e6:	4b7f      	ldr	r3, [pc, #508]	; (80013e4 <continuaInstruccion+0x258>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d007      	beq.n	80011fe <continuaInstruccion+0x72>
 80011ee:	2b02      	cmp	r3, #2
 80011f0:	f300 80ee 	bgt.w	80013d0 <continuaInstruccion+0x244>
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d046      	beq.n	8001286 <continuaInstruccion+0xfa>
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d022      	beq.n	8001242 <continuaInstruccion+0xb6>
		break;
 80011fc:	e0e8      	b.n	80013d0 <continuaInstruccion+0x244>
					tx[0] = COORD_Y;
 80011fe:	4b7a      	ldr	r3, [pc, #488]	; (80013e8 <continuaInstruccion+0x25c>)
 8001200:	2207      	movs	r2, #7
 8001202:	701a      	strb	r2, [r3, #0]
					tx[1] = posY_i16 >> 8;
 8001204:	4b7a      	ldr	r3, [pc, #488]	; (80013f0 <continuaInstruccion+0x264>)
 8001206:	f9b3 3000 	ldrsh.w	r3, [r3]
 800120a:	121b      	asrs	r3, r3, #8
 800120c:	b21b      	sxth	r3, r3
 800120e:	b2da      	uxtb	r2, r3
 8001210:	4b75      	ldr	r3, [pc, #468]	; (80013e8 <continuaInstruccion+0x25c>)
 8001212:	705a      	strb	r2, [r3, #1]
					tx[2] = posY_i16 & 0xFF;
 8001214:	4b76      	ldr	r3, [pc, #472]	; (80013f0 <continuaInstruccion+0x264>)
 8001216:	f9b3 3000 	ldrsh.w	r3, [r3]
 800121a:	b2da      	uxtb	r2, r3
 800121c:	4b72      	ldr	r3, [pc, #456]	; (80013e8 <continuaInstruccion+0x25c>)
 800121e:	709a      	strb	r2, [r3, #2]
					tx[3] = '\0';
 8001220:	4b71      	ldr	r3, [pc, #452]	; (80013e8 <continuaInstruccion+0x25c>)
 8001222:	2200      	movs	r2, #0
 8001224:	70da      	strb	r2, [r3, #3]
					cmdSecuencia--;
 8001226:	4b6f      	ldr	r3, [pc, #444]	; (80013e4 <continuaInstruccion+0x258>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	3b01      	subs	r3, #1
 800122c:	b2da      	uxtb	r2, r3
 800122e:	4b6d      	ldr	r3, [pc, #436]	; (80013e4 <continuaInstruccion+0x258>)
 8001230:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_IT(uart_handler, tx, 4);
 8001232:	4b6e      	ldr	r3, [pc, #440]	; (80013ec <continuaInstruccion+0x260>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	2204      	movs	r2, #4
 8001238:	496b      	ldr	r1, [pc, #428]	; (80013e8 <continuaInstruccion+0x25c>)
 800123a:	4618      	mov	r0, r3
 800123c:	f005 fa39 	bl	80066b2 <HAL_UART_Transmit_IT>
				break;
 8001240:	e028      	b.n	8001294 <continuaInstruccion+0x108>
					tx[0] = COORD_ANG;
 8001242:	4b69      	ldr	r3, [pc, #420]	; (80013e8 <continuaInstruccion+0x25c>)
 8001244:	2208      	movs	r2, #8
 8001246:	701a      	strb	r2, [r3, #0]
					tx[1] = direccion_i16 >>8;
 8001248:	4b6a      	ldr	r3, [pc, #424]	; (80013f4 <continuaInstruccion+0x268>)
 800124a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800124e:	121b      	asrs	r3, r3, #8
 8001250:	b21b      	sxth	r3, r3
 8001252:	b2da      	uxtb	r2, r3
 8001254:	4b64      	ldr	r3, [pc, #400]	; (80013e8 <continuaInstruccion+0x25c>)
 8001256:	705a      	strb	r2, [r3, #1]
					tx[2] = direccion_i16 & 0xFF;
 8001258:	4b66      	ldr	r3, [pc, #408]	; (80013f4 <continuaInstruccion+0x268>)
 800125a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800125e:	b2da      	uxtb	r2, r3
 8001260:	4b61      	ldr	r3, [pc, #388]	; (80013e8 <continuaInstruccion+0x25c>)
 8001262:	709a      	strb	r2, [r3, #2]
					tx[3] = '\0';
 8001264:	4b60      	ldr	r3, [pc, #384]	; (80013e8 <continuaInstruccion+0x25c>)
 8001266:	2200      	movs	r2, #0
 8001268:	70da      	strb	r2, [r3, #3]
					cmdSecuencia--;
 800126a:	4b5e      	ldr	r3, [pc, #376]	; (80013e4 <continuaInstruccion+0x258>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	3b01      	subs	r3, #1
 8001270:	b2da      	uxtb	r2, r3
 8001272:	4b5c      	ldr	r3, [pc, #368]	; (80013e4 <continuaInstruccion+0x258>)
 8001274:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_IT(uart_handler, tx, 4);
 8001276:	4b5d      	ldr	r3, [pc, #372]	; (80013ec <continuaInstruccion+0x260>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	2204      	movs	r2, #4
 800127c:	495a      	ldr	r1, [pc, #360]	; (80013e8 <continuaInstruccion+0x25c>)
 800127e:	4618      	mov	r0, r3
 8001280:	f005 fa17 	bl	80066b2 <HAL_UART_Transmit_IT>
				break;
 8001284:	e006      	b.n	8001294 <continuaInstruccion+0x108>
					cmdActual = NO_CMD;
 8001286:	4b56      	ldr	r3, [pc, #344]	; (80013e0 <continuaInstruccion+0x254>)
 8001288:	2200      	movs	r2, #0
 800128a:	701a      	strb	r2, [r3, #0]
					cmdEsperado = NO_CMD;
 800128c:	4b53      	ldr	r3, [pc, #332]	; (80013dc <continuaInstruccion+0x250>)
 800128e:	2200      	movs	r2, #0
 8001290:	701a      	strb	r2, [r3, #0]
				break;
 8001292:	bf00      	nop
		break;
 8001294:	e09c      	b.n	80013d0 <continuaInstruccion+0x244>
			switch (cmdSecuencia){
 8001296:	4b53      	ldr	r3, [pc, #332]	; (80013e4 <continuaInstruccion+0x258>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	2b02      	cmp	r3, #2
 800129c:	d007      	beq.n	80012ae <continuaInstruccion+0x122>
 800129e:	2b02      	cmp	r3, #2
 80012a0:	f300 8098 	bgt.w	80013d4 <continuaInstruccion+0x248>
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d03a      	beq.n	800131e <continuaInstruccion+0x192>
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d01d      	beq.n	80012e8 <continuaInstruccion+0x15c>
		break;
 80012ac:	e092      	b.n	80013d4 <continuaInstruccion+0x248>
					tx[0] = COORD_Y;
 80012ae:	4b4e      	ldr	r3, [pc, #312]	; (80013e8 <continuaInstruccion+0x25c>)
 80012b0:	2207      	movs	r2, #7
 80012b2:	701a      	strb	r2, [r3, #0]
					tx[1] = 0x0;
 80012b4:	4b4c      	ldr	r3, [pc, #304]	; (80013e8 <continuaInstruccion+0x25c>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	705a      	strb	r2, [r3, #1]
					tx[2] = posY_i16 & 0xFF;
 80012ba:	4b4d      	ldr	r3, [pc, #308]	; (80013f0 <continuaInstruccion+0x264>)
 80012bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012c0:	b2da      	uxtb	r2, r3
 80012c2:	4b49      	ldr	r3, [pc, #292]	; (80013e8 <continuaInstruccion+0x25c>)
 80012c4:	709a      	strb	r2, [r3, #2]
					tx[3] = '\0';
 80012c6:	4b48      	ldr	r3, [pc, #288]	; (80013e8 <continuaInstruccion+0x25c>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	70da      	strb	r2, [r3, #3]
					cmdSecuencia--;
 80012cc:	4b45      	ldr	r3, [pc, #276]	; (80013e4 <continuaInstruccion+0x258>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	3b01      	subs	r3, #1
 80012d2:	b2da      	uxtb	r2, r3
 80012d4:	4b43      	ldr	r3, [pc, #268]	; (80013e4 <continuaInstruccion+0x258>)
 80012d6:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_IT(uart_handler, tx, 4);
 80012d8:	4b44      	ldr	r3, [pc, #272]	; (80013ec <continuaInstruccion+0x260>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2204      	movs	r2, #4
 80012de:	4942      	ldr	r1, [pc, #264]	; (80013e8 <continuaInstruccion+0x25c>)
 80012e0:	4618      	mov	r0, r3
 80012e2:	f005 f9e6 	bl	80066b2 <HAL_UART_Transmit_IT>
				break;
 80012e6:	e021      	b.n	800132c <continuaInstruccion+0x1a0>
					tx[0] = COORD_ANG;
 80012e8:	4b3f      	ldr	r3, [pc, #252]	; (80013e8 <continuaInstruccion+0x25c>)
 80012ea:	2208      	movs	r2, #8
 80012ec:	701a      	strb	r2, [r3, #0]
					tx[1] = 0x0;
 80012ee:	4b3e      	ldr	r3, [pc, #248]	; (80013e8 <continuaInstruccion+0x25c>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	705a      	strb	r2, [r3, #1]
					tx[2] = pos_ang;
 80012f4:	4b40      	ldr	r3, [pc, #256]	; (80013f8 <continuaInstruccion+0x26c>)
 80012f6:	781a      	ldrb	r2, [r3, #0]
 80012f8:	4b3b      	ldr	r3, [pc, #236]	; (80013e8 <continuaInstruccion+0x25c>)
 80012fa:	709a      	strb	r2, [r3, #2]
					tx[3] = '\0';
 80012fc:	4b3a      	ldr	r3, [pc, #232]	; (80013e8 <continuaInstruccion+0x25c>)
 80012fe:	2200      	movs	r2, #0
 8001300:	70da      	strb	r2, [r3, #3]
					cmdSecuencia--;
 8001302:	4b38      	ldr	r3, [pc, #224]	; (80013e4 <continuaInstruccion+0x258>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	3b01      	subs	r3, #1
 8001308:	b2da      	uxtb	r2, r3
 800130a:	4b36      	ldr	r3, [pc, #216]	; (80013e4 <continuaInstruccion+0x258>)
 800130c:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_IT(uart_handler, tx, 4);
 800130e:	4b37      	ldr	r3, [pc, #220]	; (80013ec <continuaInstruccion+0x260>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2204      	movs	r2, #4
 8001314:	4934      	ldr	r1, [pc, #208]	; (80013e8 <continuaInstruccion+0x25c>)
 8001316:	4618      	mov	r0, r3
 8001318:	f005 f9cb 	bl	80066b2 <HAL_UART_Transmit_IT>
				break;
 800131c:	e006      	b.n	800132c <continuaInstruccion+0x1a0>
					cmdActual = NO_CMD;
 800131e:	4b30      	ldr	r3, [pc, #192]	; (80013e0 <continuaInstruccion+0x254>)
 8001320:	2200      	movs	r2, #0
 8001322:	701a      	strb	r2, [r3, #0]
					cmdEsperado = NO_CMD;
 8001324:	4b2d      	ldr	r3, [pc, #180]	; (80013dc <continuaInstruccion+0x250>)
 8001326:	2200      	movs	r2, #0
 8001328:	701a      	strb	r2, [r3, #0]
				break;
 800132a:	bf00      	nop
		break;
 800132c:	e052      	b.n	80013d4 <continuaInstruccion+0x248>
			switch (cmdEsperado){
 800132e:	4b2b      	ldr	r3, [pc, #172]	; (80013dc <continuaInstruccion+0x250>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	2b08      	cmp	r3, #8
 8001334:	d032      	beq.n	800139c <continuaInstruccion+0x210>
 8001336:	2b08      	cmp	r3, #8
 8001338:	dc46      	bgt.n	80013c8 <continuaInstruccion+0x23c>
 800133a:	2b06      	cmp	r3, #6
 800133c:	d002      	beq.n	8001344 <continuaInstruccion+0x1b8>
 800133e:	2b07      	cmp	r3, #7
 8001340:	d016      	beq.n	8001370 <continuaInstruccion+0x1e4>
				break;
 8001342:	e041      	b.n	80013c8 <continuaInstruccion+0x23c>
					pos_x = p_rx[1];//recibi la coordenada X
 8001344:	4b24      	ldr	r3, [pc, #144]	; (80013d8 <continuaInstruccion+0x24c>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	785a      	ldrb	r2, [r3, #1]
 800134a:	4b2c      	ldr	r3, [pc, #176]	; (80013fc <continuaInstruccion+0x270>)
 800134c:	701a      	strb	r2, [r3, #0]
					cmdEsperado = COORD_Y;
 800134e:	4b23      	ldr	r3, [pc, #140]	; (80013dc <continuaInstruccion+0x250>)
 8001350:	2207      	movs	r2, #7
 8001352:	701a      	strb	r2, [r3, #0]
					tx[0] = OK_;
 8001354:	4b24      	ldr	r3, [pc, #144]	; (80013e8 <continuaInstruccion+0x25c>)
 8001356:	2202      	movs	r2, #2
 8001358:	701a      	strb	r2, [r3, #0]
					tx[3] = '\0';
 800135a:	4b23      	ldr	r3, [pc, #140]	; (80013e8 <continuaInstruccion+0x25c>)
 800135c:	2200      	movs	r2, #0
 800135e:	70da      	strb	r2, [r3, #3]
					HAL_UART_Transmit_IT(uart_handler, tx, 4);
 8001360:	4b22      	ldr	r3, [pc, #136]	; (80013ec <continuaInstruccion+0x260>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2204      	movs	r2, #4
 8001366:	4920      	ldr	r1, [pc, #128]	; (80013e8 <continuaInstruccion+0x25c>)
 8001368:	4618      	mov	r0, r3
 800136a:	f005 f9a2 	bl	80066b2 <HAL_UART_Transmit_IT>
				break;
 800136e:	e02c      	b.n	80013ca <continuaInstruccion+0x23e>
					pos_y = p_rx[1];//recibi la coordenada Y
 8001370:	4b19      	ldr	r3, [pc, #100]	; (80013d8 <continuaInstruccion+0x24c>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	785a      	ldrb	r2, [r3, #1]
 8001376:	4b22      	ldr	r3, [pc, #136]	; (8001400 <continuaInstruccion+0x274>)
 8001378:	701a      	strb	r2, [r3, #0]
					cmdEsperado = COORD_ANG;
 800137a:	4b18      	ldr	r3, [pc, #96]	; (80013dc <continuaInstruccion+0x250>)
 800137c:	2208      	movs	r2, #8
 800137e:	701a      	strb	r2, [r3, #0]
					tx[0] = OK_;
 8001380:	4b19      	ldr	r3, [pc, #100]	; (80013e8 <continuaInstruccion+0x25c>)
 8001382:	2202      	movs	r2, #2
 8001384:	701a      	strb	r2, [r3, #0]
					tx[3] = '\0';
 8001386:	4b18      	ldr	r3, [pc, #96]	; (80013e8 <continuaInstruccion+0x25c>)
 8001388:	2200      	movs	r2, #0
 800138a:	70da      	strb	r2, [r3, #3]
					HAL_UART_Transmit_IT(uart_handler, tx, 4);
 800138c:	4b17      	ldr	r3, [pc, #92]	; (80013ec <continuaInstruccion+0x260>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2204      	movs	r2, #4
 8001392:	4915      	ldr	r1, [pc, #84]	; (80013e8 <continuaInstruccion+0x25c>)
 8001394:	4618      	mov	r0, r3
 8001396:	f005 f98c 	bl	80066b2 <HAL_UART_Transmit_IT>
				break;
 800139a:	e016      	b.n	80013ca <continuaInstruccion+0x23e>
					pos_ang = p_rx[1];//recibi el angulo
 800139c:	4b0e      	ldr	r3, [pc, #56]	; (80013d8 <continuaInstruccion+0x24c>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	785a      	ldrb	r2, [r3, #1]
 80013a2:	4b15      	ldr	r3, [pc, #84]	; (80013f8 <continuaInstruccion+0x26c>)
 80013a4:	701a      	strb	r2, [r3, #0]
					cmdEsperado = NO_CMD;
 80013a6:	4b0d      	ldr	r3, [pc, #52]	; (80013dc <continuaInstruccion+0x250>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	701a      	strb	r2, [r3, #0]
					tx[0] = OK_;
 80013ac:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <continuaInstruccion+0x25c>)
 80013ae:	2202      	movs	r2, #2
 80013b0:	701a      	strb	r2, [r3, #0]
					tx[3] = '\0';
 80013b2:	4b0d      	ldr	r3, [pc, #52]	; (80013e8 <continuaInstruccion+0x25c>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	70da      	strb	r2, [r3, #3]
					HAL_UART_Transmit_IT(uart_handler, tx, 4);
 80013b8:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <continuaInstruccion+0x260>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2204      	movs	r2, #4
 80013be:	490a      	ldr	r1, [pc, #40]	; (80013e8 <continuaInstruccion+0x25c>)
 80013c0:	4618      	mov	r0, r3
 80013c2:	f005 f976 	bl	80066b2 <HAL_UART_Transmit_IT>
				break;
 80013c6:	e000      	b.n	80013ca <continuaInstruccion+0x23e>
				break;
 80013c8:	bf00      	nop
		break;
 80013ca:	e004      	b.n	80013d6 <continuaInstruccion+0x24a>
		break;
 80013cc:	bf00      	nop
 80013ce:	e002      	b.n	80013d6 <continuaInstruccion+0x24a>
		break;
 80013d0:	bf00      	nop
 80013d2:	e000      	b.n	80013d6 <continuaInstruccion+0x24a>
		break;
 80013d4:	bf00      	nop
	} //end switch cmdActual


} //end continuaInstruccion()
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	20000038 	.word	0x20000038
 80013dc:	2000003c 	.word	0x2000003c
 80013e0:	2000003d 	.word	0x2000003d
 80013e4:	2000003e 	.word	0x2000003e
 80013e8:	20000034 	.word	0x20000034
 80013ec:	20000030 	.word	0x20000030
 80013f0:	200000da 	.word	0x200000da
 80013f4:	200000c0 	.word	0x200000c0
 80013f8:	200000cc 	.word	0x200000cc
 80013fc:	200000ca 	.word	0x200000ca
 8001400:	200000cb 	.word	0x200000cb

08001404 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 800140a:	463b      	mov	r3, r7
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001412:	4b14      	ldr	r3, [pc, #80]	; (8001464 <MX_DAC_Init+0x60>)
 8001414:	4a14      	ldr	r2, [pc, #80]	; (8001468 <MX_DAC_Init+0x64>)
 8001416:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001418:	4812      	ldr	r0, [pc, #72]	; (8001464 <MX_DAC_Init+0x60>)
 800141a:	f001 ffdc 	bl	80033d6 <HAL_DAC_Init>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001424:	f001 f848 	bl	80024b8 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001428:	2300      	movs	r3, #0
 800142a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800142c:	2300      	movs	r3, #0
 800142e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001430:	463b      	mov	r3, r7
 8001432:	2200      	movs	r2, #0
 8001434:	4619      	mov	r1, r3
 8001436:	480b      	ldr	r0, [pc, #44]	; (8001464 <MX_DAC_Init+0x60>)
 8001438:	f001 ffef 	bl	800341a <HAL_DAC_ConfigChannel>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001442:	f001 f839 	bl	80024b8 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001446:	463b      	mov	r3, r7
 8001448:	2210      	movs	r2, #16
 800144a:	4619      	mov	r1, r3
 800144c:	4805      	ldr	r0, [pc, #20]	; (8001464 <MX_DAC_Init+0x60>)
 800144e:	f001 ffe4 	bl	800341a <HAL_DAC_ConfigChannel>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8001458:	f001 f82e 	bl	80024b8 <Error_Handler>
  }

}
 800145c:	bf00      	nop
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	20000040 	.word	0x20000040
 8001468:	40007400 	.word	0x40007400

0800146c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b08a      	sub	sp, #40	; 0x28
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001474:	f107 0314 	add.w	r3, r7, #20
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	60da      	str	r2, [r3, #12]
 8001482:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a17      	ldr	r2, [pc, #92]	; (80014e8 <HAL_DAC_MspInit+0x7c>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d127      	bne.n	80014de <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	613b      	str	r3, [r7, #16]
 8001492:	4b16      	ldr	r3, [pc, #88]	; (80014ec <HAL_DAC_MspInit+0x80>)
 8001494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001496:	4a15      	ldr	r2, [pc, #84]	; (80014ec <HAL_DAC_MspInit+0x80>)
 8001498:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800149c:	6413      	str	r3, [r2, #64]	; 0x40
 800149e:	4b13      	ldr	r3, [pc, #76]	; (80014ec <HAL_DAC_MspInit+0x80>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80014a6:	613b      	str	r3, [r7, #16]
 80014a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	60fb      	str	r3, [r7, #12]
 80014ae:	4b0f      	ldr	r3, [pc, #60]	; (80014ec <HAL_DAC_MspInit+0x80>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	4a0e      	ldr	r2, [pc, #56]	; (80014ec <HAL_DAC_MspInit+0x80>)
 80014b4:	f043 0301 	orr.w	r3, r3, #1
 80014b8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ba:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <HAL_DAC_MspInit+0x80>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80014c6:	2330      	movs	r3, #48	; 0x30
 80014c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014ca:	2303      	movs	r3, #3
 80014cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ce:	2300      	movs	r3, #0
 80014d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d2:	f107 0314 	add.w	r3, r7, #20
 80014d6:	4619      	mov	r1, r3
 80014d8:	4805      	ldr	r0, [pc, #20]	; (80014f0 <HAL_DAC_MspInit+0x84>)
 80014da:	f002 f80d 	bl	80034f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 80014de:	bf00      	nop
 80014e0:	3728      	adds	r7, #40	; 0x28
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40007400 	.word	0x40007400
 80014ec:	40023800 	.word	0x40023800
 80014f0:	40020000 	.word	0x40020000

080014f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b08c      	sub	sp, #48	; 0x30
 80014f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fa:	f107 031c 	add.w	r3, r7, #28
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	605a      	str	r2, [r3, #4]
 8001504:	609a      	str	r2, [r3, #8]
 8001506:	60da      	str	r2, [r3, #12]
 8001508:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	61bb      	str	r3, [r7, #24]
 800150e:	4b45      	ldr	r3, [pc, #276]	; (8001624 <MX_GPIO_Init+0x130>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	4a44      	ldr	r2, [pc, #272]	; (8001624 <MX_GPIO_Init+0x130>)
 8001514:	f043 0320 	orr.w	r3, r3, #32
 8001518:	6313      	str	r3, [r2, #48]	; 0x30
 800151a:	4b42      	ldr	r3, [pc, #264]	; (8001624 <MX_GPIO_Init+0x130>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	f003 0320 	and.w	r3, r3, #32
 8001522:	61bb      	str	r3, [r7, #24]
 8001524:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	617b      	str	r3, [r7, #20]
 800152a:	4b3e      	ldr	r3, [pc, #248]	; (8001624 <MX_GPIO_Init+0x130>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	4a3d      	ldr	r2, [pc, #244]	; (8001624 <MX_GPIO_Init+0x130>)
 8001530:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001534:	6313      	str	r3, [r2, #48]	; 0x30
 8001536:	4b3b      	ldr	r3, [pc, #236]	; (8001624 <MX_GPIO_Init+0x130>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800153e:	617b      	str	r3, [r7, #20]
 8001540:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	613b      	str	r3, [r7, #16]
 8001546:	4b37      	ldr	r3, [pc, #220]	; (8001624 <MX_GPIO_Init+0x130>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	4a36      	ldr	r2, [pc, #216]	; (8001624 <MX_GPIO_Init+0x130>)
 800154c:	f043 0301 	orr.w	r3, r3, #1
 8001550:	6313      	str	r3, [r2, #48]	; 0x30
 8001552:	4b34      	ldr	r3, [pc, #208]	; (8001624 <MX_GPIO_Init+0x130>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	613b      	str	r3, [r7, #16]
 800155c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	60fb      	str	r3, [r7, #12]
 8001562:	4b30      	ldr	r3, [pc, #192]	; (8001624 <MX_GPIO_Init+0x130>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	4a2f      	ldr	r2, [pc, #188]	; (8001624 <MX_GPIO_Init+0x130>)
 8001568:	f043 0308 	orr.w	r3, r3, #8
 800156c:	6313      	str	r3, [r2, #48]	; 0x30
 800156e:	4b2d      	ldr	r3, [pc, #180]	; (8001624 <MX_GPIO_Init+0x130>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	f003 0308 	and.w	r3, r3, #8
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	60bb      	str	r3, [r7, #8]
 800157e:	4b29      	ldr	r3, [pc, #164]	; (8001624 <MX_GPIO_Init+0x130>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	4a28      	ldr	r2, [pc, #160]	; (8001624 <MX_GPIO_Init+0x130>)
 8001584:	f043 0304 	orr.w	r3, r3, #4
 8001588:	6313      	str	r3, [r2, #48]	; 0x30
 800158a:	4b26      	ldr	r3, [pc, #152]	; (8001624 <MX_GPIO_Init+0x130>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	f003 0304 	and.w	r3, r3, #4
 8001592:	60bb      	str	r3, [r7, #8]
 8001594:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	607b      	str	r3, [r7, #4]
 800159a:	4b22      	ldr	r3, [pc, #136]	; (8001624 <MX_GPIO_Init+0x130>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	4a21      	ldr	r2, [pc, #132]	; (8001624 <MX_GPIO_Init+0x130>)
 80015a0:	f043 0302 	orr.w	r3, r3, #2
 80015a4:	6313      	str	r3, [r2, #48]	; 0x30
 80015a6:	4b1f      	ldr	r3, [pc, #124]	; (8001624 <MX_GPIO_Init+0x130>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	f003 0302 	and.w	r3, r3, #2
 80015ae:	607b      	str	r3, [r7, #4]
 80015b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_in4_Pin|OUT_in3_Pin|OUT_in2_Pin, GPIO_PIN_RESET);
 80015b2:	2200      	movs	r2, #0
 80015b4:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 80015b8:	481b      	ldr	r0, [pc, #108]	; (8001628 <MX_GPIO_Init+0x134>)
 80015ba:	f002 f961 	bl	8003880 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, GPIO_PIN_RESET);
 80015be:	2200      	movs	r2, #0
 80015c0:	2101      	movs	r1, #1
 80015c2:	481a      	ldr	r0, [pc, #104]	; (800162c <MX_GPIO_Init+0x138>)
 80015c4:	f002 f95c 	bl	8003880 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = OUT_in4_Pin|OUT_in3_Pin|OUT_in2_Pin;
 80015c8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80015cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ce:	2301      	movs	r3, #1
 80015d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d6:	2300      	movs	r3, #0
 80015d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015da:	f107 031c 	add.w	r3, r7, #28
 80015de:	4619      	mov	r1, r3
 80015e0:	4811      	ldr	r0, [pc, #68]	; (8001628 <MX_GPIO_Init+0x134>)
 80015e2:	f001 ff89 	bl	80034f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OUT_in1_Pin;
 80015e6:	2301      	movs	r3, #1
 80015e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ea:	2301      	movs	r3, #1
 80015ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ee:	2300      	movs	r3, #0
 80015f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f2:	2300      	movs	r3, #0
 80015f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OUT_in1_GPIO_Port, &GPIO_InitStruct);
 80015f6:	f107 031c 	add.w	r3, r7, #28
 80015fa:	4619      	mov	r1, r3
 80015fc:	480b      	ldr	r0, [pc, #44]	; (800162c <MX_GPIO_Init+0x138>)
 80015fe:	f001 ff7b 	bl	80034f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = IN_sensorL_Pin|IN_sensorR_Pin;
 8001602:	230a      	movs	r3, #10
 8001604:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001606:	2300      	movs	r3, #0
 8001608:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800160a:	2301      	movs	r3, #1
 800160c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800160e:	f107 031c 	add.w	r3, r7, #28
 8001612:	4619      	mov	r1, r3
 8001614:	4805      	ldr	r0, [pc, #20]	; (800162c <MX_GPIO_Init+0x138>)
 8001616:	f001 ff6f 	bl	80034f8 <HAL_GPIO_Init>

}
 800161a:	bf00      	nop
 800161c:	3730      	adds	r7, #48	; 0x30
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40023800 	.word	0x40023800
 8001628:	40020800 	.word	0x40020800
 800162c:	40020c00 	.word	0x40020c00

08001630 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001634:	4b1b      	ldr	r3, [pc, #108]	; (80016a4 <MX_I2C1_Init+0x74>)
 8001636:	4a1c      	ldr	r2, [pc, #112]	; (80016a8 <MX_I2C1_Init+0x78>)
 8001638:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800163a:	4b1a      	ldr	r3, [pc, #104]	; (80016a4 <MX_I2C1_Init+0x74>)
 800163c:	4a1b      	ldr	r2, [pc, #108]	; (80016ac <MX_I2C1_Init+0x7c>)
 800163e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001640:	4b18      	ldr	r3, [pc, #96]	; (80016a4 <MX_I2C1_Init+0x74>)
 8001642:	2200      	movs	r2, #0
 8001644:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001646:	4b17      	ldr	r3, [pc, #92]	; (80016a4 <MX_I2C1_Init+0x74>)
 8001648:	2200      	movs	r2, #0
 800164a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800164c:	4b15      	ldr	r3, [pc, #84]	; (80016a4 <MX_I2C1_Init+0x74>)
 800164e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001652:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001654:	4b13      	ldr	r3, [pc, #76]	; (80016a4 <MX_I2C1_Init+0x74>)
 8001656:	2200      	movs	r2, #0
 8001658:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800165a:	4b12      	ldr	r3, [pc, #72]	; (80016a4 <MX_I2C1_Init+0x74>)
 800165c:	2200      	movs	r2, #0
 800165e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001660:	4b10      	ldr	r3, [pc, #64]	; (80016a4 <MX_I2C1_Init+0x74>)
 8001662:	2200      	movs	r2, #0
 8001664:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001666:	4b0f      	ldr	r3, [pc, #60]	; (80016a4 <MX_I2C1_Init+0x74>)
 8001668:	2200      	movs	r2, #0
 800166a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800166c:	480d      	ldr	r0, [pc, #52]	; (80016a4 <MX_I2C1_Init+0x74>)
 800166e:	f002 f921 	bl	80038b4 <HAL_I2C_Init>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001678:	f000 ff1e 	bl	80024b8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800167c:	2100      	movs	r1, #0
 800167e:	4809      	ldr	r0, [pc, #36]	; (80016a4 <MX_I2C1_Init+0x74>)
 8001680:	f003 f8d7 	bl	8004832 <HAL_I2CEx_ConfigAnalogFilter>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800168a:	f000 ff15 	bl	80024b8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800168e:	2100      	movs	r1, #0
 8001690:	4804      	ldr	r0, [pc, #16]	; (80016a4 <MX_I2C1_Init+0x74>)
 8001692:	f003 f90a 	bl	80048aa <HAL_I2CEx_ConfigDigitalFilter>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 800169c:	f000 ff0c 	bl	80024b8 <Error_Handler>
  }

}
 80016a0:	bf00      	nop
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	20000054 	.word	0x20000054
 80016a8:	40005400 	.word	0x40005400
 80016ac:	00061a80 	.word	0x00061a80

080016b0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b08a      	sub	sp, #40	; 0x28
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b8:	f107 0314 	add.w	r3, r7, #20
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	609a      	str	r2, [r3, #8]
 80016c4:	60da      	str	r2, [r3, #12]
 80016c6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a19      	ldr	r2, [pc, #100]	; (8001734 <HAL_I2C_MspInit+0x84>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d12b      	bne.n	800172a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	613b      	str	r3, [r7, #16]
 80016d6:	4b18      	ldr	r3, [pc, #96]	; (8001738 <HAL_I2C_MspInit+0x88>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	4a17      	ldr	r2, [pc, #92]	; (8001738 <HAL_I2C_MspInit+0x88>)
 80016dc:	f043 0302 	orr.w	r3, r3, #2
 80016e0:	6313      	str	r3, [r2, #48]	; 0x30
 80016e2:	4b15      	ldr	r3, [pc, #84]	; (8001738 <HAL_I2C_MspInit+0x88>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	613b      	str	r3, [r7, #16]
 80016ec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016ee:	23c0      	movs	r3, #192	; 0xc0
 80016f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016f2:	2312      	movs	r3, #18
 80016f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016f6:	2301      	movs	r3, #1
 80016f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016fa:	2303      	movs	r3, #3
 80016fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016fe:	2304      	movs	r3, #4
 8001700:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001702:	f107 0314 	add.w	r3, r7, #20
 8001706:	4619      	mov	r1, r3
 8001708:	480c      	ldr	r0, [pc, #48]	; (800173c <HAL_I2C_MspInit+0x8c>)
 800170a:	f001 fef5 	bl	80034f8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	60fb      	str	r3, [r7, #12]
 8001712:	4b09      	ldr	r3, [pc, #36]	; (8001738 <HAL_I2C_MspInit+0x88>)
 8001714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001716:	4a08      	ldr	r2, [pc, #32]	; (8001738 <HAL_I2C_MspInit+0x88>)
 8001718:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800171c:	6413      	str	r3, [r2, #64]	; 0x40
 800171e:	4b06      	ldr	r3, [pc, #24]	; (8001738 <HAL_I2C_MspInit+0x88>)
 8001720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001722:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800172a:	bf00      	nop
 800172c:	3728      	adds	r7, #40	; 0x28
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40005400 	.word	0x40005400
 8001738:	40023800 	.word	0x40023800
 800173c:	40020400 	.word	0x40020400

08001740 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001744:	f001 fca0 	bl	8003088 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001748:	f000 f8c8 	bl	80018dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800174c:	f7ff fed2 	bl	80014f4 <MX_GPIO_Init>
  MX_DAC_Init();
 8001750:	f7ff fe58 	bl	8001404 <MX_DAC_Init>
  MX_TIM2_Init();
 8001754:	f001 f89a 	bl	800288c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001758:	f001 f8ea 	bl	8002930 <MX_TIM3_Init>
  MX_TIM4_Init();
 800175c:	f001 f93c 	bl	80029d8 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001760:	f001 f9ba 	bl	8002ad8 <MX_TIM5_Init>
  MX_UART7_Init();
 8001764:	f001 fbec 	bl	8002f40 <MX_UART7_Init>
  MX_TIM7_Init();
 8001768:	f001 fa60 	bl	8002c2c <MX_TIM7_Init>
  MX_I2C1_Init();
 800176c:	f7ff ff60 	bl	8001630 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim7); //desborda cada 10 ms.
 8001770:	4848      	ldr	r0, [pc, #288]	; (8001894 <main+0x154>)
 8001772:	f003 fe06 	bl	8005382 <HAL_TIM_Base_Start_IT>

  HAL_TIM_Base_Start(&htim2); //encoder R.
 8001776:	4848      	ldr	r0, [pc, #288]	; (8001898 <main+0x158>)
 8001778:	f003 fddf 	bl	800533a <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3); //encoder L.
 800177c:	4847      	ldr	r0, [pc, #284]	; (800189c <main+0x15c>)
 800177e:	f003 fddc 	bl	800533a <HAL_TIM_Base_Start>

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1); //rueda izquierda.
 8001782:	2100      	movs	r1, #0
 8001784:	4846      	ldr	r0, [pc, #280]	; (80018a0 <main+0x160>)
 8001786:	f003 fe55 	bl	8005434 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2); //rueda derecha.
 800178a:	2104      	movs	r1, #4
 800178c:	4844      	ldr	r0, [pc, #272]	; (80018a0 <main+0x160>)
 800178e:	f003 fe51 	bl	8005434 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start(&htim5); //control del SR-04.
 8001792:	4844      	ldr	r0, [pc, #272]	; (80018a4 <main+0x164>)
 8001794:	f003 fdd1 	bl	800533a <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1); //para el pulso del trigger.
 8001798:	2100      	movs	r1, #0
 800179a:	4842      	ldr	r0, [pc, #264]	; (80018a4 <main+0x164>)
 800179c:	f003 fe4a 	bl	8005434 <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_3); //para capturar el eco (flanco ascendente).
 80017a0:	2108      	movs	r1, #8
 80017a2:	4840      	ldr	r0, [pc, #256]	; (80018a4 <main+0x164>)
 80017a4:	f003 feba 	bl	800551c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_4); //para capturar el eco (flanco descendente).
 80017a8:	210c      	movs	r1, #12
 80017aa:	483e      	ldr	r0, [pc, #248]	; (80018a4 <main+0x164>)
 80017ac:	f003 feb6 	bl	800551c <HAL_TIM_IC_Start_IT>

  mpu9265_Init(&hi2c1);
 80017b0:	483d      	ldr	r0, [pc, #244]	; (80018a8 <main+0x168>)
 80017b2:	f000 fe89 	bl	80024c8 <mpu9265_Init>
//		  HAL_UART_Transmit_IT(&huart7, txUart, 4);
//	  }
//
//  }

  init_controlRxTx (&huart7);
 80017b6:	483d      	ldr	r0, [pc, #244]	; (80018ac <main+0x16c>)
 80017b8:	f7ff faba 	bl	8000d30 <init_controlRxTx>

  HAL_UART_Receive_IT(&huart7, rxUart, 4);
 80017bc:	2204      	movs	r2, #4
 80017be:	493c      	ldr	r1, [pc, #240]	; (80018b0 <main+0x170>)
 80017c0:	483a      	ldr	r0, [pc, #232]	; (80018ac <main+0x16c>)
 80017c2:	f004 ffbb 	bl	800673c <HAL_UART_Receive_IT>

  if (!esp01Presente) {
 80017c6:	4b3b      	ldr	r3, [pc, #236]	; (80018b4 <main+0x174>)
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d103      	bne.n	80017d6 <main+0x96>
	  modoFuncionamiento = AUTOMATICO;
 80017ce:	4b3a      	ldr	r3, [pc, #232]	; (80018b8 <main+0x178>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	701a      	strb	r2, [r3, #0]
 80017d4:	e002      	b.n	80017dc <main+0x9c>
  }else{
	  modoFuncionamiento = MANUAL;
 80017d6:	4b38      	ldr	r3, [pc, #224]	; (80018b8 <main+0x178>)
 80017d8:	2201      	movs	r2, #1
 80017da:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if (flag_cmd != 0){
 80017dc:	4b37      	ldr	r3, [pc, #220]	; (80018bc <main+0x17c>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d005      	beq.n	80017f0 <main+0xb0>
		  controlRxTxUART(rxUart);
 80017e4:	4832      	ldr	r0, [pc, #200]	; (80018b0 <main+0x170>)
 80017e6:	f7ff fab3 	bl	8000d50 <controlRxTxUART>
		  flag_cmd = 0;
 80017ea:	4b34      	ldr	r3, [pc, #208]	; (80018bc <main+0x17c>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	701a      	strb	r2, [r3, #0]
	  }

	  SR_04();
 80017f0:	f000 f93e 	bl	8001a70 <SR_04>
	  sensores();
 80017f4:	f000 f982 	bl	8001afc <sensores>
	  modo_funcionamiento();
 80017f8:	f000 fe4a 	bl	8002490 <modo_funcionamiento>
	  encoders();
 80017fc:	f000 fce6 	bl	80021cc <encoders>
	  velocidades(velL, velR);
 8001800:	4b2f      	ldr	r3, [pc, #188]	; (80018c0 <main+0x180>)
 8001802:	f993 3000 	ldrsb.w	r3, [r3]
 8001806:	4a2f      	ldr	r2, [pc, #188]	; (80018c4 <main+0x184>)
 8001808:	f992 2000 	ldrsb.w	r2, [r2]
 800180c:	4611      	mov	r1, r2
 800180e:	4618      	mov	r0, r3
 8001810:	f000 fc5e 	bl	80020d0 <velocidades>


	  if (desbordeTIM7 != 0){
 8001814:	4b2c      	ldr	r3, [pc, #176]	; (80018c8 <main+0x188>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d0df      	beq.n	80017dc <main+0x9c>
		  periodo_Encoder += desbordeTIM7;
 800181c:	4b2b      	ldr	r3, [pc, #172]	; (80018cc <main+0x18c>)
 800181e:	781a      	ldrb	r2, [r3, #0]
 8001820:	4b29      	ldr	r3, [pc, #164]	; (80018c8 <main+0x188>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	4413      	add	r3, r2
 8001826:	b2da      	uxtb	r2, r3
 8001828:	4b28      	ldr	r3, [pc, #160]	; (80018cc <main+0x18c>)
 800182a:	701a      	strb	r2, [r3, #0]
		  periodo_SR04 += desbordeTIM7;
 800182c:	4b28      	ldr	r3, [pc, #160]	; (80018d0 <main+0x190>)
 800182e:	781a      	ldrb	r2, [r3, #0]
 8001830:	4b25      	ldr	r3, [pc, #148]	; (80018c8 <main+0x188>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	4413      	add	r3, r2
 8001836:	b2da      	uxtb	r2, r3
 8001838:	4b25      	ldr	r3, [pc, #148]	; (80018d0 <main+0x190>)
 800183a:	701a      	strb	r2, [r3, #0]
		  periodo_pos += desbordeTIM7;
 800183c:	4b25      	ldr	r3, [pc, #148]	; (80018d4 <main+0x194>)
 800183e:	781a      	ldrb	r2, [r3, #0]
 8001840:	4b21      	ldr	r3, [pc, #132]	; (80018c8 <main+0x188>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	4413      	add	r3, r2
 8001846:	b2da      	uxtb	r2, r3
 8001848:	4b22      	ldr	r3, [pc, #136]	; (80018d4 <main+0x194>)
 800184a:	701a      	strb	r2, [r3, #0]
		  desbordeTIM7 = 0;
 800184c:	4b1e      	ldr	r3, [pc, #120]	; (80018c8 <main+0x188>)
 800184e:	2200      	movs	r2, #0
 8001850:	701a      	strb	r2, [r3, #0]
		  if (periodo_Encoder > 21){ // en 10 * ms
 8001852:	4b1e      	ldr	r3, [pc, #120]	; (80018cc <main+0x18c>)
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	2b15      	cmp	r3, #21
 8001858:	d905      	bls.n	8001866 <main+0x126>
			  flag_encoders = 1;
 800185a:	4b1f      	ldr	r3, [pc, #124]	; (80018d8 <main+0x198>)
 800185c:	2201      	movs	r2, #1
 800185e:	701a      	strb	r2, [r3, #0]
			  periodo_Encoder = 0;
 8001860:	4b1a      	ldr	r3, [pc, #104]	; (80018cc <main+0x18c>)
 8001862:	2200      	movs	r2, #0
 8001864:	701a      	strb	r2, [r3, #0]
		  }
		  if (periodo_SR04 > 21){
 8001866:	4b1a      	ldr	r3, [pc, #104]	; (80018d0 <main+0x190>)
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	2b15      	cmp	r3, #21
 800186c:	d907      	bls.n	800187e <main+0x13e>
			  TRIG_SR04;
 800186e:	4b0d      	ldr	r3, [pc, #52]	; (80018a4 <main+0x164>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f06f 020a 	mvn.w	r2, #10
 8001876:	625a      	str	r2, [r3, #36]	; 0x24
			  periodo_SR04 = 0;
 8001878:	4b15      	ldr	r3, [pc, #84]	; (80018d0 <main+0x190>)
 800187a:	2200      	movs	r2, #0
 800187c:	701a      	strb	r2, [r3, #0]
		  }
		  if (periodo_pos > 21){
 800187e:	4b15      	ldr	r3, [pc, #84]	; (80018d4 <main+0x194>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	2b15      	cmp	r3, #21
 8001884:	d9aa      	bls.n	80017dc <main+0x9c>
			  posicionamiento();
 8001886:	f000 fd53 	bl	8002330 <posicionamiento>
			  periodo_pos = 0;
 800188a:	4b12      	ldr	r3, [pc, #72]	; (80018d4 <main+0x194>)
 800188c:	2200      	movs	r2, #0
 800188e:	701a      	strb	r2, [r3, #0]
	  if (flag_cmd != 0){
 8001890:	e7a4      	b.n	80017dc <main+0x9c>
 8001892:	bf00      	nop
 8001894:	20000210 	.word	0x20000210
 8001898:	20000110 	.word	0x20000110
 800189c:	20000150 	.word	0x20000150
 80018a0:	20000190 	.word	0x20000190
 80018a4:	200001d0 	.word	0x200001d0
 80018a8:	20000054 	.word	0x20000054
 80018ac:	20000250 	.word	0x20000250
 80018b0:	200000a8 	.word	0x200000a8
 80018b4:	200000ad 	.word	0x200000ad
 80018b8:	20000000 	.word	0x20000000
 80018bc:	200000ac 	.word	0x200000ac
 80018c0:	20000002 	.word	0x20000002
 80018c4:	20000003 	.word	0x20000003
 80018c8:	200000e0 	.word	0x200000e0
 80018cc:	200000e1 	.word	0x200000e1
 80018d0:	200000e2 	.word	0x200000e2
 80018d4:	20000001 	.word	0x20000001
 80018d8:	200000f6 	.word	0x200000f6

080018dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b094      	sub	sp, #80	; 0x50
 80018e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018e2:	f107 0320 	add.w	r3, r7, #32
 80018e6:	2230      	movs	r2, #48	; 0x30
 80018e8:	2100      	movs	r1, #0
 80018ea:	4618      	mov	r0, r3
 80018ec:	f005 fea4 	bl	8007638 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018f0:	f107 030c 	add.w	r3, r7, #12
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	605a      	str	r2, [r3, #4]
 80018fa:	609a      	str	r2, [r3, #8]
 80018fc:	60da      	str	r2, [r3, #12]
 80018fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001900:	2300      	movs	r3, #0
 8001902:	60bb      	str	r3, [r7, #8]
 8001904:	4b2c      	ldr	r3, [pc, #176]	; (80019b8 <SystemClock_Config+0xdc>)
 8001906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001908:	4a2b      	ldr	r2, [pc, #172]	; (80019b8 <SystemClock_Config+0xdc>)
 800190a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800190e:	6413      	str	r3, [r2, #64]	; 0x40
 8001910:	4b29      	ldr	r3, [pc, #164]	; (80019b8 <SystemClock_Config+0xdc>)
 8001912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001914:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001918:	60bb      	str	r3, [r7, #8]
 800191a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800191c:	2300      	movs	r3, #0
 800191e:	607b      	str	r3, [r7, #4]
 8001920:	4b26      	ldr	r3, [pc, #152]	; (80019bc <SystemClock_Config+0xe0>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a25      	ldr	r2, [pc, #148]	; (80019bc <SystemClock_Config+0xe0>)
 8001926:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800192a:	6013      	str	r3, [r2, #0]
 800192c:	4b23      	ldr	r3, [pc, #140]	; (80019bc <SystemClock_Config+0xe0>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001934:	607b      	str	r3, [r7, #4]
 8001936:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001938:	2309      	movs	r3, #9
 800193a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800193c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001940:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001942:	2301      	movs	r3, #1
 8001944:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001946:	2302      	movs	r3, #2
 8001948:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800194a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800194e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001950:	2304      	movs	r3, #4
 8001952:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001954:	23b4      	movs	r3, #180	; 0xb4
 8001956:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001958:	2302      	movs	r3, #2
 800195a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800195c:	2304      	movs	r3, #4
 800195e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001960:	f107 0320 	add.w	r3, r7, #32
 8001964:	4618      	mov	r0, r3
 8001966:	f003 f82f 	bl	80049c8 <HAL_RCC_OscConfig>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001970:	f000 fda2 	bl	80024b8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001974:	f002 ffd8 	bl	8004928 <HAL_PWREx_EnableOverDrive>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800197e:	f000 fd9b 	bl	80024b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001982:	230f      	movs	r3, #15
 8001984:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001986:	2302      	movs	r3, #2
 8001988:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800198a:	2300      	movs	r3, #0
 800198c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800198e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001992:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001994:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001998:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800199a:	f107 030c 	add.w	r3, r7, #12
 800199e:	2105      	movs	r1, #5
 80019a0:	4618      	mov	r0, r3
 80019a2:	f003 fa7f 	bl	8004ea4 <HAL_RCC_ClockConfig>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80019ac:	f000 fd84 	bl	80024b8 <Error_Handler>
  }
}
 80019b0:	bf00      	nop
 80019b2:	3750      	adds	r7, #80	; 0x50
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	40023800 	.word	0x40023800
 80019bc:	40007000 	.word	0x40007000

080019c0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
	if (htim->Instance==TIM7){
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a07      	ldr	r2, [pc, #28]	; (80019ec <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d105      	bne.n	80019de <HAL_TIM_PeriodElapsedCallback+0x1e>
		desbordeTIM7++;
 80019d2:	4b07      	ldr	r3, [pc, #28]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	3301      	adds	r3, #1
 80019d8:	b2da      	uxtb	r2, r3
 80019da:	4b05      	ldr	r3, [pc, #20]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80019dc:	701a      	strb	r2, [r3, #0]
	}
}
 80019de:	bf00      	nop
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	40001400 	.word	0x40001400
 80019f0:	200000e0 	.word	0x200000e0

080019f4 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3){
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	7f1b      	ldrb	r3, [r3, #28]
 8001a00:	2b04      	cmp	r3, #4
 8001a02:	d10a      	bne.n	8001a1a <HAL_TIM_IC_CaptureCallback+0x26>
		ic1 = htim->Instance->CCR3;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a0a:	4a0e      	ldr	r2, [pc, #56]	; (8001a44 <HAL_TIM_IC_CaptureCallback+0x50>)
 8001a0c:	6013      	str	r3, [r2, #0]
		flancoEco++;
 8001a0e:	4b0e      	ldr	r3, [pc, #56]	; (8001a48 <HAL_TIM_IC_CaptureCallback+0x54>)
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	3301      	adds	r3, #1
 8001a14:	b2da      	uxtb	r2, r3
 8001a16:	4b0c      	ldr	r3, [pc, #48]	; (8001a48 <HAL_TIM_IC_CaptureCallback+0x54>)
 8001a18:	701a      	strb	r2, [r3, #0]
	}

	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4){
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	7f1b      	ldrb	r3, [r3, #28]
 8001a1e:	2b08      	cmp	r3, #8
 8001a20:	d10a      	bne.n	8001a38 <HAL_TIM_IC_CaptureCallback+0x44>
		ic2 = htim->Instance->CCR4;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a28:	4a08      	ldr	r2, [pc, #32]	; (8001a4c <HAL_TIM_IC_CaptureCallback+0x58>)
 8001a2a:	6013      	str	r3, [r2, #0]
		flancoEco++;
 8001a2c:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <HAL_TIM_IC_CaptureCallback+0x54>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	3301      	adds	r3, #1
 8001a32:	b2da      	uxtb	r2, r3
 8001a34:	4b04      	ldr	r3, [pc, #16]	; (8001a48 <HAL_TIM_IC_CaptureCallback+0x54>)
 8001a36:	701a      	strb	r2, [r3, #0]
	}
}
 8001a38:	bf00      	nop
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr
 8001a44:	200000e4 	.word	0x200000e4
 8001a48:	200000ec 	.word	0x200000ec
 8001a4c:	200000e8 	.word	0x200000e8

08001a50 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
	flag_cmd = 1;
 8001a58:	4b04      	ldr	r3, [pc, #16]	; (8001a6c <HAL_UART_RxCpltCallback+0x1c>)
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	701a      	strb	r2, [r3, #0]
}
 8001a5e:	bf00      	nop
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	200000ac 	.word	0x200000ac

08001a70 <SR_04>:


void SR_04 (void){
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0

	switch (flancoEco){
 8001a74:	4b1b      	ldr	r3, [pc, #108]	; (8001ae4 <SR_04+0x74>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	dc02      	bgt.n	8001a82 <SR_04+0x12>
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	da2c      	bge.n	8001ada <SR_04+0x6a>
 8001a80:	e027      	b.n	8001ad2 <SR_04+0x62>
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d125      	bne.n	8001ad2 <SR_04+0x62>
		case 0:
		case 1:
			return;
		case 2:
			cuentaPulsos = (int32_t)(ic2 - ic1);
 8001a86:	4b18      	ldr	r3, [pc, #96]	; (8001ae8 <SR_04+0x78>)
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	4b18      	ldr	r3, [pc, #96]	; (8001aec <SR_04+0x7c>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	461a      	mov	r2, r3
 8001a92:	4b17      	ldr	r3, [pc, #92]	; (8001af0 <SR_04+0x80>)
 8001a94:	601a      	str	r2, [r3, #0]
			if (cuentaPulsos < 23310){
 8001a96:	4b16      	ldr	r3, [pc, #88]	; (8001af0 <SR_04+0x80>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f645 320d 	movw	r2, #23309	; 0x5b0d
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	dc0f      	bgt.n	8001ac2 <SR_04+0x52>
				distanciaSR04 = cuentaPulsos * 34 / 2000;
 8001aa2:	4b13      	ldr	r3, [pc, #76]	; (8001af0 <SR_04+0x80>)
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	011b      	lsls	r3, r3, #4
 8001aaa:	4413      	add	r3, r2
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	4a11      	ldr	r2, [pc, #68]	; (8001af4 <SR_04+0x84>)
 8001ab0:	fb82 1203 	smull	r1, r2, r2, r3
 8001ab4:	11d2      	asrs	r2, r2, #7
 8001ab6:	17db      	asrs	r3, r3, #31
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	b29a      	uxth	r2, r3
 8001abc:	4b0e      	ldr	r3, [pc, #56]	; (8001af8 <SR_04+0x88>)
 8001abe:	801a      	strh	r2, [r3, #0]
 8001ac0:	e003      	b.n	8001aca <SR_04+0x5a>
			}else{
				distanciaSR04 = 400;
 8001ac2:	4b0d      	ldr	r3, [pc, #52]	; (8001af8 <SR_04+0x88>)
 8001ac4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001ac8:	801a      	strh	r2, [r3, #0]
			}
			flancoEco = 0;
 8001aca:	4b06      	ldr	r3, [pc, #24]	; (8001ae4 <SR_04+0x74>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	701a      	strb	r2, [r3, #0]
		break;
 8001ad0:	e004      	b.n	8001adc <SR_04+0x6c>
		default:
			flancoEco = 0;
 8001ad2:	4b04      	ldr	r3, [pc, #16]	; (8001ae4 <SR_04+0x74>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	701a      	strb	r2, [r3, #0]
		break;
 8001ad8:	e000      	b.n	8001adc <SR_04+0x6c>
			return;
 8001ada:	bf00      	nop
	} //end switch flancoEco

} //end SR_04()
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr
 8001ae4:	200000ec 	.word	0x200000ec
 8001ae8:	200000e8 	.word	0x200000e8
 8001aec:	200000e4 	.word	0x200000e4
 8001af0:	200000f0 	.word	0x200000f0
 8001af4:	10624dd3 	.word	0x10624dd3
 8001af8:	200000f4 	.word	0x200000f4

08001afc <sensores>:

void sensores (void){
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
	//sensores_dist = SI << 2 | SF << 1 | SD (logica negativa)
	SI = (HAL_GPIO_ReadPin(IN_sensorL_GPIO_Port, IN_sensorL_Pin)) ;
 8001b00:	2102      	movs	r1, #2
 8001b02:	4817      	ldr	r0, [pc, #92]	; (8001b60 <sensores+0x64>)
 8001b04:	f001 fea4 	bl	8003850 <HAL_GPIO_ReadPin>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	4b15      	ldr	r3, [pc, #84]	; (8001b64 <sensores+0x68>)
 8001b0e:	701a      	strb	r2, [r3, #0]
	SD = HAL_GPIO_ReadPin(IN_sensorR_GPIO_Port, IN_sensorR_Pin);
 8001b10:	2108      	movs	r1, #8
 8001b12:	4813      	ldr	r0, [pc, #76]	; (8001b60 <sensores+0x64>)
 8001b14:	f001 fe9c 	bl	8003850 <HAL_GPIO_ReadPin>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	4b12      	ldr	r3, [pc, #72]	; (8001b68 <sensores+0x6c>)
 8001b1e:	701a      	strb	r2, [r3, #0]
	if (distanciaSR04 < 25) SF = 0; else SF = 1;
 8001b20:	4b12      	ldr	r3, [pc, #72]	; (8001b6c <sensores+0x70>)
 8001b22:	881b      	ldrh	r3, [r3, #0]
 8001b24:	2b18      	cmp	r3, #24
 8001b26:	d803      	bhi.n	8001b30 <sensores+0x34>
 8001b28:	4b11      	ldr	r3, [pc, #68]	; (8001b70 <sensores+0x74>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	701a      	strb	r2, [r3, #0]
 8001b2e:	e002      	b.n	8001b36 <sensores+0x3a>
 8001b30:	4b0f      	ldr	r3, [pc, #60]	; (8001b70 <sensores+0x74>)
 8001b32:	2201      	movs	r2, #1
 8001b34:	701a      	strb	r2, [r3, #0]

	sensores_dist = SI << 2 | SF << 1 | SD;
 8001b36:	4b0b      	ldr	r3, [pc, #44]	; (8001b64 <sensores+0x68>)
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	b25a      	sxtb	r2, r3
 8001b3e:	4b0c      	ldr	r3, [pc, #48]	; (8001b70 <sensores+0x74>)
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	b25b      	sxtb	r3, r3
 8001b46:	4313      	orrs	r3, r2
 8001b48:	b25a      	sxtb	r2, r3
 8001b4a:	4b07      	ldr	r3, [pc, #28]	; (8001b68 <sensores+0x6c>)
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	b25b      	sxtb	r3, r3
 8001b50:	4313      	orrs	r3, r2
 8001b52:	b25b      	sxtb	r3, r3
 8001b54:	b2da      	uxtb	r2, r3
 8001b56:	4b07      	ldr	r3, [pc, #28]	; (8001b74 <sensores+0x78>)
 8001b58:	701a      	strb	r2, [r3, #0]
} //end sensores()
 8001b5a:	bf00      	nop
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40020c00 	.word	0x40020c00
 8001b64:	200000dc 	.word	0x200000dc
 8001b68:	200000de 	.word	0x200000de
 8001b6c:	200000f4 	.word	0x200000f4
 8001b70:	200000dd 	.word	0x200000dd
 8001b74:	200000df 	.word	0x200000df

08001b78 <movimientoLibre>:
void aceleracion (void){
	if (velL < velLFinal) velL++;

} //end aceleracion()

void movimientoLibre (void){
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0

	if (avance_cant != 0) avance_cant = 0;
 8001b7c:	4b6f      	ldr	r3, [pc, #444]	; (8001d3c <movimientoLibre+0x1c4>)
 8001b7e:	881b      	ldrh	r3, [r3, #0]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d002      	beq.n	8001b8a <movimientoLibre+0x12>
 8001b84:	4b6d      	ldr	r3, [pc, #436]	; (8001d3c <movimientoLibre+0x1c4>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	801a      	strh	r2, [r3, #0]
	if (retroceso_cant != 0) retroceso_cant = 0;
 8001b8a:	4b6d      	ldr	r3, [pc, #436]	; (8001d40 <movimientoLibre+0x1c8>)
 8001b8c:	881b      	ldrh	r3, [r3, #0]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d002      	beq.n	8001b98 <movimientoLibre+0x20>
 8001b92:	4b6b      	ldr	r3, [pc, #428]	; (8001d40 <movimientoLibre+0x1c8>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	801a      	strh	r2, [r3, #0]
	if (giroIzq_cant != 0) giroIzq_cant = 0;
 8001b98:	4b6a      	ldr	r3, [pc, #424]	; (8001d44 <movimientoLibre+0x1cc>)
 8001b9a:	881b      	ldrh	r3, [r3, #0]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d002      	beq.n	8001ba6 <movimientoLibre+0x2e>
 8001ba0:	4b68      	ldr	r3, [pc, #416]	; (8001d44 <movimientoLibre+0x1cc>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	801a      	strh	r2, [r3, #0]
	if (giroDer_cant != 0) giroDer_cant = 0;
 8001ba6:	4b68      	ldr	r3, [pc, #416]	; (8001d48 <movimientoLibre+0x1d0>)
 8001ba8:	881b      	ldrh	r3, [r3, #0]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d002      	beq.n	8001bb4 <movimientoLibre+0x3c>
 8001bae:	4b66      	ldr	r3, [pc, #408]	; (8001d48 <movimientoLibre+0x1d0>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	801a      	strh	r2, [r3, #0]

	switch (status_movimiento) {
 8001bb4:	4b65      	ldr	r3, [pc, #404]	; (8001d4c <movimientoLibre+0x1d4>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	2b06      	cmp	r3, #6
 8001bba:	f200 80b8 	bhi.w	8001d2e <movimientoLibre+0x1b6>
 8001bbe:	a201      	add	r2, pc, #4	; (adr r2, 8001bc4 <movimientoLibre+0x4c>)
 8001bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bc4:	08001be1 	.word	0x08001be1
 8001bc8:	08001bf5 	.word	0x08001bf5
 8001bcc:	08001ca5 	.word	0x08001ca5
 8001bd0:	08001c51 	.word	0x08001c51
 8001bd4:	08001c7b 	.word	0x08001c7b
 8001bd8:	08001cb9 	.word	0x08001cb9
 8001bdc:	08001cf5 	.word	0x08001cf5
//			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 0);
//
//			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 0);
//			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 0);

			velL = 0;
 8001be0:	4b5b      	ldr	r3, [pc, #364]	; (8001d50 <movimientoLibre+0x1d8>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	701a      	strb	r2, [r3, #0]
			velR = 0;
 8001be6:	4b5b      	ldr	r3, [pc, #364]	; (8001d54 <movimientoLibre+0x1dc>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	701a      	strb	r2, [r3, #0]
			//periodo_Encoder = 0;

			status_movimiento = AVANZANDO;
 8001bec:	4b57      	ldr	r3, [pc, #348]	; (8001d4c <movimientoLibre+0x1d4>)
 8001bee:	2201      	movs	r2, #1
 8001bf0:	701a      	strb	r2, [r3, #0]
		break;
 8001bf2:	e09d      	b.n	8001d30 <movimientoLibre+0x1b8>
//			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 1);
//
//			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 0);
//			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 0);

			velL = 5;
 8001bf4:	4b56      	ldr	r3, [pc, #344]	; (8001d50 <movimientoLibre+0x1d8>)
 8001bf6:	2205      	movs	r2, #5
 8001bf8:	701a      	strb	r2, [r3, #0]
			velR = 5;
 8001bfa:	4b56      	ldr	r3, [pc, #344]	; (8001d54 <movimientoLibre+0x1dc>)
 8001bfc:	2205      	movs	r2, #5
 8001bfe:	701a      	strb	r2, [r3, #0]

			switch (sensores_dist) {
 8001c00:	4b55      	ldr	r3, [pc, #340]	; (8001d58 <movimientoLibre+0x1e0>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	2b06      	cmp	r3, #6
 8001c06:	d821      	bhi.n	8001c4c <movimientoLibre+0xd4>
 8001c08:	a201      	add	r2, pc, #4	; (adr r2, 8001c10 <movimientoLibre+0x98>)
 8001c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c0e:	bf00      	nop
 8001c10:	08001c35 	.word	0x08001c35
 8001c14:	08001c45 	.word	0x08001c45
 8001c18:	08001c4d 	.word	0x08001c4d
 8001c1c:	08001c3d 	.word	0x08001c3d
 8001c20:	08001c35 	.word	0x08001c35
 8001c24:	08001c35 	.word	0x08001c35
 8001c28:	08001c2d 	.word	0x08001c2d
				case 0b110:
					//agregado para prueba
					//status_movimiento = PIVOTE_IZQ_AVAN;
					status_movimiento = ROTANDO_IZQ;
 8001c2c:	4b47      	ldr	r3, [pc, #284]	; (8001d4c <movimientoLibre+0x1d4>)
 8001c2e:	2203      	movs	r2, #3
 8001c30:	701a      	strb	r2, [r3, #0]

				break;
 8001c32:	e00c      	b.n	8001c4e <movimientoLibre+0xd6>
				case 0b101:
				case 0b100:
				case 0b000:
					status_movimiento = ROTANDO_IZQ;
 8001c34:	4b45      	ldr	r3, [pc, #276]	; (8001d4c <movimientoLibre+0x1d4>)
 8001c36:	2203      	movs	r2, #3
 8001c38:	701a      	strb	r2, [r3, #0]
				break;
 8001c3a:	e008      	b.n	8001c4e <movimientoLibre+0xd6>
				case 0b011:
					//agregado para prueba
					//status_movimiento = PIVOTE_DER_AVAN;
					status_movimiento = ROTANDO_DER;
 8001c3c:	4b43      	ldr	r3, [pc, #268]	; (8001d4c <movimientoLibre+0x1d4>)
 8001c3e:	2204      	movs	r2, #4
 8001c40:	701a      	strb	r2, [r3, #0]
				break;
 8001c42:	e004      	b.n	8001c4e <movimientoLibre+0xd6>
				case 0b001:
					status_movimiento = ROTANDO_DER;
 8001c44:	4b41      	ldr	r3, [pc, #260]	; (8001d4c <movimientoLibre+0x1d4>)
 8001c46:	2204      	movs	r2, #4
 8001c48:	701a      	strb	r2, [r3, #0]
				break;
 8001c4a:	e000      	b.n	8001c4e <movimientoLibre+0xd6>
				default:
				break;
 8001c4c:	bf00      	nop
			} //end switch sensores_dist

		break;
 8001c4e:	e06f      	b.n	8001d30 <movimientoLibre+0x1b8>
//			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 1);
//
//			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 1);
//			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 0);

			velL = -5;
 8001c50:	4b3f      	ldr	r3, [pc, #252]	; (8001d50 <movimientoLibre+0x1d8>)
 8001c52:	22fb      	movs	r2, #251	; 0xfb
 8001c54:	701a      	strb	r2, [r3, #0]
			velR = 5;
 8001c56:	4b3f      	ldr	r3, [pc, #252]	; (8001d54 <movimientoLibre+0x1dc>)
 8001c58:	2205      	movs	r2, #5
 8001c5a:	701a      	strb	r2, [r3, #0]

			switch (sensores_dist){
 8001c5c:	4b3e      	ldr	r3, [pc, #248]	; (8001d58 <movimientoLibre+0x1e0>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	2b03      	cmp	r3, #3
 8001c62:	d005      	beq.n	8001c70 <movimientoLibre+0xf8>
 8001c64:	2b07      	cmp	r3, #7
 8001c66:	d106      	bne.n	8001c76 <movimientoLibre+0xfe>
				case 0b111:
					status_movimiento = AVANZANDO;
 8001c68:	4b38      	ldr	r3, [pc, #224]	; (8001d4c <movimientoLibre+0x1d4>)
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	701a      	strb	r2, [r3, #0]
					break;
 8001c6e:	e003      	b.n	8001c78 <movimientoLibre+0x100>
				case 0b011:
					status_movimiento = ROTANDO_DER;
 8001c70:	4b36      	ldr	r3, [pc, #216]	; (8001d4c <movimientoLibre+0x1d4>)
 8001c72:	2204      	movs	r2, #4
 8001c74:	701a      	strb	r2, [r3, #0]
				default:
					break;
 8001c76:	bf00      	nop
			} //end switch sensores_dist

		break;
 8001c78:	e05a      	b.n	8001d30 <movimientoLibre+0x1b8>
//			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 0);
//
//			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 0);
//			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 1);

			velL = 5;
 8001c7a:	4b35      	ldr	r3, [pc, #212]	; (8001d50 <movimientoLibre+0x1d8>)
 8001c7c:	2205      	movs	r2, #5
 8001c7e:	701a      	strb	r2, [r3, #0]
			velR = -5;
 8001c80:	4b34      	ldr	r3, [pc, #208]	; (8001d54 <movimientoLibre+0x1dc>)
 8001c82:	22fb      	movs	r2, #251	; 0xfb
 8001c84:	701a      	strb	r2, [r3, #0]

			switch (sensores_dist){
 8001c86:	4b34      	ldr	r3, [pc, #208]	; (8001d58 <movimientoLibre+0x1e0>)
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	2b06      	cmp	r3, #6
 8001c8c:	d005      	beq.n	8001c9a <movimientoLibre+0x122>
 8001c8e:	2b07      	cmp	r3, #7
 8001c90:	d106      	bne.n	8001ca0 <movimientoLibre+0x128>
				case 0b111:
					status_movimiento = AVANZANDO;
 8001c92:	4b2e      	ldr	r3, [pc, #184]	; (8001d4c <movimientoLibre+0x1d4>)
 8001c94:	2201      	movs	r2, #1
 8001c96:	701a      	strb	r2, [r3, #0]
					break;
 8001c98:	e003      	b.n	8001ca2 <movimientoLibre+0x12a>
				case 0b110:
					status_movimiento = ROTANDO_IZQ;
 8001c9a:	4b2c      	ldr	r3, [pc, #176]	; (8001d4c <movimientoLibre+0x1d4>)
 8001c9c:	2203      	movs	r2, #3
 8001c9e:	701a      	strb	r2, [r3, #0]
				default:
					break;
 8001ca0:	bf00      	nop
			} //end switch sensores_dist

		break;
 8001ca2:	e045      	b.n	8001d30 <movimientoLibre+0x1b8>
//			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 0);
//
//			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 1);
//			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 1);

			velL = -5;
 8001ca4:	4b2a      	ldr	r3, [pc, #168]	; (8001d50 <movimientoLibre+0x1d8>)
 8001ca6:	22fb      	movs	r2, #251	; 0xfb
 8001ca8:	701a      	strb	r2, [r3, #0]
			velR = -5;
 8001caa:	4b2a      	ldr	r3, [pc, #168]	; (8001d54 <movimientoLibre+0x1dc>)
 8001cac:	22fb      	movs	r2, #251	; 0xfb
 8001cae:	701a      	strb	r2, [r3, #0]

			status_movimiento = AVANZANDO;
 8001cb0:	4b26      	ldr	r3, [pc, #152]	; (8001d4c <movimientoLibre+0x1d4>)
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	701a      	strb	r2, [r3, #0]
			break;
 8001cb6:	e03b      	b.n	8001d30 <movimientoLibre+0x1b8>
//			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 1);
//
//			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 0);
//			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 0);

			velL = 0;
 8001cb8:	4b25      	ldr	r3, [pc, #148]	; (8001d50 <movimientoLibre+0x1d8>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	701a      	strb	r2, [r3, #0]
			velR = 5;
 8001cbe:	4b25      	ldr	r3, [pc, #148]	; (8001d54 <movimientoLibre+0x1dc>)
 8001cc0:	2205      	movs	r2, #5
 8001cc2:	701a      	strb	r2, [r3, #0]

			switch (sensores_dist){
 8001cc4:	4b24      	ldr	r3, [pc, #144]	; (8001d58 <movimientoLibre+0x1e0>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	2b07      	cmp	r3, #7
 8001cca:	d006      	beq.n	8001cda <movimientoLibre+0x162>
 8001ccc:	2b07      	cmp	r3, #7
 8001cce:	dc0f      	bgt.n	8001cf0 <movimientoLibre+0x178>
 8001cd0:	2b03      	cmp	r3, #3
 8001cd2:	d006      	beq.n	8001ce2 <movimientoLibre+0x16a>
 8001cd4:	2b04      	cmp	r3, #4
 8001cd6:	d008      	beq.n	8001cea <movimientoLibre+0x172>
					status_movimiento = ROTANDO_DER;
				break;
				case 0b100:
					status_movimiento = ROTANDO_IZQ;
				default:
				break;
 8001cd8:	e00a      	b.n	8001cf0 <movimientoLibre+0x178>
					status_movimiento = AVANZANDO;
 8001cda:	4b1c      	ldr	r3, [pc, #112]	; (8001d4c <movimientoLibre+0x1d4>)
 8001cdc:	2201      	movs	r2, #1
 8001cde:	701a      	strb	r2, [r3, #0]
				break;
 8001ce0:	e007      	b.n	8001cf2 <movimientoLibre+0x17a>
					status_movimiento = ROTANDO_DER;
 8001ce2:	4b1a      	ldr	r3, [pc, #104]	; (8001d4c <movimientoLibre+0x1d4>)
 8001ce4:	2204      	movs	r2, #4
 8001ce6:	701a      	strb	r2, [r3, #0]
				break;
 8001ce8:	e003      	b.n	8001cf2 <movimientoLibre+0x17a>
					status_movimiento = ROTANDO_IZQ;
 8001cea:	4b18      	ldr	r3, [pc, #96]	; (8001d4c <movimientoLibre+0x1d4>)
 8001cec:	2203      	movs	r2, #3
 8001cee:	701a      	strb	r2, [r3, #0]
				break;
 8001cf0:	bf00      	nop
			} //end switch sensores_dist

		break;
 8001cf2:	e01d      	b.n	8001d30 <movimientoLibre+0x1b8>
//			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 0);
//
//			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 0);
//			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 0);

			velL = 5;
 8001cf4:	4b16      	ldr	r3, [pc, #88]	; (8001d50 <movimientoLibre+0x1d8>)
 8001cf6:	2205      	movs	r2, #5
 8001cf8:	701a      	strb	r2, [r3, #0]
			velR = 0;
 8001cfa:	4b16      	ldr	r3, [pc, #88]	; (8001d54 <movimientoLibre+0x1dc>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	701a      	strb	r2, [r3, #0]

			switch (sensores_dist){
 8001d00:	4b15      	ldr	r3, [pc, #84]	; (8001d58 <movimientoLibre+0x1e0>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	2b07      	cmp	r3, #7
 8001d06:	d006      	beq.n	8001d16 <movimientoLibre+0x19e>
 8001d08:	2b07      	cmp	r3, #7
 8001d0a:	dc0f      	bgt.n	8001d2c <movimientoLibre+0x1b4>
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d00a      	beq.n	8001d26 <movimientoLibre+0x1ae>
 8001d10:	2b06      	cmp	r3, #6
 8001d12:	d004      	beq.n	8001d1e <movimientoLibre+0x1a6>
					status_movimiento = ROTANDO_IZQ;
				break;
				case 0b001:
					status_movimiento = ROTANDO_DER;
				default:
				break;
 8001d14:	e00a      	b.n	8001d2c <movimientoLibre+0x1b4>
					status_movimiento = AVANZANDO;
 8001d16:	4b0d      	ldr	r3, [pc, #52]	; (8001d4c <movimientoLibre+0x1d4>)
 8001d18:	2201      	movs	r2, #1
 8001d1a:	701a      	strb	r2, [r3, #0]
				break;
 8001d1c:	e007      	b.n	8001d2e <movimientoLibre+0x1b6>
					status_movimiento = ROTANDO_IZQ;
 8001d1e:	4b0b      	ldr	r3, [pc, #44]	; (8001d4c <movimientoLibre+0x1d4>)
 8001d20:	2203      	movs	r2, #3
 8001d22:	701a      	strb	r2, [r3, #0]
				break;
 8001d24:	e003      	b.n	8001d2e <movimientoLibre+0x1b6>
					status_movimiento = ROTANDO_DER;
 8001d26:	4b09      	ldr	r3, [pc, #36]	; (8001d4c <movimientoLibre+0x1d4>)
 8001d28:	2204      	movs	r2, #4
 8001d2a:	701a      	strb	r2, [r3, #0]
				break;
 8001d2c:	bf00      	nop
			} //end switch sensores_dist

		default:
		break;
 8001d2e:	bf00      	nop

	} //fin switch status_movimiento

} //fin movimientoLibre()
 8001d30:	bf00      	nop
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	200000c2 	.word	0x200000c2
 8001d40:	200000c4 	.word	0x200000c4
 8001d44:	200000c6 	.word	0x200000c6
 8001d48:	200000c8 	.word	0x200000c8
 8001d4c:	200000ae 	.word	0x200000ae
 8001d50:	20000002 	.word	0x20000002
 8001d54:	20000003 	.word	0x20000003
 8001d58:	200000df 	.word	0x200000df

08001d5c <movimientoRC>:

void movimientoRC (void){
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0

	if (!avance_cant && !retroceso_cant && !giroIzq_cant && !giroDer_cant ){
 8001d60:	4b9b      	ldr	r3, [pc, #620]	; (8001fd0 <movimientoRC+0x274>)
 8001d62:	881b      	ldrh	r3, [r3, #0]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d10e      	bne.n	8001d86 <movimientoRC+0x2a>
 8001d68:	4b9a      	ldr	r3, [pc, #616]	; (8001fd4 <movimientoRC+0x278>)
 8001d6a:	881b      	ldrh	r3, [r3, #0]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d10a      	bne.n	8001d86 <movimientoRC+0x2a>
 8001d70:	4b99      	ldr	r3, [pc, #612]	; (8001fd8 <movimientoRC+0x27c>)
 8001d72:	881b      	ldrh	r3, [r3, #0]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d106      	bne.n	8001d86 <movimientoRC+0x2a>
 8001d78:	4b98      	ldr	r3, [pc, #608]	; (8001fdc <movimientoRC+0x280>)
 8001d7a:	881b      	ldrh	r3, [r3, #0]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d102      	bne.n	8001d86 <movimientoRC+0x2a>
		status_movimiento = QUIETO;
 8001d80:	4b97      	ldr	r3, [pc, #604]	; (8001fe0 <movimientoRC+0x284>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	701a      	strb	r2, [r3, #0]
	}

	switch (status_movimiento) {
 8001d86:	4b96      	ldr	r3, [pc, #600]	; (8001fe0 <movimientoRC+0x284>)
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	2b05      	cmp	r3, #5
 8001d8c:	f200 8176 	bhi.w	800207c <movimientoRC+0x320>
 8001d90:	a201      	add	r2, pc, #4	; (adr r2, 8001d98 <movimientoRC+0x3c>)
 8001d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d96:	bf00      	nop
 8001d98:	08001db1 	.word	0x08001db1
 8001d9c:	08001e2f 	.word	0x08001e2f
 8001da0:	08001ff5 	.word	0x08001ff5
 8001da4:	08001ebb 	.word	0x08001ebb
 8001da8:	08001f47 	.word	0x08001f47
 8001dac:	0800207d 	.word	0x0800207d
//			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 0);
//
//			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 0);
//			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 0);

			velL = 0;
 8001db0:	4b8c      	ldr	r3, [pc, #560]	; (8001fe4 <movimientoRC+0x288>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	701a      	strb	r2, [r3, #0]
			velR = 0;
 8001db6:	4b8c      	ldr	r3, [pc, #560]	; (8001fe8 <movimientoRC+0x28c>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	701a      	strb	r2, [r3, #0]

			//periodo_Encoder = 0;

			if (avance_cant != 0){
 8001dbc:	4b84      	ldr	r3, [pc, #528]	; (8001fd0 <movimientoRC+0x274>)
 8001dbe:	881b      	ldrh	r3, [r3, #0]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d009      	beq.n	8001dd8 <movimientoRC+0x7c>
				acum_encoderL = 0;
 8001dc4:	4b89      	ldr	r3, [pc, #548]	; (8001fec <movimientoRC+0x290>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 8001dca:	4b89      	ldr	r3, [pc, #548]	; (8001ff0 <movimientoRC+0x294>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	801a      	strh	r2, [r3, #0]
				status_movimiento = AVANZANDO;
 8001dd0:	4b83      	ldr	r3, [pc, #524]	; (8001fe0 <movimientoRC+0x284>)
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	701a      	strb	r2, [r3, #0]
				break;
 8001dd6:	e164      	b.n	80020a2 <movimientoRC+0x346>
			}

			if (retroceso_cant != 0){
 8001dd8:	4b7e      	ldr	r3, [pc, #504]	; (8001fd4 <movimientoRC+0x278>)
 8001dda:	881b      	ldrh	r3, [r3, #0]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d009      	beq.n	8001df4 <movimientoRC+0x98>
				acum_encoderL = 0;
 8001de0:	4b82      	ldr	r3, [pc, #520]	; (8001fec <movimientoRC+0x290>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 8001de6:	4b82      	ldr	r3, [pc, #520]	; (8001ff0 <movimientoRC+0x294>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	801a      	strh	r2, [r3, #0]
				status_movimiento = RETROCEDIENDO;
 8001dec:	4b7c      	ldr	r3, [pc, #496]	; (8001fe0 <movimientoRC+0x284>)
 8001dee:	2202      	movs	r2, #2
 8001df0:	701a      	strb	r2, [r3, #0]
				break;
 8001df2:	e156      	b.n	80020a2 <movimientoRC+0x346>
			}

			if (giroIzq_cant != 0){
 8001df4:	4b78      	ldr	r3, [pc, #480]	; (8001fd8 <movimientoRC+0x27c>)
 8001df6:	881b      	ldrh	r3, [r3, #0]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d009      	beq.n	8001e10 <movimientoRC+0xb4>
				acum_encoderL = 0;
 8001dfc:	4b7b      	ldr	r3, [pc, #492]	; (8001fec <movimientoRC+0x290>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 8001e02:	4b7b      	ldr	r3, [pc, #492]	; (8001ff0 <movimientoRC+0x294>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	801a      	strh	r2, [r3, #0]
				status_movimiento = ROTANDO_IZQ;
 8001e08:	4b75      	ldr	r3, [pc, #468]	; (8001fe0 <movimientoRC+0x284>)
 8001e0a:	2203      	movs	r2, #3
 8001e0c:	701a      	strb	r2, [r3, #0]
				break;
 8001e0e:	e148      	b.n	80020a2 <movimientoRC+0x346>
			}

			if (giroDer_cant != 0){
 8001e10:	4b72      	ldr	r3, [pc, #456]	; (8001fdc <movimientoRC+0x280>)
 8001e12:	881b      	ldrh	r3, [r3, #0]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	f000 8133 	beq.w	8002080 <movimientoRC+0x324>
				acum_encoderL = 0;
 8001e1a:	4b74      	ldr	r3, [pc, #464]	; (8001fec <movimientoRC+0x290>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 8001e20:	4b73      	ldr	r3, [pc, #460]	; (8001ff0 <movimientoRC+0x294>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	801a      	strh	r2, [r3, #0]
				status_movimiento = ROTANDO_DER;
 8001e26:	4b6e      	ldr	r3, [pc, #440]	; (8001fe0 <movimientoRC+0x284>)
 8001e28:	2204      	movs	r2, #4
 8001e2a:	701a      	strb	r2, [r3, #0]
				break;
 8001e2c:	e139      	b.n	80020a2 <movimientoRC+0x346>
//			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 1);
//
//			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 0);
//			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 0);

			velL = 5;
 8001e2e:	4b6d      	ldr	r3, [pc, #436]	; (8001fe4 <movimientoRC+0x288>)
 8001e30:	2205      	movs	r2, #5
 8001e32:	701a      	strb	r2, [r3, #0]
			velR = 5;
 8001e34:	4b6c      	ldr	r3, [pc, #432]	; (8001fe8 <movimientoRC+0x28c>)
 8001e36:	2205      	movs	r2, #5
 8001e38:	701a      	strb	r2, [r3, #0]

			if (avance_cant > ((acum_encoderL + acum_encoderR) >> 1) ) break;
 8001e3a:	4b65      	ldr	r3, [pc, #404]	; (8001fd0 <movimientoRC+0x274>)
 8001e3c:	881b      	ldrh	r3, [r3, #0]
 8001e3e:	461a      	mov	r2, r3
 8001e40:	4b6a      	ldr	r3, [pc, #424]	; (8001fec <movimientoRC+0x290>)
 8001e42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e46:	4619      	mov	r1, r3
 8001e48:	4b69      	ldr	r3, [pc, #420]	; (8001ff0 <movimientoRC+0x294>)
 8001e4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e4e:	440b      	add	r3, r1
 8001e50:	105b      	asrs	r3, r3, #1
 8001e52:	429a      	cmp	r2, r3
 8001e54:	f300 8116 	bgt.w	8002084 <movimientoRC+0x328>

			avance_cant = 0;
 8001e58:	4b5d      	ldr	r3, [pc, #372]	; (8001fd0 <movimientoRC+0x274>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	801a      	strh	r2, [r3, #0]

			status_movimiento = QUIETO;
 8001e5e:	4b60      	ldr	r3, [pc, #384]	; (8001fe0 <movimientoRC+0x284>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	701a      	strb	r2, [r3, #0]

			if (retroceso_cant != 0){
 8001e64:	4b5b      	ldr	r3, [pc, #364]	; (8001fd4 <movimientoRC+0x278>)
 8001e66:	881b      	ldrh	r3, [r3, #0]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d009      	beq.n	8001e80 <movimientoRC+0x124>
				acum_encoderL = 0;
 8001e6c:	4b5f      	ldr	r3, [pc, #380]	; (8001fec <movimientoRC+0x290>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 8001e72:	4b5f      	ldr	r3, [pc, #380]	; (8001ff0 <movimientoRC+0x294>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	801a      	strh	r2, [r3, #0]
				status_movimiento = RETROCEDIENDO;
 8001e78:	4b59      	ldr	r3, [pc, #356]	; (8001fe0 <movimientoRC+0x284>)
 8001e7a:	2202      	movs	r2, #2
 8001e7c:	701a      	strb	r2, [r3, #0]
				break;
 8001e7e:	e110      	b.n	80020a2 <movimientoRC+0x346>
			}

			if (giroIzq_cant != 0){
 8001e80:	4b55      	ldr	r3, [pc, #340]	; (8001fd8 <movimientoRC+0x27c>)
 8001e82:	881b      	ldrh	r3, [r3, #0]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d009      	beq.n	8001e9c <movimientoRC+0x140>
				acum_encoderL = 0;
 8001e88:	4b58      	ldr	r3, [pc, #352]	; (8001fec <movimientoRC+0x290>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 8001e8e:	4b58      	ldr	r3, [pc, #352]	; (8001ff0 <movimientoRC+0x294>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	801a      	strh	r2, [r3, #0]
				status_movimiento = ROTANDO_IZQ;
 8001e94:	4b52      	ldr	r3, [pc, #328]	; (8001fe0 <movimientoRC+0x284>)
 8001e96:	2203      	movs	r2, #3
 8001e98:	701a      	strb	r2, [r3, #0]
				break;
 8001e9a:	e102      	b.n	80020a2 <movimientoRC+0x346>
			}

			if (giroDer_cant != 0){
 8001e9c:	4b4f      	ldr	r3, [pc, #316]	; (8001fdc <movimientoRC+0x280>)
 8001e9e:	881b      	ldrh	r3, [r3, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	f000 80f1 	beq.w	8002088 <movimientoRC+0x32c>
				acum_encoderL = 0;
 8001ea6:	4b51      	ldr	r3, [pc, #324]	; (8001fec <movimientoRC+0x290>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 8001eac:	4b50      	ldr	r3, [pc, #320]	; (8001ff0 <movimientoRC+0x294>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	801a      	strh	r2, [r3, #0]
				status_movimiento = ROTANDO_DER;
 8001eb2:	4b4b      	ldr	r3, [pc, #300]	; (8001fe0 <movimientoRC+0x284>)
 8001eb4:	2204      	movs	r2, #4
 8001eb6:	701a      	strb	r2, [r3, #0]
				break;
 8001eb8:	e0f3      	b.n	80020a2 <movimientoRC+0x346>
//			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 1);
//
//			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 1);
//			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 0);

			velL = -5;
 8001eba:	4b4a      	ldr	r3, [pc, #296]	; (8001fe4 <movimientoRC+0x288>)
 8001ebc:	22fb      	movs	r2, #251	; 0xfb
 8001ebe:	701a      	strb	r2, [r3, #0]
			velR = 5;
 8001ec0:	4b49      	ldr	r3, [pc, #292]	; (8001fe8 <movimientoRC+0x28c>)
 8001ec2:	2205      	movs	r2, #5
 8001ec4:	701a      	strb	r2, [r3, #0]


			if (giroIzq_cant > ((acum_encoderL + acum_encoderR) >> 1) ) break;
 8001ec6:	4b44      	ldr	r3, [pc, #272]	; (8001fd8 <movimientoRC+0x27c>)
 8001ec8:	881b      	ldrh	r3, [r3, #0]
 8001eca:	461a      	mov	r2, r3
 8001ecc:	4b47      	ldr	r3, [pc, #284]	; (8001fec <movimientoRC+0x290>)
 8001ece:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	4b46      	ldr	r3, [pc, #280]	; (8001ff0 <movimientoRC+0x294>)
 8001ed6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eda:	440b      	add	r3, r1
 8001edc:	105b      	asrs	r3, r3, #1
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	f300 80d4 	bgt.w	800208c <movimientoRC+0x330>

			giroIzq_cant = 0;
 8001ee4:	4b3c      	ldr	r3, [pc, #240]	; (8001fd8 <movimientoRC+0x27c>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	801a      	strh	r2, [r3, #0]

			status_movimiento = QUIETO;
 8001eea:	4b3d      	ldr	r3, [pc, #244]	; (8001fe0 <movimientoRC+0x284>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	701a      	strb	r2, [r3, #0]

			if (avance_cant != 0){
 8001ef0:	4b37      	ldr	r3, [pc, #220]	; (8001fd0 <movimientoRC+0x274>)
 8001ef2:	881b      	ldrh	r3, [r3, #0]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d009      	beq.n	8001f0c <movimientoRC+0x1b0>
				acum_encoderL = 0;
 8001ef8:	4b3c      	ldr	r3, [pc, #240]	; (8001fec <movimientoRC+0x290>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 8001efe:	4b3c      	ldr	r3, [pc, #240]	; (8001ff0 <movimientoRC+0x294>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	801a      	strh	r2, [r3, #0]
				status_movimiento = AVANZANDO;
 8001f04:	4b36      	ldr	r3, [pc, #216]	; (8001fe0 <movimientoRC+0x284>)
 8001f06:	2201      	movs	r2, #1
 8001f08:	701a      	strb	r2, [r3, #0]
				break;
 8001f0a:	e0ca      	b.n	80020a2 <movimientoRC+0x346>
			}

			if (retroceso_cant != 0){
 8001f0c:	4b31      	ldr	r3, [pc, #196]	; (8001fd4 <movimientoRC+0x278>)
 8001f0e:	881b      	ldrh	r3, [r3, #0]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d009      	beq.n	8001f28 <movimientoRC+0x1cc>
				acum_encoderL = 0;
 8001f14:	4b35      	ldr	r3, [pc, #212]	; (8001fec <movimientoRC+0x290>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 8001f1a:	4b35      	ldr	r3, [pc, #212]	; (8001ff0 <movimientoRC+0x294>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	801a      	strh	r2, [r3, #0]
				status_movimiento = RETROCEDIENDO;
 8001f20:	4b2f      	ldr	r3, [pc, #188]	; (8001fe0 <movimientoRC+0x284>)
 8001f22:	2202      	movs	r2, #2
 8001f24:	701a      	strb	r2, [r3, #0]
				break;
 8001f26:	e0bc      	b.n	80020a2 <movimientoRC+0x346>
			}

			if (giroDer_cant != 0){
 8001f28:	4b2c      	ldr	r3, [pc, #176]	; (8001fdc <movimientoRC+0x280>)
 8001f2a:	881b      	ldrh	r3, [r3, #0]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	f000 80af 	beq.w	8002090 <movimientoRC+0x334>
				acum_encoderL = 0;
 8001f32:	4b2e      	ldr	r3, [pc, #184]	; (8001fec <movimientoRC+0x290>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 8001f38:	4b2d      	ldr	r3, [pc, #180]	; (8001ff0 <movimientoRC+0x294>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	801a      	strh	r2, [r3, #0]
				status_movimiento = ROTANDO_DER;
 8001f3e:	4b28      	ldr	r3, [pc, #160]	; (8001fe0 <movimientoRC+0x284>)
 8001f40:	2204      	movs	r2, #4
 8001f42:	701a      	strb	r2, [r3, #0]
				break;
 8001f44:	e0ad      	b.n	80020a2 <movimientoRC+0x346>
//			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 0);
//
//			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 0);
//			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 1);

			velL = 5;
 8001f46:	4b27      	ldr	r3, [pc, #156]	; (8001fe4 <movimientoRC+0x288>)
 8001f48:	2205      	movs	r2, #5
 8001f4a:	701a      	strb	r2, [r3, #0]
			velR = -5;
 8001f4c:	4b26      	ldr	r3, [pc, #152]	; (8001fe8 <movimientoRC+0x28c>)
 8001f4e:	22fb      	movs	r2, #251	; 0xfb
 8001f50:	701a      	strb	r2, [r3, #0]

			if (giroDer_cant > ((acum_encoderL + acum_encoderR) >> 1) ) break;
 8001f52:	4b22      	ldr	r3, [pc, #136]	; (8001fdc <movimientoRC+0x280>)
 8001f54:	881b      	ldrh	r3, [r3, #0]
 8001f56:	461a      	mov	r2, r3
 8001f58:	4b24      	ldr	r3, [pc, #144]	; (8001fec <movimientoRC+0x290>)
 8001f5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f5e:	4619      	mov	r1, r3
 8001f60:	4b23      	ldr	r3, [pc, #140]	; (8001ff0 <movimientoRC+0x294>)
 8001f62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f66:	440b      	add	r3, r1
 8001f68:	105b      	asrs	r3, r3, #1
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	f300 8092 	bgt.w	8002094 <movimientoRC+0x338>

			giroDer_cant = 0;
 8001f70:	4b1a      	ldr	r3, [pc, #104]	; (8001fdc <movimientoRC+0x280>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	801a      	strh	r2, [r3, #0]

			status_movimiento = QUIETO;
 8001f76:	4b1a      	ldr	r3, [pc, #104]	; (8001fe0 <movimientoRC+0x284>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	701a      	strb	r2, [r3, #0]

			if (avance_cant != 0){
 8001f7c:	4b14      	ldr	r3, [pc, #80]	; (8001fd0 <movimientoRC+0x274>)
 8001f7e:	881b      	ldrh	r3, [r3, #0]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d009      	beq.n	8001f98 <movimientoRC+0x23c>
				acum_encoderL = 0;
 8001f84:	4b19      	ldr	r3, [pc, #100]	; (8001fec <movimientoRC+0x290>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 8001f8a:	4b19      	ldr	r3, [pc, #100]	; (8001ff0 <movimientoRC+0x294>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	801a      	strh	r2, [r3, #0]
				status_movimiento = AVANZANDO;
 8001f90:	4b13      	ldr	r3, [pc, #76]	; (8001fe0 <movimientoRC+0x284>)
 8001f92:	2201      	movs	r2, #1
 8001f94:	701a      	strb	r2, [r3, #0]
				break;
 8001f96:	e084      	b.n	80020a2 <movimientoRC+0x346>
			}

			if (retroceso_cant != 0){
 8001f98:	4b0e      	ldr	r3, [pc, #56]	; (8001fd4 <movimientoRC+0x278>)
 8001f9a:	881b      	ldrh	r3, [r3, #0]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d009      	beq.n	8001fb4 <movimientoRC+0x258>
				acum_encoderL = 0;
 8001fa0:	4b12      	ldr	r3, [pc, #72]	; (8001fec <movimientoRC+0x290>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 8001fa6:	4b12      	ldr	r3, [pc, #72]	; (8001ff0 <movimientoRC+0x294>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	801a      	strh	r2, [r3, #0]
				status_movimiento = RETROCEDIENDO;
 8001fac:	4b0c      	ldr	r3, [pc, #48]	; (8001fe0 <movimientoRC+0x284>)
 8001fae:	2202      	movs	r2, #2
 8001fb0:	701a      	strb	r2, [r3, #0]
				break;
 8001fb2:	e076      	b.n	80020a2 <movimientoRC+0x346>
			}

			if (giroIzq_cant != 0){
 8001fb4:	4b08      	ldr	r3, [pc, #32]	; (8001fd8 <movimientoRC+0x27c>)
 8001fb6:	881b      	ldrh	r3, [r3, #0]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d06d      	beq.n	8002098 <movimientoRC+0x33c>
				acum_encoderL = 0;
 8001fbc:	4b0b      	ldr	r3, [pc, #44]	; (8001fec <movimientoRC+0x290>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 8001fc2:	4b0b      	ldr	r3, [pc, #44]	; (8001ff0 <movimientoRC+0x294>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	801a      	strh	r2, [r3, #0]
				status_movimiento = ROTANDO_IZQ;
 8001fc8:	4b05      	ldr	r3, [pc, #20]	; (8001fe0 <movimientoRC+0x284>)
 8001fca:	2203      	movs	r2, #3
 8001fcc:	701a      	strb	r2, [r3, #0]
				break;
 8001fce:	e068      	b.n	80020a2 <movimientoRC+0x346>
 8001fd0:	200000c2 	.word	0x200000c2
 8001fd4:	200000c4 	.word	0x200000c4
 8001fd8:	200000c6 	.word	0x200000c6
 8001fdc:	200000c8 	.word	0x200000c8
 8001fe0:	200000ae 	.word	0x200000ae
 8001fe4:	20000002 	.word	0x20000002
 8001fe8:	20000003 	.word	0x20000003
 8001fec:	200000fc 	.word	0x200000fc
 8001ff0:	200000fe 	.word	0x200000fe
//			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 0);
//
//			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 1);
//			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 1);

			velL = -5;
 8001ff4:	4b2d      	ldr	r3, [pc, #180]	; (80020ac <movimientoRC+0x350>)
 8001ff6:	22fb      	movs	r2, #251	; 0xfb
 8001ff8:	701a      	strb	r2, [r3, #0]
			velR = -5;
 8001ffa:	4b2d      	ldr	r3, [pc, #180]	; (80020b0 <movimientoRC+0x354>)
 8001ffc:	22fb      	movs	r2, #251	; 0xfb
 8001ffe:	701a      	strb	r2, [r3, #0]


			if (retroceso_cant > ((acum_encoderL + acum_encoderR) >> 1) ) break;
 8002000:	4b2c      	ldr	r3, [pc, #176]	; (80020b4 <movimientoRC+0x358>)
 8002002:	881b      	ldrh	r3, [r3, #0]
 8002004:	461a      	mov	r2, r3
 8002006:	4b2c      	ldr	r3, [pc, #176]	; (80020b8 <movimientoRC+0x35c>)
 8002008:	f9b3 3000 	ldrsh.w	r3, [r3]
 800200c:	4619      	mov	r1, r3
 800200e:	4b2b      	ldr	r3, [pc, #172]	; (80020bc <movimientoRC+0x360>)
 8002010:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002014:	440b      	add	r3, r1
 8002016:	105b      	asrs	r3, r3, #1
 8002018:	429a      	cmp	r2, r3
 800201a:	dc3f      	bgt.n	800209c <movimientoRC+0x340>

			retroceso_cant = 0;
 800201c:	4b25      	ldr	r3, [pc, #148]	; (80020b4 <movimientoRC+0x358>)
 800201e:	2200      	movs	r2, #0
 8002020:	801a      	strh	r2, [r3, #0]

			status_movimiento = QUIETO;
 8002022:	4b27      	ldr	r3, [pc, #156]	; (80020c0 <movimientoRC+0x364>)
 8002024:	2200      	movs	r2, #0
 8002026:	701a      	strb	r2, [r3, #0]

			if (avance_cant != 0){
 8002028:	4b26      	ldr	r3, [pc, #152]	; (80020c4 <movimientoRC+0x368>)
 800202a:	881b      	ldrh	r3, [r3, #0]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d009      	beq.n	8002044 <movimientoRC+0x2e8>
				acum_encoderL = 0;
 8002030:	4b21      	ldr	r3, [pc, #132]	; (80020b8 <movimientoRC+0x35c>)
 8002032:	2200      	movs	r2, #0
 8002034:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 8002036:	4b21      	ldr	r3, [pc, #132]	; (80020bc <movimientoRC+0x360>)
 8002038:	2200      	movs	r2, #0
 800203a:	801a      	strh	r2, [r3, #0]
				status_movimiento = AVANZANDO;
 800203c:	4b20      	ldr	r3, [pc, #128]	; (80020c0 <movimientoRC+0x364>)
 800203e:	2201      	movs	r2, #1
 8002040:	701a      	strb	r2, [r3, #0]
				break;
 8002042:	e02e      	b.n	80020a2 <movimientoRC+0x346>
			}

			if (giroIzq_cant != 0){
 8002044:	4b20      	ldr	r3, [pc, #128]	; (80020c8 <movimientoRC+0x36c>)
 8002046:	881b      	ldrh	r3, [r3, #0]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d009      	beq.n	8002060 <movimientoRC+0x304>
				acum_encoderL = 0;
 800204c:	4b1a      	ldr	r3, [pc, #104]	; (80020b8 <movimientoRC+0x35c>)
 800204e:	2200      	movs	r2, #0
 8002050:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 8002052:	4b1a      	ldr	r3, [pc, #104]	; (80020bc <movimientoRC+0x360>)
 8002054:	2200      	movs	r2, #0
 8002056:	801a      	strh	r2, [r3, #0]
				status_movimiento = ROTANDO_IZQ;
 8002058:	4b19      	ldr	r3, [pc, #100]	; (80020c0 <movimientoRC+0x364>)
 800205a:	2203      	movs	r2, #3
 800205c:	701a      	strb	r2, [r3, #0]
				break;
 800205e:	e020      	b.n	80020a2 <movimientoRC+0x346>
			}

			if (giroDer_cant != 0){
 8002060:	4b1a      	ldr	r3, [pc, #104]	; (80020cc <movimientoRC+0x370>)
 8002062:	881b      	ldrh	r3, [r3, #0]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d01b      	beq.n	80020a0 <movimientoRC+0x344>
				acum_encoderL = 0;
 8002068:	4b13      	ldr	r3, [pc, #76]	; (80020b8 <movimientoRC+0x35c>)
 800206a:	2200      	movs	r2, #0
 800206c:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 800206e:	4b13      	ldr	r3, [pc, #76]	; (80020bc <movimientoRC+0x360>)
 8002070:	2200      	movs	r2, #0
 8002072:	801a      	strh	r2, [r3, #0]
				status_movimiento = ROTANDO_DER;
 8002074:	4b12      	ldr	r3, [pc, #72]	; (80020c0 <movimientoRC+0x364>)
 8002076:	2204      	movs	r2, #4
 8002078:	701a      	strb	r2, [r3, #0]
				break;
 800207a:	e012      	b.n	80020a2 <movimientoRC+0x346>

		break;
		case PIVOTE_DER_AVAN:

		default:
		break;
 800207c:	bf00      	nop
 800207e:	e010      	b.n	80020a2 <movimientoRC+0x346>
		break;
 8002080:	bf00      	nop
 8002082:	e00e      	b.n	80020a2 <movimientoRC+0x346>
			if (avance_cant > ((acum_encoderL + acum_encoderR) >> 1) ) break;
 8002084:	bf00      	nop
 8002086:	e00c      	b.n	80020a2 <movimientoRC+0x346>
		break;
 8002088:	bf00      	nop
 800208a:	e00a      	b.n	80020a2 <movimientoRC+0x346>
			if (giroIzq_cant > ((acum_encoderL + acum_encoderR) >> 1) ) break;
 800208c:	bf00      	nop
 800208e:	e008      	b.n	80020a2 <movimientoRC+0x346>
		break;
 8002090:	bf00      	nop
 8002092:	e006      	b.n	80020a2 <movimientoRC+0x346>
			if (giroDer_cant > ((acum_encoderL + acum_encoderR) >> 1) ) break;
 8002094:	bf00      	nop
 8002096:	e004      	b.n	80020a2 <movimientoRC+0x346>
		break;
 8002098:	bf00      	nop
 800209a:	e002      	b.n	80020a2 <movimientoRC+0x346>
			if (retroceso_cant > ((acum_encoderL + acum_encoderR) >> 1) ) break;
 800209c:	bf00      	nop
 800209e:	e000      	b.n	80020a2 <movimientoRC+0x346>
		break;
 80020a0:	bf00      	nop

	} //fin switch status_movimiento

} //fin movimientoRC()
 80020a2:	bf00      	nop
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr
 80020ac:	20000002 	.word	0x20000002
 80020b0:	20000003 	.word	0x20000003
 80020b4:	200000c4 	.word	0x200000c4
 80020b8:	200000fc 	.word	0x200000fc
 80020bc:	200000fe 	.word	0x200000fe
 80020c0:	200000ae 	.word	0x200000ae
 80020c4:	200000c2 	.word	0x200000c2
 80020c8:	200000c6 	.word	0x200000c6
 80020cc:	200000c8 	.word	0x200000c8

080020d0 <velocidades>:

void velocidades (int8_t vl, int8_t vr){
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	4603      	mov	r3, r0
 80020d8:	460a      	mov	r2, r1
 80020da:	71fb      	strb	r3, [r7, #7]
 80020dc:	4613      	mov	r3, r2
 80020de:	71bb      	strb	r3, [r7, #6]

	if (vl < 0){
 80020e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	da0b      	bge.n	8002100 <velocidades+0x30>
		HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 0);
 80020e8:	2200      	movs	r2, #0
 80020ea:	2101      	movs	r1, #1
 80020ec:	4833      	ldr	r0, [pc, #204]	; (80021bc <velocidades+0xec>)
 80020ee:	f001 fbc7 	bl	8003880 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 1);
 80020f2:	2201      	movs	r2, #1
 80020f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020f8:	4831      	ldr	r0, [pc, #196]	; (80021c0 <velocidades+0xf0>)
 80020fa:	f001 fbc1 	bl	8003880 <HAL_GPIO_WritePin>
 80020fe:	e01a      	b.n	8002136 <velocidades+0x66>
	} else if (vl > 0){
 8002100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002104:	2b00      	cmp	r3, #0
 8002106:	dd0b      	ble.n	8002120 <velocidades+0x50>
		HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 1);
 8002108:	2201      	movs	r2, #1
 800210a:	2101      	movs	r1, #1
 800210c:	482b      	ldr	r0, [pc, #172]	; (80021bc <velocidades+0xec>)
 800210e:	f001 fbb7 	bl	8003880 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 0);
 8002112:	2200      	movs	r2, #0
 8002114:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002118:	4829      	ldr	r0, [pc, #164]	; (80021c0 <velocidades+0xf0>)
 800211a:	f001 fbb1 	bl	8003880 <HAL_GPIO_WritePin>
 800211e:	e00a      	b.n	8002136 <velocidades+0x66>
	} else {
		HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 0);
 8002120:	2200      	movs	r2, #0
 8002122:	2101      	movs	r1, #1
 8002124:	4825      	ldr	r0, [pc, #148]	; (80021bc <velocidades+0xec>)
 8002126:	f001 fbab 	bl	8003880 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 0);
 800212a:	2200      	movs	r2, #0
 800212c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002130:	4823      	ldr	r0, [pc, #140]	; (80021c0 <velocidades+0xf0>)
 8002132:	f001 fba5 	bl	8003880 <HAL_GPIO_WritePin>
	}

	if (vr < 0){
 8002136:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800213a:	2b00      	cmp	r3, #0
 800213c:	da0c      	bge.n	8002158 <velocidades+0x88>
		HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 0);
 800213e:	2200      	movs	r2, #0
 8002140:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002144:	481e      	ldr	r0, [pc, #120]	; (80021c0 <velocidades+0xf0>)
 8002146:	f001 fb9b 	bl	8003880 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 1);
 800214a:	2201      	movs	r2, #1
 800214c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002150:	481b      	ldr	r0, [pc, #108]	; (80021c0 <velocidades+0xf0>)
 8002152:	f001 fb95 	bl	8003880 <HAL_GPIO_WritePin>
 8002156:	e01c      	b.n	8002192 <velocidades+0xc2>
	} else if (vr > 0){
 8002158:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800215c:	2b00      	cmp	r3, #0
 800215e:	dd0c      	ble.n	800217a <velocidades+0xaa>
		HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 1);
 8002160:	2201      	movs	r2, #1
 8002162:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002166:	4816      	ldr	r0, [pc, #88]	; (80021c0 <velocidades+0xf0>)
 8002168:	f001 fb8a 	bl	8003880 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 0);
 800216c:	2200      	movs	r2, #0
 800216e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002172:	4813      	ldr	r0, [pc, #76]	; (80021c0 <velocidades+0xf0>)
 8002174:	f001 fb84 	bl	8003880 <HAL_GPIO_WritePin>
 8002178:	e00b      	b.n	8002192 <velocidades+0xc2>
	} else {
		HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 0);
 800217a:	2200      	movs	r2, #0
 800217c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002180:	480f      	ldr	r0, [pc, #60]	; (80021c0 <velocidades+0xf0>)
 8002182:	f001 fb7d 	bl	8003880 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 0);
 8002186:	2200      	movs	r2, #0
 8002188:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800218c:	480c      	ldr	r0, [pc, #48]	; (80021c0 <velocidades+0xf0>)
 800218e:	f001 fb77 	bl	8003880 <HAL_GPIO_WritePin>
	}

	velLFinal = abs(vl);
 8002192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002196:	2b00      	cmp	r3, #0
 8002198:	bfb8      	it	lt
 800219a:	425b      	neglt	r3, r3
 800219c:	b2da      	uxtb	r2, r3
 800219e:	4b09      	ldr	r3, [pc, #36]	; (80021c4 <velocidades+0xf4>)
 80021a0:	701a      	strb	r2, [r3, #0]
	velRFinal = abs(vr);
 80021a2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	bfb8      	it	lt
 80021aa:	425b      	neglt	r3, r3
 80021ac:	b2da      	uxtb	r2, r3
 80021ae:	4b06      	ldr	r3, [pc, #24]	; (80021c8 <velocidades+0xf8>)
 80021b0:	701a      	strb	r2, [r3, #0]

} //end velocidades()
 80021b2:	bf00      	nop
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	40020c00 	.word	0x40020c00
 80021c0:	40020800 	.word	0x40020800
 80021c4:	20000004 	.word	0x20000004
 80021c8:	20000005 	.word	0x20000005

080021cc <encoders>:

void encoders (void){
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0

	if (!flag_encoders) return;
 80021d0:	4b48      	ldr	r3, [pc, #288]	; (80022f4 <encoders+0x128>)
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	f000 8087 	beq.w	80022e8 <encoders+0x11c>

	encoderL = __HAL_TIM_GET_COUNTER(&htim3);
 80021da:	4b47      	ldr	r3, [pc, #284]	; (80022f8 <encoders+0x12c>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e0:	b21a      	sxth	r2, r3
 80021e2:	4b46      	ldr	r3, [pc, #280]	; (80022fc <encoders+0x130>)
 80021e4:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 80021e6:	4b44      	ldr	r3, [pc, #272]	; (80022f8 <encoders+0x12c>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2200      	movs	r2, #0
 80021ec:	625a      	str	r2, [r3, #36]	; 0x24
	encoderR = __HAL_TIM_GET_COUNTER(&htim2);
 80021ee:	4b44      	ldr	r3, [pc, #272]	; (8002300 <encoders+0x134>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f4:	b21a      	sxth	r2, r3
 80021f6:	4b43      	ldr	r3, [pc, #268]	; (8002304 <encoders+0x138>)
 80021f8:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 80021fa:	4b41      	ldr	r3, [pc, #260]	; (8002300 <encoders+0x134>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2200      	movs	r2, #0
 8002200:	625a      	str	r2, [r3, #36]	; 0x24

	TIM4->CCR1 += velLFinal - encoderL;
 8002202:	4b41      	ldr	r3, [pc, #260]	; (8002308 <encoders+0x13c>)
 8002204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002206:	4a41      	ldr	r2, [pc, #260]	; (800230c <encoders+0x140>)
 8002208:	7812      	ldrb	r2, [r2, #0]
 800220a:	4611      	mov	r1, r2
 800220c:	4a3b      	ldr	r2, [pc, #236]	; (80022fc <encoders+0x130>)
 800220e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002212:	1a8a      	subs	r2, r1, r2
 8002214:	4611      	mov	r1, r2
 8002216:	4a3c      	ldr	r2, [pc, #240]	; (8002308 <encoders+0x13c>)
 8002218:	440b      	add	r3, r1
 800221a:	6353      	str	r3, [r2, #52]	; 0x34
//	if (TIM4->CCR1 < 62) TIM4->CCR1 = 62;
//	if (TIM4->CCR1 > 82) TIM4->CCR1 = 82;

	TIM4->CCR2 += velRFinal - encoderR;
 800221c:	4b3a      	ldr	r3, [pc, #232]	; (8002308 <encoders+0x13c>)
 800221e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002220:	4a3b      	ldr	r2, [pc, #236]	; (8002310 <encoders+0x144>)
 8002222:	7812      	ldrb	r2, [r2, #0]
 8002224:	4611      	mov	r1, r2
 8002226:	4a37      	ldr	r2, [pc, #220]	; (8002304 <encoders+0x138>)
 8002228:	f9b2 2000 	ldrsh.w	r2, [r2]
 800222c:	1a8a      	subs	r2, r1, r2
 800222e:	4611      	mov	r1, r2
 8002230:	4a35      	ldr	r2, [pc, #212]	; (8002308 <encoders+0x13c>)
 8002232:	440b      	add	r3, r1
 8002234:	6393      	str	r3, [r2, #56]	; 0x38
//	if (TIM4->CCR2 < 62) TIM4->CCR2 = 62;
//	if (TIM4->CCR2 > 82) TIM4->CCR2 = 82;

	acum_encoderL += encoderL;
 8002236:	4b37      	ldr	r3, [pc, #220]	; (8002314 <encoders+0x148>)
 8002238:	f9b3 3000 	ldrsh.w	r3, [r3]
 800223c:	b29a      	uxth	r2, r3
 800223e:	4b2f      	ldr	r3, [pc, #188]	; (80022fc <encoders+0x130>)
 8002240:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002244:	b29b      	uxth	r3, r3
 8002246:	4413      	add	r3, r2
 8002248:	b29b      	uxth	r3, r3
 800224a:	b21a      	sxth	r2, r3
 800224c:	4b31      	ldr	r3, [pc, #196]	; (8002314 <encoders+0x148>)
 800224e:	801a      	strh	r2, [r3, #0]
	acum_encoderR += encoderR;
 8002250:	4b31      	ldr	r3, [pc, #196]	; (8002318 <encoders+0x14c>)
 8002252:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002256:	b29a      	uxth	r2, r3
 8002258:	4b2a      	ldr	r3, [pc, #168]	; (8002304 <encoders+0x138>)
 800225a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800225e:	b29b      	uxth	r3, r3
 8002260:	4413      	add	r3, r2
 8002262:	b29b      	uxth	r3, r3
 8002264:	b21a      	sxth	r2, r3
 8002266:	4b2c      	ldr	r3, [pc, #176]	; (8002318 <encoders+0x14c>)
 8002268:	801a      	strh	r2, [r3, #0]

	//avance del centro de masa
	if (velL > 0)
 800226a:	4b2c      	ldr	r3, [pc, #176]	; (800231c <encoders+0x150>)
 800226c:	f993 3000 	ldrsb.w	r3, [r3]
 8002270:	2b00      	cmp	r3, #0
 8002272:	dd05      	ble.n	8002280 <encoders+0xb4>
		distL = encoderL;
 8002274:	4b21      	ldr	r3, [pc, #132]	; (80022fc <encoders+0x130>)
 8002276:	f9b3 2000 	ldrsh.w	r2, [r3]
 800227a:	4b29      	ldr	r3, [pc, #164]	; (8002320 <encoders+0x154>)
 800227c:	801a      	strh	r2, [r3, #0]
 800227e:	e008      	b.n	8002292 <encoders+0xc6>
	else
		distL = -encoderL;
 8002280:	4b1e      	ldr	r3, [pc, #120]	; (80022fc <encoders+0x130>)
 8002282:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002286:	b29b      	uxth	r3, r3
 8002288:	425b      	negs	r3, r3
 800228a:	b29b      	uxth	r3, r3
 800228c:	b21a      	sxth	r2, r3
 800228e:	4b24      	ldr	r3, [pc, #144]	; (8002320 <encoders+0x154>)
 8002290:	801a      	strh	r2, [r3, #0]

	if (velR > 0)
 8002292:	4b24      	ldr	r3, [pc, #144]	; (8002324 <encoders+0x158>)
 8002294:	f993 3000 	ldrsb.w	r3, [r3]
 8002298:	2b00      	cmp	r3, #0
 800229a:	dd05      	ble.n	80022a8 <encoders+0xdc>
		distR = encoderR;
 800229c:	4b19      	ldr	r3, [pc, #100]	; (8002304 <encoders+0x138>)
 800229e:	f9b3 2000 	ldrsh.w	r2, [r3]
 80022a2:	4b21      	ldr	r3, [pc, #132]	; (8002328 <encoders+0x15c>)
 80022a4:	801a      	strh	r2, [r3, #0]
 80022a6:	e008      	b.n	80022ba <encoders+0xee>
	else
		distR = -encoderR;
 80022a8:	4b16      	ldr	r3, [pc, #88]	; (8002304 <encoders+0x138>)
 80022aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	425b      	negs	r3, r3
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	b21a      	sxth	r2, r3
 80022b6:	4b1c      	ldr	r3, [pc, #112]	; (8002328 <encoders+0x15c>)
 80022b8:	801a      	strh	r2, [r3, #0]

	distC += (distL + distR) >> 1;
 80022ba:	4b19      	ldr	r3, [pc, #100]	; (8002320 <encoders+0x154>)
 80022bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022c0:	461a      	mov	r2, r3
 80022c2:	4b19      	ldr	r3, [pc, #100]	; (8002328 <encoders+0x15c>)
 80022c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022c8:	4413      	add	r3, r2
 80022ca:	105b      	asrs	r3, r3, #1
 80022cc:	b29a      	uxth	r2, r3
 80022ce:	4b17      	ldr	r3, [pc, #92]	; (800232c <encoders+0x160>)
 80022d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	4413      	add	r3, r2
 80022d8:	b29b      	uxth	r3, r3
 80022da:	b21a      	sxth	r2, r3
 80022dc:	4b13      	ldr	r3, [pc, #76]	; (800232c <encoders+0x160>)
 80022de:	801a      	strh	r2, [r3, #0]

	flag_encoders = 0;
 80022e0:	4b04      	ldr	r3, [pc, #16]	; (80022f4 <encoders+0x128>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	701a      	strb	r2, [r3, #0]
 80022e6:	e000      	b.n	80022ea <encoders+0x11e>
	if (!flag_encoders) return;
 80022e8:	bf00      	nop

} //fin encoders()
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	200000f6 	.word	0x200000f6
 80022f8:	20000150 	.word	0x20000150
 80022fc:	200000f8 	.word	0x200000f8
 8002300:	20000110 	.word	0x20000110
 8002304:	200000fa 	.word	0x200000fa
 8002308:	40000800 	.word	0x40000800
 800230c:	20000004 	.word	0x20000004
 8002310:	20000005 	.word	0x20000005
 8002314:	200000fc 	.word	0x200000fc
 8002318:	200000fe 	.word	0x200000fe
 800231c:	20000002 	.word	0x20000002
 8002320:	200000b0 	.word	0x200000b0
 8002324:	20000003 	.word	0x20000003
 8002328:	200000b2 	.word	0x200000b2
 800232c:	200000b4 	.word	0x200000b4

08002330 <posicionamiento>:

void posicionamiento (void){
 8002330:	b580      	push	{r7, lr}
 8002332:	ed2d 8b02 	vpush	{d8}
 8002336:	af00      	add	r7, sp, #0
	posX_i16 = posX_f32; //posicion X en int16
	posY_i16 = posY_f32; //posicion Y en int16
	*/

	//por odometria
	direccion_f32 += (float) ( (distR - distL) * RADIANES_X_PULSO); //radianes en float
 8002338:	4b4b      	ldr	r3, [pc, #300]	; (8002468 <posicionamiento+0x138>)
 800233a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800233e:	461a      	mov	r2, r3
 8002340:	4b4a      	ldr	r3, [pc, #296]	; (800246c <posicionamiento+0x13c>)
 8002342:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	4618      	mov	r0, r3
 800234a:	f7fe f8a3 	bl	8000494 <__aeabi_i2d>
 800234e:	a342      	add	r3, pc, #264	; (adr r3, 8002458 <posicionamiento+0x128>)
 8002350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002354:	f7fe f908 	bl	8000568 <__aeabi_dmul>
 8002358:	4602      	mov	r2, r0
 800235a:	460b      	mov	r3, r1
 800235c:	4610      	mov	r0, r2
 800235e:	4619      	mov	r1, r3
 8002360:	f7fe fb14 	bl	800098c <__aeabi_d2f>
 8002364:	ee07 0a10 	vmov	s14, r0
 8002368:	4b41      	ldr	r3, [pc, #260]	; (8002470 <posicionamiento+0x140>)
 800236a:	edd3 7a00 	vldr	s15, [r3]
 800236e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002372:	4b3f      	ldr	r3, [pc, #252]	; (8002470 <posicionamiento+0x140>)
 8002374:	edc3 7a00 	vstr	s15, [r3]
	posX_f32 += (float) (distC * cosf(direccion_rad)); //posicion X en float
 8002378:	4b3e      	ldr	r3, [pc, #248]	; (8002474 <posicionamiento+0x144>)
 800237a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800237e:	ee07 3a90 	vmov	s15, r3
 8002382:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8002386:	4b3c      	ldr	r3, [pc, #240]	; (8002478 <posicionamiento+0x148>)
 8002388:	edd3 7a00 	vldr	s15, [r3]
 800238c:	eeb0 0a67 	vmov.f32	s0, s15
 8002390:	f005 f95a 	bl	8007648 <cosf>
 8002394:	eef0 7a40 	vmov.f32	s15, s0
 8002398:	ee28 7a27 	vmul.f32	s14, s16, s15
 800239c:	4b37      	ldr	r3, [pc, #220]	; (800247c <posicionamiento+0x14c>)
 800239e:	edd3 7a00 	vldr	s15, [r3]
 80023a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023a6:	4b35      	ldr	r3, [pc, #212]	; (800247c <posicionamiento+0x14c>)
 80023a8:	edc3 7a00 	vstr	s15, [r3]
	posY_f32 += (float) (distC * sinf(direccion_rad)); //posicion Y en float
 80023ac:	4b31      	ldr	r3, [pc, #196]	; (8002474 <posicionamiento+0x144>)
 80023ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023b2:	ee07 3a90 	vmov	s15, r3
 80023b6:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80023ba:	4b2f      	ldr	r3, [pc, #188]	; (8002478 <posicionamiento+0x148>)
 80023bc:	edd3 7a00 	vldr	s15, [r3]
 80023c0:	eeb0 0a67 	vmov.f32	s0, s15
 80023c4:	f005 f984 	bl	80076d0 <sinf>
 80023c8:	eef0 7a40 	vmov.f32	s15, s0
 80023cc:	ee28 7a27 	vmul.f32	s14, s16, s15
 80023d0:	4b2b      	ldr	r3, [pc, #172]	; (8002480 <posicionamiento+0x150>)
 80023d2:	edd3 7a00 	vldr	s15, [r3]
 80023d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023da:	4b29      	ldr	r3, [pc, #164]	; (8002480 <posicionamiento+0x150>)
 80023dc:	edc3 7a00 	vstr	s15, [r3]
	distC = 0;
 80023e0:	4b24      	ldr	r3, [pc, #144]	; (8002474 <posicionamiento+0x144>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	801a      	strh	r2, [r3, #0]
	direccion_f32 *= (180.0/M_PI); //grados en float
 80023e6:	4b22      	ldr	r3, [pc, #136]	; (8002470 <posicionamiento+0x140>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7fe f864 	bl	80004b8 <__aeabi_f2d>
 80023f0:	a31b      	add	r3, pc, #108	; (adr r3, 8002460 <posicionamiento+0x130>)
 80023f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f6:	f7fe f8b7 	bl	8000568 <__aeabi_dmul>
 80023fa:	4602      	mov	r2, r0
 80023fc:	460b      	mov	r3, r1
 80023fe:	4610      	mov	r0, r2
 8002400:	4619      	mov	r1, r3
 8002402:	f7fe fac3 	bl	800098c <__aeabi_d2f>
 8002406:	4603      	mov	r3, r0
 8002408:	4a19      	ldr	r2, [pc, #100]	; (8002470 <posicionamiento+0x140>)
 800240a:	6013      	str	r3, [r2, #0]
	direccion_i16 = direccion_f32; //grados en int16
 800240c:	4b18      	ldr	r3, [pc, #96]	; (8002470 <posicionamiento+0x140>)
 800240e:	edd3 7a00 	vldr	s15, [r3]
 8002412:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002416:	ee17 3a90 	vmov	r3, s15
 800241a:	b21a      	sxth	r2, r3
 800241c:	4b19      	ldr	r3, [pc, #100]	; (8002484 <posicionamiento+0x154>)
 800241e:	801a      	strh	r2, [r3, #0]
	posX_i16 = posX_f32; //posicion X en int16
 8002420:	4b16      	ldr	r3, [pc, #88]	; (800247c <posicionamiento+0x14c>)
 8002422:	edd3 7a00 	vldr	s15, [r3]
 8002426:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800242a:	ee17 3a90 	vmov	r3, s15
 800242e:	b21a      	sxth	r2, r3
 8002430:	4b15      	ldr	r3, [pc, #84]	; (8002488 <posicionamiento+0x158>)
 8002432:	801a      	strh	r2, [r3, #0]
	posY_i16 = posY_f32; //posicion Y en int16
 8002434:	4b12      	ldr	r3, [pc, #72]	; (8002480 <posicionamiento+0x150>)
 8002436:	edd3 7a00 	vldr	s15, [r3]
 800243a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800243e:	ee17 3a90 	vmov	r3, s15
 8002442:	b21a      	sxth	r2, r3
 8002444:	4b11      	ldr	r3, [pc, #68]	; (800248c <posicionamiento+0x15c>)
 8002446:	801a      	strh	r2, [r3, #0]


} //fin posicionamiento ()
 8002448:	bf00      	nop
 800244a:	46bd      	mov	sp, r7
 800244c:	ecbd 8b02 	vpop	{d8}
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	f3af 8000 	nop.w
 8002458:	a4514c41 	.word	0xa4514c41
 800245c:	3fb4e912 	.word	0x3fb4e912
 8002460:	1a63c1f8 	.word	0x1a63c1f8
 8002464:	404ca5dc 	.word	0x404ca5dc
 8002468:	200000b2 	.word	0x200000b2
 800246c:	200000b0 	.word	0x200000b0
 8002470:	200000b8 	.word	0x200000b8
 8002474:	200000b4 	.word	0x200000b4
 8002478:	200000bc 	.word	0x200000bc
 800247c:	200000d0 	.word	0x200000d0
 8002480:	200000d4 	.word	0x200000d4
 8002484:	200000c0 	.word	0x200000c0
 8002488:	200000d8 	.word	0x200000d8
 800248c:	200000da 	.word	0x200000da

08002490 <modo_funcionamiento>:

	HAL_UART_Receive_IT(&huart7, rxUart, 4);

} //end check_rxUart ()

void modo_funcionamiento (void){
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0

	switch (modoFuncionamiento) {
 8002494:	4b07      	ldr	r3, [pc, #28]	; (80024b4 <modo_funcionamiento+0x24>)
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d002      	beq.n	80024a2 <modo_funcionamiento+0x12>
 800249c:	2b01      	cmp	r3, #1
 800249e:	d003      	beq.n	80024a8 <modo_funcionamiento+0x18>
		break;
		case MANUAL:
			movimientoRC();
		break;
		default:
		break;
 80024a0:	e005      	b.n	80024ae <modo_funcionamiento+0x1e>
			movimientoLibre();
 80024a2:	f7ff fb69 	bl	8001b78 <movimientoLibre>
		break;
 80024a6:	e002      	b.n	80024ae <modo_funcionamiento+0x1e>
			movimientoRC();
 80024a8:	f7ff fc58 	bl	8001d5c <movimientoRC>
		break;
 80024ac:	bf00      	nop
	} //end switch modoFuncionamiento

} //end modo_funcionamiento ()
 80024ae:	bf00      	nop
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	20000000 	.word	0x20000000

080024b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80024bc:	bf00      	nop
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
	...

080024c8 <mpu9265_Init>:





void mpu9265_Init(I2C_HandleTypeDef* i2c_handler){
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b088      	sub	sp, #32
 80024cc:	af04      	add	r7, sp, #16
 80024ce:	6078      	str	r0, [r7, #4]
	uint8_t check, data;

	hi2c_mpu = i2c_handler;
 80024d0:	4aa3      	ldr	r2, [pc, #652]	; (8002760 <mpu9265_Init+0x298>)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6013      	str	r3, [r2, #0]

	HAL_I2C_Mem_Read(hi2c_mpu, MPU9250_ADDRESS << 1, WHO_AM_I_MPU9250, 1, &check, 1, 1000);
 80024d6:	4ba2      	ldr	r3, [pc, #648]	; (8002760 <mpu9265_Init+0x298>)
 80024d8:	6818      	ldr	r0, [r3, #0]
 80024da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024de:	9302      	str	r3, [sp, #8]
 80024e0:	2301      	movs	r3, #1
 80024e2:	9301      	str	r3, [sp, #4]
 80024e4:	f107 030f 	add.w	r3, r7, #15
 80024e8:	9300      	str	r3, [sp, #0]
 80024ea:	2301      	movs	r3, #1
 80024ec:	2275      	movs	r2, #117	; 0x75
 80024ee:	21d0      	movs	r1, #208	; 0xd0
 80024f0:	f001 fc1e 	bl	8003d30 <HAL_I2C_Mem_Read>

	if (check == 0X73){ //successfull respond
 80024f4:	7bfb      	ldrb	r3, [r7, #15]
 80024f6:	2b73      	cmp	r3, #115	; 0x73
 80024f8:	d141      	bne.n	800257e <mpu9265_Init+0xb6>
		data = 0;
 80024fa:	2300      	movs	r3, #0
 80024fc:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(hi2c_mpu, MPU9250_ADDRESS << 1, PWR_MGMT_1, 1, &data, 1, 1000); //writing 0 in PWR_MGMT_1 reg to wake it up.
 80024fe:	4b98      	ldr	r3, [pc, #608]	; (8002760 <mpu9265_Init+0x298>)
 8002500:	6818      	ldr	r0, [r3, #0]
 8002502:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002506:	9302      	str	r3, [sp, #8]
 8002508:	2301      	movs	r3, #1
 800250a:	9301      	str	r3, [sp, #4]
 800250c:	f107 030e 	add.w	r3, r7, #14
 8002510:	9300      	str	r3, [sp, #0]
 8002512:	2301      	movs	r3, #1
 8002514:	226b      	movs	r2, #107	; 0x6b
 8002516:	21d0      	movs	r1, #208	; 0xd0
 8002518:	f001 fb10 	bl	8003b3c <HAL_I2C_Mem_Write>

		data = 0X07;
 800251c:	2307      	movs	r3, #7
 800251e:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(hi2c_mpu, MPU9250_ADDRESS << 1, SMPLRT_DIV, 1, &data, 1, 1000); //seting data rate in 1kHz by writing 0x07 in SMPLRT_DIV reg.
 8002520:	4b8f      	ldr	r3, [pc, #572]	; (8002760 <mpu9265_Init+0x298>)
 8002522:	6818      	ldr	r0, [r3, #0]
 8002524:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002528:	9302      	str	r3, [sp, #8]
 800252a:	2301      	movs	r3, #1
 800252c:	9301      	str	r3, [sp, #4]
 800252e:	f107 030e 	add.w	r3, r7, #14
 8002532:	9300      	str	r3, [sp, #0]
 8002534:	2301      	movs	r3, #1
 8002536:	2219      	movs	r2, #25
 8002538:	21d0      	movs	r1, #208	; 0xd0
 800253a:	f001 faff 	bl	8003b3c <HAL_I2C_Mem_Write>

		data = 0;
 800253e:	2300      	movs	r3, #0
 8002540:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(hi2c_mpu, MPU9250_ADDRESS << 1, GYRO_CONFIG, 1, &data, 1, 1000); //SET GYROSCOPIC CONFIGURATION: XG_ST=0; YG_ST=0; ZG_ST=0; FS_SEL=0 -> +/- 250 º/s.
 8002542:	4b87      	ldr	r3, [pc, #540]	; (8002760 <mpu9265_Init+0x298>)
 8002544:	6818      	ldr	r0, [r3, #0]
 8002546:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800254a:	9302      	str	r3, [sp, #8]
 800254c:	2301      	movs	r3, #1
 800254e:	9301      	str	r3, [sp, #4]
 8002550:	f107 030e 	add.w	r3, r7, #14
 8002554:	9300      	str	r3, [sp, #0]
 8002556:	2301      	movs	r3, #1
 8002558:	221b      	movs	r2, #27
 800255a:	21d0      	movs	r1, #208	; 0xd0
 800255c:	f001 faee 	bl	8003b3c <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Write(hi2c_mpu, MPU9250_ADDRESS << 1, ACCEL_CONFIG, 1, &data, 1, 1000); //SET accelerometer CONFIGURATION: XA_ST=0; YA_ST=0; ZA_ST=0; FS_SEL=0 -> +/- 2g.
 8002560:	4b7f      	ldr	r3, [pc, #508]	; (8002760 <mpu9265_Init+0x298>)
 8002562:	6818      	ldr	r0, [r3, #0]
 8002564:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002568:	9302      	str	r3, [sp, #8]
 800256a:	2301      	movs	r3, #1
 800256c:	9301      	str	r3, [sp, #4]
 800256e:	f107 030e 	add.w	r3, r7, #14
 8002572:	9300      	str	r3, [sp, #0]
 8002574:	2301      	movs	r3, #1
 8002576:	221c      	movs	r2, #28
 8002578:	21d0      	movs	r1, #208	; 0xd0
 800257a:	f001 fadf 	bl	8003b3c <HAL_I2C_Mem_Write>
	}else{
		//Error_Handler();
	}

	//magnetometer//
	data = 0b10; //i2c bypass bit, in INT_PIN_CFG reg. (made to reach the magnetometer)
 800257e:	2302      	movs	r3, #2
 8002580:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(hi2c_mpu, MPU9250_ADDRESS << 1, INT_PIN_CFG, 1, &data, 1, 1000);
 8002582:	4b77      	ldr	r3, [pc, #476]	; (8002760 <mpu9265_Init+0x298>)
 8002584:	6818      	ldr	r0, [r3, #0]
 8002586:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800258a:	9302      	str	r3, [sp, #8]
 800258c:	2301      	movs	r3, #1
 800258e:	9301      	str	r3, [sp, #4]
 8002590:	f107 030e 	add.w	r3, r7, #14
 8002594:	9300      	str	r3, [sp, #0]
 8002596:	2301      	movs	r3, #1
 8002598:	2237      	movs	r2, #55	; 0x37
 800259a:	21d0      	movs	r1, #208	; 0xd0
 800259c:	f001 face 	bl	8003b3c <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Read(hi2c_mpu, AK8963_ADDRESS << 1, WHO_AM_I_AK8963, 1, &check, 1, 1000);
 80025a0:	4b6f      	ldr	r3, [pc, #444]	; (8002760 <mpu9265_Init+0x298>)
 80025a2:	6818      	ldr	r0, [r3, #0]
 80025a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025a8:	9302      	str	r3, [sp, #8]
 80025aa:	2301      	movs	r3, #1
 80025ac:	9301      	str	r3, [sp, #4]
 80025ae:	f107 030f 	add.w	r3, r7, #15
 80025b2:	9300      	str	r3, [sp, #0]
 80025b4:	2301      	movs	r3, #1
 80025b6:	2200      	movs	r2, #0
 80025b8:	2118      	movs	r1, #24
 80025ba:	f001 fbb9 	bl	8003d30 <HAL_I2C_Mem_Read>
	HAL_Delay(1);
 80025be:	2001      	movs	r0, #1
 80025c0:	f000 fdd4 	bl	800316c <HAL_Delay>
	if (check == 0X48){ //successfull respond
 80025c4:	7bfb      	ldrb	r3, [r7, #15]
 80025c6:	2b48      	cmp	r3, #72	; 0x48
 80025c8:	f040 80c5 	bne.w	8002756 <mpu9265_Init+0x28e>

		//Power down magnetometer
		data = 0x00;
 80025cc:	2300      	movs	r3, #0
 80025ce:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(hi2c_mpu, AK8963_ADDRESS << 1, AK8963_CNTL, 1, &data, 1, 1000);
 80025d0:	4b63      	ldr	r3, [pc, #396]	; (8002760 <mpu9265_Init+0x298>)
 80025d2:	6818      	ldr	r0, [r3, #0]
 80025d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025d8:	9302      	str	r3, [sp, #8]
 80025da:	2301      	movs	r3, #1
 80025dc:	9301      	str	r3, [sp, #4]
 80025de:	f107 030e 	add.w	r3, r7, #14
 80025e2:	9300      	str	r3, [sp, #0]
 80025e4:	2301      	movs	r3, #1
 80025e6:	220a      	movs	r2, #10
 80025e8:	2118      	movs	r1, #24
 80025ea:	f001 faa7 	bl	8003b3c <HAL_I2C_Mem_Write>
		HAL_Delay(100);
 80025ee:	2064      	movs	r0, #100	; 0x64
 80025f0:	f000 fdbc 	bl	800316c <HAL_Delay>

		//Enter Fuse ROM access mode
		data = 0x0F; //Fuse ROM access mode
 80025f4:	230f      	movs	r3, #15
 80025f6:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(hi2c_mpu, AK8963_ADDRESS << 1, AK8963_CNTL, 1, &data, 1, 1000); //Control 1 register
 80025f8:	4b59      	ldr	r3, [pc, #356]	; (8002760 <mpu9265_Init+0x298>)
 80025fa:	6818      	ldr	r0, [r3, #0]
 80025fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002600:	9302      	str	r3, [sp, #8]
 8002602:	2301      	movs	r3, #1
 8002604:	9301      	str	r3, [sp, #4]
 8002606:	f107 030e 	add.w	r3, r7, #14
 800260a:	9300      	str	r3, [sp, #0]
 800260c:	2301      	movs	r3, #1
 800260e:	220a      	movs	r2, #10
 8002610:	2118      	movs	r1, #24
 8002612:	f001 fa93 	bl	8003b3c <HAL_I2C_Mem_Write>
		HAL_Delay(100);
 8002616:	2064      	movs	r0, #100	; 0x64
 8002618:	f000 fda8 	bl	800316c <HAL_Delay>

		//Read the x-, y-, and z-axis calibration values
		uint8_t rawMagCalData[3];
		HAL_I2C_Mem_Read(hi2c_mpu, AK8963_ADDRESS << 1, AK8963_ASAX, 1, &rawMagCalData[0], 3, 1000); //Sensitivity Adjustment values registers (read-only)
 800261c:	4b50      	ldr	r3, [pc, #320]	; (8002760 <mpu9265_Init+0x298>)
 800261e:	6818      	ldr	r0, [r3, #0]
 8002620:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002624:	9302      	str	r3, [sp, #8]
 8002626:	2303      	movs	r3, #3
 8002628:	9301      	str	r3, [sp, #4]
 800262a:	f107 0308 	add.w	r3, r7, #8
 800262e:	9300      	str	r3, [sp, #0]
 8002630:	2301      	movs	r3, #1
 8002632:	2210      	movs	r2, #16
 8002634:	2118      	movs	r1, #24
 8002636:	f001 fb7b 	bl	8003d30 <HAL_I2C_Mem_Read>
		calMagX =  (float)(rawMagCalData[0] - 128)/256. + 1.;   // Return x-axis sensitivity adjustment values, etc.
 800263a:	7a3b      	ldrb	r3, [r7, #8]
 800263c:	3b80      	subs	r3, #128	; 0x80
 800263e:	ee07 3a90 	vmov	s15, r3
 8002642:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002646:	ee17 0a90 	vmov	r0, s15
 800264a:	f7fd ff35 	bl	80004b8 <__aeabi_f2d>
 800264e:	f04f 0200 	mov.w	r2, #0
 8002652:	4b44      	ldr	r3, [pc, #272]	; (8002764 <mpu9265_Init+0x29c>)
 8002654:	f7fe f8b2 	bl	80007bc <__aeabi_ddiv>
 8002658:	4602      	mov	r2, r0
 800265a:	460b      	mov	r3, r1
 800265c:	4610      	mov	r0, r2
 800265e:	4619      	mov	r1, r3
 8002660:	f04f 0200 	mov.w	r2, #0
 8002664:	4b40      	ldr	r3, [pc, #256]	; (8002768 <mpu9265_Init+0x2a0>)
 8002666:	f7fd fdc9 	bl	80001fc <__adddf3>
 800266a:	4602      	mov	r2, r0
 800266c:	460b      	mov	r3, r1
 800266e:	4610      	mov	r0, r2
 8002670:	4619      	mov	r1, r3
 8002672:	f7fe f98b 	bl	800098c <__aeabi_d2f>
 8002676:	4603      	mov	r3, r0
 8002678:	4a3c      	ldr	r2, [pc, #240]	; (800276c <mpu9265_Init+0x2a4>)
 800267a:	6013      	str	r3, [r2, #0]
		calMagY =  (float)(rawMagCalData[1] - 128)/256. + 1.;
 800267c:	7a7b      	ldrb	r3, [r7, #9]
 800267e:	3b80      	subs	r3, #128	; 0x80
 8002680:	ee07 3a90 	vmov	s15, r3
 8002684:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002688:	ee17 0a90 	vmov	r0, s15
 800268c:	f7fd ff14 	bl	80004b8 <__aeabi_f2d>
 8002690:	f04f 0200 	mov.w	r2, #0
 8002694:	4b33      	ldr	r3, [pc, #204]	; (8002764 <mpu9265_Init+0x29c>)
 8002696:	f7fe f891 	bl	80007bc <__aeabi_ddiv>
 800269a:	4602      	mov	r2, r0
 800269c:	460b      	mov	r3, r1
 800269e:	4610      	mov	r0, r2
 80026a0:	4619      	mov	r1, r3
 80026a2:	f04f 0200 	mov.w	r2, #0
 80026a6:	4b30      	ldr	r3, [pc, #192]	; (8002768 <mpu9265_Init+0x2a0>)
 80026a8:	f7fd fda8 	bl	80001fc <__adddf3>
 80026ac:	4602      	mov	r2, r0
 80026ae:	460b      	mov	r3, r1
 80026b0:	4610      	mov	r0, r2
 80026b2:	4619      	mov	r1, r3
 80026b4:	f7fe f96a 	bl	800098c <__aeabi_d2f>
 80026b8:	4603      	mov	r3, r0
 80026ba:	4a2d      	ldr	r2, [pc, #180]	; (8002770 <mpu9265_Init+0x2a8>)
 80026bc:	6013      	str	r3, [r2, #0]
		calMagZ =  (float)(rawMagCalData[2] - 128)/256. + 1.;
 80026be:	7abb      	ldrb	r3, [r7, #10]
 80026c0:	3b80      	subs	r3, #128	; 0x80
 80026c2:	ee07 3a90 	vmov	s15, r3
 80026c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026ca:	ee17 0a90 	vmov	r0, s15
 80026ce:	f7fd fef3 	bl	80004b8 <__aeabi_f2d>
 80026d2:	f04f 0200 	mov.w	r2, #0
 80026d6:	4b23      	ldr	r3, [pc, #140]	; (8002764 <mpu9265_Init+0x29c>)
 80026d8:	f7fe f870 	bl	80007bc <__aeabi_ddiv>
 80026dc:	4602      	mov	r2, r0
 80026de:	460b      	mov	r3, r1
 80026e0:	4610      	mov	r0, r2
 80026e2:	4619      	mov	r1, r3
 80026e4:	f04f 0200 	mov.w	r2, #0
 80026e8:	4b1f      	ldr	r3, [pc, #124]	; (8002768 <mpu9265_Init+0x2a0>)
 80026ea:	f7fd fd87 	bl	80001fc <__adddf3>
 80026ee:	4602      	mov	r2, r0
 80026f0:	460b      	mov	r3, r1
 80026f2:	4610      	mov	r0, r2
 80026f4:	4619      	mov	r1, r3
 80026f6:	f7fe f949 	bl	800098c <__aeabi_d2f>
 80026fa:	4603      	mov	r3, r0
 80026fc:	4a1d      	ldr	r2, [pc, #116]	; (8002774 <mpu9265_Init+0x2ac>)
 80026fe:	6013      	str	r3, [r2, #0]
		HAL_Delay(100);
 8002700:	2064      	movs	r0, #100	; 0x64
 8002702:	f000 fd33 	bl	800316c <HAL_Delay>

		//Power down magnetometer
		data = 0x00;
 8002706:	2300      	movs	r3, #0
 8002708:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(hi2c_mpu, AK8963_ADDRESS << 1, AK8963_CNTL, 1, &data, 1, 1000);
 800270a:	4b15      	ldr	r3, [pc, #84]	; (8002760 <mpu9265_Init+0x298>)
 800270c:	6818      	ldr	r0, [r3, #0]
 800270e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002712:	9302      	str	r3, [sp, #8]
 8002714:	2301      	movs	r3, #1
 8002716:	9301      	str	r3, [sp, #4]
 8002718:	f107 030e 	add.w	r3, r7, #14
 800271c:	9300      	str	r3, [sp, #0]
 800271e:	2301      	movs	r3, #1
 8002720:	220a      	movs	r2, #10
 8002722:	2118      	movs	r1, #24
 8002724:	f001 fa0a 	bl	8003b3c <HAL_I2C_Mem_Write>
		HAL_Delay(100);
 8002728:	2064      	movs	r0, #100	; 0x64
 800272a:	f000 fd1f 	bl	800316c <HAL_Delay>

		//Set magnetometer data resolution and sample ODR
		data = 0b10010; // 0b10110: 0001 (MSB, 16 bit resolution) 0010 (LSB, 8Hz sample rate (Continuous measurement mode 1) ).
 800272e:	2312      	movs	r3, #18
 8002730:	73bb      	strb	r3, [r7, #14]
//		data = 0B10110; // 0b10110: 0001 (MSB, 16 bit resolution) 0110 (LSB, 100Hz sample rate (Continuous measurement mode 2) ).
		HAL_I2C_Mem_Write(hi2c_mpu, AK8963_ADDRESS << 1, AK8963_CNTL, 1, &data, 1, 1000);
 8002732:	4b0b      	ldr	r3, [pc, #44]	; (8002760 <mpu9265_Init+0x298>)
 8002734:	6818      	ldr	r0, [r3, #0]
 8002736:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800273a:	9302      	str	r3, [sp, #8]
 800273c:	2301      	movs	r3, #1
 800273e:	9301      	str	r3, [sp, #4]
 8002740:	f107 030e 	add.w	r3, r7, #14
 8002744:	9300      	str	r3, [sp, #0]
 8002746:	2301      	movs	r3, #1
 8002748:	220a      	movs	r2, #10
 800274a:	2118      	movs	r1, #24
 800274c:	f001 f9f6 	bl	8003b3c <HAL_I2C_Mem_Write>
		HAL_Delay(100);
 8002750:	2064      	movs	r0, #100	; 0x64
 8002752:	f000 fd0b 	bl	800316c <HAL_Delay>
		//Error_Handler();
	}



}
 8002756:	bf00      	nop
 8002758:	3710      	adds	r7, #16
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	20000100 	.word	0x20000100
 8002764:	40700000 	.word	0x40700000
 8002768:	3ff00000 	.word	0x3ff00000
 800276c:	20000104 	.word	0x20000104
 8002770:	20000108 	.word	0x20000108
 8002774:	2000010c 	.word	0x2000010c

08002778 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800277e:	2300      	movs	r3, #0
 8002780:	607b      	str	r3, [r7, #4]
 8002782:	4b10      	ldr	r3, [pc, #64]	; (80027c4 <HAL_MspInit+0x4c>)
 8002784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002786:	4a0f      	ldr	r2, [pc, #60]	; (80027c4 <HAL_MspInit+0x4c>)
 8002788:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800278c:	6453      	str	r3, [r2, #68]	; 0x44
 800278e:	4b0d      	ldr	r3, [pc, #52]	; (80027c4 <HAL_MspInit+0x4c>)
 8002790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002792:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002796:	607b      	str	r3, [r7, #4]
 8002798:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800279a:	2300      	movs	r3, #0
 800279c:	603b      	str	r3, [r7, #0]
 800279e:	4b09      	ldr	r3, [pc, #36]	; (80027c4 <HAL_MspInit+0x4c>)
 80027a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a2:	4a08      	ldr	r2, [pc, #32]	; (80027c4 <HAL_MspInit+0x4c>)
 80027a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027a8:	6413      	str	r3, [r2, #64]	; 0x40
 80027aa:	4b06      	ldr	r3, [pc, #24]	; (80027c4 <HAL_MspInit+0x4c>)
 80027ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027b2:	603b      	str	r3, [r7, #0]
 80027b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027b6:	bf00      	nop
 80027b8:	370c      	adds	r7, #12
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	40023800 	.word	0x40023800

080027c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80027cc:	bf00      	nop
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr

080027d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027d6:	b480      	push	{r7}
 80027d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027da:	e7fe      	b.n	80027da <HardFault_Handler+0x4>

080027dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027e0:	e7fe      	b.n	80027e0 <MemManage_Handler+0x4>

080027e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027e2:	b480      	push	{r7}
 80027e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027e6:	e7fe      	b.n	80027e6 <BusFault_Handler+0x4>

080027e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027ec:	e7fe      	b.n	80027ec <UsageFault_Handler+0x4>

080027ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027ee:	b480      	push	{r7}
 80027f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027f2:	bf00      	nop
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002800:	bf00      	nop
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr

0800280a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800280a:	b480      	push	{r7}
 800280c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800280e:	bf00      	nop
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800281c:	f000 fc86 	bl	800312c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002820:	bf00      	nop
 8002822:	bd80      	pop	{r7, pc}

08002824 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002828:	4802      	ldr	r0, [pc, #8]	; (8002834 <TIM5_IRQHandler+0x10>)
 800282a:	f002 fedf 	bl	80055ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800282e:	bf00      	nop
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	200001d0 	.word	0x200001d0

08002838 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800283c:	4802      	ldr	r0, [pc, #8]	; (8002848 <TIM7_IRQHandler+0x10>)
 800283e:	f002 fed5 	bl	80055ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002842:	bf00      	nop
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	20000210 	.word	0x20000210

0800284c <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8002850:	4802      	ldr	r0, [pc, #8]	; (800285c <UART7_IRQHandler+0x10>)
 8002852:	f003 ffc9 	bl	80067e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8002856:	bf00      	nop
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	20000250 	.word	0x20000250

08002860 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002864:	4b08      	ldr	r3, [pc, #32]	; (8002888 <SystemInit+0x28>)
 8002866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800286a:	4a07      	ldr	r2, [pc, #28]	; (8002888 <SystemInit+0x28>)
 800286c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002870:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002874:	4b04      	ldr	r3, [pc, #16]	; (8002888 <SystemInit+0x28>)
 8002876:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800287a:	609a      	str	r2, [r3, #8]
#endif
}
 800287c:	bf00      	nop
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	e000ed00 	.word	0xe000ed00

0800288c <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b086      	sub	sp, #24
 8002890:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002892:	f107 0308 	add.w	r3, r7, #8
 8002896:	2200      	movs	r2, #0
 8002898:	601a      	str	r2, [r3, #0]
 800289a:	605a      	str	r2, [r3, #4]
 800289c:	609a      	str	r2, [r3, #8]
 800289e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028a0:	463b      	mov	r3, r7
 80028a2:	2200      	movs	r2, #0
 80028a4:	601a      	str	r2, [r3, #0]
 80028a6:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 80028a8:	4b20      	ldr	r3, [pc, #128]	; (800292c <MX_TIM2_Init+0xa0>)
 80028aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80028ae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80028b0:	4b1e      	ldr	r3, [pc, #120]	; (800292c <MX_TIM2_Init+0xa0>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028b6:	4b1d      	ldr	r3, [pc, #116]	; (800292c <MX_TIM2_Init+0xa0>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80028bc:	4b1b      	ldr	r3, [pc, #108]	; (800292c <MX_TIM2_Init+0xa0>)
 80028be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80028c2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028c4:	4b19      	ldr	r3, [pc, #100]	; (800292c <MX_TIM2_Init+0xa0>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028ca:	4b18      	ldr	r3, [pc, #96]	; (800292c <MX_TIM2_Init+0xa0>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80028d0:	4816      	ldr	r0, [pc, #88]	; (800292c <MX_TIM2_Init+0xa0>)
 80028d2:	f002 fd07 	bl	80052e4 <HAL_TIM_Base_Init>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80028dc:	f7ff fdec 	bl	80024b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 80028e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028e4:	60bb      	str	r3, [r7, #8]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 80028e6:	2300      	movs	r3, #0
 80028e8:	60fb      	str	r3, [r7, #12]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 80028ea:	2300      	movs	r3, #0
 80028ec:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockFilter = 0;
 80028ee:	2300      	movs	r3, #0
 80028f0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80028f2:	f107 0308 	add.w	r3, r7, #8
 80028f6:	4619      	mov	r1, r3
 80028f8:	480c      	ldr	r0, [pc, #48]	; (800292c <MX_TIM2_Init+0xa0>)
 80028fa:	f003 f8e1 	bl	8005ac0 <HAL_TIM_ConfigClockSource>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8002904:	f7ff fdd8 	bl	80024b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002908:	2300      	movs	r3, #0
 800290a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800290c:	2300      	movs	r3, #0
 800290e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002910:	463b      	mov	r3, r7
 8002912:	4619      	mov	r1, r3
 8002914:	4805      	ldr	r0, [pc, #20]	; (800292c <MX_TIM2_Init+0xa0>)
 8002916:	f003 fdef 	bl	80064f8 <HAL_TIMEx_MasterConfigSynchronization>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d001      	beq.n	8002924 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8002920:	f7ff fdca 	bl	80024b8 <Error_Handler>
  }

}
 8002924:	bf00      	nop
 8002926:	3718      	adds	r7, #24
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	20000110 	.word	0x20000110

08002930 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b086      	sub	sp, #24
 8002934:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002936:	f107 0308 	add.w	r3, r7, #8
 800293a:	2200      	movs	r2, #0
 800293c:	601a      	str	r2, [r3, #0]
 800293e:	605a      	str	r2, [r3, #4]
 8002940:	609a      	str	r2, [r3, #8]
 8002942:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002944:	463b      	mov	r3, r7
 8002946:	2200      	movs	r2, #0
 8002948:	601a      	str	r2, [r3, #0]
 800294a:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 800294c:	4b20      	ldr	r3, [pc, #128]	; (80029d0 <MX_TIM3_Init+0xa0>)
 800294e:	4a21      	ldr	r2, [pc, #132]	; (80029d4 <MX_TIM3_Init+0xa4>)
 8002950:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002952:	4b1f      	ldr	r3, [pc, #124]	; (80029d0 <MX_TIM3_Init+0xa0>)
 8002954:	2200      	movs	r2, #0
 8002956:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002958:	4b1d      	ldr	r3, [pc, #116]	; (80029d0 <MX_TIM3_Init+0xa0>)
 800295a:	2200      	movs	r2, #0
 800295c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800295e:	4b1c      	ldr	r3, [pc, #112]	; (80029d0 <MX_TIM3_Init+0xa0>)
 8002960:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002964:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002966:	4b1a      	ldr	r3, [pc, #104]	; (80029d0 <MX_TIM3_Init+0xa0>)
 8002968:	2200      	movs	r2, #0
 800296a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800296c:	4b18      	ldr	r3, [pc, #96]	; (80029d0 <MX_TIM3_Init+0xa0>)
 800296e:	2200      	movs	r2, #0
 8002970:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002972:	4817      	ldr	r0, [pc, #92]	; (80029d0 <MX_TIM3_Init+0xa0>)
 8002974:	f002 fcb6 	bl	80052e4 <HAL_TIM_Base_Init>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800297e:	f7ff fd9b 	bl	80024b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8002982:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002986:	60bb      	str	r3, [r7, #8]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8002988:	2300      	movs	r3, #0
 800298a:	60fb      	str	r3, [r7, #12]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 800298c:	2300      	movs	r3, #0
 800298e:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockFilter = 0;
 8002990:	2300      	movs	r3, #0
 8002992:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002994:	f107 0308 	add.w	r3, r7, #8
 8002998:	4619      	mov	r1, r3
 800299a:	480d      	ldr	r0, [pc, #52]	; (80029d0 <MX_TIM3_Init+0xa0>)
 800299c:	f003 f890 	bl	8005ac0 <HAL_TIM_ConfigClockSource>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d001      	beq.n	80029aa <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80029a6:	f7ff fd87 	bl	80024b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029aa:	2300      	movs	r3, #0
 80029ac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029ae:	2300      	movs	r3, #0
 80029b0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80029b2:	463b      	mov	r3, r7
 80029b4:	4619      	mov	r1, r3
 80029b6:	4806      	ldr	r0, [pc, #24]	; (80029d0 <MX_TIM3_Init+0xa0>)
 80029b8:	f003 fd9e 	bl	80064f8 <HAL_TIMEx_MasterConfigSynchronization>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80029c2:	f7ff fd79 	bl	80024b8 <Error_Handler>
  }

}
 80029c6:	bf00      	nop
 80029c8:	3718      	adds	r7, #24
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	20000150 	.word	0x20000150
 80029d4:	40000400 	.word	0x40000400

080029d8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b08e      	sub	sp, #56	; 0x38
 80029dc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029e2:	2200      	movs	r2, #0
 80029e4:	601a      	str	r2, [r3, #0]
 80029e6:	605a      	str	r2, [r3, #4]
 80029e8:	609a      	str	r2, [r3, #8]
 80029ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029ec:	f107 0320 	add.w	r3, r7, #32
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]
 80029f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029f6:	1d3b      	adds	r3, r7, #4
 80029f8:	2200      	movs	r2, #0
 80029fa:	601a      	str	r2, [r3, #0]
 80029fc:	605a      	str	r2, [r3, #4]
 80029fe:	609a      	str	r2, [r3, #8]
 8002a00:	60da      	str	r2, [r3, #12]
 8002a02:	611a      	str	r2, [r3, #16]
 8002a04:	615a      	str	r2, [r3, #20]
 8002a06:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8002a08:	4b31      	ldr	r3, [pc, #196]	; (8002ad0 <MX_TIM4_Init+0xf8>)
 8002a0a:	4a32      	ldr	r2, [pc, #200]	; (8002ad4 <MX_TIM4_Init+0xfc>)
 8002a0c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 15-1;
 8002a0e:	4b30      	ldr	r3, [pc, #192]	; (8002ad0 <MX_TIM4_Init+0xf8>)
 8002a10:	220e      	movs	r2, #14
 8002a12:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a14:	4b2e      	ldr	r3, [pc, #184]	; (8002ad0 <MX_TIM4_Init+0xf8>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 200-1;
 8002a1a:	4b2d      	ldr	r3, [pc, #180]	; (8002ad0 <MX_TIM4_Init+0xf8>)
 8002a1c:	22c7      	movs	r2, #199	; 0xc7
 8002a1e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a20:	4b2b      	ldr	r3, [pc, #172]	; (8002ad0 <MX_TIM4_Init+0xf8>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a26:	4b2a      	ldr	r3, [pc, #168]	; (8002ad0 <MX_TIM4_Init+0xf8>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002a2c:	4828      	ldr	r0, [pc, #160]	; (8002ad0 <MX_TIM4_Init+0xf8>)
 8002a2e:	f002 fc59 	bl	80052e4 <HAL_TIM_Base_Init>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d001      	beq.n	8002a3c <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8002a38:	f7ff fd3e 	bl	80024b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a40:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002a42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a46:	4619      	mov	r1, r3
 8002a48:	4821      	ldr	r0, [pc, #132]	; (8002ad0 <MX_TIM4_Init+0xf8>)
 8002a4a:	f003 f839 	bl	8005ac0 <HAL_TIM_ConfigClockSource>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d001      	beq.n	8002a58 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8002a54:	f7ff fd30 	bl	80024b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002a58:	481d      	ldr	r0, [pc, #116]	; (8002ad0 <MX_TIM4_Init+0xf8>)
 8002a5a:	f002 fcb6 	bl	80053ca <HAL_TIM_PWM_Init>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d001      	beq.n	8002a68 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8002a64:	f7ff fd28 	bl	80024b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002a70:	f107 0320 	add.w	r3, r7, #32
 8002a74:	4619      	mov	r1, r3
 8002a76:	4816      	ldr	r0, [pc, #88]	; (8002ad0 <MX_TIM4_Init+0xf8>)
 8002a78:	f003 fd3e 	bl	80064f8 <HAL_TIMEx_MasterConfigSynchronization>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8002a82:	f7ff fd19 	bl	80024b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a86:	2360      	movs	r3, #96	; 0x60
 8002a88:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 72-1;
 8002a8a:	2347      	movs	r3, #71	; 0x47
 8002a8c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a92:	2300      	movs	r3, #0
 8002a94:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a96:	1d3b      	adds	r3, r7, #4
 8002a98:	2200      	movs	r2, #0
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	480c      	ldr	r0, [pc, #48]	; (8002ad0 <MX_TIM4_Init+0xf8>)
 8002a9e:	f002 ff49 	bl	8005934 <HAL_TIM_PWM_ConfigChannel>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d001      	beq.n	8002aac <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8002aa8:	f7ff fd06 	bl	80024b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002aac:	1d3b      	adds	r3, r7, #4
 8002aae:	2204      	movs	r2, #4
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	4807      	ldr	r0, [pc, #28]	; (8002ad0 <MX_TIM4_Init+0xf8>)
 8002ab4:	f002 ff3e 	bl	8005934 <HAL_TIM_PWM_ConfigChannel>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <MX_TIM4_Init+0xea>
  {
    Error_Handler();
 8002abe:	f7ff fcfb 	bl	80024b8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8002ac2:	4803      	ldr	r0, [pc, #12]	; (8002ad0 <MX_TIM4_Init+0xf8>)
 8002ac4:	f000 f9d8 	bl	8002e78 <HAL_TIM_MspPostInit>

}
 8002ac8:	bf00      	nop
 8002aca:	3738      	adds	r7, #56	; 0x38
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	20000190 	.word	0x20000190
 8002ad4:	40000800 	.word	0x40000800

08002ad8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b092      	sub	sp, #72	; 0x48
 8002adc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ade:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	601a      	str	r2, [r3, #0]
 8002ae6:	605a      	str	r2, [r3, #4]
 8002ae8:	609a      	str	r2, [r3, #8]
 8002aea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002aec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002af0:	2200      	movs	r2, #0
 8002af2:	601a      	str	r2, [r3, #0]
 8002af4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002af6:	f107 0314 	add.w	r3, r7, #20
 8002afa:	2200      	movs	r2, #0
 8002afc:	601a      	str	r2, [r3, #0]
 8002afe:	605a      	str	r2, [r3, #4]
 8002b00:	609a      	str	r2, [r3, #8]
 8002b02:	60da      	str	r2, [r3, #12]
 8002b04:	611a      	str	r2, [r3, #16]
 8002b06:	615a      	str	r2, [r3, #20]
 8002b08:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002b0a:	1d3b      	adds	r3, r7, #4
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	601a      	str	r2, [r3, #0]
 8002b10:	605a      	str	r2, [r3, #4]
 8002b12:	609a      	str	r2, [r3, #8]
 8002b14:	60da      	str	r2, [r3, #12]

  htim5.Instance = TIM5;
 8002b16:	4b43      	ldr	r3, [pc, #268]	; (8002c24 <MX_TIM5_Init+0x14c>)
 8002b18:	4a43      	ldr	r2, [pc, #268]	; (8002c28 <MX_TIM5_Init+0x150>)
 8002b1a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 90-1;
 8002b1c:	4b41      	ldr	r3, [pc, #260]	; (8002c24 <MX_TIM5_Init+0x14c>)
 8002b1e:	2259      	movs	r2, #89	; 0x59
 8002b20:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b22:	4b40      	ldr	r3, [pc, #256]	; (8002c24 <MX_TIM5_Init+0x14c>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002b28:	4b3e      	ldr	r3, [pc, #248]	; (8002c24 <MX_TIM5_Init+0x14c>)
 8002b2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b2e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b30:	4b3c      	ldr	r3, [pc, #240]	; (8002c24 <MX_TIM5_Init+0x14c>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b36:	4b3b      	ldr	r3, [pc, #236]	; (8002c24 <MX_TIM5_Init+0x14c>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002b3c:	4839      	ldr	r0, [pc, #228]	; (8002c24 <MX_TIM5_Init+0x14c>)
 8002b3e:	f002 fbd1 	bl	80052e4 <HAL_TIM_Base_Init>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d001      	beq.n	8002b4c <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8002b48:	f7ff fcb6 	bl	80024b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b50:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002b52:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002b56:	4619      	mov	r1, r3
 8002b58:	4832      	ldr	r0, [pc, #200]	; (8002c24 <MX_TIM5_Init+0x14c>)
 8002b5a:	f002 ffb1 	bl	8005ac0 <HAL_TIM_ConfigClockSource>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d001      	beq.n	8002b68 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8002b64:	f7ff fca8 	bl	80024b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002b68:	482e      	ldr	r0, [pc, #184]	; (8002c24 <MX_TIM5_Init+0x14c>)
 8002b6a:	f002 fc2e 	bl	80053ca <HAL_TIM_PWM_Init>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d001      	beq.n	8002b78 <MX_TIM5_Init+0xa0>
  {
    Error_Handler();
 8002b74:	f7ff fca0 	bl	80024b8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8002b78:	482a      	ldr	r0, [pc, #168]	; (8002c24 <MX_TIM5_Init+0x14c>)
 8002b7a:	f002 fc99 	bl	80054b0 <HAL_TIM_IC_Init>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d001      	beq.n	8002b88 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8002b84:	f7ff fc98 	bl	80024b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	633b      	str	r3, [r7, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002b90:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002b94:	4619      	mov	r1, r3
 8002b96:	4823      	ldr	r0, [pc, #140]	; (8002c24 <MX_TIM5_Init+0x14c>)
 8002b98:	f003 fcae 	bl	80064f8 <HAL_TIMEx_MasterConfigSynchronization>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <MX_TIM5_Init+0xce>
  {
    Error_Handler();
 8002ba2:	f7ff fc89 	bl	80024b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ba6:	2360      	movs	r3, #96	; 0x60
 8002ba8:	617b      	str	r3, [r7, #20]
  sConfigOC.Pulse = 0xFFFFFFF5;
 8002baa:	f06f 030a 	mvn.w	r3, #10
 8002bae:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	61fb      	str	r3, [r7, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002bb8:	f107 0314 	add.w	r3, r7, #20
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	4818      	ldr	r0, [pc, #96]	; (8002c24 <MX_TIM5_Init+0x14c>)
 8002bc2:	f002 feb7 	bl	8005934 <HAL_TIM_PWM_ConfigChannel>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d001      	beq.n	8002bd0 <MX_TIM5_Init+0xf8>
  {
    Error_Handler();
 8002bcc:	f7ff fc74 	bl	80024b8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002be0:	1d3b      	adds	r3, r7, #4
 8002be2:	2208      	movs	r2, #8
 8002be4:	4619      	mov	r1, r3
 8002be6:	480f      	ldr	r0, [pc, #60]	; (8002c24 <MX_TIM5_Init+0x14c>)
 8002be8:	f002 fe08 	bl	80057fc <HAL_TIM_IC_ConfigChannel>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <MX_TIM5_Init+0x11e>
  {
    Error_Handler();
 8002bf2:	f7ff fc61 	bl	80024b8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8002bfe:	1d3b      	adds	r3, r7, #4
 8002c00:	220c      	movs	r2, #12
 8002c02:	4619      	mov	r1, r3
 8002c04:	4807      	ldr	r0, [pc, #28]	; (8002c24 <MX_TIM5_Init+0x14c>)
 8002c06:	f002 fdf9 	bl	80057fc <HAL_TIM_IC_ConfigChannel>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d001      	beq.n	8002c14 <MX_TIM5_Init+0x13c>
  {
    Error_Handler();
 8002c10:	f7ff fc52 	bl	80024b8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim5);
 8002c14:	4803      	ldr	r0, [pc, #12]	; (8002c24 <MX_TIM5_Init+0x14c>)
 8002c16:	f000 f92f 	bl	8002e78 <HAL_TIM_MspPostInit>

}
 8002c1a:	bf00      	nop
 8002c1c:	3748      	adds	r7, #72	; 0x48
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	200001d0 	.word	0x200001d0
 8002c28:	40000c00 	.word	0x40000c00

08002c2c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c32:	463b      	mov	r3, r7
 8002c34:	2200      	movs	r2, #0
 8002c36:	601a      	str	r2, [r3, #0]
 8002c38:	605a      	str	r2, [r3, #4]

  htim7.Instance = TIM7;
 8002c3a:	4b15      	ldr	r3, [pc, #84]	; (8002c90 <MX_TIM7_Init+0x64>)
 8002c3c:	4a15      	ldr	r2, [pc, #84]	; (8002c94 <MX_TIM7_Init+0x68>)
 8002c3e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 900-1;
 8002c40:	4b13      	ldr	r3, [pc, #76]	; (8002c90 <MX_TIM7_Init+0x64>)
 8002c42:	f240 3283 	movw	r2, #899	; 0x383
 8002c46:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c48:	4b11      	ldr	r3, [pc, #68]	; (8002c90 <MX_TIM7_Init+0x64>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 8002c4e:	4b10      	ldr	r3, [pc, #64]	; (8002c90 <MX_TIM7_Init+0x64>)
 8002c50:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002c54:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c56:	4b0e      	ldr	r3, [pc, #56]	; (8002c90 <MX_TIM7_Init+0x64>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002c5c:	480c      	ldr	r0, [pc, #48]	; (8002c90 <MX_TIM7_Init+0x64>)
 8002c5e:	f002 fb41 	bl	80052e4 <HAL_TIM_Base_Init>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d001      	beq.n	8002c6c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8002c68:	f7ff fc26 	bl	80024b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c70:	2300      	movs	r3, #0
 8002c72:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002c74:	463b      	mov	r3, r7
 8002c76:	4619      	mov	r1, r3
 8002c78:	4805      	ldr	r0, [pc, #20]	; (8002c90 <MX_TIM7_Init+0x64>)
 8002c7a:	f003 fc3d 	bl	80064f8 <HAL_TIMEx_MasterConfigSynchronization>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d001      	beq.n	8002c88 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8002c84:	f7ff fc18 	bl	80024b8 <Error_Handler>
  }

}
 8002c88:	bf00      	nop
 8002c8a:	3708      	adds	r7, #8
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	20000210 	.word	0x20000210
 8002c94:	40001400 	.word	0x40001400

08002c98 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b090      	sub	sp, #64	; 0x40
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ca0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	601a      	str	r2, [r3, #0]
 8002ca8:	605a      	str	r2, [r3, #4]
 8002caa:	609a      	str	r2, [r3, #8]
 8002cac:	60da      	str	r2, [r3, #12]
 8002cae:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cb8:	d12d      	bne.n	8002d16 <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002cba:	2300      	movs	r3, #0
 8002cbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cbe:	4b66      	ldr	r3, [pc, #408]	; (8002e58 <HAL_TIM_Base_MspInit+0x1c0>)
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc2:	4a65      	ldr	r2, [pc, #404]	; (8002e58 <HAL_TIM_Base_MspInit+0x1c0>)
 8002cc4:	f043 0301 	orr.w	r3, r3, #1
 8002cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8002cca:	4b63      	ldr	r3, [pc, #396]	; (8002e58 <HAL_TIM_Base_MspInit+0x1c0>)
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	627b      	str	r3, [r7, #36]	; 0x24
 8002cda:	4b5f      	ldr	r3, [pc, #380]	; (8002e58 <HAL_TIM_Base_MspInit+0x1c0>)
 8002cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cde:	4a5e      	ldr	r2, [pc, #376]	; (8002e58 <HAL_TIM_Base_MspInit+0x1c0>)
 8002ce0:	f043 0301 	orr.w	r3, r3, #1
 8002ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ce6:	4b5c      	ldr	r3, [pc, #368]	; (8002e58 <HAL_TIM_Base_MspInit+0x1c0>)
 8002ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cea:	f003 0301 	and.w	r3, r3, #1
 8002cee:	627b      	str	r3, [r7, #36]	; 0x24
 8002cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002cf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d00:	2300      	movs	r3, #0
 8002d02:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002d04:	2301      	movs	r3, #1
 8002d06:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	4853      	ldr	r0, [pc, #332]	; (8002e5c <HAL_TIM_Base_MspInit+0x1c4>)
 8002d10:	f000 fbf2 	bl	80034f8 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8002d14:	e09b      	b.n	8002e4e <HAL_TIM_Base_MspInit+0x1b6>
  else if(tim_baseHandle->Instance==TIM3)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a51      	ldr	r2, [pc, #324]	; (8002e60 <HAL_TIM_Base_MspInit+0x1c8>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d12c      	bne.n	8002d7a <HAL_TIM_Base_MspInit+0xe2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d20:	2300      	movs	r3, #0
 8002d22:	623b      	str	r3, [r7, #32]
 8002d24:	4b4c      	ldr	r3, [pc, #304]	; (8002e58 <HAL_TIM_Base_MspInit+0x1c0>)
 8002d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d28:	4a4b      	ldr	r2, [pc, #300]	; (8002e58 <HAL_TIM_Base_MspInit+0x1c0>)
 8002d2a:	f043 0302 	orr.w	r3, r3, #2
 8002d2e:	6413      	str	r3, [r2, #64]	; 0x40
 8002d30:	4b49      	ldr	r3, [pc, #292]	; (8002e58 <HAL_TIM_Base_MspInit+0x1c0>)
 8002d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d34:	f003 0302 	and.w	r3, r3, #2
 8002d38:	623b      	str	r3, [r7, #32]
 8002d3a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	61fb      	str	r3, [r7, #28]
 8002d40:	4b45      	ldr	r3, [pc, #276]	; (8002e58 <HAL_TIM_Base_MspInit+0x1c0>)
 8002d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d44:	4a44      	ldr	r2, [pc, #272]	; (8002e58 <HAL_TIM_Base_MspInit+0x1c0>)
 8002d46:	f043 0308 	orr.w	r3, r3, #8
 8002d4a:	6313      	str	r3, [r2, #48]	; 0x30
 8002d4c:	4b42      	ldr	r3, [pc, #264]	; (8002e58 <HAL_TIM_Base_MspInit+0x1c0>)
 8002d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d50:	f003 0308 	and.w	r3, r3, #8
 8002d54:	61fb      	str	r3, [r7, #28]
 8002d56:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002d58:	2304      	movs	r3, #4
 8002d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d60:	2300      	movs	r3, #0
 8002d62:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d64:	2300      	movs	r3, #0
 8002d66:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002d68:	2302      	movs	r3, #2
 8002d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d70:	4619      	mov	r1, r3
 8002d72:	483c      	ldr	r0, [pc, #240]	; (8002e64 <HAL_TIM_Base_MspInit+0x1cc>)
 8002d74:	f000 fbc0 	bl	80034f8 <HAL_GPIO_Init>
}
 8002d78:	e069      	b.n	8002e4e <HAL_TIM_Base_MspInit+0x1b6>
  else if(tim_baseHandle->Instance==TIM4)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a3a      	ldr	r2, [pc, #232]	; (8002e68 <HAL_TIM_Base_MspInit+0x1d0>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d10e      	bne.n	8002da2 <HAL_TIM_Base_MspInit+0x10a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002d84:	2300      	movs	r3, #0
 8002d86:	61bb      	str	r3, [r7, #24]
 8002d88:	4b33      	ldr	r3, [pc, #204]	; (8002e58 <HAL_TIM_Base_MspInit+0x1c0>)
 8002d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8c:	4a32      	ldr	r2, [pc, #200]	; (8002e58 <HAL_TIM_Base_MspInit+0x1c0>)
 8002d8e:	f043 0304 	orr.w	r3, r3, #4
 8002d92:	6413      	str	r3, [r2, #64]	; 0x40
 8002d94:	4b30      	ldr	r3, [pc, #192]	; (8002e58 <HAL_TIM_Base_MspInit+0x1c0>)
 8002d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d98:	f003 0304 	and.w	r3, r3, #4
 8002d9c:	61bb      	str	r3, [r7, #24]
 8002d9e:	69bb      	ldr	r3, [r7, #24]
}
 8002da0:	e055      	b.n	8002e4e <HAL_TIM_Base_MspInit+0x1b6>
  else if(tim_baseHandle->Instance==TIM5)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a31      	ldr	r2, [pc, #196]	; (8002e6c <HAL_TIM_Base_MspInit+0x1d4>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d135      	bne.n	8002e18 <HAL_TIM_Base_MspInit+0x180>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002dac:	2300      	movs	r3, #0
 8002dae:	617b      	str	r3, [r7, #20]
 8002db0:	4b29      	ldr	r3, [pc, #164]	; (8002e58 <HAL_TIM_Base_MspInit+0x1c0>)
 8002db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db4:	4a28      	ldr	r2, [pc, #160]	; (8002e58 <HAL_TIM_Base_MspInit+0x1c0>)
 8002db6:	f043 0308 	orr.w	r3, r3, #8
 8002dba:	6413      	str	r3, [r2, #64]	; 0x40
 8002dbc:	4b26      	ldr	r3, [pc, #152]	; (8002e58 <HAL_TIM_Base_MspInit+0x1c0>)
 8002dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc0:	f003 0308 	and.w	r3, r3, #8
 8002dc4:	617b      	str	r3, [r7, #20]
 8002dc6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002dc8:	2300      	movs	r3, #0
 8002dca:	613b      	str	r3, [r7, #16]
 8002dcc:	4b22      	ldr	r3, [pc, #136]	; (8002e58 <HAL_TIM_Base_MspInit+0x1c0>)
 8002dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd0:	4a21      	ldr	r2, [pc, #132]	; (8002e58 <HAL_TIM_Base_MspInit+0x1c0>)
 8002dd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dd6:	6313      	str	r3, [r2, #48]	; 0x30
 8002dd8:	4b1f      	ldr	r3, [pc, #124]	; (8002e58 <HAL_TIM_Base_MspInit+0x1c0>)
 8002dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ddc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002de0:	613b      	str	r3, [r7, #16]
 8002de2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = IC_Eco_Pin;
 8002de4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002de8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dea:	2302      	movs	r3, #2
 8002dec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dee:	2300      	movs	r3, #0
 8002df0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002df2:	2300      	movs	r3, #0
 8002df4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002df6:	2302      	movs	r3, #2
 8002df8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(IC_Eco_GPIO_Port, &GPIO_InitStruct);
 8002dfa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002dfe:	4619      	mov	r1, r3
 8002e00:	481b      	ldr	r0, [pc, #108]	; (8002e70 <HAL_TIM_Base_MspInit+0x1d8>)
 8002e02:	f000 fb79 	bl	80034f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002e06:	2200      	movs	r2, #0
 8002e08:	2100      	movs	r1, #0
 8002e0a:	2032      	movs	r0, #50	; 0x32
 8002e0c:	f000 faad 	bl	800336a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002e10:	2032      	movs	r0, #50	; 0x32
 8002e12:	f000 fac6 	bl	80033a2 <HAL_NVIC_EnableIRQ>
}
 8002e16:	e01a      	b.n	8002e4e <HAL_TIM_Base_MspInit+0x1b6>
  else if(tim_baseHandle->Instance==TIM7)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a15      	ldr	r2, [pc, #84]	; (8002e74 <HAL_TIM_Base_MspInit+0x1dc>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d115      	bne.n	8002e4e <HAL_TIM_Base_MspInit+0x1b6>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002e22:	2300      	movs	r3, #0
 8002e24:	60fb      	str	r3, [r7, #12]
 8002e26:	4b0c      	ldr	r3, [pc, #48]	; (8002e58 <HAL_TIM_Base_MspInit+0x1c0>)
 8002e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2a:	4a0b      	ldr	r2, [pc, #44]	; (8002e58 <HAL_TIM_Base_MspInit+0x1c0>)
 8002e2c:	f043 0320 	orr.w	r3, r3, #32
 8002e30:	6413      	str	r3, [r2, #64]	; 0x40
 8002e32:	4b09      	ldr	r3, [pc, #36]	; (8002e58 <HAL_TIM_Base_MspInit+0x1c0>)
 8002e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e36:	f003 0320 	and.w	r3, r3, #32
 8002e3a:	60fb      	str	r3, [r7, #12]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002e3e:	2200      	movs	r2, #0
 8002e40:	2100      	movs	r1, #0
 8002e42:	2037      	movs	r0, #55	; 0x37
 8002e44:	f000 fa91 	bl	800336a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002e48:	2037      	movs	r0, #55	; 0x37
 8002e4a:	f000 faaa 	bl	80033a2 <HAL_NVIC_EnableIRQ>
}
 8002e4e:	bf00      	nop
 8002e50:	3740      	adds	r7, #64	; 0x40
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	40023800 	.word	0x40023800
 8002e5c:	40020000 	.word	0x40020000
 8002e60:	40000400 	.word	0x40000400
 8002e64:	40020c00 	.word	0x40020c00
 8002e68:	40000800 	.word	0x40000800
 8002e6c:	40000c00 	.word	0x40000c00
 8002e70:	40021c00 	.word	0x40021c00
 8002e74:	40001400 	.word	0x40001400

08002e78 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b08a      	sub	sp, #40	; 0x28
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e80:	f107 0314 	add.w	r3, r7, #20
 8002e84:	2200      	movs	r2, #0
 8002e86:	601a      	str	r2, [r3, #0]
 8002e88:	605a      	str	r2, [r3, #4]
 8002e8a:	609a      	str	r2, [r3, #8]
 8002e8c:	60da      	str	r2, [r3, #12]
 8002e8e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a25      	ldr	r2, [pc, #148]	; (8002f2c <HAL_TIM_MspPostInit+0xb4>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d11f      	bne.n	8002eda <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	613b      	str	r3, [r7, #16]
 8002e9e:	4b24      	ldr	r3, [pc, #144]	; (8002f30 <HAL_TIM_MspPostInit+0xb8>)
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea2:	4a23      	ldr	r2, [pc, #140]	; (8002f30 <HAL_TIM_MspPostInit+0xb8>)
 8002ea4:	f043 0308 	orr.w	r3, r3, #8
 8002ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eaa:	4b21      	ldr	r3, [pc, #132]	; (8002f30 <HAL_TIM_MspPostInit+0xb8>)
 8002eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eae:	f003 0308 	and.w	r3, r3, #8
 8002eb2:	613b      	str	r3, [r7, #16]
 8002eb4:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = PWM_R_Pin|PWM_L_Pin;
 8002eb6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002eba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002ec8:	2302      	movs	r3, #2
 8002eca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ecc:	f107 0314 	add.w	r3, r7, #20
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	4818      	ldr	r0, [pc, #96]	; (8002f34 <HAL_TIM_MspPostInit+0xbc>)
 8002ed4:	f000 fb10 	bl	80034f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002ed8:	e023      	b.n	8002f22 <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM5)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a16      	ldr	r2, [pc, #88]	; (8002f38 <HAL_TIM_MspPostInit+0xc0>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d11e      	bne.n	8002f22 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	60fb      	str	r3, [r7, #12]
 8002ee8:	4b11      	ldr	r3, [pc, #68]	; (8002f30 <HAL_TIM_MspPostInit+0xb8>)
 8002eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eec:	4a10      	ldr	r2, [pc, #64]	; (8002f30 <HAL_TIM_MspPostInit+0xb8>)
 8002eee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ef2:	6313      	str	r3, [r2, #48]	; 0x30
 8002ef4:	4b0e      	ldr	r3, [pc, #56]	; (8002f30 <HAL_TIM_MspPostInit+0xb8>)
 8002ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002efc:	60fb      	str	r3, [r7, #12]
 8002efe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_Trig_Pin;
 8002f00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f06:	2302      	movs	r3, #2
 8002f08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002f12:	2302      	movs	r3, #2
 8002f14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_Trig_GPIO_Port, &GPIO_InitStruct);
 8002f16:	f107 0314 	add.w	r3, r7, #20
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	4807      	ldr	r0, [pc, #28]	; (8002f3c <HAL_TIM_MspPostInit+0xc4>)
 8002f1e:	f000 faeb 	bl	80034f8 <HAL_GPIO_Init>
}
 8002f22:	bf00      	nop
 8002f24:	3728      	adds	r7, #40	; 0x28
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	40000800 	.word	0x40000800
 8002f30:	40023800 	.word	0x40023800
 8002f34:	40020c00 	.word	0x40020c00
 8002f38:	40000c00 	.word	0x40000c00
 8002f3c:	40021c00 	.word	0x40021c00

08002f40 <MX_UART7_Init>:

UART_HandleTypeDef huart7;

/* UART7 init function */
void MX_UART7_Init(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	af00      	add	r7, sp, #0

  huart7.Instance = UART7;
 8002f44:	4b11      	ldr	r3, [pc, #68]	; (8002f8c <MX_UART7_Init+0x4c>)
 8002f46:	4a12      	ldr	r2, [pc, #72]	; (8002f90 <MX_UART7_Init+0x50>)
 8002f48:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8002f4a:	4b10      	ldr	r3, [pc, #64]	; (8002f8c <MX_UART7_Init+0x4c>)
 8002f4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f50:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8002f52:	4b0e      	ldr	r3, [pc, #56]	; (8002f8c <MX_UART7_Init+0x4c>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8002f58:	4b0c      	ldr	r3, [pc, #48]	; (8002f8c <MX_UART7_Init+0x4c>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8002f5e:	4b0b      	ldr	r3, [pc, #44]	; (8002f8c <MX_UART7_Init+0x4c>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8002f64:	4b09      	ldr	r3, [pc, #36]	; (8002f8c <MX_UART7_Init+0x4c>)
 8002f66:	220c      	movs	r2, #12
 8002f68:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f6a:	4b08      	ldr	r3, [pc, #32]	; (8002f8c <MX_UART7_Init+0x4c>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f70:	4b06      	ldr	r3, [pc, #24]	; (8002f8c <MX_UART7_Init+0x4c>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8002f76:	4805      	ldr	r0, [pc, #20]	; (8002f8c <MX_UART7_Init+0x4c>)
 8002f78:	f003 fb4e 	bl	8006618 <HAL_UART_Init>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <MX_UART7_Init+0x46>
  {
    Error_Handler();
 8002f82:	f7ff fa99 	bl	80024b8 <Error_Handler>
  }

}
 8002f86:	bf00      	nop
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	20000250 	.word	0x20000250
 8002f90:	40007800 	.word	0x40007800

08002f94 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b08a      	sub	sp, #40	; 0x28
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f9c:	f107 0314 	add.w	r3, r7, #20
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	601a      	str	r2, [r3, #0]
 8002fa4:	605a      	str	r2, [r3, #4]
 8002fa6:	609a      	str	r2, [r3, #8]
 8002fa8:	60da      	str	r2, [r3, #12]
 8002faa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART7)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a1d      	ldr	r2, [pc, #116]	; (8003028 <HAL_UART_MspInit+0x94>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d133      	bne.n	800301e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	613b      	str	r3, [r7, #16]
 8002fba:	4b1c      	ldr	r3, [pc, #112]	; (800302c <HAL_UART_MspInit+0x98>)
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbe:	4a1b      	ldr	r2, [pc, #108]	; (800302c <HAL_UART_MspInit+0x98>)
 8002fc0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002fc4:	6413      	str	r3, [r2, #64]	; 0x40
 8002fc6:	4b19      	ldr	r3, [pc, #100]	; (800302c <HAL_UART_MspInit+0x98>)
 8002fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fca:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002fce:	613b      	str	r3, [r7, #16]
 8002fd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	60fb      	str	r3, [r7, #12]
 8002fd6:	4b15      	ldr	r3, [pc, #84]	; (800302c <HAL_UART_MspInit+0x98>)
 8002fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fda:	4a14      	ldr	r2, [pc, #80]	; (800302c <HAL_UART_MspInit+0x98>)
 8002fdc:	f043 0320 	orr.w	r3, r3, #32
 8002fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8002fe2:	4b12      	ldr	r3, [pc, #72]	; (800302c <HAL_UART_MspInit+0x98>)
 8002fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe6:	f003 0320 	and.w	r3, r3, #32
 8002fea:	60fb      	str	r3, [r7, #12]
 8002fec:	68fb      	ldr	r3, [r7, #12]
    /**UART7 GPIO Configuration
    PF6     ------> UART7_RX
    PF7     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002fee:	23c0      	movs	r3, #192	; 0xc0
 8002ff0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ff2:	2302      	movs	r3, #2
 8002ff4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8002ffe:	2308      	movs	r3, #8
 8003000:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003002:	f107 0314 	add.w	r3, r7, #20
 8003006:	4619      	mov	r1, r3
 8003008:	4809      	ldr	r0, [pc, #36]	; (8003030 <HAL_UART_MspInit+0x9c>)
 800300a:	f000 fa75 	bl	80034f8 <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 800300e:	2200      	movs	r2, #0
 8003010:	2100      	movs	r1, #0
 8003012:	2052      	movs	r0, #82	; 0x52
 8003014:	f000 f9a9 	bl	800336a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8003018:	2052      	movs	r0, #82	; 0x52
 800301a:	f000 f9c2 	bl	80033a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }
}
 800301e:	bf00      	nop
 8003020:	3728      	adds	r7, #40	; 0x28
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	40007800 	.word	0x40007800
 800302c:	40023800 	.word	0x40023800
 8003030:	40021400 	.word	0x40021400

08003034 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003034:	f8df d034 	ldr.w	sp, [pc, #52]	; 800306c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003038:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800303a:	e003      	b.n	8003044 <LoopCopyDataInit>

0800303c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800303c:	4b0c      	ldr	r3, [pc, #48]	; (8003070 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800303e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003040:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003042:	3104      	adds	r1, #4

08003044 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003044:	480b      	ldr	r0, [pc, #44]	; (8003074 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003046:	4b0c      	ldr	r3, [pc, #48]	; (8003078 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003048:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800304a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800304c:	d3f6      	bcc.n	800303c <CopyDataInit>
  ldr  r2, =_sbss
 800304e:	4a0b      	ldr	r2, [pc, #44]	; (800307c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003050:	e002      	b.n	8003058 <LoopFillZerobss>

08003052 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003052:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003054:	f842 3b04 	str.w	r3, [r2], #4

08003058 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003058:	4b09      	ldr	r3, [pc, #36]	; (8003080 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800305a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800305c:	d3f9      	bcc.n	8003052 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800305e:	f7ff fbff 	bl	8002860 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003062:	f004 fac5 	bl	80075f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003066:	f7fe fb6b 	bl	8001740 <main>
  bx  lr    
 800306a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800306c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8003070:	08008598 	.word	0x08008598
  ldr  r0, =_sdata
 8003074:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003078:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 800307c:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 8003080:	20000294 	.word	0x20000294

08003084 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003084:	e7fe      	b.n	8003084 <ADC_IRQHandler>
	...

08003088 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800308c:	4b0e      	ldr	r3, [pc, #56]	; (80030c8 <HAL_Init+0x40>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a0d      	ldr	r2, [pc, #52]	; (80030c8 <HAL_Init+0x40>)
 8003092:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003096:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003098:	4b0b      	ldr	r3, [pc, #44]	; (80030c8 <HAL_Init+0x40>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a0a      	ldr	r2, [pc, #40]	; (80030c8 <HAL_Init+0x40>)
 800309e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030a4:	4b08      	ldr	r3, [pc, #32]	; (80030c8 <HAL_Init+0x40>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a07      	ldr	r2, [pc, #28]	; (80030c8 <HAL_Init+0x40>)
 80030aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030b0:	2003      	movs	r0, #3
 80030b2:	f000 f94f 	bl	8003354 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030b6:	2000      	movs	r0, #0
 80030b8:	f000 f808 	bl	80030cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030bc:	f7ff fb5c 	bl	8002778 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	40023c00 	.word	0x40023c00

080030cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030d4:	4b12      	ldr	r3, [pc, #72]	; (8003120 <HAL_InitTick+0x54>)
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	4b12      	ldr	r3, [pc, #72]	; (8003124 <HAL_InitTick+0x58>)
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	4619      	mov	r1, r3
 80030de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80030e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ea:	4618      	mov	r0, r3
 80030ec:	f000 f967 	bl	80033be <HAL_SYSTICK_Config>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d001      	beq.n	80030fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e00e      	b.n	8003118 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2b0f      	cmp	r3, #15
 80030fe:	d80a      	bhi.n	8003116 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003100:	2200      	movs	r2, #0
 8003102:	6879      	ldr	r1, [r7, #4]
 8003104:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003108:	f000 f92f 	bl	800336a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800310c:	4a06      	ldr	r2, [pc, #24]	; (8003128 <HAL_InitTick+0x5c>)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003112:	2300      	movs	r3, #0
 8003114:	e000      	b.n	8003118 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
}
 8003118:	4618      	mov	r0, r3
 800311a:	3708      	adds	r7, #8
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	20000008 	.word	0x20000008
 8003124:	20000010 	.word	0x20000010
 8003128:	2000000c 	.word	0x2000000c

0800312c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800312c:	b480      	push	{r7}
 800312e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003130:	4b06      	ldr	r3, [pc, #24]	; (800314c <HAL_IncTick+0x20>)
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	461a      	mov	r2, r3
 8003136:	4b06      	ldr	r3, [pc, #24]	; (8003150 <HAL_IncTick+0x24>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4413      	add	r3, r2
 800313c:	4a04      	ldr	r2, [pc, #16]	; (8003150 <HAL_IncTick+0x24>)
 800313e:	6013      	str	r3, [r2, #0]
}
 8003140:	bf00      	nop
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	20000010 	.word	0x20000010
 8003150:	20000290 	.word	0x20000290

08003154 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003154:	b480      	push	{r7}
 8003156:	af00      	add	r7, sp, #0
  return uwTick;
 8003158:	4b03      	ldr	r3, [pc, #12]	; (8003168 <HAL_GetTick+0x14>)
 800315a:	681b      	ldr	r3, [r3, #0]
}
 800315c:	4618      	mov	r0, r3
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	20000290 	.word	0x20000290

0800316c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003174:	f7ff ffee 	bl	8003154 <HAL_GetTick>
 8003178:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003184:	d005      	beq.n	8003192 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003186:	4b0a      	ldr	r3, [pc, #40]	; (80031b0 <HAL_Delay+0x44>)
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	461a      	mov	r2, r3
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	4413      	add	r3, r2
 8003190:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003192:	bf00      	nop
 8003194:	f7ff ffde 	bl	8003154 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	68fa      	ldr	r2, [r7, #12]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d8f7      	bhi.n	8003194 <HAL_Delay+0x28>
  {
  }
}
 80031a4:	bf00      	nop
 80031a6:	bf00      	nop
 80031a8:	3710      	adds	r7, #16
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	20000010 	.word	0x20000010

080031b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b085      	sub	sp, #20
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f003 0307 	and.w	r3, r3, #7
 80031c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031c4:	4b0c      	ldr	r3, [pc, #48]	; (80031f8 <__NVIC_SetPriorityGrouping+0x44>)
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031ca:	68ba      	ldr	r2, [r7, #8]
 80031cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031d0:	4013      	ands	r3, r2
 80031d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031e6:	4a04      	ldr	r2, [pc, #16]	; (80031f8 <__NVIC_SetPriorityGrouping+0x44>)
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	60d3      	str	r3, [r2, #12]
}
 80031ec:	bf00      	nop
 80031ee:	3714      	adds	r7, #20
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr
 80031f8:	e000ed00 	.word	0xe000ed00

080031fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031fc:	b480      	push	{r7}
 80031fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003200:	4b04      	ldr	r3, [pc, #16]	; (8003214 <__NVIC_GetPriorityGrouping+0x18>)
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	0a1b      	lsrs	r3, r3, #8
 8003206:	f003 0307 	and.w	r3, r3, #7
}
 800320a:	4618      	mov	r0, r3
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr
 8003214:	e000ed00 	.word	0xe000ed00

08003218 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	4603      	mov	r3, r0
 8003220:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003226:	2b00      	cmp	r3, #0
 8003228:	db0b      	blt.n	8003242 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800322a:	79fb      	ldrb	r3, [r7, #7]
 800322c:	f003 021f 	and.w	r2, r3, #31
 8003230:	4907      	ldr	r1, [pc, #28]	; (8003250 <__NVIC_EnableIRQ+0x38>)
 8003232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003236:	095b      	lsrs	r3, r3, #5
 8003238:	2001      	movs	r0, #1
 800323a:	fa00 f202 	lsl.w	r2, r0, r2
 800323e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003242:	bf00      	nop
 8003244:	370c      	adds	r7, #12
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	e000e100 	.word	0xe000e100

08003254 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	4603      	mov	r3, r0
 800325c:	6039      	str	r1, [r7, #0]
 800325e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003260:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003264:	2b00      	cmp	r3, #0
 8003266:	db0a      	blt.n	800327e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	b2da      	uxtb	r2, r3
 800326c:	490c      	ldr	r1, [pc, #48]	; (80032a0 <__NVIC_SetPriority+0x4c>)
 800326e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003272:	0112      	lsls	r2, r2, #4
 8003274:	b2d2      	uxtb	r2, r2
 8003276:	440b      	add	r3, r1
 8003278:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800327c:	e00a      	b.n	8003294 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	b2da      	uxtb	r2, r3
 8003282:	4908      	ldr	r1, [pc, #32]	; (80032a4 <__NVIC_SetPriority+0x50>)
 8003284:	79fb      	ldrb	r3, [r7, #7]
 8003286:	f003 030f 	and.w	r3, r3, #15
 800328a:	3b04      	subs	r3, #4
 800328c:	0112      	lsls	r2, r2, #4
 800328e:	b2d2      	uxtb	r2, r2
 8003290:	440b      	add	r3, r1
 8003292:	761a      	strb	r2, [r3, #24]
}
 8003294:	bf00      	nop
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr
 80032a0:	e000e100 	.word	0xe000e100
 80032a4:	e000ed00 	.word	0xe000ed00

080032a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b089      	sub	sp, #36	; 0x24
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	60b9      	str	r1, [r7, #8]
 80032b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f003 0307 	and.w	r3, r3, #7
 80032ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	f1c3 0307 	rsb	r3, r3, #7
 80032c2:	2b04      	cmp	r3, #4
 80032c4:	bf28      	it	cs
 80032c6:	2304      	movcs	r3, #4
 80032c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	3304      	adds	r3, #4
 80032ce:	2b06      	cmp	r3, #6
 80032d0:	d902      	bls.n	80032d8 <NVIC_EncodePriority+0x30>
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	3b03      	subs	r3, #3
 80032d6:	e000      	b.n	80032da <NVIC_EncodePriority+0x32>
 80032d8:	2300      	movs	r3, #0
 80032da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	fa02 f303 	lsl.w	r3, r2, r3
 80032e6:	43da      	mvns	r2, r3
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	401a      	ands	r2, r3
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	fa01 f303 	lsl.w	r3, r1, r3
 80032fa:	43d9      	mvns	r1, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003300:	4313      	orrs	r3, r2
         );
}
 8003302:	4618      	mov	r0, r3
 8003304:	3724      	adds	r7, #36	; 0x24
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
	...

08003310 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	3b01      	subs	r3, #1
 800331c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003320:	d301      	bcc.n	8003326 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003322:	2301      	movs	r3, #1
 8003324:	e00f      	b.n	8003346 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003326:	4a0a      	ldr	r2, [pc, #40]	; (8003350 <SysTick_Config+0x40>)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	3b01      	subs	r3, #1
 800332c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800332e:	210f      	movs	r1, #15
 8003330:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003334:	f7ff ff8e 	bl	8003254 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003338:	4b05      	ldr	r3, [pc, #20]	; (8003350 <SysTick_Config+0x40>)
 800333a:	2200      	movs	r2, #0
 800333c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800333e:	4b04      	ldr	r3, [pc, #16]	; (8003350 <SysTick_Config+0x40>)
 8003340:	2207      	movs	r2, #7
 8003342:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	3708      	adds	r7, #8
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	e000e010 	.word	0xe000e010

08003354 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f7ff ff29 	bl	80031b4 <__NVIC_SetPriorityGrouping>
}
 8003362:	bf00      	nop
 8003364:	3708      	adds	r7, #8
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}

0800336a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800336a:	b580      	push	{r7, lr}
 800336c:	b086      	sub	sp, #24
 800336e:	af00      	add	r7, sp, #0
 8003370:	4603      	mov	r3, r0
 8003372:	60b9      	str	r1, [r7, #8]
 8003374:	607a      	str	r2, [r7, #4]
 8003376:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003378:	2300      	movs	r3, #0
 800337a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800337c:	f7ff ff3e 	bl	80031fc <__NVIC_GetPriorityGrouping>
 8003380:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	68b9      	ldr	r1, [r7, #8]
 8003386:	6978      	ldr	r0, [r7, #20]
 8003388:	f7ff ff8e 	bl	80032a8 <NVIC_EncodePriority>
 800338c:	4602      	mov	r2, r0
 800338e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003392:	4611      	mov	r1, r2
 8003394:	4618      	mov	r0, r3
 8003396:	f7ff ff5d 	bl	8003254 <__NVIC_SetPriority>
}
 800339a:	bf00      	nop
 800339c:	3718      	adds	r7, #24
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033a2:	b580      	push	{r7, lr}
 80033a4:	b082      	sub	sp, #8
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	4603      	mov	r3, r0
 80033aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033b0:	4618      	mov	r0, r3
 80033b2:	f7ff ff31 	bl	8003218 <__NVIC_EnableIRQ>
}
 80033b6:	bf00      	nop
 80033b8:	3708      	adds	r7, #8
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}

080033be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033be:	b580      	push	{r7, lr}
 80033c0:	b082      	sub	sp, #8
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f7ff ffa2 	bl	8003310 <SysTick_Config>
 80033cc:	4603      	mov	r3, r0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3708      	adds	r7, #8
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}

080033d6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80033d6:	b580      	push	{r7, lr}
 80033d8:	b082      	sub	sp, #8
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d101      	bne.n	80033e8 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e014      	b.n	8003412 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	791b      	ldrb	r3, [r3, #4]
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d105      	bne.n	80033fe <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f7fe f837 	bl	800146c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2202      	movs	r2, #2
 8003402:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2201      	movs	r2, #1
 800340e:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	3708      	adds	r7, #8
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}

0800341a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 800341a:	b480      	push	{r7}
 800341c:	b087      	sub	sp, #28
 800341e:	af00      	add	r7, sp, #0
 8003420:	60f8      	str	r0, [r7, #12]
 8003422:	60b9      	str	r1, [r7, #8]
 8003424:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8003426:	2300      	movs	r3, #0
 8003428:	617b      	str	r3, [r7, #20]
 800342a:	2300      	movs	r3, #0
 800342c:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	795b      	ldrb	r3, [r3, #5]
 8003432:	2b01      	cmp	r3, #1
 8003434:	d101      	bne.n	800343a <HAL_DAC_ConfigChannel+0x20>
 8003436:	2302      	movs	r3, #2
 8003438:	e036      	b.n	80034a8 <HAL_DAC_ConfigChannel+0x8e>
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2201      	movs	r2, #1
 800343e:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2202      	movs	r2, #2
 8003444:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 800344e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	fa02 f303 	lsl.w	r3, r2, r3
 8003458:	43db      	mvns	r3, r3
 800345a:	697a      	ldr	r2, [r7, #20]
 800345c:	4013      	ands	r3, r2
 800345e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	4313      	orrs	r3, r2
 800346a:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 800346c:	693a      	ldr	r2, [r7, #16]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	fa02 f303 	lsl.w	r3, r2, r3
 8003474:	697a      	ldr	r2, [r7, #20]
 8003476:	4313      	orrs	r3, r2
 8003478:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	697a      	ldr	r2, [r7, #20]
 8003480:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	6819      	ldr	r1, [r3, #0]
 8003488:	22c0      	movs	r2, #192	; 0xc0
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	fa02 f303 	lsl.w	r3, r2, r3
 8003490:	43da      	mvns	r2, r3
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	400a      	ands	r2, r1
 8003498:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2201      	movs	r2, #1
 800349e:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2200      	movs	r2, #0
 80034a4:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80034a6:	2300      	movs	r3, #0
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	371c      	adds	r7, #28
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d004      	beq.n	80034d2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2280      	movs	r2, #128	; 0x80
 80034cc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e00c      	b.n	80034ec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2205      	movs	r2, #5
 80034d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f022 0201 	bic.w	r2, r2, #1
 80034e8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80034ea:	2300      	movs	r3, #0
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b089      	sub	sp, #36	; 0x24
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003502:	2300      	movs	r3, #0
 8003504:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003506:	2300      	movs	r3, #0
 8003508:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800350a:	2300      	movs	r3, #0
 800350c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800350e:	2300      	movs	r3, #0
 8003510:	61fb      	str	r3, [r7, #28]
 8003512:	e177      	b.n	8003804 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003514:	2201      	movs	r2, #1
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	fa02 f303 	lsl.w	r3, r2, r3
 800351c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	697a      	ldr	r2, [r7, #20]
 8003524:	4013      	ands	r3, r2
 8003526:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003528:	693a      	ldr	r2, [r7, #16]
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	429a      	cmp	r2, r3
 800352e:	f040 8166 	bne.w	80037fe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	2b01      	cmp	r3, #1
 8003538:	d00b      	beq.n	8003552 <HAL_GPIO_Init+0x5a>
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	2b02      	cmp	r3, #2
 8003540:	d007      	beq.n	8003552 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003546:	2b11      	cmp	r3, #17
 8003548:	d003      	beq.n	8003552 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	2b12      	cmp	r3, #18
 8003550:	d130      	bne.n	80035b4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	005b      	lsls	r3, r3, #1
 800355c:	2203      	movs	r2, #3
 800355e:	fa02 f303 	lsl.w	r3, r2, r3
 8003562:	43db      	mvns	r3, r3
 8003564:	69ba      	ldr	r2, [r7, #24]
 8003566:	4013      	ands	r3, r2
 8003568:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	68da      	ldr	r2, [r3, #12]
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	005b      	lsls	r3, r3, #1
 8003572:	fa02 f303 	lsl.w	r3, r2, r3
 8003576:	69ba      	ldr	r2, [r7, #24]
 8003578:	4313      	orrs	r3, r2
 800357a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	69ba      	ldr	r2, [r7, #24]
 8003580:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003588:	2201      	movs	r2, #1
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	fa02 f303 	lsl.w	r3, r2, r3
 8003590:	43db      	mvns	r3, r3
 8003592:	69ba      	ldr	r2, [r7, #24]
 8003594:	4013      	ands	r3, r2
 8003596:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	091b      	lsrs	r3, r3, #4
 800359e:	f003 0201 	and.w	r2, r3, #1
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	fa02 f303 	lsl.w	r3, r2, r3
 80035a8:	69ba      	ldr	r2, [r7, #24]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	69ba      	ldr	r2, [r7, #24]
 80035b2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	005b      	lsls	r3, r3, #1
 80035be:	2203      	movs	r2, #3
 80035c0:	fa02 f303 	lsl.w	r3, r2, r3
 80035c4:	43db      	mvns	r3, r3
 80035c6:	69ba      	ldr	r2, [r7, #24]
 80035c8:	4013      	ands	r3, r2
 80035ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	689a      	ldr	r2, [r3, #8]
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	005b      	lsls	r3, r3, #1
 80035d4:	fa02 f303 	lsl.w	r3, r2, r3
 80035d8:	69ba      	ldr	r2, [r7, #24]
 80035da:	4313      	orrs	r3, r2
 80035dc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d003      	beq.n	80035f4 <HAL_GPIO_Init+0xfc>
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	2b12      	cmp	r3, #18
 80035f2:	d123      	bne.n	800363c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	08da      	lsrs	r2, r3, #3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	3208      	adds	r2, #8
 80035fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003600:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	f003 0307 	and.w	r3, r3, #7
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	220f      	movs	r2, #15
 800360c:	fa02 f303 	lsl.w	r3, r2, r3
 8003610:	43db      	mvns	r3, r3
 8003612:	69ba      	ldr	r2, [r7, #24]
 8003614:	4013      	ands	r3, r2
 8003616:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	691a      	ldr	r2, [r3, #16]
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	f003 0307 	and.w	r3, r3, #7
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	fa02 f303 	lsl.w	r3, r2, r3
 8003628:	69ba      	ldr	r2, [r7, #24]
 800362a:	4313      	orrs	r3, r2
 800362c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	08da      	lsrs	r2, r3, #3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	3208      	adds	r2, #8
 8003636:	69b9      	ldr	r1, [r7, #24]
 8003638:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	005b      	lsls	r3, r3, #1
 8003646:	2203      	movs	r2, #3
 8003648:	fa02 f303 	lsl.w	r3, r2, r3
 800364c:	43db      	mvns	r3, r3
 800364e:	69ba      	ldr	r2, [r7, #24]
 8003650:	4013      	ands	r3, r2
 8003652:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f003 0203 	and.w	r2, r3, #3
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	005b      	lsls	r3, r3, #1
 8003660:	fa02 f303 	lsl.w	r3, r2, r3
 8003664:	69ba      	ldr	r2, [r7, #24]
 8003666:	4313      	orrs	r3, r2
 8003668:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	69ba      	ldr	r2, [r7, #24]
 800366e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003678:	2b00      	cmp	r3, #0
 800367a:	f000 80c0 	beq.w	80037fe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800367e:	2300      	movs	r3, #0
 8003680:	60fb      	str	r3, [r7, #12]
 8003682:	4b66      	ldr	r3, [pc, #408]	; (800381c <HAL_GPIO_Init+0x324>)
 8003684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003686:	4a65      	ldr	r2, [pc, #404]	; (800381c <HAL_GPIO_Init+0x324>)
 8003688:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800368c:	6453      	str	r3, [r2, #68]	; 0x44
 800368e:	4b63      	ldr	r3, [pc, #396]	; (800381c <HAL_GPIO_Init+0x324>)
 8003690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003692:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003696:	60fb      	str	r3, [r7, #12]
 8003698:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800369a:	4a61      	ldr	r2, [pc, #388]	; (8003820 <HAL_GPIO_Init+0x328>)
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	089b      	lsrs	r3, r3, #2
 80036a0:	3302      	adds	r3, #2
 80036a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	f003 0303 	and.w	r3, r3, #3
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	220f      	movs	r2, #15
 80036b2:	fa02 f303 	lsl.w	r3, r2, r3
 80036b6:	43db      	mvns	r3, r3
 80036b8:	69ba      	ldr	r2, [r7, #24]
 80036ba:	4013      	ands	r3, r2
 80036bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a58      	ldr	r2, [pc, #352]	; (8003824 <HAL_GPIO_Init+0x32c>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d037      	beq.n	8003736 <HAL_GPIO_Init+0x23e>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a57      	ldr	r2, [pc, #348]	; (8003828 <HAL_GPIO_Init+0x330>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d031      	beq.n	8003732 <HAL_GPIO_Init+0x23a>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a56      	ldr	r2, [pc, #344]	; (800382c <HAL_GPIO_Init+0x334>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d02b      	beq.n	800372e <HAL_GPIO_Init+0x236>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a55      	ldr	r2, [pc, #340]	; (8003830 <HAL_GPIO_Init+0x338>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d025      	beq.n	800372a <HAL_GPIO_Init+0x232>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a54      	ldr	r2, [pc, #336]	; (8003834 <HAL_GPIO_Init+0x33c>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d01f      	beq.n	8003726 <HAL_GPIO_Init+0x22e>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a53      	ldr	r2, [pc, #332]	; (8003838 <HAL_GPIO_Init+0x340>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d019      	beq.n	8003722 <HAL_GPIO_Init+0x22a>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a52      	ldr	r2, [pc, #328]	; (800383c <HAL_GPIO_Init+0x344>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d013      	beq.n	800371e <HAL_GPIO_Init+0x226>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a51      	ldr	r2, [pc, #324]	; (8003840 <HAL_GPIO_Init+0x348>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d00d      	beq.n	800371a <HAL_GPIO_Init+0x222>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a50      	ldr	r2, [pc, #320]	; (8003844 <HAL_GPIO_Init+0x34c>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d007      	beq.n	8003716 <HAL_GPIO_Init+0x21e>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a4f      	ldr	r2, [pc, #316]	; (8003848 <HAL_GPIO_Init+0x350>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d101      	bne.n	8003712 <HAL_GPIO_Init+0x21a>
 800370e:	2309      	movs	r3, #9
 8003710:	e012      	b.n	8003738 <HAL_GPIO_Init+0x240>
 8003712:	230a      	movs	r3, #10
 8003714:	e010      	b.n	8003738 <HAL_GPIO_Init+0x240>
 8003716:	2308      	movs	r3, #8
 8003718:	e00e      	b.n	8003738 <HAL_GPIO_Init+0x240>
 800371a:	2307      	movs	r3, #7
 800371c:	e00c      	b.n	8003738 <HAL_GPIO_Init+0x240>
 800371e:	2306      	movs	r3, #6
 8003720:	e00a      	b.n	8003738 <HAL_GPIO_Init+0x240>
 8003722:	2305      	movs	r3, #5
 8003724:	e008      	b.n	8003738 <HAL_GPIO_Init+0x240>
 8003726:	2304      	movs	r3, #4
 8003728:	e006      	b.n	8003738 <HAL_GPIO_Init+0x240>
 800372a:	2303      	movs	r3, #3
 800372c:	e004      	b.n	8003738 <HAL_GPIO_Init+0x240>
 800372e:	2302      	movs	r3, #2
 8003730:	e002      	b.n	8003738 <HAL_GPIO_Init+0x240>
 8003732:	2301      	movs	r3, #1
 8003734:	e000      	b.n	8003738 <HAL_GPIO_Init+0x240>
 8003736:	2300      	movs	r3, #0
 8003738:	69fa      	ldr	r2, [r7, #28]
 800373a:	f002 0203 	and.w	r2, r2, #3
 800373e:	0092      	lsls	r2, r2, #2
 8003740:	4093      	lsls	r3, r2
 8003742:	69ba      	ldr	r2, [r7, #24]
 8003744:	4313      	orrs	r3, r2
 8003746:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003748:	4935      	ldr	r1, [pc, #212]	; (8003820 <HAL_GPIO_Init+0x328>)
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	089b      	lsrs	r3, r3, #2
 800374e:	3302      	adds	r3, #2
 8003750:	69ba      	ldr	r2, [r7, #24]
 8003752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003756:	4b3d      	ldr	r3, [pc, #244]	; (800384c <HAL_GPIO_Init+0x354>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	43db      	mvns	r3, r3
 8003760:	69ba      	ldr	r2, [r7, #24]
 8003762:	4013      	ands	r3, r2
 8003764:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d003      	beq.n	800377a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003772:	69ba      	ldr	r2, [r7, #24]
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	4313      	orrs	r3, r2
 8003778:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800377a:	4a34      	ldr	r2, [pc, #208]	; (800384c <HAL_GPIO_Init+0x354>)
 800377c:	69bb      	ldr	r3, [r7, #24]
 800377e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003780:	4b32      	ldr	r3, [pc, #200]	; (800384c <HAL_GPIO_Init+0x354>)
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	43db      	mvns	r3, r3
 800378a:	69ba      	ldr	r2, [r7, #24]
 800378c:	4013      	ands	r3, r2
 800378e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d003      	beq.n	80037a4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800379c:	69ba      	ldr	r2, [r7, #24]
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80037a4:	4a29      	ldr	r2, [pc, #164]	; (800384c <HAL_GPIO_Init+0x354>)
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037aa:	4b28      	ldr	r3, [pc, #160]	; (800384c <HAL_GPIO_Init+0x354>)
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	43db      	mvns	r3, r3
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	4013      	ands	r3, r2
 80037b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d003      	beq.n	80037ce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80037c6:	69ba      	ldr	r2, [r7, #24]
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80037ce:	4a1f      	ldr	r2, [pc, #124]	; (800384c <HAL_GPIO_Init+0x354>)
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80037d4:	4b1d      	ldr	r3, [pc, #116]	; (800384c <HAL_GPIO_Init+0x354>)
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	43db      	mvns	r3, r3
 80037de:	69ba      	ldr	r2, [r7, #24]
 80037e0:	4013      	ands	r3, r2
 80037e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d003      	beq.n	80037f8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80037f0:	69ba      	ldr	r2, [r7, #24]
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80037f8:	4a14      	ldr	r2, [pc, #80]	; (800384c <HAL_GPIO_Init+0x354>)
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	3301      	adds	r3, #1
 8003802:	61fb      	str	r3, [r7, #28]
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	2b0f      	cmp	r3, #15
 8003808:	f67f ae84 	bls.w	8003514 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800380c:	bf00      	nop
 800380e:	bf00      	nop
 8003810:	3724      	adds	r7, #36	; 0x24
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	40023800 	.word	0x40023800
 8003820:	40013800 	.word	0x40013800
 8003824:	40020000 	.word	0x40020000
 8003828:	40020400 	.word	0x40020400
 800382c:	40020800 	.word	0x40020800
 8003830:	40020c00 	.word	0x40020c00
 8003834:	40021000 	.word	0x40021000
 8003838:	40021400 	.word	0x40021400
 800383c:	40021800 	.word	0x40021800
 8003840:	40021c00 	.word	0x40021c00
 8003844:	40022000 	.word	0x40022000
 8003848:	40022400 	.word	0x40022400
 800384c:	40013c00 	.word	0x40013c00

08003850 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003850:	b480      	push	{r7}
 8003852:	b085      	sub	sp, #20
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	460b      	mov	r3, r1
 800385a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	691a      	ldr	r2, [r3, #16]
 8003860:	887b      	ldrh	r3, [r7, #2]
 8003862:	4013      	ands	r3, r2
 8003864:	2b00      	cmp	r3, #0
 8003866:	d002      	beq.n	800386e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003868:	2301      	movs	r3, #1
 800386a:	73fb      	strb	r3, [r7, #15]
 800386c:	e001      	b.n	8003872 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800386e:	2300      	movs	r3, #0
 8003870:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003872:	7bfb      	ldrb	r3, [r7, #15]
}
 8003874:	4618      	mov	r0, r3
 8003876:	3714      	adds	r7, #20
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	460b      	mov	r3, r1
 800388a:	807b      	strh	r3, [r7, #2]
 800388c:	4613      	mov	r3, r2
 800388e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003890:	787b      	ldrb	r3, [r7, #1]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d003      	beq.n	800389e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003896:	887a      	ldrh	r2, [r7, #2]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800389c:	e003      	b.n	80038a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800389e:	887b      	ldrh	r3, [r7, #2]
 80038a0:	041a      	lsls	r2, r3, #16
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	619a      	str	r2, [r3, #24]
}
 80038a6:	bf00      	nop
 80038a8:	370c      	adds	r7, #12
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
	...

080038b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d101      	bne.n	80038c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e12b      	b.n	8003b1e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d106      	bne.n	80038e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f7fd fee8 	bl	80016b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2224      	movs	r2, #36	; 0x24
 80038e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f022 0201 	bic.w	r2, r2, #1
 80038f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003906:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003916:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003918:	f001 fcbc 	bl	8005294 <HAL_RCC_GetPCLK1Freq>
 800391c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	4a81      	ldr	r2, [pc, #516]	; (8003b28 <HAL_I2C_Init+0x274>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d807      	bhi.n	8003938 <HAL_I2C_Init+0x84>
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	4a80      	ldr	r2, [pc, #512]	; (8003b2c <HAL_I2C_Init+0x278>)
 800392c:	4293      	cmp	r3, r2
 800392e:	bf94      	ite	ls
 8003930:	2301      	movls	r3, #1
 8003932:	2300      	movhi	r3, #0
 8003934:	b2db      	uxtb	r3, r3
 8003936:	e006      	b.n	8003946 <HAL_I2C_Init+0x92>
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	4a7d      	ldr	r2, [pc, #500]	; (8003b30 <HAL_I2C_Init+0x27c>)
 800393c:	4293      	cmp	r3, r2
 800393e:	bf94      	ite	ls
 8003940:	2301      	movls	r3, #1
 8003942:	2300      	movhi	r3, #0
 8003944:	b2db      	uxtb	r3, r3
 8003946:	2b00      	cmp	r3, #0
 8003948:	d001      	beq.n	800394e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e0e7      	b.n	8003b1e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	4a78      	ldr	r2, [pc, #480]	; (8003b34 <HAL_I2C_Init+0x280>)
 8003952:	fba2 2303 	umull	r2, r3, r2, r3
 8003956:	0c9b      	lsrs	r3, r3, #18
 8003958:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68ba      	ldr	r2, [r7, #8]
 800396a:	430a      	orrs	r2, r1
 800396c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	6a1b      	ldr	r3, [r3, #32]
 8003974:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	4a6a      	ldr	r2, [pc, #424]	; (8003b28 <HAL_I2C_Init+0x274>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d802      	bhi.n	8003988 <HAL_I2C_Init+0xd4>
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	3301      	adds	r3, #1
 8003986:	e009      	b.n	800399c <HAL_I2C_Init+0xe8>
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800398e:	fb02 f303 	mul.w	r3, r2, r3
 8003992:	4a69      	ldr	r2, [pc, #420]	; (8003b38 <HAL_I2C_Init+0x284>)
 8003994:	fba2 2303 	umull	r2, r3, r2, r3
 8003998:	099b      	lsrs	r3, r3, #6
 800399a:	3301      	adds	r3, #1
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	6812      	ldr	r2, [r2, #0]
 80039a0:	430b      	orrs	r3, r1
 80039a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	69db      	ldr	r3, [r3, #28]
 80039aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80039ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	495c      	ldr	r1, [pc, #368]	; (8003b28 <HAL_I2C_Init+0x274>)
 80039b8:	428b      	cmp	r3, r1
 80039ba:	d819      	bhi.n	80039f0 <HAL_I2C_Init+0x13c>
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	1e59      	subs	r1, r3, #1
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	005b      	lsls	r3, r3, #1
 80039c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80039ca:	1c59      	adds	r1, r3, #1
 80039cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80039d0:	400b      	ands	r3, r1
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00a      	beq.n	80039ec <HAL_I2C_Init+0x138>
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	1e59      	subs	r1, r3, #1
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	005b      	lsls	r3, r3, #1
 80039e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80039e4:	3301      	adds	r3, #1
 80039e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039ea:	e051      	b.n	8003a90 <HAL_I2C_Init+0x1dc>
 80039ec:	2304      	movs	r3, #4
 80039ee:	e04f      	b.n	8003a90 <HAL_I2C_Init+0x1dc>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d111      	bne.n	8003a1c <HAL_I2C_Init+0x168>
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	1e58      	subs	r0, r3, #1
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6859      	ldr	r1, [r3, #4]
 8003a00:	460b      	mov	r3, r1
 8003a02:	005b      	lsls	r3, r3, #1
 8003a04:	440b      	add	r3, r1
 8003a06:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	bf0c      	ite	eq
 8003a14:	2301      	moveq	r3, #1
 8003a16:	2300      	movne	r3, #0
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	e012      	b.n	8003a42 <HAL_I2C_Init+0x18e>
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	1e58      	subs	r0, r3, #1
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6859      	ldr	r1, [r3, #4]
 8003a24:	460b      	mov	r3, r1
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	440b      	add	r3, r1
 8003a2a:	0099      	lsls	r1, r3, #2
 8003a2c:	440b      	add	r3, r1
 8003a2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a32:	3301      	adds	r3, #1
 8003a34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	bf0c      	ite	eq
 8003a3c:	2301      	moveq	r3, #1
 8003a3e:	2300      	movne	r3, #0
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d001      	beq.n	8003a4a <HAL_I2C_Init+0x196>
 8003a46:	2301      	movs	r3, #1
 8003a48:	e022      	b.n	8003a90 <HAL_I2C_Init+0x1dc>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d10e      	bne.n	8003a70 <HAL_I2C_Init+0x1bc>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	1e58      	subs	r0, r3, #1
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6859      	ldr	r1, [r3, #4]
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	005b      	lsls	r3, r3, #1
 8003a5e:	440b      	add	r3, r1
 8003a60:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a64:	3301      	adds	r3, #1
 8003a66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a6e:	e00f      	b.n	8003a90 <HAL_I2C_Init+0x1dc>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	1e58      	subs	r0, r3, #1
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6859      	ldr	r1, [r3, #4]
 8003a78:	460b      	mov	r3, r1
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	440b      	add	r3, r1
 8003a7e:	0099      	lsls	r1, r3, #2
 8003a80:	440b      	add	r3, r1
 8003a82:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a86:	3301      	adds	r3, #1
 8003a88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a90:	6879      	ldr	r1, [r7, #4]
 8003a92:	6809      	ldr	r1, [r1, #0]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	69da      	ldr	r2, [r3, #28]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a1b      	ldr	r3, [r3, #32]
 8003aaa:	431a      	orrs	r2, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	430a      	orrs	r2, r1
 8003ab2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003abe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	6911      	ldr	r1, [r2, #16]
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	68d2      	ldr	r2, [r2, #12]
 8003aca:	4311      	orrs	r1, r2
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	6812      	ldr	r2, [r2, #0]
 8003ad0:	430b      	orrs	r3, r1
 8003ad2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	695a      	ldr	r2, [r3, #20]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	699b      	ldr	r3, [r3, #24]
 8003ae6:	431a      	orrs	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	430a      	orrs	r2, r1
 8003aee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f042 0201 	orr.w	r2, r2, #1
 8003afe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2220      	movs	r2, #32
 8003b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b1c:	2300      	movs	r3, #0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3710      	adds	r7, #16
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	000186a0 	.word	0x000186a0
 8003b2c:	001e847f 	.word	0x001e847f
 8003b30:	003d08ff 	.word	0x003d08ff
 8003b34:	431bde83 	.word	0x431bde83
 8003b38:	10624dd3 	.word	0x10624dd3

08003b3c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b088      	sub	sp, #32
 8003b40:	af02      	add	r7, sp, #8
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	4608      	mov	r0, r1
 8003b46:	4611      	mov	r1, r2
 8003b48:	461a      	mov	r2, r3
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	817b      	strh	r3, [r7, #10]
 8003b4e:	460b      	mov	r3, r1
 8003b50:	813b      	strh	r3, [r7, #8]
 8003b52:	4613      	mov	r3, r2
 8003b54:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b56:	f7ff fafd 	bl	8003154 <HAL_GetTick>
 8003b5a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	2b20      	cmp	r3, #32
 8003b66:	f040 80d9 	bne.w	8003d1c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	9300      	str	r3, [sp, #0]
 8003b6e:	2319      	movs	r3, #25
 8003b70:	2201      	movs	r2, #1
 8003b72:	496d      	ldr	r1, [pc, #436]	; (8003d28 <HAL_I2C_Mem_Write+0x1ec>)
 8003b74:	68f8      	ldr	r0, [r7, #12]
 8003b76:	f000 fc7f 	bl	8004478 <I2C_WaitOnFlagUntilTimeout>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d001      	beq.n	8003b84 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003b80:	2302      	movs	r3, #2
 8003b82:	e0cc      	b.n	8003d1e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d101      	bne.n	8003b92 <HAL_I2C_Mem_Write+0x56>
 8003b8e:	2302      	movs	r3, #2
 8003b90:	e0c5      	b.n	8003d1e <HAL_I2C_Mem_Write+0x1e2>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2201      	movs	r2, #1
 8003b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0301 	and.w	r3, r3, #1
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d007      	beq.n	8003bb8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f042 0201 	orr.w	r2, r2, #1
 8003bb6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bc6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2221      	movs	r2, #33	; 0x21
 8003bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2240      	movs	r2, #64	; 0x40
 8003bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6a3a      	ldr	r2, [r7, #32]
 8003be2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003be8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bee:	b29a      	uxth	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	4a4d      	ldr	r2, [pc, #308]	; (8003d2c <HAL_I2C_Mem_Write+0x1f0>)
 8003bf8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003bfa:	88f8      	ldrh	r0, [r7, #6]
 8003bfc:	893a      	ldrh	r2, [r7, #8]
 8003bfe:	8979      	ldrh	r1, [r7, #10]
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	9301      	str	r3, [sp, #4]
 8003c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c06:	9300      	str	r3, [sp, #0]
 8003c08:	4603      	mov	r3, r0
 8003c0a:	68f8      	ldr	r0, [r7, #12]
 8003c0c:	f000 fab6 	bl	800417c <I2C_RequestMemoryWrite>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d052      	beq.n	8003cbc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e081      	b.n	8003d1e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c1a:	697a      	ldr	r2, [r7, #20]
 8003c1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c1e:	68f8      	ldr	r0, [r7, #12]
 8003c20:	f000 fd00 	bl	8004624 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d00d      	beq.n	8003c46 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2e:	2b04      	cmp	r3, #4
 8003c30:	d107      	bne.n	8003c42 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c40:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e06b      	b.n	8003d1e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4a:	781a      	ldrb	r2, [r3, #0]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c56:	1c5a      	adds	r2, r3, #1
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c60:	3b01      	subs	r3, #1
 8003c62:	b29a      	uxth	r2, r3
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	3b01      	subs	r3, #1
 8003c70:	b29a      	uxth	r2, r3
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	695b      	ldr	r3, [r3, #20]
 8003c7c:	f003 0304 	and.w	r3, r3, #4
 8003c80:	2b04      	cmp	r3, #4
 8003c82:	d11b      	bne.n	8003cbc <HAL_I2C_Mem_Write+0x180>
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d017      	beq.n	8003cbc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c90:	781a      	ldrb	r2, [r3, #0]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9c:	1c5a      	adds	r2, r3, #1
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	b29a      	uxth	r2, r3
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	b29a      	uxth	r2, r3
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d1aa      	bne.n	8003c1a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cc4:	697a      	ldr	r2, [r7, #20]
 8003cc6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cc8:	68f8      	ldr	r0, [r7, #12]
 8003cca:	f000 fcec 	bl	80046a6 <I2C_WaitOnBTFFlagUntilTimeout>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d00d      	beq.n	8003cf0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd8:	2b04      	cmp	r3, #4
 8003cda:	d107      	bne.n	8003cec <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cea:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e016      	b.n	8003d1e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cfe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2220      	movs	r2, #32
 8003d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	e000      	b.n	8003d1e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003d1c:	2302      	movs	r3, #2
  }
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3718      	adds	r7, #24
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	00100002 	.word	0x00100002
 8003d2c:	ffff0000 	.word	0xffff0000

08003d30 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b08c      	sub	sp, #48	; 0x30
 8003d34:	af02      	add	r7, sp, #8
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	4608      	mov	r0, r1
 8003d3a:	4611      	mov	r1, r2
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	4603      	mov	r3, r0
 8003d40:	817b      	strh	r3, [r7, #10]
 8003d42:	460b      	mov	r3, r1
 8003d44:	813b      	strh	r3, [r7, #8]
 8003d46:	4613      	mov	r3, r2
 8003d48:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d4a:	f7ff fa03 	bl	8003154 <HAL_GetTick>
 8003d4e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	2b20      	cmp	r3, #32
 8003d5a:	f040 8208 	bne.w	800416e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d60:	9300      	str	r3, [sp, #0]
 8003d62:	2319      	movs	r3, #25
 8003d64:	2201      	movs	r2, #1
 8003d66:	497b      	ldr	r1, [pc, #492]	; (8003f54 <HAL_I2C_Mem_Read+0x224>)
 8003d68:	68f8      	ldr	r0, [r7, #12]
 8003d6a:	f000 fb85 	bl	8004478 <I2C_WaitOnFlagUntilTimeout>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d001      	beq.n	8003d78 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003d74:	2302      	movs	r3, #2
 8003d76:	e1fb      	b.n	8004170 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d101      	bne.n	8003d86 <HAL_I2C_Mem_Read+0x56>
 8003d82:	2302      	movs	r3, #2
 8003d84:	e1f4      	b.n	8004170 <HAL_I2C_Mem_Read+0x440>
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2201      	movs	r2, #1
 8003d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0301 	and.w	r3, r3, #1
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d007      	beq.n	8003dac <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f042 0201 	orr.w	r2, r2, #1
 8003daa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2222      	movs	r2, #34	; 0x22
 8003dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2240      	movs	r2, #64	; 0x40
 8003dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dd6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003ddc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003de2:	b29a      	uxth	r2, r3
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	4a5b      	ldr	r2, [pc, #364]	; (8003f58 <HAL_I2C_Mem_Read+0x228>)
 8003dec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003dee:	88f8      	ldrh	r0, [r7, #6]
 8003df0:	893a      	ldrh	r2, [r7, #8]
 8003df2:	8979      	ldrh	r1, [r7, #10]
 8003df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df6:	9301      	str	r3, [sp, #4]
 8003df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dfa:	9300      	str	r3, [sp, #0]
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	68f8      	ldr	r0, [r7, #12]
 8003e00:	f000 fa52 	bl	80042a8 <I2C_RequestMemoryRead>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d001      	beq.n	8003e0e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e1b0      	b.n	8004170 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d113      	bne.n	8003e3e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e16:	2300      	movs	r3, #0
 8003e18:	623b      	str	r3, [r7, #32]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	695b      	ldr	r3, [r3, #20]
 8003e20:	623b      	str	r3, [r7, #32]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	699b      	ldr	r3, [r3, #24]
 8003e28:	623b      	str	r3, [r7, #32]
 8003e2a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e3a:	601a      	str	r2, [r3, #0]
 8003e3c:	e184      	b.n	8004148 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d11b      	bne.n	8003e7e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e54:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e56:	2300      	movs	r3, #0
 8003e58:	61fb      	str	r3, [r7, #28]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	695b      	ldr	r3, [r3, #20]
 8003e60:	61fb      	str	r3, [r7, #28]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	699b      	ldr	r3, [r3, #24]
 8003e68:	61fb      	str	r3, [r7, #28]
 8003e6a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e7a:	601a      	str	r2, [r3, #0]
 8003e7c:	e164      	b.n	8004148 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d11b      	bne.n	8003ebe <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e94:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ea4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	61bb      	str	r3, [r7, #24]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	695b      	ldr	r3, [r3, #20]
 8003eb0:	61bb      	str	r3, [r7, #24]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	699b      	ldr	r3, [r3, #24]
 8003eb8:	61bb      	str	r3, [r7, #24]
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	e144      	b.n	8004148 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	617b      	str	r3, [r7, #20]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	695b      	ldr	r3, [r3, #20]
 8003ec8:	617b      	str	r3, [r7, #20]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	699b      	ldr	r3, [r3, #24]
 8003ed0:	617b      	str	r3, [r7, #20]
 8003ed2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003ed4:	e138      	b.n	8004148 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eda:	2b03      	cmp	r3, #3
 8003edc:	f200 80f1 	bhi.w	80040c2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d123      	bne.n	8003f30 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003eec:	68f8      	ldr	r0, [r7, #12]
 8003eee:	f000 fc1b 	bl	8004728 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d001      	beq.n	8003efc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e139      	b.n	8004170 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	691a      	ldr	r2, [r3, #16]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f06:	b2d2      	uxtb	r2, r2
 8003f08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0e:	1c5a      	adds	r2, r3, #1
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f18:	3b01      	subs	r3, #1
 8003f1a:	b29a      	uxth	r2, r3
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	3b01      	subs	r3, #1
 8003f28:	b29a      	uxth	r2, r3
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f2e:	e10b      	b.n	8004148 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f34:	2b02      	cmp	r3, #2
 8003f36:	d14e      	bne.n	8003fd6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3a:	9300      	str	r3, [sp, #0]
 8003f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f3e:	2200      	movs	r2, #0
 8003f40:	4906      	ldr	r1, [pc, #24]	; (8003f5c <HAL_I2C_Mem_Read+0x22c>)
 8003f42:	68f8      	ldr	r0, [r7, #12]
 8003f44:	f000 fa98 	bl	8004478 <I2C_WaitOnFlagUntilTimeout>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d008      	beq.n	8003f60 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e10e      	b.n	8004170 <HAL_I2C_Mem_Read+0x440>
 8003f52:	bf00      	nop
 8003f54:	00100002 	.word	0x00100002
 8003f58:	ffff0000 	.word	0xffff0000
 8003f5c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	691a      	ldr	r2, [r3, #16]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7a:	b2d2      	uxtb	r2, r2
 8003f7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f82:	1c5a      	adds	r2, r3, #1
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f8c:	3b01      	subs	r3, #1
 8003f8e:	b29a      	uxth	r2, r3
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	3b01      	subs	r3, #1
 8003f9c:	b29a      	uxth	r2, r3
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	691a      	ldr	r2, [r3, #16]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fac:	b2d2      	uxtb	r2, r2
 8003fae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb4:	1c5a      	adds	r2, r3, #1
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	b29a      	uxth	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	3b01      	subs	r3, #1
 8003fce:	b29a      	uxth	r2, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003fd4:	e0b8      	b.n	8004148 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd8:	9300      	str	r3, [sp, #0]
 8003fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fdc:	2200      	movs	r2, #0
 8003fde:	4966      	ldr	r1, [pc, #408]	; (8004178 <HAL_I2C_Mem_Read+0x448>)
 8003fe0:	68f8      	ldr	r0, [r7, #12]
 8003fe2:	f000 fa49 	bl	8004478 <I2C_WaitOnFlagUntilTimeout>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d001      	beq.n	8003ff0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e0bf      	b.n	8004170 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ffe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	691a      	ldr	r2, [r3, #16]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400a:	b2d2      	uxtb	r2, r2
 800400c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004012:	1c5a      	adds	r2, r3, #1
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800401c:	3b01      	subs	r3, #1
 800401e:	b29a      	uxth	r2, r3
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004028:	b29b      	uxth	r3, r3
 800402a:	3b01      	subs	r3, #1
 800402c:	b29a      	uxth	r2, r3
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004034:	9300      	str	r3, [sp, #0]
 8004036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004038:	2200      	movs	r2, #0
 800403a:	494f      	ldr	r1, [pc, #316]	; (8004178 <HAL_I2C_Mem_Read+0x448>)
 800403c:	68f8      	ldr	r0, [r7, #12]
 800403e:	f000 fa1b 	bl	8004478 <I2C_WaitOnFlagUntilTimeout>
 8004042:	4603      	mov	r3, r0
 8004044:	2b00      	cmp	r3, #0
 8004046:	d001      	beq.n	800404c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e091      	b.n	8004170 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800405a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	691a      	ldr	r2, [r3, #16]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004066:	b2d2      	uxtb	r2, r2
 8004068:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406e:	1c5a      	adds	r2, r3, #1
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004078:	3b01      	subs	r3, #1
 800407a:	b29a      	uxth	r2, r3
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004084:	b29b      	uxth	r3, r3
 8004086:	3b01      	subs	r3, #1
 8004088:	b29a      	uxth	r2, r3
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	691a      	ldr	r2, [r3, #16]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004098:	b2d2      	uxtb	r2, r2
 800409a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a0:	1c5a      	adds	r2, r3, #1
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040aa:	3b01      	subs	r3, #1
 80040ac:	b29a      	uxth	r2, r3
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	3b01      	subs	r3, #1
 80040ba:	b29a      	uxth	r2, r3
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80040c0:	e042      	b.n	8004148 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80040c6:	68f8      	ldr	r0, [r7, #12]
 80040c8:	f000 fb2e 	bl	8004728 <I2C_WaitOnRXNEFlagUntilTimeout>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d001      	beq.n	80040d6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e04c      	b.n	8004170 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	691a      	ldr	r2, [r3, #16]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e0:	b2d2      	uxtb	r2, r2
 80040e2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e8:	1c5a      	adds	r2, r3, #1
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040f2:	3b01      	subs	r3, #1
 80040f4:	b29a      	uxth	r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040fe:	b29b      	uxth	r3, r3
 8004100:	3b01      	subs	r3, #1
 8004102:	b29a      	uxth	r2, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	695b      	ldr	r3, [r3, #20]
 800410e:	f003 0304 	and.w	r3, r3, #4
 8004112:	2b04      	cmp	r3, #4
 8004114:	d118      	bne.n	8004148 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	691a      	ldr	r2, [r3, #16]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004120:	b2d2      	uxtb	r2, r2
 8004122:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004128:	1c5a      	adds	r2, r3, #1
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004132:	3b01      	subs	r3, #1
 8004134:	b29a      	uxth	r2, r3
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800413e:	b29b      	uxth	r3, r3
 8004140:	3b01      	subs	r3, #1
 8004142:	b29a      	uxth	r2, r3
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800414c:	2b00      	cmp	r3, #0
 800414e:	f47f aec2 	bne.w	8003ed6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2220      	movs	r2, #32
 8004156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800416a:	2300      	movs	r3, #0
 800416c:	e000      	b.n	8004170 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800416e:	2302      	movs	r3, #2
  }
}
 8004170:	4618      	mov	r0, r3
 8004172:	3728      	adds	r7, #40	; 0x28
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}
 8004178:	00010004 	.word	0x00010004

0800417c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b088      	sub	sp, #32
 8004180:	af02      	add	r7, sp, #8
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	4608      	mov	r0, r1
 8004186:	4611      	mov	r1, r2
 8004188:	461a      	mov	r2, r3
 800418a:	4603      	mov	r3, r0
 800418c:	817b      	strh	r3, [r7, #10]
 800418e:	460b      	mov	r3, r1
 8004190:	813b      	strh	r3, [r7, #8]
 8004192:	4613      	mov	r3, r2
 8004194:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041a4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a8:	9300      	str	r3, [sp, #0]
 80041aa:	6a3b      	ldr	r3, [r7, #32]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80041b2:	68f8      	ldr	r0, [r7, #12]
 80041b4:	f000 f960 	bl	8004478 <I2C_WaitOnFlagUntilTimeout>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d00d      	beq.n	80041da <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041cc:	d103      	bne.n	80041d6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041d4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e05f      	b.n	800429a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80041da:	897b      	ldrh	r3, [r7, #10]
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	461a      	mov	r2, r3
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80041e8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ec:	6a3a      	ldr	r2, [r7, #32]
 80041ee:	492d      	ldr	r1, [pc, #180]	; (80042a4 <I2C_RequestMemoryWrite+0x128>)
 80041f0:	68f8      	ldr	r0, [r7, #12]
 80041f2:	f000 f998 	bl	8004526 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d001      	beq.n	8004200 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e04c      	b.n	800429a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004200:	2300      	movs	r3, #0
 8004202:	617b      	str	r3, [r7, #20]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	695b      	ldr	r3, [r3, #20]
 800420a:	617b      	str	r3, [r7, #20]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	617b      	str	r3, [r7, #20]
 8004214:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004216:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004218:	6a39      	ldr	r1, [r7, #32]
 800421a:	68f8      	ldr	r0, [r7, #12]
 800421c:	f000 fa02 	bl	8004624 <I2C_WaitOnTXEFlagUntilTimeout>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00d      	beq.n	8004242 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422a:	2b04      	cmp	r3, #4
 800422c:	d107      	bne.n	800423e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800423c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e02b      	b.n	800429a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004242:	88fb      	ldrh	r3, [r7, #6]
 8004244:	2b01      	cmp	r3, #1
 8004246:	d105      	bne.n	8004254 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004248:	893b      	ldrh	r3, [r7, #8]
 800424a:	b2da      	uxtb	r2, r3
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	611a      	str	r2, [r3, #16]
 8004252:	e021      	b.n	8004298 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004254:	893b      	ldrh	r3, [r7, #8]
 8004256:	0a1b      	lsrs	r3, r3, #8
 8004258:	b29b      	uxth	r3, r3
 800425a:	b2da      	uxtb	r2, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004262:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004264:	6a39      	ldr	r1, [r7, #32]
 8004266:	68f8      	ldr	r0, [r7, #12]
 8004268:	f000 f9dc 	bl	8004624 <I2C_WaitOnTXEFlagUntilTimeout>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d00d      	beq.n	800428e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004276:	2b04      	cmp	r3, #4
 8004278:	d107      	bne.n	800428a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004288:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e005      	b.n	800429a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800428e:	893b      	ldrh	r3, [r7, #8]
 8004290:	b2da      	uxtb	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	3718      	adds	r7, #24
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	00010002 	.word	0x00010002

080042a8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b088      	sub	sp, #32
 80042ac:	af02      	add	r7, sp, #8
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	4608      	mov	r0, r1
 80042b2:	4611      	mov	r1, r2
 80042b4:	461a      	mov	r2, r3
 80042b6:	4603      	mov	r3, r0
 80042b8:	817b      	strh	r3, [r7, #10]
 80042ba:	460b      	mov	r3, r1
 80042bc:	813b      	strh	r3, [r7, #8]
 80042be:	4613      	mov	r3, r2
 80042c0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80042d0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042e0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e4:	9300      	str	r3, [sp, #0]
 80042e6:	6a3b      	ldr	r3, [r7, #32]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80042ee:	68f8      	ldr	r0, [r7, #12]
 80042f0:	f000 f8c2 	bl	8004478 <I2C_WaitOnFlagUntilTimeout>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d00d      	beq.n	8004316 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004304:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004308:	d103      	bne.n	8004312 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004310:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e0aa      	b.n	800446c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004316:	897b      	ldrh	r3, [r7, #10]
 8004318:	b2db      	uxtb	r3, r3
 800431a:	461a      	mov	r2, r3
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004324:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004328:	6a3a      	ldr	r2, [r7, #32]
 800432a:	4952      	ldr	r1, [pc, #328]	; (8004474 <I2C_RequestMemoryRead+0x1cc>)
 800432c:	68f8      	ldr	r0, [r7, #12]
 800432e:	f000 f8fa 	bl	8004526 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d001      	beq.n	800433c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e097      	b.n	800446c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800433c:	2300      	movs	r3, #0
 800433e:	617b      	str	r3, [r7, #20]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	695b      	ldr	r3, [r3, #20]
 8004346:	617b      	str	r3, [r7, #20]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	699b      	ldr	r3, [r3, #24]
 800434e:	617b      	str	r3, [r7, #20]
 8004350:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004352:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004354:	6a39      	ldr	r1, [r7, #32]
 8004356:	68f8      	ldr	r0, [r7, #12]
 8004358:	f000 f964 	bl	8004624 <I2C_WaitOnTXEFlagUntilTimeout>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d00d      	beq.n	800437e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004366:	2b04      	cmp	r3, #4
 8004368:	d107      	bne.n	800437a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004378:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e076      	b.n	800446c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800437e:	88fb      	ldrh	r3, [r7, #6]
 8004380:	2b01      	cmp	r3, #1
 8004382:	d105      	bne.n	8004390 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004384:	893b      	ldrh	r3, [r7, #8]
 8004386:	b2da      	uxtb	r2, r3
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	611a      	str	r2, [r3, #16]
 800438e:	e021      	b.n	80043d4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004390:	893b      	ldrh	r3, [r7, #8]
 8004392:	0a1b      	lsrs	r3, r3, #8
 8004394:	b29b      	uxth	r3, r3
 8004396:	b2da      	uxtb	r2, r3
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800439e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043a0:	6a39      	ldr	r1, [r7, #32]
 80043a2:	68f8      	ldr	r0, [r7, #12]
 80043a4:	f000 f93e 	bl	8004624 <I2C_WaitOnTXEFlagUntilTimeout>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d00d      	beq.n	80043ca <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b2:	2b04      	cmp	r3, #4
 80043b4:	d107      	bne.n	80043c6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043c4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e050      	b.n	800446c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80043ca:	893b      	ldrh	r3, [r7, #8]
 80043cc:	b2da      	uxtb	r2, r3
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043d6:	6a39      	ldr	r1, [r7, #32]
 80043d8:	68f8      	ldr	r0, [r7, #12]
 80043da:	f000 f923 	bl	8004624 <I2C_WaitOnTXEFlagUntilTimeout>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d00d      	beq.n	8004400 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e8:	2b04      	cmp	r3, #4
 80043ea:	d107      	bne.n	80043fc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043fa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e035      	b.n	800446c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800440e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004412:	9300      	str	r3, [sp, #0]
 8004414:	6a3b      	ldr	r3, [r7, #32]
 8004416:	2200      	movs	r2, #0
 8004418:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800441c:	68f8      	ldr	r0, [r7, #12]
 800441e:	f000 f82b 	bl	8004478 <I2C_WaitOnFlagUntilTimeout>
 8004422:	4603      	mov	r3, r0
 8004424:	2b00      	cmp	r3, #0
 8004426:	d00d      	beq.n	8004444 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004432:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004436:	d103      	bne.n	8004440 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800443e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004440:	2303      	movs	r3, #3
 8004442:	e013      	b.n	800446c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004444:	897b      	ldrh	r3, [r7, #10]
 8004446:	b2db      	uxtb	r3, r3
 8004448:	f043 0301 	orr.w	r3, r3, #1
 800444c:	b2da      	uxtb	r2, r3
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004456:	6a3a      	ldr	r2, [r7, #32]
 8004458:	4906      	ldr	r1, [pc, #24]	; (8004474 <I2C_RequestMemoryRead+0x1cc>)
 800445a:	68f8      	ldr	r0, [r7, #12]
 800445c:	f000 f863 	bl	8004526 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d001      	beq.n	800446a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e000      	b.n	800446c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800446a:	2300      	movs	r3, #0
}
 800446c:	4618      	mov	r0, r3
 800446e:	3718      	adds	r7, #24
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}
 8004474:	00010002 	.word	0x00010002

08004478 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b084      	sub	sp, #16
 800447c:	af00      	add	r7, sp, #0
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	60b9      	str	r1, [r7, #8]
 8004482:	603b      	str	r3, [r7, #0]
 8004484:	4613      	mov	r3, r2
 8004486:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004488:	e025      	b.n	80044d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004490:	d021      	beq.n	80044d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004492:	f7fe fe5f 	bl	8003154 <HAL_GetTick>
 8004496:	4602      	mov	r2, r0
 8004498:	69bb      	ldr	r3, [r7, #24]
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	683a      	ldr	r2, [r7, #0]
 800449e:	429a      	cmp	r2, r3
 80044a0:	d302      	bcc.n	80044a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d116      	bne.n	80044d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2200      	movs	r2, #0
 80044ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2220      	movs	r2, #32
 80044b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c2:	f043 0220 	orr.w	r2, r3, #32
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e023      	b.n	800451e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	0c1b      	lsrs	r3, r3, #16
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d10d      	bne.n	80044fc <I2C_WaitOnFlagUntilTimeout+0x84>
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	695b      	ldr	r3, [r3, #20]
 80044e6:	43da      	mvns	r2, r3
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	4013      	ands	r3, r2
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	bf0c      	ite	eq
 80044f2:	2301      	moveq	r3, #1
 80044f4:	2300      	movne	r3, #0
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	461a      	mov	r2, r3
 80044fa:	e00c      	b.n	8004516 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	699b      	ldr	r3, [r3, #24]
 8004502:	43da      	mvns	r2, r3
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	4013      	ands	r3, r2
 8004508:	b29b      	uxth	r3, r3
 800450a:	2b00      	cmp	r3, #0
 800450c:	bf0c      	ite	eq
 800450e:	2301      	moveq	r3, #1
 8004510:	2300      	movne	r3, #0
 8004512:	b2db      	uxtb	r3, r3
 8004514:	461a      	mov	r2, r3
 8004516:	79fb      	ldrb	r3, [r7, #7]
 8004518:	429a      	cmp	r2, r3
 800451a:	d0b6      	beq.n	800448a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3710      	adds	r7, #16
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}

08004526 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004526:	b580      	push	{r7, lr}
 8004528:	b084      	sub	sp, #16
 800452a:	af00      	add	r7, sp, #0
 800452c:	60f8      	str	r0, [r7, #12]
 800452e:	60b9      	str	r1, [r7, #8]
 8004530:	607a      	str	r2, [r7, #4]
 8004532:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004534:	e051      	b.n	80045da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	695b      	ldr	r3, [r3, #20]
 800453c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004540:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004544:	d123      	bne.n	800458e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004554:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800455e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2200      	movs	r2, #0
 8004564:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2220      	movs	r2, #32
 800456a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2200      	movs	r2, #0
 8004572:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457a:	f043 0204 	orr.w	r2, r3, #4
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2200      	movs	r2, #0
 8004586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e046      	b.n	800461c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004594:	d021      	beq.n	80045da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004596:	f7fe fddd 	bl	8003154 <HAL_GetTick>
 800459a:	4602      	mov	r2, r0
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d302      	bcc.n	80045ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d116      	bne.n	80045da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2200      	movs	r2, #0
 80045b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2220      	movs	r2, #32
 80045b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2200      	movs	r2, #0
 80045be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c6:	f043 0220 	orr.w	r2, r3, #32
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e020      	b.n	800461c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	0c1b      	lsrs	r3, r3, #16
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d10c      	bne.n	80045fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	43da      	mvns	r2, r3
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	4013      	ands	r3, r2
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	bf14      	ite	ne
 80045f6:	2301      	movne	r3, #1
 80045f8:	2300      	moveq	r3, #0
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	e00b      	b.n	8004616 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	699b      	ldr	r3, [r3, #24]
 8004604:	43da      	mvns	r2, r3
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	4013      	ands	r3, r2
 800460a:	b29b      	uxth	r3, r3
 800460c:	2b00      	cmp	r3, #0
 800460e:	bf14      	ite	ne
 8004610:	2301      	movne	r3, #1
 8004612:	2300      	moveq	r3, #0
 8004614:	b2db      	uxtb	r3, r3
 8004616:	2b00      	cmp	r3, #0
 8004618:	d18d      	bne.n	8004536 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800461a:	2300      	movs	r3, #0
}
 800461c:	4618      	mov	r0, r3
 800461e:	3710      	adds	r7, #16
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004630:	e02d      	b.n	800468e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004632:	68f8      	ldr	r0, [r7, #12]
 8004634:	f000 f8ce 	bl	80047d4 <I2C_IsAcknowledgeFailed>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d001      	beq.n	8004642 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e02d      	b.n	800469e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004648:	d021      	beq.n	800468e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800464a:	f7fe fd83 	bl	8003154 <HAL_GetTick>
 800464e:	4602      	mov	r2, r0
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	68ba      	ldr	r2, [r7, #8]
 8004656:	429a      	cmp	r2, r3
 8004658:	d302      	bcc.n	8004660 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d116      	bne.n	800468e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2200      	movs	r2, #0
 8004664:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2220      	movs	r2, #32
 800466a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467a:	f043 0220 	orr.w	r2, r3, #32
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2200      	movs	r2, #0
 8004686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e007      	b.n	800469e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	695b      	ldr	r3, [r3, #20]
 8004694:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004698:	2b80      	cmp	r3, #128	; 0x80
 800469a:	d1ca      	bne.n	8004632 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3710      	adds	r7, #16
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}

080046a6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046a6:	b580      	push	{r7, lr}
 80046a8:	b084      	sub	sp, #16
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	60f8      	str	r0, [r7, #12]
 80046ae:	60b9      	str	r1, [r7, #8]
 80046b0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80046b2:	e02d      	b.n	8004710 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80046b4:	68f8      	ldr	r0, [r7, #12]
 80046b6:	f000 f88d 	bl	80047d4 <I2C_IsAcknowledgeFailed>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d001      	beq.n	80046c4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e02d      	b.n	8004720 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046ca:	d021      	beq.n	8004710 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046cc:	f7fe fd42 	bl	8003154 <HAL_GetTick>
 80046d0:	4602      	mov	r2, r0
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	68ba      	ldr	r2, [r7, #8]
 80046d8:	429a      	cmp	r2, r3
 80046da:	d302      	bcc.n	80046e2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d116      	bne.n	8004710 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2200      	movs	r2, #0
 80046e6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2220      	movs	r2, #32
 80046ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fc:	f043 0220 	orr.w	r2, r3, #32
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2200      	movs	r2, #0
 8004708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e007      	b.n	8004720 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	f003 0304 	and.w	r3, r3, #4
 800471a:	2b04      	cmp	r3, #4
 800471c:	d1ca      	bne.n	80046b4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800471e:	2300      	movs	r3, #0
}
 8004720:	4618      	mov	r0, r3
 8004722:	3710      	adds	r7, #16
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}

08004728 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b084      	sub	sp, #16
 800472c:	af00      	add	r7, sp, #0
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	60b9      	str	r1, [r7, #8]
 8004732:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004734:	e042      	b.n	80047bc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	695b      	ldr	r3, [r3, #20]
 800473c:	f003 0310 	and.w	r3, r3, #16
 8004740:	2b10      	cmp	r3, #16
 8004742:	d119      	bne.n	8004778 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f06f 0210 	mvn.w	r2, #16
 800474c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2200      	movs	r2, #0
 8004752:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2220      	movs	r2, #32
 8004758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2200      	movs	r2, #0
 8004760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2200      	movs	r2, #0
 8004770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e029      	b.n	80047cc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004778:	f7fe fcec 	bl	8003154 <HAL_GetTick>
 800477c:	4602      	mov	r2, r0
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	68ba      	ldr	r2, [r7, #8]
 8004784:	429a      	cmp	r2, r3
 8004786:	d302      	bcc.n	800478e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d116      	bne.n	80047bc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2200      	movs	r2, #0
 8004792:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2220      	movs	r2, #32
 8004798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2200      	movs	r2, #0
 80047a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a8:	f043 0220 	orr.w	r2, r3, #32
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e007      	b.n	80047cc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	695b      	ldr	r3, [r3, #20]
 80047c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c6:	2b40      	cmp	r3, #64	; 0x40
 80047c8:	d1b5      	bne.n	8004736 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80047ca:	2300      	movs	r3, #0
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3710      	adds	r7, #16
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	695b      	ldr	r3, [r3, #20]
 80047e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047ea:	d11b      	bne.n	8004824 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80047f4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2220      	movs	r2, #32
 8004800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004810:	f043 0204 	orr.w	r2, r3, #4
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	e000      	b.n	8004826 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004824:	2300      	movs	r3, #0
}
 8004826:	4618      	mov	r0, r3
 8004828:	370c      	adds	r7, #12
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr

08004832 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004832:	b480      	push	{r7}
 8004834:	b083      	sub	sp, #12
 8004836:	af00      	add	r7, sp, #0
 8004838:	6078      	str	r0, [r7, #4]
 800483a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004842:	b2db      	uxtb	r3, r3
 8004844:	2b20      	cmp	r3, #32
 8004846:	d129      	bne.n	800489c <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2224      	movs	r2, #36	; 0x24
 800484c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f022 0201 	bic.w	r2, r2, #1
 800485e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f022 0210 	bic.w	r2, r2, #16
 800486e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	683a      	ldr	r2, [r7, #0]
 800487c:	430a      	orrs	r2, r1
 800487e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f042 0201 	orr.w	r2, r2, #1
 800488e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2220      	movs	r2, #32
 8004894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004898:	2300      	movs	r3, #0
 800489a:	e000      	b.n	800489e <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800489c:	2302      	movs	r3, #2
  }
}
 800489e:	4618      	mov	r0, r3
 80048a0:	370c      	adds	r7, #12
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr

080048aa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80048aa:	b480      	push	{r7}
 80048ac:	b085      	sub	sp, #20
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
 80048b2:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80048b4:	2300      	movs	r3, #0
 80048b6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	2b20      	cmp	r3, #32
 80048c2:	d12a      	bne.n	800491a <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2224      	movs	r2, #36	; 0x24
 80048c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f022 0201 	bic.w	r2, r2, #1
 80048da:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e2:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80048e4:	89fb      	ldrh	r3, [r7, #14]
 80048e6:	f023 030f 	bic.w	r3, r3, #15
 80048ea:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	b29a      	uxth	r2, r3
 80048f0:	89fb      	ldrh	r3, [r7, #14]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	89fa      	ldrh	r2, [r7, #14]
 80048fc:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f042 0201 	orr.w	r2, r2, #1
 800490c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2220      	movs	r2, #32
 8004912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004916:	2300      	movs	r3, #0
 8004918:	e000      	b.n	800491c <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800491a:	2302      	movs	r3, #2
  }
}
 800491c:	4618      	mov	r0, r3
 800491e:	3714      	adds	r7, #20
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr

08004928 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b082      	sub	sp, #8
 800492c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800492e:	2300      	movs	r3, #0
 8004930:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004932:	2300      	movs	r3, #0
 8004934:	603b      	str	r3, [r7, #0]
 8004936:	4b20      	ldr	r3, [pc, #128]	; (80049b8 <HAL_PWREx_EnableOverDrive+0x90>)
 8004938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493a:	4a1f      	ldr	r2, [pc, #124]	; (80049b8 <HAL_PWREx_EnableOverDrive+0x90>)
 800493c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004940:	6413      	str	r3, [r2, #64]	; 0x40
 8004942:	4b1d      	ldr	r3, [pc, #116]	; (80049b8 <HAL_PWREx_EnableOverDrive+0x90>)
 8004944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800494a:	603b      	str	r3, [r7, #0]
 800494c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800494e:	4b1b      	ldr	r3, [pc, #108]	; (80049bc <HAL_PWREx_EnableOverDrive+0x94>)
 8004950:	2201      	movs	r2, #1
 8004952:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004954:	f7fe fbfe 	bl	8003154 <HAL_GetTick>
 8004958:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800495a:	e009      	b.n	8004970 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800495c:	f7fe fbfa 	bl	8003154 <HAL_GetTick>
 8004960:	4602      	mov	r2, r0
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800496a:	d901      	bls.n	8004970 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800496c:	2303      	movs	r3, #3
 800496e:	e01f      	b.n	80049b0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004970:	4b13      	ldr	r3, [pc, #76]	; (80049c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004978:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800497c:	d1ee      	bne.n	800495c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800497e:	4b11      	ldr	r3, [pc, #68]	; (80049c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004980:	2201      	movs	r2, #1
 8004982:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004984:	f7fe fbe6 	bl	8003154 <HAL_GetTick>
 8004988:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800498a:	e009      	b.n	80049a0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800498c:	f7fe fbe2 	bl	8003154 <HAL_GetTick>
 8004990:	4602      	mov	r2, r0
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800499a:	d901      	bls.n	80049a0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800499c:	2303      	movs	r3, #3
 800499e:	e007      	b.n	80049b0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80049a0:	4b07      	ldr	r3, [pc, #28]	; (80049c0 <HAL_PWREx_EnableOverDrive+0x98>)
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049ac:	d1ee      	bne.n	800498c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80049ae:	2300      	movs	r3, #0
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3708      	adds	r7, #8
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	40023800 	.word	0x40023800
 80049bc:	420e0040 	.word	0x420e0040
 80049c0:	40007000 	.word	0x40007000
 80049c4:	420e0044 	.word	0x420e0044

080049c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b086      	sub	sp, #24
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d101      	bne.n	80049da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e25e      	b.n	8004e98 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0301 	and.w	r3, r3, #1
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d075      	beq.n	8004ad2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80049e6:	4b88      	ldr	r3, [pc, #544]	; (8004c08 <HAL_RCC_OscConfig+0x240>)
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	f003 030c 	and.w	r3, r3, #12
 80049ee:	2b04      	cmp	r3, #4
 80049f0:	d00c      	beq.n	8004a0c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049f2:	4b85      	ldr	r3, [pc, #532]	; (8004c08 <HAL_RCC_OscConfig+0x240>)
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80049fa:	2b08      	cmp	r3, #8
 80049fc:	d112      	bne.n	8004a24 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049fe:	4b82      	ldr	r3, [pc, #520]	; (8004c08 <HAL_RCC_OscConfig+0x240>)
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a0a:	d10b      	bne.n	8004a24 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a0c:	4b7e      	ldr	r3, [pc, #504]	; (8004c08 <HAL_RCC_OscConfig+0x240>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d05b      	beq.n	8004ad0 <HAL_RCC_OscConfig+0x108>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d157      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e239      	b.n	8004e98 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a2c:	d106      	bne.n	8004a3c <HAL_RCC_OscConfig+0x74>
 8004a2e:	4b76      	ldr	r3, [pc, #472]	; (8004c08 <HAL_RCC_OscConfig+0x240>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a75      	ldr	r2, [pc, #468]	; (8004c08 <HAL_RCC_OscConfig+0x240>)
 8004a34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a38:	6013      	str	r3, [r2, #0]
 8004a3a:	e01d      	b.n	8004a78 <HAL_RCC_OscConfig+0xb0>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a44:	d10c      	bne.n	8004a60 <HAL_RCC_OscConfig+0x98>
 8004a46:	4b70      	ldr	r3, [pc, #448]	; (8004c08 <HAL_RCC_OscConfig+0x240>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a6f      	ldr	r2, [pc, #444]	; (8004c08 <HAL_RCC_OscConfig+0x240>)
 8004a4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a50:	6013      	str	r3, [r2, #0]
 8004a52:	4b6d      	ldr	r3, [pc, #436]	; (8004c08 <HAL_RCC_OscConfig+0x240>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a6c      	ldr	r2, [pc, #432]	; (8004c08 <HAL_RCC_OscConfig+0x240>)
 8004a58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a5c:	6013      	str	r3, [r2, #0]
 8004a5e:	e00b      	b.n	8004a78 <HAL_RCC_OscConfig+0xb0>
 8004a60:	4b69      	ldr	r3, [pc, #420]	; (8004c08 <HAL_RCC_OscConfig+0x240>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a68      	ldr	r2, [pc, #416]	; (8004c08 <HAL_RCC_OscConfig+0x240>)
 8004a66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a6a:	6013      	str	r3, [r2, #0]
 8004a6c:	4b66      	ldr	r3, [pc, #408]	; (8004c08 <HAL_RCC_OscConfig+0x240>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a65      	ldr	r2, [pc, #404]	; (8004c08 <HAL_RCC_OscConfig+0x240>)
 8004a72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d013      	beq.n	8004aa8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a80:	f7fe fb68 	bl	8003154 <HAL_GetTick>
 8004a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a86:	e008      	b.n	8004a9a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a88:	f7fe fb64 	bl	8003154 <HAL_GetTick>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	2b64      	cmp	r3, #100	; 0x64
 8004a94:	d901      	bls.n	8004a9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a96:	2303      	movs	r3, #3
 8004a98:	e1fe      	b.n	8004e98 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a9a:	4b5b      	ldr	r3, [pc, #364]	; (8004c08 <HAL_RCC_OscConfig+0x240>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d0f0      	beq.n	8004a88 <HAL_RCC_OscConfig+0xc0>
 8004aa6:	e014      	b.n	8004ad2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aa8:	f7fe fb54 	bl	8003154 <HAL_GetTick>
 8004aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004aae:	e008      	b.n	8004ac2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ab0:	f7fe fb50 	bl	8003154 <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	2b64      	cmp	r3, #100	; 0x64
 8004abc:	d901      	bls.n	8004ac2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e1ea      	b.n	8004e98 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ac2:	4b51      	ldr	r3, [pc, #324]	; (8004c08 <HAL_RCC_OscConfig+0x240>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d1f0      	bne.n	8004ab0 <HAL_RCC_OscConfig+0xe8>
 8004ace:	e000      	b.n	8004ad2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ad0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 0302 	and.w	r3, r3, #2
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d063      	beq.n	8004ba6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ade:	4b4a      	ldr	r3, [pc, #296]	; (8004c08 <HAL_RCC_OscConfig+0x240>)
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	f003 030c 	and.w	r3, r3, #12
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d00b      	beq.n	8004b02 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004aea:	4b47      	ldr	r3, [pc, #284]	; (8004c08 <HAL_RCC_OscConfig+0x240>)
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004af2:	2b08      	cmp	r3, #8
 8004af4:	d11c      	bne.n	8004b30 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004af6:	4b44      	ldr	r3, [pc, #272]	; (8004c08 <HAL_RCC_OscConfig+0x240>)
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d116      	bne.n	8004b30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b02:	4b41      	ldr	r3, [pc, #260]	; (8004c08 <HAL_RCC_OscConfig+0x240>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0302 	and.w	r3, r3, #2
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d005      	beq.n	8004b1a <HAL_RCC_OscConfig+0x152>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d001      	beq.n	8004b1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e1be      	b.n	8004e98 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b1a:	4b3b      	ldr	r3, [pc, #236]	; (8004c08 <HAL_RCC_OscConfig+0x240>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	00db      	lsls	r3, r3, #3
 8004b28:	4937      	ldr	r1, [pc, #220]	; (8004c08 <HAL_RCC_OscConfig+0x240>)
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b2e:	e03a      	b.n	8004ba6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d020      	beq.n	8004b7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b38:	4b34      	ldr	r3, [pc, #208]	; (8004c0c <HAL_RCC_OscConfig+0x244>)
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b3e:	f7fe fb09 	bl	8003154 <HAL_GetTick>
 8004b42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b44:	e008      	b.n	8004b58 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b46:	f7fe fb05 	bl	8003154 <HAL_GetTick>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d901      	bls.n	8004b58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004b54:	2303      	movs	r3, #3
 8004b56:	e19f      	b.n	8004e98 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b58:	4b2b      	ldr	r3, [pc, #172]	; (8004c08 <HAL_RCC_OscConfig+0x240>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 0302 	and.w	r3, r3, #2
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d0f0      	beq.n	8004b46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b64:	4b28      	ldr	r3, [pc, #160]	; (8004c08 <HAL_RCC_OscConfig+0x240>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	691b      	ldr	r3, [r3, #16]
 8004b70:	00db      	lsls	r3, r3, #3
 8004b72:	4925      	ldr	r1, [pc, #148]	; (8004c08 <HAL_RCC_OscConfig+0x240>)
 8004b74:	4313      	orrs	r3, r2
 8004b76:	600b      	str	r3, [r1, #0]
 8004b78:	e015      	b.n	8004ba6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b7a:	4b24      	ldr	r3, [pc, #144]	; (8004c0c <HAL_RCC_OscConfig+0x244>)
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b80:	f7fe fae8 	bl	8003154 <HAL_GetTick>
 8004b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b86:	e008      	b.n	8004b9a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b88:	f7fe fae4 	bl	8003154 <HAL_GetTick>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d901      	bls.n	8004b9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e17e      	b.n	8004e98 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b9a:	4b1b      	ldr	r3, [pc, #108]	; (8004c08 <HAL_RCC_OscConfig+0x240>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 0302 	and.w	r3, r3, #2
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d1f0      	bne.n	8004b88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0308 	and.w	r3, r3, #8
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d036      	beq.n	8004c20 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	695b      	ldr	r3, [r3, #20]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d016      	beq.n	8004be8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bba:	4b15      	ldr	r3, [pc, #84]	; (8004c10 <HAL_RCC_OscConfig+0x248>)
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bc0:	f7fe fac8 	bl	8003154 <HAL_GetTick>
 8004bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bc6:	e008      	b.n	8004bda <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004bc8:	f7fe fac4 	bl	8003154 <HAL_GetTick>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d901      	bls.n	8004bda <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	e15e      	b.n	8004e98 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bda:	4b0b      	ldr	r3, [pc, #44]	; (8004c08 <HAL_RCC_OscConfig+0x240>)
 8004bdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bde:	f003 0302 	and.w	r3, r3, #2
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d0f0      	beq.n	8004bc8 <HAL_RCC_OscConfig+0x200>
 8004be6:	e01b      	b.n	8004c20 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004be8:	4b09      	ldr	r3, [pc, #36]	; (8004c10 <HAL_RCC_OscConfig+0x248>)
 8004bea:	2200      	movs	r2, #0
 8004bec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bee:	f7fe fab1 	bl	8003154 <HAL_GetTick>
 8004bf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bf4:	e00e      	b.n	8004c14 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004bf6:	f7fe faad 	bl	8003154 <HAL_GetTick>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	d907      	bls.n	8004c14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004c04:	2303      	movs	r3, #3
 8004c06:	e147      	b.n	8004e98 <HAL_RCC_OscConfig+0x4d0>
 8004c08:	40023800 	.word	0x40023800
 8004c0c:	42470000 	.word	0x42470000
 8004c10:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c14:	4b88      	ldr	r3, [pc, #544]	; (8004e38 <HAL_RCC_OscConfig+0x470>)
 8004c16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c18:	f003 0302 	and.w	r3, r3, #2
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d1ea      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 0304 	and.w	r3, r3, #4
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	f000 8097 	beq.w	8004d5c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c32:	4b81      	ldr	r3, [pc, #516]	; (8004e38 <HAL_RCC_OscConfig+0x470>)
 8004c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d10f      	bne.n	8004c5e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c3e:	2300      	movs	r3, #0
 8004c40:	60bb      	str	r3, [r7, #8]
 8004c42:	4b7d      	ldr	r3, [pc, #500]	; (8004e38 <HAL_RCC_OscConfig+0x470>)
 8004c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c46:	4a7c      	ldr	r2, [pc, #496]	; (8004e38 <HAL_RCC_OscConfig+0x470>)
 8004c48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c4c:	6413      	str	r3, [r2, #64]	; 0x40
 8004c4e:	4b7a      	ldr	r3, [pc, #488]	; (8004e38 <HAL_RCC_OscConfig+0x470>)
 8004c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c56:	60bb      	str	r3, [r7, #8]
 8004c58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c5e:	4b77      	ldr	r3, [pc, #476]	; (8004e3c <HAL_RCC_OscConfig+0x474>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d118      	bne.n	8004c9c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c6a:	4b74      	ldr	r3, [pc, #464]	; (8004e3c <HAL_RCC_OscConfig+0x474>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a73      	ldr	r2, [pc, #460]	; (8004e3c <HAL_RCC_OscConfig+0x474>)
 8004c70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c76:	f7fe fa6d 	bl	8003154 <HAL_GetTick>
 8004c7a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c7c:	e008      	b.n	8004c90 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c7e:	f7fe fa69 	bl	8003154 <HAL_GetTick>
 8004c82:	4602      	mov	r2, r0
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d901      	bls.n	8004c90 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e103      	b.n	8004e98 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c90:	4b6a      	ldr	r3, [pc, #424]	; (8004e3c <HAL_RCC_OscConfig+0x474>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d0f0      	beq.n	8004c7e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d106      	bne.n	8004cb2 <HAL_RCC_OscConfig+0x2ea>
 8004ca4:	4b64      	ldr	r3, [pc, #400]	; (8004e38 <HAL_RCC_OscConfig+0x470>)
 8004ca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ca8:	4a63      	ldr	r2, [pc, #396]	; (8004e38 <HAL_RCC_OscConfig+0x470>)
 8004caa:	f043 0301 	orr.w	r3, r3, #1
 8004cae:	6713      	str	r3, [r2, #112]	; 0x70
 8004cb0:	e01c      	b.n	8004cec <HAL_RCC_OscConfig+0x324>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	2b05      	cmp	r3, #5
 8004cb8:	d10c      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x30c>
 8004cba:	4b5f      	ldr	r3, [pc, #380]	; (8004e38 <HAL_RCC_OscConfig+0x470>)
 8004cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cbe:	4a5e      	ldr	r2, [pc, #376]	; (8004e38 <HAL_RCC_OscConfig+0x470>)
 8004cc0:	f043 0304 	orr.w	r3, r3, #4
 8004cc4:	6713      	str	r3, [r2, #112]	; 0x70
 8004cc6:	4b5c      	ldr	r3, [pc, #368]	; (8004e38 <HAL_RCC_OscConfig+0x470>)
 8004cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cca:	4a5b      	ldr	r2, [pc, #364]	; (8004e38 <HAL_RCC_OscConfig+0x470>)
 8004ccc:	f043 0301 	orr.w	r3, r3, #1
 8004cd0:	6713      	str	r3, [r2, #112]	; 0x70
 8004cd2:	e00b      	b.n	8004cec <HAL_RCC_OscConfig+0x324>
 8004cd4:	4b58      	ldr	r3, [pc, #352]	; (8004e38 <HAL_RCC_OscConfig+0x470>)
 8004cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cd8:	4a57      	ldr	r2, [pc, #348]	; (8004e38 <HAL_RCC_OscConfig+0x470>)
 8004cda:	f023 0301 	bic.w	r3, r3, #1
 8004cde:	6713      	str	r3, [r2, #112]	; 0x70
 8004ce0:	4b55      	ldr	r3, [pc, #340]	; (8004e38 <HAL_RCC_OscConfig+0x470>)
 8004ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ce4:	4a54      	ldr	r2, [pc, #336]	; (8004e38 <HAL_RCC_OscConfig+0x470>)
 8004ce6:	f023 0304 	bic.w	r3, r3, #4
 8004cea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d015      	beq.n	8004d20 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cf4:	f7fe fa2e 	bl	8003154 <HAL_GetTick>
 8004cf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cfa:	e00a      	b.n	8004d12 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cfc:	f7fe fa2a 	bl	8003154 <HAL_GetTick>
 8004d00:	4602      	mov	r2, r0
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d901      	bls.n	8004d12 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e0c2      	b.n	8004e98 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d12:	4b49      	ldr	r3, [pc, #292]	; (8004e38 <HAL_RCC_OscConfig+0x470>)
 8004d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d16:	f003 0302 	and.w	r3, r3, #2
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d0ee      	beq.n	8004cfc <HAL_RCC_OscConfig+0x334>
 8004d1e:	e014      	b.n	8004d4a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d20:	f7fe fa18 	bl	8003154 <HAL_GetTick>
 8004d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d26:	e00a      	b.n	8004d3e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d28:	f7fe fa14 	bl	8003154 <HAL_GetTick>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d901      	bls.n	8004d3e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e0ac      	b.n	8004e98 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d3e:	4b3e      	ldr	r3, [pc, #248]	; (8004e38 <HAL_RCC_OscConfig+0x470>)
 8004d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d42:	f003 0302 	and.w	r3, r3, #2
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d1ee      	bne.n	8004d28 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d4a:	7dfb      	ldrb	r3, [r7, #23]
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d105      	bne.n	8004d5c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d50:	4b39      	ldr	r3, [pc, #228]	; (8004e38 <HAL_RCC_OscConfig+0x470>)
 8004d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d54:	4a38      	ldr	r2, [pc, #224]	; (8004e38 <HAL_RCC_OscConfig+0x470>)
 8004d56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d5a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	699b      	ldr	r3, [r3, #24]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	f000 8098 	beq.w	8004e96 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d66:	4b34      	ldr	r3, [pc, #208]	; (8004e38 <HAL_RCC_OscConfig+0x470>)
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	f003 030c 	and.w	r3, r3, #12
 8004d6e:	2b08      	cmp	r3, #8
 8004d70:	d05c      	beq.n	8004e2c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	699b      	ldr	r3, [r3, #24]
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d141      	bne.n	8004dfe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d7a:	4b31      	ldr	r3, [pc, #196]	; (8004e40 <HAL_RCC_OscConfig+0x478>)
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d80:	f7fe f9e8 	bl	8003154 <HAL_GetTick>
 8004d84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d86:	e008      	b.n	8004d9a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d88:	f7fe f9e4 	bl	8003154 <HAL_GetTick>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	1ad3      	subs	r3, r2, r3
 8004d92:	2b02      	cmp	r3, #2
 8004d94:	d901      	bls.n	8004d9a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004d96:	2303      	movs	r3, #3
 8004d98:	e07e      	b.n	8004e98 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d9a:	4b27      	ldr	r3, [pc, #156]	; (8004e38 <HAL_RCC_OscConfig+0x470>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d1f0      	bne.n	8004d88 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	69da      	ldr	r2, [r3, #28]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a1b      	ldr	r3, [r3, #32]
 8004dae:	431a      	orrs	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db4:	019b      	lsls	r3, r3, #6
 8004db6:	431a      	orrs	r2, r3
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dbc:	085b      	lsrs	r3, r3, #1
 8004dbe:	3b01      	subs	r3, #1
 8004dc0:	041b      	lsls	r3, r3, #16
 8004dc2:	431a      	orrs	r2, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc8:	061b      	lsls	r3, r3, #24
 8004dca:	491b      	ldr	r1, [pc, #108]	; (8004e38 <HAL_RCC_OscConfig+0x470>)
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004dd0:	4b1b      	ldr	r3, [pc, #108]	; (8004e40 <HAL_RCC_OscConfig+0x478>)
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dd6:	f7fe f9bd 	bl	8003154 <HAL_GetTick>
 8004dda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ddc:	e008      	b.n	8004df0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004dde:	f7fe f9b9 	bl	8003154 <HAL_GetTick>
 8004de2:	4602      	mov	r2, r0
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	d901      	bls.n	8004df0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	e053      	b.n	8004e98 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004df0:	4b11      	ldr	r3, [pc, #68]	; (8004e38 <HAL_RCC_OscConfig+0x470>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d0f0      	beq.n	8004dde <HAL_RCC_OscConfig+0x416>
 8004dfc:	e04b      	b.n	8004e96 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dfe:	4b10      	ldr	r3, [pc, #64]	; (8004e40 <HAL_RCC_OscConfig+0x478>)
 8004e00:	2200      	movs	r2, #0
 8004e02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e04:	f7fe f9a6 	bl	8003154 <HAL_GetTick>
 8004e08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e0a:	e008      	b.n	8004e1e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e0c:	f7fe f9a2 	bl	8003154 <HAL_GetTick>
 8004e10:	4602      	mov	r2, r0
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	2b02      	cmp	r3, #2
 8004e18:	d901      	bls.n	8004e1e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	e03c      	b.n	8004e98 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e1e:	4b06      	ldr	r3, [pc, #24]	; (8004e38 <HAL_RCC_OscConfig+0x470>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d1f0      	bne.n	8004e0c <HAL_RCC_OscConfig+0x444>
 8004e2a:	e034      	b.n	8004e96 <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	699b      	ldr	r3, [r3, #24]
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d107      	bne.n	8004e44 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e02f      	b.n	8004e98 <HAL_RCC_OscConfig+0x4d0>
 8004e38:	40023800 	.word	0x40023800
 8004e3c:	40007000 	.word	0x40007000
 8004e40:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e44:	4b16      	ldr	r3, [pc, #88]	; (8004ea0 <HAL_RCC_OscConfig+0x4d8>)
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	69db      	ldr	r3, [r3, #28]
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d11c      	bne.n	8004e92 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d115      	bne.n	8004e92 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004e66:	68fa      	ldr	r2, [r7, #12]
 8004e68:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d10d      	bne.n	8004e92 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d106      	bne.n	8004e92 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d001      	beq.n	8004e96 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e000      	b.n	8004e98 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 8004e96:	2300      	movs	r3, #0
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3718      	adds	r7, #24
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	40023800 	.word	0x40023800

08004ea4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d101      	bne.n	8004eb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e0cc      	b.n	8005052 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004eb8:	4b68      	ldr	r3, [pc, #416]	; (800505c <HAL_RCC_ClockConfig+0x1b8>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 030f 	and.w	r3, r3, #15
 8004ec0:	683a      	ldr	r2, [r7, #0]
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d90c      	bls.n	8004ee0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ec6:	4b65      	ldr	r3, [pc, #404]	; (800505c <HAL_RCC_ClockConfig+0x1b8>)
 8004ec8:	683a      	ldr	r2, [r7, #0]
 8004eca:	b2d2      	uxtb	r2, r2
 8004ecc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ece:	4b63      	ldr	r3, [pc, #396]	; (800505c <HAL_RCC_ClockConfig+0x1b8>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 030f 	and.w	r3, r3, #15
 8004ed6:	683a      	ldr	r2, [r7, #0]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d001      	beq.n	8004ee0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e0b8      	b.n	8005052 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0302 	and.w	r3, r3, #2
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d020      	beq.n	8004f2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0304 	and.w	r3, r3, #4
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d005      	beq.n	8004f04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ef8:	4b59      	ldr	r3, [pc, #356]	; (8005060 <HAL_RCC_ClockConfig+0x1bc>)
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	4a58      	ldr	r2, [pc, #352]	; (8005060 <HAL_RCC_ClockConfig+0x1bc>)
 8004efe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004f02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 0308 	and.w	r3, r3, #8
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d005      	beq.n	8004f1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f10:	4b53      	ldr	r3, [pc, #332]	; (8005060 <HAL_RCC_ClockConfig+0x1bc>)
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	4a52      	ldr	r2, [pc, #328]	; (8005060 <HAL_RCC_ClockConfig+0x1bc>)
 8004f16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004f1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f1c:	4b50      	ldr	r3, [pc, #320]	; (8005060 <HAL_RCC_ClockConfig+0x1bc>)
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	494d      	ldr	r1, [pc, #308]	; (8005060 <HAL_RCC_ClockConfig+0x1bc>)
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 0301 	and.w	r3, r3, #1
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d044      	beq.n	8004fc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d107      	bne.n	8004f52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f42:	4b47      	ldr	r3, [pc, #284]	; (8005060 <HAL_RCC_ClockConfig+0x1bc>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d119      	bne.n	8004f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e07f      	b.n	8005052 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d003      	beq.n	8004f62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f5e:	2b03      	cmp	r3, #3
 8004f60:	d107      	bne.n	8004f72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f62:	4b3f      	ldr	r3, [pc, #252]	; (8005060 <HAL_RCC_ClockConfig+0x1bc>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d109      	bne.n	8004f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e06f      	b.n	8005052 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f72:	4b3b      	ldr	r3, [pc, #236]	; (8005060 <HAL_RCC_ClockConfig+0x1bc>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 0302 	and.w	r3, r3, #2
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d101      	bne.n	8004f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e067      	b.n	8005052 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f82:	4b37      	ldr	r3, [pc, #220]	; (8005060 <HAL_RCC_ClockConfig+0x1bc>)
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	f023 0203 	bic.w	r2, r3, #3
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	4934      	ldr	r1, [pc, #208]	; (8005060 <HAL_RCC_ClockConfig+0x1bc>)
 8004f90:	4313      	orrs	r3, r2
 8004f92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f94:	f7fe f8de 	bl	8003154 <HAL_GetTick>
 8004f98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f9a:	e00a      	b.n	8004fb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f9c:	f7fe f8da 	bl	8003154 <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d901      	bls.n	8004fb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	e04f      	b.n	8005052 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fb2:	4b2b      	ldr	r3, [pc, #172]	; (8005060 <HAL_RCC_ClockConfig+0x1bc>)
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	f003 020c 	and.w	r2, r3, #12
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d1eb      	bne.n	8004f9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004fc4:	4b25      	ldr	r3, [pc, #148]	; (800505c <HAL_RCC_ClockConfig+0x1b8>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 030f 	and.w	r3, r3, #15
 8004fcc:	683a      	ldr	r2, [r7, #0]
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d20c      	bcs.n	8004fec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fd2:	4b22      	ldr	r3, [pc, #136]	; (800505c <HAL_RCC_ClockConfig+0x1b8>)
 8004fd4:	683a      	ldr	r2, [r7, #0]
 8004fd6:	b2d2      	uxtb	r2, r2
 8004fd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fda:	4b20      	ldr	r3, [pc, #128]	; (800505c <HAL_RCC_ClockConfig+0x1b8>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 030f 	and.w	r3, r3, #15
 8004fe2:	683a      	ldr	r2, [r7, #0]
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d001      	beq.n	8004fec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e032      	b.n	8005052 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 0304 	and.w	r3, r3, #4
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d008      	beq.n	800500a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ff8:	4b19      	ldr	r3, [pc, #100]	; (8005060 <HAL_RCC_ClockConfig+0x1bc>)
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	4916      	ldr	r1, [pc, #88]	; (8005060 <HAL_RCC_ClockConfig+0x1bc>)
 8005006:	4313      	orrs	r3, r2
 8005008:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 0308 	and.w	r3, r3, #8
 8005012:	2b00      	cmp	r3, #0
 8005014:	d009      	beq.n	800502a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005016:	4b12      	ldr	r3, [pc, #72]	; (8005060 <HAL_RCC_ClockConfig+0x1bc>)
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	00db      	lsls	r3, r3, #3
 8005024:	490e      	ldr	r1, [pc, #56]	; (8005060 <HAL_RCC_ClockConfig+0x1bc>)
 8005026:	4313      	orrs	r3, r2
 8005028:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800502a:	f000 f821 	bl	8005070 <HAL_RCC_GetSysClockFreq>
 800502e:	4602      	mov	r2, r0
 8005030:	4b0b      	ldr	r3, [pc, #44]	; (8005060 <HAL_RCC_ClockConfig+0x1bc>)
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	091b      	lsrs	r3, r3, #4
 8005036:	f003 030f 	and.w	r3, r3, #15
 800503a:	490a      	ldr	r1, [pc, #40]	; (8005064 <HAL_RCC_ClockConfig+0x1c0>)
 800503c:	5ccb      	ldrb	r3, [r1, r3]
 800503e:	fa22 f303 	lsr.w	r3, r2, r3
 8005042:	4a09      	ldr	r2, [pc, #36]	; (8005068 <HAL_RCC_ClockConfig+0x1c4>)
 8005044:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005046:	4b09      	ldr	r3, [pc, #36]	; (800506c <HAL_RCC_ClockConfig+0x1c8>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4618      	mov	r0, r3
 800504c:	f7fe f83e 	bl	80030cc <HAL_InitTick>

  return HAL_OK;
 8005050:	2300      	movs	r3, #0
}
 8005052:	4618      	mov	r0, r3
 8005054:	3710      	adds	r7, #16
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	40023c00 	.word	0x40023c00
 8005060:	40023800 	.word	0x40023800
 8005064:	080081a0 	.word	0x080081a0
 8005068:	20000008 	.word	0x20000008
 800506c:	2000000c 	.word	0x2000000c

08005070 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005070:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005074:	b094      	sub	sp, #80	; 0x50
 8005076:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005078:	2300      	movs	r3, #0
 800507a:	647b      	str	r3, [r7, #68]	; 0x44
 800507c:	2300      	movs	r3, #0
 800507e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005080:	2300      	movs	r3, #0
 8005082:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005084:	2300      	movs	r3, #0
 8005086:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005088:	4b79      	ldr	r3, [pc, #484]	; (8005270 <HAL_RCC_GetSysClockFreq+0x200>)
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	f003 030c 	and.w	r3, r3, #12
 8005090:	2b08      	cmp	r3, #8
 8005092:	d00d      	beq.n	80050b0 <HAL_RCC_GetSysClockFreq+0x40>
 8005094:	2b08      	cmp	r3, #8
 8005096:	f200 80e1 	bhi.w	800525c <HAL_RCC_GetSysClockFreq+0x1ec>
 800509a:	2b00      	cmp	r3, #0
 800509c:	d002      	beq.n	80050a4 <HAL_RCC_GetSysClockFreq+0x34>
 800509e:	2b04      	cmp	r3, #4
 80050a0:	d003      	beq.n	80050aa <HAL_RCC_GetSysClockFreq+0x3a>
 80050a2:	e0db      	b.n	800525c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80050a4:	4b73      	ldr	r3, [pc, #460]	; (8005274 <HAL_RCC_GetSysClockFreq+0x204>)
 80050a6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80050a8:	e0db      	b.n	8005262 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80050aa:	4b73      	ldr	r3, [pc, #460]	; (8005278 <HAL_RCC_GetSysClockFreq+0x208>)
 80050ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80050ae:	e0d8      	b.n	8005262 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80050b0:	4b6f      	ldr	r3, [pc, #444]	; (8005270 <HAL_RCC_GetSysClockFreq+0x200>)
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050b8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80050ba:	4b6d      	ldr	r3, [pc, #436]	; (8005270 <HAL_RCC_GetSysClockFreq+0x200>)
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d063      	beq.n	800518e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050c6:	4b6a      	ldr	r3, [pc, #424]	; (8005270 <HAL_RCC_GetSysClockFreq+0x200>)
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	099b      	lsrs	r3, r3, #6
 80050cc:	2200      	movs	r2, #0
 80050ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80050d0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80050d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050d8:	633b      	str	r3, [r7, #48]	; 0x30
 80050da:	2300      	movs	r3, #0
 80050dc:	637b      	str	r3, [r7, #52]	; 0x34
 80050de:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80050e2:	4622      	mov	r2, r4
 80050e4:	462b      	mov	r3, r5
 80050e6:	f04f 0000 	mov.w	r0, #0
 80050ea:	f04f 0100 	mov.w	r1, #0
 80050ee:	0159      	lsls	r1, r3, #5
 80050f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050f4:	0150      	lsls	r0, r2, #5
 80050f6:	4602      	mov	r2, r0
 80050f8:	460b      	mov	r3, r1
 80050fa:	4621      	mov	r1, r4
 80050fc:	1a51      	subs	r1, r2, r1
 80050fe:	6139      	str	r1, [r7, #16]
 8005100:	4629      	mov	r1, r5
 8005102:	eb63 0301 	sbc.w	r3, r3, r1
 8005106:	617b      	str	r3, [r7, #20]
 8005108:	f04f 0200 	mov.w	r2, #0
 800510c:	f04f 0300 	mov.w	r3, #0
 8005110:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005114:	4659      	mov	r1, fp
 8005116:	018b      	lsls	r3, r1, #6
 8005118:	4651      	mov	r1, sl
 800511a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800511e:	4651      	mov	r1, sl
 8005120:	018a      	lsls	r2, r1, #6
 8005122:	4651      	mov	r1, sl
 8005124:	ebb2 0801 	subs.w	r8, r2, r1
 8005128:	4659      	mov	r1, fp
 800512a:	eb63 0901 	sbc.w	r9, r3, r1
 800512e:	f04f 0200 	mov.w	r2, #0
 8005132:	f04f 0300 	mov.w	r3, #0
 8005136:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800513a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800513e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005142:	4690      	mov	r8, r2
 8005144:	4699      	mov	r9, r3
 8005146:	4623      	mov	r3, r4
 8005148:	eb18 0303 	adds.w	r3, r8, r3
 800514c:	60bb      	str	r3, [r7, #8]
 800514e:	462b      	mov	r3, r5
 8005150:	eb49 0303 	adc.w	r3, r9, r3
 8005154:	60fb      	str	r3, [r7, #12]
 8005156:	f04f 0200 	mov.w	r2, #0
 800515a:	f04f 0300 	mov.w	r3, #0
 800515e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005162:	4629      	mov	r1, r5
 8005164:	024b      	lsls	r3, r1, #9
 8005166:	4621      	mov	r1, r4
 8005168:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800516c:	4621      	mov	r1, r4
 800516e:	024a      	lsls	r2, r1, #9
 8005170:	4610      	mov	r0, r2
 8005172:	4619      	mov	r1, r3
 8005174:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005176:	2200      	movs	r2, #0
 8005178:	62bb      	str	r3, [r7, #40]	; 0x28
 800517a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800517c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005180:	f7fb fc54 	bl	8000a2c <__aeabi_uldivmod>
 8005184:	4602      	mov	r2, r0
 8005186:	460b      	mov	r3, r1
 8005188:	4613      	mov	r3, r2
 800518a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800518c:	e058      	b.n	8005240 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800518e:	4b38      	ldr	r3, [pc, #224]	; (8005270 <HAL_RCC_GetSysClockFreq+0x200>)
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	099b      	lsrs	r3, r3, #6
 8005194:	2200      	movs	r2, #0
 8005196:	4618      	mov	r0, r3
 8005198:	4611      	mov	r1, r2
 800519a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800519e:	623b      	str	r3, [r7, #32]
 80051a0:	2300      	movs	r3, #0
 80051a2:	627b      	str	r3, [r7, #36]	; 0x24
 80051a4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80051a8:	4642      	mov	r2, r8
 80051aa:	464b      	mov	r3, r9
 80051ac:	f04f 0000 	mov.w	r0, #0
 80051b0:	f04f 0100 	mov.w	r1, #0
 80051b4:	0159      	lsls	r1, r3, #5
 80051b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80051ba:	0150      	lsls	r0, r2, #5
 80051bc:	4602      	mov	r2, r0
 80051be:	460b      	mov	r3, r1
 80051c0:	4641      	mov	r1, r8
 80051c2:	ebb2 0a01 	subs.w	sl, r2, r1
 80051c6:	4649      	mov	r1, r9
 80051c8:	eb63 0b01 	sbc.w	fp, r3, r1
 80051cc:	f04f 0200 	mov.w	r2, #0
 80051d0:	f04f 0300 	mov.w	r3, #0
 80051d4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80051d8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80051dc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80051e0:	ebb2 040a 	subs.w	r4, r2, sl
 80051e4:	eb63 050b 	sbc.w	r5, r3, fp
 80051e8:	f04f 0200 	mov.w	r2, #0
 80051ec:	f04f 0300 	mov.w	r3, #0
 80051f0:	00eb      	lsls	r3, r5, #3
 80051f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051f6:	00e2      	lsls	r2, r4, #3
 80051f8:	4614      	mov	r4, r2
 80051fa:	461d      	mov	r5, r3
 80051fc:	4643      	mov	r3, r8
 80051fe:	18e3      	adds	r3, r4, r3
 8005200:	603b      	str	r3, [r7, #0]
 8005202:	464b      	mov	r3, r9
 8005204:	eb45 0303 	adc.w	r3, r5, r3
 8005208:	607b      	str	r3, [r7, #4]
 800520a:	f04f 0200 	mov.w	r2, #0
 800520e:	f04f 0300 	mov.w	r3, #0
 8005212:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005216:	4629      	mov	r1, r5
 8005218:	028b      	lsls	r3, r1, #10
 800521a:	4621      	mov	r1, r4
 800521c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005220:	4621      	mov	r1, r4
 8005222:	028a      	lsls	r2, r1, #10
 8005224:	4610      	mov	r0, r2
 8005226:	4619      	mov	r1, r3
 8005228:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800522a:	2200      	movs	r2, #0
 800522c:	61bb      	str	r3, [r7, #24]
 800522e:	61fa      	str	r2, [r7, #28]
 8005230:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005234:	f7fb fbfa 	bl	8000a2c <__aeabi_uldivmod>
 8005238:	4602      	mov	r2, r0
 800523a:	460b      	mov	r3, r1
 800523c:	4613      	mov	r3, r2
 800523e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005240:	4b0b      	ldr	r3, [pc, #44]	; (8005270 <HAL_RCC_GetSysClockFreq+0x200>)
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	0c1b      	lsrs	r3, r3, #16
 8005246:	f003 0303 	and.w	r3, r3, #3
 800524a:	3301      	adds	r3, #1
 800524c:	005b      	lsls	r3, r3, #1
 800524e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005250:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005252:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005254:	fbb2 f3f3 	udiv	r3, r2, r3
 8005258:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800525a:	e002      	b.n	8005262 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800525c:	4b05      	ldr	r3, [pc, #20]	; (8005274 <HAL_RCC_GetSysClockFreq+0x204>)
 800525e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005260:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005262:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005264:	4618      	mov	r0, r3
 8005266:	3750      	adds	r7, #80	; 0x50
 8005268:	46bd      	mov	sp, r7
 800526a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800526e:	bf00      	nop
 8005270:	40023800 	.word	0x40023800
 8005274:	00f42400 	.word	0x00f42400
 8005278:	007a1200 	.word	0x007a1200

0800527c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800527c:	b480      	push	{r7}
 800527e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005280:	4b03      	ldr	r3, [pc, #12]	; (8005290 <HAL_RCC_GetHCLKFreq+0x14>)
 8005282:	681b      	ldr	r3, [r3, #0]
}
 8005284:	4618      	mov	r0, r3
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr
 800528e:	bf00      	nop
 8005290:	20000008 	.word	0x20000008

08005294 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005298:	f7ff fff0 	bl	800527c <HAL_RCC_GetHCLKFreq>
 800529c:	4602      	mov	r2, r0
 800529e:	4b05      	ldr	r3, [pc, #20]	; (80052b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	0a9b      	lsrs	r3, r3, #10
 80052a4:	f003 0307 	and.w	r3, r3, #7
 80052a8:	4903      	ldr	r1, [pc, #12]	; (80052b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052aa:	5ccb      	ldrb	r3, [r1, r3]
 80052ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	bd80      	pop	{r7, pc}
 80052b4:	40023800 	.word	0x40023800
 80052b8:	080081b0 	.word	0x080081b0

080052bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80052c0:	f7ff ffdc 	bl	800527c <HAL_RCC_GetHCLKFreq>
 80052c4:	4602      	mov	r2, r0
 80052c6:	4b05      	ldr	r3, [pc, #20]	; (80052dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	0b5b      	lsrs	r3, r3, #13
 80052cc:	f003 0307 	and.w	r3, r3, #7
 80052d0:	4903      	ldr	r1, [pc, #12]	; (80052e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80052d2:	5ccb      	ldrb	r3, [r1, r3]
 80052d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052d8:	4618      	mov	r0, r3
 80052da:	bd80      	pop	{r7, pc}
 80052dc:	40023800 	.word	0x40023800
 80052e0:	080081b0 	.word	0x080081b0

080052e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b082      	sub	sp, #8
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d101      	bne.n	80052f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e01d      	b.n	8005332 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d106      	bne.n	8005310 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f7fd fcc4 	bl	8002c98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2202      	movs	r2, #2
 8005314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	3304      	adds	r3, #4
 8005320:	4619      	mov	r1, r3
 8005322:	4610      	mov	r0, r2
 8005324:	f000 fcae 	bl	8005c84 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005330:	2300      	movs	r3, #0
}
 8005332:	4618      	mov	r0, r3
 8005334:	3708      	adds	r7, #8
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}

0800533a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800533a:	b480      	push	{r7}
 800533c:	b085      	sub	sp, #20
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2202      	movs	r2, #2
 8005346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	f003 0307 	and.w	r3, r3, #7
 8005354:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2b06      	cmp	r3, #6
 800535a:	d007      	beq.n	800536c <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f042 0201 	orr.w	r2, r2, #1
 800536a:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005374:	2300      	movs	r3, #0
}
 8005376:	4618      	mov	r0, r3
 8005378:	3714      	adds	r7, #20
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr

08005382 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005382:	b480      	push	{r7}
 8005384:	b085      	sub	sp, #20
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	68da      	ldr	r2, [r3, #12]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f042 0201 	orr.w	r2, r2, #1
 8005398:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	f003 0307 	and.w	r3, r3, #7
 80053a4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2b06      	cmp	r3, #6
 80053aa:	d007      	beq.n	80053bc <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f042 0201 	orr.w	r2, r2, #1
 80053ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053bc:	2300      	movs	r3, #0
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3714      	adds	r7, #20
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr

080053ca <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80053ca:	b580      	push	{r7, lr}
 80053cc:	b082      	sub	sp, #8
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d101      	bne.n	80053dc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	e01d      	b.n	8005418 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d106      	bne.n	80053f6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f000 f815 	bl	8005420 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2202      	movs	r2, #2
 80053fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	3304      	adds	r3, #4
 8005406:	4619      	mov	r1, r3
 8005408:	4610      	mov	r0, r2
 800540a:	f000 fc3b 	bl	8005c84 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2201      	movs	r2, #1
 8005412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005416:	2300      	movs	r3, #0
}
 8005418:	4618      	mov	r0, r3
 800541a:	3708      	adds	r7, #8
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}

08005420 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005420:	b480      	push	{r7}
 8005422:	b083      	sub	sp, #12
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005428:	bf00      	nop
 800542a:	370c      	adds	r7, #12
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr

08005434 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	2201      	movs	r2, #1
 8005444:	6839      	ldr	r1, [r7, #0]
 8005446:	4618      	mov	r0, r3
 8005448:	f001 f830 	bl	80064ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a15      	ldr	r2, [pc, #84]	; (80054a8 <HAL_TIM_PWM_Start+0x74>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d004      	beq.n	8005460 <HAL_TIM_PWM_Start+0x2c>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a14      	ldr	r2, [pc, #80]	; (80054ac <HAL_TIM_PWM_Start+0x78>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d101      	bne.n	8005464 <HAL_TIM_PWM_Start+0x30>
 8005460:	2301      	movs	r3, #1
 8005462:	e000      	b.n	8005466 <HAL_TIM_PWM_Start+0x32>
 8005464:	2300      	movs	r3, #0
 8005466:	2b00      	cmp	r3, #0
 8005468:	d007      	beq.n	800547a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005478:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	f003 0307 	and.w	r3, r3, #7
 8005484:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2b06      	cmp	r3, #6
 800548a:	d007      	beq.n	800549c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f042 0201 	orr.w	r2, r2, #1
 800549a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800549c:	2300      	movs	r3, #0
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3710      	adds	r7, #16
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop
 80054a8:	40010000 	.word	0x40010000
 80054ac:	40010400 	.word	0x40010400

080054b0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b082      	sub	sp, #8
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d101      	bne.n	80054c2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e01d      	b.n	80054fe <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d106      	bne.n	80054dc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f000 f815 	bl	8005506 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2202      	movs	r2, #2
 80054e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	3304      	adds	r3, #4
 80054ec:	4619      	mov	r1, r3
 80054ee:	4610      	mov	r0, r2
 80054f0:	f000 fbc8 	bl	8005c84 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054fc:	2300      	movs	r3, #0
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3708      	adds	r7, #8
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}

08005506 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005506:	b480      	push	{r7}
 8005508:	b083      	sub	sp, #12
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800550e:	bf00      	nop
 8005510:	370c      	adds	r7, #12
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr
	...

0800551c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b084      	sub	sp, #16
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	2b0c      	cmp	r3, #12
 800552a:	d841      	bhi.n	80055b0 <HAL_TIM_IC_Start_IT+0x94>
 800552c:	a201      	add	r2, pc, #4	; (adr r2, 8005534 <HAL_TIM_IC_Start_IT+0x18>)
 800552e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005532:	bf00      	nop
 8005534:	08005569 	.word	0x08005569
 8005538:	080055b1 	.word	0x080055b1
 800553c:	080055b1 	.word	0x080055b1
 8005540:	080055b1 	.word	0x080055b1
 8005544:	0800557b 	.word	0x0800557b
 8005548:	080055b1 	.word	0x080055b1
 800554c:	080055b1 	.word	0x080055b1
 8005550:	080055b1 	.word	0x080055b1
 8005554:	0800558d 	.word	0x0800558d
 8005558:	080055b1 	.word	0x080055b1
 800555c:	080055b1 	.word	0x080055b1
 8005560:	080055b1 	.word	0x080055b1
 8005564:	0800559f 	.word	0x0800559f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	68da      	ldr	r2, [r3, #12]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f042 0202 	orr.w	r2, r2, #2
 8005576:	60da      	str	r2, [r3, #12]
      break;
 8005578:	e01b      	b.n	80055b2 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	68da      	ldr	r2, [r3, #12]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f042 0204 	orr.w	r2, r2, #4
 8005588:	60da      	str	r2, [r3, #12]
      break;
 800558a:	e012      	b.n	80055b2 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	68da      	ldr	r2, [r3, #12]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f042 0208 	orr.w	r2, r2, #8
 800559a:	60da      	str	r2, [r3, #12]
      break;
 800559c:	e009      	b.n	80055b2 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	68da      	ldr	r2, [r3, #12]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f042 0210 	orr.w	r2, r2, #16
 80055ac:	60da      	str	r2, [r3, #12]
      break;
 80055ae:	e000      	b.n	80055b2 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 80055b0:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	2201      	movs	r2, #1
 80055b8:	6839      	ldr	r1, [r7, #0]
 80055ba:	4618      	mov	r0, r3
 80055bc:	f000 ff76 	bl	80064ac <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	f003 0307 	and.w	r3, r3, #7
 80055ca:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2b06      	cmp	r3, #6
 80055d0:	d007      	beq.n	80055e2 <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f042 0201 	orr.w	r2, r2, #1
 80055e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055e2:	2300      	movs	r3, #0
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3710      	adds	r7, #16
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}

080055ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b082      	sub	sp, #8
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	691b      	ldr	r3, [r3, #16]
 80055fa:	f003 0302 	and.w	r3, r3, #2
 80055fe:	2b02      	cmp	r3, #2
 8005600:	d122      	bne.n	8005648 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	f003 0302 	and.w	r3, r3, #2
 800560c:	2b02      	cmp	r3, #2
 800560e:	d11b      	bne.n	8005648 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f06f 0202 	mvn.w	r2, #2
 8005618:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2201      	movs	r2, #1
 800561e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	699b      	ldr	r3, [r3, #24]
 8005626:	f003 0303 	and.w	r3, r3, #3
 800562a:	2b00      	cmp	r3, #0
 800562c:	d003      	beq.n	8005636 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f7fc f9e0 	bl	80019f4 <HAL_TIM_IC_CaptureCallback>
 8005634:	e005      	b.n	8005642 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f000 fb06 	bl	8005c48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f000 fb0d 	bl	8005c5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	691b      	ldr	r3, [r3, #16]
 800564e:	f003 0304 	and.w	r3, r3, #4
 8005652:	2b04      	cmp	r3, #4
 8005654:	d122      	bne.n	800569c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	68db      	ldr	r3, [r3, #12]
 800565c:	f003 0304 	and.w	r3, r3, #4
 8005660:	2b04      	cmp	r3, #4
 8005662:	d11b      	bne.n	800569c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f06f 0204 	mvn.w	r2, #4
 800566c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2202      	movs	r2, #2
 8005672:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	699b      	ldr	r3, [r3, #24]
 800567a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800567e:	2b00      	cmp	r3, #0
 8005680:	d003      	beq.n	800568a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f7fc f9b6 	bl	80019f4 <HAL_TIM_IC_CaptureCallback>
 8005688:	e005      	b.n	8005696 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f000 fadc 	bl	8005c48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f000 fae3 	bl	8005c5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	f003 0308 	and.w	r3, r3, #8
 80056a6:	2b08      	cmp	r3, #8
 80056a8:	d122      	bne.n	80056f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	f003 0308 	and.w	r3, r3, #8
 80056b4:	2b08      	cmp	r3, #8
 80056b6:	d11b      	bne.n	80056f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f06f 0208 	mvn.w	r2, #8
 80056c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2204      	movs	r2, #4
 80056c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	69db      	ldr	r3, [r3, #28]
 80056ce:	f003 0303 	and.w	r3, r3, #3
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d003      	beq.n	80056de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f7fc f98c 	bl	80019f4 <HAL_TIM_IC_CaptureCallback>
 80056dc:	e005      	b.n	80056ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f000 fab2 	bl	8005c48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f000 fab9 	bl	8005c5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2200      	movs	r2, #0
 80056ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	691b      	ldr	r3, [r3, #16]
 80056f6:	f003 0310 	and.w	r3, r3, #16
 80056fa:	2b10      	cmp	r3, #16
 80056fc:	d122      	bne.n	8005744 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	f003 0310 	and.w	r3, r3, #16
 8005708:	2b10      	cmp	r3, #16
 800570a:	d11b      	bne.n	8005744 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f06f 0210 	mvn.w	r2, #16
 8005714:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2208      	movs	r2, #8
 800571a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	69db      	ldr	r3, [r3, #28]
 8005722:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005726:	2b00      	cmp	r3, #0
 8005728:	d003      	beq.n	8005732 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f7fc f962 	bl	80019f4 <HAL_TIM_IC_CaptureCallback>
 8005730:	e005      	b.n	800573e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f000 fa88 	bl	8005c48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f000 fa8f 	bl	8005c5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	f003 0301 	and.w	r3, r3, #1
 800574e:	2b01      	cmp	r3, #1
 8005750:	d10e      	bne.n	8005770 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	f003 0301 	and.w	r3, r3, #1
 800575c:	2b01      	cmp	r3, #1
 800575e:	d107      	bne.n	8005770 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f06f 0201 	mvn.w	r2, #1
 8005768:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f7fc f928 	bl	80019c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	691b      	ldr	r3, [r3, #16]
 8005776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800577a:	2b80      	cmp	r3, #128	; 0x80
 800577c:	d10e      	bne.n	800579c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005788:	2b80      	cmp	r3, #128	; 0x80
 800578a:	d107      	bne.n	800579c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005794:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f000 ff34 	bl	8006604 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057a6:	2b40      	cmp	r3, #64	; 0x40
 80057a8:	d10e      	bne.n	80057c8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057b4:	2b40      	cmp	r3, #64	; 0x40
 80057b6:	d107      	bne.n	80057c8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80057c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f000 fa54 	bl	8005c70 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	f003 0320 	and.w	r3, r3, #32
 80057d2:	2b20      	cmp	r3, #32
 80057d4:	d10e      	bne.n	80057f4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	f003 0320 	and.w	r3, r3, #32
 80057e0:	2b20      	cmp	r3, #32
 80057e2:	d107      	bne.n	80057f4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f06f 0220 	mvn.w	r2, #32
 80057ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 fefe 	bl	80065f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057f4:	bf00      	nop
 80057f6:	3708      	adds	r7, #8
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}

080057fc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	60f8      	str	r0, [r7, #12]
 8005804:	60b9      	str	r1, [r7, #8]
 8005806:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800580e:	2b01      	cmp	r3, #1
 8005810:	d101      	bne.n	8005816 <HAL_TIM_IC_ConfigChannel+0x1a>
 8005812:	2302      	movs	r3, #2
 8005814:	e08a      	b.n	800592c <HAL_TIM_IC_ConfigChannel+0x130>
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2201      	movs	r2, #1
 800581a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2202      	movs	r2, #2
 8005822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d11b      	bne.n	8005864 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	6818      	ldr	r0, [r3, #0]
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	6819      	ldr	r1, [r3, #0]
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	685a      	ldr	r2, [r3, #4]
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	f000 fc72 	bl	8006124 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	699a      	ldr	r2, [r3, #24]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f022 020c 	bic.w	r2, r2, #12
 800584e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	6999      	ldr	r1, [r3, #24]
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	689a      	ldr	r2, [r3, #8]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	430a      	orrs	r2, r1
 8005860:	619a      	str	r2, [r3, #24]
 8005862:	e05a      	b.n	800591a <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2b04      	cmp	r3, #4
 8005868:	d11c      	bne.n	80058a4 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	6818      	ldr	r0, [r3, #0]
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	6819      	ldr	r1, [r3, #0]
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	685a      	ldr	r2, [r3, #4]
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	68db      	ldr	r3, [r3, #12]
 800587a:	f000 fcf6 	bl	800626a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	699a      	ldr	r2, [r3, #24]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800588c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	6999      	ldr	r1, [r3, #24]
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	021a      	lsls	r2, r3, #8
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	430a      	orrs	r2, r1
 80058a0:	619a      	str	r2, [r3, #24]
 80058a2:	e03a      	b.n	800591a <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2b08      	cmp	r3, #8
 80058a8:	d11b      	bne.n	80058e2 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	6818      	ldr	r0, [r3, #0]
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	6819      	ldr	r1, [r3, #0]
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	685a      	ldr	r2, [r3, #4]
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	68db      	ldr	r3, [r3, #12]
 80058ba:	f000 fd43 	bl	8006344 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	69da      	ldr	r2, [r3, #28]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f022 020c 	bic.w	r2, r2, #12
 80058cc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	69d9      	ldr	r1, [r3, #28]
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	689a      	ldr	r2, [r3, #8]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	430a      	orrs	r2, r1
 80058de:	61da      	str	r2, [r3, #28]
 80058e0:	e01b      	b.n	800591a <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	6818      	ldr	r0, [r3, #0]
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	6819      	ldr	r1, [r3, #0]
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	685a      	ldr	r2, [r3, #4]
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	f000 fd63 	bl	80063bc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	69da      	ldr	r2, [r3, #28]
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005904:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	69d9      	ldr	r1, [r3, #28]
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	021a      	lsls	r2, r3, #8
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	430a      	orrs	r2, r1
 8005918:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2201      	movs	r2, #1
 800591e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2200      	movs	r2, #0
 8005926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800592a:	2300      	movs	r3, #0
}
 800592c:	4618      	mov	r0, r3
 800592e:	3710      	adds	r7, #16
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}

08005934 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b084      	sub	sp, #16
 8005938:	af00      	add	r7, sp, #0
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	60b9      	str	r1, [r7, #8]
 800593e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005946:	2b01      	cmp	r3, #1
 8005948:	d101      	bne.n	800594e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800594a:	2302      	movs	r3, #2
 800594c:	e0b4      	b.n	8005ab8 <HAL_TIM_PWM_ConfigChannel+0x184>
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2201      	movs	r2, #1
 8005952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2202      	movs	r2, #2
 800595a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2b0c      	cmp	r3, #12
 8005962:	f200 809f 	bhi.w	8005aa4 <HAL_TIM_PWM_ConfigChannel+0x170>
 8005966:	a201      	add	r2, pc, #4	; (adr r2, 800596c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800596c:	080059a1 	.word	0x080059a1
 8005970:	08005aa5 	.word	0x08005aa5
 8005974:	08005aa5 	.word	0x08005aa5
 8005978:	08005aa5 	.word	0x08005aa5
 800597c:	080059e1 	.word	0x080059e1
 8005980:	08005aa5 	.word	0x08005aa5
 8005984:	08005aa5 	.word	0x08005aa5
 8005988:	08005aa5 	.word	0x08005aa5
 800598c:	08005a23 	.word	0x08005a23
 8005990:	08005aa5 	.word	0x08005aa5
 8005994:	08005aa5 	.word	0x08005aa5
 8005998:	08005aa5 	.word	0x08005aa5
 800599c:	08005a63 	.word	0x08005a63
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	68b9      	ldr	r1, [r7, #8]
 80059a6:	4618      	mov	r0, r3
 80059a8:	f000 fa0c 	bl	8005dc4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	699a      	ldr	r2, [r3, #24]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f042 0208 	orr.w	r2, r2, #8
 80059ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	699a      	ldr	r2, [r3, #24]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f022 0204 	bic.w	r2, r2, #4
 80059ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	6999      	ldr	r1, [r3, #24]
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	691a      	ldr	r2, [r3, #16]
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	430a      	orrs	r2, r1
 80059dc:	619a      	str	r2, [r3, #24]
      break;
 80059de:	e062      	b.n	8005aa6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	68b9      	ldr	r1, [r7, #8]
 80059e6:	4618      	mov	r0, r3
 80059e8:	f000 fa5c 	bl	8005ea4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	699a      	ldr	r2, [r3, #24]
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	699a      	ldr	r2, [r3, #24]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	6999      	ldr	r1, [r3, #24]
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	021a      	lsls	r2, r3, #8
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	430a      	orrs	r2, r1
 8005a1e:	619a      	str	r2, [r3, #24]
      break;
 8005a20:	e041      	b.n	8005aa6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	68b9      	ldr	r1, [r7, #8]
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f000 fab1 	bl	8005f90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	69da      	ldr	r2, [r3, #28]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f042 0208 	orr.w	r2, r2, #8
 8005a3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	69da      	ldr	r2, [r3, #28]
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f022 0204 	bic.w	r2, r2, #4
 8005a4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	69d9      	ldr	r1, [r3, #28]
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	691a      	ldr	r2, [r3, #16]
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	430a      	orrs	r2, r1
 8005a5e:	61da      	str	r2, [r3, #28]
      break;
 8005a60:	e021      	b.n	8005aa6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	68b9      	ldr	r1, [r7, #8]
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f000 fb05 	bl	8006078 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	69da      	ldr	r2, [r3, #28]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	69da      	ldr	r2, [r3, #28]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	69d9      	ldr	r1, [r3, #28]
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	691b      	ldr	r3, [r3, #16]
 8005a98:	021a      	lsls	r2, r3, #8
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	430a      	orrs	r2, r1
 8005aa0:	61da      	str	r2, [r3, #28]
      break;
 8005aa2:	e000      	b.n	8005aa6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005aa4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ab6:	2300      	movs	r3, #0
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3710      	adds	r7, #16
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}

08005ac0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b084      	sub	sp, #16
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d101      	bne.n	8005ad8 <HAL_TIM_ConfigClockSource+0x18>
 8005ad4:	2302      	movs	r3, #2
 8005ad6:	e0b3      	b.n	8005c40 <HAL_TIM_ConfigClockSource+0x180>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2201      	movs	r2, #1
 8005adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2202      	movs	r2, #2
 8005ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005af6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005afe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	68fa      	ldr	r2, [r7, #12]
 8005b06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b10:	d03e      	beq.n	8005b90 <HAL_TIM_ConfigClockSource+0xd0>
 8005b12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b16:	f200 8087 	bhi.w	8005c28 <HAL_TIM_ConfigClockSource+0x168>
 8005b1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b1e:	f000 8085 	beq.w	8005c2c <HAL_TIM_ConfigClockSource+0x16c>
 8005b22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b26:	d87f      	bhi.n	8005c28 <HAL_TIM_ConfigClockSource+0x168>
 8005b28:	2b70      	cmp	r3, #112	; 0x70
 8005b2a:	d01a      	beq.n	8005b62 <HAL_TIM_ConfigClockSource+0xa2>
 8005b2c:	2b70      	cmp	r3, #112	; 0x70
 8005b2e:	d87b      	bhi.n	8005c28 <HAL_TIM_ConfigClockSource+0x168>
 8005b30:	2b60      	cmp	r3, #96	; 0x60
 8005b32:	d050      	beq.n	8005bd6 <HAL_TIM_ConfigClockSource+0x116>
 8005b34:	2b60      	cmp	r3, #96	; 0x60
 8005b36:	d877      	bhi.n	8005c28 <HAL_TIM_ConfigClockSource+0x168>
 8005b38:	2b50      	cmp	r3, #80	; 0x50
 8005b3a:	d03c      	beq.n	8005bb6 <HAL_TIM_ConfigClockSource+0xf6>
 8005b3c:	2b50      	cmp	r3, #80	; 0x50
 8005b3e:	d873      	bhi.n	8005c28 <HAL_TIM_ConfigClockSource+0x168>
 8005b40:	2b40      	cmp	r3, #64	; 0x40
 8005b42:	d058      	beq.n	8005bf6 <HAL_TIM_ConfigClockSource+0x136>
 8005b44:	2b40      	cmp	r3, #64	; 0x40
 8005b46:	d86f      	bhi.n	8005c28 <HAL_TIM_ConfigClockSource+0x168>
 8005b48:	2b30      	cmp	r3, #48	; 0x30
 8005b4a:	d064      	beq.n	8005c16 <HAL_TIM_ConfigClockSource+0x156>
 8005b4c:	2b30      	cmp	r3, #48	; 0x30
 8005b4e:	d86b      	bhi.n	8005c28 <HAL_TIM_ConfigClockSource+0x168>
 8005b50:	2b20      	cmp	r3, #32
 8005b52:	d060      	beq.n	8005c16 <HAL_TIM_ConfigClockSource+0x156>
 8005b54:	2b20      	cmp	r3, #32
 8005b56:	d867      	bhi.n	8005c28 <HAL_TIM_ConfigClockSource+0x168>
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d05c      	beq.n	8005c16 <HAL_TIM_ConfigClockSource+0x156>
 8005b5c:	2b10      	cmp	r3, #16
 8005b5e:	d05a      	beq.n	8005c16 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005b60:	e062      	b.n	8005c28 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6818      	ldr	r0, [r3, #0]
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	6899      	ldr	r1, [r3, #8]
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	685a      	ldr	r2, [r3, #4]
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	f000 fc7b 	bl	800646c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005b84:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	68fa      	ldr	r2, [r7, #12]
 8005b8c:	609a      	str	r2, [r3, #8]
      break;
 8005b8e:	e04e      	b.n	8005c2e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6818      	ldr	r0, [r3, #0]
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	6899      	ldr	r1, [r3, #8]
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	685a      	ldr	r2, [r3, #4]
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	f000 fc64 	bl	800646c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	689a      	ldr	r2, [r3, #8]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005bb2:	609a      	str	r2, [r3, #8]
      break;
 8005bb4:	e03b      	b.n	8005c2e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6818      	ldr	r0, [r3, #0]
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	6859      	ldr	r1, [r3, #4]
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	f000 fb22 	bl	800620c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2150      	movs	r1, #80	; 0x50
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f000 fc31 	bl	8006436 <TIM_ITRx_SetConfig>
      break;
 8005bd4:	e02b      	b.n	8005c2e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6818      	ldr	r0, [r3, #0]
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	6859      	ldr	r1, [r3, #4]
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	68db      	ldr	r3, [r3, #12]
 8005be2:	461a      	mov	r2, r3
 8005be4:	f000 fb7e 	bl	80062e4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	2160      	movs	r1, #96	; 0x60
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f000 fc21 	bl	8006436 <TIM_ITRx_SetConfig>
      break;
 8005bf4:	e01b      	b.n	8005c2e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6818      	ldr	r0, [r3, #0]
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	6859      	ldr	r1, [r3, #4]
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	68db      	ldr	r3, [r3, #12]
 8005c02:	461a      	mov	r2, r3
 8005c04:	f000 fb02 	bl	800620c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	2140      	movs	r1, #64	; 0x40
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f000 fc11 	bl	8006436 <TIM_ITRx_SetConfig>
      break;
 8005c14:	e00b      	b.n	8005c2e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4619      	mov	r1, r3
 8005c20:	4610      	mov	r0, r2
 8005c22:	f000 fc08 	bl	8006436 <TIM_ITRx_SetConfig>
      break;
 8005c26:	e002      	b.n	8005c2e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005c28:	bf00      	nop
 8005c2a:	e000      	b.n	8005c2e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005c2c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2201      	movs	r2, #1
 8005c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c3e:	2300      	movs	r3, #0
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3710      	adds	r7, #16
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c50:	bf00      	nop
 8005c52:	370c      	adds	r7, #12
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr

08005c5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b083      	sub	sp, #12
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c64:	bf00      	nop
 8005c66:	370c      	adds	r7, #12
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr

08005c70 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b083      	sub	sp, #12
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c78:	bf00      	nop
 8005c7a:	370c      	adds	r7, #12
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr

08005c84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b085      	sub	sp, #20
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	4a40      	ldr	r2, [pc, #256]	; (8005d98 <TIM_Base_SetConfig+0x114>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d013      	beq.n	8005cc4 <TIM_Base_SetConfig+0x40>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ca2:	d00f      	beq.n	8005cc4 <TIM_Base_SetConfig+0x40>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	4a3d      	ldr	r2, [pc, #244]	; (8005d9c <TIM_Base_SetConfig+0x118>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d00b      	beq.n	8005cc4 <TIM_Base_SetConfig+0x40>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	4a3c      	ldr	r2, [pc, #240]	; (8005da0 <TIM_Base_SetConfig+0x11c>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d007      	beq.n	8005cc4 <TIM_Base_SetConfig+0x40>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	4a3b      	ldr	r2, [pc, #236]	; (8005da4 <TIM_Base_SetConfig+0x120>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d003      	beq.n	8005cc4 <TIM_Base_SetConfig+0x40>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4a3a      	ldr	r2, [pc, #232]	; (8005da8 <TIM_Base_SetConfig+0x124>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d108      	bne.n	8005cd6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	68fa      	ldr	r2, [r7, #12]
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4a2f      	ldr	r2, [pc, #188]	; (8005d98 <TIM_Base_SetConfig+0x114>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d02b      	beq.n	8005d36 <TIM_Base_SetConfig+0xb2>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ce4:	d027      	beq.n	8005d36 <TIM_Base_SetConfig+0xb2>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4a2c      	ldr	r2, [pc, #176]	; (8005d9c <TIM_Base_SetConfig+0x118>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d023      	beq.n	8005d36 <TIM_Base_SetConfig+0xb2>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a2b      	ldr	r2, [pc, #172]	; (8005da0 <TIM_Base_SetConfig+0x11c>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d01f      	beq.n	8005d36 <TIM_Base_SetConfig+0xb2>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a2a      	ldr	r2, [pc, #168]	; (8005da4 <TIM_Base_SetConfig+0x120>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d01b      	beq.n	8005d36 <TIM_Base_SetConfig+0xb2>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4a29      	ldr	r2, [pc, #164]	; (8005da8 <TIM_Base_SetConfig+0x124>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d017      	beq.n	8005d36 <TIM_Base_SetConfig+0xb2>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4a28      	ldr	r2, [pc, #160]	; (8005dac <TIM_Base_SetConfig+0x128>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d013      	beq.n	8005d36 <TIM_Base_SetConfig+0xb2>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4a27      	ldr	r2, [pc, #156]	; (8005db0 <TIM_Base_SetConfig+0x12c>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d00f      	beq.n	8005d36 <TIM_Base_SetConfig+0xb2>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	4a26      	ldr	r2, [pc, #152]	; (8005db4 <TIM_Base_SetConfig+0x130>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d00b      	beq.n	8005d36 <TIM_Base_SetConfig+0xb2>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4a25      	ldr	r2, [pc, #148]	; (8005db8 <TIM_Base_SetConfig+0x134>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d007      	beq.n	8005d36 <TIM_Base_SetConfig+0xb2>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4a24      	ldr	r2, [pc, #144]	; (8005dbc <TIM_Base_SetConfig+0x138>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d003      	beq.n	8005d36 <TIM_Base_SetConfig+0xb2>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4a23      	ldr	r2, [pc, #140]	; (8005dc0 <TIM_Base_SetConfig+0x13c>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d108      	bne.n	8005d48 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	68db      	ldr	r3, [r3, #12]
 8005d42:	68fa      	ldr	r2, [r7, #12]
 8005d44:	4313      	orrs	r3, r2
 8005d46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	695b      	ldr	r3, [r3, #20]
 8005d52:	4313      	orrs	r3, r2
 8005d54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	68fa      	ldr	r2, [r7, #12]
 8005d5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	689a      	ldr	r2, [r3, #8]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	4a0a      	ldr	r2, [pc, #40]	; (8005d98 <TIM_Base_SetConfig+0x114>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d003      	beq.n	8005d7c <TIM_Base_SetConfig+0xf8>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	4a0c      	ldr	r2, [pc, #48]	; (8005da8 <TIM_Base_SetConfig+0x124>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d103      	bne.n	8005d84 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	691a      	ldr	r2, [r3, #16]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	615a      	str	r2, [r3, #20]
}
 8005d8a:	bf00      	nop
 8005d8c:	3714      	adds	r7, #20
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr
 8005d96:	bf00      	nop
 8005d98:	40010000 	.word	0x40010000
 8005d9c:	40000400 	.word	0x40000400
 8005da0:	40000800 	.word	0x40000800
 8005da4:	40000c00 	.word	0x40000c00
 8005da8:	40010400 	.word	0x40010400
 8005dac:	40014000 	.word	0x40014000
 8005db0:	40014400 	.word	0x40014400
 8005db4:	40014800 	.word	0x40014800
 8005db8:	40001800 	.word	0x40001800
 8005dbc:	40001c00 	.word	0x40001c00
 8005dc0:	40002000 	.word	0x40002000

08005dc4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b087      	sub	sp, #28
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6a1b      	ldr	r3, [r3, #32]
 8005dd2:	f023 0201 	bic.w	r2, r3, #1
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6a1b      	ldr	r3, [r3, #32]
 8005dde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	699b      	ldr	r3, [r3, #24]
 8005dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005df2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f023 0303 	bic.w	r3, r3, #3
 8005dfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	68fa      	ldr	r2, [r7, #12]
 8005e02:	4313      	orrs	r3, r2
 8005e04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	f023 0302 	bic.w	r3, r3, #2
 8005e0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	697a      	ldr	r2, [r7, #20]
 8005e14:	4313      	orrs	r3, r2
 8005e16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	4a20      	ldr	r2, [pc, #128]	; (8005e9c <TIM_OC1_SetConfig+0xd8>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d003      	beq.n	8005e28 <TIM_OC1_SetConfig+0x64>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	4a1f      	ldr	r2, [pc, #124]	; (8005ea0 <TIM_OC1_SetConfig+0xdc>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d10c      	bne.n	8005e42 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	f023 0308 	bic.w	r3, r3, #8
 8005e2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	697a      	ldr	r2, [r7, #20]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	f023 0304 	bic.w	r3, r3, #4
 8005e40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	4a15      	ldr	r2, [pc, #84]	; (8005e9c <TIM_OC1_SetConfig+0xd8>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d003      	beq.n	8005e52 <TIM_OC1_SetConfig+0x8e>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4a14      	ldr	r2, [pc, #80]	; (8005ea0 <TIM_OC1_SetConfig+0xdc>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d111      	bne.n	8005e76 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	695b      	ldr	r3, [r3, #20]
 8005e66:	693a      	ldr	r2, [r7, #16]
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	699b      	ldr	r3, [r3, #24]
 8005e70:	693a      	ldr	r2, [r7, #16]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	693a      	ldr	r2, [r7, #16]
 8005e7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	68fa      	ldr	r2, [r7, #12]
 8005e80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	685a      	ldr	r2, [r3, #4]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	697a      	ldr	r2, [r7, #20]
 8005e8e:	621a      	str	r2, [r3, #32]
}
 8005e90:	bf00      	nop
 8005e92:	371c      	adds	r7, #28
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr
 8005e9c:	40010000 	.word	0x40010000
 8005ea0:	40010400 	.word	0x40010400

08005ea4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b087      	sub	sp, #28
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6a1b      	ldr	r3, [r3, #32]
 8005eb2:	f023 0210 	bic.w	r2, r3, #16
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6a1b      	ldr	r3, [r3, #32]
 8005ebe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	699b      	ldr	r3, [r3, #24]
 8005eca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ed2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005eda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	021b      	lsls	r3, r3, #8
 8005ee2:	68fa      	ldr	r2, [r7, #12]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	f023 0320 	bic.w	r3, r3, #32
 8005eee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	011b      	lsls	r3, r3, #4
 8005ef6:	697a      	ldr	r2, [r7, #20]
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	4a22      	ldr	r2, [pc, #136]	; (8005f88 <TIM_OC2_SetConfig+0xe4>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d003      	beq.n	8005f0c <TIM_OC2_SetConfig+0x68>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	4a21      	ldr	r2, [pc, #132]	; (8005f8c <TIM_OC2_SetConfig+0xe8>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d10d      	bne.n	8005f28 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	68db      	ldr	r3, [r3, #12]
 8005f18:	011b      	lsls	r3, r3, #4
 8005f1a:	697a      	ldr	r2, [r7, #20]
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f26:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	4a17      	ldr	r2, [pc, #92]	; (8005f88 <TIM_OC2_SetConfig+0xe4>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d003      	beq.n	8005f38 <TIM_OC2_SetConfig+0x94>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	4a16      	ldr	r2, [pc, #88]	; (8005f8c <TIM_OC2_SetConfig+0xe8>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d113      	bne.n	8005f60 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	695b      	ldr	r3, [r3, #20]
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	693a      	ldr	r2, [r7, #16]
 8005f50:	4313      	orrs	r3, r2
 8005f52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	699b      	ldr	r3, [r3, #24]
 8005f58:	009b      	lsls	r3, r3, #2
 8005f5a:	693a      	ldr	r2, [r7, #16]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	693a      	ldr	r2, [r7, #16]
 8005f64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	68fa      	ldr	r2, [r7, #12]
 8005f6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	685a      	ldr	r2, [r3, #4]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	697a      	ldr	r2, [r7, #20]
 8005f78:	621a      	str	r2, [r3, #32]
}
 8005f7a:	bf00      	nop
 8005f7c:	371c      	adds	r7, #28
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr
 8005f86:	bf00      	nop
 8005f88:	40010000 	.word	0x40010000
 8005f8c:	40010400 	.word	0x40010400

08005f90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b087      	sub	sp, #28
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6a1b      	ldr	r3, [r3, #32]
 8005f9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6a1b      	ldr	r3, [r3, #32]
 8005faa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	69db      	ldr	r3, [r3, #28]
 8005fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f023 0303 	bic.w	r3, r3, #3
 8005fc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	68fa      	ldr	r2, [r7, #12]
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005fd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	021b      	lsls	r3, r3, #8
 8005fe0:	697a      	ldr	r2, [r7, #20]
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	4a21      	ldr	r2, [pc, #132]	; (8006070 <TIM_OC3_SetConfig+0xe0>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d003      	beq.n	8005ff6 <TIM_OC3_SetConfig+0x66>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	4a20      	ldr	r2, [pc, #128]	; (8006074 <TIM_OC3_SetConfig+0xe4>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d10d      	bne.n	8006012 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ffc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	68db      	ldr	r3, [r3, #12]
 8006002:	021b      	lsls	r3, r3, #8
 8006004:	697a      	ldr	r2, [r7, #20]
 8006006:	4313      	orrs	r3, r2
 8006008:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006010:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	4a16      	ldr	r2, [pc, #88]	; (8006070 <TIM_OC3_SetConfig+0xe0>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d003      	beq.n	8006022 <TIM_OC3_SetConfig+0x92>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4a15      	ldr	r2, [pc, #84]	; (8006074 <TIM_OC3_SetConfig+0xe4>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d113      	bne.n	800604a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006028:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006030:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	695b      	ldr	r3, [r3, #20]
 8006036:	011b      	lsls	r3, r3, #4
 8006038:	693a      	ldr	r2, [r7, #16]
 800603a:	4313      	orrs	r3, r2
 800603c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	699b      	ldr	r3, [r3, #24]
 8006042:	011b      	lsls	r3, r3, #4
 8006044:	693a      	ldr	r2, [r7, #16]
 8006046:	4313      	orrs	r3, r2
 8006048:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	693a      	ldr	r2, [r7, #16]
 800604e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	68fa      	ldr	r2, [r7, #12]
 8006054:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	685a      	ldr	r2, [r3, #4]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	697a      	ldr	r2, [r7, #20]
 8006062:	621a      	str	r2, [r3, #32]
}
 8006064:	bf00      	nop
 8006066:	371c      	adds	r7, #28
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr
 8006070:	40010000 	.word	0x40010000
 8006074:	40010400 	.word	0x40010400

08006078 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006078:	b480      	push	{r7}
 800607a:	b087      	sub	sp, #28
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6a1b      	ldr	r3, [r3, #32]
 8006086:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6a1b      	ldr	r3, [r3, #32]
 8006092:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	69db      	ldr	r3, [r3, #28]
 800609e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	021b      	lsls	r3, r3, #8
 80060b6:	68fa      	ldr	r2, [r7, #12]
 80060b8:	4313      	orrs	r3, r2
 80060ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80060c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	031b      	lsls	r3, r3, #12
 80060ca:	693a      	ldr	r2, [r7, #16]
 80060cc:	4313      	orrs	r3, r2
 80060ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	4a12      	ldr	r2, [pc, #72]	; (800611c <TIM_OC4_SetConfig+0xa4>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d003      	beq.n	80060e0 <TIM_OC4_SetConfig+0x68>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	4a11      	ldr	r2, [pc, #68]	; (8006120 <TIM_OC4_SetConfig+0xa8>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d109      	bne.n	80060f4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	695b      	ldr	r3, [r3, #20]
 80060ec:	019b      	lsls	r3, r3, #6
 80060ee:	697a      	ldr	r2, [r7, #20]
 80060f0:	4313      	orrs	r3, r2
 80060f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	697a      	ldr	r2, [r7, #20]
 80060f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	68fa      	ldr	r2, [r7, #12]
 80060fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	685a      	ldr	r2, [r3, #4]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	693a      	ldr	r2, [r7, #16]
 800610c:	621a      	str	r2, [r3, #32]
}
 800610e:	bf00      	nop
 8006110:	371c      	adds	r7, #28
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr
 800611a:	bf00      	nop
 800611c:	40010000 	.word	0x40010000
 8006120:	40010400 	.word	0x40010400

08006124 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006124:	b480      	push	{r7}
 8006126:	b087      	sub	sp, #28
 8006128:	af00      	add	r7, sp, #0
 800612a:	60f8      	str	r0, [r7, #12]
 800612c:	60b9      	str	r1, [r7, #8]
 800612e:	607a      	str	r2, [r7, #4]
 8006130:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	6a1b      	ldr	r3, [r3, #32]
 8006136:	f023 0201 	bic.w	r2, r3, #1
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	699b      	ldr	r3, [r3, #24]
 8006142:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	6a1b      	ldr	r3, [r3, #32]
 8006148:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	4a28      	ldr	r2, [pc, #160]	; (80061f0 <TIM_TI1_SetConfig+0xcc>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d01b      	beq.n	800618a <TIM_TI1_SetConfig+0x66>
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006158:	d017      	beq.n	800618a <TIM_TI1_SetConfig+0x66>
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	4a25      	ldr	r2, [pc, #148]	; (80061f4 <TIM_TI1_SetConfig+0xd0>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d013      	beq.n	800618a <TIM_TI1_SetConfig+0x66>
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	4a24      	ldr	r2, [pc, #144]	; (80061f8 <TIM_TI1_SetConfig+0xd4>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d00f      	beq.n	800618a <TIM_TI1_SetConfig+0x66>
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	4a23      	ldr	r2, [pc, #140]	; (80061fc <TIM_TI1_SetConfig+0xd8>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d00b      	beq.n	800618a <TIM_TI1_SetConfig+0x66>
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	4a22      	ldr	r2, [pc, #136]	; (8006200 <TIM_TI1_SetConfig+0xdc>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d007      	beq.n	800618a <TIM_TI1_SetConfig+0x66>
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	4a21      	ldr	r2, [pc, #132]	; (8006204 <TIM_TI1_SetConfig+0xe0>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d003      	beq.n	800618a <TIM_TI1_SetConfig+0x66>
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	4a20      	ldr	r2, [pc, #128]	; (8006208 <TIM_TI1_SetConfig+0xe4>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d101      	bne.n	800618e <TIM_TI1_SetConfig+0x6a>
 800618a:	2301      	movs	r3, #1
 800618c:	e000      	b.n	8006190 <TIM_TI1_SetConfig+0x6c>
 800618e:	2300      	movs	r3, #0
 8006190:	2b00      	cmp	r3, #0
 8006192:	d008      	beq.n	80061a6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	f023 0303 	bic.w	r3, r3, #3
 800619a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800619c:	697a      	ldr	r2, [r7, #20]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	4313      	orrs	r3, r2
 80061a2:	617b      	str	r3, [r7, #20]
 80061a4:	e003      	b.n	80061ae <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	f043 0301 	orr.w	r3, r3, #1
 80061ac:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	011b      	lsls	r3, r3, #4
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	697a      	ldr	r2, [r7, #20]
 80061be:	4313      	orrs	r3, r2
 80061c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	f023 030a 	bic.w	r3, r3, #10
 80061c8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	f003 030a 	and.w	r3, r3, #10
 80061d0:	693a      	ldr	r2, [r7, #16]
 80061d2:	4313      	orrs	r3, r2
 80061d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	697a      	ldr	r2, [r7, #20]
 80061da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	693a      	ldr	r2, [r7, #16]
 80061e0:	621a      	str	r2, [r3, #32]
}
 80061e2:	bf00      	nop
 80061e4:	371c      	adds	r7, #28
 80061e6:	46bd      	mov	sp, r7
 80061e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ec:	4770      	bx	lr
 80061ee:	bf00      	nop
 80061f0:	40010000 	.word	0x40010000
 80061f4:	40000400 	.word	0x40000400
 80061f8:	40000800 	.word	0x40000800
 80061fc:	40000c00 	.word	0x40000c00
 8006200:	40010400 	.word	0x40010400
 8006204:	40014000 	.word	0x40014000
 8006208:	40001800 	.word	0x40001800

0800620c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800620c:	b480      	push	{r7}
 800620e:	b087      	sub	sp, #28
 8006210:	af00      	add	r7, sp, #0
 8006212:	60f8      	str	r0, [r7, #12]
 8006214:	60b9      	str	r1, [r7, #8]
 8006216:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6a1b      	ldr	r3, [r3, #32]
 800621c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	6a1b      	ldr	r3, [r3, #32]
 8006222:	f023 0201 	bic.w	r2, r3, #1
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	699b      	ldr	r3, [r3, #24]
 800622e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006236:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	011b      	lsls	r3, r3, #4
 800623c:	693a      	ldr	r2, [r7, #16]
 800623e:	4313      	orrs	r3, r2
 8006240:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	f023 030a 	bic.w	r3, r3, #10
 8006248:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800624a:	697a      	ldr	r2, [r7, #20]
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	4313      	orrs	r3, r2
 8006250:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	693a      	ldr	r2, [r7, #16]
 8006256:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	697a      	ldr	r2, [r7, #20]
 800625c:	621a      	str	r2, [r3, #32]
}
 800625e:	bf00      	nop
 8006260:	371c      	adds	r7, #28
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr

0800626a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800626a:	b480      	push	{r7}
 800626c:	b087      	sub	sp, #28
 800626e:	af00      	add	r7, sp, #0
 8006270:	60f8      	str	r0, [r7, #12]
 8006272:	60b9      	str	r1, [r7, #8]
 8006274:	607a      	str	r2, [r7, #4]
 8006276:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6a1b      	ldr	r3, [r3, #32]
 800627c:	f023 0210 	bic.w	r2, r3, #16
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	699b      	ldr	r3, [r3, #24]
 8006288:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	6a1b      	ldr	r3, [r3, #32]
 800628e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006296:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	021b      	lsls	r3, r3, #8
 800629c:	697a      	ldr	r2, [r7, #20]
 800629e:	4313      	orrs	r3, r2
 80062a0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80062a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	031b      	lsls	r3, r3, #12
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	697a      	ldr	r2, [r7, #20]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80062bc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	011b      	lsls	r3, r3, #4
 80062c2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80062c6:	693a      	ldr	r2, [r7, #16]
 80062c8:	4313      	orrs	r3, r2
 80062ca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	697a      	ldr	r2, [r7, #20]
 80062d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	693a      	ldr	r2, [r7, #16]
 80062d6:	621a      	str	r2, [r3, #32]
}
 80062d8:	bf00      	nop
 80062da:	371c      	adds	r7, #28
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr

080062e4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b087      	sub	sp, #28
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	60f8      	str	r0, [r7, #12]
 80062ec:	60b9      	str	r1, [r7, #8]
 80062ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	6a1b      	ldr	r3, [r3, #32]
 80062f4:	f023 0210 	bic.w	r2, r3, #16
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	699b      	ldr	r3, [r3, #24]
 8006300:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	6a1b      	ldr	r3, [r3, #32]
 8006306:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800630e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	031b      	lsls	r3, r3, #12
 8006314:	697a      	ldr	r2, [r7, #20]
 8006316:	4313      	orrs	r3, r2
 8006318:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006320:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	011b      	lsls	r3, r3, #4
 8006326:	693a      	ldr	r2, [r7, #16]
 8006328:	4313      	orrs	r3, r2
 800632a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	697a      	ldr	r2, [r7, #20]
 8006330:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	693a      	ldr	r2, [r7, #16]
 8006336:	621a      	str	r2, [r3, #32]
}
 8006338:	bf00      	nop
 800633a:	371c      	adds	r7, #28
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr

08006344 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006344:	b480      	push	{r7}
 8006346:	b087      	sub	sp, #28
 8006348:	af00      	add	r7, sp, #0
 800634a:	60f8      	str	r0, [r7, #12]
 800634c:	60b9      	str	r1, [r7, #8]
 800634e:	607a      	str	r2, [r7, #4]
 8006350:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	6a1b      	ldr	r3, [r3, #32]
 8006356:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	69db      	ldr	r3, [r3, #28]
 8006362:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6a1b      	ldr	r3, [r3, #32]
 8006368:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	f023 0303 	bic.w	r3, r3, #3
 8006370:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006372:	697a      	ldr	r2, [r7, #20]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	4313      	orrs	r3, r2
 8006378:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006380:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	011b      	lsls	r3, r3, #4
 8006386:	b2db      	uxtb	r3, r3
 8006388:	697a      	ldr	r2, [r7, #20]
 800638a:	4313      	orrs	r3, r2
 800638c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006394:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	021b      	lsls	r3, r3, #8
 800639a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800639e:	693a      	ldr	r2, [r7, #16]
 80063a0:	4313      	orrs	r3, r2
 80063a2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	697a      	ldr	r2, [r7, #20]
 80063a8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	693a      	ldr	r2, [r7, #16]
 80063ae:	621a      	str	r2, [r3, #32]
}
 80063b0:	bf00      	nop
 80063b2:	371c      	adds	r7, #28
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr

080063bc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80063bc:	b480      	push	{r7}
 80063be:	b087      	sub	sp, #28
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	60f8      	str	r0, [r7, #12]
 80063c4:	60b9      	str	r1, [r7, #8]
 80063c6:	607a      	str	r2, [r7, #4]
 80063c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	6a1b      	ldr	r3, [r3, #32]
 80063ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	69db      	ldr	r3, [r3, #28]
 80063da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6a1b      	ldr	r3, [r3, #32]
 80063e0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063e8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	021b      	lsls	r3, r3, #8
 80063ee:	697a      	ldr	r2, [r7, #20]
 80063f0:	4313      	orrs	r3, r2
 80063f2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80063fa:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	031b      	lsls	r3, r3, #12
 8006400:	b29b      	uxth	r3, r3
 8006402:	697a      	ldr	r2, [r7, #20]
 8006404:	4313      	orrs	r3, r2
 8006406:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800640e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	031b      	lsls	r3, r3, #12
 8006414:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006418:	693a      	ldr	r2, [r7, #16]
 800641a:	4313      	orrs	r3, r2
 800641c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	697a      	ldr	r2, [r7, #20]
 8006422:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	693a      	ldr	r2, [r7, #16]
 8006428:	621a      	str	r2, [r3, #32]
}
 800642a:	bf00      	nop
 800642c:	371c      	adds	r7, #28
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr

08006436 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006436:	b480      	push	{r7}
 8006438:	b085      	sub	sp, #20
 800643a:	af00      	add	r7, sp, #0
 800643c:	6078      	str	r0, [r7, #4]
 800643e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800644c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800644e:	683a      	ldr	r2, [r7, #0]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	4313      	orrs	r3, r2
 8006454:	f043 0307 	orr.w	r3, r3, #7
 8006458:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	68fa      	ldr	r2, [r7, #12]
 800645e:	609a      	str	r2, [r3, #8]
}
 8006460:	bf00      	nop
 8006462:	3714      	adds	r7, #20
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800646c:	b480      	push	{r7}
 800646e:	b087      	sub	sp, #28
 8006470:	af00      	add	r7, sp, #0
 8006472:	60f8      	str	r0, [r7, #12]
 8006474:	60b9      	str	r1, [r7, #8]
 8006476:	607a      	str	r2, [r7, #4]
 8006478:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006486:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	021a      	lsls	r2, r3, #8
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	431a      	orrs	r2, r3
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	4313      	orrs	r3, r2
 8006494:	697a      	ldr	r2, [r7, #20]
 8006496:	4313      	orrs	r3, r2
 8006498:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	697a      	ldr	r2, [r7, #20]
 800649e:	609a      	str	r2, [r3, #8]
}
 80064a0:	bf00      	nop
 80064a2:	371c      	adds	r7, #28
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr

080064ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b087      	sub	sp, #28
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	60f8      	str	r0, [r7, #12]
 80064b4:	60b9      	str	r1, [r7, #8]
 80064b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	f003 031f 	and.w	r3, r3, #31
 80064be:	2201      	movs	r2, #1
 80064c0:	fa02 f303 	lsl.w	r3, r2, r3
 80064c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	6a1a      	ldr	r2, [r3, #32]
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	43db      	mvns	r3, r3
 80064ce:	401a      	ands	r2, r3
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	6a1a      	ldr	r2, [r3, #32]
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	f003 031f 	and.w	r3, r3, #31
 80064de:	6879      	ldr	r1, [r7, #4]
 80064e0:	fa01 f303 	lsl.w	r3, r1, r3
 80064e4:	431a      	orrs	r2, r3
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	621a      	str	r2, [r3, #32]
}
 80064ea:	bf00      	nop
 80064ec:	371c      	adds	r7, #28
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr
	...

080064f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b085      	sub	sp, #20
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006508:	2b01      	cmp	r3, #1
 800650a:	d101      	bne.n	8006510 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800650c:	2302      	movs	r3, #2
 800650e:	e05a      	b.n	80065c6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2201      	movs	r2, #1
 8006514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2202      	movs	r2, #2
 800651c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006536:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	68fa      	ldr	r2, [r7, #12]
 800653e:	4313      	orrs	r3, r2
 8006540:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	68fa      	ldr	r2, [r7, #12]
 8006548:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a21      	ldr	r2, [pc, #132]	; (80065d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d022      	beq.n	800659a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800655c:	d01d      	beq.n	800659a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a1d      	ldr	r2, [pc, #116]	; (80065d8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d018      	beq.n	800659a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a1b      	ldr	r2, [pc, #108]	; (80065dc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d013      	beq.n	800659a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a1a      	ldr	r2, [pc, #104]	; (80065e0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d00e      	beq.n	800659a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a18      	ldr	r2, [pc, #96]	; (80065e4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d009      	beq.n	800659a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a17      	ldr	r2, [pc, #92]	; (80065e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d004      	beq.n	800659a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a15      	ldr	r2, [pc, #84]	; (80065ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d10c      	bne.n	80065b4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	68ba      	ldr	r2, [r7, #8]
 80065a8:	4313      	orrs	r3, r2
 80065aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	68ba      	ldr	r2, [r7, #8]
 80065b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2201      	movs	r2, #1
 80065b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2200      	movs	r2, #0
 80065c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80065c4:	2300      	movs	r3, #0
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3714      	adds	r7, #20
 80065ca:	46bd      	mov	sp, r7
 80065cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d0:	4770      	bx	lr
 80065d2:	bf00      	nop
 80065d4:	40010000 	.word	0x40010000
 80065d8:	40000400 	.word	0x40000400
 80065dc:	40000800 	.word	0x40000800
 80065e0:	40000c00 	.word	0x40000c00
 80065e4:	40010400 	.word	0x40010400
 80065e8:	40014000 	.word	0x40014000
 80065ec:	40001800 	.word	0x40001800

080065f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b083      	sub	sp, #12
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80065f8:	bf00      	nop
 80065fa:	370c      	adds	r7, #12
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr

08006604 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006604:	b480      	push	{r7}
 8006606:	b083      	sub	sp, #12
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800660c:	bf00      	nop
 800660e:	370c      	adds	r7, #12
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr

08006618 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b082      	sub	sp, #8
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d101      	bne.n	800662a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	e03f      	b.n	80066aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006630:	b2db      	uxtb	r3, r3
 8006632:	2b00      	cmp	r3, #0
 8006634:	d106      	bne.n	8006644 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2200      	movs	r2, #0
 800663a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f7fc fca8 	bl	8002f94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2224      	movs	r2, #36	; 0x24
 8006648:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	68da      	ldr	r2, [r3, #12]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800665a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f000 faf9 	bl	8006c54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	691a      	ldr	r2, [r3, #16]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006670:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	695a      	ldr	r2, [r3, #20]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006680:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	68da      	ldr	r2, [r3, #12]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006690:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2200      	movs	r2, #0
 8006696:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2220      	movs	r2, #32
 800669c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2220      	movs	r2, #32
 80066a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80066a8:	2300      	movs	r3, #0
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3708      	adds	r7, #8
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}

080066b2 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80066b2:	b480      	push	{r7}
 80066b4:	b085      	sub	sp, #20
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	60f8      	str	r0, [r7, #12]
 80066ba:	60b9      	str	r1, [r7, #8]
 80066bc:	4613      	mov	r3, r2
 80066be:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80066c6:	b2db      	uxtb	r3, r3
 80066c8:	2b20      	cmp	r3, #32
 80066ca:	d130      	bne.n	800672e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d002      	beq.n	80066d8 <HAL_UART_Transmit_IT+0x26>
 80066d2:	88fb      	ldrh	r3, [r7, #6]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d101      	bne.n	80066dc <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80066d8:	2301      	movs	r3, #1
 80066da:	e029      	b.n	8006730 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	d101      	bne.n	80066ea <HAL_UART_Transmit_IT+0x38>
 80066e6:	2302      	movs	r3, #2
 80066e8:	e022      	b.n	8006730 <HAL_UART_Transmit_IT+0x7e>
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2201      	movs	r2, #1
 80066ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	68ba      	ldr	r2, [r7, #8]
 80066f6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	88fa      	ldrh	r2, [r7, #6]
 80066fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	88fa      	ldrh	r2, [r7, #6]
 8006702:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2200      	movs	r2, #0
 8006708:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2221      	movs	r2, #33	; 0x21
 800670e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2200      	movs	r2, #0
 8006716:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	68da      	ldr	r2, [r3, #12]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006728:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800672a:	2300      	movs	r3, #0
 800672c:	e000      	b.n	8006730 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800672e:	2302      	movs	r3, #2
  }
}
 8006730:	4618      	mov	r0, r3
 8006732:	3714      	adds	r7, #20
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr

0800673c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800673c:	b480      	push	{r7}
 800673e:	b085      	sub	sp, #20
 8006740:	af00      	add	r7, sp, #0
 8006742:	60f8      	str	r0, [r7, #12]
 8006744:	60b9      	str	r1, [r7, #8]
 8006746:	4613      	mov	r3, r2
 8006748:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006750:	b2db      	uxtb	r3, r3
 8006752:	2b20      	cmp	r3, #32
 8006754:	d140      	bne.n	80067d8 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d002      	beq.n	8006762 <HAL_UART_Receive_IT+0x26>
 800675c:	88fb      	ldrh	r3, [r7, #6]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d101      	bne.n	8006766 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	e039      	b.n	80067da <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800676c:	2b01      	cmp	r3, #1
 800676e:	d101      	bne.n	8006774 <HAL_UART_Receive_IT+0x38>
 8006770:	2302      	movs	r3, #2
 8006772:	e032      	b.n	80067da <HAL_UART_Receive_IT+0x9e>
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2201      	movs	r2, #1
 8006778:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	68ba      	ldr	r2, [r7, #8]
 8006780:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	88fa      	ldrh	r2, [r7, #6]
 8006786:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	88fa      	ldrh	r2, [r7, #6]
 800678c:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2200      	movs	r2, #0
 8006792:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2222      	movs	r2, #34	; 0x22
 8006798:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2200      	movs	r2, #0
 80067a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	68da      	ldr	r2, [r3, #12]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80067b2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	695a      	ldr	r2, [r3, #20]
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f042 0201 	orr.w	r2, r2, #1
 80067c2:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	68da      	ldr	r2, [r3, #12]
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f042 0220 	orr.w	r2, r2, #32
 80067d2:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80067d4:	2300      	movs	r3, #0
 80067d6:	e000      	b.n	80067da <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80067d8:	2302      	movs	r3, #2
  }
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3714      	adds	r7, #20
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr
	...

080067e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b088      	sub	sp, #32
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	68db      	ldr	r3, [r3, #12]
 80067fe:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	695b      	ldr	r3, [r3, #20]
 8006806:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006808:	2300      	movs	r3, #0
 800680a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800680c:	2300      	movs	r3, #0
 800680e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006810:	69fb      	ldr	r3, [r7, #28]
 8006812:	f003 030f 	and.w	r3, r3, #15
 8006816:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d10d      	bne.n	800683a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800681e:	69fb      	ldr	r3, [r7, #28]
 8006820:	f003 0320 	and.w	r3, r3, #32
 8006824:	2b00      	cmp	r3, #0
 8006826:	d008      	beq.n	800683a <HAL_UART_IRQHandler+0x52>
 8006828:	69bb      	ldr	r3, [r7, #24]
 800682a:	f003 0320 	and.w	r3, r3, #32
 800682e:	2b00      	cmp	r3, #0
 8006830:	d003      	beq.n	800683a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 f98c 	bl	8006b50 <UART_Receive_IT>
      return;
 8006838:	e0d0      	b.n	80069dc <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	2b00      	cmp	r3, #0
 800683e:	f000 80b0 	beq.w	80069a2 <HAL_UART_IRQHandler+0x1ba>
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	f003 0301 	and.w	r3, r3, #1
 8006848:	2b00      	cmp	r3, #0
 800684a:	d105      	bne.n	8006858 <HAL_UART_IRQHandler+0x70>
 800684c:	69bb      	ldr	r3, [r7, #24]
 800684e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006852:	2b00      	cmp	r3, #0
 8006854:	f000 80a5 	beq.w	80069a2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006858:	69fb      	ldr	r3, [r7, #28]
 800685a:	f003 0301 	and.w	r3, r3, #1
 800685e:	2b00      	cmp	r3, #0
 8006860:	d00a      	beq.n	8006878 <HAL_UART_IRQHandler+0x90>
 8006862:	69bb      	ldr	r3, [r7, #24]
 8006864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006868:	2b00      	cmp	r3, #0
 800686a:	d005      	beq.n	8006878 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006870:	f043 0201 	orr.w	r2, r3, #1
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006878:	69fb      	ldr	r3, [r7, #28]
 800687a:	f003 0304 	and.w	r3, r3, #4
 800687e:	2b00      	cmp	r3, #0
 8006880:	d00a      	beq.n	8006898 <HAL_UART_IRQHandler+0xb0>
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	f003 0301 	and.w	r3, r3, #1
 8006888:	2b00      	cmp	r3, #0
 800688a:	d005      	beq.n	8006898 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006890:	f043 0202 	orr.w	r2, r3, #2
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006898:	69fb      	ldr	r3, [r7, #28]
 800689a:	f003 0302 	and.w	r3, r3, #2
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d00a      	beq.n	80068b8 <HAL_UART_IRQHandler+0xd0>
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	f003 0301 	and.w	r3, r3, #1
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d005      	beq.n	80068b8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068b0:	f043 0204 	orr.w	r2, r3, #4
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80068b8:	69fb      	ldr	r3, [r7, #28]
 80068ba:	f003 0308 	and.w	r3, r3, #8
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d00f      	beq.n	80068e2 <HAL_UART_IRQHandler+0xfa>
 80068c2:	69bb      	ldr	r3, [r7, #24]
 80068c4:	f003 0320 	and.w	r3, r3, #32
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d104      	bne.n	80068d6 <HAL_UART_IRQHandler+0xee>
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	f003 0301 	and.w	r3, r3, #1
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d005      	beq.n	80068e2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068da:	f043 0208 	orr.w	r2, r3, #8
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d077      	beq.n	80069da <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	f003 0320 	and.w	r3, r3, #32
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d007      	beq.n	8006904 <HAL_UART_IRQHandler+0x11c>
 80068f4:	69bb      	ldr	r3, [r7, #24]
 80068f6:	f003 0320 	and.w	r3, r3, #32
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d002      	beq.n	8006904 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f000 f926 	bl	8006b50 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	695b      	ldr	r3, [r3, #20]
 800690a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800690e:	2b40      	cmp	r3, #64	; 0x40
 8006910:	bf0c      	ite	eq
 8006912:	2301      	moveq	r3, #1
 8006914:	2300      	movne	r3, #0
 8006916:	b2db      	uxtb	r3, r3
 8006918:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800691e:	f003 0308 	and.w	r3, r3, #8
 8006922:	2b00      	cmp	r3, #0
 8006924:	d102      	bne.n	800692c <HAL_UART_IRQHandler+0x144>
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d031      	beq.n	8006990 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f000 f86f 	bl	8006a10 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	695b      	ldr	r3, [r3, #20]
 8006938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800693c:	2b40      	cmp	r3, #64	; 0x40
 800693e:	d123      	bne.n	8006988 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	695a      	ldr	r2, [r3, #20]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800694e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006954:	2b00      	cmp	r3, #0
 8006956:	d013      	beq.n	8006980 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800695c:	4a21      	ldr	r2, [pc, #132]	; (80069e4 <HAL_UART_IRQHandler+0x1fc>)
 800695e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006964:	4618      	mov	r0, r3
 8006966:	f7fc fda5 	bl	80034b4 <HAL_DMA_Abort_IT>
 800696a:	4603      	mov	r3, r0
 800696c:	2b00      	cmp	r3, #0
 800696e:	d016      	beq.n	800699e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006974:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006976:	687a      	ldr	r2, [r7, #4]
 8006978:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800697a:	4610      	mov	r0, r2
 800697c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800697e:	e00e      	b.n	800699e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f000 f83b 	bl	80069fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006986:	e00a      	b.n	800699e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f000 f837 	bl	80069fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800698e:	e006      	b.n	800699e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f000 f833 	bl	80069fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2200      	movs	r2, #0
 800699a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800699c:	e01d      	b.n	80069da <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800699e:	bf00      	nop
    return;
 80069a0:	e01b      	b.n	80069da <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80069a2:	69fb      	ldr	r3, [r7, #28]
 80069a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d008      	beq.n	80069be <HAL_UART_IRQHandler+0x1d6>
 80069ac:	69bb      	ldr	r3, [r7, #24]
 80069ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d003      	beq.n	80069be <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 f85c 	bl	8006a74 <UART_Transmit_IT>
    return;
 80069bc:	e00e      	b.n	80069dc <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80069be:	69fb      	ldr	r3, [r7, #28]
 80069c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d009      	beq.n	80069dc <HAL_UART_IRQHandler+0x1f4>
 80069c8:	69bb      	ldr	r3, [r7, #24]
 80069ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d004      	beq.n	80069dc <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 f8a4 	bl	8006b20 <UART_EndTransmit_IT>
    return;
 80069d8:	e000      	b.n	80069dc <HAL_UART_IRQHandler+0x1f4>
    return;
 80069da:	bf00      	nop
  }
}
 80069dc:	3720      	adds	r7, #32
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	bf00      	nop
 80069e4:	08006a4d 	.word	0x08006a4d

080069e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b083      	sub	sp, #12
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80069f0:	bf00      	nop
 80069f2:	370c      	adds	r7, #12
 80069f4:	46bd      	mov	sp, r7
 80069f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fa:	4770      	bx	lr

080069fc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b083      	sub	sp, #12
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006a04:	bf00      	nop
 8006a06:	370c      	adds	r7, #12
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr

08006a10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b083      	sub	sp, #12
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	68da      	ldr	r2, [r3, #12]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006a26:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	695a      	ldr	r2, [r3, #20]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f022 0201 	bic.w	r2, r2, #1
 8006a36:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2220      	movs	r2, #32
 8006a3c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006a40:	bf00      	nop
 8006a42:	370c      	adds	r7, #12
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr

08006a4c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b084      	sub	sp, #16
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a58:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2200      	movs	r2, #0
 8006a64:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a66:	68f8      	ldr	r0, [r7, #12]
 8006a68:	f7ff ffc8 	bl	80069fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a6c:	bf00      	nop
 8006a6e:	3710      	adds	r7, #16
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}

08006a74 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b085      	sub	sp, #20
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006a82:	b2db      	uxtb	r3, r3
 8006a84:	2b21      	cmp	r3, #33	; 0x21
 8006a86:	d144      	bne.n	8006b12 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	689b      	ldr	r3, [r3, #8]
 8006a8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a90:	d11a      	bne.n	8006ac8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6a1b      	ldr	r3, [r3, #32]
 8006a96:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	881b      	ldrh	r3, [r3, #0]
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006aa6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	691b      	ldr	r3, [r3, #16]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d105      	bne.n	8006abc <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6a1b      	ldr	r3, [r3, #32]
 8006ab4:	1c9a      	adds	r2, r3, #2
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	621a      	str	r2, [r3, #32]
 8006aba:	e00e      	b.n	8006ada <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6a1b      	ldr	r3, [r3, #32]
 8006ac0:	1c5a      	adds	r2, r3, #1
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	621a      	str	r2, [r3, #32]
 8006ac6:	e008      	b.n	8006ada <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6a1b      	ldr	r3, [r3, #32]
 8006acc:	1c59      	adds	r1, r3, #1
 8006ace:	687a      	ldr	r2, [r7, #4]
 8006ad0:	6211      	str	r1, [r2, #32]
 8006ad2:	781a      	ldrb	r2, [r3, #0]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	3b01      	subs	r3, #1
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d10f      	bne.n	8006b0e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	68da      	ldr	r2, [r3, #12]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006afc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	68da      	ldr	r2, [r3, #12]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b0c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	e000      	b.n	8006b14 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006b12:	2302      	movs	r3, #2
  }
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	3714      	adds	r7, #20
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr

08006b20 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b082      	sub	sp, #8
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	68da      	ldr	r2, [r3, #12]
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b36:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2220      	movs	r2, #32
 8006b3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f7ff ff51 	bl	80069e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006b46:	2300      	movs	r3, #0
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	3708      	adds	r7, #8
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}

08006b50 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b084      	sub	sp, #16
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006b5e:	b2db      	uxtb	r3, r3
 8006b60:	2b22      	cmp	r3, #34	; 0x22
 8006b62:	d171      	bne.n	8006c48 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	689b      	ldr	r3, [r3, #8]
 8006b68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b6c:	d123      	bne.n	8006bb6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b72:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	691b      	ldr	r3, [r3, #16]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d10e      	bne.n	8006b9a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b88:	b29a      	uxth	r2, r3
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b92:	1c9a      	adds	r2, r3, #2
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	629a      	str	r2, [r3, #40]	; 0x28
 8006b98:	e029      	b.n	8006bee <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	b2db      	uxtb	r3, r3
 8006ba4:	b29a      	uxth	r2, r3
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bae:	1c5a      	adds	r2, r3, #1
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	629a      	str	r2, [r3, #40]	; 0x28
 8006bb4:	e01b      	b.n	8006bee <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	691b      	ldr	r3, [r3, #16]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d10a      	bne.n	8006bd4 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	6858      	ldr	r0, [r3, #4]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bc8:	1c59      	adds	r1, r3, #1
 8006bca:	687a      	ldr	r2, [r7, #4]
 8006bcc:	6291      	str	r1, [r2, #40]	; 0x28
 8006bce:	b2c2      	uxtb	r2, r0
 8006bd0:	701a      	strb	r2, [r3, #0]
 8006bd2:	e00c      	b.n	8006bee <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	b2da      	uxtb	r2, r3
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006be0:	1c58      	adds	r0, r3, #1
 8006be2:	6879      	ldr	r1, [r7, #4]
 8006be4:	6288      	str	r0, [r1, #40]	; 0x28
 8006be6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006bea:	b2d2      	uxtb	r2, r2
 8006bec:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	3b01      	subs	r3, #1
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	687a      	ldr	r2, [r7, #4]
 8006bfa:	4619      	mov	r1, r3
 8006bfc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d120      	bne.n	8006c44 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	68da      	ldr	r2, [r3, #12]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f022 0220 	bic.w	r2, r2, #32
 8006c10:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	68da      	ldr	r2, [r3, #12]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006c20:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	695a      	ldr	r2, [r3, #20]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f022 0201 	bic.w	r2, r2, #1
 8006c30:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2220      	movs	r2, #32
 8006c36:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f7fa ff08 	bl	8001a50 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006c40:	2300      	movs	r3, #0
 8006c42:	e002      	b.n	8006c4a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006c44:	2300      	movs	r3, #0
 8006c46:	e000      	b.n	8006c4a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006c48:	2302      	movs	r3, #2
  }
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3710      	adds	r7, #16
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
	...

08006c54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c58:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c62:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	691b      	ldr	r3, [r3, #16]
 8006c6a:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006c6e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006c72:	68d9      	ldr	r1, [r3, #12]
 8006c74:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006c78:	681a      	ldr	r2, [r3, #0]
 8006c7a:	ea40 0301 	orr.w	r3, r0, r1
 8006c7e:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006c80:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006c84:	689a      	ldr	r2, [r3, #8]
 8006c86:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006c8a:	691b      	ldr	r3, [r3, #16]
 8006c8c:	431a      	orrs	r2, r3
 8006c8e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006c92:	695b      	ldr	r3, [r3, #20]
 8006c94:	431a      	orrs	r2, r3
 8006c96:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006c9a:	69db      	ldr	r3, [r3, #28]
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 8006ca2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	68db      	ldr	r3, [r3, #12]
 8006caa:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006cae:	f021 010c 	bic.w	r1, r1, #12
 8006cb2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006cb6:	681a      	ldr	r2, [r3, #0]
 8006cb8:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8006cbc:	430b      	orrs	r3, r1
 8006cbe:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006cc0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	695b      	ldr	r3, [r3, #20]
 8006cc8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006ccc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006cd0:	6999      	ldr	r1, [r3, #24]
 8006cd2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	ea40 0301 	orr.w	r3, r0, r1
 8006cdc:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006cde:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006ce2:	69db      	ldr	r3, [r3, #28]
 8006ce4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ce8:	f040 824a 	bne.w	8007180 <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006cec:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	4b96      	ldr	r3, [pc, #600]	; (8006f4c <UART_SetConfig+0x2f8>)
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d006      	beq.n	8006d06 <UART_SetConfig+0xb2>
 8006cf8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	4b94      	ldr	r3, [pc, #592]	; (8006f50 <UART_SetConfig+0x2fc>)
 8006d00:	429a      	cmp	r2, r3
 8006d02:	f040 8129 	bne.w	8006f58 <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006d06:	f7fe fad9 	bl	80052bc <HAL_RCC_GetPCLK2Freq>
 8006d0a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006d0e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006d12:	2200      	movs	r2, #0
 8006d14:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8006d18:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 8006d1c:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 8006d20:	4622      	mov	r2, r4
 8006d22:	462b      	mov	r3, r5
 8006d24:	1891      	adds	r1, r2, r2
 8006d26:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8006d2a:	415b      	adcs	r3, r3
 8006d2c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006d30:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8006d34:	4621      	mov	r1, r4
 8006d36:	1851      	adds	r1, r2, r1
 8006d38:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8006d3c:	4629      	mov	r1, r5
 8006d3e:	414b      	adcs	r3, r1
 8006d40:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006d44:	f04f 0200 	mov.w	r2, #0
 8006d48:	f04f 0300 	mov.w	r3, #0
 8006d4c:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 8006d50:	4649      	mov	r1, r9
 8006d52:	00cb      	lsls	r3, r1, #3
 8006d54:	4641      	mov	r1, r8
 8006d56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d5a:	4641      	mov	r1, r8
 8006d5c:	00ca      	lsls	r2, r1, #3
 8006d5e:	4610      	mov	r0, r2
 8006d60:	4619      	mov	r1, r3
 8006d62:	4603      	mov	r3, r0
 8006d64:	4622      	mov	r2, r4
 8006d66:	189b      	adds	r3, r3, r2
 8006d68:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8006d6c:	462b      	mov	r3, r5
 8006d6e:	460a      	mov	r2, r1
 8006d70:	eb42 0303 	adc.w	r3, r2, r3
 8006d74:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8006d78:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8006d84:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 8006d88:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 8006d8c:	460b      	mov	r3, r1
 8006d8e:	18db      	adds	r3, r3, r3
 8006d90:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006d94:	4613      	mov	r3, r2
 8006d96:	eb42 0303 	adc.w	r3, r2, r3
 8006d9a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006d9e:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8006da2:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8006da6:	f7f9 fe41 	bl	8000a2c <__aeabi_uldivmod>
 8006daa:	4602      	mov	r2, r0
 8006dac:	460b      	mov	r3, r1
 8006dae:	4b69      	ldr	r3, [pc, #420]	; (8006f54 <UART_SetConfig+0x300>)
 8006db0:	fba3 2302 	umull	r2, r3, r3, r2
 8006db4:	095b      	lsrs	r3, r3, #5
 8006db6:	011c      	lsls	r4, r3, #4
 8006db8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8006dc2:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8006dc6:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 8006dca:	4642      	mov	r2, r8
 8006dcc:	464b      	mov	r3, r9
 8006dce:	1891      	adds	r1, r2, r2
 8006dd0:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8006dd4:	415b      	adcs	r3, r3
 8006dd6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006dda:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8006dde:	4641      	mov	r1, r8
 8006de0:	1851      	adds	r1, r2, r1
 8006de2:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8006de6:	4649      	mov	r1, r9
 8006de8:	414b      	adcs	r3, r1
 8006dea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006dee:	f04f 0200 	mov.w	r2, #0
 8006df2:	f04f 0300 	mov.w	r3, #0
 8006df6:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 8006dfa:	4659      	mov	r1, fp
 8006dfc:	00cb      	lsls	r3, r1, #3
 8006dfe:	4651      	mov	r1, sl
 8006e00:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e04:	4651      	mov	r1, sl
 8006e06:	00ca      	lsls	r2, r1, #3
 8006e08:	4610      	mov	r0, r2
 8006e0a:	4619      	mov	r1, r3
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	4642      	mov	r2, r8
 8006e10:	189b      	adds	r3, r3, r2
 8006e12:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8006e16:	464b      	mov	r3, r9
 8006e18:	460a      	mov	r2, r1
 8006e1a:	eb42 0303 	adc.w	r3, r2, r3
 8006e1e:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8006e22:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8006e2e:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 8006e32:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 8006e36:	460b      	mov	r3, r1
 8006e38:	18db      	adds	r3, r3, r3
 8006e3a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006e3e:	4613      	mov	r3, r2
 8006e40:	eb42 0303 	adc.w	r3, r2, r3
 8006e44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006e48:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8006e4c:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 8006e50:	f7f9 fdec 	bl	8000a2c <__aeabi_uldivmod>
 8006e54:	4602      	mov	r2, r0
 8006e56:	460b      	mov	r3, r1
 8006e58:	4611      	mov	r1, r2
 8006e5a:	4b3e      	ldr	r3, [pc, #248]	; (8006f54 <UART_SetConfig+0x300>)
 8006e5c:	fba3 2301 	umull	r2, r3, r3, r1
 8006e60:	095b      	lsrs	r3, r3, #5
 8006e62:	2264      	movs	r2, #100	; 0x64
 8006e64:	fb02 f303 	mul.w	r3, r2, r3
 8006e68:	1acb      	subs	r3, r1, r3
 8006e6a:	00db      	lsls	r3, r3, #3
 8006e6c:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006e70:	4b38      	ldr	r3, [pc, #224]	; (8006f54 <UART_SetConfig+0x300>)
 8006e72:	fba3 2302 	umull	r2, r3, r3, r2
 8006e76:	095b      	lsrs	r3, r3, #5
 8006e78:	005b      	lsls	r3, r3, #1
 8006e7a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006e7e:	441c      	add	r4, r3
 8006e80:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006e84:	2200      	movs	r2, #0
 8006e86:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8006e8a:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 8006e8e:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 8006e92:	4642      	mov	r2, r8
 8006e94:	464b      	mov	r3, r9
 8006e96:	1891      	adds	r1, r2, r2
 8006e98:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8006e9c:	415b      	adcs	r3, r3
 8006e9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006ea2:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8006ea6:	4641      	mov	r1, r8
 8006ea8:	1851      	adds	r1, r2, r1
 8006eaa:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8006eae:	4649      	mov	r1, r9
 8006eb0:	414b      	adcs	r3, r1
 8006eb2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006eb6:	f04f 0200 	mov.w	r2, #0
 8006eba:	f04f 0300 	mov.w	r3, #0
 8006ebe:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 8006ec2:	4659      	mov	r1, fp
 8006ec4:	00cb      	lsls	r3, r1, #3
 8006ec6:	4651      	mov	r1, sl
 8006ec8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ecc:	4651      	mov	r1, sl
 8006ece:	00ca      	lsls	r2, r1, #3
 8006ed0:	4610      	mov	r0, r2
 8006ed2:	4619      	mov	r1, r3
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	4642      	mov	r2, r8
 8006ed8:	189b      	adds	r3, r3, r2
 8006eda:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8006ede:	464b      	mov	r3, r9
 8006ee0:	460a      	mov	r2, r1
 8006ee2:	eb42 0303 	adc.w	r3, r2, r3
 8006ee6:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8006eea:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8006ef6:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 8006efa:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 8006efe:	460b      	mov	r3, r1
 8006f00:	18db      	adds	r3, r3, r3
 8006f02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006f06:	4613      	mov	r3, r2
 8006f08:	eb42 0303 	adc.w	r3, r2, r3
 8006f0c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006f10:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8006f14:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 8006f18:	f7f9 fd88 	bl	8000a2c <__aeabi_uldivmod>
 8006f1c:	4602      	mov	r2, r0
 8006f1e:	460b      	mov	r3, r1
 8006f20:	4b0c      	ldr	r3, [pc, #48]	; (8006f54 <UART_SetConfig+0x300>)
 8006f22:	fba3 1302 	umull	r1, r3, r3, r2
 8006f26:	095b      	lsrs	r3, r3, #5
 8006f28:	2164      	movs	r1, #100	; 0x64
 8006f2a:	fb01 f303 	mul.w	r3, r1, r3
 8006f2e:	1ad3      	subs	r3, r2, r3
 8006f30:	00db      	lsls	r3, r3, #3
 8006f32:	3332      	adds	r3, #50	; 0x32
 8006f34:	4a07      	ldr	r2, [pc, #28]	; (8006f54 <UART_SetConfig+0x300>)
 8006f36:	fba2 2303 	umull	r2, r3, r2, r3
 8006f3a:	095b      	lsrs	r3, r3, #5
 8006f3c:	f003 0207 	and.w	r2, r3, #7
 8006f40:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4422      	add	r2, r4
 8006f48:	609a      	str	r2, [r3, #8]
 8006f4a:	e349      	b.n	80075e0 <UART_SetConfig+0x98c>
 8006f4c:	40011000 	.word	0x40011000
 8006f50:	40011400 	.word	0x40011400
 8006f54:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006f58:	f7fe f99c 	bl	8005294 <HAL_RCC_GetPCLK1Freq>
 8006f5c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006f60:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006f64:	2200      	movs	r2, #0
 8006f66:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8006f6a:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 8006f6e:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 8006f72:	4622      	mov	r2, r4
 8006f74:	462b      	mov	r3, r5
 8006f76:	1891      	adds	r1, r2, r2
 8006f78:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8006f7c:	415b      	adcs	r3, r3
 8006f7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006f82:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8006f86:	4621      	mov	r1, r4
 8006f88:	eb12 0a01 	adds.w	sl, r2, r1
 8006f8c:	4629      	mov	r1, r5
 8006f8e:	eb43 0b01 	adc.w	fp, r3, r1
 8006f92:	f04f 0200 	mov.w	r2, #0
 8006f96:	f04f 0300 	mov.w	r3, #0
 8006f9a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006f9e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006fa2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006fa6:	4692      	mov	sl, r2
 8006fa8:	469b      	mov	fp, r3
 8006faa:	4623      	mov	r3, r4
 8006fac:	eb1a 0303 	adds.w	r3, sl, r3
 8006fb0:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8006fb4:	462b      	mov	r3, r5
 8006fb6:	eb4b 0303 	adc.w	r3, fp, r3
 8006fba:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8006fbe:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8006fca:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8006fce:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 8006fd2:	460b      	mov	r3, r1
 8006fd4:	18db      	adds	r3, r3, r3
 8006fd6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006fda:	4613      	mov	r3, r2
 8006fdc:	eb42 0303 	adc.w	r3, r2, r3
 8006fe0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006fe4:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8006fe8:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 8006fec:	f7f9 fd1e 	bl	8000a2c <__aeabi_uldivmod>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	460b      	mov	r3, r1
 8006ff4:	4b61      	ldr	r3, [pc, #388]	; (800717c <UART_SetConfig+0x528>)
 8006ff6:	fba3 2302 	umull	r2, r3, r3, r2
 8006ffa:	095b      	lsrs	r3, r3, #5
 8006ffc:	011c      	lsls	r4, r3, #4
 8006ffe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007002:	2200      	movs	r2, #0
 8007004:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8007008:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 800700c:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 8007010:	4642      	mov	r2, r8
 8007012:	464b      	mov	r3, r9
 8007014:	1891      	adds	r1, r2, r2
 8007016:	67b9      	str	r1, [r7, #120]	; 0x78
 8007018:	415b      	adcs	r3, r3
 800701a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800701c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8007020:	4641      	mov	r1, r8
 8007022:	1851      	adds	r1, r2, r1
 8007024:	6739      	str	r1, [r7, #112]	; 0x70
 8007026:	4649      	mov	r1, r9
 8007028:	414b      	adcs	r3, r1
 800702a:	677b      	str	r3, [r7, #116]	; 0x74
 800702c:	f04f 0200 	mov.w	r2, #0
 8007030:	f04f 0300 	mov.w	r3, #0
 8007034:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 8007038:	4659      	mov	r1, fp
 800703a:	00cb      	lsls	r3, r1, #3
 800703c:	4651      	mov	r1, sl
 800703e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007042:	4651      	mov	r1, sl
 8007044:	00ca      	lsls	r2, r1, #3
 8007046:	4610      	mov	r0, r2
 8007048:	4619      	mov	r1, r3
 800704a:	4603      	mov	r3, r0
 800704c:	4642      	mov	r2, r8
 800704e:	189b      	adds	r3, r3, r2
 8007050:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8007054:	464b      	mov	r3, r9
 8007056:	460a      	mov	r2, r1
 8007058:	eb42 0303 	adc.w	r3, r2, r3
 800705c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8007060:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	2200      	movs	r2, #0
 8007068:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800706c:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 8007070:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 8007074:	460b      	mov	r3, r1
 8007076:	18db      	adds	r3, r3, r3
 8007078:	66bb      	str	r3, [r7, #104]	; 0x68
 800707a:	4613      	mov	r3, r2
 800707c:	eb42 0303 	adc.w	r3, r2, r3
 8007080:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007082:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8007086:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800708a:	f7f9 fccf 	bl	8000a2c <__aeabi_uldivmod>
 800708e:	4602      	mov	r2, r0
 8007090:	460b      	mov	r3, r1
 8007092:	4611      	mov	r1, r2
 8007094:	4b39      	ldr	r3, [pc, #228]	; (800717c <UART_SetConfig+0x528>)
 8007096:	fba3 2301 	umull	r2, r3, r3, r1
 800709a:	095b      	lsrs	r3, r3, #5
 800709c:	2264      	movs	r2, #100	; 0x64
 800709e:	fb02 f303 	mul.w	r3, r2, r3
 80070a2:	1acb      	subs	r3, r1, r3
 80070a4:	00db      	lsls	r3, r3, #3
 80070a6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80070aa:	4b34      	ldr	r3, [pc, #208]	; (800717c <UART_SetConfig+0x528>)
 80070ac:	fba3 2302 	umull	r2, r3, r3, r2
 80070b0:	095b      	lsrs	r3, r3, #5
 80070b2:	005b      	lsls	r3, r3, #1
 80070b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80070b8:	441c      	add	r4, r3
 80070ba:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80070be:	2200      	movs	r2, #0
 80070c0:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 80070c4:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80070c8:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 80070cc:	4642      	mov	r2, r8
 80070ce:	464b      	mov	r3, r9
 80070d0:	1891      	adds	r1, r2, r2
 80070d2:	6639      	str	r1, [r7, #96]	; 0x60
 80070d4:	415b      	adcs	r3, r3
 80070d6:	667b      	str	r3, [r7, #100]	; 0x64
 80070d8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80070dc:	4641      	mov	r1, r8
 80070de:	1851      	adds	r1, r2, r1
 80070e0:	65b9      	str	r1, [r7, #88]	; 0x58
 80070e2:	4649      	mov	r1, r9
 80070e4:	414b      	adcs	r3, r1
 80070e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80070e8:	f04f 0200 	mov.w	r2, #0
 80070ec:	f04f 0300 	mov.w	r3, #0
 80070f0:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 80070f4:	4659      	mov	r1, fp
 80070f6:	00cb      	lsls	r3, r1, #3
 80070f8:	4651      	mov	r1, sl
 80070fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80070fe:	4651      	mov	r1, sl
 8007100:	00ca      	lsls	r2, r1, #3
 8007102:	4610      	mov	r0, r2
 8007104:	4619      	mov	r1, r3
 8007106:	4603      	mov	r3, r0
 8007108:	4642      	mov	r2, r8
 800710a:	189b      	adds	r3, r3, r2
 800710c:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8007110:	464b      	mov	r3, r9
 8007112:	460a      	mov	r2, r1
 8007114:	eb42 0303 	adc.w	r3, r2, r3
 8007118:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 800711c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	2200      	movs	r2, #0
 8007124:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8007128:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 800712c:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 8007130:	460b      	mov	r3, r1
 8007132:	18db      	adds	r3, r3, r3
 8007134:	653b      	str	r3, [r7, #80]	; 0x50
 8007136:	4613      	mov	r3, r2
 8007138:	eb42 0303 	adc.w	r3, r2, r3
 800713c:	657b      	str	r3, [r7, #84]	; 0x54
 800713e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007142:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8007146:	f7f9 fc71 	bl	8000a2c <__aeabi_uldivmod>
 800714a:	4602      	mov	r2, r0
 800714c:	460b      	mov	r3, r1
 800714e:	4b0b      	ldr	r3, [pc, #44]	; (800717c <UART_SetConfig+0x528>)
 8007150:	fba3 1302 	umull	r1, r3, r3, r2
 8007154:	095b      	lsrs	r3, r3, #5
 8007156:	2164      	movs	r1, #100	; 0x64
 8007158:	fb01 f303 	mul.w	r3, r1, r3
 800715c:	1ad3      	subs	r3, r2, r3
 800715e:	00db      	lsls	r3, r3, #3
 8007160:	3332      	adds	r3, #50	; 0x32
 8007162:	4a06      	ldr	r2, [pc, #24]	; (800717c <UART_SetConfig+0x528>)
 8007164:	fba2 2303 	umull	r2, r3, r2, r3
 8007168:	095b      	lsrs	r3, r3, #5
 800716a:	f003 0207 	and.w	r2, r3, #7
 800716e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4422      	add	r2, r4
 8007176:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007178:	e232      	b.n	80075e0 <UART_SetConfig+0x98c>
 800717a:	bf00      	nop
 800717c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007180:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8007184:	681a      	ldr	r2, [r3, #0]
 8007186:	4b8d      	ldr	r3, [pc, #564]	; (80073bc <UART_SetConfig+0x768>)
 8007188:	429a      	cmp	r2, r3
 800718a:	d006      	beq.n	800719a <UART_SetConfig+0x546>
 800718c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8007190:	681a      	ldr	r2, [r3, #0]
 8007192:	4b8b      	ldr	r3, [pc, #556]	; (80073c0 <UART_SetConfig+0x76c>)
 8007194:	429a      	cmp	r2, r3
 8007196:	f040 8117 	bne.w	80073c8 <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 800719a:	f7fe f88f 	bl	80052bc <HAL_RCC_GetPCLK2Freq>
 800719e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80071a2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80071a6:	2200      	movs	r2, #0
 80071a8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 80071ac:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 80071b0:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 80071b4:	4622      	mov	r2, r4
 80071b6:	462b      	mov	r3, r5
 80071b8:	1891      	adds	r1, r2, r2
 80071ba:	64b9      	str	r1, [r7, #72]	; 0x48
 80071bc:	415b      	adcs	r3, r3
 80071be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80071c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80071c4:	4621      	mov	r1, r4
 80071c6:	eb12 0801 	adds.w	r8, r2, r1
 80071ca:	4629      	mov	r1, r5
 80071cc:	eb43 0901 	adc.w	r9, r3, r1
 80071d0:	f04f 0200 	mov.w	r2, #0
 80071d4:	f04f 0300 	mov.w	r3, #0
 80071d8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80071dc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80071e0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80071e4:	4690      	mov	r8, r2
 80071e6:	4699      	mov	r9, r3
 80071e8:	4623      	mov	r3, r4
 80071ea:	eb18 0303 	adds.w	r3, r8, r3
 80071ee:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80071f2:	462b      	mov	r3, r5
 80071f4:	eb49 0303 	adc.w	r3, r9, r3
 80071f8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80071fc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	2200      	movs	r2, #0
 8007204:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8007208:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 800720c:	f04f 0200 	mov.w	r2, #0
 8007210:	f04f 0300 	mov.w	r3, #0
 8007214:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 8007218:	4629      	mov	r1, r5
 800721a:	008b      	lsls	r3, r1, #2
 800721c:	4621      	mov	r1, r4
 800721e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007222:	4621      	mov	r1, r4
 8007224:	008a      	lsls	r2, r1, #2
 8007226:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 800722a:	f7f9 fbff 	bl	8000a2c <__aeabi_uldivmod>
 800722e:	4602      	mov	r2, r0
 8007230:	460b      	mov	r3, r1
 8007232:	4b64      	ldr	r3, [pc, #400]	; (80073c4 <UART_SetConfig+0x770>)
 8007234:	fba3 2302 	umull	r2, r3, r3, r2
 8007238:	095b      	lsrs	r3, r3, #5
 800723a:	011c      	lsls	r4, r3, #4
 800723c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007240:	2200      	movs	r2, #0
 8007242:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8007246:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800724a:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 800724e:	4642      	mov	r2, r8
 8007250:	464b      	mov	r3, r9
 8007252:	1891      	adds	r1, r2, r2
 8007254:	6439      	str	r1, [r7, #64]	; 0x40
 8007256:	415b      	adcs	r3, r3
 8007258:	647b      	str	r3, [r7, #68]	; 0x44
 800725a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800725e:	4641      	mov	r1, r8
 8007260:	1851      	adds	r1, r2, r1
 8007262:	63b9      	str	r1, [r7, #56]	; 0x38
 8007264:	4649      	mov	r1, r9
 8007266:	414b      	adcs	r3, r1
 8007268:	63fb      	str	r3, [r7, #60]	; 0x3c
 800726a:	f04f 0200 	mov.w	r2, #0
 800726e:	f04f 0300 	mov.w	r3, #0
 8007272:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 8007276:	4659      	mov	r1, fp
 8007278:	00cb      	lsls	r3, r1, #3
 800727a:	4651      	mov	r1, sl
 800727c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007280:	4651      	mov	r1, sl
 8007282:	00ca      	lsls	r2, r1, #3
 8007284:	4610      	mov	r0, r2
 8007286:	4619      	mov	r1, r3
 8007288:	4603      	mov	r3, r0
 800728a:	4642      	mov	r2, r8
 800728c:	189b      	adds	r3, r3, r2
 800728e:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8007292:	464b      	mov	r3, r9
 8007294:	460a      	mov	r2, r1
 8007296:	eb42 0303 	adc.w	r3, r2, r3
 800729a:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800729e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	2200      	movs	r2, #0
 80072a6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80072aa:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 80072ae:	f04f 0200 	mov.w	r2, #0
 80072b2:	f04f 0300 	mov.w	r3, #0
 80072b6:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 80072ba:	4649      	mov	r1, r9
 80072bc:	008b      	lsls	r3, r1, #2
 80072be:	4641      	mov	r1, r8
 80072c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80072c4:	4641      	mov	r1, r8
 80072c6:	008a      	lsls	r2, r1, #2
 80072c8:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 80072cc:	f7f9 fbae 	bl	8000a2c <__aeabi_uldivmod>
 80072d0:	4602      	mov	r2, r0
 80072d2:	460b      	mov	r3, r1
 80072d4:	4b3b      	ldr	r3, [pc, #236]	; (80073c4 <UART_SetConfig+0x770>)
 80072d6:	fba3 1302 	umull	r1, r3, r3, r2
 80072da:	095b      	lsrs	r3, r3, #5
 80072dc:	2164      	movs	r1, #100	; 0x64
 80072de:	fb01 f303 	mul.w	r3, r1, r3
 80072e2:	1ad3      	subs	r3, r2, r3
 80072e4:	011b      	lsls	r3, r3, #4
 80072e6:	3332      	adds	r3, #50	; 0x32
 80072e8:	4a36      	ldr	r2, [pc, #216]	; (80073c4 <UART_SetConfig+0x770>)
 80072ea:	fba2 2303 	umull	r2, r3, r2, r3
 80072ee:	095b      	lsrs	r3, r3, #5
 80072f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80072f4:	441c      	add	r4, r3
 80072f6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80072fa:	2200      	movs	r2, #0
 80072fc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8007300:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8007304:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 8007308:	4642      	mov	r2, r8
 800730a:	464b      	mov	r3, r9
 800730c:	1891      	adds	r1, r2, r2
 800730e:	6339      	str	r1, [r7, #48]	; 0x30
 8007310:	415b      	adcs	r3, r3
 8007312:	637b      	str	r3, [r7, #52]	; 0x34
 8007314:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007318:	4641      	mov	r1, r8
 800731a:	1851      	adds	r1, r2, r1
 800731c:	62b9      	str	r1, [r7, #40]	; 0x28
 800731e:	4649      	mov	r1, r9
 8007320:	414b      	adcs	r3, r1
 8007322:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007324:	f04f 0200 	mov.w	r2, #0
 8007328:	f04f 0300 	mov.w	r3, #0
 800732c:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 8007330:	4659      	mov	r1, fp
 8007332:	00cb      	lsls	r3, r1, #3
 8007334:	4651      	mov	r1, sl
 8007336:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800733a:	4651      	mov	r1, sl
 800733c:	00ca      	lsls	r2, r1, #3
 800733e:	4610      	mov	r0, r2
 8007340:	4619      	mov	r1, r3
 8007342:	4603      	mov	r3, r0
 8007344:	4642      	mov	r2, r8
 8007346:	189b      	adds	r3, r3, r2
 8007348:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800734c:	464b      	mov	r3, r9
 800734e:	460a      	mov	r2, r1
 8007350:	eb42 0303 	adc.w	r3, r2, r3
 8007354:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8007358:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	2200      	movs	r2, #0
 8007360:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007364:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8007368:	f04f 0200 	mov.w	r2, #0
 800736c:	f04f 0300 	mov.w	r3, #0
 8007370:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 8007374:	4649      	mov	r1, r9
 8007376:	008b      	lsls	r3, r1, #2
 8007378:	4641      	mov	r1, r8
 800737a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800737e:	4641      	mov	r1, r8
 8007380:	008a      	lsls	r2, r1, #2
 8007382:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8007386:	f7f9 fb51 	bl	8000a2c <__aeabi_uldivmod>
 800738a:	4602      	mov	r2, r0
 800738c:	460b      	mov	r3, r1
 800738e:	4b0d      	ldr	r3, [pc, #52]	; (80073c4 <UART_SetConfig+0x770>)
 8007390:	fba3 1302 	umull	r1, r3, r3, r2
 8007394:	095b      	lsrs	r3, r3, #5
 8007396:	2164      	movs	r1, #100	; 0x64
 8007398:	fb01 f303 	mul.w	r3, r1, r3
 800739c:	1ad3      	subs	r3, r2, r3
 800739e:	011b      	lsls	r3, r3, #4
 80073a0:	3332      	adds	r3, #50	; 0x32
 80073a2:	4a08      	ldr	r2, [pc, #32]	; (80073c4 <UART_SetConfig+0x770>)
 80073a4:	fba2 2303 	umull	r2, r3, r2, r3
 80073a8:	095b      	lsrs	r3, r3, #5
 80073aa:	f003 020f 	and.w	r2, r3, #15
 80073ae:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4422      	add	r2, r4
 80073b6:	609a      	str	r2, [r3, #8]
 80073b8:	e112      	b.n	80075e0 <UART_SetConfig+0x98c>
 80073ba:	bf00      	nop
 80073bc:	40011000 	.word	0x40011000
 80073c0:	40011400 	.word	0x40011400
 80073c4:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 80073c8:	f7fd ff64 	bl	8005294 <HAL_RCC_GetPCLK1Freq>
 80073cc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80073d0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80073d4:	2200      	movs	r2, #0
 80073d6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80073da:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80073de:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 80073e2:	4642      	mov	r2, r8
 80073e4:	464b      	mov	r3, r9
 80073e6:	1891      	adds	r1, r2, r2
 80073e8:	6239      	str	r1, [r7, #32]
 80073ea:	415b      	adcs	r3, r3
 80073ec:	627b      	str	r3, [r7, #36]	; 0x24
 80073ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80073f2:	4641      	mov	r1, r8
 80073f4:	1854      	adds	r4, r2, r1
 80073f6:	4649      	mov	r1, r9
 80073f8:	eb43 0501 	adc.w	r5, r3, r1
 80073fc:	f04f 0200 	mov.w	r2, #0
 8007400:	f04f 0300 	mov.w	r3, #0
 8007404:	00eb      	lsls	r3, r5, #3
 8007406:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800740a:	00e2      	lsls	r2, r4, #3
 800740c:	4614      	mov	r4, r2
 800740e:	461d      	mov	r5, r3
 8007410:	4643      	mov	r3, r8
 8007412:	18e3      	adds	r3, r4, r3
 8007414:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007418:	464b      	mov	r3, r9
 800741a:	eb45 0303 	adc.w	r3, r5, r3
 800741e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007422:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	2200      	movs	r2, #0
 800742a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800742e:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8007432:	f04f 0200 	mov.w	r2, #0
 8007436:	f04f 0300 	mov.w	r3, #0
 800743a:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 800743e:	4629      	mov	r1, r5
 8007440:	008b      	lsls	r3, r1, #2
 8007442:	4621      	mov	r1, r4
 8007444:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007448:	4621      	mov	r1, r4
 800744a:	008a      	lsls	r2, r1, #2
 800744c:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8007450:	f7f9 faec 	bl	8000a2c <__aeabi_uldivmod>
 8007454:	4602      	mov	r2, r0
 8007456:	460b      	mov	r3, r1
 8007458:	4b64      	ldr	r3, [pc, #400]	; (80075ec <UART_SetConfig+0x998>)
 800745a:	fba3 2302 	umull	r2, r3, r3, r2
 800745e:	095b      	lsrs	r3, r3, #5
 8007460:	011c      	lsls	r4, r3, #4
 8007462:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007466:	2200      	movs	r2, #0
 8007468:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800746c:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8007470:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 8007474:	4642      	mov	r2, r8
 8007476:	464b      	mov	r3, r9
 8007478:	1891      	adds	r1, r2, r2
 800747a:	61b9      	str	r1, [r7, #24]
 800747c:	415b      	adcs	r3, r3
 800747e:	61fb      	str	r3, [r7, #28]
 8007480:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007484:	4641      	mov	r1, r8
 8007486:	1851      	adds	r1, r2, r1
 8007488:	6139      	str	r1, [r7, #16]
 800748a:	4649      	mov	r1, r9
 800748c:	414b      	adcs	r3, r1
 800748e:	617b      	str	r3, [r7, #20]
 8007490:	f04f 0200 	mov.w	r2, #0
 8007494:	f04f 0300 	mov.w	r3, #0
 8007498:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800749c:	4659      	mov	r1, fp
 800749e:	00cb      	lsls	r3, r1, #3
 80074a0:	4651      	mov	r1, sl
 80074a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80074a6:	4651      	mov	r1, sl
 80074a8:	00ca      	lsls	r2, r1, #3
 80074aa:	4610      	mov	r0, r2
 80074ac:	4619      	mov	r1, r3
 80074ae:	4603      	mov	r3, r0
 80074b0:	4642      	mov	r2, r8
 80074b2:	189b      	adds	r3, r3, r2
 80074b4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80074b8:	464b      	mov	r3, r9
 80074ba:	460a      	mov	r2, r1
 80074bc:	eb42 0303 	adc.w	r3, r2, r3
 80074c0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80074c4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80074c8:	685b      	ldr	r3, [r3, #4]
 80074ca:	2200      	movs	r2, #0
 80074cc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80074d0:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80074d4:	f04f 0200 	mov.w	r2, #0
 80074d8:	f04f 0300 	mov.w	r3, #0
 80074dc:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 80074e0:	4649      	mov	r1, r9
 80074e2:	008b      	lsls	r3, r1, #2
 80074e4:	4641      	mov	r1, r8
 80074e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80074ea:	4641      	mov	r1, r8
 80074ec:	008a      	lsls	r2, r1, #2
 80074ee:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 80074f2:	f7f9 fa9b 	bl	8000a2c <__aeabi_uldivmod>
 80074f6:	4602      	mov	r2, r0
 80074f8:	460b      	mov	r3, r1
 80074fa:	4b3c      	ldr	r3, [pc, #240]	; (80075ec <UART_SetConfig+0x998>)
 80074fc:	fba3 1302 	umull	r1, r3, r3, r2
 8007500:	095b      	lsrs	r3, r3, #5
 8007502:	2164      	movs	r1, #100	; 0x64
 8007504:	fb01 f303 	mul.w	r3, r1, r3
 8007508:	1ad3      	subs	r3, r2, r3
 800750a:	011b      	lsls	r3, r3, #4
 800750c:	3332      	adds	r3, #50	; 0x32
 800750e:	4a37      	ldr	r2, [pc, #220]	; (80075ec <UART_SetConfig+0x998>)
 8007510:	fba2 2303 	umull	r2, r3, r2, r3
 8007514:	095b      	lsrs	r3, r3, #5
 8007516:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800751a:	441c      	add	r4, r3
 800751c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007520:	2200      	movs	r2, #0
 8007522:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007526:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800752a:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 800752e:	4642      	mov	r2, r8
 8007530:	464b      	mov	r3, r9
 8007532:	1891      	adds	r1, r2, r2
 8007534:	60b9      	str	r1, [r7, #8]
 8007536:	415b      	adcs	r3, r3
 8007538:	60fb      	str	r3, [r7, #12]
 800753a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800753e:	4641      	mov	r1, r8
 8007540:	1851      	adds	r1, r2, r1
 8007542:	6039      	str	r1, [r7, #0]
 8007544:	4649      	mov	r1, r9
 8007546:	414b      	adcs	r3, r1
 8007548:	607b      	str	r3, [r7, #4]
 800754a:	f04f 0200 	mov.w	r2, #0
 800754e:	f04f 0300 	mov.w	r3, #0
 8007552:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007556:	4659      	mov	r1, fp
 8007558:	00cb      	lsls	r3, r1, #3
 800755a:	4651      	mov	r1, sl
 800755c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007560:	4651      	mov	r1, sl
 8007562:	00ca      	lsls	r2, r1, #3
 8007564:	4610      	mov	r0, r2
 8007566:	4619      	mov	r1, r3
 8007568:	4603      	mov	r3, r0
 800756a:	4642      	mov	r2, r8
 800756c:	189b      	adds	r3, r3, r2
 800756e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007572:	464b      	mov	r3, r9
 8007574:	460a      	mov	r2, r1
 8007576:	eb42 0303 	adc.w	r3, r2, r3
 800757a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800757e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	2200      	movs	r2, #0
 8007586:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800758a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800758e:	f04f 0200 	mov.w	r2, #0
 8007592:	f04f 0300 	mov.w	r3, #0
 8007596:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 800759a:	4649      	mov	r1, r9
 800759c:	008b      	lsls	r3, r1, #2
 800759e:	4641      	mov	r1, r8
 80075a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80075a4:	4641      	mov	r1, r8
 80075a6:	008a      	lsls	r2, r1, #2
 80075a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80075ac:	f7f9 fa3e 	bl	8000a2c <__aeabi_uldivmod>
 80075b0:	4602      	mov	r2, r0
 80075b2:	460b      	mov	r3, r1
 80075b4:	4b0d      	ldr	r3, [pc, #52]	; (80075ec <UART_SetConfig+0x998>)
 80075b6:	fba3 1302 	umull	r1, r3, r3, r2
 80075ba:	095b      	lsrs	r3, r3, #5
 80075bc:	2164      	movs	r1, #100	; 0x64
 80075be:	fb01 f303 	mul.w	r3, r1, r3
 80075c2:	1ad3      	subs	r3, r2, r3
 80075c4:	011b      	lsls	r3, r3, #4
 80075c6:	3332      	adds	r3, #50	; 0x32
 80075c8:	4a08      	ldr	r2, [pc, #32]	; (80075ec <UART_SetConfig+0x998>)
 80075ca:	fba2 2303 	umull	r2, r3, r2, r3
 80075ce:	095b      	lsrs	r3, r3, #5
 80075d0:	f003 020f 	and.w	r2, r3, #15
 80075d4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4422      	add	r2, r4
 80075dc:	609a      	str	r2, [r3, #8]
}
 80075de:	e7ff      	b.n	80075e0 <UART_SetConfig+0x98c>
 80075e0:	bf00      	nop
 80075e2:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80075e6:	46bd      	mov	sp, r7
 80075e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80075ec:	51eb851f 	.word	0x51eb851f

080075f0 <__libc_init_array>:
 80075f0:	b570      	push	{r4, r5, r6, lr}
 80075f2:	4d0d      	ldr	r5, [pc, #52]	; (8007628 <__libc_init_array+0x38>)
 80075f4:	4c0d      	ldr	r4, [pc, #52]	; (800762c <__libc_init_array+0x3c>)
 80075f6:	1b64      	subs	r4, r4, r5
 80075f8:	10a4      	asrs	r4, r4, #2
 80075fa:	2600      	movs	r6, #0
 80075fc:	42a6      	cmp	r6, r4
 80075fe:	d109      	bne.n	8007614 <__libc_init_array+0x24>
 8007600:	4d0b      	ldr	r5, [pc, #44]	; (8007630 <__libc_init_array+0x40>)
 8007602:	4c0c      	ldr	r4, [pc, #48]	; (8007634 <__libc_init_array+0x44>)
 8007604:	f000 fdc0 	bl	8008188 <_init>
 8007608:	1b64      	subs	r4, r4, r5
 800760a:	10a4      	asrs	r4, r4, #2
 800760c:	2600      	movs	r6, #0
 800760e:	42a6      	cmp	r6, r4
 8007610:	d105      	bne.n	800761e <__libc_init_array+0x2e>
 8007612:	bd70      	pop	{r4, r5, r6, pc}
 8007614:	f855 3b04 	ldr.w	r3, [r5], #4
 8007618:	4798      	blx	r3
 800761a:	3601      	adds	r6, #1
 800761c:	e7ee      	b.n	80075fc <__libc_init_array+0xc>
 800761e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007622:	4798      	blx	r3
 8007624:	3601      	adds	r6, #1
 8007626:	e7f2      	b.n	800760e <__libc_init_array+0x1e>
 8007628:	08008590 	.word	0x08008590
 800762c:	08008590 	.word	0x08008590
 8007630:	08008590 	.word	0x08008590
 8007634:	08008594 	.word	0x08008594

08007638 <memset>:
 8007638:	4402      	add	r2, r0
 800763a:	4603      	mov	r3, r0
 800763c:	4293      	cmp	r3, r2
 800763e:	d100      	bne.n	8007642 <memset+0xa>
 8007640:	4770      	bx	lr
 8007642:	f803 1b01 	strb.w	r1, [r3], #1
 8007646:	e7f9      	b.n	800763c <memset+0x4>

08007648 <cosf>:
 8007648:	ee10 3a10 	vmov	r3, s0
 800764c:	b507      	push	{r0, r1, r2, lr}
 800764e:	4a1e      	ldr	r2, [pc, #120]	; (80076c8 <cosf+0x80>)
 8007650:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007654:	4293      	cmp	r3, r2
 8007656:	dc06      	bgt.n	8007666 <cosf+0x1e>
 8007658:	eddf 0a1c 	vldr	s1, [pc, #112]	; 80076cc <cosf+0x84>
 800765c:	b003      	add	sp, #12
 800765e:	f85d eb04 	ldr.w	lr, [sp], #4
 8007662:	f000 b9b7 	b.w	80079d4 <__kernel_cosf>
 8007666:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800766a:	db04      	blt.n	8007676 <cosf+0x2e>
 800766c:	ee30 0a40 	vsub.f32	s0, s0, s0
 8007670:	b003      	add	sp, #12
 8007672:	f85d fb04 	ldr.w	pc, [sp], #4
 8007676:	4668      	mov	r0, sp
 8007678:	f000 f870 	bl	800775c <__ieee754_rem_pio2f>
 800767c:	f000 0003 	and.w	r0, r0, #3
 8007680:	2801      	cmp	r0, #1
 8007682:	d009      	beq.n	8007698 <cosf+0x50>
 8007684:	2802      	cmp	r0, #2
 8007686:	d010      	beq.n	80076aa <cosf+0x62>
 8007688:	b9b0      	cbnz	r0, 80076b8 <cosf+0x70>
 800768a:	eddd 0a01 	vldr	s1, [sp, #4]
 800768e:	ed9d 0a00 	vldr	s0, [sp]
 8007692:	f000 f99f 	bl	80079d4 <__kernel_cosf>
 8007696:	e7eb      	b.n	8007670 <cosf+0x28>
 8007698:	eddd 0a01 	vldr	s1, [sp, #4]
 800769c:	ed9d 0a00 	vldr	s0, [sp]
 80076a0:	f000 fc6e 	bl	8007f80 <__kernel_sinf>
 80076a4:	eeb1 0a40 	vneg.f32	s0, s0
 80076a8:	e7e2      	b.n	8007670 <cosf+0x28>
 80076aa:	eddd 0a01 	vldr	s1, [sp, #4]
 80076ae:	ed9d 0a00 	vldr	s0, [sp]
 80076b2:	f000 f98f 	bl	80079d4 <__kernel_cosf>
 80076b6:	e7f5      	b.n	80076a4 <cosf+0x5c>
 80076b8:	eddd 0a01 	vldr	s1, [sp, #4]
 80076bc:	ed9d 0a00 	vldr	s0, [sp]
 80076c0:	2001      	movs	r0, #1
 80076c2:	f000 fc5d 	bl	8007f80 <__kernel_sinf>
 80076c6:	e7d3      	b.n	8007670 <cosf+0x28>
 80076c8:	3f490fd8 	.word	0x3f490fd8
 80076cc:	00000000 	.word	0x00000000

080076d0 <sinf>:
 80076d0:	ee10 3a10 	vmov	r3, s0
 80076d4:	b507      	push	{r0, r1, r2, lr}
 80076d6:	4a1f      	ldr	r2, [pc, #124]	; (8007754 <sinf+0x84>)
 80076d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80076dc:	4293      	cmp	r3, r2
 80076de:	dc07      	bgt.n	80076f0 <sinf+0x20>
 80076e0:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8007758 <sinf+0x88>
 80076e4:	2000      	movs	r0, #0
 80076e6:	b003      	add	sp, #12
 80076e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80076ec:	f000 bc48 	b.w	8007f80 <__kernel_sinf>
 80076f0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80076f4:	db04      	blt.n	8007700 <sinf+0x30>
 80076f6:	ee30 0a40 	vsub.f32	s0, s0, s0
 80076fa:	b003      	add	sp, #12
 80076fc:	f85d fb04 	ldr.w	pc, [sp], #4
 8007700:	4668      	mov	r0, sp
 8007702:	f000 f82b 	bl	800775c <__ieee754_rem_pio2f>
 8007706:	f000 0003 	and.w	r0, r0, #3
 800770a:	2801      	cmp	r0, #1
 800770c:	d00a      	beq.n	8007724 <sinf+0x54>
 800770e:	2802      	cmp	r0, #2
 8007710:	d00f      	beq.n	8007732 <sinf+0x62>
 8007712:	b9c0      	cbnz	r0, 8007746 <sinf+0x76>
 8007714:	eddd 0a01 	vldr	s1, [sp, #4]
 8007718:	ed9d 0a00 	vldr	s0, [sp]
 800771c:	2001      	movs	r0, #1
 800771e:	f000 fc2f 	bl	8007f80 <__kernel_sinf>
 8007722:	e7ea      	b.n	80076fa <sinf+0x2a>
 8007724:	eddd 0a01 	vldr	s1, [sp, #4]
 8007728:	ed9d 0a00 	vldr	s0, [sp]
 800772c:	f000 f952 	bl	80079d4 <__kernel_cosf>
 8007730:	e7e3      	b.n	80076fa <sinf+0x2a>
 8007732:	eddd 0a01 	vldr	s1, [sp, #4]
 8007736:	ed9d 0a00 	vldr	s0, [sp]
 800773a:	2001      	movs	r0, #1
 800773c:	f000 fc20 	bl	8007f80 <__kernel_sinf>
 8007740:	eeb1 0a40 	vneg.f32	s0, s0
 8007744:	e7d9      	b.n	80076fa <sinf+0x2a>
 8007746:	eddd 0a01 	vldr	s1, [sp, #4]
 800774a:	ed9d 0a00 	vldr	s0, [sp]
 800774e:	f000 f941 	bl	80079d4 <__kernel_cosf>
 8007752:	e7f5      	b.n	8007740 <sinf+0x70>
 8007754:	3f490fd8 	.word	0x3f490fd8
 8007758:	00000000 	.word	0x00000000

0800775c <__ieee754_rem_pio2f>:
 800775c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800775e:	ee10 6a10 	vmov	r6, s0
 8007762:	4b8e      	ldr	r3, [pc, #568]	; (800799c <__ieee754_rem_pio2f+0x240>)
 8007764:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8007768:	429d      	cmp	r5, r3
 800776a:	b087      	sub	sp, #28
 800776c:	eef0 7a40 	vmov.f32	s15, s0
 8007770:	4604      	mov	r4, r0
 8007772:	dc05      	bgt.n	8007780 <__ieee754_rem_pio2f+0x24>
 8007774:	2300      	movs	r3, #0
 8007776:	ed80 0a00 	vstr	s0, [r0]
 800777a:	6043      	str	r3, [r0, #4]
 800777c:	2000      	movs	r0, #0
 800777e:	e01a      	b.n	80077b6 <__ieee754_rem_pio2f+0x5a>
 8007780:	4b87      	ldr	r3, [pc, #540]	; (80079a0 <__ieee754_rem_pio2f+0x244>)
 8007782:	429d      	cmp	r5, r3
 8007784:	dc46      	bgt.n	8007814 <__ieee754_rem_pio2f+0xb8>
 8007786:	2e00      	cmp	r6, #0
 8007788:	ed9f 0a86 	vldr	s0, [pc, #536]	; 80079a4 <__ieee754_rem_pio2f+0x248>
 800778c:	4b86      	ldr	r3, [pc, #536]	; (80079a8 <__ieee754_rem_pio2f+0x24c>)
 800778e:	f025 050f 	bic.w	r5, r5, #15
 8007792:	dd1f      	ble.n	80077d4 <__ieee754_rem_pio2f+0x78>
 8007794:	429d      	cmp	r5, r3
 8007796:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800779a:	d00e      	beq.n	80077ba <__ieee754_rem_pio2f+0x5e>
 800779c:	ed9f 7a83 	vldr	s14, [pc, #524]	; 80079ac <__ieee754_rem_pio2f+0x250>
 80077a0:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80077a4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80077a8:	ed80 0a00 	vstr	s0, [r0]
 80077ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80077b0:	2001      	movs	r0, #1
 80077b2:	edc4 7a01 	vstr	s15, [r4, #4]
 80077b6:	b007      	add	sp, #28
 80077b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077ba:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 80079b0 <__ieee754_rem_pio2f+0x254>
 80077be:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 80079b4 <__ieee754_rem_pio2f+0x258>
 80077c2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80077c6:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80077ca:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80077ce:	edc0 6a00 	vstr	s13, [r0]
 80077d2:	e7eb      	b.n	80077ac <__ieee754_rem_pio2f+0x50>
 80077d4:	429d      	cmp	r5, r3
 80077d6:	ee77 7a80 	vadd.f32	s15, s15, s0
 80077da:	d00e      	beq.n	80077fa <__ieee754_rem_pio2f+0x9e>
 80077dc:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80079ac <__ieee754_rem_pio2f+0x250>
 80077e0:	ee37 0a87 	vadd.f32	s0, s15, s14
 80077e4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80077e8:	ed80 0a00 	vstr	s0, [r0]
 80077ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 80077f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80077f4:	edc4 7a01 	vstr	s15, [r4, #4]
 80077f8:	e7dd      	b.n	80077b6 <__ieee754_rem_pio2f+0x5a>
 80077fa:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 80079b0 <__ieee754_rem_pio2f+0x254>
 80077fe:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80079b4 <__ieee754_rem_pio2f+0x258>
 8007802:	ee77 7a80 	vadd.f32	s15, s15, s0
 8007806:	ee77 6a87 	vadd.f32	s13, s15, s14
 800780a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800780e:	edc0 6a00 	vstr	s13, [r0]
 8007812:	e7eb      	b.n	80077ec <__ieee754_rem_pio2f+0x90>
 8007814:	4b68      	ldr	r3, [pc, #416]	; (80079b8 <__ieee754_rem_pio2f+0x25c>)
 8007816:	429d      	cmp	r5, r3
 8007818:	dc72      	bgt.n	8007900 <__ieee754_rem_pio2f+0x1a4>
 800781a:	f000 fbf9 	bl	8008010 <fabsf>
 800781e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80079bc <__ieee754_rem_pio2f+0x260>
 8007822:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8007826:	eee0 7a07 	vfma.f32	s15, s0, s14
 800782a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800782e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007832:	ee17 0a90 	vmov	r0, s15
 8007836:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80079a4 <__ieee754_rem_pio2f+0x248>
 800783a:	eea7 0a67 	vfms.f32	s0, s14, s15
 800783e:	281f      	cmp	r0, #31
 8007840:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80079ac <__ieee754_rem_pio2f+0x250>
 8007844:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007848:	eeb1 6a47 	vneg.f32	s12, s14
 800784c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8007850:	ee16 2a90 	vmov	r2, s13
 8007854:	dc1c      	bgt.n	8007890 <__ieee754_rem_pio2f+0x134>
 8007856:	495a      	ldr	r1, [pc, #360]	; (80079c0 <__ieee754_rem_pio2f+0x264>)
 8007858:	1e47      	subs	r7, r0, #1
 800785a:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800785e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8007862:	428b      	cmp	r3, r1
 8007864:	d014      	beq.n	8007890 <__ieee754_rem_pio2f+0x134>
 8007866:	6022      	str	r2, [r4, #0]
 8007868:	ed94 7a00 	vldr	s14, [r4]
 800786c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8007870:	2e00      	cmp	r6, #0
 8007872:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007876:	ed84 0a01 	vstr	s0, [r4, #4]
 800787a:	da9c      	bge.n	80077b6 <__ieee754_rem_pio2f+0x5a>
 800787c:	eeb1 7a47 	vneg.f32	s14, s14
 8007880:	eeb1 0a40 	vneg.f32	s0, s0
 8007884:	ed84 7a00 	vstr	s14, [r4]
 8007888:	ed84 0a01 	vstr	s0, [r4, #4]
 800788c:	4240      	negs	r0, r0
 800788e:	e792      	b.n	80077b6 <__ieee754_rem_pio2f+0x5a>
 8007890:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8007894:	15eb      	asrs	r3, r5, #23
 8007896:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800789a:	2d08      	cmp	r5, #8
 800789c:	dde3      	ble.n	8007866 <__ieee754_rem_pio2f+0x10a>
 800789e:	eddf 7a44 	vldr	s15, [pc, #272]	; 80079b0 <__ieee754_rem_pio2f+0x254>
 80078a2:	eddf 5a44 	vldr	s11, [pc, #272]	; 80079b4 <__ieee754_rem_pio2f+0x258>
 80078a6:	eef0 6a40 	vmov.f32	s13, s0
 80078aa:	eee6 6a27 	vfma.f32	s13, s12, s15
 80078ae:	ee30 0a66 	vsub.f32	s0, s0, s13
 80078b2:	eea6 0a27 	vfma.f32	s0, s12, s15
 80078b6:	eef0 7a40 	vmov.f32	s15, s0
 80078ba:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80078be:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80078c2:	ee15 2a90 	vmov	r2, s11
 80078c6:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80078ca:	1a5b      	subs	r3, r3, r1
 80078cc:	2b19      	cmp	r3, #25
 80078ce:	dc04      	bgt.n	80078da <__ieee754_rem_pio2f+0x17e>
 80078d0:	edc4 5a00 	vstr	s11, [r4]
 80078d4:	eeb0 0a66 	vmov.f32	s0, s13
 80078d8:	e7c6      	b.n	8007868 <__ieee754_rem_pio2f+0x10c>
 80078da:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80079c4 <__ieee754_rem_pio2f+0x268>
 80078de:	eeb0 0a66 	vmov.f32	s0, s13
 80078e2:	eea6 0a25 	vfma.f32	s0, s12, s11
 80078e6:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80078ea:	eddf 6a37 	vldr	s13, [pc, #220]	; 80079c8 <__ieee754_rem_pio2f+0x26c>
 80078ee:	eee6 7a25 	vfma.f32	s15, s12, s11
 80078f2:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80078f6:	ee30 7a67 	vsub.f32	s14, s0, s15
 80078fa:	ed84 7a00 	vstr	s14, [r4]
 80078fe:	e7b3      	b.n	8007868 <__ieee754_rem_pio2f+0x10c>
 8007900:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8007904:	db06      	blt.n	8007914 <__ieee754_rem_pio2f+0x1b8>
 8007906:	ee70 7a40 	vsub.f32	s15, s0, s0
 800790a:	edc0 7a01 	vstr	s15, [r0, #4]
 800790e:	edc0 7a00 	vstr	s15, [r0]
 8007912:	e733      	b.n	800777c <__ieee754_rem_pio2f+0x20>
 8007914:	15ea      	asrs	r2, r5, #23
 8007916:	3a86      	subs	r2, #134	; 0x86
 8007918:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800791c:	ee07 3a90 	vmov	s15, r3
 8007920:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007924:	eddf 6a29 	vldr	s13, [pc, #164]	; 80079cc <__ieee754_rem_pio2f+0x270>
 8007928:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800792c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007930:	ed8d 7a03 	vstr	s14, [sp, #12]
 8007934:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007938:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800793c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007940:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007944:	ed8d 7a04 	vstr	s14, [sp, #16]
 8007948:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800794c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007954:	edcd 7a05 	vstr	s15, [sp, #20]
 8007958:	d11e      	bne.n	8007998 <__ieee754_rem_pio2f+0x23c>
 800795a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800795e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007962:	bf14      	ite	ne
 8007964:	2302      	movne	r3, #2
 8007966:	2301      	moveq	r3, #1
 8007968:	4919      	ldr	r1, [pc, #100]	; (80079d0 <__ieee754_rem_pio2f+0x274>)
 800796a:	9101      	str	r1, [sp, #4]
 800796c:	2102      	movs	r1, #2
 800796e:	9100      	str	r1, [sp, #0]
 8007970:	a803      	add	r0, sp, #12
 8007972:	4621      	mov	r1, r4
 8007974:	f000 f88e 	bl	8007a94 <__kernel_rem_pio2f>
 8007978:	2e00      	cmp	r6, #0
 800797a:	f6bf af1c 	bge.w	80077b6 <__ieee754_rem_pio2f+0x5a>
 800797e:	edd4 7a00 	vldr	s15, [r4]
 8007982:	eef1 7a67 	vneg.f32	s15, s15
 8007986:	edc4 7a00 	vstr	s15, [r4]
 800798a:	edd4 7a01 	vldr	s15, [r4, #4]
 800798e:	eef1 7a67 	vneg.f32	s15, s15
 8007992:	edc4 7a01 	vstr	s15, [r4, #4]
 8007996:	e779      	b.n	800788c <__ieee754_rem_pio2f+0x130>
 8007998:	2303      	movs	r3, #3
 800799a:	e7e5      	b.n	8007968 <__ieee754_rem_pio2f+0x20c>
 800799c:	3f490fd8 	.word	0x3f490fd8
 80079a0:	4016cbe3 	.word	0x4016cbe3
 80079a4:	3fc90f80 	.word	0x3fc90f80
 80079a8:	3fc90fd0 	.word	0x3fc90fd0
 80079ac:	37354443 	.word	0x37354443
 80079b0:	37354400 	.word	0x37354400
 80079b4:	2e85a308 	.word	0x2e85a308
 80079b8:	43490f80 	.word	0x43490f80
 80079bc:	3f22f984 	.word	0x3f22f984
 80079c0:	080081b8 	.word	0x080081b8
 80079c4:	2e85a300 	.word	0x2e85a300
 80079c8:	248d3132 	.word	0x248d3132
 80079cc:	43800000 	.word	0x43800000
 80079d0:	08008238 	.word	0x08008238

080079d4 <__kernel_cosf>:
 80079d4:	ee10 3a10 	vmov	r3, s0
 80079d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80079dc:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80079e0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80079e4:	da05      	bge.n	80079f2 <__kernel_cosf+0x1e>
 80079e6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80079ea:	ee17 2a90 	vmov	r2, s15
 80079ee:	2a00      	cmp	r2, #0
 80079f0:	d03d      	beq.n	8007a6e <__kernel_cosf+0x9a>
 80079f2:	ee60 5a00 	vmul.f32	s11, s0, s0
 80079f6:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8007a74 <__kernel_cosf+0xa0>
 80079fa:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8007a78 <__kernel_cosf+0xa4>
 80079fe:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8007a7c <__kernel_cosf+0xa8>
 8007a02:	4a1f      	ldr	r2, [pc, #124]	; (8007a80 <__kernel_cosf+0xac>)
 8007a04:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8007a84 <__kernel_cosf+0xb0>
 8007a0e:	eee7 7a25 	vfma.f32	s15, s14, s11
 8007a12:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8007a88 <__kernel_cosf+0xb4>
 8007a16:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8007a1a:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8007a8c <__kernel_cosf+0xb8>
 8007a1e:	eee7 7a25 	vfma.f32	s15, s14, s11
 8007a22:	eeb0 7a66 	vmov.f32	s14, s13
 8007a26:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8007a2a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8007a2e:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8007a32:	ee67 6a25 	vmul.f32	s13, s14, s11
 8007a36:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8007a3a:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8007a3e:	dc04      	bgt.n	8007a4a <__kernel_cosf+0x76>
 8007a40:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8007a44:	ee36 0a47 	vsub.f32	s0, s12, s14
 8007a48:	4770      	bx	lr
 8007a4a:	4a11      	ldr	r2, [pc, #68]	; (8007a90 <__kernel_cosf+0xbc>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	bfda      	itte	le
 8007a50:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8007a54:	ee06 3a90 	vmovle	s13, r3
 8007a58:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8007a5c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007a60:	ee36 0a66 	vsub.f32	s0, s12, s13
 8007a64:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007a68:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007a6c:	4770      	bx	lr
 8007a6e:	eeb0 0a46 	vmov.f32	s0, s12
 8007a72:	4770      	bx	lr
 8007a74:	ad47d74e 	.word	0xad47d74e
 8007a78:	310f74f6 	.word	0x310f74f6
 8007a7c:	3d2aaaab 	.word	0x3d2aaaab
 8007a80:	3e999999 	.word	0x3e999999
 8007a84:	b493f27c 	.word	0xb493f27c
 8007a88:	37d00d01 	.word	0x37d00d01
 8007a8c:	bab60b61 	.word	0xbab60b61
 8007a90:	3f480000 	.word	0x3f480000

08007a94 <__kernel_rem_pio2f>:
 8007a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a98:	ed2d 8b04 	vpush	{d8-d9}
 8007a9c:	b0d9      	sub	sp, #356	; 0x164
 8007a9e:	4688      	mov	r8, r1
 8007aa0:	9002      	str	r0, [sp, #8]
 8007aa2:	49bb      	ldr	r1, [pc, #748]	; (8007d90 <__kernel_rem_pio2f+0x2fc>)
 8007aa4:	9866      	ldr	r0, [sp, #408]	; 0x198
 8007aa6:	9301      	str	r3, [sp, #4]
 8007aa8:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8007aac:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 8007ab0:	1e59      	subs	r1, r3, #1
 8007ab2:	1d13      	adds	r3, r2, #4
 8007ab4:	db27      	blt.n	8007b06 <__kernel_rem_pio2f+0x72>
 8007ab6:	f1b2 0b03 	subs.w	fp, r2, #3
 8007aba:	bf48      	it	mi
 8007abc:	f102 0b04 	addmi.w	fp, r2, #4
 8007ac0:	ea4f 00eb 	mov.w	r0, fp, asr #3
 8007ac4:	1c45      	adds	r5, r0, #1
 8007ac6:	00ec      	lsls	r4, r5, #3
 8007ac8:	1a47      	subs	r7, r0, r1
 8007aca:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8007da0 <__kernel_rem_pio2f+0x30c>
 8007ace:	9403      	str	r4, [sp, #12]
 8007ad0:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8007ad4:	eb0a 0c01 	add.w	ip, sl, r1
 8007ad8:	ae1c      	add	r6, sp, #112	; 0x70
 8007ada:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 8007ade:	2400      	movs	r4, #0
 8007ae0:	4564      	cmp	r4, ip
 8007ae2:	dd12      	ble.n	8007b0a <__kernel_rem_pio2f+0x76>
 8007ae4:	9b01      	ldr	r3, [sp, #4]
 8007ae6:	ac1c      	add	r4, sp, #112	; 0x70
 8007ae8:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8007aec:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 8007af0:	f04f 0c00 	mov.w	ip, #0
 8007af4:	45d4      	cmp	ip, sl
 8007af6:	dc27      	bgt.n	8007b48 <__kernel_rem_pio2f+0xb4>
 8007af8:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8007afc:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8007da0 <__kernel_rem_pio2f+0x30c>
 8007b00:	4627      	mov	r7, r4
 8007b02:	2600      	movs	r6, #0
 8007b04:	e016      	b.n	8007b34 <__kernel_rem_pio2f+0xa0>
 8007b06:	2000      	movs	r0, #0
 8007b08:	e7dc      	b.n	8007ac4 <__kernel_rem_pio2f+0x30>
 8007b0a:	42e7      	cmn	r7, r4
 8007b0c:	bf5d      	ittte	pl
 8007b0e:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 8007b12:	ee07 3a90 	vmovpl	s15, r3
 8007b16:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8007b1a:	eef0 7a47 	vmovmi.f32	s15, s14
 8007b1e:	ece6 7a01 	vstmia	r6!, {s15}
 8007b22:	3401      	adds	r4, #1
 8007b24:	e7dc      	b.n	8007ae0 <__kernel_rem_pio2f+0x4c>
 8007b26:	ecf9 6a01 	vldmia	r9!, {s13}
 8007b2a:	ed97 7a00 	vldr	s14, [r7]
 8007b2e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007b32:	3601      	adds	r6, #1
 8007b34:	428e      	cmp	r6, r1
 8007b36:	f1a7 0704 	sub.w	r7, r7, #4
 8007b3a:	ddf4      	ble.n	8007b26 <__kernel_rem_pio2f+0x92>
 8007b3c:	eceb 7a01 	vstmia	fp!, {s15}
 8007b40:	f10c 0c01 	add.w	ip, ip, #1
 8007b44:	3404      	adds	r4, #4
 8007b46:	e7d5      	b.n	8007af4 <__kernel_rem_pio2f+0x60>
 8007b48:	ab08      	add	r3, sp, #32
 8007b4a:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8007b4e:	eddf 8a93 	vldr	s17, [pc, #588]	; 8007d9c <__kernel_rem_pio2f+0x308>
 8007b52:	ed9f 9a91 	vldr	s18, [pc, #580]	; 8007d98 <__kernel_rem_pio2f+0x304>
 8007b56:	9304      	str	r3, [sp, #16]
 8007b58:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 8007b5c:	4656      	mov	r6, sl
 8007b5e:	00b3      	lsls	r3, r6, #2
 8007b60:	9305      	str	r3, [sp, #20]
 8007b62:	ab58      	add	r3, sp, #352	; 0x160
 8007b64:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8007b68:	ac08      	add	r4, sp, #32
 8007b6a:	ab44      	add	r3, sp, #272	; 0x110
 8007b6c:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8007b70:	46a4      	mov	ip, r4
 8007b72:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8007b76:	4637      	mov	r7, r6
 8007b78:	2f00      	cmp	r7, #0
 8007b7a:	f1a0 0004 	sub.w	r0, r0, #4
 8007b7e:	dc4f      	bgt.n	8007c20 <__kernel_rem_pio2f+0x18c>
 8007b80:	4628      	mov	r0, r5
 8007b82:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8007b86:	f000 fa8d 	bl	80080a4 <scalbnf>
 8007b8a:	eeb0 8a40 	vmov.f32	s16, s0
 8007b8e:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8007b92:	ee28 0a00 	vmul.f32	s0, s16, s0
 8007b96:	f000 fa43 	bl	8008020 <floorf>
 8007b9a:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8007b9e:	eea0 8a67 	vfms.f32	s16, s0, s15
 8007ba2:	2d00      	cmp	r5, #0
 8007ba4:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8007ba8:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8007bac:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8007bb0:	ee17 9a90 	vmov	r9, s15
 8007bb4:	ee38 8a40 	vsub.f32	s16, s16, s0
 8007bb8:	dd44      	ble.n	8007c44 <__kernel_rem_pio2f+0x1b0>
 8007bba:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8007bbe:	ab08      	add	r3, sp, #32
 8007bc0:	f1c5 0e08 	rsb	lr, r5, #8
 8007bc4:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8007bc8:	fa47 f00e 	asr.w	r0, r7, lr
 8007bcc:	4481      	add	r9, r0
 8007bce:	fa00 f00e 	lsl.w	r0, r0, lr
 8007bd2:	1a3f      	subs	r7, r7, r0
 8007bd4:	f1c5 0007 	rsb	r0, r5, #7
 8007bd8:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8007bdc:	4107      	asrs	r7, r0
 8007bde:	2f00      	cmp	r7, #0
 8007be0:	dd3f      	ble.n	8007c62 <__kernel_rem_pio2f+0x1ce>
 8007be2:	f04f 0e00 	mov.w	lr, #0
 8007be6:	f109 0901 	add.w	r9, r9, #1
 8007bea:	4673      	mov	r3, lr
 8007bec:	4576      	cmp	r6, lr
 8007bee:	dc6b      	bgt.n	8007cc8 <__kernel_rem_pio2f+0x234>
 8007bf0:	2d00      	cmp	r5, #0
 8007bf2:	dd04      	ble.n	8007bfe <__kernel_rem_pio2f+0x16a>
 8007bf4:	2d01      	cmp	r5, #1
 8007bf6:	d078      	beq.n	8007cea <__kernel_rem_pio2f+0x256>
 8007bf8:	2d02      	cmp	r5, #2
 8007bfa:	f000 8081 	beq.w	8007d00 <__kernel_rem_pio2f+0x26c>
 8007bfe:	2f02      	cmp	r7, #2
 8007c00:	d12f      	bne.n	8007c62 <__kernel_rem_pio2f+0x1ce>
 8007c02:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007c06:	ee30 8a48 	vsub.f32	s16, s0, s16
 8007c0a:	b353      	cbz	r3, 8007c62 <__kernel_rem_pio2f+0x1ce>
 8007c0c:	4628      	mov	r0, r5
 8007c0e:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8007c12:	f000 fa47 	bl	80080a4 <scalbnf>
 8007c16:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8007c1a:	ee38 8a40 	vsub.f32	s16, s16, s0
 8007c1e:	e020      	b.n	8007c62 <__kernel_rem_pio2f+0x1ce>
 8007c20:	ee60 7a28 	vmul.f32	s15, s0, s17
 8007c24:	3f01      	subs	r7, #1
 8007c26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007c2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007c2e:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8007c32:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007c36:	ecac 0a01 	vstmia	ip!, {s0}
 8007c3a:	ed90 0a00 	vldr	s0, [r0]
 8007c3e:	ee37 0a80 	vadd.f32	s0, s15, s0
 8007c42:	e799      	b.n	8007b78 <__kernel_rem_pio2f+0xe4>
 8007c44:	d105      	bne.n	8007c52 <__kernel_rem_pio2f+0x1be>
 8007c46:	1e70      	subs	r0, r6, #1
 8007c48:	ab08      	add	r3, sp, #32
 8007c4a:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8007c4e:	11ff      	asrs	r7, r7, #7
 8007c50:	e7c5      	b.n	8007bde <__kernel_rem_pio2f+0x14a>
 8007c52:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8007c56:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8007c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c5e:	da31      	bge.n	8007cc4 <__kernel_rem_pio2f+0x230>
 8007c60:	2700      	movs	r7, #0
 8007c62:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8007c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c6a:	f040 809b 	bne.w	8007da4 <__kernel_rem_pio2f+0x310>
 8007c6e:	1e74      	subs	r4, r6, #1
 8007c70:	46a4      	mov	ip, r4
 8007c72:	2000      	movs	r0, #0
 8007c74:	45d4      	cmp	ip, sl
 8007c76:	da4a      	bge.n	8007d0e <__kernel_rem_pio2f+0x27a>
 8007c78:	2800      	cmp	r0, #0
 8007c7a:	d07a      	beq.n	8007d72 <__kernel_rem_pio2f+0x2de>
 8007c7c:	ab08      	add	r3, sp, #32
 8007c7e:	3d08      	subs	r5, #8
 8007c80:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	f000 8081 	beq.w	8007d8c <__kernel_rem_pio2f+0x2f8>
 8007c8a:	4628      	mov	r0, r5
 8007c8c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007c90:	00a5      	lsls	r5, r4, #2
 8007c92:	f000 fa07 	bl	80080a4 <scalbnf>
 8007c96:	aa44      	add	r2, sp, #272	; 0x110
 8007c98:	1d2b      	adds	r3, r5, #4
 8007c9a:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8007d9c <__kernel_rem_pio2f+0x308>
 8007c9e:	18d1      	adds	r1, r2, r3
 8007ca0:	4622      	mov	r2, r4
 8007ca2:	2a00      	cmp	r2, #0
 8007ca4:	f280 80ae 	bge.w	8007e04 <__kernel_rem_pio2f+0x370>
 8007ca8:	4622      	mov	r2, r4
 8007caa:	2a00      	cmp	r2, #0
 8007cac:	f2c0 80cc 	blt.w	8007e48 <__kernel_rem_pio2f+0x3b4>
 8007cb0:	a944      	add	r1, sp, #272	; 0x110
 8007cb2:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 8007cb6:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8007d94 <__kernel_rem_pio2f+0x300>
 8007cba:	eddf 7a39 	vldr	s15, [pc, #228]	; 8007da0 <__kernel_rem_pio2f+0x30c>
 8007cbe:	2000      	movs	r0, #0
 8007cc0:	1aa1      	subs	r1, r4, r2
 8007cc2:	e0b6      	b.n	8007e32 <__kernel_rem_pio2f+0x39e>
 8007cc4:	2702      	movs	r7, #2
 8007cc6:	e78c      	b.n	8007be2 <__kernel_rem_pio2f+0x14e>
 8007cc8:	6820      	ldr	r0, [r4, #0]
 8007cca:	b94b      	cbnz	r3, 8007ce0 <__kernel_rem_pio2f+0x24c>
 8007ccc:	b118      	cbz	r0, 8007cd6 <__kernel_rem_pio2f+0x242>
 8007cce:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8007cd2:	6020      	str	r0, [r4, #0]
 8007cd4:	2001      	movs	r0, #1
 8007cd6:	f10e 0e01 	add.w	lr, lr, #1
 8007cda:	3404      	adds	r4, #4
 8007cdc:	4603      	mov	r3, r0
 8007cde:	e785      	b.n	8007bec <__kernel_rem_pio2f+0x158>
 8007ce0:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8007ce4:	6020      	str	r0, [r4, #0]
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	e7f5      	b.n	8007cd6 <__kernel_rem_pio2f+0x242>
 8007cea:	1e74      	subs	r4, r6, #1
 8007cec:	a808      	add	r0, sp, #32
 8007cee:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8007cf2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8007cf6:	f10d 0c20 	add.w	ip, sp, #32
 8007cfa:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 8007cfe:	e77e      	b.n	8007bfe <__kernel_rem_pio2f+0x16a>
 8007d00:	1e74      	subs	r4, r6, #1
 8007d02:	a808      	add	r0, sp, #32
 8007d04:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8007d08:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8007d0c:	e7f3      	b.n	8007cf6 <__kernel_rem_pio2f+0x262>
 8007d0e:	ab08      	add	r3, sp, #32
 8007d10:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8007d14:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8007d18:	4318      	orrs	r0, r3
 8007d1a:	e7ab      	b.n	8007c74 <__kernel_rem_pio2f+0x1e0>
 8007d1c:	f10c 0c01 	add.w	ip, ip, #1
 8007d20:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 8007d24:	2c00      	cmp	r4, #0
 8007d26:	d0f9      	beq.n	8007d1c <__kernel_rem_pio2f+0x288>
 8007d28:	9b05      	ldr	r3, [sp, #20]
 8007d2a:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8007d2e:	eb0d 0003 	add.w	r0, sp, r3
 8007d32:	9b01      	ldr	r3, [sp, #4]
 8007d34:	18f4      	adds	r4, r6, r3
 8007d36:	ab1c      	add	r3, sp, #112	; 0x70
 8007d38:	1c77      	adds	r7, r6, #1
 8007d3a:	384c      	subs	r0, #76	; 0x4c
 8007d3c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007d40:	4466      	add	r6, ip
 8007d42:	42be      	cmp	r6, r7
 8007d44:	f6ff af0b 	blt.w	8007b5e <__kernel_rem_pio2f+0xca>
 8007d48:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8007d4c:	f8dd e008 	ldr.w	lr, [sp, #8]
 8007d50:	ee07 3a90 	vmov	s15, r3
 8007d54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007d58:	f04f 0c00 	mov.w	ip, #0
 8007d5c:	ece4 7a01 	vstmia	r4!, {s15}
 8007d60:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8007da0 <__kernel_rem_pio2f+0x30c>
 8007d64:	46a1      	mov	r9, r4
 8007d66:	458c      	cmp	ip, r1
 8007d68:	dd07      	ble.n	8007d7a <__kernel_rem_pio2f+0x2e6>
 8007d6a:	ece0 7a01 	vstmia	r0!, {s15}
 8007d6e:	3701      	adds	r7, #1
 8007d70:	e7e7      	b.n	8007d42 <__kernel_rem_pio2f+0x2ae>
 8007d72:	9804      	ldr	r0, [sp, #16]
 8007d74:	f04f 0c01 	mov.w	ip, #1
 8007d78:	e7d2      	b.n	8007d20 <__kernel_rem_pio2f+0x28c>
 8007d7a:	ecfe 6a01 	vldmia	lr!, {s13}
 8007d7e:	ed39 7a01 	vldmdb	r9!, {s14}
 8007d82:	f10c 0c01 	add.w	ip, ip, #1
 8007d86:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007d8a:	e7ec      	b.n	8007d66 <__kernel_rem_pio2f+0x2d2>
 8007d8c:	3c01      	subs	r4, #1
 8007d8e:	e775      	b.n	8007c7c <__kernel_rem_pio2f+0x1e8>
 8007d90:	0800857c 	.word	0x0800857c
 8007d94:	08008550 	.word	0x08008550
 8007d98:	43800000 	.word	0x43800000
 8007d9c:	3b800000 	.word	0x3b800000
 8007da0:	00000000 	.word	0x00000000
 8007da4:	9b03      	ldr	r3, [sp, #12]
 8007da6:	eeb0 0a48 	vmov.f32	s0, s16
 8007daa:	1a98      	subs	r0, r3, r2
 8007dac:	f000 f97a 	bl	80080a4 <scalbnf>
 8007db0:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8007d98 <__kernel_rem_pio2f+0x304>
 8007db4:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8007db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dbc:	db19      	blt.n	8007df2 <__kernel_rem_pio2f+0x35e>
 8007dbe:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8007d9c <__kernel_rem_pio2f+0x308>
 8007dc2:	ee60 7a27 	vmul.f32	s15, s0, s15
 8007dc6:	aa08      	add	r2, sp, #32
 8007dc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007dcc:	1c74      	adds	r4, r6, #1
 8007dce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007dd2:	3508      	adds	r5, #8
 8007dd4:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8007dd8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007ddc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007de0:	ee10 3a10 	vmov	r3, s0
 8007de4:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8007de8:	ee17 3a90 	vmov	r3, s15
 8007dec:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8007df0:	e74b      	b.n	8007c8a <__kernel_rem_pio2f+0x1f6>
 8007df2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007df6:	aa08      	add	r2, sp, #32
 8007df8:	ee10 3a10 	vmov	r3, s0
 8007dfc:	4634      	mov	r4, r6
 8007dfe:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8007e02:	e742      	b.n	8007c8a <__kernel_rem_pio2f+0x1f6>
 8007e04:	a808      	add	r0, sp, #32
 8007e06:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8007e0a:	9001      	str	r0, [sp, #4]
 8007e0c:	ee07 0a90 	vmov	s15, r0
 8007e10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007e14:	3a01      	subs	r2, #1
 8007e16:	ee67 7a80 	vmul.f32	s15, s15, s0
 8007e1a:	ee20 0a07 	vmul.f32	s0, s0, s14
 8007e1e:	ed61 7a01 	vstmdb	r1!, {s15}
 8007e22:	e73e      	b.n	8007ca2 <__kernel_rem_pio2f+0x20e>
 8007e24:	ecfc 6a01 	vldmia	ip!, {s13}
 8007e28:	ecb6 7a01 	vldmia	r6!, {s14}
 8007e2c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007e30:	3001      	adds	r0, #1
 8007e32:	4550      	cmp	r0, sl
 8007e34:	dc01      	bgt.n	8007e3a <__kernel_rem_pio2f+0x3a6>
 8007e36:	4288      	cmp	r0, r1
 8007e38:	ddf4      	ble.n	8007e24 <__kernel_rem_pio2f+0x390>
 8007e3a:	a858      	add	r0, sp, #352	; 0x160
 8007e3c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007e40:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8007e44:	3a01      	subs	r2, #1
 8007e46:	e730      	b.n	8007caa <__kernel_rem_pio2f+0x216>
 8007e48:	9a66      	ldr	r2, [sp, #408]	; 0x198
 8007e4a:	2a02      	cmp	r2, #2
 8007e4c:	dc09      	bgt.n	8007e62 <__kernel_rem_pio2f+0x3ce>
 8007e4e:	2a00      	cmp	r2, #0
 8007e50:	dc2a      	bgt.n	8007ea8 <__kernel_rem_pio2f+0x414>
 8007e52:	d043      	beq.n	8007edc <__kernel_rem_pio2f+0x448>
 8007e54:	f009 0007 	and.w	r0, r9, #7
 8007e58:	b059      	add	sp, #356	; 0x164
 8007e5a:	ecbd 8b04 	vpop	{d8-d9}
 8007e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e62:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8007e64:	2b03      	cmp	r3, #3
 8007e66:	d1f5      	bne.n	8007e54 <__kernel_rem_pio2f+0x3c0>
 8007e68:	ab30      	add	r3, sp, #192	; 0xc0
 8007e6a:	442b      	add	r3, r5
 8007e6c:	461a      	mov	r2, r3
 8007e6e:	4619      	mov	r1, r3
 8007e70:	4620      	mov	r0, r4
 8007e72:	2800      	cmp	r0, #0
 8007e74:	f1a1 0104 	sub.w	r1, r1, #4
 8007e78:	dc51      	bgt.n	8007f1e <__kernel_rem_pio2f+0x48a>
 8007e7a:	4621      	mov	r1, r4
 8007e7c:	2901      	cmp	r1, #1
 8007e7e:	f1a2 0204 	sub.w	r2, r2, #4
 8007e82:	dc5c      	bgt.n	8007f3e <__kernel_rem_pio2f+0x4aa>
 8007e84:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8007da0 <__kernel_rem_pio2f+0x30c>
 8007e88:	3304      	adds	r3, #4
 8007e8a:	2c01      	cmp	r4, #1
 8007e8c:	dc67      	bgt.n	8007f5e <__kernel_rem_pio2f+0x4ca>
 8007e8e:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8007e92:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8007e96:	2f00      	cmp	r7, #0
 8007e98:	d167      	bne.n	8007f6a <__kernel_rem_pio2f+0x4d6>
 8007e9a:	edc8 6a00 	vstr	s13, [r8]
 8007e9e:	ed88 7a01 	vstr	s14, [r8, #4]
 8007ea2:	edc8 7a02 	vstr	s15, [r8, #8]
 8007ea6:	e7d5      	b.n	8007e54 <__kernel_rem_pio2f+0x3c0>
 8007ea8:	aa30      	add	r2, sp, #192	; 0xc0
 8007eaa:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 8007da0 <__kernel_rem_pio2f+0x30c>
 8007eae:	4413      	add	r3, r2
 8007eb0:	4622      	mov	r2, r4
 8007eb2:	2a00      	cmp	r2, #0
 8007eb4:	da24      	bge.n	8007f00 <__kernel_rem_pio2f+0x46c>
 8007eb6:	b34f      	cbz	r7, 8007f0c <__kernel_rem_pio2f+0x478>
 8007eb8:	eef1 7a47 	vneg.f32	s15, s14
 8007ebc:	edc8 7a00 	vstr	s15, [r8]
 8007ec0:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8007ec4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007ec8:	aa31      	add	r2, sp, #196	; 0xc4
 8007eca:	2301      	movs	r3, #1
 8007ecc:	429c      	cmp	r4, r3
 8007ece:	da20      	bge.n	8007f12 <__kernel_rem_pio2f+0x47e>
 8007ed0:	b10f      	cbz	r7, 8007ed6 <__kernel_rem_pio2f+0x442>
 8007ed2:	eef1 7a67 	vneg.f32	s15, s15
 8007ed6:	edc8 7a01 	vstr	s15, [r8, #4]
 8007eda:	e7bb      	b.n	8007e54 <__kernel_rem_pio2f+0x3c0>
 8007edc:	aa30      	add	r2, sp, #192	; 0xc0
 8007ede:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 8007da0 <__kernel_rem_pio2f+0x30c>
 8007ee2:	4413      	add	r3, r2
 8007ee4:	2c00      	cmp	r4, #0
 8007ee6:	da05      	bge.n	8007ef4 <__kernel_rem_pio2f+0x460>
 8007ee8:	b10f      	cbz	r7, 8007eee <__kernel_rem_pio2f+0x45a>
 8007eea:	eef1 7a67 	vneg.f32	s15, s15
 8007eee:	edc8 7a00 	vstr	s15, [r8]
 8007ef2:	e7af      	b.n	8007e54 <__kernel_rem_pio2f+0x3c0>
 8007ef4:	ed33 7a01 	vldmdb	r3!, {s14}
 8007ef8:	3c01      	subs	r4, #1
 8007efa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007efe:	e7f1      	b.n	8007ee4 <__kernel_rem_pio2f+0x450>
 8007f00:	ed73 7a01 	vldmdb	r3!, {s15}
 8007f04:	3a01      	subs	r2, #1
 8007f06:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007f0a:	e7d2      	b.n	8007eb2 <__kernel_rem_pio2f+0x41e>
 8007f0c:	eef0 7a47 	vmov.f32	s15, s14
 8007f10:	e7d4      	b.n	8007ebc <__kernel_rem_pio2f+0x428>
 8007f12:	ecb2 7a01 	vldmia	r2!, {s14}
 8007f16:	3301      	adds	r3, #1
 8007f18:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007f1c:	e7d6      	b.n	8007ecc <__kernel_rem_pio2f+0x438>
 8007f1e:	edd1 7a00 	vldr	s15, [r1]
 8007f22:	edd1 6a01 	vldr	s13, [r1, #4]
 8007f26:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007f2a:	3801      	subs	r0, #1
 8007f2c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007f30:	ed81 7a00 	vstr	s14, [r1]
 8007f34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f38:	edc1 7a01 	vstr	s15, [r1, #4]
 8007f3c:	e799      	b.n	8007e72 <__kernel_rem_pio2f+0x3de>
 8007f3e:	edd2 7a00 	vldr	s15, [r2]
 8007f42:	edd2 6a01 	vldr	s13, [r2, #4]
 8007f46:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007f4a:	3901      	subs	r1, #1
 8007f4c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007f50:	ed82 7a00 	vstr	s14, [r2]
 8007f54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f58:	edc2 7a01 	vstr	s15, [r2, #4]
 8007f5c:	e78e      	b.n	8007e7c <__kernel_rem_pio2f+0x3e8>
 8007f5e:	ed33 7a01 	vldmdb	r3!, {s14}
 8007f62:	3c01      	subs	r4, #1
 8007f64:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007f68:	e78f      	b.n	8007e8a <__kernel_rem_pio2f+0x3f6>
 8007f6a:	eef1 6a66 	vneg.f32	s13, s13
 8007f6e:	eeb1 7a47 	vneg.f32	s14, s14
 8007f72:	edc8 6a00 	vstr	s13, [r8]
 8007f76:	ed88 7a01 	vstr	s14, [r8, #4]
 8007f7a:	eef1 7a67 	vneg.f32	s15, s15
 8007f7e:	e790      	b.n	8007ea2 <__kernel_rem_pio2f+0x40e>

08007f80 <__kernel_sinf>:
 8007f80:	ee10 3a10 	vmov	r3, s0
 8007f84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007f88:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8007f8c:	da04      	bge.n	8007f98 <__kernel_sinf+0x18>
 8007f8e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8007f92:	ee17 3a90 	vmov	r3, s15
 8007f96:	b35b      	cbz	r3, 8007ff0 <__kernel_sinf+0x70>
 8007f98:	ee20 7a00 	vmul.f32	s14, s0, s0
 8007f9c:	eddf 7a15 	vldr	s15, [pc, #84]	; 8007ff4 <__kernel_sinf+0x74>
 8007fa0:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8007ff8 <__kernel_sinf+0x78>
 8007fa4:	eea7 6a27 	vfma.f32	s12, s14, s15
 8007fa8:	eddf 7a14 	vldr	s15, [pc, #80]	; 8007ffc <__kernel_sinf+0x7c>
 8007fac:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007fb0:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8008000 <__kernel_sinf+0x80>
 8007fb4:	eea7 6a87 	vfma.f32	s12, s15, s14
 8007fb8:	eddf 7a12 	vldr	s15, [pc, #72]	; 8008004 <__kernel_sinf+0x84>
 8007fbc:	ee60 6a07 	vmul.f32	s13, s0, s14
 8007fc0:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007fc4:	b930      	cbnz	r0, 8007fd4 <__kernel_sinf+0x54>
 8007fc6:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8008008 <__kernel_sinf+0x88>
 8007fca:	eea7 6a27 	vfma.f32	s12, s14, s15
 8007fce:	eea6 0a26 	vfma.f32	s0, s12, s13
 8007fd2:	4770      	bx	lr
 8007fd4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8007fd8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8007fdc:	eee0 7a86 	vfma.f32	s15, s1, s12
 8007fe0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8007fe4:	eddf 7a09 	vldr	s15, [pc, #36]	; 800800c <__kernel_sinf+0x8c>
 8007fe8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8007fec:	ee30 0a60 	vsub.f32	s0, s0, s1
 8007ff0:	4770      	bx	lr
 8007ff2:	bf00      	nop
 8007ff4:	2f2ec9d3 	.word	0x2f2ec9d3
 8007ff8:	b2d72f34 	.word	0xb2d72f34
 8007ffc:	3638ef1b 	.word	0x3638ef1b
 8008000:	b9500d01 	.word	0xb9500d01
 8008004:	3c088889 	.word	0x3c088889
 8008008:	be2aaaab 	.word	0xbe2aaaab
 800800c:	3e2aaaab 	.word	0x3e2aaaab

08008010 <fabsf>:
 8008010:	ee10 3a10 	vmov	r3, s0
 8008014:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008018:	ee00 3a10 	vmov	s0, r3
 800801c:	4770      	bx	lr
	...

08008020 <floorf>:
 8008020:	ee10 3a10 	vmov	r3, s0
 8008024:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008028:	3a7f      	subs	r2, #127	; 0x7f
 800802a:	2a16      	cmp	r2, #22
 800802c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008030:	dc2a      	bgt.n	8008088 <floorf+0x68>
 8008032:	2a00      	cmp	r2, #0
 8008034:	da11      	bge.n	800805a <floorf+0x3a>
 8008036:	eddf 7a18 	vldr	s15, [pc, #96]	; 8008098 <floorf+0x78>
 800803a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800803e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008046:	dd05      	ble.n	8008054 <floorf+0x34>
 8008048:	2b00      	cmp	r3, #0
 800804a:	da23      	bge.n	8008094 <floorf+0x74>
 800804c:	4a13      	ldr	r2, [pc, #76]	; (800809c <floorf+0x7c>)
 800804e:	2900      	cmp	r1, #0
 8008050:	bf18      	it	ne
 8008052:	4613      	movne	r3, r2
 8008054:	ee00 3a10 	vmov	s0, r3
 8008058:	4770      	bx	lr
 800805a:	4911      	ldr	r1, [pc, #68]	; (80080a0 <floorf+0x80>)
 800805c:	4111      	asrs	r1, r2
 800805e:	420b      	tst	r3, r1
 8008060:	d0fa      	beq.n	8008058 <floorf+0x38>
 8008062:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8008098 <floorf+0x78>
 8008066:	ee30 0a27 	vadd.f32	s0, s0, s15
 800806a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800806e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008072:	ddef      	ble.n	8008054 <floorf+0x34>
 8008074:	2b00      	cmp	r3, #0
 8008076:	bfbe      	ittt	lt
 8008078:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800807c:	fa40 f202 	asrlt.w	r2, r0, r2
 8008080:	189b      	addlt	r3, r3, r2
 8008082:	ea23 0301 	bic.w	r3, r3, r1
 8008086:	e7e5      	b.n	8008054 <floorf+0x34>
 8008088:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800808c:	d3e4      	bcc.n	8008058 <floorf+0x38>
 800808e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008092:	4770      	bx	lr
 8008094:	2300      	movs	r3, #0
 8008096:	e7dd      	b.n	8008054 <floorf+0x34>
 8008098:	7149f2ca 	.word	0x7149f2ca
 800809c:	bf800000 	.word	0xbf800000
 80080a0:	007fffff 	.word	0x007fffff

080080a4 <scalbnf>:
 80080a4:	ee10 3a10 	vmov	r3, s0
 80080a8:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80080ac:	d025      	beq.n	80080fa <scalbnf+0x56>
 80080ae:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80080b2:	d302      	bcc.n	80080ba <scalbnf+0x16>
 80080b4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80080b8:	4770      	bx	lr
 80080ba:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80080be:	d122      	bne.n	8008106 <scalbnf+0x62>
 80080c0:	4b2a      	ldr	r3, [pc, #168]	; (800816c <scalbnf+0xc8>)
 80080c2:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8008170 <scalbnf+0xcc>
 80080c6:	4298      	cmp	r0, r3
 80080c8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80080cc:	db16      	blt.n	80080fc <scalbnf+0x58>
 80080ce:	ee10 3a10 	vmov	r3, s0
 80080d2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80080d6:	3a19      	subs	r2, #25
 80080d8:	4402      	add	r2, r0
 80080da:	2afe      	cmp	r2, #254	; 0xfe
 80080dc:	dd15      	ble.n	800810a <scalbnf+0x66>
 80080de:	ee10 3a10 	vmov	r3, s0
 80080e2:	eddf 7a24 	vldr	s15, [pc, #144]	; 8008174 <scalbnf+0xd0>
 80080e6:	eddf 6a24 	vldr	s13, [pc, #144]	; 8008178 <scalbnf+0xd4>
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	eeb0 7a67 	vmov.f32	s14, s15
 80080f0:	bfb8      	it	lt
 80080f2:	eef0 7a66 	vmovlt.f32	s15, s13
 80080f6:	ee27 0a27 	vmul.f32	s0, s14, s15
 80080fa:	4770      	bx	lr
 80080fc:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800817c <scalbnf+0xd8>
 8008100:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008104:	4770      	bx	lr
 8008106:	0dd2      	lsrs	r2, r2, #23
 8008108:	e7e6      	b.n	80080d8 <scalbnf+0x34>
 800810a:	2a00      	cmp	r2, #0
 800810c:	dd06      	ble.n	800811c <scalbnf+0x78>
 800810e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008112:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8008116:	ee00 3a10 	vmov	s0, r3
 800811a:	4770      	bx	lr
 800811c:	f112 0f16 	cmn.w	r2, #22
 8008120:	da1a      	bge.n	8008158 <scalbnf+0xb4>
 8008122:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008126:	4298      	cmp	r0, r3
 8008128:	ee10 3a10 	vmov	r3, s0
 800812c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008130:	dd0a      	ble.n	8008148 <scalbnf+0xa4>
 8008132:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8008174 <scalbnf+0xd0>
 8008136:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8008178 <scalbnf+0xd4>
 800813a:	eef0 7a40 	vmov.f32	s15, s0
 800813e:	2b00      	cmp	r3, #0
 8008140:	bf18      	it	ne
 8008142:	eeb0 0a47 	vmovne.f32	s0, s14
 8008146:	e7db      	b.n	8008100 <scalbnf+0x5c>
 8008148:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800817c <scalbnf+0xd8>
 800814c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8008180 <scalbnf+0xdc>
 8008150:	eef0 7a40 	vmov.f32	s15, s0
 8008154:	2b00      	cmp	r3, #0
 8008156:	e7f3      	b.n	8008140 <scalbnf+0x9c>
 8008158:	3219      	adds	r2, #25
 800815a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800815e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8008162:	eddf 7a08 	vldr	s15, [pc, #32]	; 8008184 <scalbnf+0xe0>
 8008166:	ee07 3a10 	vmov	s14, r3
 800816a:	e7c4      	b.n	80080f6 <scalbnf+0x52>
 800816c:	ffff3cb0 	.word	0xffff3cb0
 8008170:	4c000000 	.word	0x4c000000
 8008174:	7149f2ca 	.word	0x7149f2ca
 8008178:	f149f2ca 	.word	0xf149f2ca
 800817c:	0da24260 	.word	0x0da24260
 8008180:	8da24260 	.word	0x8da24260
 8008184:	33000000 	.word	0x33000000

08008188 <_init>:
 8008188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800818a:	bf00      	nop
 800818c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800818e:	bc08      	pop	{r3}
 8008190:	469e      	mov	lr, r3
 8008192:	4770      	bx	lr

08008194 <_fini>:
 8008194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008196:	bf00      	nop
 8008198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800819a:	bc08      	pop	{r3}
 800819c:	469e      	mov	lr, r3
 800819e:	4770      	bx	lr
