
robot_core_STM32F429IGT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076b4  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08007864  08007864  00017864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078b4  080078b4  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080078b4  080078b4  000178b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080078bc  080078bc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078bc  080078bc  000178bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080078c0  080078c0  000178c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080078c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  20000010  080078d4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000288  080078d4  00020288  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001256c  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c04  00000000  00000000  000325ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001100  00000000  00000000  000351b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fc0  00000000  00000000  000362b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003b7c  00000000  00000000  00037270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013e48  00000000  00000000  0003adec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd10f  00000000  00000000  0004ec34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012bd43  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000480c  00000000  00000000  0012bd94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000010 	.word	0x20000010
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800784c 	.word	0x0800784c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000014 	.word	0x20000014
 80001ec:	0800784c 	.word	0x0800784c

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__aeabi_d2f>:
 800098c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000990:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000994:	bf24      	itt	cs
 8000996:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800099a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800099e:	d90d      	bls.n	80009bc <__aeabi_d2f+0x30>
 80009a0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009a4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009a8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009ac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009b0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009b4:	bf08      	it	eq
 80009b6:	f020 0001 	biceq.w	r0, r0, #1
 80009ba:	4770      	bx	lr
 80009bc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009c0:	d121      	bne.n	8000a06 <__aeabi_d2f+0x7a>
 80009c2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009c6:	bfbc      	itt	lt
 80009c8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009cc:	4770      	bxlt	lr
 80009ce:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009d2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009d6:	f1c2 0218 	rsb	r2, r2, #24
 80009da:	f1c2 0c20 	rsb	ip, r2, #32
 80009de:	fa10 f30c 	lsls.w	r3, r0, ip
 80009e2:	fa20 f002 	lsr.w	r0, r0, r2
 80009e6:	bf18      	it	ne
 80009e8:	f040 0001 	orrne.w	r0, r0, #1
 80009ec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009f0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009f4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009f8:	ea40 000c 	orr.w	r0, r0, ip
 80009fc:	fa23 f302 	lsr.w	r3, r3, r2
 8000a00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a04:	e7cc      	b.n	80009a0 <__aeabi_d2f+0x14>
 8000a06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a0a:	d107      	bne.n	8000a1c <__aeabi_d2f+0x90>
 8000a0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a10:	bf1e      	ittt	ne
 8000a12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a1a:	4770      	bxne	lr
 8000a1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop

08000a2c <__aeabi_uldivmod>:
 8000a2c:	b953      	cbnz	r3, 8000a44 <__aeabi_uldivmod+0x18>
 8000a2e:	b94a      	cbnz	r2, 8000a44 <__aeabi_uldivmod+0x18>
 8000a30:	2900      	cmp	r1, #0
 8000a32:	bf08      	it	eq
 8000a34:	2800      	cmpeq	r0, #0
 8000a36:	bf1c      	itt	ne
 8000a38:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a3c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a40:	f000 b974 	b.w	8000d2c <__aeabi_idiv0>
 8000a44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a4c:	f000 f806 	bl	8000a5c <__udivmoddi4>
 8000a50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a58:	b004      	add	sp, #16
 8000a5a:	4770      	bx	lr

08000a5c <__udivmoddi4>:
 8000a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a60:	9d08      	ldr	r5, [sp, #32]
 8000a62:	4604      	mov	r4, r0
 8000a64:	468e      	mov	lr, r1
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d14d      	bne.n	8000b06 <__udivmoddi4+0xaa>
 8000a6a:	428a      	cmp	r2, r1
 8000a6c:	4694      	mov	ip, r2
 8000a6e:	d969      	bls.n	8000b44 <__udivmoddi4+0xe8>
 8000a70:	fab2 f282 	clz	r2, r2
 8000a74:	b152      	cbz	r2, 8000a8c <__udivmoddi4+0x30>
 8000a76:	fa01 f302 	lsl.w	r3, r1, r2
 8000a7a:	f1c2 0120 	rsb	r1, r2, #32
 8000a7e:	fa20 f101 	lsr.w	r1, r0, r1
 8000a82:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a86:	ea41 0e03 	orr.w	lr, r1, r3
 8000a8a:	4094      	lsls	r4, r2
 8000a8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a90:	0c21      	lsrs	r1, r4, #16
 8000a92:	fbbe f6f8 	udiv	r6, lr, r8
 8000a96:	fa1f f78c 	uxth.w	r7, ip
 8000a9a:	fb08 e316 	mls	r3, r8, r6, lr
 8000a9e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000aa2:	fb06 f107 	mul.w	r1, r6, r7
 8000aa6:	4299      	cmp	r1, r3
 8000aa8:	d90a      	bls.n	8000ac0 <__udivmoddi4+0x64>
 8000aaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000aae:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000ab2:	f080 811f 	bcs.w	8000cf4 <__udivmoddi4+0x298>
 8000ab6:	4299      	cmp	r1, r3
 8000ab8:	f240 811c 	bls.w	8000cf4 <__udivmoddi4+0x298>
 8000abc:	3e02      	subs	r6, #2
 8000abe:	4463      	add	r3, ip
 8000ac0:	1a5b      	subs	r3, r3, r1
 8000ac2:	b2a4      	uxth	r4, r4
 8000ac4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ac8:	fb08 3310 	mls	r3, r8, r0, r3
 8000acc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ad0:	fb00 f707 	mul.w	r7, r0, r7
 8000ad4:	42a7      	cmp	r7, r4
 8000ad6:	d90a      	bls.n	8000aee <__udivmoddi4+0x92>
 8000ad8:	eb1c 0404 	adds.w	r4, ip, r4
 8000adc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ae0:	f080 810a 	bcs.w	8000cf8 <__udivmoddi4+0x29c>
 8000ae4:	42a7      	cmp	r7, r4
 8000ae6:	f240 8107 	bls.w	8000cf8 <__udivmoddi4+0x29c>
 8000aea:	4464      	add	r4, ip
 8000aec:	3802      	subs	r0, #2
 8000aee:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000af2:	1be4      	subs	r4, r4, r7
 8000af4:	2600      	movs	r6, #0
 8000af6:	b11d      	cbz	r5, 8000b00 <__udivmoddi4+0xa4>
 8000af8:	40d4      	lsrs	r4, r2
 8000afa:	2300      	movs	r3, #0
 8000afc:	e9c5 4300 	strd	r4, r3, [r5]
 8000b00:	4631      	mov	r1, r6
 8000b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b06:	428b      	cmp	r3, r1
 8000b08:	d909      	bls.n	8000b1e <__udivmoddi4+0xc2>
 8000b0a:	2d00      	cmp	r5, #0
 8000b0c:	f000 80ef 	beq.w	8000cee <__udivmoddi4+0x292>
 8000b10:	2600      	movs	r6, #0
 8000b12:	e9c5 0100 	strd	r0, r1, [r5]
 8000b16:	4630      	mov	r0, r6
 8000b18:	4631      	mov	r1, r6
 8000b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b1e:	fab3 f683 	clz	r6, r3
 8000b22:	2e00      	cmp	r6, #0
 8000b24:	d14a      	bne.n	8000bbc <__udivmoddi4+0x160>
 8000b26:	428b      	cmp	r3, r1
 8000b28:	d302      	bcc.n	8000b30 <__udivmoddi4+0xd4>
 8000b2a:	4282      	cmp	r2, r0
 8000b2c:	f200 80f9 	bhi.w	8000d22 <__udivmoddi4+0x2c6>
 8000b30:	1a84      	subs	r4, r0, r2
 8000b32:	eb61 0303 	sbc.w	r3, r1, r3
 8000b36:	2001      	movs	r0, #1
 8000b38:	469e      	mov	lr, r3
 8000b3a:	2d00      	cmp	r5, #0
 8000b3c:	d0e0      	beq.n	8000b00 <__udivmoddi4+0xa4>
 8000b3e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b42:	e7dd      	b.n	8000b00 <__udivmoddi4+0xa4>
 8000b44:	b902      	cbnz	r2, 8000b48 <__udivmoddi4+0xec>
 8000b46:	deff      	udf	#255	; 0xff
 8000b48:	fab2 f282 	clz	r2, r2
 8000b4c:	2a00      	cmp	r2, #0
 8000b4e:	f040 8092 	bne.w	8000c76 <__udivmoddi4+0x21a>
 8000b52:	eba1 010c 	sub.w	r1, r1, ip
 8000b56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b5a:	fa1f fe8c 	uxth.w	lr, ip
 8000b5e:	2601      	movs	r6, #1
 8000b60:	0c20      	lsrs	r0, r4, #16
 8000b62:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b66:	fb07 1113 	mls	r1, r7, r3, r1
 8000b6a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b6e:	fb0e f003 	mul.w	r0, lr, r3
 8000b72:	4288      	cmp	r0, r1
 8000b74:	d908      	bls.n	8000b88 <__udivmoddi4+0x12c>
 8000b76:	eb1c 0101 	adds.w	r1, ip, r1
 8000b7a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000b7e:	d202      	bcs.n	8000b86 <__udivmoddi4+0x12a>
 8000b80:	4288      	cmp	r0, r1
 8000b82:	f200 80cb 	bhi.w	8000d1c <__udivmoddi4+0x2c0>
 8000b86:	4643      	mov	r3, r8
 8000b88:	1a09      	subs	r1, r1, r0
 8000b8a:	b2a4      	uxth	r4, r4
 8000b8c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b90:	fb07 1110 	mls	r1, r7, r0, r1
 8000b94:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b98:	fb0e fe00 	mul.w	lr, lr, r0
 8000b9c:	45a6      	cmp	lr, r4
 8000b9e:	d908      	bls.n	8000bb2 <__udivmoddi4+0x156>
 8000ba0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ba4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ba8:	d202      	bcs.n	8000bb0 <__udivmoddi4+0x154>
 8000baa:	45a6      	cmp	lr, r4
 8000bac:	f200 80bb 	bhi.w	8000d26 <__udivmoddi4+0x2ca>
 8000bb0:	4608      	mov	r0, r1
 8000bb2:	eba4 040e 	sub.w	r4, r4, lr
 8000bb6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bba:	e79c      	b.n	8000af6 <__udivmoddi4+0x9a>
 8000bbc:	f1c6 0720 	rsb	r7, r6, #32
 8000bc0:	40b3      	lsls	r3, r6
 8000bc2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bc6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bca:	fa20 f407 	lsr.w	r4, r0, r7
 8000bce:	fa01 f306 	lsl.w	r3, r1, r6
 8000bd2:	431c      	orrs	r4, r3
 8000bd4:	40f9      	lsrs	r1, r7
 8000bd6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bda:	fa00 f306 	lsl.w	r3, r0, r6
 8000bde:	fbb1 f8f9 	udiv	r8, r1, r9
 8000be2:	0c20      	lsrs	r0, r4, #16
 8000be4:	fa1f fe8c 	uxth.w	lr, ip
 8000be8:	fb09 1118 	mls	r1, r9, r8, r1
 8000bec:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bf0:	fb08 f00e 	mul.w	r0, r8, lr
 8000bf4:	4288      	cmp	r0, r1
 8000bf6:	fa02 f206 	lsl.w	r2, r2, r6
 8000bfa:	d90b      	bls.n	8000c14 <__udivmoddi4+0x1b8>
 8000bfc:	eb1c 0101 	adds.w	r1, ip, r1
 8000c00:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000c04:	f080 8088 	bcs.w	8000d18 <__udivmoddi4+0x2bc>
 8000c08:	4288      	cmp	r0, r1
 8000c0a:	f240 8085 	bls.w	8000d18 <__udivmoddi4+0x2bc>
 8000c0e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c12:	4461      	add	r1, ip
 8000c14:	1a09      	subs	r1, r1, r0
 8000c16:	b2a4      	uxth	r4, r4
 8000c18:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c1c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c20:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c24:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c28:	458e      	cmp	lr, r1
 8000c2a:	d908      	bls.n	8000c3e <__udivmoddi4+0x1e2>
 8000c2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c30:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000c34:	d26c      	bcs.n	8000d10 <__udivmoddi4+0x2b4>
 8000c36:	458e      	cmp	lr, r1
 8000c38:	d96a      	bls.n	8000d10 <__udivmoddi4+0x2b4>
 8000c3a:	3802      	subs	r0, #2
 8000c3c:	4461      	add	r1, ip
 8000c3e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c42:	fba0 9402 	umull	r9, r4, r0, r2
 8000c46:	eba1 010e 	sub.w	r1, r1, lr
 8000c4a:	42a1      	cmp	r1, r4
 8000c4c:	46c8      	mov	r8, r9
 8000c4e:	46a6      	mov	lr, r4
 8000c50:	d356      	bcc.n	8000d00 <__udivmoddi4+0x2a4>
 8000c52:	d053      	beq.n	8000cfc <__udivmoddi4+0x2a0>
 8000c54:	b15d      	cbz	r5, 8000c6e <__udivmoddi4+0x212>
 8000c56:	ebb3 0208 	subs.w	r2, r3, r8
 8000c5a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c5e:	fa01 f707 	lsl.w	r7, r1, r7
 8000c62:	fa22 f306 	lsr.w	r3, r2, r6
 8000c66:	40f1      	lsrs	r1, r6
 8000c68:	431f      	orrs	r7, r3
 8000c6a:	e9c5 7100 	strd	r7, r1, [r5]
 8000c6e:	2600      	movs	r6, #0
 8000c70:	4631      	mov	r1, r6
 8000c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c76:	f1c2 0320 	rsb	r3, r2, #32
 8000c7a:	40d8      	lsrs	r0, r3
 8000c7c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c80:	fa21 f303 	lsr.w	r3, r1, r3
 8000c84:	4091      	lsls	r1, r2
 8000c86:	4301      	orrs	r1, r0
 8000c88:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c8c:	fa1f fe8c 	uxth.w	lr, ip
 8000c90:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c94:	fb07 3610 	mls	r6, r7, r0, r3
 8000c98:	0c0b      	lsrs	r3, r1, #16
 8000c9a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c9e:	fb00 f60e 	mul.w	r6, r0, lr
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ca8:	d908      	bls.n	8000cbc <__udivmoddi4+0x260>
 8000caa:	eb1c 0303 	adds.w	r3, ip, r3
 8000cae:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000cb2:	d22f      	bcs.n	8000d14 <__udivmoddi4+0x2b8>
 8000cb4:	429e      	cmp	r6, r3
 8000cb6:	d92d      	bls.n	8000d14 <__udivmoddi4+0x2b8>
 8000cb8:	3802      	subs	r0, #2
 8000cba:	4463      	add	r3, ip
 8000cbc:	1b9b      	subs	r3, r3, r6
 8000cbe:	b289      	uxth	r1, r1
 8000cc0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cc4:	fb07 3316 	mls	r3, r7, r6, r3
 8000cc8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ccc:	fb06 f30e 	mul.w	r3, r6, lr
 8000cd0:	428b      	cmp	r3, r1
 8000cd2:	d908      	bls.n	8000ce6 <__udivmoddi4+0x28a>
 8000cd4:	eb1c 0101 	adds.w	r1, ip, r1
 8000cd8:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000cdc:	d216      	bcs.n	8000d0c <__udivmoddi4+0x2b0>
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d914      	bls.n	8000d0c <__udivmoddi4+0x2b0>
 8000ce2:	3e02      	subs	r6, #2
 8000ce4:	4461      	add	r1, ip
 8000ce6:	1ac9      	subs	r1, r1, r3
 8000ce8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000cec:	e738      	b.n	8000b60 <__udivmoddi4+0x104>
 8000cee:	462e      	mov	r6, r5
 8000cf0:	4628      	mov	r0, r5
 8000cf2:	e705      	b.n	8000b00 <__udivmoddi4+0xa4>
 8000cf4:	4606      	mov	r6, r0
 8000cf6:	e6e3      	b.n	8000ac0 <__udivmoddi4+0x64>
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	e6f8      	b.n	8000aee <__udivmoddi4+0x92>
 8000cfc:	454b      	cmp	r3, r9
 8000cfe:	d2a9      	bcs.n	8000c54 <__udivmoddi4+0x1f8>
 8000d00:	ebb9 0802 	subs.w	r8, r9, r2
 8000d04:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d08:	3801      	subs	r0, #1
 8000d0a:	e7a3      	b.n	8000c54 <__udivmoddi4+0x1f8>
 8000d0c:	4646      	mov	r6, r8
 8000d0e:	e7ea      	b.n	8000ce6 <__udivmoddi4+0x28a>
 8000d10:	4620      	mov	r0, r4
 8000d12:	e794      	b.n	8000c3e <__udivmoddi4+0x1e2>
 8000d14:	4640      	mov	r0, r8
 8000d16:	e7d1      	b.n	8000cbc <__udivmoddi4+0x260>
 8000d18:	46d0      	mov	r8, sl
 8000d1a:	e77b      	b.n	8000c14 <__udivmoddi4+0x1b8>
 8000d1c:	3b02      	subs	r3, #2
 8000d1e:	4461      	add	r1, ip
 8000d20:	e732      	b.n	8000b88 <__udivmoddi4+0x12c>
 8000d22:	4630      	mov	r0, r6
 8000d24:	e709      	b.n	8000b3a <__udivmoddi4+0xde>
 8000d26:	4464      	add	r4, ip
 8000d28:	3802      	subs	r0, #2
 8000d2a:	e742      	b.n	8000bb2 <__udivmoddi4+0x156>

08000d2c <__aeabi_idiv0>:
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop

08000d30 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8000d36:	463b      	mov	r3, r7
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000d3e:	4b14      	ldr	r3, [pc, #80]	; (8000d90 <MX_DAC_Init+0x60>)
 8000d40:	4a14      	ldr	r2, [pc, #80]	; (8000d94 <MX_DAC_Init+0x64>)
 8000d42:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000d44:	4812      	ldr	r0, [pc, #72]	; (8000d90 <MX_DAC_Init+0x60>)
 8000d46:	f002 f9da 	bl	80030fe <HAL_DAC_Init>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000d50:	f001 f9c6 	bl	80020e0 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000d54:	2300      	movs	r3, #0
 8000d56:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000d5c:	463b      	mov	r3, r7
 8000d5e:	2200      	movs	r2, #0
 8000d60:	4619      	mov	r1, r3
 8000d62:	480b      	ldr	r0, [pc, #44]	; (8000d90 <MX_DAC_Init+0x60>)
 8000d64:	f002 f9ed 	bl	8003142 <HAL_DAC_ConfigChannel>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000d6e:	f001 f9b7 	bl	80020e0 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000d72:	463b      	mov	r3, r7
 8000d74:	2210      	movs	r2, #16
 8000d76:	4619      	mov	r1, r3
 8000d78:	4805      	ldr	r0, [pc, #20]	; (8000d90 <MX_DAC_Init+0x60>)
 8000d7a:	f002 f9e2 	bl	8003142 <HAL_DAC_ConfigChannel>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8000d84:	f001 f9ac 	bl	80020e0 <Error_Handler>
  }

}
 8000d88:	bf00      	nop
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	2000002c 	.word	0x2000002c
 8000d94:	40007400 	.word	0x40007400

08000d98 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b08a      	sub	sp, #40	; 0x28
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da0:	f107 0314 	add.w	r3, r7, #20
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	60da      	str	r2, [r3, #12]
 8000dae:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a17      	ldr	r2, [pc, #92]	; (8000e14 <HAL_DAC_MspInit+0x7c>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d127      	bne.n	8000e0a <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	613b      	str	r3, [r7, #16]
 8000dbe:	4b16      	ldr	r3, [pc, #88]	; (8000e18 <HAL_DAC_MspInit+0x80>)
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc2:	4a15      	ldr	r2, [pc, #84]	; (8000e18 <HAL_DAC_MspInit+0x80>)
 8000dc4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000dc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dca:	4b13      	ldr	r3, [pc, #76]	; (8000e18 <HAL_DAC_MspInit+0x80>)
 8000dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000dd2:	613b      	str	r3, [r7, #16]
 8000dd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60fb      	str	r3, [r7, #12]
 8000dda:	4b0f      	ldr	r3, [pc, #60]	; (8000e18 <HAL_DAC_MspInit+0x80>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	4a0e      	ldr	r2, [pc, #56]	; (8000e18 <HAL_DAC_MspInit+0x80>)
 8000de0:	f043 0301 	orr.w	r3, r3, #1
 8000de4:	6313      	str	r3, [r2, #48]	; 0x30
 8000de6:	4b0c      	ldr	r3, [pc, #48]	; (8000e18 <HAL_DAC_MspInit+0x80>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000df2:	2330      	movs	r3, #48	; 0x30
 8000df4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000df6:	2303      	movs	r3, #3
 8000df8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfe:	f107 0314 	add.w	r3, r7, #20
 8000e02:	4619      	mov	r1, r3
 8000e04:	4805      	ldr	r0, [pc, #20]	; (8000e1c <HAL_DAC_MspInit+0x84>)
 8000e06:	f002 fa0b 	bl	8003220 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8000e0a:	bf00      	nop
 8000e0c:	3728      	adds	r7, #40	; 0x28
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40007400 	.word	0x40007400
 8000e18:	40023800 	.word	0x40023800
 8000e1c:	40020000 	.word	0x40020000

08000e20 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08c      	sub	sp, #48	; 0x30
 8000e24:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e26:	f107 031c 	add.w	r3, r7, #28
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	605a      	str	r2, [r3, #4]
 8000e30:	609a      	str	r2, [r3, #8]
 8000e32:	60da      	str	r2, [r3, #12]
 8000e34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	61bb      	str	r3, [r7, #24]
 8000e3a:	4b45      	ldr	r3, [pc, #276]	; (8000f50 <MX_GPIO_Init+0x130>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	4a44      	ldr	r2, [pc, #272]	; (8000f50 <MX_GPIO_Init+0x130>)
 8000e40:	f043 0320 	orr.w	r3, r3, #32
 8000e44:	6313      	str	r3, [r2, #48]	; 0x30
 8000e46:	4b42      	ldr	r3, [pc, #264]	; (8000f50 <MX_GPIO_Init+0x130>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	f003 0320 	and.w	r3, r3, #32
 8000e4e:	61bb      	str	r3, [r7, #24]
 8000e50:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	617b      	str	r3, [r7, #20]
 8000e56:	4b3e      	ldr	r3, [pc, #248]	; (8000f50 <MX_GPIO_Init+0x130>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	4a3d      	ldr	r2, [pc, #244]	; (8000f50 <MX_GPIO_Init+0x130>)
 8000e5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e60:	6313      	str	r3, [r2, #48]	; 0x30
 8000e62:	4b3b      	ldr	r3, [pc, #236]	; (8000f50 <MX_GPIO_Init+0x130>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e6a:	617b      	str	r3, [r7, #20]
 8000e6c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	613b      	str	r3, [r7, #16]
 8000e72:	4b37      	ldr	r3, [pc, #220]	; (8000f50 <MX_GPIO_Init+0x130>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	4a36      	ldr	r2, [pc, #216]	; (8000f50 <MX_GPIO_Init+0x130>)
 8000e78:	f043 0301 	orr.w	r3, r3, #1
 8000e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7e:	4b34      	ldr	r3, [pc, #208]	; (8000f50 <MX_GPIO_Init+0x130>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	613b      	str	r3, [r7, #16]
 8000e88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60fb      	str	r3, [r7, #12]
 8000e8e:	4b30      	ldr	r3, [pc, #192]	; (8000f50 <MX_GPIO_Init+0x130>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	4a2f      	ldr	r2, [pc, #188]	; (8000f50 <MX_GPIO_Init+0x130>)
 8000e94:	f043 0308 	orr.w	r3, r3, #8
 8000e98:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9a:	4b2d      	ldr	r3, [pc, #180]	; (8000f50 <MX_GPIO_Init+0x130>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	f003 0308 	and.w	r3, r3, #8
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60bb      	str	r3, [r7, #8]
 8000eaa:	4b29      	ldr	r3, [pc, #164]	; (8000f50 <MX_GPIO_Init+0x130>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	4a28      	ldr	r2, [pc, #160]	; (8000f50 <MX_GPIO_Init+0x130>)
 8000eb0:	f043 0304 	orr.w	r3, r3, #4
 8000eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb6:	4b26      	ldr	r3, [pc, #152]	; (8000f50 <MX_GPIO_Init+0x130>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	f003 0304 	and.w	r3, r3, #4
 8000ebe:	60bb      	str	r3, [r7, #8]
 8000ec0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	607b      	str	r3, [r7, #4]
 8000ec6:	4b22      	ldr	r3, [pc, #136]	; (8000f50 <MX_GPIO_Init+0x130>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	4a21      	ldr	r2, [pc, #132]	; (8000f50 <MX_GPIO_Init+0x130>)
 8000ecc:	f043 0302 	orr.w	r3, r3, #2
 8000ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed2:	4b1f      	ldr	r3, [pc, #124]	; (8000f50 <MX_GPIO_Init+0x130>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	f003 0302 	and.w	r3, r3, #2
 8000eda:	607b      	str	r3, [r7, #4]
 8000edc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_in4_Pin|OUT_in3_Pin|OUT_in2_Pin, GPIO_PIN_RESET);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8000ee4:	481b      	ldr	r0, [pc, #108]	; (8000f54 <MX_GPIO_Init+0x134>)
 8000ee6:	f002 fb5f 	bl	80035a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, GPIO_PIN_RESET);
 8000eea:	2200      	movs	r2, #0
 8000eec:	2101      	movs	r1, #1
 8000eee:	481a      	ldr	r0, [pc, #104]	; (8000f58 <MX_GPIO_Init+0x138>)
 8000ef0:	f002 fb5a 	bl	80035a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = OUT_in4_Pin|OUT_in3_Pin|OUT_in2_Pin;
 8000ef4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000ef8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000efa:	2301      	movs	r3, #1
 8000efc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f02:	2300      	movs	r3, #0
 8000f04:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f06:	f107 031c 	add.w	r3, r7, #28
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4811      	ldr	r0, [pc, #68]	; (8000f54 <MX_GPIO_Init+0x134>)
 8000f0e:	f002 f987 	bl	8003220 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OUT_in1_Pin;
 8000f12:	2301      	movs	r3, #1
 8000f14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f16:	2301      	movs	r3, #1
 8000f18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OUT_in1_GPIO_Port, &GPIO_InitStruct);
 8000f22:	f107 031c 	add.w	r3, r7, #28
 8000f26:	4619      	mov	r1, r3
 8000f28:	480b      	ldr	r0, [pc, #44]	; (8000f58 <MX_GPIO_Init+0x138>)
 8000f2a:	f002 f979 	bl	8003220 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = IN_sensorL_Pin|IN_sensorR_Pin;
 8000f2e:	230a      	movs	r3, #10
 8000f30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f32:	2300      	movs	r3, #0
 8000f34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f36:	2301      	movs	r3, #1
 8000f38:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f3a:	f107 031c 	add.w	r3, r7, #28
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4805      	ldr	r0, [pc, #20]	; (8000f58 <MX_GPIO_Init+0x138>)
 8000f42:	f002 f96d 	bl	8003220 <HAL_GPIO_Init>

}
 8000f46:	bf00      	nop
 8000f48:	3730      	adds	r7, #48	; 0x30
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40023800 	.word	0x40023800
 8000f54:	40020800 	.word	0x40020800
 8000f58:	40020c00 	.word	0x40020c00

08000f5c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000f60:	4b1b      	ldr	r3, [pc, #108]	; (8000fd0 <MX_I2C1_Init+0x74>)
 8000f62:	4a1c      	ldr	r2, [pc, #112]	; (8000fd4 <MX_I2C1_Init+0x78>)
 8000f64:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000f66:	4b1a      	ldr	r3, [pc, #104]	; (8000fd0 <MX_I2C1_Init+0x74>)
 8000f68:	4a1b      	ldr	r2, [pc, #108]	; (8000fd8 <MX_I2C1_Init+0x7c>)
 8000f6a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f6c:	4b18      	ldr	r3, [pc, #96]	; (8000fd0 <MX_I2C1_Init+0x74>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f72:	4b17      	ldr	r3, [pc, #92]	; (8000fd0 <MX_I2C1_Init+0x74>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f78:	4b15      	ldr	r3, [pc, #84]	; (8000fd0 <MX_I2C1_Init+0x74>)
 8000f7a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f7e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f80:	4b13      	ldr	r3, [pc, #76]	; (8000fd0 <MX_I2C1_Init+0x74>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f86:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <MX_I2C1_Init+0x74>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f8c:	4b10      	ldr	r3, [pc, #64]	; (8000fd0 <MX_I2C1_Init+0x74>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f92:	4b0f      	ldr	r3, [pc, #60]	; (8000fd0 <MX_I2C1_Init+0x74>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f98:	480d      	ldr	r0, [pc, #52]	; (8000fd0 <MX_I2C1_Init+0x74>)
 8000f9a:	f002 fb1f 	bl	80035dc <HAL_I2C_Init>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000fa4:	f001 f89c 	bl	80020e0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fa8:	2100      	movs	r1, #0
 8000faa:	4809      	ldr	r0, [pc, #36]	; (8000fd0 <MX_I2C1_Init+0x74>)
 8000fac:	f003 fad5 	bl	800455a <HAL_I2CEx_ConfigAnalogFilter>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000fb6:	f001 f893 	bl	80020e0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000fba:	2100      	movs	r1, #0
 8000fbc:	4804      	ldr	r0, [pc, #16]	; (8000fd0 <MX_I2C1_Init+0x74>)
 8000fbe:	f003 fb08 	bl	80045d2 <HAL_I2CEx_ConfigDigitalFilter>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000fc8:	f001 f88a 	bl	80020e0 <Error_Handler>
  }

}
 8000fcc:	bf00      	nop
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20000040 	.word	0x20000040
 8000fd4:	40005400 	.word	0x40005400
 8000fd8:	00061a80 	.word	0x00061a80

08000fdc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b08a      	sub	sp, #40	; 0x28
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe4:	f107 0314 	add.w	r3, r7, #20
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]
 8000ff2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a19      	ldr	r2, [pc, #100]	; (8001060 <HAL_I2C_MspInit+0x84>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d12b      	bne.n	8001056 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	613b      	str	r3, [r7, #16]
 8001002:	4b18      	ldr	r3, [pc, #96]	; (8001064 <HAL_I2C_MspInit+0x88>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	4a17      	ldr	r2, [pc, #92]	; (8001064 <HAL_I2C_MspInit+0x88>)
 8001008:	f043 0302 	orr.w	r3, r3, #2
 800100c:	6313      	str	r3, [r2, #48]	; 0x30
 800100e:	4b15      	ldr	r3, [pc, #84]	; (8001064 <HAL_I2C_MspInit+0x88>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	f003 0302 	and.w	r3, r3, #2
 8001016:	613b      	str	r3, [r7, #16]
 8001018:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800101a:	23c0      	movs	r3, #192	; 0xc0
 800101c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800101e:	2312      	movs	r3, #18
 8001020:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001022:	2301      	movs	r3, #1
 8001024:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001026:	2303      	movs	r3, #3
 8001028:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800102a:	2304      	movs	r3, #4
 800102c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800102e:	f107 0314 	add.w	r3, r7, #20
 8001032:	4619      	mov	r1, r3
 8001034:	480c      	ldr	r0, [pc, #48]	; (8001068 <HAL_I2C_MspInit+0x8c>)
 8001036:	f002 f8f3 	bl	8003220 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	60fb      	str	r3, [r7, #12]
 800103e:	4b09      	ldr	r3, [pc, #36]	; (8001064 <HAL_I2C_MspInit+0x88>)
 8001040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001042:	4a08      	ldr	r2, [pc, #32]	; (8001064 <HAL_I2C_MspInit+0x88>)
 8001044:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001048:	6413      	str	r3, [r2, #64]	; 0x40
 800104a:	4b06      	ldr	r3, [pc, #24]	; (8001064 <HAL_I2C_MspInit+0x88>)
 800104c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001056:	bf00      	nop
 8001058:	3728      	adds	r7, #40	; 0x28
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40005400 	.word	0x40005400
 8001064:	40023800 	.word	0x40023800
 8001068:	40020400 	.word	0x40020400

0800106c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001070:	f001 fe9e 	bl	8002db0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001074:	f000 f8da 	bl	800122c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001078:	f7ff fed2 	bl	8000e20 <MX_GPIO_Init>
  MX_DAC_Init();
 800107c:	f7ff fe58 	bl	8000d30 <MX_DAC_Init>
  MX_TIM2_Init();
 8001080:	f001 fa98 	bl	80025b4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001084:	f001 fae8 	bl	8002658 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001088:	f001 fb3a 	bl	8002700 <MX_TIM4_Init>
  MX_TIM5_Init();
 800108c:	f001 fbb8 	bl	8002800 <MX_TIM5_Init>
  MX_UART7_Init();
 8001090:	f001 fdea 	bl	8002c68 <MX_UART7_Init>
  MX_TIM7_Init();
 8001094:	f001 fc5e 	bl	8002954 <MX_TIM7_Init>
  MX_I2C1_Init();
 8001098:	f7ff ff60 	bl	8000f5c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim7); //desborda cada 10 ms.
 800109c:	4853      	ldr	r0, [pc, #332]	; (80011ec <main+0x180>)
 800109e:	f004 f804 	bl	80050aa <HAL_TIM_Base_Start_IT>

  HAL_TIM_Base_Start(&htim2); //encoder R.
 80010a2:	4853      	ldr	r0, [pc, #332]	; (80011f0 <main+0x184>)
 80010a4:	f003 ffdd 	bl	8005062 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3); //encoder L.
 80010a8:	4852      	ldr	r0, [pc, #328]	; (80011f4 <main+0x188>)
 80010aa:	f003 ffda 	bl	8005062 <HAL_TIM_Base_Start>

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1); //rueda izquierda.
 80010ae:	2100      	movs	r1, #0
 80010b0:	4851      	ldr	r0, [pc, #324]	; (80011f8 <main+0x18c>)
 80010b2:	f004 f853 	bl	800515c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2); //rueda derecha.
 80010b6:	2104      	movs	r1, #4
 80010b8:	484f      	ldr	r0, [pc, #316]	; (80011f8 <main+0x18c>)
 80010ba:	f004 f84f 	bl	800515c <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start(&htim5); //control del SR-04.
 80010be:	484f      	ldr	r0, [pc, #316]	; (80011fc <main+0x190>)
 80010c0:	f003 ffcf 	bl	8005062 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1); //para el pulso del trigger.
 80010c4:	2100      	movs	r1, #0
 80010c6:	484d      	ldr	r0, [pc, #308]	; (80011fc <main+0x190>)
 80010c8:	f004 f848 	bl	800515c <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_3); //para capturar el eco (flanco ascendente).
 80010cc:	2108      	movs	r1, #8
 80010ce:	484b      	ldr	r0, [pc, #300]	; (80011fc <main+0x190>)
 80010d0:	f004 f8b8 	bl	8005244 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_4); //para capturar el eco (flanco descendente).
 80010d4:	210c      	movs	r1, #12
 80010d6:	4849      	ldr	r0, [pc, #292]	; (80011fc <main+0x190>)
 80010d8:	f004 f8b4 	bl	8005244 <HAL_TIM_IC_Start_IT>

  mpu9265_Init(&hi2c1);
 80010dc:	4848      	ldr	r0, [pc, #288]	; (8001200 <main+0x194>)
 80010de:	f001 f807 	bl	80020f0 <mpu9265_Init>


  HAL_UART_Receive(&huart7, rxUart, 4, 500);
 80010e2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80010e6:	2204      	movs	r2, #4
 80010e8:	4946      	ldr	r1, [pc, #280]	; (8001204 <main+0x198>)
 80010ea:	4847      	ldr	r0, [pc, #284]	; (8001208 <main+0x19c>)
 80010ec:	f005 f975 	bl	80063da <HAL_UART_Receive>

  if (rxUart[0] == HOLA){
 80010f0:	4b44      	ldr	r3, [pc, #272]	; (8001204 <main+0x198>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d11d      	bne.n	8001134 <main+0xc8>

	  if (!rxUart[3]){
 80010f8:	4b42      	ldr	r3, [pc, #264]	; (8001204 <main+0x198>)
 80010fa:	78db      	ldrb	r3, [r3, #3]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d10b      	bne.n	8001118 <main+0xac>
		  txUart[0] = CMD_ERROR;
 8001100:	4b42      	ldr	r3, [pc, #264]	; (800120c <main+0x1a0>)
 8001102:	2204      	movs	r2, #4
 8001104:	701a      	strb	r2, [r3, #0]
		  txUart[3] = '\0';
 8001106:	4b41      	ldr	r3, [pc, #260]	; (800120c <main+0x1a0>)
 8001108:	2200      	movs	r2, #0
 800110a:	70da      	strb	r2, [r3, #3]
		  HAL_UART_Transmit_IT(&huart7, txUart, 4);
 800110c:	2204      	movs	r2, #4
 800110e:	493f      	ldr	r1, [pc, #252]	; (800120c <main+0x1a0>)
 8001110:	483d      	ldr	r0, [pc, #244]	; (8001208 <main+0x19c>)
 8001112:	f005 fa08 	bl	8006526 <HAL_UART_Transmit_IT>
 8001116:	e00d      	b.n	8001134 <main+0xc8>
	  } else {
		  esp01Presente = 1;
 8001118:	4b3d      	ldr	r3, [pc, #244]	; (8001210 <main+0x1a4>)
 800111a:	2201      	movs	r2, #1
 800111c:	701a      	strb	r2, [r3, #0]
		  txUart[0] = HOLA;
 800111e:	4b3b      	ldr	r3, [pc, #236]	; (800120c <main+0x1a0>)
 8001120:	2201      	movs	r2, #1
 8001122:	701a      	strb	r2, [r3, #0]
		  txUart[3] = '\0';
 8001124:	4b39      	ldr	r3, [pc, #228]	; (800120c <main+0x1a0>)
 8001126:	2200      	movs	r2, #0
 8001128:	70da      	strb	r2, [r3, #3]
		  HAL_UART_Transmit_IT(&huart7, txUart, 4);
 800112a:	2204      	movs	r2, #4
 800112c:	4937      	ldr	r1, [pc, #220]	; (800120c <main+0x1a0>)
 800112e:	4836      	ldr	r0, [pc, #216]	; (8001208 <main+0x19c>)
 8001130:	f005 f9f9 	bl	8006526 <HAL_UART_Transmit_IT>
	  }

  }

  HAL_UART_Receive_IT(&huart7, rxUart, 4);
 8001134:	2204      	movs	r2, #4
 8001136:	4933      	ldr	r1, [pc, #204]	; (8001204 <main+0x198>)
 8001138:	4833      	ldr	r0, [pc, #204]	; (8001208 <main+0x19c>)
 800113a:	f005 fa39 	bl	80065b0 <HAL_UART_Receive_IT>

  if (!esp01Presente) {
 800113e:	4b34      	ldr	r3, [pc, #208]	; (8001210 <main+0x1a4>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d103      	bne.n	800114e <main+0xe2>
	  modoFuncionamiento = AUTOMATICO;
 8001146:	4b33      	ldr	r3, [pc, #204]	; (8001214 <main+0x1a8>)
 8001148:	2200      	movs	r2, #0
 800114a:	701a      	strb	r2, [r3, #0]
 800114c:	e002      	b.n	8001154 <main+0xe8>
  }else{
	  modoFuncionamiento = MANUAL;
 800114e:	4b31      	ldr	r3, [pc, #196]	; (8001214 <main+0x1a8>)
 8001150:	2201      	movs	r2, #1
 8001152:	701a      	strb	r2, [r3, #0]
		  }
	  }
	  last_button = read_button;
	  */

	  if (flag_cmd != 0){
 8001154:	4b30      	ldr	r3, [pc, #192]	; (8001218 <main+0x1ac>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d004      	beq.n	8001166 <main+0xfa>
		  check_rxUart();
 800115c:	f000 fdd0 	bl	8001d00 <check_rxUart>
		  flag_cmd = 0;
 8001160:	4b2d      	ldr	r3, [pc, #180]	; (8001218 <main+0x1ac>)
 8001162:	2200      	movs	r2, #0
 8001164:	701a      	strb	r2, [r3, #0]
	  }

	  SR_04();
 8001166:	f000 f92b 	bl	80013c0 <SR_04>
	  sensores();
 800116a:	f000 f96f 	bl	800144c <sensores>
	  modo_funcionamiento();
 800116e:	f000 ffa1 	bl	80020b4 <modo_funcionamiento>

	  if (desbordeTIM7 > 21){
 8001172:	4b2a      	ldr	r3, [pc, #168]	; (800121c <main+0x1b0>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	2b15      	cmp	r3, #21
 8001178:	d90a      	bls.n	8001190 <main+0x124>
		  flag_encoders = 1;
 800117a:	4b29      	ldr	r3, [pc, #164]	; (8001220 <main+0x1b4>)
 800117c:	2201      	movs	r2, #1
 800117e:	701a      	strb	r2, [r3, #0]
		  desbordeTIM7 = 0;
 8001180:	4b26      	ldr	r3, [pc, #152]	; (800121c <main+0x1b0>)
 8001182:	2200      	movs	r2, #0
 8001184:	701a      	strb	r2, [r3, #0]

		  TRIG_SR04;
 8001186:	4b1d      	ldr	r3, [pc, #116]	; (80011fc <main+0x190>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f06f 020a 	mvn.w	r2, #10
 800118e:	625a      	str	r2, [r3, #36]	; 0x24
	  }

	  if (desbordeTIM7 != 0){
 8001190:	4b22      	ldr	r3, [pc, #136]	; (800121c <main+0x1b0>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d0dd      	beq.n	8001154 <main+0xe8>
		  periodo_Encoder += desbordeTIM7;
 8001198:	4b22      	ldr	r3, [pc, #136]	; (8001224 <main+0x1b8>)
 800119a:	781a      	ldrb	r2, [r3, #0]
 800119c:	4b1f      	ldr	r3, [pc, #124]	; (800121c <main+0x1b0>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	4413      	add	r3, r2
 80011a2:	b2da      	uxtb	r2, r3
 80011a4:	4b1f      	ldr	r3, [pc, #124]	; (8001224 <main+0x1b8>)
 80011a6:	701a      	strb	r2, [r3, #0]
		  periodo_SR04 += desbordeTIM7;
 80011a8:	4b1f      	ldr	r3, [pc, #124]	; (8001228 <main+0x1bc>)
 80011aa:	781a      	ldrb	r2, [r3, #0]
 80011ac:	4b1b      	ldr	r3, [pc, #108]	; (800121c <main+0x1b0>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	4413      	add	r3, r2
 80011b2:	b2da      	uxtb	r2, r3
 80011b4:	4b1c      	ldr	r3, [pc, #112]	; (8001228 <main+0x1bc>)
 80011b6:	701a      	strb	r2, [r3, #0]
		  desbordeTIM7 = 0;
 80011b8:	4b18      	ldr	r3, [pc, #96]	; (800121c <main+0x1b0>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	701a      	strb	r2, [r3, #0]
		  if (periodo_Encoder > 21){ // en 10 * ms
 80011be:	4b19      	ldr	r3, [pc, #100]	; (8001224 <main+0x1b8>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	2b15      	cmp	r3, #21
 80011c4:	d905      	bls.n	80011d2 <main+0x166>
			  flag_encoders = 1;
 80011c6:	4b16      	ldr	r3, [pc, #88]	; (8001220 <main+0x1b4>)
 80011c8:	2201      	movs	r2, #1
 80011ca:	701a      	strb	r2, [r3, #0]
			  periodo_Encoder = 0;
 80011cc:	4b15      	ldr	r3, [pc, #84]	; (8001224 <main+0x1b8>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	701a      	strb	r2, [r3, #0]
		  }
		  if (periodo_SR04 > 21){
 80011d2:	4b15      	ldr	r3, [pc, #84]	; (8001228 <main+0x1bc>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	2b15      	cmp	r3, #21
 80011d8:	d9bc      	bls.n	8001154 <main+0xe8>
			  TRIG_SR04;
 80011da:	4b08      	ldr	r3, [pc, #32]	; (80011fc <main+0x190>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f06f 020a 	mvn.w	r2, #10
 80011e2:	625a      	str	r2, [r3, #36]	; 0x24
			  periodo_SR04 = 0;
 80011e4:	4b10      	ldr	r3, [pc, #64]	; (8001228 <main+0x1bc>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	701a      	strb	r2, [r3, #0]
	  if (flag_cmd != 0){
 80011ea:	e7b3      	b.n	8001154 <main+0xe8>
 80011ec:	20000204 	.word	0x20000204
 80011f0:	20000104 	.word	0x20000104
 80011f4:	20000144 	.word	0x20000144
 80011f8:	20000184 	.word	0x20000184
 80011fc:	200001c4 	.word	0x200001c4
 8001200:	20000040 	.word	0x20000040
 8001204:	20000094 	.word	0x20000094
 8001208:	20000244 	.word	0x20000244
 800120c:	2000009c 	.word	0x2000009c
 8001210:	200000a0 	.word	0x200000a0
 8001214:	20000000 	.word	0x20000000
 8001218:	20000098 	.word	0x20000098
 800121c:	200000d2 	.word	0x200000d2
 8001220:	200000ea 	.word	0x200000ea
 8001224:	200000d3 	.word	0x200000d3
 8001228:	200000d4 	.word	0x200000d4

0800122c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b094      	sub	sp, #80	; 0x50
 8001230:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001232:	f107 0320 	add.w	r3, r7, #32
 8001236:	2230      	movs	r2, #48	; 0x30
 8001238:	2100      	movs	r1, #0
 800123a:	4618      	mov	r0, r3
 800123c:	f006 f980 	bl	8007540 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001240:	f107 030c 	add.w	r3, r7, #12
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
 800124e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001250:	2300      	movs	r3, #0
 8001252:	60bb      	str	r3, [r7, #8]
 8001254:	4b2c      	ldr	r3, [pc, #176]	; (8001308 <SystemClock_Config+0xdc>)
 8001256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001258:	4a2b      	ldr	r2, [pc, #172]	; (8001308 <SystemClock_Config+0xdc>)
 800125a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800125e:	6413      	str	r3, [r2, #64]	; 0x40
 8001260:	4b29      	ldr	r3, [pc, #164]	; (8001308 <SystemClock_Config+0xdc>)
 8001262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001264:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001268:	60bb      	str	r3, [r7, #8]
 800126a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800126c:	2300      	movs	r3, #0
 800126e:	607b      	str	r3, [r7, #4]
 8001270:	4b26      	ldr	r3, [pc, #152]	; (800130c <SystemClock_Config+0xe0>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a25      	ldr	r2, [pc, #148]	; (800130c <SystemClock_Config+0xe0>)
 8001276:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800127a:	6013      	str	r3, [r2, #0]
 800127c:	4b23      	ldr	r3, [pc, #140]	; (800130c <SystemClock_Config+0xe0>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001284:	607b      	str	r3, [r7, #4]
 8001286:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001288:	2309      	movs	r3, #9
 800128a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800128c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001290:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001292:	2301      	movs	r3, #1
 8001294:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001296:	2302      	movs	r3, #2
 8001298:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800129a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800129e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80012a0:	2304      	movs	r3, #4
 80012a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80012a4:	23b4      	movs	r3, #180	; 0xb4
 80012a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012a8:	2302      	movs	r3, #2
 80012aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012ac:	2304      	movs	r3, #4
 80012ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012b0:	f107 0320 	add.w	r3, r7, #32
 80012b4:	4618      	mov	r0, r3
 80012b6:	f003 fa1b 	bl	80046f0 <HAL_RCC_OscConfig>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80012c0:	f000 ff0e 	bl	80020e0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80012c4:	f003 f9c4 	bl	8004650 <HAL_PWREx_EnableOverDrive>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80012ce:	f000 ff07 	bl	80020e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012d2:	230f      	movs	r3, #15
 80012d4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012d6:	2302      	movs	r3, #2
 80012d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012da:	2300      	movs	r3, #0
 80012dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012de:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012ea:	f107 030c 	add.w	r3, r7, #12
 80012ee:	2105      	movs	r1, #5
 80012f0:	4618      	mov	r0, r3
 80012f2:	f003 fc6b 	bl	8004bcc <HAL_RCC_ClockConfig>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80012fc:	f000 fef0 	bl	80020e0 <Error_Handler>
  }
}
 8001300:	bf00      	nop
 8001302:	3750      	adds	r7, #80	; 0x50
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40023800 	.word	0x40023800
 800130c:	40007000 	.word	0x40007000

08001310 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
	if (htim->Instance==TIM7){
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a07      	ldr	r2, [pc, #28]	; (800133c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d105      	bne.n	800132e <HAL_TIM_PeriodElapsedCallback+0x1e>
		desbordeTIM7++;
 8001322:	4b07      	ldr	r3, [pc, #28]	; (8001340 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	3301      	adds	r3, #1
 8001328:	b2da      	uxtb	r2, r3
 800132a:	4b05      	ldr	r3, [pc, #20]	; (8001340 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800132c:	701a      	strb	r2, [r3, #0]
	}
}
 800132e:	bf00      	nop
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	40001400 	.word	0x40001400
 8001340:	200000d2 	.word	0x200000d2

08001344 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3){
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	7f1b      	ldrb	r3, [r3, #28]
 8001350:	2b04      	cmp	r3, #4
 8001352:	d10a      	bne.n	800136a <HAL_TIM_IC_CaptureCallback+0x26>
		ic1 = htim->Instance->CCR3;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800135a:	4a0e      	ldr	r2, [pc, #56]	; (8001394 <HAL_TIM_IC_CaptureCallback+0x50>)
 800135c:	6013      	str	r3, [r2, #0]
		flancoEco++;
 800135e:	4b0e      	ldr	r3, [pc, #56]	; (8001398 <HAL_TIM_IC_CaptureCallback+0x54>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	3301      	adds	r3, #1
 8001364:	b2da      	uxtb	r2, r3
 8001366:	4b0c      	ldr	r3, [pc, #48]	; (8001398 <HAL_TIM_IC_CaptureCallback+0x54>)
 8001368:	701a      	strb	r2, [r3, #0]
	}

	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4){
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	7f1b      	ldrb	r3, [r3, #28]
 800136e:	2b08      	cmp	r3, #8
 8001370:	d10a      	bne.n	8001388 <HAL_TIM_IC_CaptureCallback+0x44>
		ic2 = htim->Instance->CCR4;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001378:	4a08      	ldr	r2, [pc, #32]	; (800139c <HAL_TIM_IC_CaptureCallback+0x58>)
 800137a:	6013      	str	r3, [r2, #0]
		flancoEco++;
 800137c:	4b06      	ldr	r3, [pc, #24]	; (8001398 <HAL_TIM_IC_CaptureCallback+0x54>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	3301      	adds	r3, #1
 8001382:	b2da      	uxtb	r2, r3
 8001384:	4b04      	ldr	r3, [pc, #16]	; (8001398 <HAL_TIM_IC_CaptureCallback+0x54>)
 8001386:	701a      	strb	r2, [r3, #0]
	}
}
 8001388:	bf00      	nop
 800138a:	370c      	adds	r7, #12
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr
 8001394:	200000d8 	.word	0x200000d8
 8001398:	200000e0 	.word	0x200000e0
 800139c:	200000dc 	.word	0x200000dc

080013a0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
	flag_cmd = 1;
 80013a8:	4b04      	ldr	r3, [pc, #16]	; (80013bc <HAL_UART_RxCpltCallback+0x1c>)
 80013aa:	2201      	movs	r2, #1
 80013ac:	701a      	strb	r2, [r3, #0]
}
 80013ae:	bf00      	nop
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	20000098 	.word	0x20000098

080013c0 <SR_04>:


void SR_04 (void){
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0

	switch (flancoEco){
 80013c4:	4b1b      	ldr	r3, [pc, #108]	; (8001434 <SR_04+0x74>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	dc02      	bgt.n	80013d2 <SR_04+0x12>
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	da2c      	bge.n	800142a <SR_04+0x6a>
 80013d0:	e027      	b.n	8001422 <SR_04+0x62>
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d125      	bne.n	8001422 <SR_04+0x62>
		case 0:
		case 1:
			return;
		case 2:
			cuentaPulsos = (int32_t)(ic2 - ic1);
 80013d6:	4b18      	ldr	r3, [pc, #96]	; (8001438 <SR_04+0x78>)
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	4b18      	ldr	r3, [pc, #96]	; (800143c <SR_04+0x7c>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	461a      	mov	r2, r3
 80013e2:	4b17      	ldr	r3, [pc, #92]	; (8001440 <SR_04+0x80>)
 80013e4:	601a      	str	r2, [r3, #0]
			if (cuentaPulsos < 23310){
 80013e6:	4b16      	ldr	r3, [pc, #88]	; (8001440 <SR_04+0x80>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f645 320d 	movw	r2, #23309	; 0x5b0d
 80013ee:	4293      	cmp	r3, r2
 80013f0:	dc0f      	bgt.n	8001412 <SR_04+0x52>
				distanciaSR04 = cuentaPulsos * 34 / 2000;
 80013f2:	4b13      	ldr	r3, [pc, #76]	; (8001440 <SR_04+0x80>)
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	4613      	mov	r3, r2
 80013f8:	011b      	lsls	r3, r3, #4
 80013fa:	4413      	add	r3, r2
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	4a11      	ldr	r2, [pc, #68]	; (8001444 <SR_04+0x84>)
 8001400:	fb82 1203 	smull	r1, r2, r2, r3
 8001404:	11d2      	asrs	r2, r2, #7
 8001406:	17db      	asrs	r3, r3, #31
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	b29a      	uxth	r2, r3
 800140c:	4b0e      	ldr	r3, [pc, #56]	; (8001448 <SR_04+0x88>)
 800140e:	801a      	strh	r2, [r3, #0]
 8001410:	e003      	b.n	800141a <SR_04+0x5a>
			}else{
				distanciaSR04 = 400;
 8001412:	4b0d      	ldr	r3, [pc, #52]	; (8001448 <SR_04+0x88>)
 8001414:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001418:	801a      	strh	r2, [r3, #0]
			}
			flancoEco = 0;
 800141a:	4b06      	ldr	r3, [pc, #24]	; (8001434 <SR_04+0x74>)
 800141c:	2200      	movs	r2, #0
 800141e:	701a      	strb	r2, [r3, #0]
		break;
 8001420:	e004      	b.n	800142c <SR_04+0x6c>
		default:
			flancoEco = 0;
 8001422:	4b04      	ldr	r3, [pc, #16]	; (8001434 <SR_04+0x74>)
 8001424:	2200      	movs	r2, #0
 8001426:	701a      	strb	r2, [r3, #0]
		break;
 8001428:	e000      	b.n	800142c <SR_04+0x6c>
			return;
 800142a:	bf00      	nop
	} //end switch flancoEco

} //end SR_04()
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr
 8001434:	200000e0 	.word	0x200000e0
 8001438:	200000dc 	.word	0x200000dc
 800143c:	200000d8 	.word	0x200000d8
 8001440:	200000e4 	.word	0x200000e4
 8001444:	10624dd3 	.word	0x10624dd3
 8001448:	200000e8 	.word	0x200000e8

0800144c <sensores>:

void sensores (void){
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
	//sensores_dist = SI << 2 | SF << 1 | SD (logica negativa)
	SI = (HAL_GPIO_ReadPin(IN_sensorL_GPIO_Port, IN_sensorL_Pin)) ;
 8001450:	2102      	movs	r1, #2
 8001452:	4817      	ldr	r0, [pc, #92]	; (80014b0 <sensores+0x64>)
 8001454:	f002 f890 	bl	8003578 <HAL_GPIO_ReadPin>
 8001458:	4603      	mov	r3, r0
 800145a:	461a      	mov	r2, r3
 800145c:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <sensores+0x68>)
 800145e:	701a      	strb	r2, [r3, #0]
	SD = HAL_GPIO_ReadPin(IN_sensorR_GPIO_Port, IN_sensorR_Pin);
 8001460:	2108      	movs	r1, #8
 8001462:	4813      	ldr	r0, [pc, #76]	; (80014b0 <sensores+0x64>)
 8001464:	f002 f888 	bl	8003578 <HAL_GPIO_ReadPin>
 8001468:	4603      	mov	r3, r0
 800146a:	461a      	mov	r2, r3
 800146c:	4b12      	ldr	r3, [pc, #72]	; (80014b8 <sensores+0x6c>)
 800146e:	701a      	strb	r2, [r3, #0]
	if (distanciaSR04 < 25) SF = 0; else SF = 1;
 8001470:	4b12      	ldr	r3, [pc, #72]	; (80014bc <sensores+0x70>)
 8001472:	881b      	ldrh	r3, [r3, #0]
 8001474:	2b18      	cmp	r3, #24
 8001476:	d803      	bhi.n	8001480 <sensores+0x34>
 8001478:	4b11      	ldr	r3, [pc, #68]	; (80014c0 <sensores+0x74>)
 800147a:	2200      	movs	r2, #0
 800147c:	701a      	strb	r2, [r3, #0]
 800147e:	e002      	b.n	8001486 <sensores+0x3a>
 8001480:	4b0f      	ldr	r3, [pc, #60]	; (80014c0 <sensores+0x74>)
 8001482:	2201      	movs	r2, #1
 8001484:	701a      	strb	r2, [r3, #0]

	sensores_dist = SI << 2 | SF << 1 | SD;
 8001486:	4b0b      	ldr	r3, [pc, #44]	; (80014b4 <sensores+0x68>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	b25a      	sxtb	r2, r3
 800148e:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <sensores+0x74>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	b25b      	sxtb	r3, r3
 8001496:	4313      	orrs	r3, r2
 8001498:	b25a      	sxtb	r2, r3
 800149a:	4b07      	ldr	r3, [pc, #28]	; (80014b8 <sensores+0x6c>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	b25b      	sxtb	r3, r3
 80014a0:	4313      	orrs	r3, r2
 80014a2:	b25b      	sxtb	r3, r3
 80014a4:	b2da      	uxtb	r2, r3
 80014a6:	4b07      	ldr	r3, [pc, #28]	; (80014c4 <sensores+0x78>)
 80014a8:	701a      	strb	r2, [r3, #0]
} //end sensores()
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	40020c00 	.word	0x40020c00
 80014b4:	200000ba 	.word	0x200000ba
 80014b8:	200000bc 	.word	0x200000bc
 80014bc:	200000e8 	.word	0x200000e8
 80014c0:	200000bb 	.word	0x200000bb
 80014c4:	200000bd 	.word	0x200000bd

080014c8 <movimientoLibre>:
	velLFinal = abs(vl);
	velRFinal = abs(vr);

} //end velocidades()

void movimientoLibre (void){
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0

	if (avance_cant != 0) avance_cant = 0;
 80014cc:	4bb7      	ldr	r3, [pc, #732]	; (80017ac <movimientoLibre+0x2e4>)
 80014ce:	881b      	ldrh	r3, [r3, #0]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d002      	beq.n	80014da <movimientoLibre+0x12>
 80014d4:	4bb5      	ldr	r3, [pc, #724]	; (80017ac <movimientoLibre+0x2e4>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	801a      	strh	r2, [r3, #0]
	if (retroceso_cant != 0) retroceso_cant = 0;
 80014da:	4bb5      	ldr	r3, [pc, #724]	; (80017b0 <movimientoLibre+0x2e8>)
 80014dc:	881b      	ldrh	r3, [r3, #0]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d002      	beq.n	80014e8 <movimientoLibre+0x20>
 80014e2:	4bb3      	ldr	r3, [pc, #716]	; (80017b0 <movimientoLibre+0x2e8>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	801a      	strh	r2, [r3, #0]
	if (giroIzq_cant != 0) giroIzq_cant = 0;
 80014e8:	4bb2      	ldr	r3, [pc, #712]	; (80017b4 <movimientoLibre+0x2ec>)
 80014ea:	881b      	ldrh	r3, [r3, #0]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d002      	beq.n	80014f6 <movimientoLibre+0x2e>
 80014f0:	4bb0      	ldr	r3, [pc, #704]	; (80017b4 <movimientoLibre+0x2ec>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	801a      	strh	r2, [r3, #0]
	if (giroDer_cant != 0) giroDer_cant = 0;
 80014f6:	4bb0      	ldr	r3, [pc, #704]	; (80017b8 <movimientoLibre+0x2f0>)
 80014f8:	881b      	ldrh	r3, [r3, #0]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d002      	beq.n	8001504 <movimientoLibre+0x3c>
 80014fe:	4bae      	ldr	r3, [pc, #696]	; (80017b8 <movimientoLibre+0x2f0>)
 8001500:	2200      	movs	r2, #0
 8001502:	801a      	strh	r2, [r3, #0]

	switch (status_movimiento) {
 8001504:	4bad      	ldr	r3, [pc, #692]	; (80017bc <movimientoLibre+0x2f4>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	2b06      	cmp	r3, #6
 800150a:	f200 8171 	bhi.w	80017f0 <movimientoLibre+0x328>
 800150e:	a201      	add	r2, pc, #4	; (adr r2, 8001514 <movimientoLibre+0x4c>)
 8001510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001514:	08001531 	.word	0x08001531
 8001518:	08001579 	.word	0x08001579
 800151c:	080016b1 	.word	0x080016b1
 8001520:	08001601 	.word	0x08001601
 8001524:	08001659 	.word	0x08001659
 8001528:	080016f3 	.word	0x080016f3
 800152c:	0800175d 	.word	0x0800175d
		case QUIETO:

			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 0);
 8001530:	2200      	movs	r2, #0
 8001532:	2101      	movs	r1, #1
 8001534:	48a2      	ldr	r0, [pc, #648]	; (80017c0 <movimientoLibre+0x2f8>)
 8001536:	f002 f837 	bl	80035a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 0);
 800153a:	2200      	movs	r2, #0
 800153c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001540:	48a0      	ldr	r0, [pc, #640]	; (80017c4 <movimientoLibre+0x2fc>)
 8001542:	f002 f831 	bl	80035a8 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 0);
 8001546:	2200      	movs	r2, #0
 8001548:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800154c:	489d      	ldr	r0, [pc, #628]	; (80017c4 <movimientoLibre+0x2fc>)
 800154e:	f002 f82b 	bl	80035a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 0);
 8001552:	2200      	movs	r2, #0
 8001554:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001558:	489a      	ldr	r0, [pc, #616]	; (80017c4 <movimientoLibre+0x2fc>)
 800155a:	f002 f825 	bl	80035a8 <HAL_GPIO_WritePin>

			velL = 0;
 800155e:	4b9a      	ldr	r3, [pc, #616]	; (80017c8 <movimientoLibre+0x300>)
 8001560:	2200      	movs	r2, #0
 8001562:	701a      	strb	r2, [r3, #0]
			velR = 0;
 8001564:	4b99      	ldr	r3, [pc, #612]	; (80017cc <movimientoLibre+0x304>)
 8001566:	2200      	movs	r2, #0
 8001568:	701a      	strb	r2, [r3, #0]
			periodo_Encoder = 0;
 800156a:	4b99      	ldr	r3, [pc, #612]	; (80017d0 <movimientoLibre+0x308>)
 800156c:	2200      	movs	r2, #0
 800156e:	701a      	strb	r2, [r3, #0]

			status_movimiento = AVANZANDO;
 8001570:	4b92      	ldr	r3, [pc, #584]	; (80017bc <movimientoLibre+0x2f4>)
 8001572:	2201      	movs	r2, #1
 8001574:	701a      	strb	r2, [r3, #0]
		break;
 8001576:	e13c      	b.n	80017f2 <movimientoLibre+0x32a>
		case AVANZANDO:

			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 1);
 8001578:	2201      	movs	r2, #1
 800157a:	2101      	movs	r1, #1
 800157c:	4890      	ldr	r0, [pc, #576]	; (80017c0 <movimientoLibre+0x2f8>)
 800157e:	f002 f813 	bl	80035a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 1);
 8001582:	2201      	movs	r2, #1
 8001584:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001588:	488e      	ldr	r0, [pc, #568]	; (80017c4 <movimientoLibre+0x2fc>)
 800158a:	f002 f80d 	bl	80035a8 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 0);
 800158e:	2200      	movs	r2, #0
 8001590:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001594:	488b      	ldr	r0, [pc, #556]	; (80017c4 <movimientoLibre+0x2fc>)
 8001596:	f002 f807 	bl	80035a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 0);
 800159a:	2200      	movs	r2, #0
 800159c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015a0:	4888      	ldr	r0, [pc, #544]	; (80017c4 <movimientoLibre+0x2fc>)
 80015a2:	f002 f801 	bl	80035a8 <HAL_GPIO_WritePin>

			velL = 5;
 80015a6:	4b88      	ldr	r3, [pc, #544]	; (80017c8 <movimientoLibre+0x300>)
 80015a8:	2205      	movs	r2, #5
 80015aa:	701a      	strb	r2, [r3, #0]
			velR = 5;
 80015ac:	4b87      	ldr	r3, [pc, #540]	; (80017cc <movimientoLibre+0x304>)
 80015ae:	2205      	movs	r2, #5
 80015b0:	701a      	strb	r2, [r3, #0]

			switch (sensores_dist) {
 80015b2:	4b88      	ldr	r3, [pc, #544]	; (80017d4 <movimientoLibre+0x30c>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	2b06      	cmp	r3, #6
 80015b8:	d820      	bhi.n	80015fc <movimientoLibre+0x134>
 80015ba:	a201      	add	r2, pc, #4	; (adr r2, 80015c0 <movimientoLibre+0xf8>)
 80015bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015c0:	080015e5 	.word	0x080015e5
 80015c4:	080015f5 	.word	0x080015f5
 80015c8:	080015fd 	.word	0x080015fd
 80015cc:	080015ed 	.word	0x080015ed
 80015d0:	080015e5 	.word	0x080015e5
 80015d4:	080015e5 	.word	0x080015e5
 80015d8:	080015dd 	.word	0x080015dd
				case 0b110:
					//agregado para prueba
					//status_movimiento = PIVOTE_IZQ_AVAN;
					status_movimiento = ROTANDO_IZQ;
 80015dc:	4b77      	ldr	r3, [pc, #476]	; (80017bc <movimientoLibre+0x2f4>)
 80015de:	2203      	movs	r2, #3
 80015e0:	701a      	strb	r2, [r3, #0]

				break;
 80015e2:	e00c      	b.n	80015fe <movimientoLibre+0x136>
				case 0b101:
				case 0b100:
				case 0b000:
					status_movimiento = ROTANDO_IZQ;
 80015e4:	4b75      	ldr	r3, [pc, #468]	; (80017bc <movimientoLibre+0x2f4>)
 80015e6:	2203      	movs	r2, #3
 80015e8:	701a      	strb	r2, [r3, #0]
				break;
 80015ea:	e008      	b.n	80015fe <movimientoLibre+0x136>
				case 0b011:
					//agregado para prueba
					//status_movimiento = PIVOTE_DER_AVAN;
					status_movimiento = ROTANDO_DER;
 80015ec:	4b73      	ldr	r3, [pc, #460]	; (80017bc <movimientoLibre+0x2f4>)
 80015ee:	2204      	movs	r2, #4
 80015f0:	701a      	strb	r2, [r3, #0]
				break;
 80015f2:	e004      	b.n	80015fe <movimientoLibre+0x136>
				case 0b001:
					status_movimiento = ROTANDO_DER;
 80015f4:	4b71      	ldr	r3, [pc, #452]	; (80017bc <movimientoLibre+0x2f4>)
 80015f6:	2204      	movs	r2, #4
 80015f8:	701a      	strb	r2, [r3, #0]
				break;
 80015fa:	e000      	b.n	80015fe <movimientoLibre+0x136>
				default:
				break;
 80015fc:	bf00      	nop
			} //end switch sensores_dist

		break;
 80015fe:	e0f8      	b.n	80017f2 <movimientoLibre+0x32a>
		case ROTANDO_IZQ:

			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 0);
 8001600:	2200      	movs	r2, #0
 8001602:	2101      	movs	r1, #1
 8001604:	486e      	ldr	r0, [pc, #440]	; (80017c0 <movimientoLibre+0x2f8>)
 8001606:	f001 ffcf 	bl	80035a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 1);
 800160a:	2201      	movs	r2, #1
 800160c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001610:	486c      	ldr	r0, [pc, #432]	; (80017c4 <movimientoLibre+0x2fc>)
 8001612:	f001 ffc9 	bl	80035a8 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 1);
 8001616:	2201      	movs	r2, #1
 8001618:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800161c:	4869      	ldr	r0, [pc, #420]	; (80017c4 <movimientoLibre+0x2fc>)
 800161e:	f001 ffc3 	bl	80035a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 0);
 8001622:	2200      	movs	r2, #0
 8001624:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001628:	4866      	ldr	r0, [pc, #408]	; (80017c4 <movimientoLibre+0x2fc>)
 800162a:	f001 ffbd 	bl	80035a8 <HAL_GPIO_WritePin>

			velL = 5;
 800162e:	4b66      	ldr	r3, [pc, #408]	; (80017c8 <movimientoLibre+0x300>)
 8001630:	2205      	movs	r2, #5
 8001632:	701a      	strb	r2, [r3, #0]
			velR = 5;
 8001634:	4b65      	ldr	r3, [pc, #404]	; (80017cc <movimientoLibre+0x304>)
 8001636:	2205      	movs	r2, #5
 8001638:	701a      	strb	r2, [r3, #0]

			switch (sensores_dist){
 800163a:	4b66      	ldr	r3, [pc, #408]	; (80017d4 <movimientoLibre+0x30c>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	2b03      	cmp	r3, #3
 8001640:	d005      	beq.n	800164e <movimientoLibre+0x186>
 8001642:	2b07      	cmp	r3, #7
 8001644:	d106      	bne.n	8001654 <movimientoLibre+0x18c>
				case 0b111:
					status_movimiento = AVANZANDO;
 8001646:	4b5d      	ldr	r3, [pc, #372]	; (80017bc <movimientoLibre+0x2f4>)
 8001648:	2201      	movs	r2, #1
 800164a:	701a      	strb	r2, [r3, #0]
					break;
 800164c:	e003      	b.n	8001656 <movimientoLibre+0x18e>
				case 0b011:
					status_movimiento = ROTANDO_DER;
 800164e:	4b5b      	ldr	r3, [pc, #364]	; (80017bc <movimientoLibre+0x2f4>)
 8001650:	2204      	movs	r2, #4
 8001652:	701a      	strb	r2, [r3, #0]
				default:
					break;
 8001654:	bf00      	nop
			} //end switch sensores_dist

		break;
 8001656:	e0cc      	b.n	80017f2 <movimientoLibre+0x32a>
		case ROTANDO_DER:
			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 1);
 8001658:	2201      	movs	r2, #1
 800165a:	2101      	movs	r1, #1
 800165c:	4858      	ldr	r0, [pc, #352]	; (80017c0 <movimientoLibre+0x2f8>)
 800165e:	f001 ffa3 	bl	80035a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 0);
 8001662:	2200      	movs	r2, #0
 8001664:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001668:	4856      	ldr	r0, [pc, #344]	; (80017c4 <movimientoLibre+0x2fc>)
 800166a:	f001 ff9d 	bl	80035a8 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 0);
 800166e:	2200      	movs	r2, #0
 8001670:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001674:	4853      	ldr	r0, [pc, #332]	; (80017c4 <movimientoLibre+0x2fc>)
 8001676:	f001 ff97 	bl	80035a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 1);
 800167a:	2201      	movs	r2, #1
 800167c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001680:	4850      	ldr	r0, [pc, #320]	; (80017c4 <movimientoLibre+0x2fc>)
 8001682:	f001 ff91 	bl	80035a8 <HAL_GPIO_WritePin>

			velL = 5;
 8001686:	4b50      	ldr	r3, [pc, #320]	; (80017c8 <movimientoLibre+0x300>)
 8001688:	2205      	movs	r2, #5
 800168a:	701a      	strb	r2, [r3, #0]
			velR = 5;
 800168c:	4b4f      	ldr	r3, [pc, #316]	; (80017cc <movimientoLibre+0x304>)
 800168e:	2205      	movs	r2, #5
 8001690:	701a      	strb	r2, [r3, #0]

			switch (sensores_dist){
 8001692:	4b50      	ldr	r3, [pc, #320]	; (80017d4 <movimientoLibre+0x30c>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	2b06      	cmp	r3, #6
 8001698:	d005      	beq.n	80016a6 <movimientoLibre+0x1de>
 800169a:	2b07      	cmp	r3, #7
 800169c:	d106      	bne.n	80016ac <movimientoLibre+0x1e4>
				case 0b111:
					status_movimiento = AVANZANDO;
 800169e:	4b47      	ldr	r3, [pc, #284]	; (80017bc <movimientoLibre+0x2f4>)
 80016a0:	2201      	movs	r2, #1
 80016a2:	701a      	strb	r2, [r3, #0]
					break;
 80016a4:	e003      	b.n	80016ae <movimientoLibre+0x1e6>
				case 0b110:
					status_movimiento = ROTANDO_IZQ;
 80016a6:	4b45      	ldr	r3, [pc, #276]	; (80017bc <movimientoLibre+0x2f4>)
 80016a8:	2203      	movs	r2, #3
 80016aa:	701a      	strb	r2, [r3, #0]
				default:
					break;
 80016ac:	bf00      	nop
			} //end switch sensores_dist

		break;
 80016ae:	e0a0      	b.n	80017f2 <movimientoLibre+0x32a>
		case RETROCEDIENDO:
			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 0);
 80016b0:	2200      	movs	r2, #0
 80016b2:	2101      	movs	r1, #1
 80016b4:	4842      	ldr	r0, [pc, #264]	; (80017c0 <movimientoLibre+0x2f8>)
 80016b6:	f001 ff77 	bl	80035a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 0);
 80016ba:	2200      	movs	r2, #0
 80016bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016c0:	4840      	ldr	r0, [pc, #256]	; (80017c4 <movimientoLibre+0x2fc>)
 80016c2:	f001 ff71 	bl	80035a8 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 1);
 80016c6:	2201      	movs	r2, #1
 80016c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016cc:	483d      	ldr	r0, [pc, #244]	; (80017c4 <movimientoLibre+0x2fc>)
 80016ce:	f001 ff6b 	bl	80035a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 1);
 80016d2:	2201      	movs	r2, #1
 80016d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016d8:	483a      	ldr	r0, [pc, #232]	; (80017c4 <movimientoLibre+0x2fc>)
 80016da:	f001 ff65 	bl	80035a8 <HAL_GPIO_WritePin>

			velL = 5;
 80016de:	4b3a      	ldr	r3, [pc, #232]	; (80017c8 <movimientoLibre+0x300>)
 80016e0:	2205      	movs	r2, #5
 80016e2:	701a      	strb	r2, [r3, #0]
			velR = 5;
 80016e4:	4b39      	ldr	r3, [pc, #228]	; (80017cc <movimientoLibre+0x304>)
 80016e6:	2205      	movs	r2, #5
 80016e8:	701a      	strb	r2, [r3, #0]

			status_movimiento = AVANZANDO;
 80016ea:	4b34      	ldr	r3, [pc, #208]	; (80017bc <movimientoLibre+0x2f4>)
 80016ec:	2201      	movs	r2, #1
 80016ee:	701a      	strb	r2, [r3, #0]
			break;
 80016f0:	e07f      	b.n	80017f2 <movimientoLibre+0x32a>
		case PIVOTE_IZQ_AVAN:
			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 0);
 80016f2:	2200      	movs	r2, #0
 80016f4:	2101      	movs	r1, #1
 80016f6:	4832      	ldr	r0, [pc, #200]	; (80017c0 <movimientoLibre+0x2f8>)
 80016f8:	f001 ff56 	bl	80035a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 1);
 80016fc:	2201      	movs	r2, #1
 80016fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001702:	4830      	ldr	r0, [pc, #192]	; (80017c4 <movimientoLibre+0x2fc>)
 8001704:	f001 ff50 	bl	80035a8 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 0);
 8001708:	2200      	movs	r2, #0
 800170a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800170e:	482d      	ldr	r0, [pc, #180]	; (80017c4 <movimientoLibre+0x2fc>)
 8001710:	f001 ff4a 	bl	80035a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 0);
 8001714:	2200      	movs	r2, #0
 8001716:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800171a:	482a      	ldr	r0, [pc, #168]	; (80017c4 <movimientoLibre+0x2fc>)
 800171c:	f001 ff44 	bl	80035a8 <HAL_GPIO_WritePin>

			velL = 0;
 8001720:	4b29      	ldr	r3, [pc, #164]	; (80017c8 <movimientoLibre+0x300>)
 8001722:	2200      	movs	r2, #0
 8001724:	701a      	strb	r2, [r3, #0]
			velR = 5;
 8001726:	4b29      	ldr	r3, [pc, #164]	; (80017cc <movimientoLibre+0x304>)
 8001728:	2205      	movs	r2, #5
 800172a:	701a      	strb	r2, [r3, #0]

			switch (sensores_dist){
 800172c:	4b29      	ldr	r3, [pc, #164]	; (80017d4 <movimientoLibre+0x30c>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	2b07      	cmp	r3, #7
 8001732:	d006      	beq.n	8001742 <movimientoLibre+0x27a>
 8001734:	2b07      	cmp	r3, #7
 8001736:	dc0f      	bgt.n	8001758 <movimientoLibre+0x290>
 8001738:	2b03      	cmp	r3, #3
 800173a:	d006      	beq.n	800174a <movimientoLibre+0x282>
 800173c:	2b04      	cmp	r3, #4
 800173e:	d008      	beq.n	8001752 <movimientoLibre+0x28a>
					status_movimiento = ROTANDO_DER;
				break;
				case 0b100:
					status_movimiento = ROTANDO_IZQ;
				default:
				break;
 8001740:	e00a      	b.n	8001758 <movimientoLibre+0x290>
					status_movimiento = AVANZANDO;
 8001742:	4b1e      	ldr	r3, [pc, #120]	; (80017bc <movimientoLibre+0x2f4>)
 8001744:	2201      	movs	r2, #1
 8001746:	701a      	strb	r2, [r3, #0]
				break;
 8001748:	e007      	b.n	800175a <movimientoLibre+0x292>
					status_movimiento = ROTANDO_DER;
 800174a:	4b1c      	ldr	r3, [pc, #112]	; (80017bc <movimientoLibre+0x2f4>)
 800174c:	2204      	movs	r2, #4
 800174e:	701a      	strb	r2, [r3, #0]
				break;
 8001750:	e003      	b.n	800175a <movimientoLibre+0x292>
					status_movimiento = ROTANDO_IZQ;
 8001752:	4b1a      	ldr	r3, [pc, #104]	; (80017bc <movimientoLibre+0x2f4>)
 8001754:	2203      	movs	r2, #3
 8001756:	701a      	strb	r2, [r3, #0]
				break;
 8001758:	bf00      	nop
			} //end switch sensores_dist

		break;
 800175a:	e04a      	b.n	80017f2 <movimientoLibre+0x32a>
		case PIVOTE_DER_AVAN:
			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 1);
 800175c:	2201      	movs	r2, #1
 800175e:	2101      	movs	r1, #1
 8001760:	4817      	ldr	r0, [pc, #92]	; (80017c0 <movimientoLibre+0x2f8>)
 8001762:	f001 ff21 	bl	80035a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 0);
 8001766:	2200      	movs	r2, #0
 8001768:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800176c:	4815      	ldr	r0, [pc, #84]	; (80017c4 <movimientoLibre+0x2fc>)
 800176e:	f001 ff1b 	bl	80035a8 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 0);
 8001772:	2200      	movs	r2, #0
 8001774:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001778:	4812      	ldr	r0, [pc, #72]	; (80017c4 <movimientoLibre+0x2fc>)
 800177a:	f001 ff15 	bl	80035a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 0);
 800177e:	2200      	movs	r2, #0
 8001780:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001784:	480f      	ldr	r0, [pc, #60]	; (80017c4 <movimientoLibre+0x2fc>)
 8001786:	f001 ff0f 	bl	80035a8 <HAL_GPIO_WritePin>

			velL = 5;
 800178a:	4b0f      	ldr	r3, [pc, #60]	; (80017c8 <movimientoLibre+0x300>)
 800178c:	2205      	movs	r2, #5
 800178e:	701a      	strb	r2, [r3, #0]
			velR = 0;
 8001790:	4b0e      	ldr	r3, [pc, #56]	; (80017cc <movimientoLibre+0x304>)
 8001792:	2200      	movs	r2, #0
 8001794:	701a      	strb	r2, [r3, #0]

			switch (sensores_dist){
 8001796:	4b0f      	ldr	r3, [pc, #60]	; (80017d4 <movimientoLibre+0x30c>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	2b07      	cmp	r3, #7
 800179c:	d01c      	beq.n	80017d8 <movimientoLibre+0x310>
 800179e:	2b07      	cmp	r3, #7
 80017a0:	dc25      	bgt.n	80017ee <movimientoLibre+0x326>
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d020      	beq.n	80017e8 <movimientoLibre+0x320>
 80017a6:	2b06      	cmp	r3, #6
 80017a8:	d01a      	beq.n	80017e0 <movimientoLibre+0x318>
					status_movimiento = ROTANDO_IZQ;
				break;
				case 0b001:
					status_movimiento = ROTANDO_DER;
				default:
				break;
 80017aa:	e020      	b.n	80017ee <movimientoLibre+0x326>
 80017ac:	200000b2 	.word	0x200000b2
 80017b0:	200000b4 	.word	0x200000b4
 80017b4:	200000b6 	.word	0x200000b6
 80017b8:	200000b8 	.word	0x200000b8
 80017bc:	200000a1 	.word	0x200000a1
 80017c0:	40020c00 	.word	0x40020c00
 80017c4:	40020800 	.word	0x40020800
 80017c8:	20000001 	.word	0x20000001
 80017cc:	20000002 	.word	0x20000002
 80017d0:	200000d3 	.word	0x200000d3
 80017d4:	200000bd 	.word	0x200000bd
					status_movimiento = AVANZANDO;
 80017d8:	4b07      	ldr	r3, [pc, #28]	; (80017f8 <movimientoLibre+0x330>)
 80017da:	2201      	movs	r2, #1
 80017dc:	701a      	strb	r2, [r3, #0]
				break;
 80017de:	e007      	b.n	80017f0 <movimientoLibre+0x328>
					status_movimiento = ROTANDO_IZQ;
 80017e0:	4b05      	ldr	r3, [pc, #20]	; (80017f8 <movimientoLibre+0x330>)
 80017e2:	2203      	movs	r2, #3
 80017e4:	701a      	strb	r2, [r3, #0]
				break;
 80017e6:	e003      	b.n	80017f0 <movimientoLibre+0x328>
					status_movimiento = ROTANDO_DER;
 80017e8:	4b03      	ldr	r3, [pc, #12]	; (80017f8 <movimientoLibre+0x330>)
 80017ea:	2204      	movs	r2, #4
 80017ec:	701a      	strb	r2, [r3, #0]
				break;
 80017ee:	bf00      	nop
			} //end switch sensores_dist

		default:
		break;
 80017f0:	bf00      	nop

	} //fin switch status_movimiento

} //fin movimientoLibre()
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	200000a1 	.word	0x200000a1

080017fc <movimientoRC>:

void movimientoRC (void){
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0

	if (!avance_cant && !retroceso_cant && !giroIzq_cant && !giroDer_cant ){
 8001800:	4b94      	ldr	r3, [pc, #592]	; (8001a54 <movimientoRC+0x258>)
 8001802:	881b      	ldrh	r3, [r3, #0]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d10e      	bne.n	8001826 <movimientoRC+0x2a>
 8001808:	4b93      	ldr	r3, [pc, #588]	; (8001a58 <movimientoRC+0x25c>)
 800180a:	881b      	ldrh	r3, [r3, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d10a      	bne.n	8001826 <movimientoRC+0x2a>
 8001810:	4b92      	ldr	r3, [pc, #584]	; (8001a5c <movimientoRC+0x260>)
 8001812:	881b      	ldrh	r3, [r3, #0]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d106      	bne.n	8001826 <movimientoRC+0x2a>
 8001818:	4b91      	ldr	r3, [pc, #580]	; (8001a60 <movimientoRC+0x264>)
 800181a:	881b      	ldrh	r3, [r3, #0]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d102      	bne.n	8001826 <movimientoRC+0x2a>
		status_movimiento = QUIETO;
 8001820:	4b90      	ldr	r3, [pc, #576]	; (8001a64 <movimientoRC+0x268>)
 8001822:	2200      	movs	r2, #0
 8001824:	701a      	strb	r2, [r3, #0]
	}

	switch (status_movimiento) {
 8001826:	4b8f      	ldr	r3, [pc, #572]	; (8001a64 <movimientoRC+0x268>)
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	2b05      	cmp	r3, #5
 800182c:	f200 81d3 	bhi.w	8001bd6 <movimientoRC+0x3da>
 8001830:	a201      	add	r2, pc, #4	; (adr r2, 8001838 <movimientoRC+0x3c>)
 8001832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001836:	bf00      	nop
 8001838:	08001851 	.word	0x08001851
 800183c:	080018f1 	.word	0x080018f1
 8001840:	08001b29 	.word	0x08001b29
 8001844:	080019a3 	.word	0x080019a3
 8001848:	08001a79 	.word	0x08001a79
 800184c:	08001bd7 	.word	0x08001bd7
		case QUIETO:

			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 0);
 8001850:	2200      	movs	r2, #0
 8001852:	2101      	movs	r1, #1
 8001854:	4884      	ldr	r0, [pc, #528]	; (8001a68 <movimientoRC+0x26c>)
 8001856:	f001 fea7 	bl	80035a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 0);
 800185a:	2200      	movs	r2, #0
 800185c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001860:	4882      	ldr	r0, [pc, #520]	; (8001a6c <movimientoRC+0x270>)
 8001862:	f001 fea1 	bl	80035a8 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 0);
 8001866:	2200      	movs	r2, #0
 8001868:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800186c:	487f      	ldr	r0, [pc, #508]	; (8001a6c <movimientoRC+0x270>)
 800186e:	f001 fe9b 	bl	80035a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 0);
 8001872:	2200      	movs	r2, #0
 8001874:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001878:	487c      	ldr	r0, [pc, #496]	; (8001a6c <movimientoRC+0x270>)
 800187a:	f001 fe95 	bl	80035a8 <HAL_GPIO_WritePin>

			if (avance_cant != 0){
 800187e:	4b75      	ldr	r3, [pc, #468]	; (8001a54 <movimientoRC+0x258>)
 8001880:	881b      	ldrh	r3, [r3, #0]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d009      	beq.n	800189a <movimientoRC+0x9e>
				acum_encoderL = 0;
 8001886:	4b7a      	ldr	r3, [pc, #488]	; (8001a70 <movimientoRC+0x274>)
 8001888:	2200      	movs	r2, #0
 800188a:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 800188c:	4b79      	ldr	r3, [pc, #484]	; (8001a74 <movimientoRC+0x278>)
 800188e:	2200      	movs	r2, #0
 8001890:	801a      	strh	r2, [r3, #0]
				status_movimiento = AVANZANDO;
 8001892:	4b74      	ldr	r3, [pc, #464]	; (8001a64 <movimientoRC+0x268>)
 8001894:	2201      	movs	r2, #1
 8001896:	701a      	strb	r2, [r3, #0]
				break;
 8001898:	e1b0      	b.n	8001bfc <movimientoRC+0x400>
			}

			if (retroceso_cant != 0){
 800189a:	4b6f      	ldr	r3, [pc, #444]	; (8001a58 <movimientoRC+0x25c>)
 800189c:	881b      	ldrh	r3, [r3, #0]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d009      	beq.n	80018b6 <movimientoRC+0xba>
				acum_encoderL = 0;
 80018a2:	4b73      	ldr	r3, [pc, #460]	; (8001a70 <movimientoRC+0x274>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 80018a8:	4b72      	ldr	r3, [pc, #456]	; (8001a74 <movimientoRC+0x278>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	801a      	strh	r2, [r3, #0]
				status_movimiento = RETROCEDIENDO;
 80018ae:	4b6d      	ldr	r3, [pc, #436]	; (8001a64 <movimientoRC+0x268>)
 80018b0:	2202      	movs	r2, #2
 80018b2:	701a      	strb	r2, [r3, #0]
				break;
 80018b4:	e1a2      	b.n	8001bfc <movimientoRC+0x400>
			}

			if (giroIzq_cant != 0){
 80018b6:	4b69      	ldr	r3, [pc, #420]	; (8001a5c <movimientoRC+0x260>)
 80018b8:	881b      	ldrh	r3, [r3, #0]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d009      	beq.n	80018d2 <movimientoRC+0xd6>
				acum_encoderL = 0;
 80018be:	4b6c      	ldr	r3, [pc, #432]	; (8001a70 <movimientoRC+0x274>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 80018c4:	4b6b      	ldr	r3, [pc, #428]	; (8001a74 <movimientoRC+0x278>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	801a      	strh	r2, [r3, #0]
				status_movimiento = ROTANDO_IZQ;
 80018ca:	4b66      	ldr	r3, [pc, #408]	; (8001a64 <movimientoRC+0x268>)
 80018cc:	2203      	movs	r2, #3
 80018ce:	701a      	strb	r2, [r3, #0]
				break;
 80018d0:	e194      	b.n	8001bfc <movimientoRC+0x400>
			}

			if (giroDer_cant != 0){
 80018d2:	4b63      	ldr	r3, [pc, #396]	; (8001a60 <movimientoRC+0x264>)
 80018d4:	881b      	ldrh	r3, [r3, #0]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	f000 817f 	beq.w	8001bda <movimientoRC+0x3de>
				acum_encoderL = 0;
 80018dc:	4b64      	ldr	r3, [pc, #400]	; (8001a70 <movimientoRC+0x274>)
 80018de:	2200      	movs	r2, #0
 80018e0:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 80018e2:	4b64      	ldr	r3, [pc, #400]	; (8001a74 <movimientoRC+0x278>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	801a      	strh	r2, [r3, #0]
				status_movimiento = ROTANDO_DER;
 80018e8:	4b5e      	ldr	r3, [pc, #376]	; (8001a64 <movimientoRC+0x268>)
 80018ea:	2204      	movs	r2, #4
 80018ec:	701a      	strb	r2, [r3, #0]
				break;
 80018ee:	e185      	b.n	8001bfc <movimientoRC+0x400>
			}

		break;
		case AVANZANDO:

			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 1);
 80018f0:	2201      	movs	r2, #1
 80018f2:	2101      	movs	r1, #1
 80018f4:	485c      	ldr	r0, [pc, #368]	; (8001a68 <movimientoRC+0x26c>)
 80018f6:	f001 fe57 	bl	80035a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 1);
 80018fa:	2201      	movs	r2, #1
 80018fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001900:	485a      	ldr	r0, [pc, #360]	; (8001a6c <movimientoRC+0x270>)
 8001902:	f001 fe51 	bl	80035a8 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 0);
 8001906:	2200      	movs	r2, #0
 8001908:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800190c:	4857      	ldr	r0, [pc, #348]	; (8001a6c <movimientoRC+0x270>)
 800190e:	f001 fe4b 	bl	80035a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 0);
 8001912:	2200      	movs	r2, #0
 8001914:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001918:	4854      	ldr	r0, [pc, #336]	; (8001a6c <movimientoRC+0x270>)
 800191a:	f001 fe45 	bl	80035a8 <HAL_GPIO_WritePin>

			encoders();
 800191e:	f000 f981 	bl	8001c24 <encoders>

			if (avance_cant > ((acum_encoderL + acum_encoderR) >> 1) ) break;
 8001922:	4b4c      	ldr	r3, [pc, #304]	; (8001a54 <movimientoRC+0x258>)
 8001924:	881b      	ldrh	r3, [r3, #0]
 8001926:	461a      	mov	r2, r3
 8001928:	4b51      	ldr	r3, [pc, #324]	; (8001a70 <movimientoRC+0x274>)
 800192a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800192e:	4619      	mov	r1, r3
 8001930:	4b50      	ldr	r3, [pc, #320]	; (8001a74 <movimientoRC+0x278>)
 8001932:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001936:	440b      	add	r3, r1
 8001938:	105b      	asrs	r3, r3, #1
 800193a:	429a      	cmp	r2, r3
 800193c:	f300 814f 	bgt.w	8001bde <movimientoRC+0x3e2>

			avance_cant = 0;
 8001940:	4b44      	ldr	r3, [pc, #272]	; (8001a54 <movimientoRC+0x258>)
 8001942:	2200      	movs	r2, #0
 8001944:	801a      	strh	r2, [r3, #0]

			status_movimiento = QUIETO;
 8001946:	4b47      	ldr	r3, [pc, #284]	; (8001a64 <movimientoRC+0x268>)
 8001948:	2200      	movs	r2, #0
 800194a:	701a      	strb	r2, [r3, #0]

			if (retroceso_cant != 0){
 800194c:	4b42      	ldr	r3, [pc, #264]	; (8001a58 <movimientoRC+0x25c>)
 800194e:	881b      	ldrh	r3, [r3, #0]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d009      	beq.n	8001968 <movimientoRC+0x16c>
				acum_encoderL = 0;
 8001954:	4b46      	ldr	r3, [pc, #280]	; (8001a70 <movimientoRC+0x274>)
 8001956:	2200      	movs	r2, #0
 8001958:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 800195a:	4b46      	ldr	r3, [pc, #280]	; (8001a74 <movimientoRC+0x278>)
 800195c:	2200      	movs	r2, #0
 800195e:	801a      	strh	r2, [r3, #0]
				status_movimiento = RETROCEDIENDO;
 8001960:	4b40      	ldr	r3, [pc, #256]	; (8001a64 <movimientoRC+0x268>)
 8001962:	2202      	movs	r2, #2
 8001964:	701a      	strb	r2, [r3, #0]
				break;
 8001966:	e149      	b.n	8001bfc <movimientoRC+0x400>
			}

			if (giroIzq_cant != 0){
 8001968:	4b3c      	ldr	r3, [pc, #240]	; (8001a5c <movimientoRC+0x260>)
 800196a:	881b      	ldrh	r3, [r3, #0]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d009      	beq.n	8001984 <movimientoRC+0x188>
				acum_encoderL = 0;
 8001970:	4b3f      	ldr	r3, [pc, #252]	; (8001a70 <movimientoRC+0x274>)
 8001972:	2200      	movs	r2, #0
 8001974:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 8001976:	4b3f      	ldr	r3, [pc, #252]	; (8001a74 <movimientoRC+0x278>)
 8001978:	2200      	movs	r2, #0
 800197a:	801a      	strh	r2, [r3, #0]
				status_movimiento = ROTANDO_IZQ;
 800197c:	4b39      	ldr	r3, [pc, #228]	; (8001a64 <movimientoRC+0x268>)
 800197e:	2203      	movs	r2, #3
 8001980:	701a      	strb	r2, [r3, #0]
				break;
 8001982:	e13b      	b.n	8001bfc <movimientoRC+0x400>
			}

			if (giroDer_cant != 0){
 8001984:	4b36      	ldr	r3, [pc, #216]	; (8001a60 <movimientoRC+0x264>)
 8001986:	881b      	ldrh	r3, [r3, #0]
 8001988:	2b00      	cmp	r3, #0
 800198a:	f000 812a 	beq.w	8001be2 <movimientoRC+0x3e6>
				acum_encoderL = 0;
 800198e:	4b38      	ldr	r3, [pc, #224]	; (8001a70 <movimientoRC+0x274>)
 8001990:	2200      	movs	r2, #0
 8001992:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 8001994:	4b37      	ldr	r3, [pc, #220]	; (8001a74 <movimientoRC+0x278>)
 8001996:	2200      	movs	r2, #0
 8001998:	801a      	strh	r2, [r3, #0]
				status_movimiento = ROTANDO_DER;
 800199a:	4b32      	ldr	r3, [pc, #200]	; (8001a64 <movimientoRC+0x268>)
 800199c:	2204      	movs	r2, #4
 800199e:	701a      	strb	r2, [r3, #0]
				break;
 80019a0:	e12c      	b.n	8001bfc <movimientoRC+0x400>
			}

		break;
		case ROTANDO_IZQ:

			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 0);
 80019a2:	2200      	movs	r2, #0
 80019a4:	2101      	movs	r1, #1
 80019a6:	4830      	ldr	r0, [pc, #192]	; (8001a68 <movimientoRC+0x26c>)
 80019a8:	f001 fdfe 	bl	80035a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 1);
 80019ac:	2201      	movs	r2, #1
 80019ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019b2:	482e      	ldr	r0, [pc, #184]	; (8001a6c <movimientoRC+0x270>)
 80019b4:	f001 fdf8 	bl	80035a8 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 1);
 80019b8:	2201      	movs	r2, #1
 80019ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019be:	482b      	ldr	r0, [pc, #172]	; (8001a6c <movimientoRC+0x270>)
 80019c0:	f001 fdf2 	bl	80035a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 0);
 80019c4:	2200      	movs	r2, #0
 80019c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019ca:	4828      	ldr	r0, [pc, #160]	; (8001a6c <movimientoRC+0x270>)
 80019cc:	f001 fdec 	bl	80035a8 <HAL_GPIO_WritePin>

			encoders();
 80019d0:	f000 f928 	bl	8001c24 <encoders>

			if (giroIzq_cant > ((acum_encoderL + acum_encoderR) >> 1) ) break;
 80019d4:	4b21      	ldr	r3, [pc, #132]	; (8001a5c <movimientoRC+0x260>)
 80019d6:	881b      	ldrh	r3, [r3, #0]
 80019d8:	461a      	mov	r2, r3
 80019da:	4b25      	ldr	r3, [pc, #148]	; (8001a70 <movimientoRC+0x274>)
 80019dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019e0:	4619      	mov	r1, r3
 80019e2:	4b24      	ldr	r3, [pc, #144]	; (8001a74 <movimientoRC+0x278>)
 80019e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019e8:	440b      	add	r3, r1
 80019ea:	105b      	asrs	r3, r3, #1
 80019ec:	429a      	cmp	r2, r3
 80019ee:	f300 80fa 	bgt.w	8001be6 <movimientoRC+0x3ea>

			giroIzq_cant = 0;
 80019f2:	4b1a      	ldr	r3, [pc, #104]	; (8001a5c <movimientoRC+0x260>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	801a      	strh	r2, [r3, #0]

			status_movimiento = QUIETO;
 80019f8:	4b1a      	ldr	r3, [pc, #104]	; (8001a64 <movimientoRC+0x268>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	701a      	strb	r2, [r3, #0]

			if (avance_cant != 0){
 80019fe:	4b15      	ldr	r3, [pc, #84]	; (8001a54 <movimientoRC+0x258>)
 8001a00:	881b      	ldrh	r3, [r3, #0]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d009      	beq.n	8001a1a <movimientoRC+0x21e>
				acum_encoderL = 0;
 8001a06:	4b1a      	ldr	r3, [pc, #104]	; (8001a70 <movimientoRC+0x274>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 8001a0c:	4b19      	ldr	r3, [pc, #100]	; (8001a74 <movimientoRC+0x278>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	801a      	strh	r2, [r3, #0]
				status_movimiento = AVANZANDO;
 8001a12:	4b14      	ldr	r3, [pc, #80]	; (8001a64 <movimientoRC+0x268>)
 8001a14:	2201      	movs	r2, #1
 8001a16:	701a      	strb	r2, [r3, #0]
				break;
 8001a18:	e0f0      	b.n	8001bfc <movimientoRC+0x400>
			}

			if (retroceso_cant != 0){
 8001a1a:	4b0f      	ldr	r3, [pc, #60]	; (8001a58 <movimientoRC+0x25c>)
 8001a1c:	881b      	ldrh	r3, [r3, #0]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d009      	beq.n	8001a36 <movimientoRC+0x23a>
				acum_encoderL = 0;
 8001a22:	4b13      	ldr	r3, [pc, #76]	; (8001a70 <movimientoRC+0x274>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 8001a28:	4b12      	ldr	r3, [pc, #72]	; (8001a74 <movimientoRC+0x278>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	801a      	strh	r2, [r3, #0]
				status_movimiento = RETROCEDIENDO;
 8001a2e:	4b0d      	ldr	r3, [pc, #52]	; (8001a64 <movimientoRC+0x268>)
 8001a30:	2202      	movs	r2, #2
 8001a32:	701a      	strb	r2, [r3, #0]
				break;
 8001a34:	e0e2      	b.n	8001bfc <movimientoRC+0x400>
			}

			if (giroDer_cant != 0){
 8001a36:	4b0a      	ldr	r3, [pc, #40]	; (8001a60 <movimientoRC+0x264>)
 8001a38:	881b      	ldrh	r3, [r3, #0]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	f000 80d5 	beq.w	8001bea <movimientoRC+0x3ee>
				acum_encoderL = 0;
 8001a40:	4b0b      	ldr	r3, [pc, #44]	; (8001a70 <movimientoRC+0x274>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 8001a46:	4b0b      	ldr	r3, [pc, #44]	; (8001a74 <movimientoRC+0x278>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	801a      	strh	r2, [r3, #0]
				status_movimiento = ROTANDO_DER;
 8001a4c:	4b05      	ldr	r3, [pc, #20]	; (8001a64 <movimientoRC+0x268>)
 8001a4e:	2204      	movs	r2, #4
 8001a50:	701a      	strb	r2, [r3, #0]
				break;
 8001a52:	e0d3      	b.n	8001bfc <movimientoRC+0x400>
 8001a54:	200000b2 	.word	0x200000b2
 8001a58:	200000b4 	.word	0x200000b4
 8001a5c:	200000b6 	.word	0x200000b6
 8001a60:	200000b8 	.word	0x200000b8
 8001a64:	200000a1 	.word	0x200000a1
 8001a68:	40020c00 	.word	0x40020c00
 8001a6c:	40020800 	.word	0x40020800
 8001a70:	200000f0 	.word	0x200000f0
 8001a74:	200000f2 	.word	0x200000f2
			}

		break;
		case ROTANDO_DER:
			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 1);
 8001a78:	2201      	movs	r2, #1
 8001a7a:	2101      	movs	r1, #1
 8001a7c:	4860      	ldr	r0, [pc, #384]	; (8001c00 <movimientoRC+0x404>)
 8001a7e:	f001 fd93 	bl	80035a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 0);
 8001a82:	2200      	movs	r2, #0
 8001a84:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a88:	485e      	ldr	r0, [pc, #376]	; (8001c04 <movimientoRC+0x408>)
 8001a8a:	f001 fd8d 	bl	80035a8 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 0);
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a94:	485b      	ldr	r0, [pc, #364]	; (8001c04 <movimientoRC+0x408>)
 8001a96:	f001 fd87 	bl	80035a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 1);
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001aa0:	4858      	ldr	r0, [pc, #352]	; (8001c04 <movimientoRC+0x408>)
 8001aa2:	f001 fd81 	bl	80035a8 <HAL_GPIO_WritePin>

			encoders();
 8001aa6:	f000 f8bd 	bl	8001c24 <encoders>

			if (giroDer_cant > ((acum_encoderL + acum_encoderR) >> 1) ) break;
 8001aaa:	4b57      	ldr	r3, [pc, #348]	; (8001c08 <movimientoRC+0x40c>)
 8001aac:	881b      	ldrh	r3, [r3, #0]
 8001aae:	461a      	mov	r2, r3
 8001ab0:	4b56      	ldr	r3, [pc, #344]	; (8001c0c <movimientoRC+0x410>)
 8001ab2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	4b55      	ldr	r3, [pc, #340]	; (8001c10 <movimientoRC+0x414>)
 8001aba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001abe:	440b      	add	r3, r1
 8001ac0:	105b      	asrs	r3, r3, #1
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	f300 8093 	bgt.w	8001bee <movimientoRC+0x3f2>

			giroDer_cant = 0;
 8001ac8:	4b4f      	ldr	r3, [pc, #316]	; (8001c08 <movimientoRC+0x40c>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	801a      	strh	r2, [r3, #0]

			status_movimiento = QUIETO;
 8001ace:	4b51      	ldr	r3, [pc, #324]	; (8001c14 <movimientoRC+0x418>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	701a      	strb	r2, [r3, #0]

			if (avance_cant != 0){
 8001ad4:	4b50      	ldr	r3, [pc, #320]	; (8001c18 <movimientoRC+0x41c>)
 8001ad6:	881b      	ldrh	r3, [r3, #0]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d009      	beq.n	8001af0 <movimientoRC+0x2f4>
				acum_encoderL = 0;
 8001adc:	4b4b      	ldr	r3, [pc, #300]	; (8001c0c <movimientoRC+0x410>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 8001ae2:	4b4b      	ldr	r3, [pc, #300]	; (8001c10 <movimientoRC+0x414>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	801a      	strh	r2, [r3, #0]
				status_movimiento = AVANZANDO;
 8001ae8:	4b4a      	ldr	r3, [pc, #296]	; (8001c14 <movimientoRC+0x418>)
 8001aea:	2201      	movs	r2, #1
 8001aec:	701a      	strb	r2, [r3, #0]
				break;
 8001aee:	e085      	b.n	8001bfc <movimientoRC+0x400>
			}

			if (retroceso_cant != 0){
 8001af0:	4b4a      	ldr	r3, [pc, #296]	; (8001c1c <movimientoRC+0x420>)
 8001af2:	881b      	ldrh	r3, [r3, #0]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d009      	beq.n	8001b0c <movimientoRC+0x310>
				acum_encoderL = 0;
 8001af8:	4b44      	ldr	r3, [pc, #272]	; (8001c0c <movimientoRC+0x410>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 8001afe:	4b44      	ldr	r3, [pc, #272]	; (8001c10 <movimientoRC+0x414>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	801a      	strh	r2, [r3, #0]
				status_movimiento = RETROCEDIENDO;
 8001b04:	4b43      	ldr	r3, [pc, #268]	; (8001c14 <movimientoRC+0x418>)
 8001b06:	2202      	movs	r2, #2
 8001b08:	701a      	strb	r2, [r3, #0]
				break;
 8001b0a:	e077      	b.n	8001bfc <movimientoRC+0x400>
			}

			if (giroIzq_cant != 0){
 8001b0c:	4b44      	ldr	r3, [pc, #272]	; (8001c20 <movimientoRC+0x424>)
 8001b0e:	881b      	ldrh	r3, [r3, #0]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d06e      	beq.n	8001bf2 <movimientoRC+0x3f6>
				acum_encoderL = 0;
 8001b14:	4b3d      	ldr	r3, [pc, #244]	; (8001c0c <movimientoRC+0x410>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 8001b1a:	4b3d      	ldr	r3, [pc, #244]	; (8001c10 <movimientoRC+0x414>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	801a      	strh	r2, [r3, #0]
				status_movimiento = ROTANDO_IZQ;
 8001b20:	4b3c      	ldr	r3, [pc, #240]	; (8001c14 <movimientoRC+0x418>)
 8001b22:	2203      	movs	r2, #3
 8001b24:	701a      	strb	r2, [r3, #0]
				break;
 8001b26:	e069      	b.n	8001bfc <movimientoRC+0x400>
			}

		break;
		case RETROCEDIENDO:
			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 0);
 8001b28:	2200      	movs	r2, #0
 8001b2a:	2101      	movs	r1, #1
 8001b2c:	4834      	ldr	r0, [pc, #208]	; (8001c00 <movimientoRC+0x404>)
 8001b2e:	f001 fd3b 	bl	80035a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in4_GPIO_Port, OUT_in4_Pin, 0);
 8001b32:	2200      	movs	r2, #0
 8001b34:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b38:	4832      	ldr	r0, [pc, #200]	; (8001c04 <movimientoRC+0x408>)
 8001b3a:	f001 fd35 	bl	80035a8 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 1);
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b44:	482f      	ldr	r0, [pc, #188]	; (8001c04 <movimientoRC+0x408>)
 8001b46:	f001 fd2f 	bl	80035a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in3_GPIO_Port, OUT_in3_Pin, 1);
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b50:	482c      	ldr	r0, [pc, #176]	; (8001c04 <movimientoRC+0x408>)
 8001b52:	f001 fd29 	bl	80035a8 <HAL_GPIO_WritePin>

			encoders();
 8001b56:	f000 f865 	bl	8001c24 <encoders>

			if (retroceso_cant > ((acum_encoderL + acum_encoderR) >> 1) ) break;
 8001b5a:	4b30      	ldr	r3, [pc, #192]	; (8001c1c <movimientoRC+0x420>)
 8001b5c:	881b      	ldrh	r3, [r3, #0]
 8001b5e:	461a      	mov	r2, r3
 8001b60:	4b2a      	ldr	r3, [pc, #168]	; (8001c0c <movimientoRC+0x410>)
 8001b62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b66:	4619      	mov	r1, r3
 8001b68:	4b29      	ldr	r3, [pc, #164]	; (8001c10 <movimientoRC+0x414>)
 8001b6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b6e:	440b      	add	r3, r1
 8001b70:	105b      	asrs	r3, r3, #1
 8001b72:	429a      	cmp	r2, r3
 8001b74:	dc3f      	bgt.n	8001bf6 <movimientoRC+0x3fa>

			retroceso_cant = 0;
 8001b76:	4b29      	ldr	r3, [pc, #164]	; (8001c1c <movimientoRC+0x420>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	801a      	strh	r2, [r3, #0]

			status_movimiento = QUIETO;
 8001b7c:	4b25      	ldr	r3, [pc, #148]	; (8001c14 <movimientoRC+0x418>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	701a      	strb	r2, [r3, #0]

			if (avance_cant != 0){
 8001b82:	4b25      	ldr	r3, [pc, #148]	; (8001c18 <movimientoRC+0x41c>)
 8001b84:	881b      	ldrh	r3, [r3, #0]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d009      	beq.n	8001b9e <movimientoRC+0x3a2>
				acum_encoderL = 0;
 8001b8a:	4b20      	ldr	r3, [pc, #128]	; (8001c0c <movimientoRC+0x410>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 8001b90:	4b1f      	ldr	r3, [pc, #124]	; (8001c10 <movimientoRC+0x414>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	801a      	strh	r2, [r3, #0]
				status_movimiento = AVANZANDO;
 8001b96:	4b1f      	ldr	r3, [pc, #124]	; (8001c14 <movimientoRC+0x418>)
 8001b98:	2201      	movs	r2, #1
 8001b9a:	701a      	strb	r2, [r3, #0]
				break;
 8001b9c:	e02e      	b.n	8001bfc <movimientoRC+0x400>
			}

			if (giroIzq_cant != 0){
 8001b9e:	4b20      	ldr	r3, [pc, #128]	; (8001c20 <movimientoRC+0x424>)
 8001ba0:	881b      	ldrh	r3, [r3, #0]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d009      	beq.n	8001bba <movimientoRC+0x3be>
				acum_encoderL = 0;
 8001ba6:	4b19      	ldr	r3, [pc, #100]	; (8001c0c <movimientoRC+0x410>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 8001bac:	4b18      	ldr	r3, [pc, #96]	; (8001c10 <movimientoRC+0x414>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	801a      	strh	r2, [r3, #0]
				status_movimiento = ROTANDO_IZQ;
 8001bb2:	4b18      	ldr	r3, [pc, #96]	; (8001c14 <movimientoRC+0x418>)
 8001bb4:	2203      	movs	r2, #3
 8001bb6:	701a      	strb	r2, [r3, #0]
				break;
 8001bb8:	e020      	b.n	8001bfc <movimientoRC+0x400>
			}

			if (giroDer_cant != 0){
 8001bba:	4b13      	ldr	r3, [pc, #76]	; (8001c08 <movimientoRC+0x40c>)
 8001bbc:	881b      	ldrh	r3, [r3, #0]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d01b      	beq.n	8001bfa <movimientoRC+0x3fe>
				acum_encoderL = 0;
 8001bc2:	4b12      	ldr	r3, [pc, #72]	; (8001c0c <movimientoRC+0x410>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	801a      	strh	r2, [r3, #0]
				acum_encoderR = 0;
 8001bc8:	4b11      	ldr	r3, [pc, #68]	; (8001c10 <movimientoRC+0x414>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	801a      	strh	r2, [r3, #0]
				status_movimiento = ROTANDO_DER;
 8001bce:	4b11      	ldr	r3, [pc, #68]	; (8001c14 <movimientoRC+0x418>)
 8001bd0:	2204      	movs	r2, #4
 8001bd2:	701a      	strb	r2, [r3, #0]
				break;
 8001bd4:	e012      	b.n	8001bfc <movimientoRC+0x400>

		break;
		case PIVOTE_DER_AVAN:

		default:
		break;
 8001bd6:	bf00      	nop
 8001bd8:	e010      	b.n	8001bfc <movimientoRC+0x400>
		break;
 8001bda:	bf00      	nop
 8001bdc:	e00e      	b.n	8001bfc <movimientoRC+0x400>
			if (avance_cant > ((acum_encoderL + acum_encoderR) >> 1) ) break;
 8001bde:	bf00      	nop
 8001be0:	e00c      	b.n	8001bfc <movimientoRC+0x400>
		break;
 8001be2:	bf00      	nop
 8001be4:	e00a      	b.n	8001bfc <movimientoRC+0x400>
			if (giroIzq_cant > ((acum_encoderL + acum_encoderR) >> 1) ) break;
 8001be6:	bf00      	nop
 8001be8:	e008      	b.n	8001bfc <movimientoRC+0x400>
		break;
 8001bea:	bf00      	nop
 8001bec:	e006      	b.n	8001bfc <movimientoRC+0x400>
			if (giroDer_cant > ((acum_encoderL + acum_encoderR) >> 1) ) break;
 8001bee:	bf00      	nop
 8001bf0:	e004      	b.n	8001bfc <movimientoRC+0x400>
		break;
 8001bf2:	bf00      	nop
 8001bf4:	e002      	b.n	8001bfc <movimientoRC+0x400>
			if (retroceso_cant > ((acum_encoderL + acum_encoderR) >> 1) ) break;
 8001bf6:	bf00      	nop
 8001bf8:	e000      	b.n	8001bfc <movimientoRC+0x400>
		break;
 8001bfa:	bf00      	nop

	} //fin switch status_movimiento

} //fin movimientoRC()
 8001bfc:	bf00      	nop
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	40020c00 	.word	0x40020c00
 8001c04:	40020800 	.word	0x40020800
 8001c08:	200000b8 	.word	0x200000b8
 8001c0c:	200000f0 	.word	0x200000f0
 8001c10:	200000f2 	.word	0x200000f2
 8001c14:	200000a1 	.word	0x200000a1
 8001c18:	200000b2 	.word	0x200000b2
 8001c1c:	200000b4 	.word	0x200000b4
 8001c20:	200000b6 	.word	0x200000b6

08001c24 <encoders>:

void encoders (void){
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0

	if (!flag_encoders) return;
 8001c28:	4b2a      	ldr	r3, [pc, #168]	; (8001cd4 <encoders+0xb0>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d04b      	beq.n	8001cc8 <encoders+0xa4>

	encoderL = __HAL_TIM_GET_COUNTER(&htim3);
 8001c30:	4b29      	ldr	r3, [pc, #164]	; (8001cd8 <encoders+0xb4>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c36:	b21a      	sxth	r2, r3
 8001c38:	4b28      	ldr	r3, [pc, #160]	; (8001cdc <encoders+0xb8>)
 8001c3a:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8001c3c:	4b26      	ldr	r3, [pc, #152]	; (8001cd8 <encoders+0xb4>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2200      	movs	r2, #0
 8001c42:	625a      	str	r2, [r3, #36]	; 0x24
	encoderR = __HAL_TIM_GET_COUNTER(&htim2);
 8001c44:	4b26      	ldr	r3, [pc, #152]	; (8001ce0 <encoders+0xbc>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4a:	b21a      	sxth	r2, r3
 8001c4c:	4b25      	ldr	r3, [pc, #148]	; (8001ce4 <encoders+0xc0>)
 8001c4e:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8001c50:	4b23      	ldr	r3, [pc, #140]	; (8001ce0 <encoders+0xbc>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2200      	movs	r2, #0
 8001c56:	625a      	str	r2, [r3, #36]	; 0x24
//	}else if (encoderL < velL){
//		if (TIM4->CCR1 < 85)
//			TIM4->CCR1++;
//	}

	TIM4->CCR1 += velL - encoderL;
 8001c58:	4b23      	ldr	r3, [pc, #140]	; (8001ce8 <encoders+0xc4>)
 8001c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c5c:	4a23      	ldr	r2, [pc, #140]	; (8001cec <encoders+0xc8>)
 8001c5e:	7812      	ldrb	r2, [r2, #0]
 8001c60:	4611      	mov	r1, r2
 8001c62:	4a1e      	ldr	r2, [pc, #120]	; (8001cdc <encoders+0xb8>)
 8001c64:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001c68:	1a8a      	subs	r2, r1, r2
 8001c6a:	4611      	mov	r1, r2
 8001c6c:	4a1e      	ldr	r2, [pc, #120]	; (8001ce8 <encoders+0xc4>)
 8001c6e:	440b      	add	r3, r1
 8001c70:	6353      	str	r3, [r2, #52]	; 0x34
//	}else if (encoderR < velR){
//		if (TIM4->CCR2 < 85)
//			TIM4->CCR2++;
//	}

	TIM4->CCR2 += velR - encoderR;
 8001c72:	4b1d      	ldr	r3, [pc, #116]	; (8001ce8 <encoders+0xc4>)
 8001c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c76:	4a1e      	ldr	r2, [pc, #120]	; (8001cf0 <encoders+0xcc>)
 8001c78:	7812      	ldrb	r2, [r2, #0]
 8001c7a:	4611      	mov	r1, r2
 8001c7c:	4a19      	ldr	r2, [pc, #100]	; (8001ce4 <encoders+0xc0>)
 8001c7e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001c82:	1a8a      	subs	r2, r1, r2
 8001c84:	4611      	mov	r1, r2
 8001c86:	4a18      	ldr	r2, [pc, #96]	; (8001ce8 <encoders+0xc4>)
 8001c88:	440b      	add	r3, r1
 8001c8a:	6393      	str	r3, [r2, #56]	; 0x38
//	if (TIM4->CCR2 < 62) TIM4->CCR2 = 62;
//	if (TIM4->CCR2 > 82) TIM4->CCR2 = 82;

	acum_encoderL += encoderL;
 8001c8c:	4b19      	ldr	r3, [pc, #100]	; (8001cf4 <encoders+0xd0>)
 8001c8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c92:	b29a      	uxth	r2, r3
 8001c94:	4b11      	ldr	r3, [pc, #68]	; (8001cdc <encoders+0xb8>)
 8001c96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	4413      	add	r3, r2
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	b21a      	sxth	r2, r3
 8001ca2:	4b14      	ldr	r3, [pc, #80]	; (8001cf4 <encoders+0xd0>)
 8001ca4:	801a      	strh	r2, [r3, #0]
	acum_encoderR += encoderR;
 8001ca6:	4b14      	ldr	r3, [pc, #80]	; (8001cf8 <encoders+0xd4>)
 8001ca8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cac:	b29a      	uxth	r2, r3
 8001cae:	4b0d      	ldr	r3, [pc, #52]	; (8001ce4 <encoders+0xc0>)
 8001cb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	4413      	add	r3, r2
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	b21a      	sxth	r2, r3
 8001cbc:	4b0e      	ldr	r3, [pc, #56]	; (8001cf8 <encoders+0xd4>)
 8001cbe:	801a      	strh	r2, [r3, #0]

	flag_encoders = 0;
 8001cc0:	4b04      	ldr	r3, [pc, #16]	; (8001cd4 <encoders+0xb0>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	701a      	strb	r2, [r3, #0]
 8001cc6:	e000      	b.n	8001cca <encoders+0xa6>
	if (!flag_encoders) return;
 8001cc8:	bf00      	nop

} //fin encoders()
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	200000ea 	.word	0x200000ea
 8001cd8:	20000144 	.word	0x20000144
 8001cdc:	200000ec 	.word	0x200000ec
 8001ce0:	20000104 	.word	0x20000104
 8001ce4:	200000ee 	.word	0x200000ee
 8001ce8:	40000800 	.word	0x40000800
 8001cec:	20000001 	.word	0x20000001
 8001cf0:	20000002 	.word	0x20000002
 8001cf4:	200000f0 	.word	0x200000f0
 8001cf8:	200000f2 	.word	0x200000f2
 8001cfc:	00000000 	.word	0x00000000

08001d00 <check_rxUart>:

	HAL_UART_Transmit(&huart7, txUart, 4, 20);
	HAL_UART_Receive_IT(&huart7, rxUart, 4);
}

void check_rxUart (void){
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0

	if (rxUart[3] != 0){
 8001d04:	4b8c      	ldr	r3, [pc, #560]	; (8001f38 <check_rxUart+0x238>)
 8001d06:	78db      	ldrb	r3, [r3, #3]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d010      	beq.n	8001d2e <check_rxUart+0x2e>
		txUart[0] = CMD_ERROR;
 8001d0c:	4b8b      	ldr	r3, [pc, #556]	; (8001f3c <check_rxUart+0x23c>)
 8001d0e:	2204      	movs	r2, #4
 8001d10:	701a      	strb	r2, [r3, #0]
		txUart[3] = '\0';
 8001d12:	4b8a      	ldr	r3, [pc, #552]	; (8001f3c <check_rxUart+0x23c>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	70da      	strb	r2, [r3, #3]
		HAL_UART_Transmit_IT(&huart7, txUart, 4);
 8001d18:	2204      	movs	r2, #4
 8001d1a:	4988      	ldr	r1, [pc, #544]	; (8001f3c <check_rxUart+0x23c>)
 8001d1c:	4888      	ldr	r0, [pc, #544]	; (8001f40 <check_rxUart+0x240>)
 8001d1e:	f004 fc02 	bl	8006526 <HAL_UART_Transmit_IT>
		HAL_UART_Receive_IT(&huart7, rxUart, 4);
 8001d22:	2204      	movs	r2, #4
 8001d24:	4984      	ldr	r1, [pc, #528]	; (8001f38 <check_rxUart+0x238>)
 8001d26:	4886      	ldr	r0, [pc, #536]	; (8001f40 <check_rxUart+0x240>)
 8001d28:	f004 fc42 	bl	80065b0 <HAL_UART_Receive_IT>
		return;
 8001d2c:	e1aa      	b.n	8002084 <check_rxUart+0x384>
	}

	switch (rxUart[0]) {
 8001d2e:	4b82      	ldr	r3, [pc, #520]	; (8001f38 <check_rxUart+0x238>)
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	3b01      	subs	r3, #1
 8001d34:	2b13      	cmp	r3, #19
 8001d36:	f200 81a0 	bhi.w	800207a <check_rxUart+0x37a>
 8001d3a:	a201      	add	r2, pc, #4	; (adr r2, 8001d40 <check_rxUart+0x40>)
 8001d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d40:	08001d91 	.word	0x08001d91
 8001d44:	0800207b 	.word	0x0800207b
 8001d48:	0800207b 	.word	0x0800207b
 8001d4c:	0800207b 	.word	0x0800207b
 8001d50:	08001daf 	.word	0x08001daf
 8001d54:	0800207b 	.word	0x0800207b
 8001d58:	0800207b 	.word	0x0800207b
 8001d5c:	08001f69 	.word	0x08001f69
 8001d60:	0800207b 	.word	0x0800207b
 8001d64:	0800207b 	.word	0x0800207b
 8001d68:	0800207b 	.word	0x0800207b
 8001d6c:	0800207b 	.word	0x0800207b
 8001d70:	08001e1f 	.word	0x08001e1f
 8001d74:	08001e8f 	.word	0x08001e8f
 8001d78:	08001ec7 	.word	0x08001ec7
 8001d7c:	08001e57 	.word	0x08001e57
 8001d80:	0800207b 	.word	0x0800207b
 8001d84:	0800207b 	.word	0x0800207b
 8001d88:	0800207b 	.word	0x0800207b
 8001d8c:	08001eff 	.word	0x08001eff
		case HOLA:
			esp01Presente = 1;
 8001d90:	4b6c      	ldr	r3, [pc, #432]	; (8001f44 <check_rxUart+0x244>)
 8001d92:	2201      	movs	r2, #1
 8001d94:	701a      	strb	r2, [r3, #0]
			txUart[0] = HOLA;
 8001d96:	4b69      	ldr	r3, [pc, #420]	; (8001f3c <check_rxUart+0x23c>)
 8001d98:	2201      	movs	r2, #1
 8001d9a:	701a      	strb	r2, [r3, #0]
			txUart[3] = '\0';
 8001d9c:	4b67      	ldr	r3, [pc, #412]	; (8001f3c <check_rxUart+0x23c>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	70da      	strb	r2, [r3, #3]
			HAL_UART_Transmit_IT(&huart7, txUart, 4);
 8001da2:	2204      	movs	r2, #4
 8001da4:	4965      	ldr	r1, [pc, #404]	; (8001f3c <check_rxUart+0x23c>)
 8001da6:	4866      	ldr	r0, [pc, #408]	; (8001f40 <check_rxUart+0x240>)
 8001da8:	f004 fbbd 	bl	8006526 <HAL_UART_Transmit_IT>

		break;
 8001dac:	e165      	b.n	800207a <check_rxUart+0x37a>
		case MODO:

			switch (rxUart[1]) {
 8001dae:	4b62      	ldr	r3, [pc, #392]	; (8001f38 <check_rxUart+0x238>)
 8001db0:	785b      	ldrb	r3, [r3, #1]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d002      	beq.n	8001dbc <check_rxUart+0xbc>
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d012      	beq.n	8001de0 <check_rxUart+0xe0>
 8001dba:	e023      	b.n	8001e04 <check_rxUart+0x104>
				case AUTOMATICO:
					modoFuncionamiento = AUTOMATICO;
 8001dbc:	4b62      	ldr	r3, [pc, #392]	; (8001f48 <check_rxUart+0x248>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	701a      	strb	r2, [r3, #0]
					flag_encoders = 0;
 8001dc2:	4b62      	ldr	r3, [pc, #392]	; (8001f4c <check_rxUart+0x24c>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	701a      	strb	r2, [r3, #0]
					txUart[0] = OK_;
 8001dc8:	4b5c      	ldr	r3, [pc, #368]	; (8001f3c <check_rxUart+0x23c>)
 8001dca:	2202      	movs	r2, #2
 8001dcc:	701a      	strb	r2, [r3, #0]
					txUart[3] = '\0';
 8001dce:	4b5b      	ldr	r3, [pc, #364]	; (8001f3c <check_rxUart+0x23c>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	70da      	strb	r2, [r3, #3]
					HAL_UART_Transmit_IT(&huart7, txUart, 4);
 8001dd4:	2204      	movs	r2, #4
 8001dd6:	4959      	ldr	r1, [pc, #356]	; (8001f3c <check_rxUart+0x23c>)
 8001dd8:	4859      	ldr	r0, [pc, #356]	; (8001f40 <check_rxUart+0x240>)
 8001dda:	f004 fba4 	bl	8006526 <HAL_UART_Transmit_IT>
				break;
 8001dde:	e01d      	b.n	8001e1c <check_rxUart+0x11c>
				case MANUAL:
					status_movimiento = QUIETO;
 8001de0:	4b5b      	ldr	r3, [pc, #364]	; (8001f50 <check_rxUart+0x250>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	701a      	strb	r2, [r3, #0]
					modoFuncionamiento = MANUAL;
 8001de6:	4b58      	ldr	r3, [pc, #352]	; (8001f48 <check_rxUart+0x248>)
 8001de8:	2201      	movs	r2, #1
 8001dea:	701a      	strb	r2, [r3, #0]
					txUart[0] = OK_;
 8001dec:	4b53      	ldr	r3, [pc, #332]	; (8001f3c <check_rxUart+0x23c>)
 8001dee:	2202      	movs	r2, #2
 8001df0:	701a      	strb	r2, [r3, #0]
					txUart[3] = '\0';
 8001df2:	4b52      	ldr	r3, [pc, #328]	; (8001f3c <check_rxUart+0x23c>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	70da      	strb	r2, [r3, #3]
					HAL_UART_Transmit_IT(&huart7, txUart, 4);
 8001df8:	2204      	movs	r2, #4
 8001dfa:	4950      	ldr	r1, [pc, #320]	; (8001f3c <check_rxUart+0x23c>)
 8001dfc:	4850      	ldr	r0, [pc, #320]	; (8001f40 <check_rxUart+0x240>)
 8001dfe:	f004 fb92 	bl	8006526 <HAL_UART_Transmit_IT>
				break;
 8001e02:	e00b      	b.n	8001e1c <check_rxUart+0x11c>
				default:
					txUart[0] = CMD_ERROR;
 8001e04:	4b4d      	ldr	r3, [pc, #308]	; (8001f3c <check_rxUart+0x23c>)
 8001e06:	2204      	movs	r2, #4
 8001e08:	701a      	strb	r2, [r3, #0]
					txUart[3] = '\0';
 8001e0a:	4b4c      	ldr	r3, [pc, #304]	; (8001f3c <check_rxUart+0x23c>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	70da      	strb	r2, [r3, #3]
					HAL_UART_Transmit_IT(&huart7, txUart, 4);
 8001e10:	2204      	movs	r2, #4
 8001e12:	494a      	ldr	r1, [pc, #296]	; (8001f3c <check_rxUart+0x23c>)
 8001e14:	484a      	ldr	r0, [pc, #296]	; (8001f40 <check_rxUart+0x240>)
 8001e16:	f004 fb86 	bl	8006526 <HAL_UART_Transmit_IT>
			} //end switch rxUart[1]

		break;
 8001e1a:	e12e      	b.n	800207a <check_rxUart+0x37a>
 8001e1c:	e12d      	b.n	800207a <check_rxUart+0x37a>
		case AVANCE:
			avance_cant += (uint16_t) (rxUart[2] + (rxUart[1] << 8));
 8001e1e:	4b46      	ldr	r3, [pc, #280]	; (8001f38 <check_rxUart+0x238>)
 8001e20:	789b      	ldrb	r3, [r3, #2]
 8001e22:	b29a      	uxth	r2, r3
 8001e24:	4b44      	ldr	r3, [pc, #272]	; (8001f38 <check_rxUart+0x238>)
 8001e26:	785b      	ldrb	r3, [r3, #1]
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	021b      	lsls	r3, r3, #8
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	4413      	add	r3, r2
 8001e30:	b29a      	uxth	r2, r3
 8001e32:	4b48      	ldr	r3, [pc, #288]	; (8001f54 <check_rxUart+0x254>)
 8001e34:	881b      	ldrh	r3, [r3, #0]
 8001e36:	4413      	add	r3, r2
 8001e38:	b29a      	uxth	r2, r3
 8001e3a:	4b46      	ldr	r3, [pc, #280]	; (8001f54 <check_rxUart+0x254>)
 8001e3c:	801a      	strh	r2, [r3, #0]

			txUart[0] = OK_;
 8001e3e:	4b3f      	ldr	r3, [pc, #252]	; (8001f3c <check_rxUart+0x23c>)
 8001e40:	2202      	movs	r2, #2
 8001e42:	701a      	strb	r2, [r3, #0]
			txUart[3] = '\0';
 8001e44:	4b3d      	ldr	r3, [pc, #244]	; (8001f3c <check_rxUart+0x23c>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	70da      	strb	r2, [r3, #3]
			HAL_UART_Transmit_IT(&huart7, txUart, 4);
 8001e4a:	2204      	movs	r2, #4
 8001e4c:	493b      	ldr	r1, [pc, #236]	; (8001f3c <check_rxUart+0x23c>)
 8001e4e:	483c      	ldr	r0, [pc, #240]	; (8001f40 <check_rxUart+0x240>)
 8001e50:	f004 fb69 	bl	8006526 <HAL_UART_Transmit_IT>
		break;
 8001e54:	e111      	b.n	800207a <check_rxUart+0x37a>
		case RETROCEDE:
			retroceso_cant += (uint16_t) (rxUart[2] + (rxUart[1] << 8));
 8001e56:	4b38      	ldr	r3, [pc, #224]	; (8001f38 <check_rxUart+0x238>)
 8001e58:	789b      	ldrb	r3, [r3, #2]
 8001e5a:	b29a      	uxth	r2, r3
 8001e5c:	4b36      	ldr	r3, [pc, #216]	; (8001f38 <check_rxUart+0x238>)
 8001e5e:	785b      	ldrb	r3, [r3, #1]
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	021b      	lsls	r3, r3, #8
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	4413      	add	r3, r2
 8001e68:	b29a      	uxth	r2, r3
 8001e6a:	4b3b      	ldr	r3, [pc, #236]	; (8001f58 <check_rxUart+0x258>)
 8001e6c:	881b      	ldrh	r3, [r3, #0]
 8001e6e:	4413      	add	r3, r2
 8001e70:	b29a      	uxth	r2, r3
 8001e72:	4b39      	ldr	r3, [pc, #228]	; (8001f58 <check_rxUart+0x258>)
 8001e74:	801a      	strh	r2, [r3, #0]

			txUart[0] = OK_;
 8001e76:	4b31      	ldr	r3, [pc, #196]	; (8001f3c <check_rxUart+0x23c>)
 8001e78:	2202      	movs	r2, #2
 8001e7a:	701a      	strb	r2, [r3, #0]
			txUart[3] = '\0';
 8001e7c:	4b2f      	ldr	r3, [pc, #188]	; (8001f3c <check_rxUart+0x23c>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	70da      	strb	r2, [r3, #3]
			HAL_UART_Transmit_IT(&huart7, txUart, 4);
 8001e82:	2204      	movs	r2, #4
 8001e84:	492d      	ldr	r1, [pc, #180]	; (8001f3c <check_rxUart+0x23c>)
 8001e86:	482e      	ldr	r0, [pc, #184]	; (8001f40 <check_rxUart+0x240>)
 8001e88:	f004 fb4d 	bl	8006526 <HAL_UART_Transmit_IT>
			//sprintf(txUart, "RETR");
		break;
 8001e8c:	e0f5      	b.n	800207a <check_rxUart+0x37a>
		case GIRO_IZQ:
			giroIzq_cant += (uint16_t) (rxUart[2] + (rxUart[1] << 8));
 8001e8e:	4b2a      	ldr	r3, [pc, #168]	; (8001f38 <check_rxUart+0x238>)
 8001e90:	789b      	ldrb	r3, [r3, #2]
 8001e92:	b29a      	uxth	r2, r3
 8001e94:	4b28      	ldr	r3, [pc, #160]	; (8001f38 <check_rxUart+0x238>)
 8001e96:	785b      	ldrb	r3, [r3, #1]
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	021b      	lsls	r3, r3, #8
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	4413      	add	r3, r2
 8001ea0:	b29a      	uxth	r2, r3
 8001ea2:	4b2e      	ldr	r3, [pc, #184]	; (8001f5c <check_rxUart+0x25c>)
 8001ea4:	881b      	ldrh	r3, [r3, #0]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	b29a      	uxth	r2, r3
 8001eaa:	4b2c      	ldr	r3, [pc, #176]	; (8001f5c <check_rxUart+0x25c>)
 8001eac:	801a      	strh	r2, [r3, #0]

			txUart[0] = OK_;
 8001eae:	4b23      	ldr	r3, [pc, #140]	; (8001f3c <check_rxUart+0x23c>)
 8001eb0:	2202      	movs	r2, #2
 8001eb2:	701a      	strb	r2, [r3, #0]
			txUart[3] = '\0';
 8001eb4:	4b21      	ldr	r3, [pc, #132]	; (8001f3c <check_rxUart+0x23c>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	70da      	strb	r2, [r3, #3]
			HAL_UART_Transmit_IT(&huart7, txUart, 4);
 8001eba:	2204      	movs	r2, #4
 8001ebc:	491f      	ldr	r1, [pc, #124]	; (8001f3c <check_rxUart+0x23c>)
 8001ebe:	4820      	ldr	r0, [pc, #128]	; (8001f40 <check_rxUart+0x240>)
 8001ec0:	f004 fb31 	bl	8006526 <HAL_UART_Transmit_IT>
			//sprintf(txUart, "IZQU");
		break;
 8001ec4:	e0d9      	b.n	800207a <check_rxUart+0x37a>
		case GIRO_DER:
			giroDer_cant += (uint16_t) (rxUart[2] + (rxUart[1] << 8));
 8001ec6:	4b1c      	ldr	r3, [pc, #112]	; (8001f38 <check_rxUart+0x238>)
 8001ec8:	789b      	ldrb	r3, [r3, #2]
 8001eca:	b29a      	uxth	r2, r3
 8001ecc:	4b1a      	ldr	r3, [pc, #104]	; (8001f38 <check_rxUart+0x238>)
 8001ece:	785b      	ldrb	r3, [r3, #1]
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	021b      	lsls	r3, r3, #8
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	4413      	add	r3, r2
 8001ed8:	b29a      	uxth	r2, r3
 8001eda:	4b21      	ldr	r3, [pc, #132]	; (8001f60 <check_rxUart+0x260>)
 8001edc:	881b      	ldrh	r3, [r3, #0]
 8001ede:	4413      	add	r3, r2
 8001ee0:	b29a      	uxth	r2, r3
 8001ee2:	4b1f      	ldr	r3, [pc, #124]	; (8001f60 <check_rxUart+0x260>)
 8001ee4:	801a      	strh	r2, [r3, #0]

			txUart[0] = OK_;
 8001ee6:	4b15      	ldr	r3, [pc, #84]	; (8001f3c <check_rxUart+0x23c>)
 8001ee8:	2202      	movs	r2, #2
 8001eea:	701a      	strb	r2, [r3, #0]
			txUart[3] = '\0';
 8001eec:	4b13      	ldr	r3, [pc, #76]	; (8001f3c <check_rxUart+0x23c>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	70da      	strb	r2, [r3, #3]
			HAL_UART_Transmit_IT(&huart7, txUart, 4);
 8001ef2:	2204      	movs	r2, #4
 8001ef4:	4911      	ldr	r1, [pc, #68]	; (8001f3c <check_rxUart+0x23c>)
 8001ef6:	4812      	ldr	r0, [pc, #72]	; (8001f40 <check_rxUart+0x240>)
 8001ef8:	f004 fb15 	bl	8006526 <HAL_UART_Transmit_IT>
			//sprintf(txUart, "DERE");
		break;
 8001efc:	e0bd      	b.n	800207a <check_rxUart+0x37a>
		case VEL_AVANCE:
			mpu9265_Read_Accel(&mpu9265);
 8001efe:	4819      	ldr	r0, [pc, #100]	; (8001f64 <check_rxUart+0x264>)
 8001f00:	f000 fa4e 	bl	80023a0 <mpu9265_Read_Accel>

			txUart[0] = VEL_AVANCE;
 8001f04:	4b0d      	ldr	r3, [pc, #52]	; (8001f3c <check_rxUart+0x23c>)
 8001f06:	2214      	movs	r2, #20
 8001f08:	701a      	strb	r2, [r3, #0]
			txUart[1] = (uint8_t)(mpu9265.Accel_X_RAW >> 8);
 8001f0a:	4b16      	ldr	r3, [pc, #88]	; (8001f64 <check_rxUart+0x264>)
 8001f0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f10:	121b      	asrs	r3, r3, #8
 8001f12:	b21b      	sxth	r3, r3
 8001f14:	b2da      	uxtb	r2, r3
 8001f16:	4b09      	ldr	r3, [pc, #36]	; (8001f3c <check_rxUart+0x23c>)
 8001f18:	705a      	strb	r2, [r3, #1]
			txUart[2] = (uint8_t)(mpu9265.Accel_X_RAW & 0xFF);
 8001f1a:	4b12      	ldr	r3, [pc, #72]	; (8001f64 <check_rxUart+0x264>)
 8001f1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f20:	b2da      	uxtb	r2, r3
 8001f22:	4b06      	ldr	r3, [pc, #24]	; (8001f3c <check_rxUart+0x23c>)
 8001f24:	709a      	strb	r2, [r3, #2]
			txUart[3] = '\0';
 8001f26:	4b05      	ldr	r3, [pc, #20]	; (8001f3c <check_rxUart+0x23c>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	70da      	strb	r2, [r3, #3]
			HAL_UART_Transmit_IT(&huart7, txUart, 4);
 8001f2c:	2204      	movs	r2, #4
 8001f2e:	4903      	ldr	r1, [pc, #12]	; (8001f3c <check_rxUart+0x23c>)
 8001f30:	4803      	ldr	r0, [pc, #12]	; (8001f40 <check_rxUart+0x240>)
 8001f32:	f004 faf8 	bl	8006526 <HAL_UART_Transmit_IT>
		break;
 8001f36:	e0a0      	b.n	800207a <check_rxUart+0x37a>
 8001f38:	20000094 	.word	0x20000094
 8001f3c:	2000009c 	.word	0x2000009c
 8001f40:	20000244 	.word	0x20000244
 8001f44:	200000a0 	.word	0x200000a0
 8001f48:	20000000 	.word	0x20000000
 8001f4c:	200000ea 	.word	0x200000ea
 8001f50:	200000a1 	.word	0x200000a1
 8001f54:	200000b2 	.word	0x200000b2
 8001f58:	200000b4 	.word	0x200000b4
 8001f5c:	200000b6 	.word	0x200000b6
 8001f60:	200000b8 	.word	0x200000b8
 8001f64:	200000c0 	.word	0x200000c0
		case COORD_ANG:
			mpu9265_Read_Magnet(&mpu9265);
 8001f68:	4849      	ldr	r0, [pc, #292]	; (8002090 <check_rxUart+0x390>)
 8001f6a:	f000 fa4d 	bl	8002408 <mpu9265_Read_Magnet>
			magX = mpu9265.Magnet_X_RAW;
 8001f6e:	4b48      	ldr	r3, [pc, #288]	; (8002090 <check_rxUart+0x390>)
 8001f70:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001f74:	ee07 3a90 	vmov	s15, r3
 8001f78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f7c:	4b45      	ldr	r3, [pc, #276]	; (8002094 <check_rxUart+0x394>)
 8001f7e:	edc3 7a00 	vstr	s15, [r3]
			magY = mpu9265.Magnet_Y_RAW;
 8001f82:	4b43      	ldr	r3, [pc, #268]	; (8002090 <check_rxUart+0x390>)
 8001f84:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001f88:	ee07 3a90 	vmov	s15, r3
 8001f8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f90:	4b41      	ldr	r3, [pc, #260]	; (8002098 <check_rxUart+0x398>)
 8001f92:	edc3 7a00 	vstr	s15, [r3]

			direccion_f32 = atan2f(magY, magX);
 8001f96:	4b40      	ldr	r3, [pc, #256]	; (8002098 <check_rxUart+0x398>)
 8001f98:	edd3 7a00 	vldr	s15, [r3]
 8001f9c:	4b3d      	ldr	r3, [pc, #244]	; (8002094 <check_rxUart+0x394>)
 8001f9e:	ed93 7a00 	vldr	s14, [r3]
 8001fa2:	eef0 0a47 	vmov.f32	s1, s14
 8001fa6:	eeb0 0a67 	vmov.f32	s0, s15
 8001faa:	f005 fad1 	bl	8007550 <atan2f>
 8001fae:	eef0 7a40 	vmov.f32	s15, s0
 8001fb2:	4b3a      	ldr	r3, [pc, #232]	; (800209c <check_rxUart+0x39c>)
 8001fb4:	edc3 7a00 	vstr	s15, [r3]
			direccion_f32 *= (180.0/M_PI);
 8001fb8:	4b38      	ldr	r3, [pc, #224]	; (800209c <check_rxUart+0x39c>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7fe fa7b 	bl	80004b8 <__aeabi_f2d>
 8001fc2:	a331      	add	r3, pc, #196	; (adr r3, 8002088 <check_rxUart+0x388>)
 8001fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fc8:	f7fe face 	bl	8000568 <__aeabi_dmul>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	460b      	mov	r3, r1
 8001fd0:	4610      	mov	r0, r2
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	f7fe fcda 	bl	800098c <__aeabi_d2f>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	4a30      	ldr	r2, [pc, #192]	; (800209c <check_rxUart+0x39c>)
 8001fdc:	6013      	str	r3, [r2, #0]
//			direccion_i16 = direccion_f32/180;
			direccion_i16 = direccion_f32;
 8001fde:	4b2f      	ldr	r3, [pc, #188]	; (800209c <check_rxUart+0x39c>)
 8001fe0:	edd3 7a00 	vldr	s15, [r3]
 8001fe4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fe8:	ee17 3a90 	vmov	r3, s15
 8001fec:	b21a      	sxth	r2, r3
 8001fee:	4b2c      	ldr	r3, [pc, #176]	; (80020a0 <check_rxUart+0x3a0>)
 8001ff0:	801a      	strh	r2, [r3, #0]
			direccion_i16 -= 138;
 8001ff2:	4b2b      	ldr	r3, [pc, #172]	; (80020a0 <check_rxUart+0x3a0>)
 8001ff4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	3b8a      	subs	r3, #138	; 0x8a
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	b21a      	sxth	r2, r3
 8002000:	4b27      	ldr	r3, [pc, #156]	; (80020a0 <check_rxUart+0x3a0>)
 8002002:	801a      	strh	r2, [r3, #0]

			direccion_f32 *= (180.0/M_PI);
 8002004:	4b25      	ldr	r3, [pc, #148]	; (800209c <check_rxUart+0x39c>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4618      	mov	r0, r3
 800200a:	f7fe fa55 	bl	80004b8 <__aeabi_f2d>
 800200e:	a31e      	add	r3, pc, #120	; (adr r3, 8002088 <check_rxUart+0x388>)
 8002010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002014:	f7fe faa8 	bl	8000568 <__aeabi_dmul>
 8002018:	4602      	mov	r2, r0
 800201a:	460b      	mov	r3, r1
 800201c:	4610      	mov	r0, r2
 800201e:	4619      	mov	r1, r3
 8002020:	f7fe fcb4 	bl	800098c <__aeabi_d2f>
 8002024:	4603      	mov	r3, r0
 8002026:	4a1d      	ldr	r2, [pc, #116]	; (800209c <check_rxUart+0x39c>)
 8002028:	6013      	str	r3, [r2, #0]
			direccion_i16 = direccion_f32/180;
 800202a:	4b1c      	ldr	r3, [pc, #112]	; (800209c <check_rxUart+0x39c>)
 800202c:	ed93 7a00 	vldr	s14, [r3]
 8002030:	eddf 6a1c 	vldr	s13, [pc, #112]	; 80020a4 <check_rxUart+0x3a4>
 8002034:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002038:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800203c:	ee17 3a90 	vmov	r3, s15
 8002040:	b21a      	sxth	r2, r3
 8002042:	4b17      	ldr	r3, [pc, #92]	; (80020a0 <check_rxUart+0x3a0>)
 8002044:	801a      	strh	r2, [r3, #0]


			txUart[0] = COORD_ANG;
 8002046:	4b18      	ldr	r3, [pc, #96]	; (80020a8 <check_rxUart+0x3a8>)
 8002048:	2208      	movs	r2, #8
 800204a:	701a      	strb	r2, [r3, #0]
			txUart[1] = (uint8_t)(direccion_i16 >> 8);
 800204c:	4b14      	ldr	r3, [pc, #80]	; (80020a0 <check_rxUart+0x3a0>)
 800204e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002052:	121b      	asrs	r3, r3, #8
 8002054:	b21b      	sxth	r3, r3
 8002056:	b2da      	uxtb	r2, r3
 8002058:	4b13      	ldr	r3, [pc, #76]	; (80020a8 <check_rxUart+0x3a8>)
 800205a:	705a      	strb	r2, [r3, #1]
			txUart[2] = (uint8_t)(direccion_i16 & 0xFF);
 800205c:	4b10      	ldr	r3, [pc, #64]	; (80020a0 <check_rxUart+0x3a0>)
 800205e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002062:	b2da      	uxtb	r2, r3
 8002064:	4b10      	ldr	r3, [pc, #64]	; (80020a8 <check_rxUart+0x3a8>)
 8002066:	709a      	strb	r2, [r3, #2]
			txUart[3] = '\0';
 8002068:	4b0f      	ldr	r3, [pc, #60]	; (80020a8 <check_rxUart+0x3a8>)
 800206a:	2200      	movs	r2, #0
 800206c:	70da      	strb	r2, [r3, #3]
			HAL_UART_Transmit_IT(&huart7, txUart, 4);
 800206e:	2204      	movs	r2, #4
 8002070:	490d      	ldr	r1, [pc, #52]	; (80020a8 <check_rxUart+0x3a8>)
 8002072:	480e      	ldr	r0, [pc, #56]	; (80020ac <check_rxUart+0x3ac>)
 8002074:	f004 fa57 	bl	8006526 <HAL_UART_Transmit_IT>
		break;
 8002078:	bf00      	nop

	} //end switch rxUart[0]

	HAL_UART_Receive_IT(&huart7, rxUart, 4);
 800207a:	2204      	movs	r2, #4
 800207c:	490c      	ldr	r1, [pc, #48]	; (80020b0 <check_rxUart+0x3b0>)
 800207e:	480b      	ldr	r0, [pc, #44]	; (80020ac <check_rxUart+0x3ac>)
 8002080:	f004 fa96 	bl	80065b0 <HAL_UART_Receive_IT>

} //end check_rxUart ()
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	1a63c1f8 	.word	0x1a63c1f8
 800208c:	404ca5dc 	.word	0x404ca5dc
 8002090:	200000c0 	.word	0x200000c0
 8002094:	200000a4 	.word	0x200000a4
 8002098:	200000a8 	.word	0x200000a8
 800209c:	200000ac 	.word	0x200000ac
 80020a0:	200000b0 	.word	0x200000b0
 80020a4:	43340000 	.word	0x43340000
 80020a8:	2000009c 	.word	0x2000009c
 80020ac:	20000244 	.word	0x20000244
 80020b0:	20000094 	.word	0x20000094

080020b4 <modo_funcionamiento>:

void modo_funcionamiento (void){
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0

	switch (modoFuncionamiento) {
 80020b8:	4b08      	ldr	r3, [pc, #32]	; (80020dc <modo_funcionamiento+0x28>)
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d002      	beq.n	80020c6 <modo_funcionamiento+0x12>
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d005      	beq.n	80020d0 <modo_funcionamiento+0x1c>
		break;
		case MANUAL:
			movimientoRC();
		break;
		default:
		break;
 80020c4:	e007      	b.n	80020d6 <modo_funcionamiento+0x22>
			movimientoLibre();
 80020c6:	f7ff f9ff 	bl	80014c8 <movimientoLibre>
			encoders();
 80020ca:	f7ff fdab 	bl	8001c24 <encoders>
		break;
 80020ce:	e002      	b.n	80020d6 <modo_funcionamiento+0x22>
			movimientoRC();
 80020d0:	f7ff fb94 	bl	80017fc <movimientoRC>
		break;
 80020d4:	bf00      	nop
	} //end switch modoFuncionamiento

} //end modo_funcionamiento ()
 80020d6:	bf00      	nop
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	20000000 	.word	0x20000000

080020e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80020e4:	bf00      	nop
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
	...

080020f0 <mpu9265_Init>:





void mpu9265_Init(I2C_HandleTypeDef* i2c_handler){
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b088      	sub	sp, #32
 80020f4:	af04      	add	r7, sp, #16
 80020f6:	6078      	str	r0, [r7, #4]
	uint8_t check, data;

	hi2c_mpu = i2c_handler;
 80020f8:	4aa3      	ldr	r2, [pc, #652]	; (8002388 <mpu9265_Init+0x298>)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6013      	str	r3, [r2, #0]

	HAL_I2C_Mem_Read(hi2c_mpu, MPU9250_ADDRESS << 1, WHO_AM_I_MPU9250, 1, &check, 1, 1000);
 80020fe:	4ba2      	ldr	r3, [pc, #648]	; (8002388 <mpu9265_Init+0x298>)
 8002100:	6818      	ldr	r0, [r3, #0]
 8002102:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002106:	9302      	str	r3, [sp, #8]
 8002108:	2301      	movs	r3, #1
 800210a:	9301      	str	r3, [sp, #4]
 800210c:	f107 030f 	add.w	r3, r7, #15
 8002110:	9300      	str	r3, [sp, #0]
 8002112:	2301      	movs	r3, #1
 8002114:	2275      	movs	r2, #117	; 0x75
 8002116:	21d0      	movs	r1, #208	; 0xd0
 8002118:	f001 fc9e 	bl	8003a58 <HAL_I2C_Mem_Read>

	if (check == 0X73){ //successfull respond
 800211c:	7bfb      	ldrb	r3, [r7, #15]
 800211e:	2b73      	cmp	r3, #115	; 0x73
 8002120:	d141      	bne.n	80021a6 <mpu9265_Init+0xb6>
		data = 0;
 8002122:	2300      	movs	r3, #0
 8002124:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(hi2c_mpu, MPU9250_ADDRESS << 1, PWR_MGMT_1, 1, &data, 1, 1000); //writing 0 in PWR_MGMT_1 reg to wake it up.
 8002126:	4b98      	ldr	r3, [pc, #608]	; (8002388 <mpu9265_Init+0x298>)
 8002128:	6818      	ldr	r0, [r3, #0]
 800212a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800212e:	9302      	str	r3, [sp, #8]
 8002130:	2301      	movs	r3, #1
 8002132:	9301      	str	r3, [sp, #4]
 8002134:	f107 030e 	add.w	r3, r7, #14
 8002138:	9300      	str	r3, [sp, #0]
 800213a:	2301      	movs	r3, #1
 800213c:	226b      	movs	r2, #107	; 0x6b
 800213e:	21d0      	movs	r1, #208	; 0xd0
 8002140:	f001 fb90 	bl	8003864 <HAL_I2C_Mem_Write>

		data = 0X07;
 8002144:	2307      	movs	r3, #7
 8002146:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(hi2c_mpu, MPU9250_ADDRESS << 1, SMPLRT_DIV, 1, &data, 1, 1000); //seting data rate in 1kHz by writing 0x07 in SMPLRT_DIV reg.
 8002148:	4b8f      	ldr	r3, [pc, #572]	; (8002388 <mpu9265_Init+0x298>)
 800214a:	6818      	ldr	r0, [r3, #0]
 800214c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002150:	9302      	str	r3, [sp, #8]
 8002152:	2301      	movs	r3, #1
 8002154:	9301      	str	r3, [sp, #4]
 8002156:	f107 030e 	add.w	r3, r7, #14
 800215a:	9300      	str	r3, [sp, #0]
 800215c:	2301      	movs	r3, #1
 800215e:	2219      	movs	r2, #25
 8002160:	21d0      	movs	r1, #208	; 0xd0
 8002162:	f001 fb7f 	bl	8003864 <HAL_I2C_Mem_Write>

		data = 0;
 8002166:	2300      	movs	r3, #0
 8002168:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(hi2c_mpu, MPU9250_ADDRESS << 1, GYRO_CONFIG, 1, &data, 1, 1000); //SET GYROSCOPIC CONFIGURATION: XG_ST=0; YG_ST=0; ZG_ST=0; FS_SEL=0 -> +/- 250 º/s.
 800216a:	4b87      	ldr	r3, [pc, #540]	; (8002388 <mpu9265_Init+0x298>)
 800216c:	6818      	ldr	r0, [r3, #0]
 800216e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002172:	9302      	str	r3, [sp, #8]
 8002174:	2301      	movs	r3, #1
 8002176:	9301      	str	r3, [sp, #4]
 8002178:	f107 030e 	add.w	r3, r7, #14
 800217c:	9300      	str	r3, [sp, #0]
 800217e:	2301      	movs	r3, #1
 8002180:	221b      	movs	r2, #27
 8002182:	21d0      	movs	r1, #208	; 0xd0
 8002184:	f001 fb6e 	bl	8003864 <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Write(hi2c_mpu, MPU9250_ADDRESS << 1, ACCEL_CONFIG, 1, &data, 1, 1000); //SET accelerometer CONFIGURATION: XA_ST=0; YA_ST=0; ZA_ST=0; FS_SEL=0 -> +/- 2g.
 8002188:	4b7f      	ldr	r3, [pc, #508]	; (8002388 <mpu9265_Init+0x298>)
 800218a:	6818      	ldr	r0, [r3, #0]
 800218c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002190:	9302      	str	r3, [sp, #8]
 8002192:	2301      	movs	r3, #1
 8002194:	9301      	str	r3, [sp, #4]
 8002196:	f107 030e 	add.w	r3, r7, #14
 800219a:	9300      	str	r3, [sp, #0]
 800219c:	2301      	movs	r3, #1
 800219e:	221c      	movs	r2, #28
 80021a0:	21d0      	movs	r1, #208	; 0xd0
 80021a2:	f001 fb5f 	bl	8003864 <HAL_I2C_Mem_Write>
	}else{
		//Error_Handler();
	}

	//magnetometer//
	data = 0b10; //i2c bypass bit, in INT_PIN_CFG reg. (made to reach the magnetometer)
 80021a6:	2302      	movs	r3, #2
 80021a8:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(hi2c_mpu, MPU9250_ADDRESS << 1, INT_PIN_CFG, 1, &data, 1, 1000);
 80021aa:	4b77      	ldr	r3, [pc, #476]	; (8002388 <mpu9265_Init+0x298>)
 80021ac:	6818      	ldr	r0, [r3, #0]
 80021ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021b2:	9302      	str	r3, [sp, #8]
 80021b4:	2301      	movs	r3, #1
 80021b6:	9301      	str	r3, [sp, #4]
 80021b8:	f107 030e 	add.w	r3, r7, #14
 80021bc:	9300      	str	r3, [sp, #0]
 80021be:	2301      	movs	r3, #1
 80021c0:	2237      	movs	r2, #55	; 0x37
 80021c2:	21d0      	movs	r1, #208	; 0xd0
 80021c4:	f001 fb4e 	bl	8003864 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Read(hi2c_mpu, AK8963_ADDRESS << 1, WHO_AM_I_AK8963, 1, &check, 1, 1000);
 80021c8:	4b6f      	ldr	r3, [pc, #444]	; (8002388 <mpu9265_Init+0x298>)
 80021ca:	6818      	ldr	r0, [r3, #0]
 80021cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021d0:	9302      	str	r3, [sp, #8]
 80021d2:	2301      	movs	r3, #1
 80021d4:	9301      	str	r3, [sp, #4]
 80021d6:	f107 030f 	add.w	r3, r7, #15
 80021da:	9300      	str	r3, [sp, #0]
 80021dc:	2301      	movs	r3, #1
 80021de:	2200      	movs	r2, #0
 80021e0:	2118      	movs	r1, #24
 80021e2:	f001 fc39 	bl	8003a58 <HAL_I2C_Mem_Read>
	HAL_Delay(1);
 80021e6:	2001      	movs	r0, #1
 80021e8:	f000 fe54 	bl	8002e94 <HAL_Delay>
	if (check == 0X48){ //successfull respond
 80021ec:	7bfb      	ldrb	r3, [r7, #15]
 80021ee:	2b48      	cmp	r3, #72	; 0x48
 80021f0:	f040 80c5 	bne.w	800237e <mpu9265_Init+0x28e>

		//Power down magnetometer
		data = 0x00;
 80021f4:	2300      	movs	r3, #0
 80021f6:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(hi2c_mpu, AK8963_ADDRESS << 1, AK8963_CNTL, 1, &data, 1, 1000);
 80021f8:	4b63      	ldr	r3, [pc, #396]	; (8002388 <mpu9265_Init+0x298>)
 80021fa:	6818      	ldr	r0, [r3, #0]
 80021fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002200:	9302      	str	r3, [sp, #8]
 8002202:	2301      	movs	r3, #1
 8002204:	9301      	str	r3, [sp, #4]
 8002206:	f107 030e 	add.w	r3, r7, #14
 800220a:	9300      	str	r3, [sp, #0]
 800220c:	2301      	movs	r3, #1
 800220e:	220a      	movs	r2, #10
 8002210:	2118      	movs	r1, #24
 8002212:	f001 fb27 	bl	8003864 <HAL_I2C_Mem_Write>
		HAL_Delay(100);
 8002216:	2064      	movs	r0, #100	; 0x64
 8002218:	f000 fe3c 	bl	8002e94 <HAL_Delay>

		//Enter Fuse ROM access mode
		data = 0x0F; //Fuse ROM access mode
 800221c:	230f      	movs	r3, #15
 800221e:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(hi2c_mpu, AK8963_ADDRESS << 1, AK8963_CNTL, 1, &data, 1, 1000); //Control 1 register
 8002220:	4b59      	ldr	r3, [pc, #356]	; (8002388 <mpu9265_Init+0x298>)
 8002222:	6818      	ldr	r0, [r3, #0]
 8002224:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002228:	9302      	str	r3, [sp, #8]
 800222a:	2301      	movs	r3, #1
 800222c:	9301      	str	r3, [sp, #4]
 800222e:	f107 030e 	add.w	r3, r7, #14
 8002232:	9300      	str	r3, [sp, #0]
 8002234:	2301      	movs	r3, #1
 8002236:	220a      	movs	r2, #10
 8002238:	2118      	movs	r1, #24
 800223a:	f001 fb13 	bl	8003864 <HAL_I2C_Mem_Write>
		HAL_Delay(100);
 800223e:	2064      	movs	r0, #100	; 0x64
 8002240:	f000 fe28 	bl	8002e94 <HAL_Delay>

		//Read the x-, y-, and z-axis calibration values
		uint8_t rawMagCalData[3];
		HAL_I2C_Mem_Read(hi2c_mpu, AK8963_ADDRESS << 1, AK8963_ASAX, 1, &rawMagCalData[0], 3, 1000); //Sensitivity Adjustment values registers (read-only)
 8002244:	4b50      	ldr	r3, [pc, #320]	; (8002388 <mpu9265_Init+0x298>)
 8002246:	6818      	ldr	r0, [r3, #0]
 8002248:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800224c:	9302      	str	r3, [sp, #8]
 800224e:	2303      	movs	r3, #3
 8002250:	9301      	str	r3, [sp, #4]
 8002252:	f107 0308 	add.w	r3, r7, #8
 8002256:	9300      	str	r3, [sp, #0]
 8002258:	2301      	movs	r3, #1
 800225a:	2210      	movs	r2, #16
 800225c:	2118      	movs	r1, #24
 800225e:	f001 fbfb 	bl	8003a58 <HAL_I2C_Mem_Read>
		calMagX =  (float)(rawMagCalData[0] - 128)/256. + 1.;   // Return x-axis sensitivity adjustment values, etc.
 8002262:	7a3b      	ldrb	r3, [r7, #8]
 8002264:	3b80      	subs	r3, #128	; 0x80
 8002266:	ee07 3a90 	vmov	s15, r3
 800226a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800226e:	ee17 0a90 	vmov	r0, s15
 8002272:	f7fe f921 	bl	80004b8 <__aeabi_f2d>
 8002276:	f04f 0200 	mov.w	r2, #0
 800227a:	4b44      	ldr	r3, [pc, #272]	; (800238c <mpu9265_Init+0x29c>)
 800227c:	f7fe fa9e 	bl	80007bc <__aeabi_ddiv>
 8002280:	4602      	mov	r2, r0
 8002282:	460b      	mov	r3, r1
 8002284:	4610      	mov	r0, r2
 8002286:	4619      	mov	r1, r3
 8002288:	f04f 0200 	mov.w	r2, #0
 800228c:	4b40      	ldr	r3, [pc, #256]	; (8002390 <mpu9265_Init+0x2a0>)
 800228e:	f7fd ffb5 	bl	80001fc <__adddf3>
 8002292:	4602      	mov	r2, r0
 8002294:	460b      	mov	r3, r1
 8002296:	4610      	mov	r0, r2
 8002298:	4619      	mov	r1, r3
 800229a:	f7fe fb77 	bl	800098c <__aeabi_d2f>
 800229e:	4603      	mov	r3, r0
 80022a0:	4a3c      	ldr	r2, [pc, #240]	; (8002394 <mpu9265_Init+0x2a4>)
 80022a2:	6013      	str	r3, [r2, #0]
		calMagY =  (float)(rawMagCalData[1] - 128)/256. + 1.;
 80022a4:	7a7b      	ldrb	r3, [r7, #9]
 80022a6:	3b80      	subs	r3, #128	; 0x80
 80022a8:	ee07 3a90 	vmov	s15, r3
 80022ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022b0:	ee17 0a90 	vmov	r0, s15
 80022b4:	f7fe f900 	bl	80004b8 <__aeabi_f2d>
 80022b8:	f04f 0200 	mov.w	r2, #0
 80022bc:	4b33      	ldr	r3, [pc, #204]	; (800238c <mpu9265_Init+0x29c>)
 80022be:	f7fe fa7d 	bl	80007bc <__aeabi_ddiv>
 80022c2:	4602      	mov	r2, r0
 80022c4:	460b      	mov	r3, r1
 80022c6:	4610      	mov	r0, r2
 80022c8:	4619      	mov	r1, r3
 80022ca:	f04f 0200 	mov.w	r2, #0
 80022ce:	4b30      	ldr	r3, [pc, #192]	; (8002390 <mpu9265_Init+0x2a0>)
 80022d0:	f7fd ff94 	bl	80001fc <__adddf3>
 80022d4:	4602      	mov	r2, r0
 80022d6:	460b      	mov	r3, r1
 80022d8:	4610      	mov	r0, r2
 80022da:	4619      	mov	r1, r3
 80022dc:	f7fe fb56 	bl	800098c <__aeabi_d2f>
 80022e0:	4603      	mov	r3, r0
 80022e2:	4a2d      	ldr	r2, [pc, #180]	; (8002398 <mpu9265_Init+0x2a8>)
 80022e4:	6013      	str	r3, [r2, #0]
		calMagZ =  (float)(rawMagCalData[2] - 128)/256. + 1.;
 80022e6:	7abb      	ldrb	r3, [r7, #10]
 80022e8:	3b80      	subs	r3, #128	; 0x80
 80022ea:	ee07 3a90 	vmov	s15, r3
 80022ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022f2:	ee17 0a90 	vmov	r0, s15
 80022f6:	f7fe f8df 	bl	80004b8 <__aeabi_f2d>
 80022fa:	f04f 0200 	mov.w	r2, #0
 80022fe:	4b23      	ldr	r3, [pc, #140]	; (800238c <mpu9265_Init+0x29c>)
 8002300:	f7fe fa5c 	bl	80007bc <__aeabi_ddiv>
 8002304:	4602      	mov	r2, r0
 8002306:	460b      	mov	r3, r1
 8002308:	4610      	mov	r0, r2
 800230a:	4619      	mov	r1, r3
 800230c:	f04f 0200 	mov.w	r2, #0
 8002310:	4b1f      	ldr	r3, [pc, #124]	; (8002390 <mpu9265_Init+0x2a0>)
 8002312:	f7fd ff73 	bl	80001fc <__adddf3>
 8002316:	4602      	mov	r2, r0
 8002318:	460b      	mov	r3, r1
 800231a:	4610      	mov	r0, r2
 800231c:	4619      	mov	r1, r3
 800231e:	f7fe fb35 	bl	800098c <__aeabi_d2f>
 8002322:	4603      	mov	r3, r0
 8002324:	4a1d      	ldr	r2, [pc, #116]	; (800239c <mpu9265_Init+0x2ac>)
 8002326:	6013      	str	r3, [r2, #0]
		HAL_Delay(100);
 8002328:	2064      	movs	r0, #100	; 0x64
 800232a:	f000 fdb3 	bl	8002e94 <HAL_Delay>

		//Power down magnetometer
		data = 0x00;
 800232e:	2300      	movs	r3, #0
 8002330:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(hi2c_mpu, AK8963_ADDRESS << 1, AK8963_CNTL, 1, &data, 1, 1000);
 8002332:	4b15      	ldr	r3, [pc, #84]	; (8002388 <mpu9265_Init+0x298>)
 8002334:	6818      	ldr	r0, [r3, #0]
 8002336:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800233a:	9302      	str	r3, [sp, #8]
 800233c:	2301      	movs	r3, #1
 800233e:	9301      	str	r3, [sp, #4]
 8002340:	f107 030e 	add.w	r3, r7, #14
 8002344:	9300      	str	r3, [sp, #0]
 8002346:	2301      	movs	r3, #1
 8002348:	220a      	movs	r2, #10
 800234a:	2118      	movs	r1, #24
 800234c:	f001 fa8a 	bl	8003864 <HAL_I2C_Mem_Write>
		HAL_Delay(100);
 8002350:	2064      	movs	r0, #100	; 0x64
 8002352:	f000 fd9f 	bl	8002e94 <HAL_Delay>

		//Set magnetometer data resolution and sample ODR
		data = 0b10010; // 0b10110: 0001 (MSB, 16 bit resolution) 0010 (LSB, 8Hz sample rate (Continuous measurement mode 1) ).
 8002356:	2312      	movs	r3, #18
 8002358:	73bb      	strb	r3, [r7, #14]
//		data = 0B10110; // 0b10110: 0001 (MSB, 16 bit resolution) 0110 (LSB, 100Hz sample rate (Continuous measurement mode 2) ).
		HAL_I2C_Mem_Write(hi2c_mpu, AK8963_ADDRESS << 1, AK8963_CNTL, 1, &data, 1, 1000);
 800235a:	4b0b      	ldr	r3, [pc, #44]	; (8002388 <mpu9265_Init+0x298>)
 800235c:	6818      	ldr	r0, [r3, #0]
 800235e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002362:	9302      	str	r3, [sp, #8]
 8002364:	2301      	movs	r3, #1
 8002366:	9301      	str	r3, [sp, #4]
 8002368:	f107 030e 	add.w	r3, r7, #14
 800236c:	9300      	str	r3, [sp, #0]
 800236e:	2301      	movs	r3, #1
 8002370:	220a      	movs	r2, #10
 8002372:	2118      	movs	r1, #24
 8002374:	f001 fa76 	bl	8003864 <HAL_I2C_Mem_Write>
		HAL_Delay(100);
 8002378:	2064      	movs	r0, #100	; 0x64
 800237a:	f000 fd8b 	bl	8002e94 <HAL_Delay>
		//Error_Handler();
	}



}
 800237e:	bf00      	nop
 8002380:	3710      	adds	r7, #16
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	200000f4 	.word	0x200000f4
 800238c:	40700000 	.word	0x40700000
 8002390:	3ff00000 	.word	0x3ff00000
 8002394:	200000f8 	.word	0x200000f8
 8002398:	200000fc 	.word	0x200000fc
 800239c:	20000100 	.word	0x20000100

080023a0 <mpu9265_Read_Accel>:

void mpu9265_Read_Accel(mpuData_t* mpuData){
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b088      	sub	sp, #32
 80023a4:	af04      	add	r7, sp, #16
 80023a6:	6078      	str	r0, [r7, #4]

	uint8_t data[6];

	HAL_I2C_Mem_Read(hi2c_mpu, MPU9250_ADDRESS << 1, ACCEL_XOUT_H, 1, data, 6, 1000);
 80023a8:	4b16      	ldr	r3, [pc, #88]	; (8002404 <mpu9265_Read_Accel+0x64>)
 80023aa:	6818      	ldr	r0, [r3, #0]
 80023ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023b0:	9302      	str	r3, [sp, #8]
 80023b2:	2306      	movs	r3, #6
 80023b4:	9301      	str	r3, [sp, #4]
 80023b6:	f107 0308 	add.w	r3, r7, #8
 80023ba:	9300      	str	r3, [sp, #0]
 80023bc:	2301      	movs	r3, #1
 80023be:	223b      	movs	r2, #59	; 0x3b
 80023c0:	21d0      	movs	r1, #208	; 0xd0
 80023c2:	f001 fb49 	bl	8003a58 <HAL_I2C_Mem_Read>
	mpuData->Accel_X_RAW = (uint16_t) ( data[0]<<8 | data[1] );
 80023c6:	7a3b      	ldrb	r3, [r7, #8]
 80023c8:	021b      	lsls	r3, r3, #8
 80023ca:	b21a      	sxth	r2, r3
 80023cc:	7a7b      	ldrb	r3, [r7, #9]
 80023ce:	b21b      	sxth	r3, r3
 80023d0:	4313      	orrs	r3, r2
 80023d2:	b21a      	sxth	r2, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	801a      	strh	r2, [r3, #0]
	mpuData->Accel_Y_RAW = (uint16_t) ( data[2]<<8 | data[3] );
 80023d8:	7abb      	ldrb	r3, [r7, #10]
 80023da:	021b      	lsls	r3, r3, #8
 80023dc:	b21a      	sxth	r2, r3
 80023de:	7afb      	ldrb	r3, [r7, #11]
 80023e0:	b21b      	sxth	r3, r3
 80023e2:	4313      	orrs	r3, r2
 80023e4:	b21a      	sxth	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	805a      	strh	r2, [r3, #2]
	mpuData->Accel_Z_RAW = (uint16_t) ( data[4]<<8 | data[5] );
 80023ea:	7b3b      	ldrb	r3, [r7, #12]
 80023ec:	021b      	lsls	r3, r3, #8
 80023ee:	b21a      	sxth	r2, r3
 80023f0:	7b7b      	ldrb	r3, [r7, #13]
 80023f2:	b21b      	sxth	r3, r3
 80023f4:	4313      	orrs	r3, r2
 80023f6:	b21a      	sxth	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	809a      	strh	r2, [r3, #4]
}
 80023fc:	bf00      	nop
 80023fe:	3710      	adds	r7, #16
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	200000f4 	.word	0x200000f4

08002408 <mpu9265_Read_Magnet>:
	mpuData->Gyro_X_RAW = (uint16_t) ( data[0]<<8 | data[1] );
	mpuData->Gyro_Y_RAW = (uint16_t) ( data[2]<<8 | data[3] );
	mpuData->Gyro_Z_RAW = (uint16_t) ( data[4]<<8 | data[5] );
}

void mpu9265_Read_Magnet(mpuData_t* mpuData){
 8002408:	b580      	push	{r7, lr}
 800240a:	b088      	sub	sp, #32
 800240c:	af04      	add	r7, sp, #16
 800240e:	6078      	str	r0, [r7, #4]

	uint8_t ready, data[7];

	HAL_I2C_Mem_Read(hi2c_mpu, AK8963_ADDRESS << 1, AK8963_ST1, 1, &ready, 1, 1000); //bit 0 in "1".
 8002410:	4b22      	ldr	r3, [pc, #136]	; (800249c <mpu9265_Read_Magnet+0x94>)
 8002412:	6818      	ldr	r0, [r3, #0]
 8002414:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002418:	9302      	str	r3, [sp, #8]
 800241a:	2301      	movs	r3, #1
 800241c:	9301      	str	r3, [sp, #4]
 800241e:	f107 030f 	add.w	r3, r7, #15
 8002422:	9300      	str	r3, [sp, #0]
 8002424:	2301      	movs	r3, #1
 8002426:	2202      	movs	r2, #2
 8002428:	2118      	movs	r1, #24
 800242a:	f001 fb15 	bl	8003a58 <HAL_I2C_Mem_Read>

	if (ready){ //bit 0 from Status 1 register in "1".
 800242e:	7bfb      	ldrb	r3, [r7, #15]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d02e      	beq.n	8002492 <mpu9265_Read_Magnet+0x8a>
		HAL_I2C_Mem_Read(hi2c_mpu, AK8963_ADDRESS << 1, AK8963_XOUT_L, 1, data, 7, 1000);
 8002434:	4b19      	ldr	r3, [pc, #100]	; (800249c <mpu9265_Read_Magnet+0x94>)
 8002436:	6818      	ldr	r0, [r3, #0]
 8002438:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800243c:	9302      	str	r3, [sp, #8]
 800243e:	2307      	movs	r3, #7
 8002440:	9301      	str	r3, [sp, #4]
 8002442:	f107 0308 	add.w	r3, r7, #8
 8002446:	9300      	str	r3, [sp, #0]
 8002448:	2301      	movs	r3, #1
 800244a:	2203      	movs	r2, #3
 800244c:	2118      	movs	r1, #24
 800244e:	f001 fb03 	bl	8003a58 <HAL_I2C_Mem_Read>
		if (!(data[6] & 0x08)){// Check if magnetic sensor overflow set, if not then report data
 8002452:	7bbb      	ldrb	r3, [r7, #14]
 8002454:	f003 0308 	and.w	r3, r3, #8
 8002458:	2b00      	cmp	r3, #0
 800245a:	d11a      	bne.n	8002492 <mpu9265_Read_Magnet+0x8a>
			mpuData->Magnet_X_RAW = (uint16_t) ( data[1]<<8 | data[0] );
 800245c:	7a7b      	ldrb	r3, [r7, #9]
 800245e:	021b      	lsls	r3, r3, #8
 8002460:	b21a      	sxth	r2, r3
 8002462:	7a3b      	ldrb	r3, [r7, #8]
 8002464:	b21b      	sxth	r3, r3
 8002466:	4313      	orrs	r3, r2
 8002468:	b21a      	sxth	r2, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	819a      	strh	r2, [r3, #12]
			mpuData->Magnet_Y_RAW = (uint16_t) ( data[3]<<8 | data[2] );
 800246e:	7afb      	ldrb	r3, [r7, #11]
 8002470:	021b      	lsls	r3, r3, #8
 8002472:	b21a      	sxth	r2, r3
 8002474:	7abb      	ldrb	r3, [r7, #10]
 8002476:	b21b      	sxth	r3, r3
 8002478:	4313      	orrs	r3, r2
 800247a:	b21a      	sxth	r2, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	81da      	strh	r2, [r3, #14]
			mpuData->Magnet_Z_RAW = (uint16_t) ( data[5]<<8 | data[4] );
 8002480:	7b7b      	ldrb	r3, [r7, #13]
 8002482:	021b      	lsls	r3, r3, #8
 8002484:	b21a      	sxth	r2, r3
 8002486:	7b3b      	ldrb	r3, [r7, #12]
 8002488:	b21b      	sxth	r3, r3
 800248a:	4313      	orrs	r3, r2
 800248c:	b21a      	sxth	r2, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	821a      	strh	r2, [r3, #16]
		}
	}
}
 8002492:	bf00      	nop
 8002494:	3710      	adds	r7, #16
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	200000f4 	.word	0x200000f4

080024a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024a6:	2300      	movs	r3, #0
 80024a8:	607b      	str	r3, [r7, #4]
 80024aa:	4b10      	ldr	r3, [pc, #64]	; (80024ec <HAL_MspInit+0x4c>)
 80024ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ae:	4a0f      	ldr	r2, [pc, #60]	; (80024ec <HAL_MspInit+0x4c>)
 80024b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024b4:	6453      	str	r3, [r2, #68]	; 0x44
 80024b6:	4b0d      	ldr	r3, [pc, #52]	; (80024ec <HAL_MspInit+0x4c>)
 80024b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024be:	607b      	str	r3, [r7, #4]
 80024c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024c2:	2300      	movs	r3, #0
 80024c4:	603b      	str	r3, [r7, #0]
 80024c6:	4b09      	ldr	r3, [pc, #36]	; (80024ec <HAL_MspInit+0x4c>)
 80024c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ca:	4a08      	ldr	r2, [pc, #32]	; (80024ec <HAL_MspInit+0x4c>)
 80024cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024d0:	6413      	str	r3, [r2, #64]	; 0x40
 80024d2:	4b06      	ldr	r3, [pc, #24]	; (80024ec <HAL_MspInit+0x4c>)
 80024d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024da:	603b      	str	r3, [r7, #0]
 80024dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024de:	bf00      	nop
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	40023800 	.word	0x40023800

080024f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80024f4:	bf00      	nop
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr

080024fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024fe:	b480      	push	{r7}
 8002500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002502:	e7fe      	b.n	8002502 <HardFault_Handler+0x4>

08002504 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002508:	e7fe      	b.n	8002508 <MemManage_Handler+0x4>

0800250a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800250a:	b480      	push	{r7}
 800250c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800250e:	e7fe      	b.n	800250e <BusFault_Handler+0x4>

08002510 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002514:	e7fe      	b.n	8002514 <UsageFault_Handler+0x4>

08002516 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002516:	b480      	push	{r7}
 8002518:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800251a:	bf00      	nop
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002528:	bf00      	nop
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr

08002532 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002532:	b480      	push	{r7}
 8002534:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002536:	bf00      	nop
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002544:	f000 fc86 	bl	8002e54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002548:	bf00      	nop
 800254a:	bd80      	pop	{r7, pc}

0800254c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002550:	4802      	ldr	r0, [pc, #8]	; (800255c <TIM5_IRQHandler+0x10>)
 8002552:	f002 fedf 	bl	8005314 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002556:	bf00      	nop
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	200001c4 	.word	0x200001c4

08002560 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002564:	4802      	ldr	r0, [pc, #8]	; (8002570 <TIM7_IRQHandler+0x10>)
 8002566:	f002 fed5 	bl	8005314 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800256a:	bf00      	nop
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	20000204 	.word	0x20000204

08002574 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8002578:	4802      	ldr	r0, [pc, #8]	; (8002584 <UART7_IRQHandler+0x10>)
 800257a:	f004 f86f 	bl	800665c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 800257e:	bf00      	nop
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	20000244 	.word	0x20000244

08002588 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800258c:	4b08      	ldr	r3, [pc, #32]	; (80025b0 <SystemInit+0x28>)
 800258e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002592:	4a07      	ldr	r2, [pc, #28]	; (80025b0 <SystemInit+0x28>)
 8002594:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002598:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800259c:	4b04      	ldr	r3, [pc, #16]	; (80025b0 <SystemInit+0x28>)
 800259e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80025a2:	609a      	str	r2, [r3, #8]
#endif
}
 80025a4:	bf00      	nop
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	e000ed00 	.word	0xe000ed00

080025b4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b086      	sub	sp, #24
 80025b8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025ba:	f107 0308 	add.w	r3, r7, #8
 80025be:	2200      	movs	r2, #0
 80025c0:	601a      	str	r2, [r3, #0]
 80025c2:	605a      	str	r2, [r3, #4]
 80025c4:	609a      	str	r2, [r3, #8]
 80025c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025c8:	463b      	mov	r3, r7
 80025ca:	2200      	movs	r2, #0
 80025cc:	601a      	str	r2, [r3, #0]
 80025ce:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 80025d0:	4b20      	ldr	r3, [pc, #128]	; (8002654 <MX_TIM2_Init+0xa0>)
 80025d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80025d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80025d8:	4b1e      	ldr	r3, [pc, #120]	; (8002654 <MX_TIM2_Init+0xa0>)
 80025da:	2200      	movs	r2, #0
 80025dc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025de:	4b1d      	ldr	r3, [pc, #116]	; (8002654 <MX_TIM2_Init+0xa0>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80025e4:	4b1b      	ldr	r3, [pc, #108]	; (8002654 <MX_TIM2_Init+0xa0>)
 80025e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80025ea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025ec:	4b19      	ldr	r3, [pc, #100]	; (8002654 <MX_TIM2_Init+0xa0>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025f2:	4b18      	ldr	r3, [pc, #96]	; (8002654 <MX_TIM2_Init+0xa0>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80025f8:	4816      	ldr	r0, [pc, #88]	; (8002654 <MX_TIM2_Init+0xa0>)
 80025fa:	f002 fd07 	bl	800500c <HAL_TIM_Base_Init>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002604:	f7ff fd6c 	bl	80020e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8002608:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800260c:	60bb      	str	r3, [r7, #8]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 800260e:	2300      	movs	r3, #0
 8002610:	60fb      	str	r3, [r7, #12]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8002612:	2300      	movs	r3, #0
 8002614:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockFilter = 0;
 8002616:	2300      	movs	r3, #0
 8002618:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800261a:	f107 0308 	add.w	r3, r7, #8
 800261e:	4619      	mov	r1, r3
 8002620:	480c      	ldr	r0, [pc, #48]	; (8002654 <MX_TIM2_Init+0xa0>)
 8002622:	f003 f8e1 	bl	80057e8 <HAL_TIM_ConfigClockSource>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d001      	beq.n	8002630 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 800262c:	f7ff fd58 	bl	80020e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002630:	2300      	movs	r3, #0
 8002632:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002634:	2300      	movs	r3, #0
 8002636:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002638:	463b      	mov	r3, r7
 800263a:	4619      	mov	r1, r3
 800263c:	4805      	ldr	r0, [pc, #20]	; (8002654 <MX_TIM2_Init+0xa0>)
 800263e:	f003 fdef 	bl	8006220 <HAL_TIMEx_MasterConfigSynchronization>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d001      	beq.n	800264c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8002648:	f7ff fd4a 	bl	80020e0 <Error_Handler>
  }

}
 800264c:	bf00      	nop
 800264e:	3718      	adds	r7, #24
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	20000104 	.word	0x20000104

08002658 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b086      	sub	sp, #24
 800265c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800265e:	f107 0308 	add.w	r3, r7, #8
 8002662:	2200      	movs	r2, #0
 8002664:	601a      	str	r2, [r3, #0]
 8002666:	605a      	str	r2, [r3, #4]
 8002668:	609a      	str	r2, [r3, #8]
 800266a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800266c:	463b      	mov	r3, r7
 800266e:	2200      	movs	r2, #0
 8002670:	601a      	str	r2, [r3, #0]
 8002672:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8002674:	4b20      	ldr	r3, [pc, #128]	; (80026f8 <MX_TIM3_Init+0xa0>)
 8002676:	4a21      	ldr	r2, [pc, #132]	; (80026fc <MX_TIM3_Init+0xa4>)
 8002678:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800267a:	4b1f      	ldr	r3, [pc, #124]	; (80026f8 <MX_TIM3_Init+0xa0>)
 800267c:	2200      	movs	r2, #0
 800267e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002680:	4b1d      	ldr	r3, [pc, #116]	; (80026f8 <MX_TIM3_Init+0xa0>)
 8002682:	2200      	movs	r2, #0
 8002684:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002686:	4b1c      	ldr	r3, [pc, #112]	; (80026f8 <MX_TIM3_Init+0xa0>)
 8002688:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800268c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800268e:	4b1a      	ldr	r3, [pc, #104]	; (80026f8 <MX_TIM3_Init+0xa0>)
 8002690:	2200      	movs	r2, #0
 8002692:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002694:	4b18      	ldr	r3, [pc, #96]	; (80026f8 <MX_TIM3_Init+0xa0>)
 8002696:	2200      	movs	r2, #0
 8002698:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800269a:	4817      	ldr	r0, [pc, #92]	; (80026f8 <MX_TIM3_Init+0xa0>)
 800269c:	f002 fcb6 	bl	800500c <HAL_TIM_Base_Init>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80026a6:	f7ff fd1b 	bl	80020e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 80026aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026ae:	60bb      	str	r3, [r7, #8]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 80026b0:	2300      	movs	r3, #0
 80026b2:	60fb      	str	r3, [r7, #12]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 80026b4:	2300      	movs	r3, #0
 80026b6:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockFilter = 0;
 80026b8:	2300      	movs	r3, #0
 80026ba:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80026bc:	f107 0308 	add.w	r3, r7, #8
 80026c0:	4619      	mov	r1, r3
 80026c2:	480d      	ldr	r0, [pc, #52]	; (80026f8 <MX_TIM3_Init+0xa0>)
 80026c4:	f003 f890 	bl	80057e8 <HAL_TIM_ConfigClockSource>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80026ce:	f7ff fd07 	bl	80020e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026d2:	2300      	movs	r3, #0
 80026d4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026d6:	2300      	movs	r3, #0
 80026d8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80026da:	463b      	mov	r3, r7
 80026dc:	4619      	mov	r1, r3
 80026de:	4806      	ldr	r0, [pc, #24]	; (80026f8 <MX_TIM3_Init+0xa0>)
 80026e0:	f003 fd9e 	bl	8006220 <HAL_TIMEx_MasterConfigSynchronization>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80026ea:	f7ff fcf9 	bl	80020e0 <Error_Handler>
  }

}
 80026ee:	bf00      	nop
 80026f0:	3718      	adds	r7, #24
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	20000144 	.word	0x20000144
 80026fc:	40000400 	.word	0x40000400

08002700 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b08e      	sub	sp, #56	; 0x38
 8002704:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002706:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800270a:	2200      	movs	r2, #0
 800270c:	601a      	str	r2, [r3, #0]
 800270e:	605a      	str	r2, [r3, #4]
 8002710:	609a      	str	r2, [r3, #8]
 8002712:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002714:	f107 0320 	add.w	r3, r7, #32
 8002718:	2200      	movs	r2, #0
 800271a:	601a      	str	r2, [r3, #0]
 800271c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800271e:	1d3b      	adds	r3, r7, #4
 8002720:	2200      	movs	r2, #0
 8002722:	601a      	str	r2, [r3, #0]
 8002724:	605a      	str	r2, [r3, #4]
 8002726:	609a      	str	r2, [r3, #8]
 8002728:	60da      	str	r2, [r3, #12]
 800272a:	611a      	str	r2, [r3, #16]
 800272c:	615a      	str	r2, [r3, #20]
 800272e:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8002730:	4b31      	ldr	r3, [pc, #196]	; (80027f8 <MX_TIM4_Init+0xf8>)
 8002732:	4a32      	ldr	r2, [pc, #200]	; (80027fc <MX_TIM4_Init+0xfc>)
 8002734:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 15-1;
 8002736:	4b30      	ldr	r3, [pc, #192]	; (80027f8 <MX_TIM4_Init+0xf8>)
 8002738:	220e      	movs	r2, #14
 800273a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800273c:	4b2e      	ldr	r3, [pc, #184]	; (80027f8 <MX_TIM4_Init+0xf8>)
 800273e:	2200      	movs	r2, #0
 8002740:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 200-1;
 8002742:	4b2d      	ldr	r3, [pc, #180]	; (80027f8 <MX_TIM4_Init+0xf8>)
 8002744:	22c7      	movs	r2, #199	; 0xc7
 8002746:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002748:	4b2b      	ldr	r3, [pc, #172]	; (80027f8 <MX_TIM4_Init+0xf8>)
 800274a:	2200      	movs	r2, #0
 800274c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800274e:	4b2a      	ldr	r3, [pc, #168]	; (80027f8 <MX_TIM4_Init+0xf8>)
 8002750:	2200      	movs	r2, #0
 8002752:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002754:	4828      	ldr	r0, [pc, #160]	; (80027f8 <MX_TIM4_Init+0xf8>)
 8002756:	f002 fc59 	bl	800500c <HAL_TIM_Base_Init>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d001      	beq.n	8002764 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8002760:	f7ff fcbe 	bl	80020e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002768:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800276a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800276e:	4619      	mov	r1, r3
 8002770:	4821      	ldr	r0, [pc, #132]	; (80027f8 <MX_TIM4_Init+0xf8>)
 8002772:	f003 f839 	bl	80057e8 <HAL_TIM_ConfigClockSource>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d001      	beq.n	8002780 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 800277c:	f7ff fcb0 	bl	80020e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002780:	481d      	ldr	r0, [pc, #116]	; (80027f8 <MX_TIM4_Init+0xf8>)
 8002782:	f002 fcb6 	bl	80050f2 <HAL_TIM_PWM_Init>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d001      	beq.n	8002790 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 800278c:	f7ff fca8 	bl	80020e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002790:	2300      	movs	r3, #0
 8002792:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002794:	2300      	movs	r3, #0
 8002796:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002798:	f107 0320 	add.w	r3, r7, #32
 800279c:	4619      	mov	r1, r3
 800279e:	4816      	ldr	r0, [pc, #88]	; (80027f8 <MX_TIM4_Init+0xf8>)
 80027a0:	f003 fd3e 	bl	8006220 <HAL_TIMEx_MasterConfigSynchronization>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 80027aa:	f7ff fc99 	bl	80020e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027ae:	2360      	movs	r3, #96	; 0x60
 80027b0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 72-1;
 80027b2:	2347      	movs	r3, #71	; 0x47
 80027b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027b6:	2300      	movs	r3, #0
 80027b8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027ba:	2300      	movs	r3, #0
 80027bc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80027be:	1d3b      	adds	r3, r7, #4
 80027c0:	2200      	movs	r2, #0
 80027c2:	4619      	mov	r1, r3
 80027c4:	480c      	ldr	r0, [pc, #48]	; (80027f8 <MX_TIM4_Init+0xf8>)
 80027c6:	f002 ff49 	bl	800565c <HAL_TIM_PWM_ConfigChannel>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 80027d0:	f7ff fc86 	bl	80020e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80027d4:	1d3b      	adds	r3, r7, #4
 80027d6:	2204      	movs	r2, #4
 80027d8:	4619      	mov	r1, r3
 80027da:	4807      	ldr	r0, [pc, #28]	; (80027f8 <MX_TIM4_Init+0xf8>)
 80027dc:	f002 ff3e 	bl	800565c <HAL_TIM_PWM_ConfigChannel>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <MX_TIM4_Init+0xea>
  {
    Error_Handler();
 80027e6:	f7ff fc7b 	bl	80020e0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 80027ea:	4803      	ldr	r0, [pc, #12]	; (80027f8 <MX_TIM4_Init+0xf8>)
 80027ec:	f000 f9d8 	bl	8002ba0 <HAL_TIM_MspPostInit>

}
 80027f0:	bf00      	nop
 80027f2:	3738      	adds	r7, #56	; 0x38
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	20000184 	.word	0x20000184
 80027fc:	40000800 	.word	0x40000800

08002800 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b092      	sub	sp, #72	; 0x48
 8002804:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002806:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800280a:	2200      	movs	r2, #0
 800280c:	601a      	str	r2, [r3, #0]
 800280e:	605a      	str	r2, [r3, #4]
 8002810:	609a      	str	r2, [r3, #8]
 8002812:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002814:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002818:	2200      	movs	r2, #0
 800281a:	601a      	str	r2, [r3, #0]
 800281c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800281e:	f107 0314 	add.w	r3, r7, #20
 8002822:	2200      	movs	r2, #0
 8002824:	601a      	str	r2, [r3, #0]
 8002826:	605a      	str	r2, [r3, #4]
 8002828:	609a      	str	r2, [r3, #8]
 800282a:	60da      	str	r2, [r3, #12]
 800282c:	611a      	str	r2, [r3, #16]
 800282e:	615a      	str	r2, [r3, #20]
 8002830:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002832:	1d3b      	adds	r3, r7, #4
 8002834:	2200      	movs	r2, #0
 8002836:	601a      	str	r2, [r3, #0]
 8002838:	605a      	str	r2, [r3, #4]
 800283a:	609a      	str	r2, [r3, #8]
 800283c:	60da      	str	r2, [r3, #12]

  htim5.Instance = TIM5;
 800283e:	4b43      	ldr	r3, [pc, #268]	; (800294c <MX_TIM5_Init+0x14c>)
 8002840:	4a43      	ldr	r2, [pc, #268]	; (8002950 <MX_TIM5_Init+0x150>)
 8002842:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 90-1;
 8002844:	4b41      	ldr	r3, [pc, #260]	; (800294c <MX_TIM5_Init+0x14c>)
 8002846:	2259      	movs	r2, #89	; 0x59
 8002848:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800284a:	4b40      	ldr	r3, [pc, #256]	; (800294c <MX_TIM5_Init+0x14c>)
 800284c:	2200      	movs	r2, #0
 800284e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002850:	4b3e      	ldr	r3, [pc, #248]	; (800294c <MX_TIM5_Init+0x14c>)
 8002852:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002856:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002858:	4b3c      	ldr	r3, [pc, #240]	; (800294c <MX_TIM5_Init+0x14c>)
 800285a:	2200      	movs	r2, #0
 800285c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800285e:	4b3b      	ldr	r3, [pc, #236]	; (800294c <MX_TIM5_Init+0x14c>)
 8002860:	2200      	movs	r2, #0
 8002862:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002864:	4839      	ldr	r0, [pc, #228]	; (800294c <MX_TIM5_Init+0x14c>)
 8002866:	f002 fbd1 	bl	800500c <HAL_TIM_Base_Init>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d001      	beq.n	8002874 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8002870:	f7ff fc36 	bl	80020e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002874:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002878:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800287a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800287e:	4619      	mov	r1, r3
 8002880:	4832      	ldr	r0, [pc, #200]	; (800294c <MX_TIM5_Init+0x14c>)
 8002882:	f002 ffb1 	bl	80057e8 <HAL_TIM_ConfigClockSource>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d001      	beq.n	8002890 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 800288c:	f7ff fc28 	bl	80020e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002890:	482e      	ldr	r0, [pc, #184]	; (800294c <MX_TIM5_Init+0x14c>)
 8002892:	f002 fc2e 	bl	80050f2 <HAL_TIM_PWM_Init>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <MX_TIM5_Init+0xa0>
  {
    Error_Handler();
 800289c:	f7ff fc20 	bl	80020e0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 80028a0:	482a      	ldr	r0, [pc, #168]	; (800294c <MX_TIM5_Init+0x14c>)
 80028a2:	f002 fc99 	bl	80051d8 <HAL_TIM_IC_Init>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 80028ac:	f7ff fc18 	bl	80020e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028b0:	2300      	movs	r3, #0
 80028b2:	633b      	str	r3, [r7, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028b4:	2300      	movs	r3, #0
 80028b6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80028b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80028bc:	4619      	mov	r1, r3
 80028be:	4823      	ldr	r0, [pc, #140]	; (800294c <MX_TIM5_Init+0x14c>)
 80028c0:	f003 fcae 	bl	8006220 <HAL_TIMEx_MasterConfigSynchronization>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <MX_TIM5_Init+0xce>
  {
    Error_Handler();
 80028ca:	f7ff fc09 	bl	80020e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028ce:	2360      	movs	r3, #96	; 0x60
 80028d0:	617b      	str	r3, [r7, #20]
  sConfigOC.Pulse = 0xFFFFFFF5;
 80028d2:	f06f 030a 	mvn.w	r3, #10
 80028d6:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80028d8:	2302      	movs	r3, #2
 80028da:	61fb      	str	r3, [r7, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028dc:	2300      	movs	r3, #0
 80028de:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80028e0:	f107 0314 	add.w	r3, r7, #20
 80028e4:	2200      	movs	r2, #0
 80028e6:	4619      	mov	r1, r3
 80028e8:	4818      	ldr	r0, [pc, #96]	; (800294c <MX_TIM5_Init+0x14c>)
 80028ea:	f002 feb7 	bl	800565c <HAL_TIM_PWM_ConfigChannel>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <MX_TIM5_Init+0xf8>
  {
    Error_Handler();
 80028f4:	f7ff fbf4 	bl	80020e0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80028f8:	2300      	movs	r3, #0
 80028fa:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80028fc:	2301      	movs	r3, #1
 80028fe:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002900:	2300      	movs	r3, #0
 8002902:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8002904:	2300      	movs	r3, #0
 8002906:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002908:	1d3b      	adds	r3, r7, #4
 800290a:	2208      	movs	r2, #8
 800290c:	4619      	mov	r1, r3
 800290e:	480f      	ldr	r0, [pc, #60]	; (800294c <MX_TIM5_Init+0x14c>)
 8002910:	f002 fe08 	bl	8005524 <HAL_TIM_IC_ConfigChannel>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d001      	beq.n	800291e <MX_TIM5_Init+0x11e>
  {
    Error_Handler();
 800291a:	f7ff fbe1 	bl	80020e0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800291e:	2302      	movs	r3, #2
 8002920:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002922:	2302      	movs	r3, #2
 8002924:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8002926:	1d3b      	adds	r3, r7, #4
 8002928:	220c      	movs	r2, #12
 800292a:	4619      	mov	r1, r3
 800292c:	4807      	ldr	r0, [pc, #28]	; (800294c <MX_TIM5_Init+0x14c>)
 800292e:	f002 fdf9 	bl	8005524 <HAL_TIM_IC_ConfigChannel>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d001      	beq.n	800293c <MX_TIM5_Init+0x13c>
  {
    Error_Handler();
 8002938:	f7ff fbd2 	bl	80020e0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim5);
 800293c:	4803      	ldr	r0, [pc, #12]	; (800294c <MX_TIM5_Init+0x14c>)
 800293e:	f000 f92f 	bl	8002ba0 <HAL_TIM_MspPostInit>

}
 8002942:	bf00      	nop
 8002944:	3748      	adds	r7, #72	; 0x48
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	200001c4 	.word	0x200001c4
 8002950:	40000c00 	.word	0x40000c00

08002954 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800295a:	463b      	mov	r3, r7
 800295c:	2200      	movs	r2, #0
 800295e:	601a      	str	r2, [r3, #0]
 8002960:	605a      	str	r2, [r3, #4]

  htim7.Instance = TIM7;
 8002962:	4b15      	ldr	r3, [pc, #84]	; (80029b8 <MX_TIM7_Init+0x64>)
 8002964:	4a15      	ldr	r2, [pc, #84]	; (80029bc <MX_TIM7_Init+0x68>)
 8002966:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 900-1;
 8002968:	4b13      	ldr	r3, [pc, #76]	; (80029b8 <MX_TIM7_Init+0x64>)
 800296a:	f240 3283 	movw	r2, #899	; 0x383
 800296e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002970:	4b11      	ldr	r3, [pc, #68]	; (80029b8 <MX_TIM7_Init+0x64>)
 8002972:	2200      	movs	r2, #0
 8002974:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 8002976:	4b10      	ldr	r3, [pc, #64]	; (80029b8 <MX_TIM7_Init+0x64>)
 8002978:	f240 32e7 	movw	r2, #999	; 0x3e7
 800297c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800297e:	4b0e      	ldr	r3, [pc, #56]	; (80029b8 <MX_TIM7_Init+0x64>)
 8002980:	2200      	movs	r2, #0
 8002982:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002984:	480c      	ldr	r0, [pc, #48]	; (80029b8 <MX_TIM7_Init+0x64>)
 8002986:	f002 fb41 	bl	800500c <HAL_TIM_Base_Init>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d001      	beq.n	8002994 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8002990:	f7ff fba6 	bl	80020e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002994:	2300      	movs	r3, #0
 8002996:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002998:	2300      	movs	r3, #0
 800299a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800299c:	463b      	mov	r3, r7
 800299e:	4619      	mov	r1, r3
 80029a0:	4805      	ldr	r0, [pc, #20]	; (80029b8 <MX_TIM7_Init+0x64>)
 80029a2:	f003 fc3d 	bl	8006220 <HAL_TIMEx_MasterConfigSynchronization>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d001      	beq.n	80029b0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80029ac:	f7ff fb98 	bl	80020e0 <Error_Handler>
  }

}
 80029b0:	bf00      	nop
 80029b2:	3708      	adds	r7, #8
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	20000204 	.word	0x20000204
 80029bc:	40001400 	.word	0x40001400

080029c0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b090      	sub	sp, #64	; 0x40
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029cc:	2200      	movs	r2, #0
 80029ce:	601a      	str	r2, [r3, #0]
 80029d0:	605a      	str	r2, [r3, #4]
 80029d2:	609a      	str	r2, [r3, #8]
 80029d4:	60da      	str	r2, [r3, #12]
 80029d6:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029e0:	d12d      	bne.n	8002a3e <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80029e2:	2300      	movs	r3, #0
 80029e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80029e6:	4b66      	ldr	r3, [pc, #408]	; (8002b80 <HAL_TIM_Base_MspInit+0x1c0>)
 80029e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ea:	4a65      	ldr	r2, [pc, #404]	; (8002b80 <HAL_TIM_Base_MspInit+0x1c0>)
 80029ec:	f043 0301 	orr.w	r3, r3, #1
 80029f0:	6413      	str	r3, [r2, #64]	; 0x40
 80029f2:	4b63      	ldr	r3, [pc, #396]	; (8002b80 <HAL_TIM_Base_MspInit+0x1c0>)
 80029f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80029fc:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029fe:	2300      	movs	r3, #0
 8002a00:	627b      	str	r3, [r7, #36]	; 0x24
 8002a02:	4b5f      	ldr	r3, [pc, #380]	; (8002b80 <HAL_TIM_Base_MspInit+0x1c0>)
 8002a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a06:	4a5e      	ldr	r2, [pc, #376]	; (8002b80 <HAL_TIM_Base_MspInit+0x1c0>)
 8002a08:	f043 0301 	orr.w	r3, r3, #1
 8002a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a0e:	4b5c      	ldr	r3, [pc, #368]	; (8002b80 <HAL_TIM_Base_MspInit+0x1c0>)
 8002a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a12:	f003 0301 	and.w	r3, r3, #1
 8002a16:	627b      	str	r3, [r7, #36]	; 0x24
 8002a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002a1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a20:	2302      	movs	r3, #2
 8002a22:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a24:	2300      	movs	r3, #0
 8002a26:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a34:	4619      	mov	r1, r3
 8002a36:	4853      	ldr	r0, [pc, #332]	; (8002b84 <HAL_TIM_Base_MspInit+0x1c4>)
 8002a38:	f000 fbf2 	bl	8003220 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8002a3c:	e09b      	b.n	8002b76 <HAL_TIM_Base_MspInit+0x1b6>
  else if(tim_baseHandle->Instance==TIM3)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a51      	ldr	r2, [pc, #324]	; (8002b88 <HAL_TIM_Base_MspInit+0x1c8>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d12c      	bne.n	8002aa2 <HAL_TIM_Base_MspInit+0xe2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a48:	2300      	movs	r3, #0
 8002a4a:	623b      	str	r3, [r7, #32]
 8002a4c:	4b4c      	ldr	r3, [pc, #304]	; (8002b80 <HAL_TIM_Base_MspInit+0x1c0>)
 8002a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a50:	4a4b      	ldr	r2, [pc, #300]	; (8002b80 <HAL_TIM_Base_MspInit+0x1c0>)
 8002a52:	f043 0302 	orr.w	r3, r3, #2
 8002a56:	6413      	str	r3, [r2, #64]	; 0x40
 8002a58:	4b49      	ldr	r3, [pc, #292]	; (8002b80 <HAL_TIM_Base_MspInit+0x1c0>)
 8002a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5c:	f003 0302 	and.w	r3, r3, #2
 8002a60:	623b      	str	r3, [r7, #32]
 8002a62:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a64:	2300      	movs	r3, #0
 8002a66:	61fb      	str	r3, [r7, #28]
 8002a68:	4b45      	ldr	r3, [pc, #276]	; (8002b80 <HAL_TIM_Base_MspInit+0x1c0>)
 8002a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6c:	4a44      	ldr	r2, [pc, #272]	; (8002b80 <HAL_TIM_Base_MspInit+0x1c0>)
 8002a6e:	f043 0308 	orr.w	r3, r3, #8
 8002a72:	6313      	str	r3, [r2, #48]	; 0x30
 8002a74:	4b42      	ldr	r3, [pc, #264]	; (8002b80 <HAL_TIM_Base_MspInit+0x1c0>)
 8002a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a78:	f003 0308 	and.w	r3, r3, #8
 8002a7c:	61fb      	str	r3, [r7, #28]
 8002a7e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002a80:	2304      	movs	r3, #4
 8002a82:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a84:	2302      	movs	r3, #2
 8002a86:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002a90:	2302      	movs	r3, #2
 8002a92:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a98:	4619      	mov	r1, r3
 8002a9a:	483c      	ldr	r0, [pc, #240]	; (8002b8c <HAL_TIM_Base_MspInit+0x1cc>)
 8002a9c:	f000 fbc0 	bl	8003220 <HAL_GPIO_Init>
}
 8002aa0:	e069      	b.n	8002b76 <HAL_TIM_Base_MspInit+0x1b6>
  else if(tim_baseHandle->Instance==TIM4)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a3a      	ldr	r2, [pc, #232]	; (8002b90 <HAL_TIM_Base_MspInit+0x1d0>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d10e      	bne.n	8002aca <HAL_TIM_Base_MspInit+0x10a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002aac:	2300      	movs	r3, #0
 8002aae:	61bb      	str	r3, [r7, #24]
 8002ab0:	4b33      	ldr	r3, [pc, #204]	; (8002b80 <HAL_TIM_Base_MspInit+0x1c0>)
 8002ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab4:	4a32      	ldr	r2, [pc, #200]	; (8002b80 <HAL_TIM_Base_MspInit+0x1c0>)
 8002ab6:	f043 0304 	orr.w	r3, r3, #4
 8002aba:	6413      	str	r3, [r2, #64]	; 0x40
 8002abc:	4b30      	ldr	r3, [pc, #192]	; (8002b80 <HAL_TIM_Base_MspInit+0x1c0>)
 8002abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac0:	f003 0304 	and.w	r3, r3, #4
 8002ac4:	61bb      	str	r3, [r7, #24]
 8002ac6:	69bb      	ldr	r3, [r7, #24]
}
 8002ac8:	e055      	b.n	8002b76 <HAL_TIM_Base_MspInit+0x1b6>
  else if(tim_baseHandle->Instance==TIM5)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a31      	ldr	r2, [pc, #196]	; (8002b94 <HAL_TIM_Base_MspInit+0x1d4>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d135      	bne.n	8002b40 <HAL_TIM_Base_MspInit+0x180>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	617b      	str	r3, [r7, #20]
 8002ad8:	4b29      	ldr	r3, [pc, #164]	; (8002b80 <HAL_TIM_Base_MspInit+0x1c0>)
 8002ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002adc:	4a28      	ldr	r2, [pc, #160]	; (8002b80 <HAL_TIM_Base_MspInit+0x1c0>)
 8002ade:	f043 0308 	orr.w	r3, r3, #8
 8002ae2:	6413      	str	r3, [r2, #64]	; 0x40
 8002ae4:	4b26      	ldr	r3, [pc, #152]	; (8002b80 <HAL_TIM_Base_MspInit+0x1c0>)
 8002ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae8:	f003 0308 	and.w	r3, r3, #8
 8002aec:	617b      	str	r3, [r7, #20]
 8002aee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002af0:	2300      	movs	r3, #0
 8002af2:	613b      	str	r3, [r7, #16]
 8002af4:	4b22      	ldr	r3, [pc, #136]	; (8002b80 <HAL_TIM_Base_MspInit+0x1c0>)
 8002af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af8:	4a21      	ldr	r2, [pc, #132]	; (8002b80 <HAL_TIM_Base_MspInit+0x1c0>)
 8002afa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002afe:	6313      	str	r3, [r2, #48]	; 0x30
 8002b00:	4b1f      	ldr	r3, [pc, #124]	; (8002b80 <HAL_TIM_Base_MspInit+0x1c0>)
 8002b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b08:	613b      	str	r3, [r7, #16]
 8002b0a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = IC_Eco_Pin;
 8002b0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b10:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b12:	2302      	movs	r3, #2
 8002b14:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b16:	2300      	movs	r3, #0
 8002b18:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002b1e:	2302      	movs	r3, #2
 8002b20:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(IC_Eco_GPIO_Port, &GPIO_InitStruct);
 8002b22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b26:	4619      	mov	r1, r3
 8002b28:	481b      	ldr	r0, [pc, #108]	; (8002b98 <HAL_TIM_Base_MspInit+0x1d8>)
 8002b2a:	f000 fb79 	bl	8003220 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002b2e:	2200      	movs	r2, #0
 8002b30:	2100      	movs	r1, #0
 8002b32:	2032      	movs	r0, #50	; 0x32
 8002b34:	f000 faad 	bl	8003092 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002b38:	2032      	movs	r0, #50	; 0x32
 8002b3a:	f000 fac6 	bl	80030ca <HAL_NVIC_EnableIRQ>
}
 8002b3e:	e01a      	b.n	8002b76 <HAL_TIM_Base_MspInit+0x1b6>
  else if(tim_baseHandle->Instance==TIM7)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a15      	ldr	r2, [pc, #84]	; (8002b9c <HAL_TIM_Base_MspInit+0x1dc>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d115      	bne.n	8002b76 <HAL_TIM_Base_MspInit+0x1b6>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	60fb      	str	r3, [r7, #12]
 8002b4e:	4b0c      	ldr	r3, [pc, #48]	; (8002b80 <HAL_TIM_Base_MspInit+0x1c0>)
 8002b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b52:	4a0b      	ldr	r2, [pc, #44]	; (8002b80 <HAL_TIM_Base_MspInit+0x1c0>)
 8002b54:	f043 0320 	orr.w	r3, r3, #32
 8002b58:	6413      	str	r3, [r2, #64]	; 0x40
 8002b5a:	4b09      	ldr	r3, [pc, #36]	; (8002b80 <HAL_TIM_Base_MspInit+0x1c0>)
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5e:	f003 0320 	and.w	r3, r3, #32
 8002b62:	60fb      	str	r3, [r7, #12]
 8002b64:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002b66:	2200      	movs	r2, #0
 8002b68:	2100      	movs	r1, #0
 8002b6a:	2037      	movs	r0, #55	; 0x37
 8002b6c:	f000 fa91 	bl	8003092 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002b70:	2037      	movs	r0, #55	; 0x37
 8002b72:	f000 faaa 	bl	80030ca <HAL_NVIC_EnableIRQ>
}
 8002b76:	bf00      	nop
 8002b78:	3740      	adds	r7, #64	; 0x40
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	40023800 	.word	0x40023800
 8002b84:	40020000 	.word	0x40020000
 8002b88:	40000400 	.word	0x40000400
 8002b8c:	40020c00 	.word	0x40020c00
 8002b90:	40000800 	.word	0x40000800
 8002b94:	40000c00 	.word	0x40000c00
 8002b98:	40021c00 	.word	0x40021c00
 8002b9c:	40001400 	.word	0x40001400

08002ba0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b08a      	sub	sp, #40	; 0x28
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ba8:	f107 0314 	add.w	r3, r7, #20
 8002bac:	2200      	movs	r2, #0
 8002bae:	601a      	str	r2, [r3, #0]
 8002bb0:	605a      	str	r2, [r3, #4]
 8002bb2:	609a      	str	r2, [r3, #8]
 8002bb4:	60da      	str	r2, [r3, #12]
 8002bb6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a25      	ldr	r2, [pc, #148]	; (8002c54 <HAL_TIM_MspPostInit+0xb4>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d11f      	bne.n	8002c02 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	613b      	str	r3, [r7, #16]
 8002bc6:	4b24      	ldr	r3, [pc, #144]	; (8002c58 <HAL_TIM_MspPostInit+0xb8>)
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bca:	4a23      	ldr	r2, [pc, #140]	; (8002c58 <HAL_TIM_MspPostInit+0xb8>)
 8002bcc:	f043 0308 	orr.w	r3, r3, #8
 8002bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8002bd2:	4b21      	ldr	r3, [pc, #132]	; (8002c58 <HAL_TIM_MspPostInit+0xb8>)
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd6:	f003 0308 	and.w	r3, r3, #8
 8002bda:	613b      	str	r3, [r7, #16]
 8002bdc:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = PWM_R_Pin|PWM_L_Pin;
 8002bde:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002be2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be4:	2302      	movs	r3, #2
 8002be6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be8:	2300      	movs	r3, #0
 8002bea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bec:	2300      	movs	r3, #0
 8002bee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002bf4:	f107 0314 	add.w	r3, r7, #20
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	4818      	ldr	r0, [pc, #96]	; (8002c5c <HAL_TIM_MspPostInit+0xbc>)
 8002bfc:	f000 fb10 	bl	8003220 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002c00:	e023      	b.n	8002c4a <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM5)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a16      	ldr	r2, [pc, #88]	; (8002c60 <HAL_TIM_MspPostInit+0xc0>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d11e      	bne.n	8002c4a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	60fb      	str	r3, [r7, #12]
 8002c10:	4b11      	ldr	r3, [pc, #68]	; (8002c58 <HAL_TIM_MspPostInit+0xb8>)
 8002c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c14:	4a10      	ldr	r2, [pc, #64]	; (8002c58 <HAL_TIM_MspPostInit+0xb8>)
 8002c16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c1a:	6313      	str	r3, [r2, #48]	; 0x30
 8002c1c:	4b0e      	ldr	r3, [pc, #56]	; (8002c58 <HAL_TIM_MspPostInit+0xb8>)
 8002c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c24:	60fb      	str	r3, [r7, #12]
 8002c26:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_Trig_Pin;
 8002c28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c2e:	2302      	movs	r3, #2
 8002c30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c32:	2300      	movs	r3, #0
 8002c34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c36:	2300      	movs	r3, #0
 8002c38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002c3a:	2302      	movs	r3, #2
 8002c3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_Trig_GPIO_Port, &GPIO_InitStruct);
 8002c3e:	f107 0314 	add.w	r3, r7, #20
 8002c42:	4619      	mov	r1, r3
 8002c44:	4807      	ldr	r0, [pc, #28]	; (8002c64 <HAL_TIM_MspPostInit+0xc4>)
 8002c46:	f000 faeb 	bl	8003220 <HAL_GPIO_Init>
}
 8002c4a:	bf00      	nop
 8002c4c:	3728      	adds	r7, #40	; 0x28
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	40000800 	.word	0x40000800
 8002c58:	40023800 	.word	0x40023800
 8002c5c:	40020c00 	.word	0x40020c00
 8002c60:	40000c00 	.word	0x40000c00
 8002c64:	40021c00 	.word	0x40021c00

08002c68 <MX_UART7_Init>:

UART_HandleTypeDef huart7;

/* UART7 init function */
void MX_UART7_Init(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0

  huart7.Instance = UART7;
 8002c6c:	4b11      	ldr	r3, [pc, #68]	; (8002cb4 <MX_UART7_Init+0x4c>)
 8002c6e:	4a12      	ldr	r2, [pc, #72]	; (8002cb8 <MX_UART7_Init+0x50>)
 8002c70:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8002c72:	4b10      	ldr	r3, [pc, #64]	; (8002cb4 <MX_UART7_Init+0x4c>)
 8002c74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c78:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8002c7a:	4b0e      	ldr	r3, [pc, #56]	; (8002cb4 <MX_UART7_Init+0x4c>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8002c80:	4b0c      	ldr	r3, [pc, #48]	; (8002cb4 <MX_UART7_Init+0x4c>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8002c86:	4b0b      	ldr	r3, [pc, #44]	; (8002cb4 <MX_UART7_Init+0x4c>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8002c8c:	4b09      	ldr	r3, [pc, #36]	; (8002cb4 <MX_UART7_Init+0x4c>)
 8002c8e:	220c      	movs	r2, #12
 8002c90:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c92:	4b08      	ldr	r3, [pc, #32]	; (8002cb4 <MX_UART7_Init+0x4c>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c98:	4b06      	ldr	r3, [pc, #24]	; (8002cb4 <MX_UART7_Init+0x4c>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8002c9e:	4805      	ldr	r0, [pc, #20]	; (8002cb4 <MX_UART7_Init+0x4c>)
 8002ca0:	f003 fb4e 	bl	8006340 <HAL_UART_Init>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <MX_UART7_Init+0x46>
  {
    Error_Handler();
 8002caa:	f7ff fa19 	bl	80020e0 <Error_Handler>
  }

}
 8002cae:	bf00      	nop
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	20000244 	.word	0x20000244
 8002cb8:	40007800 	.word	0x40007800

08002cbc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b08a      	sub	sp, #40	; 0x28
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cc4:	f107 0314 	add.w	r3, r7, #20
 8002cc8:	2200      	movs	r2, #0
 8002cca:	601a      	str	r2, [r3, #0]
 8002ccc:	605a      	str	r2, [r3, #4]
 8002cce:	609a      	str	r2, [r3, #8]
 8002cd0:	60da      	str	r2, [r3, #12]
 8002cd2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART7)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a1d      	ldr	r2, [pc, #116]	; (8002d50 <HAL_UART_MspInit+0x94>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d133      	bne.n	8002d46 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8002cde:	2300      	movs	r3, #0
 8002ce0:	613b      	str	r3, [r7, #16]
 8002ce2:	4b1c      	ldr	r3, [pc, #112]	; (8002d54 <HAL_UART_MspInit+0x98>)
 8002ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce6:	4a1b      	ldr	r2, [pc, #108]	; (8002d54 <HAL_UART_MspInit+0x98>)
 8002ce8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002cec:	6413      	str	r3, [r2, #64]	; 0x40
 8002cee:	4b19      	ldr	r3, [pc, #100]	; (8002d54 <HAL_UART_MspInit+0x98>)
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002cf6:	613b      	str	r3, [r7, #16]
 8002cf8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	60fb      	str	r3, [r7, #12]
 8002cfe:	4b15      	ldr	r3, [pc, #84]	; (8002d54 <HAL_UART_MspInit+0x98>)
 8002d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d02:	4a14      	ldr	r2, [pc, #80]	; (8002d54 <HAL_UART_MspInit+0x98>)
 8002d04:	f043 0320 	orr.w	r3, r3, #32
 8002d08:	6313      	str	r3, [r2, #48]	; 0x30
 8002d0a:	4b12      	ldr	r3, [pc, #72]	; (8002d54 <HAL_UART_MspInit+0x98>)
 8002d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0e:	f003 0320 	and.w	r3, r3, #32
 8002d12:	60fb      	str	r3, [r7, #12]
 8002d14:	68fb      	ldr	r3, [r7, #12]
    /**UART7 GPIO Configuration
    PF6     ------> UART7_RX
    PF7     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002d16:	23c0      	movs	r3, #192	; 0xc0
 8002d18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d22:	2303      	movs	r3, #3
 8002d24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8002d26:	2308      	movs	r3, #8
 8002d28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002d2a:	f107 0314 	add.w	r3, r7, #20
 8002d2e:	4619      	mov	r1, r3
 8002d30:	4809      	ldr	r0, [pc, #36]	; (8002d58 <HAL_UART_MspInit+0x9c>)
 8002d32:	f000 fa75 	bl	8003220 <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8002d36:	2200      	movs	r2, #0
 8002d38:	2100      	movs	r1, #0
 8002d3a:	2052      	movs	r0, #82	; 0x52
 8002d3c:	f000 f9a9 	bl	8003092 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8002d40:	2052      	movs	r0, #82	; 0x52
 8002d42:	f000 f9c2 	bl	80030ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }
}
 8002d46:	bf00      	nop
 8002d48:	3728      	adds	r7, #40	; 0x28
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	40007800 	.word	0x40007800
 8002d54:	40023800 	.word	0x40023800
 8002d58:	40021400 	.word	0x40021400

08002d5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002d5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d94 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002d60:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002d62:	e003      	b.n	8002d6c <LoopCopyDataInit>

08002d64 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002d64:	4b0c      	ldr	r3, [pc, #48]	; (8002d98 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002d66:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002d68:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002d6a:	3104      	adds	r1, #4

08002d6c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002d6c:	480b      	ldr	r0, [pc, #44]	; (8002d9c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002d6e:	4b0c      	ldr	r3, [pc, #48]	; (8002da0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002d70:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002d72:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002d74:	d3f6      	bcc.n	8002d64 <CopyDataInit>
  ldr  r2, =_sbss
 8002d76:	4a0b      	ldr	r2, [pc, #44]	; (8002da4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002d78:	e002      	b.n	8002d80 <LoopFillZerobss>

08002d7a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002d7a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002d7c:	f842 3b04 	str.w	r3, [r2], #4

08002d80 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002d80:	4b09      	ldr	r3, [pc, #36]	; (8002da8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002d82:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002d84:	d3f9      	bcc.n	8002d7a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002d86:	f7ff fbff 	bl	8002588 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d8a:	f004 fbb5 	bl	80074f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d8e:	f7fe f96d 	bl	800106c <main>
  bx  lr    
 8002d92:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002d94:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002d98:	080078c4 	.word	0x080078c4
  ldr  r0, =_sdata
 8002d9c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002da0:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8002da4:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8002da8:	20000288 	.word	0x20000288

08002dac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002dac:	e7fe      	b.n	8002dac <ADC_IRQHandler>
	...

08002db0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002db4:	4b0e      	ldr	r3, [pc, #56]	; (8002df0 <HAL_Init+0x40>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a0d      	ldr	r2, [pc, #52]	; (8002df0 <HAL_Init+0x40>)
 8002dba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002dbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002dc0:	4b0b      	ldr	r3, [pc, #44]	; (8002df0 <HAL_Init+0x40>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a0a      	ldr	r2, [pc, #40]	; (8002df0 <HAL_Init+0x40>)
 8002dc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002dca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002dcc:	4b08      	ldr	r3, [pc, #32]	; (8002df0 <HAL_Init+0x40>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a07      	ldr	r2, [pc, #28]	; (8002df0 <HAL_Init+0x40>)
 8002dd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dd8:	2003      	movs	r0, #3
 8002dda:	f000 f94f 	bl	800307c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002dde:	2000      	movs	r0, #0
 8002de0:	f000 f808 	bl	8002df4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002de4:	f7ff fb5c 	bl	80024a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	40023c00 	.word	0x40023c00

08002df4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002dfc:	4b12      	ldr	r3, [pc, #72]	; (8002e48 <HAL_InitTick+0x54>)
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	4b12      	ldr	r3, [pc, #72]	; (8002e4c <HAL_InitTick+0x58>)
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	4619      	mov	r1, r3
 8002e06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e12:	4618      	mov	r0, r3
 8002e14:	f000 f967 	bl	80030e6 <HAL_SYSTICK_Config>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e00e      	b.n	8002e40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2b0f      	cmp	r3, #15
 8002e26:	d80a      	bhi.n	8002e3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e28:	2200      	movs	r2, #0
 8002e2a:	6879      	ldr	r1, [r7, #4]
 8002e2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e30:	f000 f92f 	bl	8003092 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e34:	4a06      	ldr	r2, [pc, #24]	; (8002e50 <HAL_InitTick+0x5c>)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	e000      	b.n	8002e40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3708      	adds	r7, #8
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	20000004 	.word	0x20000004
 8002e4c:	2000000c 	.word	0x2000000c
 8002e50:	20000008 	.word	0x20000008

08002e54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e54:	b480      	push	{r7}
 8002e56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e58:	4b06      	ldr	r3, [pc, #24]	; (8002e74 <HAL_IncTick+0x20>)
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	4b06      	ldr	r3, [pc, #24]	; (8002e78 <HAL_IncTick+0x24>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4413      	add	r3, r2
 8002e64:	4a04      	ldr	r2, [pc, #16]	; (8002e78 <HAL_IncTick+0x24>)
 8002e66:	6013      	str	r3, [r2, #0]
}
 8002e68:	bf00      	nop
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	2000000c 	.word	0x2000000c
 8002e78:	20000284 	.word	0x20000284

08002e7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
  return uwTick;
 8002e80:	4b03      	ldr	r3, [pc, #12]	; (8002e90 <HAL_GetTick+0x14>)
 8002e82:	681b      	ldr	r3, [r3, #0]
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	20000284 	.word	0x20000284

08002e94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e9c:	f7ff ffee 	bl	8002e7c <HAL_GetTick>
 8002ea0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002eac:	d005      	beq.n	8002eba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002eae:	4b0a      	ldr	r3, [pc, #40]	; (8002ed8 <HAL_Delay+0x44>)
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002eba:	bf00      	nop
 8002ebc:	f7ff ffde 	bl	8002e7c <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	68fa      	ldr	r2, [r7, #12]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d8f7      	bhi.n	8002ebc <HAL_Delay+0x28>
  {
  }
}
 8002ecc:	bf00      	nop
 8002ece:	bf00      	nop
 8002ed0:	3710      	adds	r7, #16
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	2000000c 	.word	0x2000000c

08002edc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b085      	sub	sp, #20
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f003 0307 	and.w	r3, r3, #7
 8002eea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002eec:	4b0c      	ldr	r3, [pc, #48]	; (8002f20 <__NVIC_SetPriorityGrouping+0x44>)
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ef2:	68ba      	ldr	r2, [r7, #8]
 8002ef4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ef8:	4013      	ands	r3, r2
 8002efa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f0e:	4a04      	ldr	r2, [pc, #16]	; (8002f20 <__NVIC_SetPriorityGrouping+0x44>)
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	60d3      	str	r3, [r2, #12]
}
 8002f14:	bf00      	nop
 8002f16:	3714      	adds	r7, #20
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr
 8002f20:	e000ed00 	.word	0xe000ed00

08002f24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f28:	4b04      	ldr	r3, [pc, #16]	; (8002f3c <__NVIC_GetPriorityGrouping+0x18>)
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	0a1b      	lsrs	r3, r3, #8
 8002f2e:	f003 0307 	and.w	r3, r3, #7
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr
 8002f3c:	e000ed00 	.word	0xe000ed00

08002f40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	4603      	mov	r3, r0
 8002f48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	db0b      	blt.n	8002f6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f52:	79fb      	ldrb	r3, [r7, #7]
 8002f54:	f003 021f 	and.w	r2, r3, #31
 8002f58:	4907      	ldr	r1, [pc, #28]	; (8002f78 <__NVIC_EnableIRQ+0x38>)
 8002f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f5e:	095b      	lsrs	r3, r3, #5
 8002f60:	2001      	movs	r0, #1
 8002f62:	fa00 f202 	lsl.w	r2, r0, r2
 8002f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f6a:	bf00      	nop
 8002f6c:	370c      	adds	r7, #12
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	e000e100 	.word	0xe000e100

08002f7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	4603      	mov	r3, r0
 8002f84:	6039      	str	r1, [r7, #0]
 8002f86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	db0a      	blt.n	8002fa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	b2da      	uxtb	r2, r3
 8002f94:	490c      	ldr	r1, [pc, #48]	; (8002fc8 <__NVIC_SetPriority+0x4c>)
 8002f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f9a:	0112      	lsls	r2, r2, #4
 8002f9c:	b2d2      	uxtb	r2, r2
 8002f9e:	440b      	add	r3, r1
 8002fa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fa4:	e00a      	b.n	8002fbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	b2da      	uxtb	r2, r3
 8002faa:	4908      	ldr	r1, [pc, #32]	; (8002fcc <__NVIC_SetPriority+0x50>)
 8002fac:	79fb      	ldrb	r3, [r7, #7]
 8002fae:	f003 030f 	and.w	r3, r3, #15
 8002fb2:	3b04      	subs	r3, #4
 8002fb4:	0112      	lsls	r2, r2, #4
 8002fb6:	b2d2      	uxtb	r2, r2
 8002fb8:	440b      	add	r3, r1
 8002fba:	761a      	strb	r2, [r3, #24]
}
 8002fbc:	bf00      	nop
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr
 8002fc8:	e000e100 	.word	0xe000e100
 8002fcc:	e000ed00 	.word	0xe000ed00

08002fd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b089      	sub	sp, #36	; 0x24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	60b9      	str	r1, [r7, #8]
 8002fda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f003 0307 	and.w	r3, r3, #7
 8002fe2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	f1c3 0307 	rsb	r3, r3, #7
 8002fea:	2b04      	cmp	r3, #4
 8002fec:	bf28      	it	cs
 8002fee:	2304      	movcs	r3, #4
 8002ff0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	3304      	adds	r3, #4
 8002ff6:	2b06      	cmp	r3, #6
 8002ff8:	d902      	bls.n	8003000 <NVIC_EncodePriority+0x30>
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	3b03      	subs	r3, #3
 8002ffe:	e000      	b.n	8003002 <NVIC_EncodePriority+0x32>
 8003000:	2300      	movs	r3, #0
 8003002:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003004:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	fa02 f303 	lsl.w	r3, r2, r3
 800300e:	43da      	mvns	r2, r3
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	401a      	ands	r2, r3
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003018:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	fa01 f303 	lsl.w	r3, r1, r3
 8003022:	43d9      	mvns	r1, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003028:	4313      	orrs	r3, r2
         );
}
 800302a:	4618      	mov	r0, r3
 800302c:	3724      	adds	r7, #36	; 0x24
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
	...

08003038 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	3b01      	subs	r3, #1
 8003044:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003048:	d301      	bcc.n	800304e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800304a:	2301      	movs	r3, #1
 800304c:	e00f      	b.n	800306e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800304e:	4a0a      	ldr	r2, [pc, #40]	; (8003078 <SysTick_Config+0x40>)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	3b01      	subs	r3, #1
 8003054:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003056:	210f      	movs	r1, #15
 8003058:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800305c:	f7ff ff8e 	bl	8002f7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003060:	4b05      	ldr	r3, [pc, #20]	; (8003078 <SysTick_Config+0x40>)
 8003062:	2200      	movs	r2, #0
 8003064:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003066:	4b04      	ldr	r3, [pc, #16]	; (8003078 <SysTick_Config+0x40>)
 8003068:	2207      	movs	r2, #7
 800306a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3708      	adds	r7, #8
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	e000e010 	.word	0xe000e010

0800307c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f7ff ff29 	bl	8002edc <__NVIC_SetPriorityGrouping>
}
 800308a:	bf00      	nop
 800308c:	3708      	adds	r7, #8
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003092:	b580      	push	{r7, lr}
 8003094:	b086      	sub	sp, #24
 8003096:	af00      	add	r7, sp, #0
 8003098:	4603      	mov	r3, r0
 800309a:	60b9      	str	r1, [r7, #8]
 800309c:	607a      	str	r2, [r7, #4]
 800309e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030a0:	2300      	movs	r3, #0
 80030a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030a4:	f7ff ff3e 	bl	8002f24 <__NVIC_GetPriorityGrouping>
 80030a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	68b9      	ldr	r1, [r7, #8]
 80030ae:	6978      	ldr	r0, [r7, #20]
 80030b0:	f7ff ff8e 	bl	8002fd0 <NVIC_EncodePriority>
 80030b4:	4602      	mov	r2, r0
 80030b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030ba:	4611      	mov	r1, r2
 80030bc:	4618      	mov	r0, r3
 80030be:	f7ff ff5d 	bl	8002f7c <__NVIC_SetPriority>
}
 80030c2:	bf00      	nop
 80030c4:	3718      	adds	r7, #24
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}

080030ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030ca:	b580      	push	{r7, lr}
 80030cc:	b082      	sub	sp, #8
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	4603      	mov	r3, r0
 80030d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d8:	4618      	mov	r0, r3
 80030da:	f7ff ff31 	bl	8002f40 <__NVIC_EnableIRQ>
}
 80030de:	bf00      	nop
 80030e0:	3708      	adds	r7, #8
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}

080030e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030e6:	b580      	push	{r7, lr}
 80030e8:	b082      	sub	sp, #8
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f7ff ffa2 	bl	8003038 <SysTick_Config>
 80030f4:	4603      	mov	r3, r0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3708      	adds	r7, #8
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}

080030fe <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80030fe:	b580      	push	{r7, lr}
 8003100:	b082      	sub	sp, #8
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d101      	bne.n	8003110 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e014      	b.n	800313a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	791b      	ldrb	r3, [r3, #4]
 8003114:	b2db      	uxtb	r3, r3
 8003116:	2b00      	cmp	r3, #0
 8003118:	d105      	bne.n	8003126 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f7fd fe39 	bl	8000d98 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2202      	movs	r2, #2
 800312a:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2201      	movs	r2, #1
 8003136:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3708      	adds	r7, #8
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}

08003142 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8003142:	b480      	push	{r7}
 8003144:	b087      	sub	sp, #28
 8003146:	af00      	add	r7, sp, #0
 8003148:	60f8      	str	r0, [r7, #12]
 800314a:	60b9      	str	r1, [r7, #8]
 800314c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 800314e:	2300      	movs	r3, #0
 8003150:	617b      	str	r3, [r7, #20]
 8003152:	2300      	movs	r3, #0
 8003154:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	795b      	ldrb	r3, [r3, #5]
 800315a:	2b01      	cmp	r3, #1
 800315c:	d101      	bne.n	8003162 <HAL_DAC_ConfigChannel+0x20>
 800315e:	2302      	movs	r3, #2
 8003160:	e036      	b.n	80031d0 <HAL_DAC_ConfigChannel+0x8e>
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2201      	movs	r2, #1
 8003166:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2202      	movs	r2, #2
 800316c:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8003176:	f640 72fe 	movw	r2, #4094	; 0xffe
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	fa02 f303 	lsl.w	r3, r2, r3
 8003180:	43db      	mvns	r3, r3
 8003182:	697a      	ldr	r2, [r7, #20]
 8003184:	4013      	ands	r3, r2
 8003186:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	4313      	orrs	r3, r2
 8003192:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8003194:	693a      	ldr	r2, [r7, #16]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	fa02 f303 	lsl.w	r3, r2, r3
 800319c:	697a      	ldr	r2, [r7, #20]
 800319e:	4313      	orrs	r3, r2
 80031a0:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	697a      	ldr	r2, [r7, #20]
 80031a8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	6819      	ldr	r1, [r3, #0]
 80031b0:	22c0      	movs	r2, #192	; 0xc0
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	fa02 f303 	lsl.w	r3, r2, r3
 80031b8:	43da      	mvns	r2, r3
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	400a      	ands	r2, r1
 80031c0:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2201      	movs	r2, #1
 80031c6:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2200      	movs	r2, #0
 80031cc:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80031ce:	2300      	movs	r3, #0
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	371c      	adds	r7, #28
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d004      	beq.n	80031fa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2280      	movs	r2, #128	; 0x80
 80031f4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e00c      	b.n	8003214 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2205      	movs	r2, #5
 80031fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f022 0201 	bic.w	r2, r2, #1
 8003210:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003212:	2300      	movs	r3, #0
}
 8003214:	4618      	mov	r0, r3
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003220:	b480      	push	{r7}
 8003222:	b089      	sub	sp, #36	; 0x24
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800322a:	2300      	movs	r3, #0
 800322c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800322e:	2300      	movs	r3, #0
 8003230:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003232:	2300      	movs	r3, #0
 8003234:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003236:	2300      	movs	r3, #0
 8003238:	61fb      	str	r3, [r7, #28]
 800323a:	e177      	b.n	800352c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800323c:	2201      	movs	r2, #1
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	fa02 f303 	lsl.w	r3, r2, r3
 8003244:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	697a      	ldr	r2, [r7, #20]
 800324c:	4013      	ands	r3, r2
 800324e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003250:	693a      	ldr	r2, [r7, #16]
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	429a      	cmp	r2, r3
 8003256:	f040 8166 	bne.w	8003526 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	2b01      	cmp	r3, #1
 8003260:	d00b      	beq.n	800327a <HAL_GPIO_Init+0x5a>
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	2b02      	cmp	r3, #2
 8003268:	d007      	beq.n	800327a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800326e:	2b11      	cmp	r3, #17
 8003270:	d003      	beq.n	800327a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	2b12      	cmp	r3, #18
 8003278:	d130      	bne.n	80032dc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	005b      	lsls	r3, r3, #1
 8003284:	2203      	movs	r2, #3
 8003286:	fa02 f303 	lsl.w	r3, r2, r3
 800328a:	43db      	mvns	r3, r3
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	4013      	ands	r3, r2
 8003290:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	68da      	ldr	r2, [r3, #12]
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	005b      	lsls	r3, r3, #1
 800329a:	fa02 f303 	lsl.w	r3, r2, r3
 800329e:	69ba      	ldr	r2, [r7, #24]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	69ba      	ldr	r2, [r7, #24]
 80032a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032b0:	2201      	movs	r2, #1
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	fa02 f303 	lsl.w	r3, r2, r3
 80032b8:	43db      	mvns	r3, r3
 80032ba:	69ba      	ldr	r2, [r7, #24]
 80032bc:	4013      	ands	r3, r2
 80032be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	091b      	lsrs	r3, r3, #4
 80032c6:	f003 0201 	and.w	r2, r3, #1
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	fa02 f303 	lsl.w	r3, r2, r3
 80032d0:	69ba      	ldr	r2, [r7, #24]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	69ba      	ldr	r2, [r7, #24]
 80032da:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	005b      	lsls	r3, r3, #1
 80032e6:	2203      	movs	r2, #3
 80032e8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ec:	43db      	mvns	r3, r3
 80032ee:	69ba      	ldr	r2, [r7, #24]
 80032f0:	4013      	ands	r3, r2
 80032f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	689a      	ldr	r2, [r3, #8]
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	005b      	lsls	r3, r3, #1
 80032fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003300:	69ba      	ldr	r2, [r7, #24]
 8003302:	4313      	orrs	r3, r2
 8003304:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	2b02      	cmp	r3, #2
 8003312:	d003      	beq.n	800331c <HAL_GPIO_Init+0xfc>
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	2b12      	cmp	r3, #18
 800331a:	d123      	bne.n	8003364 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	08da      	lsrs	r2, r3, #3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	3208      	adds	r2, #8
 8003324:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003328:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	f003 0307 	and.w	r3, r3, #7
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	220f      	movs	r2, #15
 8003334:	fa02 f303 	lsl.w	r3, r2, r3
 8003338:	43db      	mvns	r3, r3
 800333a:	69ba      	ldr	r2, [r7, #24]
 800333c:	4013      	ands	r3, r2
 800333e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	691a      	ldr	r2, [r3, #16]
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	f003 0307 	and.w	r3, r3, #7
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	fa02 f303 	lsl.w	r3, r2, r3
 8003350:	69ba      	ldr	r2, [r7, #24]
 8003352:	4313      	orrs	r3, r2
 8003354:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	08da      	lsrs	r2, r3, #3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	3208      	adds	r2, #8
 800335e:	69b9      	ldr	r1, [r7, #24]
 8003360:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	005b      	lsls	r3, r3, #1
 800336e:	2203      	movs	r2, #3
 8003370:	fa02 f303 	lsl.w	r3, r2, r3
 8003374:	43db      	mvns	r3, r3
 8003376:	69ba      	ldr	r2, [r7, #24]
 8003378:	4013      	ands	r3, r2
 800337a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f003 0203 	and.w	r2, r3, #3
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	005b      	lsls	r3, r3, #1
 8003388:	fa02 f303 	lsl.w	r3, r2, r3
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	4313      	orrs	r3, r2
 8003390:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	69ba      	ldr	r2, [r7, #24]
 8003396:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	f000 80c0 	beq.w	8003526 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033a6:	2300      	movs	r3, #0
 80033a8:	60fb      	str	r3, [r7, #12]
 80033aa:	4b66      	ldr	r3, [pc, #408]	; (8003544 <HAL_GPIO_Init+0x324>)
 80033ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ae:	4a65      	ldr	r2, [pc, #404]	; (8003544 <HAL_GPIO_Init+0x324>)
 80033b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033b4:	6453      	str	r3, [r2, #68]	; 0x44
 80033b6:	4b63      	ldr	r3, [pc, #396]	; (8003544 <HAL_GPIO_Init+0x324>)
 80033b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033be:	60fb      	str	r3, [r7, #12]
 80033c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033c2:	4a61      	ldr	r2, [pc, #388]	; (8003548 <HAL_GPIO_Init+0x328>)
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	089b      	lsrs	r3, r3, #2
 80033c8:	3302      	adds	r3, #2
 80033ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	f003 0303 	and.w	r3, r3, #3
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	220f      	movs	r2, #15
 80033da:	fa02 f303 	lsl.w	r3, r2, r3
 80033de:	43db      	mvns	r3, r3
 80033e0:	69ba      	ldr	r2, [r7, #24]
 80033e2:	4013      	ands	r3, r2
 80033e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a58      	ldr	r2, [pc, #352]	; (800354c <HAL_GPIO_Init+0x32c>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d037      	beq.n	800345e <HAL_GPIO_Init+0x23e>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a57      	ldr	r2, [pc, #348]	; (8003550 <HAL_GPIO_Init+0x330>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d031      	beq.n	800345a <HAL_GPIO_Init+0x23a>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a56      	ldr	r2, [pc, #344]	; (8003554 <HAL_GPIO_Init+0x334>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d02b      	beq.n	8003456 <HAL_GPIO_Init+0x236>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a55      	ldr	r2, [pc, #340]	; (8003558 <HAL_GPIO_Init+0x338>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d025      	beq.n	8003452 <HAL_GPIO_Init+0x232>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a54      	ldr	r2, [pc, #336]	; (800355c <HAL_GPIO_Init+0x33c>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d01f      	beq.n	800344e <HAL_GPIO_Init+0x22e>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a53      	ldr	r2, [pc, #332]	; (8003560 <HAL_GPIO_Init+0x340>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d019      	beq.n	800344a <HAL_GPIO_Init+0x22a>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a52      	ldr	r2, [pc, #328]	; (8003564 <HAL_GPIO_Init+0x344>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d013      	beq.n	8003446 <HAL_GPIO_Init+0x226>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a51      	ldr	r2, [pc, #324]	; (8003568 <HAL_GPIO_Init+0x348>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d00d      	beq.n	8003442 <HAL_GPIO_Init+0x222>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a50      	ldr	r2, [pc, #320]	; (800356c <HAL_GPIO_Init+0x34c>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d007      	beq.n	800343e <HAL_GPIO_Init+0x21e>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a4f      	ldr	r2, [pc, #316]	; (8003570 <HAL_GPIO_Init+0x350>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d101      	bne.n	800343a <HAL_GPIO_Init+0x21a>
 8003436:	2309      	movs	r3, #9
 8003438:	e012      	b.n	8003460 <HAL_GPIO_Init+0x240>
 800343a:	230a      	movs	r3, #10
 800343c:	e010      	b.n	8003460 <HAL_GPIO_Init+0x240>
 800343e:	2308      	movs	r3, #8
 8003440:	e00e      	b.n	8003460 <HAL_GPIO_Init+0x240>
 8003442:	2307      	movs	r3, #7
 8003444:	e00c      	b.n	8003460 <HAL_GPIO_Init+0x240>
 8003446:	2306      	movs	r3, #6
 8003448:	e00a      	b.n	8003460 <HAL_GPIO_Init+0x240>
 800344a:	2305      	movs	r3, #5
 800344c:	e008      	b.n	8003460 <HAL_GPIO_Init+0x240>
 800344e:	2304      	movs	r3, #4
 8003450:	e006      	b.n	8003460 <HAL_GPIO_Init+0x240>
 8003452:	2303      	movs	r3, #3
 8003454:	e004      	b.n	8003460 <HAL_GPIO_Init+0x240>
 8003456:	2302      	movs	r3, #2
 8003458:	e002      	b.n	8003460 <HAL_GPIO_Init+0x240>
 800345a:	2301      	movs	r3, #1
 800345c:	e000      	b.n	8003460 <HAL_GPIO_Init+0x240>
 800345e:	2300      	movs	r3, #0
 8003460:	69fa      	ldr	r2, [r7, #28]
 8003462:	f002 0203 	and.w	r2, r2, #3
 8003466:	0092      	lsls	r2, r2, #2
 8003468:	4093      	lsls	r3, r2
 800346a:	69ba      	ldr	r2, [r7, #24]
 800346c:	4313      	orrs	r3, r2
 800346e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003470:	4935      	ldr	r1, [pc, #212]	; (8003548 <HAL_GPIO_Init+0x328>)
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	089b      	lsrs	r3, r3, #2
 8003476:	3302      	adds	r3, #2
 8003478:	69ba      	ldr	r2, [r7, #24]
 800347a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800347e:	4b3d      	ldr	r3, [pc, #244]	; (8003574 <HAL_GPIO_Init+0x354>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	43db      	mvns	r3, r3
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	4013      	ands	r3, r2
 800348c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d003      	beq.n	80034a2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800349a:	69ba      	ldr	r2, [r7, #24]
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	4313      	orrs	r3, r2
 80034a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034a2:	4a34      	ldr	r2, [pc, #208]	; (8003574 <HAL_GPIO_Init+0x354>)
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80034a8:	4b32      	ldr	r3, [pc, #200]	; (8003574 <HAL_GPIO_Init+0x354>)
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	43db      	mvns	r3, r3
 80034b2:	69ba      	ldr	r2, [r7, #24]
 80034b4:	4013      	ands	r3, r2
 80034b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d003      	beq.n	80034cc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80034c4:	69ba      	ldr	r2, [r7, #24]
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034cc:	4a29      	ldr	r2, [pc, #164]	; (8003574 <HAL_GPIO_Init+0x354>)
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034d2:	4b28      	ldr	r3, [pc, #160]	; (8003574 <HAL_GPIO_Init+0x354>)
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	43db      	mvns	r3, r3
 80034dc:	69ba      	ldr	r2, [r7, #24]
 80034de:	4013      	ands	r3, r2
 80034e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d003      	beq.n	80034f6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80034ee:	69ba      	ldr	r2, [r7, #24]
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034f6:	4a1f      	ldr	r2, [pc, #124]	; (8003574 <HAL_GPIO_Init+0x354>)
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034fc:	4b1d      	ldr	r3, [pc, #116]	; (8003574 <HAL_GPIO_Init+0x354>)
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	43db      	mvns	r3, r3
 8003506:	69ba      	ldr	r2, [r7, #24]
 8003508:	4013      	ands	r3, r2
 800350a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d003      	beq.n	8003520 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003518:	69ba      	ldr	r2, [r7, #24]
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	4313      	orrs	r3, r2
 800351e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003520:	4a14      	ldr	r2, [pc, #80]	; (8003574 <HAL_GPIO_Init+0x354>)
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	3301      	adds	r3, #1
 800352a:	61fb      	str	r3, [r7, #28]
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	2b0f      	cmp	r3, #15
 8003530:	f67f ae84 	bls.w	800323c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003534:	bf00      	nop
 8003536:	bf00      	nop
 8003538:	3724      	adds	r7, #36	; 0x24
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	40023800 	.word	0x40023800
 8003548:	40013800 	.word	0x40013800
 800354c:	40020000 	.word	0x40020000
 8003550:	40020400 	.word	0x40020400
 8003554:	40020800 	.word	0x40020800
 8003558:	40020c00 	.word	0x40020c00
 800355c:	40021000 	.word	0x40021000
 8003560:	40021400 	.word	0x40021400
 8003564:	40021800 	.word	0x40021800
 8003568:	40021c00 	.word	0x40021c00
 800356c:	40022000 	.word	0x40022000
 8003570:	40022400 	.word	0x40022400
 8003574:	40013c00 	.word	0x40013c00

08003578 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003578:	b480      	push	{r7}
 800357a:	b085      	sub	sp, #20
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	460b      	mov	r3, r1
 8003582:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	691a      	ldr	r2, [r3, #16]
 8003588:	887b      	ldrh	r3, [r7, #2]
 800358a:	4013      	ands	r3, r2
 800358c:	2b00      	cmp	r3, #0
 800358e:	d002      	beq.n	8003596 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003590:	2301      	movs	r3, #1
 8003592:	73fb      	strb	r3, [r7, #15]
 8003594:	e001      	b.n	800359a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003596:	2300      	movs	r3, #0
 8003598:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800359a:	7bfb      	ldrb	r3, [r7, #15]
}
 800359c:	4618      	mov	r0, r3
 800359e:	3714      	adds	r7, #20
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	460b      	mov	r3, r1
 80035b2:	807b      	strh	r3, [r7, #2]
 80035b4:	4613      	mov	r3, r2
 80035b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035b8:	787b      	ldrb	r3, [r7, #1]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d003      	beq.n	80035c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035be:	887a      	ldrh	r2, [r7, #2]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80035c4:	e003      	b.n	80035ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80035c6:	887b      	ldrh	r3, [r7, #2]
 80035c8:	041a      	lsls	r2, r3, #16
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	619a      	str	r2, [r3, #24]
}
 80035ce:	bf00      	nop
 80035d0:	370c      	adds	r7, #12
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
	...

080035dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d101      	bne.n	80035ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e12b      	b.n	8003846 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d106      	bne.n	8003608 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f7fd fcea 	bl	8000fdc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2224      	movs	r2, #36	; 0x24
 800360c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f022 0201 	bic.w	r2, r2, #1
 800361e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800362e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800363e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003640:	f001 fcbc 	bl	8004fbc <HAL_RCC_GetPCLK1Freq>
 8003644:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	4a81      	ldr	r2, [pc, #516]	; (8003850 <HAL_I2C_Init+0x274>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d807      	bhi.n	8003660 <HAL_I2C_Init+0x84>
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	4a80      	ldr	r2, [pc, #512]	; (8003854 <HAL_I2C_Init+0x278>)
 8003654:	4293      	cmp	r3, r2
 8003656:	bf94      	ite	ls
 8003658:	2301      	movls	r3, #1
 800365a:	2300      	movhi	r3, #0
 800365c:	b2db      	uxtb	r3, r3
 800365e:	e006      	b.n	800366e <HAL_I2C_Init+0x92>
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	4a7d      	ldr	r2, [pc, #500]	; (8003858 <HAL_I2C_Init+0x27c>)
 8003664:	4293      	cmp	r3, r2
 8003666:	bf94      	ite	ls
 8003668:	2301      	movls	r3, #1
 800366a:	2300      	movhi	r3, #0
 800366c:	b2db      	uxtb	r3, r3
 800366e:	2b00      	cmp	r3, #0
 8003670:	d001      	beq.n	8003676 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e0e7      	b.n	8003846 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	4a78      	ldr	r2, [pc, #480]	; (800385c <HAL_I2C_Init+0x280>)
 800367a:	fba2 2303 	umull	r2, r3, r2, r3
 800367e:	0c9b      	lsrs	r3, r3, #18
 8003680:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68ba      	ldr	r2, [r7, #8]
 8003692:	430a      	orrs	r2, r1
 8003694:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	6a1b      	ldr	r3, [r3, #32]
 800369c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	4a6a      	ldr	r2, [pc, #424]	; (8003850 <HAL_I2C_Init+0x274>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d802      	bhi.n	80036b0 <HAL_I2C_Init+0xd4>
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	3301      	adds	r3, #1
 80036ae:	e009      	b.n	80036c4 <HAL_I2C_Init+0xe8>
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80036b6:	fb02 f303 	mul.w	r3, r2, r3
 80036ba:	4a69      	ldr	r2, [pc, #420]	; (8003860 <HAL_I2C_Init+0x284>)
 80036bc:	fba2 2303 	umull	r2, r3, r2, r3
 80036c0:	099b      	lsrs	r3, r3, #6
 80036c2:	3301      	adds	r3, #1
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	6812      	ldr	r2, [r2, #0]
 80036c8:	430b      	orrs	r3, r1
 80036ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	69db      	ldr	r3, [r3, #28]
 80036d2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80036d6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	495c      	ldr	r1, [pc, #368]	; (8003850 <HAL_I2C_Init+0x274>)
 80036e0:	428b      	cmp	r3, r1
 80036e2:	d819      	bhi.n	8003718 <HAL_I2C_Init+0x13c>
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	1e59      	subs	r1, r3, #1
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	005b      	lsls	r3, r3, #1
 80036ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80036f2:	1c59      	adds	r1, r3, #1
 80036f4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80036f8:	400b      	ands	r3, r1
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00a      	beq.n	8003714 <HAL_I2C_Init+0x138>
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	1e59      	subs	r1, r3, #1
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	005b      	lsls	r3, r3, #1
 8003708:	fbb1 f3f3 	udiv	r3, r1, r3
 800370c:	3301      	adds	r3, #1
 800370e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003712:	e051      	b.n	80037b8 <HAL_I2C_Init+0x1dc>
 8003714:	2304      	movs	r3, #4
 8003716:	e04f      	b.n	80037b8 <HAL_I2C_Init+0x1dc>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d111      	bne.n	8003744 <HAL_I2C_Init+0x168>
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	1e58      	subs	r0, r3, #1
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6859      	ldr	r1, [r3, #4]
 8003728:	460b      	mov	r3, r1
 800372a:	005b      	lsls	r3, r3, #1
 800372c:	440b      	add	r3, r1
 800372e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003732:	3301      	adds	r3, #1
 8003734:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003738:	2b00      	cmp	r3, #0
 800373a:	bf0c      	ite	eq
 800373c:	2301      	moveq	r3, #1
 800373e:	2300      	movne	r3, #0
 8003740:	b2db      	uxtb	r3, r3
 8003742:	e012      	b.n	800376a <HAL_I2C_Init+0x18e>
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	1e58      	subs	r0, r3, #1
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6859      	ldr	r1, [r3, #4]
 800374c:	460b      	mov	r3, r1
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	440b      	add	r3, r1
 8003752:	0099      	lsls	r1, r3, #2
 8003754:	440b      	add	r3, r1
 8003756:	fbb0 f3f3 	udiv	r3, r0, r3
 800375a:	3301      	adds	r3, #1
 800375c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003760:	2b00      	cmp	r3, #0
 8003762:	bf0c      	ite	eq
 8003764:	2301      	moveq	r3, #1
 8003766:	2300      	movne	r3, #0
 8003768:	b2db      	uxtb	r3, r3
 800376a:	2b00      	cmp	r3, #0
 800376c:	d001      	beq.n	8003772 <HAL_I2C_Init+0x196>
 800376e:	2301      	movs	r3, #1
 8003770:	e022      	b.n	80037b8 <HAL_I2C_Init+0x1dc>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d10e      	bne.n	8003798 <HAL_I2C_Init+0x1bc>
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	1e58      	subs	r0, r3, #1
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6859      	ldr	r1, [r3, #4]
 8003782:	460b      	mov	r3, r1
 8003784:	005b      	lsls	r3, r3, #1
 8003786:	440b      	add	r3, r1
 8003788:	fbb0 f3f3 	udiv	r3, r0, r3
 800378c:	3301      	adds	r3, #1
 800378e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003792:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003796:	e00f      	b.n	80037b8 <HAL_I2C_Init+0x1dc>
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	1e58      	subs	r0, r3, #1
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6859      	ldr	r1, [r3, #4]
 80037a0:	460b      	mov	r3, r1
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	440b      	add	r3, r1
 80037a6:	0099      	lsls	r1, r3, #2
 80037a8:	440b      	add	r3, r1
 80037aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80037ae:	3301      	adds	r3, #1
 80037b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80037b8:	6879      	ldr	r1, [r7, #4]
 80037ba:	6809      	ldr	r1, [r1, #0]
 80037bc:	4313      	orrs	r3, r2
 80037be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	69da      	ldr	r2, [r3, #28]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a1b      	ldr	r3, [r3, #32]
 80037d2:	431a      	orrs	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	430a      	orrs	r2, r1
 80037da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80037e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	6911      	ldr	r1, [r2, #16]
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	68d2      	ldr	r2, [r2, #12]
 80037f2:	4311      	orrs	r1, r2
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	6812      	ldr	r2, [r2, #0]
 80037f8:	430b      	orrs	r3, r1
 80037fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	695a      	ldr	r2, [r3, #20]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	699b      	ldr	r3, [r3, #24]
 800380e:	431a      	orrs	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	430a      	orrs	r2, r1
 8003816:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f042 0201 	orr.w	r2, r2, #1
 8003826:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2220      	movs	r2, #32
 8003832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3710      	adds	r7, #16
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	000186a0 	.word	0x000186a0
 8003854:	001e847f 	.word	0x001e847f
 8003858:	003d08ff 	.word	0x003d08ff
 800385c:	431bde83 	.word	0x431bde83
 8003860:	10624dd3 	.word	0x10624dd3

08003864 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b088      	sub	sp, #32
 8003868:	af02      	add	r7, sp, #8
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	4608      	mov	r0, r1
 800386e:	4611      	mov	r1, r2
 8003870:	461a      	mov	r2, r3
 8003872:	4603      	mov	r3, r0
 8003874:	817b      	strh	r3, [r7, #10]
 8003876:	460b      	mov	r3, r1
 8003878:	813b      	strh	r3, [r7, #8]
 800387a:	4613      	mov	r3, r2
 800387c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800387e:	f7ff fafd 	bl	8002e7c <HAL_GetTick>
 8003882:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800388a:	b2db      	uxtb	r3, r3
 800388c:	2b20      	cmp	r3, #32
 800388e:	f040 80d9 	bne.w	8003a44 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	9300      	str	r3, [sp, #0]
 8003896:	2319      	movs	r3, #25
 8003898:	2201      	movs	r2, #1
 800389a:	496d      	ldr	r1, [pc, #436]	; (8003a50 <HAL_I2C_Mem_Write+0x1ec>)
 800389c:	68f8      	ldr	r0, [r7, #12]
 800389e:	f000 fc7f 	bl	80041a0 <I2C_WaitOnFlagUntilTimeout>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d001      	beq.n	80038ac <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80038a8:	2302      	movs	r3, #2
 80038aa:	e0cc      	b.n	8003a46 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d101      	bne.n	80038ba <HAL_I2C_Mem_Write+0x56>
 80038b6:	2302      	movs	r3, #2
 80038b8:	e0c5      	b.n	8003a46 <HAL_I2C_Mem_Write+0x1e2>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2201      	movs	r2, #1
 80038be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0301 	and.w	r3, r3, #1
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d007      	beq.n	80038e0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f042 0201 	orr.w	r2, r2, #1
 80038de:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038ee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2221      	movs	r2, #33	; 0x21
 80038f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2240      	movs	r2, #64	; 0x40
 80038fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2200      	movs	r2, #0
 8003904:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6a3a      	ldr	r2, [r7, #32]
 800390a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003910:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003916:	b29a      	uxth	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	4a4d      	ldr	r2, [pc, #308]	; (8003a54 <HAL_I2C_Mem_Write+0x1f0>)
 8003920:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003922:	88f8      	ldrh	r0, [r7, #6]
 8003924:	893a      	ldrh	r2, [r7, #8]
 8003926:	8979      	ldrh	r1, [r7, #10]
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	9301      	str	r3, [sp, #4]
 800392c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800392e:	9300      	str	r3, [sp, #0]
 8003930:	4603      	mov	r3, r0
 8003932:	68f8      	ldr	r0, [r7, #12]
 8003934:	f000 fab6 	bl	8003ea4 <I2C_RequestMemoryWrite>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d052      	beq.n	80039e4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e081      	b.n	8003a46 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003942:	697a      	ldr	r2, [r7, #20]
 8003944:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003946:	68f8      	ldr	r0, [r7, #12]
 8003948:	f000 fd00 	bl	800434c <I2C_WaitOnTXEFlagUntilTimeout>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d00d      	beq.n	800396e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003956:	2b04      	cmp	r3, #4
 8003958:	d107      	bne.n	800396a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003968:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e06b      	b.n	8003a46 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003972:	781a      	ldrb	r2, [r3, #0]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397e:	1c5a      	adds	r2, r3, #1
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003988:	3b01      	subs	r3, #1
 800398a:	b29a      	uxth	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003994:	b29b      	uxth	r3, r3
 8003996:	3b01      	subs	r3, #1
 8003998:	b29a      	uxth	r2, r3
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	695b      	ldr	r3, [r3, #20]
 80039a4:	f003 0304 	and.w	r3, r3, #4
 80039a8:	2b04      	cmp	r3, #4
 80039aa:	d11b      	bne.n	80039e4 <HAL_I2C_Mem_Write+0x180>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d017      	beq.n	80039e4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b8:	781a      	ldrb	r2, [r3, #0]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c4:	1c5a      	adds	r2, r3, #1
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ce:	3b01      	subs	r3, #1
 80039d0:	b29a      	uxth	r2, r3
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039da:	b29b      	uxth	r3, r3
 80039dc:	3b01      	subs	r3, #1
 80039de:	b29a      	uxth	r2, r3
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d1aa      	bne.n	8003942 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039ec:	697a      	ldr	r2, [r7, #20]
 80039ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80039f0:	68f8      	ldr	r0, [r7, #12]
 80039f2:	f000 fcec 	bl	80043ce <I2C_WaitOnBTFFlagUntilTimeout>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d00d      	beq.n	8003a18 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a00:	2b04      	cmp	r3, #4
 8003a02:	d107      	bne.n	8003a14 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a12:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e016      	b.n	8003a46 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2220      	movs	r2, #32
 8003a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003a40:	2300      	movs	r3, #0
 8003a42:	e000      	b.n	8003a46 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003a44:	2302      	movs	r3, #2
  }
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3718      	adds	r7, #24
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	00100002 	.word	0x00100002
 8003a54:	ffff0000 	.word	0xffff0000

08003a58 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b08c      	sub	sp, #48	; 0x30
 8003a5c:	af02      	add	r7, sp, #8
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	4608      	mov	r0, r1
 8003a62:	4611      	mov	r1, r2
 8003a64:	461a      	mov	r2, r3
 8003a66:	4603      	mov	r3, r0
 8003a68:	817b      	strh	r3, [r7, #10]
 8003a6a:	460b      	mov	r3, r1
 8003a6c:	813b      	strh	r3, [r7, #8]
 8003a6e:	4613      	mov	r3, r2
 8003a70:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a72:	f7ff fa03 	bl	8002e7c <HAL_GetTick>
 8003a76:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	2b20      	cmp	r3, #32
 8003a82:	f040 8208 	bne.w	8003e96 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a88:	9300      	str	r3, [sp, #0]
 8003a8a:	2319      	movs	r3, #25
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	497b      	ldr	r1, [pc, #492]	; (8003c7c <HAL_I2C_Mem_Read+0x224>)
 8003a90:	68f8      	ldr	r0, [r7, #12]
 8003a92:	f000 fb85 	bl	80041a0 <I2C_WaitOnFlagUntilTimeout>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d001      	beq.n	8003aa0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	e1fb      	b.n	8003e98 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d101      	bne.n	8003aae <HAL_I2C_Mem_Read+0x56>
 8003aaa:	2302      	movs	r3, #2
 8003aac:	e1f4      	b.n	8003e98 <HAL_I2C_Mem_Read+0x440>
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0301 	and.w	r3, r3, #1
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d007      	beq.n	8003ad4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f042 0201 	orr.w	r2, r2, #1
 8003ad2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ae2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2222      	movs	r2, #34	; 0x22
 8003ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2240      	movs	r2, #64	; 0x40
 8003af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2200      	movs	r2, #0
 8003af8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003afe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003b04:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b0a:	b29a      	uxth	r2, r3
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	4a5b      	ldr	r2, [pc, #364]	; (8003c80 <HAL_I2C_Mem_Read+0x228>)
 8003b14:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b16:	88f8      	ldrh	r0, [r7, #6]
 8003b18:	893a      	ldrh	r2, [r7, #8]
 8003b1a:	8979      	ldrh	r1, [r7, #10]
 8003b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1e:	9301      	str	r3, [sp, #4]
 8003b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b22:	9300      	str	r3, [sp, #0]
 8003b24:	4603      	mov	r3, r0
 8003b26:	68f8      	ldr	r0, [r7, #12]
 8003b28:	f000 fa52 	bl	8003fd0 <I2C_RequestMemoryRead>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d001      	beq.n	8003b36 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e1b0      	b.n	8003e98 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d113      	bne.n	8003b66 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b3e:	2300      	movs	r3, #0
 8003b40:	623b      	str	r3, [r7, #32]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	695b      	ldr	r3, [r3, #20]
 8003b48:	623b      	str	r3, [r7, #32]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	699b      	ldr	r3, [r3, #24]
 8003b50:	623b      	str	r3, [r7, #32]
 8003b52:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b62:	601a      	str	r2, [r3, #0]
 8003b64:	e184      	b.n	8003e70 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d11b      	bne.n	8003ba6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b7c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b7e:	2300      	movs	r3, #0
 8003b80:	61fb      	str	r3, [r7, #28]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	695b      	ldr	r3, [r3, #20]
 8003b88:	61fb      	str	r3, [r7, #28]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	699b      	ldr	r3, [r3, #24]
 8003b90:	61fb      	str	r3, [r7, #28]
 8003b92:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ba2:	601a      	str	r2, [r3, #0]
 8003ba4:	e164      	b.n	8003e70 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d11b      	bne.n	8003be6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bbc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bcc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bce:	2300      	movs	r3, #0
 8003bd0:	61bb      	str	r3, [r7, #24]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	695b      	ldr	r3, [r3, #20]
 8003bd8:	61bb      	str	r3, [r7, #24]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	699b      	ldr	r3, [r3, #24]
 8003be0:	61bb      	str	r3, [r7, #24]
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	e144      	b.n	8003e70 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003be6:	2300      	movs	r3, #0
 8003be8:	617b      	str	r3, [r7, #20]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	695b      	ldr	r3, [r3, #20]
 8003bf0:	617b      	str	r3, [r7, #20]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	699b      	ldr	r3, [r3, #24]
 8003bf8:	617b      	str	r3, [r7, #20]
 8003bfa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003bfc:	e138      	b.n	8003e70 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c02:	2b03      	cmp	r3, #3
 8003c04:	f200 80f1 	bhi.w	8003dea <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d123      	bne.n	8003c58 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c12:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003c14:	68f8      	ldr	r0, [r7, #12]
 8003c16:	f000 fc1b 	bl	8004450 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d001      	beq.n	8003c24 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e139      	b.n	8003e98 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	691a      	ldr	r2, [r3, #16]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2e:	b2d2      	uxtb	r2, r2
 8003c30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c36:	1c5a      	adds	r2, r3, #1
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c40:	3b01      	subs	r3, #1
 8003c42:	b29a      	uxth	r2, r3
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	b29a      	uxth	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c56:	e10b      	b.n	8003e70 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d14e      	bne.n	8003cfe <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c62:	9300      	str	r3, [sp, #0]
 8003c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c66:	2200      	movs	r2, #0
 8003c68:	4906      	ldr	r1, [pc, #24]	; (8003c84 <HAL_I2C_Mem_Read+0x22c>)
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f000 fa98 	bl	80041a0 <I2C_WaitOnFlagUntilTimeout>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d008      	beq.n	8003c88 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e10e      	b.n	8003e98 <HAL_I2C_Mem_Read+0x440>
 8003c7a:	bf00      	nop
 8003c7c:	00100002 	.word	0x00100002
 8003c80:	ffff0000 	.word	0xffff0000
 8003c84:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	691a      	ldr	r2, [r3, #16]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca2:	b2d2      	uxtb	r2, r2
 8003ca4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003caa:	1c5a      	adds	r2, r3, #1
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	b29a      	uxth	r2, r3
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	b29a      	uxth	r2, r3
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	691a      	ldr	r2, [r3, #16]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd4:	b2d2      	uxtb	r2, r2
 8003cd6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cdc:	1c5a      	adds	r2, r3, #1
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	b29a      	uxth	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	b29a      	uxth	r2, r3
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003cfc:	e0b8      	b.n	8003e70 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d00:	9300      	str	r3, [sp, #0]
 8003d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d04:	2200      	movs	r2, #0
 8003d06:	4966      	ldr	r1, [pc, #408]	; (8003ea0 <HAL_I2C_Mem_Read+0x448>)
 8003d08:	68f8      	ldr	r0, [r7, #12]
 8003d0a:	f000 fa49 	bl	80041a0 <I2C_WaitOnFlagUntilTimeout>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d001      	beq.n	8003d18 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e0bf      	b.n	8003e98 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	691a      	ldr	r2, [r3, #16]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d32:	b2d2      	uxtb	r2, r2
 8003d34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3a:	1c5a      	adds	r2, r3, #1
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d44:	3b01      	subs	r3, #1
 8003d46:	b29a      	uxth	r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	3b01      	subs	r3, #1
 8003d54:	b29a      	uxth	r2, r3
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5c:	9300      	str	r3, [sp, #0]
 8003d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d60:	2200      	movs	r2, #0
 8003d62:	494f      	ldr	r1, [pc, #316]	; (8003ea0 <HAL_I2C_Mem_Read+0x448>)
 8003d64:	68f8      	ldr	r0, [r7, #12]
 8003d66:	f000 fa1b 	bl	80041a0 <I2C_WaitOnFlagUntilTimeout>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d001      	beq.n	8003d74 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e091      	b.n	8003e98 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	691a      	ldr	r2, [r3, #16]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8e:	b2d2      	uxtb	r2, r2
 8003d90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d96:	1c5a      	adds	r2, r3, #1
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003da0:	3b01      	subs	r3, #1
 8003da2:	b29a      	uxth	r2, r3
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	3b01      	subs	r3, #1
 8003db0:	b29a      	uxth	r2, r3
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	691a      	ldr	r2, [r3, #16]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc0:	b2d2      	uxtb	r2, r2
 8003dc2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc8:	1c5a      	adds	r2, r3, #1
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dd2:	3b01      	subs	r3, #1
 8003dd4:	b29a      	uxth	r2, r3
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	3b01      	subs	r3, #1
 8003de2:	b29a      	uxth	r2, r3
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003de8:	e042      	b.n	8003e70 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003dee:	68f8      	ldr	r0, [r7, #12]
 8003df0:	f000 fb2e 	bl	8004450 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d001      	beq.n	8003dfe <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e04c      	b.n	8003e98 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	691a      	ldr	r2, [r3, #16]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e08:	b2d2      	uxtb	r2, r2
 8003e0a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e10:	1c5a      	adds	r2, r3, #1
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	b29a      	uxth	r2, r3
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	3b01      	subs	r3, #1
 8003e2a:	b29a      	uxth	r2, r3
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	f003 0304 	and.w	r3, r3, #4
 8003e3a:	2b04      	cmp	r3, #4
 8003e3c:	d118      	bne.n	8003e70 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	691a      	ldr	r2, [r3, #16]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e48:	b2d2      	uxtb	r2, r2
 8003e4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e50:	1c5a      	adds	r2, r3, #1
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	b29a      	uxth	r2, r3
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	b29a      	uxth	r2, r3
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	f47f aec2 	bne.w	8003bfe <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2220      	movs	r2, #32
 8003e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003e92:	2300      	movs	r3, #0
 8003e94:	e000      	b.n	8003e98 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003e96:	2302      	movs	r3, #2
  }
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3728      	adds	r7, #40	; 0x28
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	00010004 	.word	0x00010004

08003ea4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b088      	sub	sp, #32
 8003ea8:	af02      	add	r7, sp, #8
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	4608      	mov	r0, r1
 8003eae:	4611      	mov	r1, r2
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	817b      	strh	r3, [r7, #10]
 8003eb6:	460b      	mov	r3, r1
 8003eb8:	813b      	strh	r3, [r7, #8]
 8003eba:	4613      	mov	r3, r2
 8003ebc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ecc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed0:	9300      	str	r3, [sp, #0]
 8003ed2:	6a3b      	ldr	r3, [r7, #32]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003eda:	68f8      	ldr	r0, [r7, #12]
 8003edc:	f000 f960 	bl	80041a0 <I2C_WaitOnFlagUntilTimeout>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d00d      	beq.n	8003f02 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ef0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ef4:	d103      	bne.n	8003efe <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003efc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e05f      	b.n	8003fc2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f02:	897b      	ldrh	r3, [r7, #10]
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	461a      	mov	r2, r3
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f10:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f14:	6a3a      	ldr	r2, [r7, #32]
 8003f16:	492d      	ldr	r1, [pc, #180]	; (8003fcc <I2C_RequestMemoryWrite+0x128>)
 8003f18:	68f8      	ldr	r0, [r7, #12]
 8003f1a:	f000 f998 	bl	800424e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d001      	beq.n	8003f28 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e04c      	b.n	8003fc2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f28:	2300      	movs	r3, #0
 8003f2a:	617b      	str	r3, [r7, #20]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	695b      	ldr	r3, [r3, #20]
 8003f32:	617b      	str	r3, [r7, #20]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	617b      	str	r3, [r7, #20]
 8003f3c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f40:	6a39      	ldr	r1, [r7, #32]
 8003f42:	68f8      	ldr	r0, [r7, #12]
 8003f44:	f000 fa02 	bl	800434c <I2C_WaitOnTXEFlagUntilTimeout>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d00d      	beq.n	8003f6a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f52:	2b04      	cmp	r3, #4
 8003f54:	d107      	bne.n	8003f66 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f64:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e02b      	b.n	8003fc2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f6a:	88fb      	ldrh	r3, [r7, #6]
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d105      	bne.n	8003f7c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f70:	893b      	ldrh	r3, [r7, #8]
 8003f72:	b2da      	uxtb	r2, r3
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	611a      	str	r2, [r3, #16]
 8003f7a:	e021      	b.n	8003fc0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003f7c:	893b      	ldrh	r3, [r7, #8]
 8003f7e:	0a1b      	lsrs	r3, r3, #8
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	b2da      	uxtb	r2, r3
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f8c:	6a39      	ldr	r1, [r7, #32]
 8003f8e:	68f8      	ldr	r0, [r7, #12]
 8003f90:	f000 f9dc 	bl	800434c <I2C_WaitOnTXEFlagUntilTimeout>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d00d      	beq.n	8003fb6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9e:	2b04      	cmp	r3, #4
 8003fa0:	d107      	bne.n	8003fb2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fb0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e005      	b.n	8003fc2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003fb6:	893b      	ldrh	r3, [r7, #8]
 8003fb8:	b2da      	uxtb	r2, r3
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003fc0:	2300      	movs	r3, #0
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3718      	adds	r7, #24
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	00010002 	.word	0x00010002

08003fd0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b088      	sub	sp, #32
 8003fd4:	af02      	add	r7, sp, #8
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	4608      	mov	r0, r1
 8003fda:	4611      	mov	r1, r2
 8003fdc:	461a      	mov	r2, r3
 8003fde:	4603      	mov	r3, r0
 8003fe0:	817b      	strh	r3, [r7, #10]
 8003fe2:	460b      	mov	r3, r1
 8003fe4:	813b      	strh	r3, [r7, #8]
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ff8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004008:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800400a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400c:	9300      	str	r3, [sp, #0]
 800400e:	6a3b      	ldr	r3, [r7, #32]
 8004010:	2200      	movs	r2, #0
 8004012:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004016:	68f8      	ldr	r0, [r7, #12]
 8004018:	f000 f8c2 	bl	80041a0 <I2C_WaitOnFlagUntilTimeout>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00d      	beq.n	800403e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800402c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004030:	d103      	bne.n	800403a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004038:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e0aa      	b.n	8004194 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800403e:	897b      	ldrh	r3, [r7, #10]
 8004040:	b2db      	uxtb	r3, r3
 8004042:	461a      	mov	r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800404c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800404e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004050:	6a3a      	ldr	r2, [r7, #32]
 8004052:	4952      	ldr	r1, [pc, #328]	; (800419c <I2C_RequestMemoryRead+0x1cc>)
 8004054:	68f8      	ldr	r0, [r7, #12]
 8004056:	f000 f8fa 	bl	800424e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d001      	beq.n	8004064 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e097      	b.n	8004194 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004064:	2300      	movs	r3, #0
 8004066:	617b      	str	r3, [r7, #20]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	617b      	str	r3, [r7, #20]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	699b      	ldr	r3, [r3, #24]
 8004076:	617b      	str	r3, [r7, #20]
 8004078:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800407a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800407c:	6a39      	ldr	r1, [r7, #32]
 800407e:	68f8      	ldr	r0, [r7, #12]
 8004080:	f000 f964 	bl	800434c <I2C_WaitOnTXEFlagUntilTimeout>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00d      	beq.n	80040a6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408e:	2b04      	cmp	r3, #4
 8004090:	d107      	bne.n	80040a2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040a0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e076      	b.n	8004194 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80040a6:	88fb      	ldrh	r3, [r7, #6]
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d105      	bne.n	80040b8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80040ac:	893b      	ldrh	r3, [r7, #8]
 80040ae:	b2da      	uxtb	r2, r3
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	611a      	str	r2, [r3, #16]
 80040b6:	e021      	b.n	80040fc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80040b8:	893b      	ldrh	r3, [r7, #8]
 80040ba:	0a1b      	lsrs	r3, r3, #8
 80040bc:	b29b      	uxth	r3, r3
 80040be:	b2da      	uxtb	r2, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040c8:	6a39      	ldr	r1, [r7, #32]
 80040ca:	68f8      	ldr	r0, [r7, #12]
 80040cc:	f000 f93e 	bl	800434c <I2C_WaitOnTXEFlagUntilTimeout>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d00d      	beq.n	80040f2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040da:	2b04      	cmp	r3, #4
 80040dc:	d107      	bne.n	80040ee <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040ec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e050      	b.n	8004194 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80040f2:	893b      	ldrh	r3, [r7, #8]
 80040f4:	b2da      	uxtb	r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040fe:	6a39      	ldr	r1, [r7, #32]
 8004100:	68f8      	ldr	r0, [r7, #12]
 8004102:	f000 f923 	bl	800434c <I2C_WaitOnTXEFlagUntilTimeout>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d00d      	beq.n	8004128 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004110:	2b04      	cmp	r3, #4
 8004112:	d107      	bne.n	8004124 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004122:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e035      	b.n	8004194 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004136:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413a:	9300      	str	r3, [sp, #0]
 800413c:	6a3b      	ldr	r3, [r7, #32]
 800413e:	2200      	movs	r2, #0
 8004140:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004144:	68f8      	ldr	r0, [r7, #12]
 8004146:	f000 f82b 	bl	80041a0 <I2C_WaitOnFlagUntilTimeout>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d00d      	beq.n	800416c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800415a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800415e:	d103      	bne.n	8004168 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004166:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	e013      	b.n	8004194 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800416c:	897b      	ldrh	r3, [r7, #10]
 800416e:	b2db      	uxtb	r3, r3
 8004170:	f043 0301 	orr.w	r3, r3, #1
 8004174:	b2da      	uxtb	r2, r3
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800417c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417e:	6a3a      	ldr	r2, [r7, #32]
 8004180:	4906      	ldr	r1, [pc, #24]	; (800419c <I2C_RequestMemoryRead+0x1cc>)
 8004182:	68f8      	ldr	r0, [r7, #12]
 8004184:	f000 f863 	bl	800424e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d001      	beq.n	8004192 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e000      	b.n	8004194 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004192:	2300      	movs	r3, #0
}
 8004194:	4618      	mov	r0, r3
 8004196:	3718      	adds	r7, #24
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}
 800419c:	00010002 	.word	0x00010002

080041a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	60f8      	str	r0, [r7, #12]
 80041a8:	60b9      	str	r1, [r7, #8]
 80041aa:	603b      	str	r3, [r7, #0]
 80041ac:	4613      	mov	r3, r2
 80041ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041b0:	e025      	b.n	80041fe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041b8:	d021      	beq.n	80041fe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041ba:	f7fe fe5f 	bl	8002e7c <HAL_GetTick>
 80041be:	4602      	mov	r2, r0
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	683a      	ldr	r2, [r7, #0]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d302      	bcc.n	80041d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d116      	bne.n	80041fe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2200      	movs	r2, #0
 80041d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2220      	movs	r2, #32
 80041da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ea:	f043 0220 	orr.w	r2, r3, #32
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e023      	b.n	8004246 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	0c1b      	lsrs	r3, r3, #16
 8004202:	b2db      	uxtb	r3, r3
 8004204:	2b01      	cmp	r3, #1
 8004206:	d10d      	bne.n	8004224 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	695b      	ldr	r3, [r3, #20]
 800420e:	43da      	mvns	r2, r3
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	4013      	ands	r3, r2
 8004214:	b29b      	uxth	r3, r3
 8004216:	2b00      	cmp	r3, #0
 8004218:	bf0c      	ite	eq
 800421a:	2301      	moveq	r3, #1
 800421c:	2300      	movne	r3, #0
 800421e:	b2db      	uxtb	r3, r3
 8004220:	461a      	mov	r2, r3
 8004222:	e00c      	b.n	800423e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	699b      	ldr	r3, [r3, #24]
 800422a:	43da      	mvns	r2, r3
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	4013      	ands	r3, r2
 8004230:	b29b      	uxth	r3, r3
 8004232:	2b00      	cmp	r3, #0
 8004234:	bf0c      	ite	eq
 8004236:	2301      	moveq	r3, #1
 8004238:	2300      	movne	r3, #0
 800423a:	b2db      	uxtb	r3, r3
 800423c:	461a      	mov	r2, r3
 800423e:	79fb      	ldrb	r3, [r7, #7]
 8004240:	429a      	cmp	r2, r3
 8004242:	d0b6      	beq.n	80041b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	3710      	adds	r7, #16
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}

0800424e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800424e:	b580      	push	{r7, lr}
 8004250:	b084      	sub	sp, #16
 8004252:	af00      	add	r7, sp, #0
 8004254:	60f8      	str	r0, [r7, #12]
 8004256:	60b9      	str	r1, [r7, #8]
 8004258:	607a      	str	r2, [r7, #4]
 800425a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800425c:	e051      	b.n	8004302 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	695b      	ldr	r3, [r3, #20]
 8004264:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004268:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800426c:	d123      	bne.n	80042b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800427c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004286:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2200      	movs	r2, #0
 800428c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2220      	movs	r2, #32
 8004292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2200      	movs	r2, #0
 800429a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a2:	f043 0204 	orr.w	r2, r3, #4
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e046      	b.n	8004344 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042bc:	d021      	beq.n	8004302 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042be:	f7fe fddd 	bl	8002e7c <HAL_GetTick>
 80042c2:	4602      	mov	r2, r0
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d302      	bcc.n	80042d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d116      	bne.n	8004302 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2200      	movs	r2, #0
 80042d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2220      	movs	r2, #32
 80042de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ee:	f043 0220 	orr.w	r2, r3, #32
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e020      	b.n	8004344 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	0c1b      	lsrs	r3, r3, #16
 8004306:	b2db      	uxtb	r3, r3
 8004308:	2b01      	cmp	r3, #1
 800430a:	d10c      	bne.n	8004326 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	43da      	mvns	r2, r3
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	4013      	ands	r3, r2
 8004318:	b29b      	uxth	r3, r3
 800431a:	2b00      	cmp	r3, #0
 800431c:	bf14      	ite	ne
 800431e:	2301      	movne	r3, #1
 8004320:	2300      	moveq	r3, #0
 8004322:	b2db      	uxtb	r3, r3
 8004324:	e00b      	b.n	800433e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	699b      	ldr	r3, [r3, #24]
 800432c:	43da      	mvns	r2, r3
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	4013      	ands	r3, r2
 8004332:	b29b      	uxth	r3, r3
 8004334:	2b00      	cmp	r3, #0
 8004336:	bf14      	ite	ne
 8004338:	2301      	movne	r3, #1
 800433a:	2300      	moveq	r3, #0
 800433c:	b2db      	uxtb	r3, r3
 800433e:	2b00      	cmp	r3, #0
 8004340:	d18d      	bne.n	800425e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004342:	2300      	movs	r3, #0
}
 8004344:	4618      	mov	r0, r3
 8004346:	3710      	adds	r7, #16
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	60b9      	str	r1, [r7, #8]
 8004356:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004358:	e02d      	b.n	80043b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800435a:	68f8      	ldr	r0, [r7, #12]
 800435c:	f000 f8ce 	bl	80044fc <I2C_IsAcknowledgeFailed>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d001      	beq.n	800436a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e02d      	b.n	80043c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004370:	d021      	beq.n	80043b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004372:	f7fe fd83 	bl	8002e7c <HAL_GetTick>
 8004376:	4602      	mov	r2, r0
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	68ba      	ldr	r2, [r7, #8]
 800437e:	429a      	cmp	r2, r3
 8004380:	d302      	bcc.n	8004388 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d116      	bne.n	80043b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2200      	movs	r2, #0
 800438c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2220      	movs	r2, #32
 8004392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a2:	f043 0220 	orr.w	r2, r3, #32
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e007      	b.n	80043c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	695b      	ldr	r3, [r3, #20]
 80043bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043c0:	2b80      	cmp	r3, #128	; 0x80
 80043c2:	d1ca      	bne.n	800435a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3710      	adds	r7, #16
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}

080043ce <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043ce:	b580      	push	{r7, lr}
 80043d0:	b084      	sub	sp, #16
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	60f8      	str	r0, [r7, #12]
 80043d6:	60b9      	str	r1, [r7, #8]
 80043d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80043da:	e02d      	b.n	8004438 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80043dc:	68f8      	ldr	r0, [r7, #12]
 80043de:	f000 f88d 	bl	80044fc <I2C_IsAcknowledgeFailed>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d001      	beq.n	80043ec <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e02d      	b.n	8004448 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043f2:	d021      	beq.n	8004438 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043f4:	f7fe fd42 	bl	8002e7c <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	68ba      	ldr	r2, [r7, #8]
 8004400:	429a      	cmp	r2, r3
 8004402:	d302      	bcc.n	800440a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d116      	bne.n	8004438 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2200      	movs	r2, #0
 800440e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2220      	movs	r2, #32
 8004414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2200      	movs	r2, #0
 800441c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004424:	f043 0220 	orr.w	r2, r3, #32
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2200      	movs	r2, #0
 8004430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e007      	b.n	8004448 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	695b      	ldr	r3, [r3, #20]
 800443e:	f003 0304 	and.w	r3, r3, #4
 8004442:	2b04      	cmp	r3, #4
 8004444:	d1ca      	bne.n	80043dc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004446:	2300      	movs	r3, #0
}
 8004448:	4618      	mov	r0, r3
 800444a:	3710      	adds	r7, #16
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}

08004450 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	60b9      	str	r1, [r7, #8]
 800445a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800445c:	e042      	b.n	80044e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	695b      	ldr	r3, [r3, #20]
 8004464:	f003 0310 	and.w	r3, r3, #16
 8004468:	2b10      	cmp	r3, #16
 800446a:	d119      	bne.n	80044a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f06f 0210 	mvn.w	r2, #16
 8004474:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2200      	movs	r2, #0
 800447a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2220      	movs	r2, #32
 8004480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2200      	movs	r2, #0
 8004488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2200      	movs	r2, #0
 8004498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e029      	b.n	80044f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044a0:	f7fe fcec 	bl	8002e7c <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	68ba      	ldr	r2, [r7, #8]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d302      	bcc.n	80044b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d116      	bne.n	80044e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2200      	movs	r2, #0
 80044ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2220      	movs	r2, #32
 80044c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d0:	f043 0220 	orr.w	r2, r3, #32
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2200      	movs	r2, #0
 80044dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e007      	b.n	80044f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	695b      	ldr	r3, [r3, #20]
 80044ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ee:	2b40      	cmp	r3, #64	; 0x40
 80044f0:	d1b5      	bne.n	800445e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80044f2:	2300      	movs	r3, #0
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3710      	adds	r7, #16
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}

080044fc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	695b      	ldr	r3, [r3, #20]
 800450a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800450e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004512:	d11b      	bne.n	800454c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800451c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2220      	movs	r2, #32
 8004528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004538:	f043 0204 	orr.w	r2, r3, #4
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e000      	b.n	800454e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	370c      	adds	r7, #12
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr

0800455a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800455a:	b480      	push	{r7}
 800455c:	b083      	sub	sp, #12
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
 8004562:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800456a:	b2db      	uxtb	r3, r3
 800456c:	2b20      	cmp	r3, #32
 800456e:	d129      	bne.n	80045c4 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2224      	movs	r2, #36	; 0x24
 8004574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f022 0201 	bic.w	r2, r2, #1
 8004586:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f022 0210 	bic.w	r2, r2, #16
 8004596:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	683a      	ldr	r2, [r7, #0]
 80045a4:	430a      	orrs	r2, r1
 80045a6:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f042 0201 	orr.w	r2, r2, #1
 80045b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2220      	movs	r2, #32
 80045bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80045c0:	2300      	movs	r3, #0
 80045c2:	e000      	b.n	80045c6 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80045c4:	2302      	movs	r3, #2
  }
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	370c      	adds	r7, #12
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr

080045d2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80045d2:	b480      	push	{r7}
 80045d4:	b085      	sub	sp, #20
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
 80045da:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80045dc:	2300      	movs	r3, #0
 80045de:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	2b20      	cmp	r3, #32
 80045ea:	d12a      	bne.n	8004642 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2224      	movs	r2, #36	; 0x24
 80045f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f022 0201 	bic.w	r2, r2, #1
 8004602:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460a:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800460c:	89fb      	ldrh	r3, [r7, #14]
 800460e:	f023 030f 	bic.w	r3, r3, #15
 8004612:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	b29a      	uxth	r2, r3
 8004618:	89fb      	ldrh	r3, [r7, #14]
 800461a:	4313      	orrs	r3, r2
 800461c:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	89fa      	ldrh	r2, [r7, #14]
 8004624:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f042 0201 	orr.w	r2, r2, #1
 8004634:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2220      	movs	r2, #32
 800463a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800463e:	2300      	movs	r3, #0
 8004640:	e000      	b.n	8004644 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004642:	2302      	movs	r3, #2
  }
}
 8004644:	4618      	mov	r0, r3
 8004646:	3714      	adds	r7, #20
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr

08004650 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b082      	sub	sp, #8
 8004654:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004656:	2300      	movs	r3, #0
 8004658:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800465a:	2300      	movs	r3, #0
 800465c:	603b      	str	r3, [r7, #0]
 800465e:	4b20      	ldr	r3, [pc, #128]	; (80046e0 <HAL_PWREx_EnableOverDrive+0x90>)
 8004660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004662:	4a1f      	ldr	r2, [pc, #124]	; (80046e0 <HAL_PWREx_EnableOverDrive+0x90>)
 8004664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004668:	6413      	str	r3, [r2, #64]	; 0x40
 800466a:	4b1d      	ldr	r3, [pc, #116]	; (80046e0 <HAL_PWREx_EnableOverDrive+0x90>)
 800466c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004672:	603b      	str	r3, [r7, #0]
 8004674:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004676:	4b1b      	ldr	r3, [pc, #108]	; (80046e4 <HAL_PWREx_EnableOverDrive+0x94>)
 8004678:	2201      	movs	r2, #1
 800467a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800467c:	f7fe fbfe 	bl	8002e7c <HAL_GetTick>
 8004680:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004682:	e009      	b.n	8004698 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004684:	f7fe fbfa 	bl	8002e7c <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004692:	d901      	bls.n	8004698 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004694:	2303      	movs	r3, #3
 8004696:	e01f      	b.n	80046d8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004698:	4b13      	ldr	r3, [pc, #76]	; (80046e8 <HAL_PWREx_EnableOverDrive+0x98>)
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046a4:	d1ee      	bne.n	8004684 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80046a6:	4b11      	ldr	r3, [pc, #68]	; (80046ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80046a8:	2201      	movs	r2, #1
 80046aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80046ac:	f7fe fbe6 	bl	8002e7c <HAL_GetTick>
 80046b0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80046b2:	e009      	b.n	80046c8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80046b4:	f7fe fbe2 	bl	8002e7c <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046c2:	d901      	bls.n	80046c8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80046c4:	2303      	movs	r3, #3
 80046c6:	e007      	b.n	80046d8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80046c8:	4b07      	ldr	r3, [pc, #28]	; (80046e8 <HAL_PWREx_EnableOverDrive+0x98>)
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80046d4:	d1ee      	bne.n	80046b4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80046d6:	2300      	movs	r3, #0
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3708      	adds	r7, #8
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	40023800 	.word	0x40023800
 80046e4:	420e0040 	.word	0x420e0040
 80046e8:	40007000 	.word	0x40007000
 80046ec:	420e0044 	.word	0x420e0044

080046f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b086      	sub	sp, #24
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d101      	bne.n	8004702 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e25e      	b.n	8004bc0 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0301 	and.w	r3, r3, #1
 800470a:	2b00      	cmp	r3, #0
 800470c:	d075      	beq.n	80047fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800470e:	4b88      	ldr	r3, [pc, #544]	; (8004930 <HAL_RCC_OscConfig+0x240>)
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	f003 030c 	and.w	r3, r3, #12
 8004716:	2b04      	cmp	r3, #4
 8004718:	d00c      	beq.n	8004734 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800471a:	4b85      	ldr	r3, [pc, #532]	; (8004930 <HAL_RCC_OscConfig+0x240>)
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004722:	2b08      	cmp	r3, #8
 8004724:	d112      	bne.n	800474c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004726:	4b82      	ldr	r3, [pc, #520]	; (8004930 <HAL_RCC_OscConfig+0x240>)
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800472e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004732:	d10b      	bne.n	800474c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004734:	4b7e      	ldr	r3, [pc, #504]	; (8004930 <HAL_RCC_OscConfig+0x240>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d05b      	beq.n	80047f8 <HAL_RCC_OscConfig+0x108>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d157      	bne.n	80047f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e239      	b.n	8004bc0 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004754:	d106      	bne.n	8004764 <HAL_RCC_OscConfig+0x74>
 8004756:	4b76      	ldr	r3, [pc, #472]	; (8004930 <HAL_RCC_OscConfig+0x240>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a75      	ldr	r2, [pc, #468]	; (8004930 <HAL_RCC_OscConfig+0x240>)
 800475c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004760:	6013      	str	r3, [r2, #0]
 8004762:	e01d      	b.n	80047a0 <HAL_RCC_OscConfig+0xb0>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800476c:	d10c      	bne.n	8004788 <HAL_RCC_OscConfig+0x98>
 800476e:	4b70      	ldr	r3, [pc, #448]	; (8004930 <HAL_RCC_OscConfig+0x240>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a6f      	ldr	r2, [pc, #444]	; (8004930 <HAL_RCC_OscConfig+0x240>)
 8004774:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004778:	6013      	str	r3, [r2, #0]
 800477a:	4b6d      	ldr	r3, [pc, #436]	; (8004930 <HAL_RCC_OscConfig+0x240>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a6c      	ldr	r2, [pc, #432]	; (8004930 <HAL_RCC_OscConfig+0x240>)
 8004780:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004784:	6013      	str	r3, [r2, #0]
 8004786:	e00b      	b.n	80047a0 <HAL_RCC_OscConfig+0xb0>
 8004788:	4b69      	ldr	r3, [pc, #420]	; (8004930 <HAL_RCC_OscConfig+0x240>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a68      	ldr	r2, [pc, #416]	; (8004930 <HAL_RCC_OscConfig+0x240>)
 800478e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004792:	6013      	str	r3, [r2, #0]
 8004794:	4b66      	ldr	r3, [pc, #408]	; (8004930 <HAL_RCC_OscConfig+0x240>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a65      	ldr	r2, [pc, #404]	; (8004930 <HAL_RCC_OscConfig+0x240>)
 800479a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800479e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d013      	beq.n	80047d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047a8:	f7fe fb68 	bl	8002e7c <HAL_GetTick>
 80047ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047ae:	e008      	b.n	80047c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047b0:	f7fe fb64 	bl	8002e7c <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	2b64      	cmp	r3, #100	; 0x64
 80047bc:	d901      	bls.n	80047c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e1fe      	b.n	8004bc0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047c2:	4b5b      	ldr	r3, [pc, #364]	; (8004930 <HAL_RCC_OscConfig+0x240>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d0f0      	beq.n	80047b0 <HAL_RCC_OscConfig+0xc0>
 80047ce:	e014      	b.n	80047fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047d0:	f7fe fb54 	bl	8002e7c <HAL_GetTick>
 80047d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047d6:	e008      	b.n	80047ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047d8:	f7fe fb50 	bl	8002e7c <HAL_GetTick>
 80047dc:	4602      	mov	r2, r0
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	2b64      	cmp	r3, #100	; 0x64
 80047e4:	d901      	bls.n	80047ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e1ea      	b.n	8004bc0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047ea:	4b51      	ldr	r3, [pc, #324]	; (8004930 <HAL_RCC_OscConfig+0x240>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d1f0      	bne.n	80047d8 <HAL_RCC_OscConfig+0xe8>
 80047f6:	e000      	b.n	80047fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 0302 	and.w	r3, r3, #2
 8004802:	2b00      	cmp	r3, #0
 8004804:	d063      	beq.n	80048ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004806:	4b4a      	ldr	r3, [pc, #296]	; (8004930 <HAL_RCC_OscConfig+0x240>)
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	f003 030c 	and.w	r3, r3, #12
 800480e:	2b00      	cmp	r3, #0
 8004810:	d00b      	beq.n	800482a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004812:	4b47      	ldr	r3, [pc, #284]	; (8004930 <HAL_RCC_OscConfig+0x240>)
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800481a:	2b08      	cmp	r3, #8
 800481c:	d11c      	bne.n	8004858 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800481e:	4b44      	ldr	r3, [pc, #272]	; (8004930 <HAL_RCC_OscConfig+0x240>)
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d116      	bne.n	8004858 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800482a:	4b41      	ldr	r3, [pc, #260]	; (8004930 <HAL_RCC_OscConfig+0x240>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0302 	and.w	r3, r3, #2
 8004832:	2b00      	cmp	r3, #0
 8004834:	d005      	beq.n	8004842 <HAL_RCC_OscConfig+0x152>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	2b01      	cmp	r3, #1
 800483c:	d001      	beq.n	8004842 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e1be      	b.n	8004bc0 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004842:	4b3b      	ldr	r3, [pc, #236]	; (8004930 <HAL_RCC_OscConfig+0x240>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	00db      	lsls	r3, r3, #3
 8004850:	4937      	ldr	r1, [pc, #220]	; (8004930 <HAL_RCC_OscConfig+0x240>)
 8004852:	4313      	orrs	r3, r2
 8004854:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004856:	e03a      	b.n	80048ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d020      	beq.n	80048a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004860:	4b34      	ldr	r3, [pc, #208]	; (8004934 <HAL_RCC_OscConfig+0x244>)
 8004862:	2201      	movs	r2, #1
 8004864:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004866:	f7fe fb09 	bl	8002e7c <HAL_GetTick>
 800486a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800486c:	e008      	b.n	8004880 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800486e:	f7fe fb05 	bl	8002e7c <HAL_GetTick>
 8004872:	4602      	mov	r2, r0
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	2b02      	cmp	r3, #2
 800487a:	d901      	bls.n	8004880 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800487c:	2303      	movs	r3, #3
 800487e:	e19f      	b.n	8004bc0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004880:	4b2b      	ldr	r3, [pc, #172]	; (8004930 <HAL_RCC_OscConfig+0x240>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 0302 	and.w	r3, r3, #2
 8004888:	2b00      	cmp	r3, #0
 800488a:	d0f0      	beq.n	800486e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800488c:	4b28      	ldr	r3, [pc, #160]	; (8004930 <HAL_RCC_OscConfig+0x240>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	691b      	ldr	r3, [r3, #16]
 8004898:	00db      	lsls	r3, r3, #3
 800489a:	4925      	ldr	r1, [pc, #148]	; (8004930 <HAL_RCC_OscConfig+0x240>)
 800489c:	4313      	orrs	r3, r2
 800489e:	600b      	str	r3, [r1, #0]
 80048a0:	e015      	b.n	80048ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048a2:	4b24      	ldr	r3, [pc, #144]	; (8004934 <HAL_RCC_OscConfig+0x244>)
 80048a4:	2200      	movs	r2, #0
 80048a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048a8:	f7fe fae8 	bl	8002e7c <HAL_GetTick>
 80048ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048ae:	e008      	b.n	80048c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048b0:	f7fe fae4 	bl	8002e7c <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d901      	bls.n	80048c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e17e      	b.n	8004bc0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048c2:	4b1b      	ldr	r3, [pc, #108]	; (8004930 <HAL_RCC_OscConfig+0x240>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0302 	and.w	r3, r3, #2
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d1f0      	bne.n	80048b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0308 	and.w	r3, r3, #8
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d036      	beq.n	8004948 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	695b      	ldr	r3, [r3, #20]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d016      	beq.n	8004910 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048e2:	4b15      	ldr	r3, [pc, #84]	; (8004938 <HAL_RCC_OscConfig+0x248>)
 80048e4:	2201      	movs	r2, #1
 80048e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048e8:	f7fe fac8 	bl	8002e7c <HAL_GetTick>
 80048ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048ee:	e008      	b.n	8004902 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048f0:	f7fe fac4 	bl	8002e7c <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d901      	bls.n	8004902 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e15e      	b.n	8004bc0 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004902:	4b0b      	ldr	r3, [pc, #44]	; (8004930 <HAL_RCC_OscConfig+0x240>)
 8004904:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004906:	f003 0302 	and.w	r3, r3, #2
 800490a:	2b00      	cmp	r3, #0
 800490c:	d0f0      	beq.n	80048f0 <HAL_RCC_OscConfig+0x200>
 800490e:	e01b      	b.n	8004948 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004910:	4b09      	ldr	r3, [pc, #36]	; (8004938 <HAL_RCC_OscConfig+0x248>)
 8004912:	2200      	movs	r2, #0
 8004914:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004916:	f7fe fab1 	bl	8002e7c <HAL_GetTick>
 800491a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800491c:	e00e      	b.n	800493c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800491e:	f7fe faad 	bl	8002e7c <HAL_GetTick>
 8004922:	4602      	mov	r2, r0
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	2b02      	cmp	r3, #2
 800492a:	d907      	bls.n	800493c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800492c:	2303      	movs	r3, #3
 800492e:	e147      	b.n	8004bc0 <HAL_RCC_OscConfig+0x4d0>
 8004930:	40023800 	.word	0x40023800
 8004934:	42470000 	.word	0x42470000
 8004938:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800493c:	4b88      	ldr	r3, [pc, #544]	; (8004b60 <HAL_RCC_OscConfig+0x470>)
 800493e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004940:	f003 0302 	and.w	r3, r3, #2
 8004944:	2b00      	cmp	r3, #0
 8004946:	d1ea      	bne.n	800491e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 0304 	and.w	r3, r3, #4
 8004950:	2b00      	cmp	r3, #0
 8004952:	f000 8097 	beq.w	8004a84 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004956:	2300      	movs	r3, #0
 8004958:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800495a:	4b81      	ldr	r3, [pc, #516]	; (8004b60 <HAL_RCC_OscConfig+0x470>)
 800495c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d10f      	bne.n	8004986 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004966:	2300      	movs	r3, #0
 8004968:	60bb      	str	r3, [r7, #8]
 800496a:	4b7d      	ldr	r3, [pc, #500]	; (8004b60 <HAL_RCC_OscConfig+0x470>)
 800496c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496e:	4a7c      	ldr	r2, [pc, #496]	; (8004b60 <HAL_RCC_OscConfig+0x470>)
 8004970:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004974:	6413      	str	r3, [r2, #64]	; 0x40
 8004976:	4b7a      	ldr	r3, [pc, #488]	; (8004b60 <HAL_RCC_OscConfig+0x470>)
 8004978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800497e:	60bb      	str	r3, [r7, #8]
 8004980:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004982:	2301      	movs	r3, #1
 8004984:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004986:	4b77      	ldr	r3, [pc, #476]	; (8004b64 <HAL_RCC_OscConfig+0x474>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800498e:	2b00      	cmp	r3, #0
 8004990:	d118      	bne.n	80049c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004992:	4b74      	ldr	r3, [pc, #464]	; (8004b64 <HAL_RCC_OscConfig+0x474>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a73      	ldr	r2, [pc, #460]	; (8004b64 <HAL_RCC_OscConfig+0x474>)
 8004998:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800499c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800499e:	f7fe fa6d 	bl	8002e7c <HAL_GetTick>
 80049a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049a4:	e008      	b.n	80049b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049a6:	f7fe fa69 	bl	8002e7c <HAL_GetTick>
 80049aa:	4602      	mov	r2, r0
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	1ad3      	subs	r3, r2, r3
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	d901      	bls.n	80049b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80049b4:	2303      	movs	r3, #3
 80049b6:	e103      	b.n	8004bc0 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049b8:	4b6a      	ldr	r3, [pc, #424]	; (8004b64 <HAL_RCC_OscConfig+0x474>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d0f0      	beq.n	80049a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d106      	bne.n	80049da <HAL_RCC_OscConfig+0x2ea>
 80049cc:	4b64      	ldr	r3, [pc, #400]	; (8004b60 <HAL_RCC_OscConfig+0x470>)
 80049ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049d0:	4a63      	ldr	r2, [pc, #396]	; (8004b60 <HAL_RCC_OscConfig+0x470>)
 80049d2:	f043 0301 	orr.w	r3, r3, #1
 80049d6:	6713      	str	r3, [r2, #112]	; 0x70
 80049d8:	e01c      	b.n	8004a14 <HAL_RCC_OscConfig+0x324>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	2b05      	cmp	r3, #5
 80049e0:	d10c      	bne.n	80049fc <HAL_RCC_OscConfig+0x30c>
 80049e2:	4b5f      	ldr	r3, [pc, #380]	; (8004b60 <HAL_RCC_OscConfig+0x470>)
 80049e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049e6:	4a5e      	ldr	r2, [pc, #376]	; (8004b60 <HAL_RCC_OscConfig+0x470>)
 80049e8:	f043 0304 	orr.w	r3, r3, #4
 80049ec:	6713      	str	r3, [r2, #112]	; 0x70
 80049ee:	4b5c      	ldr	r3, [pc, #368]	; (8004b60 <HAL_RCC_OscConfig+0x470>)
 80049f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049f2:	4a5b      	ldr	r2, [pc, #364]	; (8004b60 <HAL_RCC_OscConfig+0x470>)
 80049f4:	f043 0301 	orr.w	r3, r3, #1
 80049f8:	6713      	str	r3, [r2, #112]	; 0x70
 80049fa:	e00b      	b.n	8004a14 <HAL_RCC_OscConfig+0x324>
 80049fc:	4b58      	ldr	r3, [pc, #352]	; (8004b60 <HAL_RCC_OscConfig+0x470>)
 80049fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a00:	4a57      	ldr	r2, [pc, #348]	; (8004b60 <HAL_RCC_OscConfig+0x470>)
 8004a02:	f023 0301 	bic.w	r3, r3, #1
 8004a06:	6713      	str	r3, [r2, #112]	; 0x70
 8004a08:	4b55      	ldr	r3, [pc, #340]	; (8004b60 <HAL_RCC_OscConfig+0x470>)
 8004a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a0c:	4a54      	ldr	r2, [pc, #336]	; (8004b60 <HAL_RCC_OscConfig+0x470>)
 8004a0e:	f023 0304 	bic.w	r3, r3, #4
 8004a12:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d015      	beq.n	8004a48 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a1c:	f7fe fa2e 	bl	8002e7c <HAL_GetTick>
 8004a20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a22:	e00a      	b.n	8004a3a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a24:	f7fe fa2a 	bl	8002e7c <HAL_GetTick>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d901      	bls.n	8004a3a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	e0c2      	b.n	8004bc0 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a3a:	4b49      	ldr	r3, [pc, #292]	; (8004b60 <HAL_RCC_OscConfig+0x470>)
 8004a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a3e:	f003 0302 	and.w	r3, r3, #2
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d0ee      	beq.n	8004a24 <HAL_RCC_OscConfig+0x334>
 8004a46:	e014      	b.n	8004a72 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a48:	f7fe fa18 	bl	8002e7c <HAL_GetTick>
 8004a4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a4e:	e00a      	b.n	8004a66 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a50:	f7fe fa14 	bl	8002e7c <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d901      	bls.n	8004a66 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	e0ac      	b.n	8004bc0 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a66:	4b3e      	ldr	r3, [pc, #248]	; (8004b60 <HAL_RCC_OscConfig+0x470>)
 8004a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a6a:	f003 0302 	and.w	r3, r3, #2
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d1ee      	bne.n	8004a50 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a72:	7dfb      	ldrb	r3, [r7, #23]
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d105      	bne.n	8004a84 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a78:	4b39      	ldr	r3, [pc, #228]	; (8004b60 <HAL_RCC_OscConfig+0x470>)
 8004a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7c:	4a38      	ldr	r2, [pc, #224]	; (8004b60 <HAL_RCC_OscConfig+0x470>)
 8004a7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a82:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	699b      	ldr	r3, [r3, #24]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	f000 8098 	beq.w	8004bbe <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a8e:	4b34      	ldr	r3, [pc, #208]	; (8004b60 <HAL_RCC_OscConfig+0x470>)
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	f003 030c 	and.w	r3, r3, #12
 8004a96:	2b08      	cmp	r3, #8
 8004a98:	d05c      	beq.n	8004b54 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	699b      	ldr	r3, [r3, #24]
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d141      	bne.n	8004b26 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aa2:	4b31      	ldr	r3, [pc, #196]	; (8004b68 <HAL_RCC_OscConfig+0x478>)
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aa8:	f7fe f9e8 	bl	8002e7c <HAL_GetTick>
 8004aac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aae:	e008      	b.n	8004ac2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ab0:	f7fe f9e4 	bl	8002e7c <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d901      	bls.n	8004ac2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e07e      	b.n	8004bc0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ac2:	4b27      	ldr	r3, [pc, #156]	; (8004b60 <HAL_RCC_OscConfig+0x470>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d1f0      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	69da      	ldr	r2, [r3, #28]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a1b      	ldr	r3, [r3, #32]
 8004ad6:	431a      	orrs	r2, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004adc:	019b      	lsls	r3, r3, #6
 8004ade:	431a      	orrs	r2, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae4:	085b      	lsrs	r3, r3, #1
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	041b      	lsls	r3, r3, #16
 8004aea:	431a      	orrs	r2, r3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af0:	061b      	lsls	r3, r3, #24
 8004af2:	491b      	ldr	r1, [pc, #108]	; (8004b60 <HAL_RCC_OscConfig+0x470>)
 8004af4:	4313      	orrs	r3, r2
 8004af6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004af8:	4b1b      	ldr	r3, [pc, #108]	; (8004b68 <HAL_RCC_OscConfig+0x478>)
 8004afa:	2201      	movs	r2, #1
 8004afc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004afe:	f7fe f9bd 	bl	8002e7c <HAL_GetTick>
 8004b02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b04:	e008      	b.n	8004b18 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b06:	f7fe f9b9 	bl	8002e7c <HAL_GetTick>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	2b02      	cmp	r3, #2
 8004b12:	d901      	bls.n	8004b18 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004b14:	2303      	movs	r3, #3
 8004b16:	e053      	b.n	8004bc0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b18:	4b11      	ldr	r3, [pc, #68]	; (8004b60 <HAL_RCC_OscConfig+0x470>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d0f0      	beq.n	8004b06 <HAL_RCC_OscConfig+0x416>
 8004b24:	e04b      	b.n	8004bbe <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b26:	4b10      	ldr	r3, [pc, #64]	; (8004b68 <HAL_RCC_OscConfig+0x478>)
 8004b28:	2200      	movs	r2, #0
 8004b2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b2c:	f7fe f9a6 	bl	8002e7c <HAL_GetTick>
 8004b30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b32:	e008      	b.n	8004b46 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b34:	f7fe f9a2 	bl	8002e7c <HAL_GetTick>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	d901      	bls.n	8004b46 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	e03c      	b.n	8004bc0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b46:	4b06      	ldr	r3, [pc, #24]	; (8004b60 <HAL_RCC_OscConfig+0x470>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d1f0      	bne.n	8004b34 <HAL_RCC_OscConfig+0x444>
 8004b52:	e034      	b.n	8004bbe <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	699b      	ldr	r3, [r3, #24]
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d107      	bne.n	8004b6c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e02f      	b.n	8004bc0 <HAL_RCC_OscConfig+0x4d0>
 8004b60:	40023800 	.word	0x40023800
 8004b64:	40007000 	.word	0x40007000
 8004b68:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b6c:	4b16      	ldr	r3, [pc, #88]	; (8004bc8 <HAL_RCC_OscConfig+0x4d8>)
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	69db      	ldr	r3, [r3, #28]
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d11c      	bne.n	8004bba <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d115      	bne.n	8004bba <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004b8e:	68fa      	ldr	r2, [r7, #12]
 8004b90:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b94:	4013      	ands	r3, r2
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d10d      	bne.n	8004bba <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d106      	bne.n	8004bba <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d001      	beq.n	8004bbe <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e000      	b.n	8004bc0 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 8004bbe:	2300      	movs	r3, #0
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3718      	adds	r7, #24
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	40023800 	.word	0x40023800

08004bcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d101      	bne.n	8004be0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e0cc      	b.n	8004d7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004be0:	4b68      	ldr	r3, [pc, #416]	; (8004d84 <HAL_RCC_ClockConfig+0x1b8>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 030f 	and.w	r3, r3, #15
 8004be8:	683a      	ldr	r2, [r7, #0]
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d90c      	bls.n	8004c08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bee:	4b65      	ldr	r3, [pc, #404]	; (8004d84 <HAL_RCC_ClockConfig+0x1b8>)
 8004bf0:	683a      	ldr	r2, [r7, #0]
 8004bf2:	b2d2      	uxtb	r2, r2
 8004bf4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bf6:	4b63      	ldr	r3, [pc, #396]	; (8004d84 <HAL_RCC_ClockConfig+0x1b8>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 030f 	and.w	r3, r3, #15
 8004bfe:	683a      	ldr	r2, [r7, #0]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d001      	beq.n	8004c08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e0b8      	b.n	8004d7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0302 	and.w	r3, r3, #2
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d020      	beq.n	8004c56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0304 	and.w	r3, r3, #4
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d005      	beq.n	8004c2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c20:	4b59      	ldr	r3, [pc, #356]	; (8004d88 <HAL_RCC_ClockConfig+0x1bc>)
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	4a58      	ldr	r2, [pc, #352]	; (8004d88 <HAL_RCC_ClockConfig+0x1bc>)
 8004c26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004c2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0308 	and.w	r3, r3, #8
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d005      	beq.n	8004c44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c38:	4b53      	ldr	r3, [pc, #332]	; (8004d88 <HAL_RCC_ClockConfig+0x1bc>)
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	4a52      	ldr	r2, [pc, #328]	; (8004d88 <HAL_RCC_ClockConfig+0x1bc>)
 8004c3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c44:	4b50      	ldr	r3, [pc, #320]	; (8004d88 <HAL_RCC_ClockConfig+0x1bc>)
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	494d      	ldr	r1, [pc, #308]	; (8004d88 <HAL_RCC_ClockConfig+0x1bc>)
 8004c52:	4313      	orrs	r3, r2
 8004c54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 0301 	and.w	r3, r3, #1
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d044      	beq.n	8004cec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d107      	bne.n	8004c7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c6a:	4b47      	ldr	r3, [pc, #284]	; (8004d88 <HAL_RCC_ClockConfig+0x1bc>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d119      	bne.n	8004caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e07f      	b.n	8004d7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	2b02      	cmp	r3, #2
 8004c80:	d003      	beq.n	8004c8a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c86:	2b03      	cmp	r3, #3
 8004c88:	d107      	bne.n	8004c9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c8a:	4b3f      	ldr	r3, [pc, #252]	; (8004d88 <HAL_RCC_ClockConfig+0x1bc>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d109      	bne.n	8004caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e06f      	b.n	8004d7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c9a:	4b3b      	ldr	r3, [pc, #236]	; (8004d88 <HAL_RCC_ClockConfig+0x1bc>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0302 	and.w	r3, r3, #2
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d101      	bne.n	8004caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e067      	b.n	8004d7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004caa:	4b37      	ldr	r3, [pc, #220]	; (8004d88 <HAL_RCC_ClockConfig+0x1bc>)
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f023 0203 	bic.w	r2, r3, #3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	4934      	ldr	r1, [pc, #208]	; (8004d88 <HAL_RCC_ClockConfig+0x1bc>)
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004cbc:	f7fe f8de 	bl	8002e7c <HAL_GetTick>
 8004cc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cc2:	e00a      	b.n	8004cda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cc4:	f7fe f8da 	bl	8002e7c <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d901      	bls.n	8004cda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e04f      	b.n	8004d7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cda:	4b2b      	ldr	r3, [pc, #172]	; (8004d88 <HAL_RCC_ClockConfig+0x1bc>)
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	f003 020c 	and.w	r2, r3, #12
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d1eb      	bne.n	8004cc4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004cec:	4b25      	ldr	r3, [pc, #148]	; (8004d84 <HAL_RCC_ClockConfig+0x1b8>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 030f 	and.w	r3, r3, #15
 8004cf4:	683a      	ldr	r2, [r7, #0]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d20c      	bcs.n	8004d14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cfa:	4b22      	ldr	r3, [pc, #136]	; (8004d84 <HAL_RCC_ClockConfig+0x1b8>)
 8004cfc:	683a      	ldr	r2, [r7, #0]
 8004cfe:	b2d2      	uxtb	r2, r2
 8004d00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d02:	4b20      	ldr	r3, [pc, #128]	; (8004d84 <HAL_RCC_ClockConfig+0x1b8>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 030f 	and.w	r3, r3, #15
 8004d0a:	683a      	ldr	r2, [r7, #0]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d001      	beq.n	8004d14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	e032      	b.n	8004d7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0304 	and.w	r3, r3, #4
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d008      	beq.n	8004d32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d20:	4b19      	ldr	r3, [pc, #100]	; (8004d88 <HAL_RCC_ClockConfig+0x1bc>)
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	4916      	ldr	r1, [pc, #88]	; (8004d88 <HAL_RCC_ClockConfig+0x1bc>)
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 0308 	and.w	r3, r3, #8
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d009      	beq.n	8004d52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d3e:	4b12      	ldr	r3, [pc, #72]	; (8004d88 <HAL_RCC_ClockConfig+0x1bc>)
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	691b      	ldr	r3, [r3, #16]
 8004d4a:	00db      	lsls	r3, r3, #3
 8004d4c:	490e      	ldr	r1, [pc, #56]	; (8004d88 <HAL_RCC_ClockConfig+0x1bc>)
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d52:	f000 f821 	bl	8004d98 <HAL_RCC_GetSysClockFreq>
 8004d56:	4602      	mov	r2, r0
 8004d58:	4b0b      	ldr	r3, [pc, #44]	; (8004d88 <HAL_RCC_ClockConfig+0x1bc>)
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	091b      	lsrs	r3, r3, #4
 8004d5e:	f003 030f 	and.w	r3, r3, #15
 8004d62:	490a      	ldr	r1, [pc, #40]	; (8004d8c <HAL_RCC_ClockConfig+0x1c0>)
 8004d64:	5ccb      	ldrb	r3, [r1, r3]
 8004d66:	fa22 f303 	lsr.w	r3, r2, r3
 8004d6a:	4a09      	ldr	r2, [pc, #36]	; (8004d90 <HAL_RCC_ClockConfig+0x1c4>)
 8004d6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004d6e:	4b09      	ldr	r3, [pc, #36]	; (8004d94 <HAL_RCC_ClockConfig+0x1c8>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4618      	mov	r0, r3
 8004d74:	f7fe f83e 	bl	8002df4 <HAL_InitTick>

  return HAL_OK;
 8004d78:	2300      	movs	r3, #0
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3710      	adds	r7, #16
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	40023c00 	.word	0x40023c00
 8004d88:	40023800 	.word	0x40023800
 8004d8c:	08007864 	.word	0x08007864
 8004d90:	20000004 	.word	0x20000004
 8004d94:	20000008 	.word	0x20000008

08004d98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d9c:	b094      	sub	sp, #80	; 0x50
 8004d9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004da0:	2300      	movs	r3, #0
 8004da2:	647b      	str	r3, [r7, #68]	; 0x44
 8004da4:	2300      	movs	r3, #0
 8004da6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004da8:	2300      	movs	r3, #0
 8004daa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004dac:	2300      	movs	r3, #0
 8004dae:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004db0:	4b79      	ldr	r3, [pc, #484]	; (8004f98 <HAL_RCC_GetSysClockFreq+0x200>)
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	f003 030c 	and.w	r3, r3, #12
 8004db8:	2b08      	cmp	r3, #8
 8004dba:	d00d      	beq.n	8004dd8 <HAL_RCC_GetSysClockFreq+0x40>
 8004dbc:	2b08      	cmp	r3, #8
 8004dbe:	f200 80e1 	bhi.w	8004f84 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d002      	beq.n	8004dcc <HAL_RCC_GetSysClockFreq+0x34>
 8004dc6:	2b04      	cmp	r3, #4
 8004dc8:	d003      	beq.n	8004dd2 <HAL_RCC_GetSysClockFreq+0x3a>
 8004dca:	e0db      	b.n	8004f84 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004dcc:	4b73      	ldr	r3, [pc, #460]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x204>)
 8004dce:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004dd0:	e0db      	b.n	8004f8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004dd2:	4b73      	ldr	r3, [pc, #460]	; (8004fa0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004dd4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004dd6:	e0d8      	b.n	8004f8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004dd8:	4b6f      	ldr	r3, [pc, #444]	; (8004f98 <HAL_RCC_GetSysClockFreq+0x200>)
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004de0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004de2:	4b6d      	ldr	r3, [pc, #436]	; (8004f98 <HAL_RCC_GetSysClockFreq+0x200>)
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d063      	beq.n	8004eb6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dee:	4b6a      	ldr	r3, [pc, #424]	; (8004f98 <HAL_RCC_GetSysClockFreq+0x200>)
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	099b      	lsrs	r3, r3, #6
 8004df4:	2200      	movs	r2, #0
 8004df6:	63bb      	str	r3, [r7, #56]	; 0x38
 8004df8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e00:	633b      	str	r3, [r7, #48]	; 0x30
 8004e02:	2300      	movs	r3, #0
 8004e04:	637b      	str	r3, [r7, #52]	; 0x34
 8004e06:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004e0a:	4622      	mov	r2, r4
 8004e0c:	462b      	mov	r3, r5
 8004e0e:	f04f 0000 	mov.w	r0, #0
 8004e12:	f04f 0100 	mov.w	r1, #0
 8004e16:	0159      	lsls	r1, r3, #5
 8004e18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e1c:	0150      	lsls	r0, r2, #5
 8004e1e:	4602      	mov	r2, r0
 8004e20:	460b      	mov	r3, r1
 8004e22:	4621      	mov	r1, r4
 8004e24:	1a51      	subs	r1, r2, r1
 8004e26:	6139      	str	r1, [r7, #16]
 8004e28:	4629      	mov	r1, r5
 8004e2a:	eb63 0301 	sbc.w	r3, r3, r1
 8004e2e:	617b      	str	r3, [r7, #20]
 8004e30:	f04f 0200 	mov.w	r2, #0
 8004e34:	f04f 0300 	mov.w	r3, #0
 8004e38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e3c:	4659      	mov	r1, fp
 8004e3e:	018b      	lsls	r3, r1, #6
 8004e40:	4651      	mov	r1, sl
 8004e42:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e46:	4651      	mov	r1, sl
 8004e48:	018a      	lsls	r2, r1, #6
 8004e4a:	4651      	mov	r1, sl
 8004e4c:	ebb2 0801 	subs.w	r8, r2, r1
 8004e50:	4659      	mov	r1, fp
 8004e52:	eb63 0901 	sbc.w	r9, r3, r1
 8004e56:	f04f 0200 	mov.w	r2, #0
 8004e5a:	f04f 0300 	mov.w	r3, #0
 8004e5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e6a:	4690      	mov	r8, r2
 8004e6c:	4699      	mov	r9, r3
 8004e6e:	4623      	mov	r3, r4
 8004e70:	eb18 0303 	adds.w	r3, r8, r3
 8004e74:	60bb      	str	r3, [r7, #8]
 8004e76:	462b      	mov	r3, r5
 8004e78:	eb49 0303 	adc.w	r3, r9, r3
 8004e7c:	60fb      	str	r3, [r7, #12]
 8004e7e:	f04f 0200 	mov.w	r2, #0
 8004e82:	f04f 0300 	mov.w	r3, #0
 8004e86:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004e8a:	4629      	mov	r1, r5
 8004e8c:	024b      	lsls	r3, r1, #9
 8004e8e:	4621      	mov	r1, r4
 8004e90:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004e94:	4621      	mov	r1, r4
 8004e96:	024a      	lsls	r2, r1, #9
 8004e98:	4610      	mov	r0, r2
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ea2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ea4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ea8:	f7fb fdc0 	bl	8000a2c <__aeabi_uldivmod>
 8004eac:	4602      	mov	r2, r0
 8004eae:	460b      	mov	r3, r1
 8004eb0:	4613      	mov	r3, r2
 8004eb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004eb4:	e058      	b.n	8004f68 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004eb6:	4b38      	ldr	r3, [pc, #224]	; (8004f98 <HAL_RCC_GetSysClockFreq+0x200>)
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	099b      	lsrs	r3, r3, #6
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	4611      	mov	r1, r2
 8004ec2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004ec6:	623b      	str	r3, [r7, #32]
 8004ec8:	2300      	movs	r3, #0
 8004eca:	627b      	str	r3, [r7, #36]	; 0x24
 8004ecc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004ed0:	4642      	mov	r2, r8
 8004ed2:	464b      	mov	r3, r9
 8004ed4:	f04f 0000 	mov.w	r0, #0
 8004ed8:	f04f 0100 	mov.w	r1, #0
 8004edc:	0159      	lsls	r1, r3, #5
 8004ede:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ee2:	0150      	lsls	r0, r2, #5
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	460b      	mov	r3, r1
 8004ee8:	4641      	mov	r1, r8
 8004eea:	ebb2 0a01 	subs.w	sl, r2, r1
 8004eee:	4649      	mov	r1, r9
 8004ef0:	eb63 0b01 	sbc.w	fp, r3, r1
 8004ef4:	f04f 0200 	mov.w	r2, #0
 8004ef8:	f04f 0300 	mov.w	r3, #0
 8004efc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004f00:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004f04:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004f08:	ebb2 040a 	subs.w	r4, r2, sl
 8004f0c:	eb63 050b 	sbc.w	r5, r3, fp
 8004f10:	f04f 0200 	mov.w	r2, #0
 8004f14:	f04f 0300 	mov.w	r3, #0
 8004f18:	00eb      	lsls	r3, r5, #3
 8004f1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f1e:	00e2      	lsls	r2, r4, #3
 8004f20:	4614      	mov	r4, r2
 8004f22:	461d      	mov	r5, r3
 8004f24:	4643      	mov	r3, r8
 8004f26:	18e3      	adds	r3, r4, r3
 8004f28:	603b      	str	r3, [r7, #0]
 8004f2a:	464b      	mov	r3, r9
 8004f2c:	eb45 0303 	adc.w	r3, r5, r3
 8004f30:	607b      	str	r3, [r7, #4]
 8004f32:	f04f 0200 	mov.w	r2, #0
 8004f36:	f04f 0300 	mov.w	r3, #0
 8004f3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f3e:	4629      	mov	r1, r5
 8004f40:	028b      	lsls	r3, r1, #10
 8004f42:	4621      	mov	r1, r4
 8004f44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f48:	4621      	mov	r1, r4
 8004f4a:	028a      	lsls	r2, r1, #10
 8004f4c:	4610      	mov	r0, r2
 8004f4e:	4619      	mov	r1, r3
 8004f50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f52:	2200      	movs	r2, #0
 8004f54:	61bb      	str	r3, [r7, #24]
 8004f56:	61fa      	str	r2, [r7, #28]
 8004f58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f5c:	f7fb fd66 	bl	8000a2c <__aeabi_uldivmod>
 8004f60:	4602      	mov	r2, r0
 8004f62:	460b      	mov	r3, r1
 8004f64:	4613      	mov	r3, r2
 8004f66:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004f68:	4b0b      	ldr	r3, [pc, #44]	; (8004f98 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	0c1b      	lsrs	r3, r3, #16
 8004f6e:	f003 0303 	and.w	r3, r3, #3
 8004f72:	3301      	adds	r3, #1
 8004f74:	005b      	lsls	r3, r3, #1
 8004f76:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004f78:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f80:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f82:	e002      	b.n	8004f8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f84:	4b05      	ldr	r3, [pc, #20]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x204>)
 8004f86:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3750      	adds	r7, #80	; 0x50
 8004f90:	46bd      	mov	sp, r7
 8004f92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f96:	bf00      	nop
 8004f98:	40023800 	.word	0x40023800
 8004f9c:	00f42400 	.word	0x00f42400
 8004fa0:	007a1200 	.word	0x007a1200

08004fa4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fa8:	4b03      	ldr	r3, [pc, #12]	; (8004fb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004faa:	681b      	ldr	r3, [r3, #0]
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr
 8004fb6:	bf00      	nop
 8004fb8:	20000004 	.word	0x20000004

08004fbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004fc0:	f7ff fff0 	bl	8004fa4 <HAL_RCC_GetHCLKFreq>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	4b05      	ldr	r3, [pc, #20]	; (8004fdc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	0a9b      	lsrs	r3, r3, #10
 8004fcc:	f003 0307 	and.w	r3, r3, #7
 8004fd0:	4903      	ldr	r1, [pc, #12]	; (8004fe0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fd2:	5ccb      	ldrb	r3, [r1, r3]
 8004fd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	bd80      	pop	{r7, pc}
 8004fdc:	40023800 	.word	0x40023800
 8004fe0:	08007874 	.word	0x08007874

08004fe4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004fe8:	f7ff ffdc 	bl	8004fa4 <HAL_RCC_GetHCLKFreq>
 8004fec:	4602      	mov	r2, r0
 8004fee:	4b05      	ldr	r3, [pc, #20]	; (8005004 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	0b5b      	lsrs	r3, r3, #13
 8004ff4:	f003 0307 	and.w	r3, r3, #7
 8004ff8:	4903      	ldr	r1, [pc, #12]	; (8005008 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ffa:	5ccb      	ldrb	r3, [r1, r3]
 8004ffc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005000:	4618      	mov	r0, r3
 8005002:	bd80      	pop	{r7, pc}
 8005004:	40023800 	.word	0x40023800
 8005008:	08007874 	.word	0x08007874

0800500c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b082      	sub	sp, #8
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d101      	bne.n	800501e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e01d      	b.n	800505a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005024:	b2db      	uxtb	r3, r3
 8005026:	2b00      	cmp	r3, #0
 8005028:	d106      	bne.n	8005038 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2200      	movs	r2, #0
 800502e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f7fd fcc4 	bl	80029c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2202      	movs	r2, #2
 800503c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	3304      	adds	r3, #4
 8005048:	4619      	mov	r1, r3
 800504a:	4610      	mov	r0, r2
 800504c:	f000 fcae 	bl	80059ac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005058:	2300      	movs	r3, #0
}
 800505a:	4618      	mov	r0, r3
 800505c:	3708      	adds	r7, #8
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}

08005062 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005062:	b480      	push	{r7}
 8005064:	b085      	sub	sp, #20
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2202      	movs	r2, #2
 800506e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	f003 0307 	and.w	r3, r3, #7
 800507c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2b06      	cmp	r3, #6
 8005082:	d007      	beq.n	8005094 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f042 0201 	orr.w	r2, r2, #1
 8005092:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3714      	adds	r7, #20
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr

080050aa <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80050aa:	b480      	push	{r7}
 80050ac:	b085      	sub	sp, #20
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	68da      	ldr	r2, [r3, #12]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f042 0201 	orr.w	r2, r2, #1
 80050c0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	f003 0307 	and.w	r3, r3, #7
 80050cc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2b06      	cmp	r3, #6
 80050d2:	d007      	beq.n	80050e4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f042 0201 	orr.w	r2, r2, #1
 80050e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050e4:	2300      	movs	r3, #0
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3714      	adds	r7, #20
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr

080050f2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80050f2:	b580      	push	{r7, lr}
 80050f4:	b082      	sub	sp, #8
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d101      	bne.n	8005104 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	e01d      	b.n	8005140 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800510a:	b2db      	uxtb	r3, r3
 800510c:	2b00      	cmp	r3, #0
 800510e:	d106      	bne.n	800511e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f000 f815 	bl	8005148 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2202      	movs	r2, #2
 8005122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	3304      	adds	r3, #4
 800512e:	4619      	mov	r1, r3
 8005130:	4610      	mov	r0, r2
 8005132:	f000 fc3b 	bl	80059ac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2201      	movs	r2, #1
 800513a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800513e:	2300      	movs	r3, #0
}
 8005140:	4618      	mov	r0, r3
 8005142:	3708      	adds	r7, #8
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005148:	b480      	push	{r7}
 800514a:	b083      	sub	sp, #12
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005150:	bf00      	nop
 8005152:	370c      	adds	r7, #12
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr

0800515c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b084      	sub	sp, #16
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	2201      	movs	r2, #1
 800516c:	6839      	ldr	r1, [r7, #0]
 800516e:	4618      	mov	r0, r3
 8005170:	f001 f830 	bl	80061d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a15      	ldr	r2, [pc, #84]	; (80051d0 <HAL_TIM_PWM_Start+0x74>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d004      	beq.n	8005188 <HAL_TIM_PWM_Start+0x2c>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a14      	ldr	r2, [pc, #80]	; (80051d4 <HAL_TIM_PWM_Start+0x78>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d101      	bne.n	800518c <HAL_TIM_PWM_Start+0x30>
 8005188:	2301      	movs	r3, #1
 800518a:	e000      	b.n	800518e <HAL_TIM_PWM_Start+0x32>
 800518c:	2300      	movs	r3, #0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d007      	beq.n	80051a2 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80051a0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	f003 0307 	and.w	r3, r3, #7
 80051ac:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2b06      	cmp	r3, #6
 80051b2:	d007      	beq.n	80051c4 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f042 0201 	orr.w	r2, r2, #1
 80051c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051c4:	2300      	movs	r3, #0
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3710      	adds	r7, #16
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	bf00      	nop
 80051d0:	40010000 	.word	0x40010000
 80051d4:	40010400 	.word	0x40010400

080051d8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b082      	sub	sp, #8
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d101      	bne.n	80051ea <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e01d      	b.n	8005226 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d106      	bne.n	8005204 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 f815 	bl	800522e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2202      	movs	r2, #2
 8005208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	3304      	adds	r3, #4
 8005214:	4619      	mov	r1, r3
 8005216:	4610      	mov	r0, r2
 8005218:	f000 fbc8 	bl	80059ac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3708      	adds	r7, #8
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}

0800522e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800522e:	b480      	push	{r7}
 8005230:	b083      	sub	sp, #12
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005236:	bf00      	nop
 8005238:	370c      	adds	r7, #12
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr
	...

08005244 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b084      	sub	sp, #16
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	2b0c      	cmp	r3, #12
 8005252:	d841      	bhi.n	80052d8 <HAL_TIM_IC_Start_IT+0x94>
 8005254:	a201      	add	r2, pc, #4	; (adr r2, 800525c <HAL_TIM_IC_Start_IT+0x18>)
 8005256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800525a:	bf00      	nop
 800525c:	08005291 	.word	0x08005291
 8005260:	080052d9 	.word	0x080052d9
 8005264:	080052d9 	.word	0x080052d9
 8005268:	080052d9 	.word	0x080052d9
 800526c:	080052a3 	.word	0x080052a3
 8005270:	080052d9 	.word	0x080052d9
 8005274:	080052d9 	.word	0x080052d9
 8005278:	080052d9 	.word	0x080052d9
 800527c:	080052b5 	.word	0x080052b5
 8005280:	080052d9 	.word	0x080052d9
 8005284:	080052d9 	.word	0x080052d9
 8005288:	080052d9 	.word	0x080052d9
 800528c:	080052c7 	.word	0x080052c7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	68da      	ldr	r2, [r3, #12]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f042 0202 	orr.w	r2, r2, #2
 800529e:	60da      	str	r2, [r3, #12]
      break;
 80052a0:	e01b      	b.n	80052da <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	68da      	ldr	r2, [r3, #12]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f042 0204 	orr.w	r2, r2, #4
 80052b0:	60da      	str	r2, [r3, #12]
      break;
 80052b2:	e012      	b.n	80052da <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	68da      	ldr	r2, [r3, #12]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f042 0208 	orr.w	r2, r2, #8
 80052c2:	60da      	str	r2, [r3, #12]
      break;
 80052c4:	e009      	b.n	80052da <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	68da      	ldr	r2, [r3, #12]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f042 0210 	orr.w	r2, r2, #16
 80052d4:	60da      	str	r2, [r3, #12]
      break;
 80052d6:	e000      	b.n	80052da <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 80052d8:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	2201      	movs	r2, #1
 80052e0:	6839      	ldr	r1, [r7, #0]
 80052e2:	4618      	mov	r0, r3
 80052e4:	f000 ff76 	bl	80061d4 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	f003 0307 	and.w	r3, r3, #7
 80052f2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2b06      	cmp	r3, #6
 80052f8:	d007      	beq.n	800530a <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f042 0201 	orr.w	r2, r2, #1
 8005308:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800530a:	2300      	movs	r3, #0
}
 800530c:	4618      	mov	r0, r3
 800530e:	3710      	adds	r7, #16
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}

08005314 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b082      	sub	sp, #8
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	f003 0302 	and.w	r3, r3, #2
 8005326:	2b02      	cmp	r3, #2
 8005328:	d122      	bne.n	8005370 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	f003 0302 	and.w	r3, r3, #2
 8005334:	2b02      	cmp	r3, #2
 8005336:	d11b      	bne.n	8005370 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f06f 0202 	mvn.w	r2, #2
 8005340:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2201      	movs	r2, #1
 8005346:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	699b      	ldr	r3, [r3, #24]
 800534e:	f003 0303 	and.w	r3, r3, #3
 8005352:	2b00      	cmp	r3, #0
 8005354:	d003      	beq.n	800535e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f7fb fff4 	bl	8001344 <HAL_TIM_IC_CaptureCallback>
 800535c:	e005      	b.n	800536a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f000 fb06 	bl	8005970 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f000 fb0d 	bl	8005984 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	f003 0304 	and.w	r3, r3, #4
 800537a:	2b04      	cmp	r3, #4
 800537c:	d122      	bne.n	80053c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	f003 0304 	and.w	r3, r3, #4
 8005388:	2b04      	cmp	r3, #4
 800538a:	d11b      	bne.n	80053c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f06f 0204 	mvn.w	r2, #4
 8005394:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2202      	movs	r2, #2
 800539a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	699b      	ldr	r3, [r3, #24]
 80053a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d003      	beq.n	80053b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f7fb ffca 	bl	8001344 <HAL_TIM_IC_CaptureCallback>
 80053b0:	e005      	b.n	80053be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f000 fadc 	bl	8005970 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f000 fae3 	bl	8005984 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	691b      	ldr	r3, [r3, #16]
 80053ca:	f003 0308 	and.w	r3, r3, #8
 80053ce:	2b08      	cmp	r3, #8
 80053d0:	d122      	bne.n	8005418 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	f003 0308 	and.w	r3, r3, #8
 80053dc:	2b08      	cmp	r3, #8
 80053de:	d11b      	bne.n	8005418 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f06f 0208 	mvn.w	r2, #8
 80053e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2204      	movs	r2, #4
 80053ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	69db      	ldr	r3, [r3, #28]
 80053f6:	f003 0303 	and.w	r3, r3, #3
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d003      	beq.n	8005406 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f7fb ffa0 	bl	8001344 <HAL_TIM_IC_CaptureCallback>
 8005404:	e005      	b.n	8005412 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f000 fab2 	bl	8005970 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f000 fab9 	bl	8005984 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	f003 0310 	and.w	r3, r3, #16
 8005422:	2b10      	cmp	r3, #16
 8005424:	d122      	bne.n	800546c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	f003 0310 	and.w	r3, r3, #16
 8005430:	2b10      	cmp	r3, #16
 8005432:	d11b      	bne.n	800546c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f06f 0210 	mvn.w	r2, #16
 800543c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2208      	movs	r2, #8
 8005442:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	69db      	ldr	r3, [r3, #28]
 800544a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800544e:	2b00      	cmp	r3, #0
 8005450:	d003      	beq.n	800545a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f7fb ff76 	bl	8001344 <HAL_TIM_IC_CaptureCallback>
 8005458:	e005      	b.n	8005466 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 fa88 	bl	8005970 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f000 fa8f 	bl	8005984 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	f003 0301 	and.w	r3, r3, #1
 8005476:	2b01      	cmp	r3, #1
 8005478:	d10e      	bne.n	8005498 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	f003 0301 	and.w	r3, r3, #1
 8005484:	2b01      	cmp	r3, #1
 8005486:	d107      	bne.n	8005498 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f06f 0201 	mvn.w	r2, #1
 8005490:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f7fb ff3c 	bl	8001310 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	691b      	ldr	r3, [r3, #16]
 800549e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054a2:	2b80      	cmp	r3, #128	; 0x80
 80054a4:	d10e      	bne.n	80054c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054b0:	2b80      	cmp	r3, #128	; 0x80
 80054b2:	d107      	bne.n	80054c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80054bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f000 ff34 	bl	800632c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ce:	2b40      	cmp	r3, #64	; 0x40
 80054d0:	d10e      	bne.n	80054f0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054dc:	2b40      	cmp	r3, #64	; 0x40
 80054de:	d107      	bne.n	80054f0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80054e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f000 fa54 	bl	8005998 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	f003 0320 	and.w	r3, r3, #32
 80054fa:	2b20      	cmp	r3, #32
 80054fc:	d10e      	bne.n	800551c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	f003 0320 	and.w	r3, r3, #32
 8005508:	2b20      	cmp	r3, #32
 800550a:	d107      	bne.n	800551c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f06f 0220 	mvn.w	r2, #32
 8005514:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 fefe 	bl	8006318 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800551c:	bf00      	nop
 800551e:	3708      	adds	r7, #8
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}

08005524 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	60b9      	str	r1, [r7, #8]
 800552e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005536:	2b01      	cmp	r3, #1
 8005538:	d101      	bne.n	800553e <HAL_TIM_IC_ConfigChannel+0x1a>
 800553a:	2302      	movs	r3, #2
 800553c:	e08a      	b.n	8005654 <HAL_TIM_IC_ConfigChannel+0x130>
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2201      	movs	r2, #1
 8005542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2202      	movs	r2, #2
 800554a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d11b      	bne.n	800558c <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	6818      	ldr	r0, [r3, #0]
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	6819      	ldr	r1, [r3, #0]
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	685a      	ldr	r2, [r3, #4]
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	f000 fc72 	bl	8005e4c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	699a      	ldr	r2, [r3, #24]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f022 020c 	bic.w	r2, r2, #12
 8005576:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	6999      	ldr	r1, [r3, #24]
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	689a      	ldr	r2, [r3, #8]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	430a      	orrs	r2, r1
 8005588:	619a      	str	r2, [r3, #24]
 800558a:	e05a      	b.n	8005642 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2b04      	cmp	r3, #4
 8005590:	d11c      	bne.n	80055cc <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	6818      	ldr	r0, [r3, #0]
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	6819      	ldr	r1, [r3, #0]
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	685a      	ldr	r2, [r3, #4]
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	f000 fcf6 	bl	8005f92 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	699a      	ldr	r2, [r3, #24]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80055b4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	6999      	ldr	r1, [r3, #24]
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	021a      	lsls	r2, r3, #8
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	430a      	orrs	r2, r1
 80055c8:	619a      	str	r2, [r3, #24]
 80055ca:	e03a      	b.n	8005642 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2b08      	cmp	r3, #8
 80055d0:	d11b      	bne.n	800560a <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	6818      	ldr	r0, [r3, #0]
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	6819      	ldr	r1, [r3, #0]
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	685a      	ldr	r2, [r3, #4]
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	68db      	ldr	r3, [r3, #12]
 80055e2:	f000 fd43 	bl	800606c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	69da      	ldr	r2, [r3, #28]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f022 020c 	bic.w	r2, r2, #12
 80055f4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	69d9      	ldr	r1, [r3, #28]
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	689a      	ldr	r2, [r3, #8]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	430a      	orrs	r2, r1
 8005606:	61da      	str	r2, [r3, #28]
 8005608:	e01b      	b.n	8005642 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	6818      	ldr	r0, [r3, #0]
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	6819      	ldr	r1, [r3, #0]
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	685a      	ldr	r2, [r3, #4]
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	f000 fd63 	bl	80060e4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	69da      	ldr	r2, [r3, #28]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800562c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	69d9      	ldr	r1, [r3, #28]
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	021a      	lsls	r2, r3, #8
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	430a      	orrs	r2, r1
 8005640:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2201      	movs	r2, #1
 8005646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2200      	movs	r2, #0
 800564e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005652:	2300      	movs	r3, #0
}
 8005654:	4618      	mov	r0, r3
 8005656:	3710      	adds	r7, #16
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b084      	sub	sp, #16
 8005660:	af00      	add	r7, sp, #0
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800566e:	2b01      	cmp	r3, #1
 8005670:	d101      	bne.n	8005676 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005672:	2302      	movs	r3, #2
 8005674:	e0b4      	b.n	80057e0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2201      	movs	r2, #1
 800567a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2202      	movs	r2, #2
 8005682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2b0c      	cmp	r3, #12
 800568a:	f200 809f 	bhi.w	80057cc <HAL_TIM_PWM_ConfigChannel+0x170>
 800568e:	a201      	add	r2, pc, #4	; (adr r2, 8005694 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005694:	080056c9 	.word	0x080056c9
 8005698:	080057cd 	.word	0x080057cd
 800569c:	080057cd 	.word	0x080057cd
 80056a0:	080057cd 	.word	0x080057cd
 80056a4:	08005709 	.word	0x08005709
 80056a8:	080057cd 	.word	0x080057cd
 80056ac:	080057cd 	.word	0x080057cd
 80056b0:	080057cd 	.word	0x080057cd
 80056b4:	0800574b 	.word	0x0800574b
 80056b8:	080057cd 	.word	0x080057cd
 80056bc:	080057cd 	.word	0x080057cd
 80056c0:	080057cd 	.word	0x080057cd
 80056c4:	0800578b 	.word	0x0800578b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	68b9      	ldr	r1, [r7, #8]
 80056ce:	4618      	mov	r0, r3
 80056d0:	f000 fa0c 	bl	8005aec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	699a      	ldr	r2, [r3, #24]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f042 0208 	orr.w	r2, r2, #8
 80056e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	699a      	ldr	r2, [r3, #24]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f022 0204 	bic.w	r2, r2, #4
 80056f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	6999      	ldr	r1, [r3, #24]
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	691a      	ldr	r2, [r3, #16]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	430a      	orrs	r2, r1
 8005704:	619a      	str	r2, [r3, #24]
      break;
 8005706:	e062      	b.n	80057ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	68b9      	ldr	r1, [r7, #8]
 800570e:	4618      	mov	r0, r3
 8005710:	f000 fa5c 	bl	8005bcc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	699a      	ldr	r2, [r3, #24]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005722:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	699a      	ldr	r2, [r3, #24]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005732:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	6999      	ldr	r1, [r3, #24]
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	691b      	ldr	r3, [r3, #16]
 800573e:	021a      	lsls	r2, r3, #8
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	430a      	orrs	r2, r1
 8005746:	619a      	str	r2, [r3, #24]
      break;
 8005748:	e041      	b.n	80057ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	68b9      	ldr	r1, [r7, #8]
 8005750:	4618      	mov	r0, r3
 8005752:	f000 fab1 	bl	8005cb8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	69da      	ldr	r2, [r3, #28]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f042 0208 	orr.w	r2, r2, #8
 8005764:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	69da      	ldr	r2, [r3, #28]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f022 0204 	bic.w	r2, r2, #4
 8005774:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	69d9      	ldr	r1, [r3, #28]
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	691a      	ldr	r2, [r3, #16]
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	430a      	orrs	r2, r1
 8005786:	61da      	str	r2, [r3, #28]
      break;
 8005788:	e021      	b.n	80057ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	68b9      	ldr	r1, [r7, #8]
 8005790:	4618      	mov	r0, r3
 8005792:	f000 fb05 	bl	8005da0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	69da      	ldr	r2, [r3, #28]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	69da      	ldr	r2, [r3, #28]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	69d9      	ldr	r1, [r3, #28]
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	691b      	ldr	r3, [r3, #16]
 80057c0:	021a      	lsls	r2, r3, #8
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	430a      	orrs	r2, r1
 80057c8:	61da      	str	r2, [r3, #28]
      break;
 80057ca:	e000      	b.n	80057ce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80057cc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2201      	movs	r2, #1
 80057d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2200      	movs	r2, #0
 80057da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057de:	2300      	movs	r3, #0
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3710      	adds	r7, #16
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}

080057e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b084      	sub	sp, #16
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d101      	bne.n	8005800 <HAL_TIM_ConfigClockSource+0x18>
 80057fc:	2302      	movs	r3, #2
 80057fe:	e0b3      	b.n	8005968 <HAL_TIM_ConfigClockSource+0x180>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2202      	movs	r2, #2
 800580c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800581e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005826:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	68fa      	ldr	r2, [r7, #12]
 800582e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005838:	d03e      	beq.n	80058b8 <HAL_TIM_ConfigClockSource+0xd0>
 800583a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800583e:	f200 8087 	bhi.w	8005950 <HAL_TIM_ConfigClockSource+0x168>
 8005842:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005846:	f000 8085 	beq.w	8005954 <HAL_TIM_ConfigClockSource+0x16c>
 800584a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800584e:	d87f      	bhi.n	8005950 <HAL_TIM_ConfigClockSource+0x168>
 8005850:	2b70      	cmp	r3, #112	; 0x70
 8005852:	d01a      	beq.n	800588a <HAL_TIM_ConfigClockSource+0xa2>
 8005854:	2b70      	cmp	r3, #112	; 0x70
 8005856:	d87b      	bhi.n	8005950 <HAL_TIM_ConfigClockSource+0x168>
 8005858:	2b60      	cmp	r3, #96	; 0x60
 800585a:	d050      	beq.n	80058fe <HAL_TIM_ConfigClockSource+0x116>
 800585c:	2b60      	cmp	r3, #96	; 0x60
 800585e:	d877      	bhi.n	8005950 <HAL_TIM_ConfigClockSource+0x168>
 8005860:	2b50      	cmp	r3, #80	; 0x50
 8005862:	d03c      	beq.n	80058de <HAL_TIM_ConfigClockSource+0xf6>
 8005864:	2b50      	cmp	r3, #80	; 0x50
 8005866:	d873      	bhi.n	8005950 <HAL_TIM_ConfigClockSource+0x168>
 8005868:	2b40      	cmp	r3, #64	; 0x40
 800586a:	d058      	beq.n	800591e <HAL_TIM_ConfigClockSource+0x136>
 800586c:	2b40      	cmp	r3, #64	; 0x40
 800586e:	d86f      	bhi.n	8005950 <HAL_TIM_ConfigClockSource+0x168>
 8005870:	2b30      	cmp	r3, #48	; 0x30
 8005872:	d064      	beq.n	800593e <HAL_TIM_ConfigClockSource+0x156>
 8005874:	2b30      	cmp	r3, #48	; 0x30
 8005876:	d86b      	bhi.n	8005950 <HAL_TIM_ConfigClockSource+0x168>
 8005878:	2b20      	cmp	r3, #32
 800587a:	d060      	beq.n	800593e <HAL_TIM_ConfigClockSource+0x156>
 800587c:	2b20      	cmp	r3, #32
 800587e:	d867      	bhi.n	8005950 <HAL_TIM_ConfigClockSource+0x168>
 8005880:	2b00      	cmp	r3, #0
 8005882:	d05c      	beq.n	800593e <HAL_TIM_ConfigClockSource+0x156>
 8005884:	2b10      	cmp	r3, #16
 8005886:	d05a      	beq.n	800593e <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005888:	e062      	b.n	8005950 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6818      	ldr	r0, [r3, #0]
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	6899      	ldr	r1, [r3, #8]
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	685a      	ldr	r2, [r3, #4]
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	f000 fc7b 	bl	8006194 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80058ac:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	68fa      	ldr	r2, [r7, #12]
 80058b4:	609a      	str	r2, [r3, #8]
      break;
 80058b6:	e04e      	b.n	8005956 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6818      	ldr	r0, [r3, #0]
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	6899      	ldr	r1, [r3, #8]
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	685a      	ldr	r2, [r3, #4]
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	f000 fc64 	bl	8006194 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	689a      	ldr	r2, [r3, #8]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80058da:	609a      	str	r2, [r3, #8]
      break;
 80058dc:	e03b      	b.n	8005956 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6818      	ldr	r0, [r3, #0]
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	6859      	ldr	r1, [r3, #4]
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	461a      	mov	r2, r3
 80058ec:	f000 fb22 	bl	8005f34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	2150      	movs	r1, #80	; 0x50
 80058f6:	4618      	mov	r0, r3
 80058f8:	f000 fc31 	bl	800615e <TIM_ITRx_SetConfig>
      break;
 80058fc:	e02b      	b.n	8005956 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6818      	ldr	r0, [r3, #0]
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	6859      	ldr	r1, [r3, #4]
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	68db      	ldr	r3, [r3, #12]
 800590a:	461a      	mov	r2, r3
 800590c:	f000 fb7e 	bl	800600c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	2160      	movs	r1, #96	; 0x60
 8005916:	4618      	mov	r0, r3
 8005918:	f000 fc21 	bl	800615e <TIM_ITRx_SetConfig>
      break;
 800591c:	e01b      	b.n	8005956 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6818      	ldr	r0, [r3, #0]
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	6859      	ldr	r1, [r3, #4]
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	461a      	mov	r2, r3
 800592c:	f000 fb02 	bl	8005f34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	2140      	movs	r1, #64	; 0x40
 8005936:	4618      	mov	r0, r3
 8005938:	f000 fc11 	bl	800615e <TIM_ITRx_SetConfig>
      break;
 800593c:	e00b      	b.n	8005956 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4619      	mov	r1, r3
 8005948:	4610      	mov	r0, r2
 800594a:	f000 fc08 	bl	800615e <TIM_ITRx_SetConfig>
      break;
 800594e:	e002      	b.n	8005956 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005950:	bf00      	nop
 8005952:	e000      	b.n	8005956 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005954:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2201      	movs	r2, #1
 800595a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005966:	2300      	movs	r3, #0
}
 8005968:	4618      	mov	r0, r3
 800596a:	3710      	adds	r7, #16
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}

08005970 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005978:	bf00      	nop
 800597a:	370c      	adds	r7, #12
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005984:	b480      	push	{r7}
 8005986:	b083      	sub	sp, #12
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800598c:	bf00      	nop
 800598e:	370c      	adds	r7, #12
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059a0:	bf00      	nop
 80059a2:	370c      	adds	r7, #12
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr

080059ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b085      	sub	sp, #20
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	4a40      	ldr	r2, [pc, #256]	; (8005ac0 <TIM_Base_SetConfig+0x114>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d013      	beq.n	80059ec <TIM_Base_SetConfig+0x40>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059ca:	d00f      	beq.n	80059ec <TIM_Base_SetConfig+0x40>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	4a3d      	ldr	r2, [pc, #244]	; (8005ac4 <TIM_Base_SetConfig+0x118>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d00b      	beq.n	80059ec <TIM_Base_SetConfig+0x40>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	4a3c      	ldr	r2, [pc, #240]	; (8005ac8 <TIM_Base_SetConfig+0x11c>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d007      	beq.n	80059ec <TIM_Base_SetConfig+0x40>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	4a3b      	ldr	r2, [pc, #236]	; (8005acc <TIM_Base_SetConfig+0x120>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d003      	beq.n	80059ec <TIM_Base_SetConfig+0x40>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4a3a      	ldr	r2, [pc, #232]	; (8005ad0 <TIM_Base_SetConfig+0x124>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d108      	bne.n	80059fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	68fa      	ldr	r2, [r7, #12]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4a2f      	ldr	r2, [pc, #188]	; (8005ac0 <TIM_Base_SetConfig+0x114>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d02b      	beq.n	8005a5e <TIM_Base_SetConfig+0xb2>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a0c:	d027      	beq.n	8005a5e <TIM_Base_SetConfig+0xb2>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4a2c      	ldr	r2, [pc, #176]	; (8005ac4 <TIM_Base_SetConfig+0x118>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d023      	beq.n	8005a5e <TIM_Base_SetConfig+0xb2>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a2b      	ldr	r2, [pc, #172]	; (8005ac8 <TIM_Base_SetConfig+0x11c>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d01f      	beq.n	8005a5e <TIM_Base_SetConfig+0xb2>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a2a      	ldr	r2, [pc, #168]	; (8005acc <TIM_Base_SetConfig+0x120>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d01b      	beq.n	8005a5e <TIM_Base_SetConfig+0xb2>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a29      	ldr	r2, [pc, #164]	; (8005ad0 <TIM_Base_SetConfig+0x124>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d017      	beq.n	8005a5e <TIM_Base_SetConfig+0xb2>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a28      	ldr	r2, [pc, #160]	; (8005ad4 <TIM_Base_SetConfig+0x128>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d013      	beq.n	8005a5e <TIM_Base_SetConfig+0xb2>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a27      	ldr	r2, [pc, #156]	; (8005ad8 <TIM_Base_SetConfig+0x12c>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d00f      	beq.n	8005a5e <TIM_Base_SetConfig+0xb2>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a26      	ldr	r2, [pc, #152]	; (8005adc <TIM_Base_SetConfig+0x130>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d00b      	beq.n	8005a5e <TIM_Base_SetConfig+0xb2>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a25      	ldr	r2, [pc, #148]	; (8005ae0 <TIM_Base_SetConfig+0x134>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d007      	beq.n	8005a5e <TIM_Base_SetConfig+0xb2>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a24      	ldr	r2, [pc, #144]	; (8005ae4 <TIM_Base_SetConfig+0x138>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d003      	beq.n	8005a5e <TIM_Base_SetConfig+0xb2>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4a23      	ldr	r2, [pc, #140]	; (8005ae8 <TIM_Base_SetConfig+0x13c>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d108      	bne.n	8005a70 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	68db      	ldr	r3, [r3, #12]
 8005a6a:	68fa      	ldr	r2, [r7, #12]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	695b      	ldr	r3, [r3, #20]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	68fa      	ldr	r2, [r7, #12]
 8005a82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	689a      	ldr	r2, [r3, #8]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	4a0a      	ldr	r2, [pc, #40]	; (8005ac0 <TIM_Base_SetConfig+0x114>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d003      	beq.n	8005aa4 <TIM_Base_SetConfig+0xf8>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4a0c      	ldr	r2, [pc, #48]	; (8005ad0 <TIM_Base_SetConfig+0x124>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d103      	bne.n	8005aac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	691a      	ldr	r2, [r3, #16]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	615a      	str	r2, [r3, #20]
}
 8005ab2:	bf00      	nop
 8005ab4:	3714      	adds	r7, #20
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr
 8005abe:	bf00      	nop
 8005ac0:	40010000 	.word	0x40010000
 8005ac4:	40000400 	.word	0x40000400
 8005ac8:	40000800 	.word	0x40000800
 8005acc:	40000c00 	.word	0x40000c00
 8005ad0:	40010400 	.word	0x40010400
 8005ad4:	40014000 	.word	0x40014000
 8005ad8:	40014400 	.word	0x40014400
 8005adc:	40014800 	.word	0x40014800
 8005ae0:	40001800 	.word	0x40001800
 8005ae4:	40001c00 	.word	0x40001c00
 8005ae8:	40002000 	.word	0x40002000

08005aec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b087      	sub	sp, #28
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6a1b      	ldr	r3, [r3, #32]
 8005afa:	f023 0201 	bic.w	r2, r3, #1
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6a1b      	ldr	r3, [r3, #32]
 8005b06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	699b      	ldr	r3, [r3, #24]
 8005b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f023 0303 	bic.w	r3, r3, #3
 8005b22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	68fa      	ldr	r2, [r7, #12]
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	f023 0302 	bic.w	r3, r3, #2
 8005b34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	697a      	ldr	r2, [r7, #20]
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	4a20      	ldr	r2, [pc, #128]	; (8005bc4 <TIM_OC1_SetConfig+0xd8>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d003      	beq.n	8005b50 <TIM_OC1_SetConfig+0x64>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	4a1f      	ldr	r2, [pc, #124]	; (8005bc8 <TIM_OC1_SetConfig+0xdc>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d10c      	bne.n	8005b6a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	f023 0308 	bic.w	r3, r3, #8
 8005b56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	697a      	ldr	r2, [r7, #20]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	f023 0304 	bic.w	r3, r3, #4
 8005b68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a15      	ldr	r2, [pc, #84]	; (8005bc4 <TIM_OC1_SetConfig+0xd8>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d003      	beq.n	8005b7a <TIM_OC1_SetConfig+0x8e>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4a14      	ldr	r2, [pc, #80]	; (8005bc8 <TIM_OC1_SetConfig+0xdc>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d111      	bne.n	8005b9e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	695b      	ldr	r3, [r3, #20]
 8005b8e:	693a      	ldr	r2, [r7, #16]
 8005b90:	4313      	orrs	r3, r2
 8005b92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	699b      	ldr	r3, [r3, #24]
 8005b98:	693a      	ldr	r2, [r7, #16]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	693a      	ldr	r2, [r7, #16]
 8005ba2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	68fa      	ldr	r2, [r7, #12]
 8005ba8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	685a      	ldr	r2, [r3, #4]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	697a      	ldr	r2, [r7, #20]
 8005bb6:	621a      	str	r2, [r3, #32]
}
 8005bb8:	bf00      	nop
 8005bba:	371c      	adds	r7, #28
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr
 8005bc4:	40010000 	.word	0x40010000
 8005bc8:	40010400 	.word	0x40010400

08005bcc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b087      	sub	sp, #28
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6a1b      	ldr	r3, [r3, #32]
 8005bda:	f023 0210 	bic.w	r2, r3, #16
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6a1b      	ldr	r3, [r3, #32]
 8005be6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	699b      	ldr	r3, [r3, #24]
 8005bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	021b      	lsls	r3, r3, #8
 8005c0a:	68fa      	ldr	r2, [r7, #12]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	f023 0320 	bic.w	r3, r3, #32
 8005c16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	011b      	lsls	r3, r3, #4
 8005c1e:	697a      	ldr	r2, [r7, #20]
 8005c20:	4313      	orrs	r3, r2
 8005c22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	4a22      	ldr	r2, [pc, #136]	; (8005cb0 <TIM_OC2_SetConfig+0xe4>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d003      	beq.n	8005c34 <TIM_OC2_SetConfig+0x68>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4a21      	ldr	r2, [pc, #132]	; (8005cb4 <TIM_OC2_SetConfig+0xe8>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d10d      	bne.n	8005c50 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	011b      	lsls	r3, r3, #4
 8005c42:	697a      	ldr	r2, [r7, #20]
 8005c44:	4313      	orrs	r3, r2
 8005c46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c4e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	4a17      	ldr	r2, [pc, #92]	; (8005cb0 <TIM_OC2_SetConfig+0xe4>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d003      	beq.n	8005c60 <TIM_OC2_SetConfig+0x94>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	4a16      	ldr	r2, [pc, #88]	; (8005cb4 <TIM_OC2_SetConfig+0xe8>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d113      	bne.n	8005c88 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c66:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c6e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	695b      	ldr	r3, [r3, #20]
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	693a      	ldr	r2, [r7, #16]
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	699b      	ldr	r3, [r3, #24]
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	693a      	ldr	r2, [r7, #16]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	693a      	ldr	r2, [r7, #16]
 8005c8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	68fa      	ldr	r2, [r7, #12]
 8005c92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	685a      	ldr	r2, [r3, #4]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	697a      	ldr	r2, [r7, #20]
 8005ca0:	621a      	str	r2, [r3, #32]
}
 8005ca2:	bf00      	nop
 8005ca4:	371c      	adds	r7, #28
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr
 8005cae:	bf00      	nop
 8005cb0:	40010000 	.word	0x40010000
 8005cb4:	40010400 	.word	0x40010400

08005cb8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b087      	sub	sp, #28
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6a1b      	ldr	r3, [r3, #32]
 8005cc6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6a1b      	ldr	r3, [r3, #32]
 8005cd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	69db      	ldr	r3, [r3, #28]
 8005cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ce6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f023 0303 	bic.w	r3, r3, #3
 8005cee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68fa      	ldr	r2, [r7, #12]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	021b      	lsls	r3, r3, #8
 8005d08:	697a      	ldr	r2, [r7, #20]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4a21      	ldr	r2, [pc, #132]	; (8005d98 <TIM_OC3_SetConfig+0xe0>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d003      	beq.n	8005d1e <TIM_OC3_SetConfig+0x66>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	4a20      	ldr	r2, [pc, #128]	; (8005d9c <TIM_OC3_SetConfig+0xe4>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d10d      	bne.n	8005d3a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	021b      	lsls	r3, r3, #8
 8005d2c:	697a      	ldr	r2, [r7, #20]
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4a16      	ldr	r2, [pc, #88]	; (8005d98 <TIM_OC3_SetConfig+0xe0>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d003      	beq.n	8005d4a <TIM_OC3_SetConfig+0x92>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4a15      	ldr	r2, [pc, #84]	; (8005d9c <TIM_OC3_SetConfig+0xe4>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d113      	bne.n	8005d72 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	695b      	ldr	r3, [r3, #20]
 8005d5e:	011b      	lsls	r3, r3, #4
 8005d60:	693a      	ldr	r2, [r7, #16]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	699b      	ldr	r3, [r3, #24]
 8005d6a:	011b      	lsls	r3, r3, #4
 8005d6c:	693a      	ldr	r2, [r7, #16]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	693a      	ldr	r2, [r7, #16]
 8005d76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	68fa      	ldr	r2, [r7, #12]
 8005d7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	685a      	ldr	r2, [r3, #4]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	697a      	ldr	r2, [r7, #20]
 8005d8a:	621a      	str	r2, [r3, #32]
}
 8005d8c:	bf00      	nop
 8005d8e:	371c      	adds	r7, #28
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr
 8005d98:	40010000 	.word	0x40010000
 8005d9c:	40010400 	.word	0x40010400

08005da0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b087      	sub	sp, #28
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6a1b      	ldr	r3, [r3, #32]
 8005dae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6a1b      	ldr	r3, [r3, #32]
 8005dba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	69db      	ldr	r3, [r3, #28]
 8005dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	021b      	lsls	r3, r3, #8
 8005dde:	68fa      	ldr	r2, [r7, #12]
 8005de0:	4313      	orrs	r3, r2
 8005de2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005dea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	031b      	lsls	r3, r3, #12
 8005df2:	693a      	ldr	r2, [r7, #16]
 8005df4:	4313      	orrs	r3, r2
 8005df6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	4a12      	ldr	r2, [pc, #72]	; (8005e44 <TIM_OC4_SetConfig+0xa4>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d003      	beq.n	8005e08 <TIM_OC4_SetConfig+0x68>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	4a11      	ldr	r2, [pc, #68]	; (8005e48 <TIM_OC4_SetConfig+0xa8>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d109      	bne.n	8005e1c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	695b      	ldr	r3, [r3, #20]
 8005e14:	019b      	lsls	r3, r3, #6
 8005e16:	697a      	ldr	r2, [r7, #20]
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	697a      	ldr	r2, [r7, #20]
 8005e20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	68fa      	ldr	r2, [r7, #12]
 8005e26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	685a      	ldr	r2, [r3, #4]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	693a      	ldr	r2, [r7, #16]
 8005e34:	621a      	str	r2, [r3, #32]
}
 8005e36:	bf00      	nop
 8005e38:	371c      	adds	r7, #28
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr
 8005e42:	bf00      	nop
 8005e44:	40010000 	.word	0x40010000
 8005e48:	40010400 	.word	0x40010400

08005e4c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b087      	sub	sp, #28
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	60b9      	str	r1, [r7, #8]
 8005e56:	607a      	str	r2, [r7, #4]
 8005e58:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	6a1b      	ldr	r3, [r3, #32]
 8005e5e:	f023 0201 	bic.w	r2, r3, #1
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	699b      	ldr	r3, [r3, #24]
 8005e6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6a1b      	ldr	r3, [r3, #32]
 8005e70:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	4a28      	ldr	r2, [pc, #160]	; (8005f18 <TIM_TI1_SetConfig+0xcc>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d01b      	beq.n	8005eb2 <TIM_TI1_SetConfig+0x66>
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e80:	d017      	beq.n	8005eb2 <TIM_TI1_SetConfig+0x66>
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	4a25      	ldr	r2, [pc, #148]	; (8005f1c <TIM_TI1_SetConfig+0xd0>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d013      	beq.n	8005eb2 <TIM_TI1_SetConfig+0x66>
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	4a24      	ldr	r2, [pc, #144]	; (8005f20 <TIM_TI1_SetConfig+0xd4>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d00f      	beq.n	8005eb2 <TIM_TI1_SetConfig+0x66>
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	4a23      	ldr	r2, [pc, #140]	; (8005f24 <TIM_TI1_SetConfig+0xd8>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d00b      	beq.n	8005eb2 <TIM_TI1_SetConfig+0x66>
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	4a22      	ldr	r2, [pc, #136]	; (8005f28 <TIM_TI1_SetConfig+0xdc>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d007      	beq.n	8005eb2 <TIM_TI1_SetConfig+0x66>
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	4a21      	ldr	r2, [pc, #132]	; (8005f2c <TIM_TI1_SetConfig+0xe0>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d003      	beq.n	8005eb2 <TIM_TI1_SetConfig+0x66>
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	4a20      	ldr	r2, [pc, #128]	; (8005f30 <TIM_TI1_SetConfig+0xe4>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d101      	bne.n	8005eb6 <TIM_TI1_SetConfig+0x6a>
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e000      	b.n	8005eb8 <TIM_TI1_SetConfig+0x6c>
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d008      	beq.n	8005ece <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	f023 0303 	bic.w	r3, r3, #3
 8005ec2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005ec4:	697a      	ldr	r2, [r7, #20]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	617b      	str	r3, [r7, #20]
 8005ecc:	e003      	b.n	8005ed6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	f043 0301 	orr.w	r3, r3, #1
 8005ed4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005edc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	011b      	lsls	r3, r3, #4
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	697a      	ldr	r2, [r7, #20]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	f023 030a 	bic.w	r3, r3, #10
 8005ef0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	f003 030a 	and.w	r3, r3, #10
 8005ef8:	693a      	ldr	r2, [r7, #16]
 8005efa:	4313      	orrs	r3, r2
 8005efc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	697a      	ldr	r2, [r7, #20]
 8005f02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	693a      	ldr	r2, [r7, #16]
 8005f08:	621a      	str	r2, [r3, #32]
}
 8005f0a:	bf00      	nop
 8005f0c:	371c      	adds	r7, #28
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr
 8005f16:	bf00      	nop
 8005f18:	40010000 	.word	0x40010000
 8005f1c:	40000400 	.word	0x40000400
 8005f20:	40000800 	.word	0x40000800
 8005f24:	40000c00 	.word	0x40000c00
 8005f28:	40010400 	.word	0x40010400
 8005f2c:	40014000 	.word	0x40014000
 8005f30:	40001800 	.word	0x40001800

08005f34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b087      	sub	sp, #28
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	60f8      	str	r0, [r7, #12]
 8005f3c:	60b9      	str	r1, [r7, #8]
 8005f3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	6a1b      	ldr	r3, [r3, #32]
 8005f44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	6a1b      	ldr	r3, [r3, #32]
 8005f4a:	f023 0201 	bic.w	r2, r3, #1
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	699b      	ldr	r3, [r3, #24]
 8005f56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	011b      	lsls	r3, r3, #4
 8005f64:	693a      	ldr	r2, [r7, #16]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	f023 030a 	bic.w	r3, r3, #10
 8005f70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f72:	697a      	ldr	r2, [r7, #20]
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	4313      	orrs	r3, r2
 8005f78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	693a      	ldr	r2, [r7, #16]
 8005f7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	697a      	ldr	r2, [r7, #20]
 8005f84:	621a      	str	r2, [r3, #32]
}
 8005f86:	bf00      	nop
 8005f88:	371c      	adds	r7, #28
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr

08005f92 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005f92:	b480      	push	{r7}
 8005f94:	b087      	sub	sp, #28
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	60f8      	str	r0, [r7, #12]
 8005f9a:	60b9      	str	r1, [r7, #8]
 8005f9c:	607a      	str	r2, [r7, #4]
 8005f9e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	6a1b      	ldr	r3, [r3, #32]
 8005fa4:	f023 0210 	bic.w	r2, r3, #16
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	699b      	ldr	r3, [r3, #24]
 8005fb0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	6a1b      	ldr	r3, [r3, #32]
 8005fb6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fbe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	021b      	lsls	r3, r3, #8
 8005fc4:	697a      	ldr	r2, [r7, #20]
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005fd0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	031b      	lsls	r3, r3, #12
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	697a      	ldr	r2, [r7, #20]
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005fe4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	011b      	lsls	r3, r3, #4
 8005fea:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005fee:	693a      	ldr	r2, [r7, #16]
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	697a      	ldr	r2, [r7, #20]
 8005ff8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	693a      	ldr	r2, [r7, #16]
 8005ffe:	621a      	str	r2, [r3, #32]
}
 8006000:	bf00      	nop
 8006002:	371c      	adds	r7, #28
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr

0800600c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800600c:	b480      	push	{r7}
 800600e:	b087      	sub	sp, #28
 8006010:	af00      	add	r7, sp, #0
 8006012:	60f8      	str	r0, [r7, #12]
 8006014:	60b9      	str	r1, [r7, #8]
 8006016:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	6a1b      	ldr	r3, [r3, #32]
 800601c:	f023 0210 	bic.w	r2, r3, #16
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	699b      	ldr	r3, [r3, #24]
 8006028:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	6a1b      	ldr	r3, [r3, #32]
 800602e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006036:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	031b      	lsls	r3, r3, #12
 800603c:	697a      	ldr	r2, [r7, #20]
 800603e:	4313      	orrs	r3, r2
 8006040:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006048:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	011b      	lsls	r3, r3, #4
 800604e:	693a      	ldr	r2, [r7, #16]
 8006050:	4313      	orrs	r3, r2
 8006052:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	697a      	ldr	r2, [r7, #20]
 8006058:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	693a      	ldr	r2, [r7, #16]
 800605e:	621a      	str	r2, [r3, #32]
}
 8006060:	bf00      	nop
 8006062:	371c      	adds	r7, #28
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800606c:	b480      	push	{r7}
 800606e:	b087      	sub	sp, #28
 8006070:	af00      	add	r7, sp, #0
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	607a      	str	r2, [r7, #4]
 8006078:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	6a1b      	ldr	r3, [r3, #32]
 800607e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	69db      	ldr	r3, [r3, #28]
 800608a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	6a1b      	ldr	r3, [r3, #32]
 8006090:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	f023 0303 	bic.w	r3, r3, #3
 8006098:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800609a:	697a      	ldr	r2, [r7, #20]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	4313      	orrs	r3, r2
 80060a0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060a8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	011b      	lsls	r3, r3, #4
 80060ae:	b2db      	uxtb	r3, r3
 80060b0:	697a      	ldr	r2, [r7, #20]
 80060b2:	4313      	orrs	r3, r2
 80060b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80060bc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	021b      	lsls	r3, r3, #8
 80060c2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80060c6:	693a      	ldr	r2, [r7, #16]
 80060c8:	4313      	orrs	r3, r2
 80060ca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	697a      	ldr	r2, [r7, #20]
 80060d0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	693a      	ldr	r2, [r7, #16]
 80060d6:	621a      	str	r2, [r3, #32]
}
 80060d8:	bf00      	nop
 80060da:	371c      	adds	r7, #28
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr

080060e4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b087      	sub	sp, #28
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	60f8      	str	r0, [r7, #12]
 80060ec:	60b9      	str	r1, [r7, #8]
 80060ee:	607a      	str	r2, [r7, #4]
 80060f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	6a1b      	ldr	r3, [r3, #32]
 80060f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	69db      	ldr	r3, [r3, #28]
 8006102:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6a1b      	ldr	r3, [r3, #32]
 8006108:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006110:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	021b      	lsls	r3, r3, #8
 8006116:	697a      	ldr	r2, [r7, #20]
 8006118:	4313      	orrs	r3, r2
 800611a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006122:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	031b      	lsls	r3, r3, #12
 8006128:	b29b      	uxth	r3, r3
 800612a:	697a      	ldr	r2, [r7, #20]
 800612c:	4313      	orrs	r3, r2
 800612e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006136:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	031b      	lsls	r3, r3, #12
 800613c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006140:	693a      	ldr	r2, [r7, #16]
 8006142:	4313      	orrs	r3, r2
 8006144:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	697a      	ldr	r2, [r7, #20]
 800614a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	693a      	ldr	r2, [r7, #16]
 8006150:	621a      	str	r2, [r3, #32]
}
 8006152:	bf00      	nop
 8006154:	371c      	adds	r7, #28
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr

0800615e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800615e:	b480      	push	{r7}
 8006160:	b085      	sub	sp, #20
 8006162:	af00      	add	r7, sp, #0
 8006164:	6078      	str	r0, [r7, #4]
 8006166:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006174:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006176:	683a      	ldr	r2, [r7, #0]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	4313      	orrs	r3, r2
 800617c:	f043 0307 	orr.w	r3, r3, #7
 8006180:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	68fa      	ldr	r2, [r7, #12]
 8006186:	609a      	str	r2, [r3, #8]
}
 8006188:	bf00      	nop
 800618a:	3714      	adds	r7, #20
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr

08006194 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006194:	b480      	push	{r7}
 8006196:	b087      	sub	sp, #28
 8006198:	af00      	add	r7, sp, #0
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	60b9      	str	r1, [r7, #8]
 800619e:	607a      	str	r2, [r7, #4]
 80061a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	021a      	lsls	r2, r3, #8
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	431a      	orrs	r2, r3
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	697a      	ldr	r2, [r7, #20]
 80061be:	4313      	orrs	r3, r2
 80061c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	697a      	ldr	r2, [r7, #20]
 80061c6:	609a      	str	r2, [r3, #8]
}
 80061c8:	bf00      	nop
 80061ca:	371c      	adds	r7, #28
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b087      	sub	sp, #28
 80061d8:	af00      	add	r7, sp, #0
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	60b9      	str	r1, [r7, #8]
 80061de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	f003 031f 	and.w	r3, r3, #31
 80061e6:	2201      	movs	r2, #1
 80061e8:	fa02 f303 	lsl.w	r3, r2, r3
 80061ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	6a1a      	ldr	r2, [r3, #32]
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	43db      	mvns	r3, r3
 80061f6:	401a      	ands	r2, r3
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	6a1a      	ldr	r2, [r3, #32]
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	f003 031f 	and.w	r3, r3, #31
 8006206:	6879      	ldr	r1, [r7, #4]
 8006208:	fa01 f303 	lsl.w	r3, r1, r3
 800620c:	431a      	orrs	r2, r3
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	621a      	str	r2, [r3, #32]
}
 8006212:	bf00      	nop
 8006214:	371c      	adds	r7, #28
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr
	...

08006220 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006220:	b480      	push	{r7}
 8006222:	b085      	sub	sp, #20
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006230:	2b01      	cmp	r3, #1
 8006232:	d101      	bne.n	8006238 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006234:	2302      	movs	r3, #2
 8006236:	e05a      	b.n	80062ee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2201      	movs	r2, #1
 800623c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2202      	movs	r2, #2
 8006244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800625e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	68fa      	ldr	r2, [r7, #12]
 8006266:	4313      	orrs	r3, r2
 8006268:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	68fa      	ldr	r2, [r7, #12]
 8006270:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a21      	ldr	r2, [pc, #132]	; (80062fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d022      	beq.n	80062c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006284:	d01d      	beq.n	80062c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a1d      	ldr	r2, [pc, #116]	; (8006300 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d018      	beq.n	80062c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a1b      	ldr	r2, [pc, #108]	; (8006304 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d013      	beq.n	80062c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a1a      	ldr	r2, [pc, #104]	; (8006308 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d00e      	beq.n	80062c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a18      	ldr	r2, [pc, #96]	; (800630c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d009      	beq.n	80062c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a17      	ldr	r2, [pc, #92]	; (8006310 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d004      	beq.n	80062c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a15      	ldr	r2, [pc, #84]	; (8006314 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d10c      	bne.n	80062dc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	68ba      	ldr	r2, [r7, #8]
 80062d0:	4313      	orrs	r3, r2
 80062d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	68ba      	ldr	r2, [r7, #8]
 80062da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2201      	movs	r2, #1
 80062e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2200      	movs	r2, #0
 80062e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062ec:	2300      	movs	r3, #0
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3714      	adds	r7, #20
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr
 80062fa:	bf00      	nop
 80062fc:	40010000 	.word	0x40010000
 8006300:	40000400 	.word	0x40000400
 8006304:	40000800 	.word	0x40000800
 8006308:	40000c00 	.word	0x40000c00
 800630c:	40010400 	.word	0x40010400
 8006310:	40014000 	.word	0x40014000
 8006314:	40001800 	.word	0x40001800

08006318 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006318:	b480      	push	{r7}
 800631a:	b083      	sub	sp, #12
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006320:	bf00      	nop
 8006322:	370c      	adds	r7, #12
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr

0800632c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800632c:	b480      	push	{r7}
 800632e:	b083      	sub	sp, #12
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006334:	bf00      	nop
 8006336:	370c      	adds	r7, #12
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr

08006340 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b082      	sub	sp, #8
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d101      	bne.n	8006352 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	e03f      	b.n	80063d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006358:	b2db      	uxtb	r3, r3
 800635a:	2b00      	cmp	r3, #0
 800635c:	d106      	bne.n	800636c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2200      	movs	r2, #0
 8006362:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f7fc fca8 	bl	8002cbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2224      	movs	r2, #36	; 0x24
 8006370:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	68da      	ldr	r2, [r3, #12]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006382:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f000 fbe9 	bl	8006b5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	691a      	ldr	r2, [r3, #16]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006398:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	695a      	ldr	r2, [r3, #20]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80063a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	68da      	ldr	r2, [r3, #12]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80063b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2200      	movs	r2, #0
 80063be:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2220      	movs	r2, #32
 80063c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2220      	movs	r2, #32
 80063cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80063d0:	2300      	movs	r3, #0
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3708      	adds	r7, #8
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}

080063da <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063da:	b580      	push	{r7, lr}
 80063dc:	b088      	sub	sp, #32
 80063de:	af02      	add	r7, sp, #8
 80063e0:	60f8      	str	r0, [r7, #12]
 80063e2:	60b9      	str	r1, [r7, #8]
 80063e4:	603b      	str	r3, [r7, #0]
 80063e6:	4613      	mov	r3, r2
 80063e8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80063ea:	2300      	movs	r3, #0
 80063ec:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	2b20      	cmp	r3, #32
 80063f8:	f040 8090 	bne.w	800651c <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d002      	beq.n	8006408 <HAL_UART_Receive+0x2e>
 8006402:	88fb      	ldrh	r3, [r7, #6]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d101      	bne.n	800640c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	e088      	b.n	800651e <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006412:	2b01      	cmp	r3, #1
 8006414:	d101      	bne.n	800641a <HAL_UART_Receive+0x40>
 8006416:	2302      	movs	r3, #2
 8006418:	e081      	b.n	800651e <HAL_UART_Receive+0x144>
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2201      	movs	r2, #1
 800641e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2200      	movs	r2, #0
 8006426:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2222      	movs	r2, #34	; 0x22
 800642c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006430:	f7fc fd24 	bl	8002e7c <HAL_GetTick>
 8006434:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	88fa      	ldrh	r2, [r7, #6]
 800643a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	88fa      	ldrh	r2, [r7, #6]
 8006440:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2200      	movs	r2, #0
 8006446:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800644a:	e05c      	b.n	8006506 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006450:	b29b      	uxth	r3, r3
 8006452:	3b01      	subs	r3, #1
 8006454:	b29a      	uxth	r2, r3
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006462:	d12b      	bne.n	80064bc <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	9300      	str	r3, [sp, #0]
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	2200      	movs	r2, #0
 800646c:	2120      	movs	r1, #32
 800646e:	68f8      	ldr	r0, [r7, #12]
 8006470:	f000 fa08 	bl	8006884 <UART_WaitOnFlagUntilTimeout>
 8006474:	4603      	mov	r3, r0
 8006476:	2b00      	cmp	r3, #0
 8006478:	d001      	beq.n	800647e <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 800647a:	2303      	movs	r3, #3
 800647c:	e04f      	b.n	800651e <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	691b      	ldr	r3, [r3, #16]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d10c      	bne.n	80064a4 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	b29b      	uxth	r3, r3
 8006492:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006496:	b29a      	uxth	r2, r3
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	3302      	adds	r3, #2
 80064a0:	60bb      	str	r3, [r7, #8]
 80064a2:	e030      	b.n	8006506 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	b29a      	uxth	r2, r3
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	3301      	adds	r3, #1
 80064b8:	60bb      	str	r3, [r7, #8]
 80064ba:	e024      	b.n	8006506 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	9300      	str	r3, [sp, #0]
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	2200      	movs	r2, #0
 80064c4:	2120      	movs	r1, #32
 80064c6:	68f8      	ldr	r0, [r7, #12]
 80064c8:	f000 f9dc 	bl	8006884 <UART_WaitOnFlagUntilTimeout>
 80064cc:	4603      	mov	r3, r0
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d001      	beq.n	80064d6 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 80064d2:	2303      	movs	r3, #3
 80064d4:	e023      	b.n	800651e <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	691b      	ldr	r3, [r3, #16]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d108      	bne.n	80064f0 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	6859      	ldr	r1, [r3, #4]
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	1c5a      	adds	r2, r3, #1
 80064e8:	60ba      	str	r2, [r7, #8]
 80064ea:	b2ca      	uxtb	r2, r1
 80064ec:	701a      	strb	r2, [r3, #0]
 80064ee:	e00a      	b.n	8006506 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	b2da      	uxtb	r2, r3
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	1c59      	adds	r1, r3, #1
 80064fc:	60b9      	str	r1, [r7, #8]
 80064fe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006502:	b2d2      	uxtb	r2, r2
 8006504:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800650a:	b29b      	uxth	r3, r3
 800650c:	2b00      	cmp	r3, #0
 800650e:	d19d      	bne.n	800644c <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2220      	movs	r2, #32
 8006514:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8006518:	2300      	movs	r3, #0
 800651a:	e000      	b.n	800651e <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 800651c:	2302      	movs	r3, #2
  }
}
 800651e:	4618      	mov	r0, r3
 8006520:	3718      	adds	r7, #24
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}

08006526 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006526:	b480      	push	{r7}
 8006528:	b085      	sub	sp, #20
 800652a:	af00      	add	r7, sp, #0
 800652c:	60f8      	str	r0, [r7, #12]
 800652e:	60b9      	str	r1, [r7, #8]
 8006530:	4613      	mov	r3, r2
 8006532:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800653a:	b2db      	uxtb	r3, r3
 800653c:	2b20      	cmp	r3, #32
 800653e:	d130      	bne.n	80065a2 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d002      	beq.n	800654c <HAL_UART_Transmit_IT+0x26>
 8006546:	88fb      	ldrh	r3, [r7, #6]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d101      	bne.n	8006550 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800654c:	2301      	movs	r3, #1
 800654e:	e029      	b.n	80065a4 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006556:	2b01      	cmp	r3, #1
 8006558:	d101      	bne.n	800655e <HAL_UART_Transmit_IT+0x38>
 800655a:	2302      	movs	r3, #2
 800655c:	e022      	b.n	80065a4 <HAL_UART_Transmit_IT+0x7e>
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2201      	movs	r2, #1
 8006562:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	68ba      	ldr	r2, [r7, #8]
 800656a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	88fa      	ldrh	r2, [r7, #6]
 8006570:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	88fa      	ldrh	r2, [r7, #6]
 8006576:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2200      	movs	r2, #0
 800657c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2221      	movs	r2, #33	; 0x21
 8006582:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2200      	movs	r2, #0
 800658a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	68da      	ldr	r2, [r3, #12]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800659c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800659e:	2300      	movs	r3, #0
 80065a0:	e000      	b.n	80065a4 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80065a2:	2302      	movs	r3, #2
  }
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3714      	adds	r7, #20
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr

080065b0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b085      	sub	sp, #20
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	60b9      	str	r1, [r7, #8]
 80065ba:	4613      	mov	r3, r2
 80065bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	2b20      	cmp	r3, #32
 80065c8:	d140      	bne.n	800664c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d002      	beq.n	80065d6 <HAL_UART_Receive_IT+0x26>
 80065d0:	88fb      	ldrh	r3, [r7, #6]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d101      	bne.n	80065da <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	e039      	b.n	800664e <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d101      	bne.n	80065e8 <HAL_UART_Receive_IT+0x38>
 80065e4:	2302      	movs	r3, #2
 80065e6:	e032      	b.n	800664e <HAL_UART_Receive_IT+0x9e>
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2201      	movs	r2, #1
 80065ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	68ba      	ldr	r2, [r7, #8]
 80065f4:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	88fa      	ldrh	r2, [r7, #6]
 80065fa:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	88fa      	ldrh	r2, [r7, #6]
 8006600:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2200      	movs	r2, #0
 8006606:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2222      	movs	r2, #34	; 0x22
 800660c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2200      	movs	r2, #0
 8006614:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	68da      	ldr	r2, [r3, #12]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006626:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	695a      	ldr	r2, [r3, #20]
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f042 0201 	orr.w	r2, r2, #1
 8006636:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	68da      	ldr	r2, [r3, #12]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f042 0220 	orr.w	r2, r2, #32
 8006646:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006648:	2300      	movs	r3, #0
 800664a:	e000      	b.n	800664e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800664c:	2302      	movs	r3, #2
  }
}
 800664e:	4618      	mov	r0, r3
 8006650:	3714      	adds	r7, #20
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr
	...

0800665c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b088      	sub	sp, #32
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	68db      	ldr	r3, [r3, #12]
 8006672:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	695b      	ldr	r3, [r3, #20]
 800667a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800667c:	2300      	movs	r3, #0
 800667e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006680:	2300      	movs	r3, #0
 8006682:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006684:	69fb      	ldr	r3, [r7, #28]
 8006686:	f003 030f 	and.w	r3, r3, #15
 800668a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d10d      	bne.n	80066ae <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006692:	69fb      	ldr	r3, [r7, #28]
 8006694:	f003 0320 	and.w	r3, r3, #32
 8006698:	2b00      	cmp	r3, #0
 800669a:	d008      	beq.n	80066ae <HAL_UART_IRQHandler+0x52>
 800669c:	69bb      	ldr	r3, [r7, #24]
 800669e:	f003 0320 	and.w	r3, r3, #32
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d003      	beq.n	80066ae <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f000 f9d6 	bl	8006a58 <UART_Receive_IT>
      return;
 80066ac:	e0d0      	b.n	8006850 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	f000 80b0 	beq.w	8006816 <HAL_UART_IRQHandler+0x1ba>
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	f003 0301 	and.w	r3, r3, #1
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d105      	bne.n	80066cc <HAL_UART_IRQHandler+0x70>
 80066c0:	69bb      	ldr	r3, [r7, #24]
 80066c2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	f000 80a5 	beq.w	8006816 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80066cc:	69fb      	ldr	r3, [r7, #28]
 80066ce:	f003 0301 	and.w	r3, r3, #1
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d00a      	beq.n	80066ec <HAL_UART_IRQHandler+0x90>
 80066d6:	69bb      	ldr	r3, [r7, #24]
 80066d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d005      	beq.n	80066ec <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066e4:	f043 0201 	orr.w	r2, r3, #1
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80066ec:	69fb      	ldr	r3, [r7, #28]
 80066ee:	f003 0304 	and.w	r3, r3, #4
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d00a      	beq.n	800670c <HAL_UART_IRQHandler+0xb0>
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	f003 0301 	and.w	r3, r3, #1
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d005      	beq.n	800670c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006704:	f043 0202 	orr.w	r2, r3, #2
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800670c:	69fb      	ldr	r3, [r7, #28]
 800670e:	f003 0302 	and.w	r3, r3, #2
 8006712:	2b00      	cmp	r3, #0
 8006714:	d00a      	beq.n	800672c <HAL_UART_IRQHandler+0xd0>
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	f003 0301 	and.w	r3, r3, #1
 800671c:	2b00      	cmp	r3, #0
 800671e:	d005      	beq.n	800672c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006724:	f043 0204 	orr.w	r2, r3, #4
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800672c:	69fb      	ldr	r3, [r7, #28]
 800672e:	f003 0308 	and.w	r3, r3, #8
 8006732:	2b00      	cmp	r3, #0
 8006734:	d00f      	beq.n	8006756 <HAL_UART_IRQHandler+0xfa>
 8006736:	69bb      	ldr	r3, [r7, #24]
 8006738:	f003 0320 	and.w	r3, r3, #32
 800673c:	2b00      	cmp	r3, #0
 800673e:	d104      	bne.n	800674a <HAL_UART_IRQHandler+0xee>
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	f003 0301 	and.w	r3, r3, #1
 8006746:	2b00      	cmp	r3, #0
 8006748:	d005      	beq.n	8006756 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800674e:	f043 0208 	orr.w	r2, r3, #8
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800675a:	2b00      	cmp	r3, #0
 800675c:	d077      	beq.n	800684e <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800675e:	69fb      	ldr	r3, [r7, #28]
 8006760:	f003 0320 	and.w	r3, r3, #32
 8006764:	2b00      	cmp	r3, #0
 8006766:	d007      	beq.n	8006778 <HAL_UART_IRQHandler+0x11c>
 8006768:	69bb      	ldr	r3, [r7, #24]
 800676a:	f003 0320 	and.w	r3, r3, #32
 800676e:	2b00      	cmp	r3, #0
 8006770:	d002      	beq.n	8006778 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f000 f970 	bl	8006a58 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	695b      	ldr	r3, [r3, #20]
 800677e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006782:	2b40      	cmp	r3, #64	; 0x40
 8006784:	bf0c      	ite	eq
 8006786:	2301      	moveq	r3, #1
 8006788:	2300      	movne	r3, #0
 800678a:	b2db      	uxtb	r3, r3
 800678c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006792:	f003 0308 	and.w	r3, r3, #8
 8006796:	2b00      	cmp	r3, #0
 8006798:	d102      	bne.n	80067a0 <HAL_UART_IRQHandler+0x144>
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d031      	beq.n	8006804 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f000 f8b9 	bl	8006918 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	695b      	ldr	r3, [r3, #20]
 80067ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067b0:	2b40      	cmp	r3, #64	; 0x40
 80067b2:	d123      	bne.n	80067fc <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	695a      	ldr	r2, [r3, #20]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067c2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d013      	beq.n	80067f4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067d0:	4a21      	ldr	r2, [pc, #132]	; (8006858 <HAL_UART_IRQHandler+0x1fc>)
 80067d2:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067d8:	4618      	mov	r0, r3
 80067da:	f7fc fcff 	bl	80031dc <HAL_DMA_Abort_IT>
 80067de:	4603      	mov	r3, r0
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d016      	beq.n	8006812 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067ea:	687a      	ldr	r2, [r7, #4]
 80067ec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80067ee:	4610      	mov	r0, r2
 80067f0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067f2:	e00e      	b.n	8006812 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f000 f83b 	bl	8006870 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067fa:	e00a      	b.n	8006812 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f000 f837 	bl	8006870 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006802:	e006      	b.n	8006812 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f000 f833 	bl	8006870 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2200      	movs	r2, #0
 800680e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8006810:	e01d      	b.n	800684e <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006812:	bf00      	nop
    return;
 8006814:	e01b      	b.n	800684e <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006816:	69fb      	ldr	r3, [r7, #28]
 8006818:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800681c:	2b00      	cmp	r3, #0
 800681e:	d008      	beq.n	8006832 <HAL_UART_IRQHandler+0x1d6>
 8006820:	69bb      	ldr	r3, [r7, #24]
 8006822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006826:	2b00      	cmp	r3, #0
 8006828:	d003      	beq.n	8006832 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f000 f8a6 	bl	800697c <UART_Transmit_IT>
    return;
 8006830:	e00e      	b.n	8006850 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006832:	69fb      	ldr	r3, [r7, #28]
 8006834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006838:	2b00      	cmp	r3, #0
 800683a:	d009      	beq.n	8006850 <HAL_UART_IRQHandler+0x1f4>
 800683c:	69bb      	ldr	r3, [r7, #24]
 800683e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006842:	2b00      	cmp	r3, #0
 8006844:	d004      	beq.n	8006850 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f000 f8ee 	bl	8006a28 <UART_EndTransmit_IT>
    return;
 800684c:	e000      	b.n	8006850 <HAL_UART_IRQHandler+0x1f4>
    return;
 800684e:	bf00      	nop
  }
}
 8006850:	3720      	adds	r7, #32
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
 8006856:	bf00      	nop
 8006858:	08006955 	.word	0x08006955

0800685c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800685c:	b480      	push	{r7}
 800685e:	b083      	sub	sp, #12
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006864:	bf00      	nop
 8006866:	370c      	adds	r7, #12
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr

08006870 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006870:	b480      	push	{r7}
 8006872:	b083      	sub	sp, #12
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006878:	bf00      	nop
 800687a:	370c      	adds	r7, #12
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr

08006884 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b084      	sub	sp, #16
 8006888:	af00      	add	r7, sp, #0
 800688a:	60f8      	str	r0, [r7, #12]
 800688c:	60b9      	str	r1, [r7, #8]
 800688e:	603b      	str	r3, [r7, #0]
 8006890:	4613      	mov	r3, r2
 8006892:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006894:	e02c      	b.n	80068f0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006896:	69bb      	ldr	r3, [r7, #24]
 8006898:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800689c:	d028      	beq.n	80068f0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800689e:	69bb      	ldr	r3, [r7, #24]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d007      	beq.n	80068b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80068a4:	f7fc faea 	bl	8002e7c <HAL_GetTick>
 80068a8:	4602      	mov	r2, r0
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	1ad3      	subs	r3, r2, r3
 80068ae:	69ba      	ldr	r2, [r7, #24]
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d21d      	bcs.n	80068f0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	68da      	ldr	r2, [r3, #12]
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80068c2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	695a      	ldr	r2, [r3, #20]
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f022 0201 	bic.w	r2, r2, #1
 80068d2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2220      	movs	r2, #32
 80068d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2220      	movs	r2, #32
 80068e0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2200      	movs	r2, #0
 80068e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80068ec:	2303      	movs	r3, #3
 80068ee:	e00f      	b.n	8006910 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	4013      	ands	r3, r2
 80068fa:	68ba      	ldr	r2, [r7, #8]
 80068fc:	429a      	cmp	r2, r3
 80068fe:	bf0c      	ite	eq
 8006900:	2301      	moveq	r3, #1
 8006902:	2300      	movne	r3, #0
 8006904:	b2db      	uxtb	r3, r3
 8006906:	461a      	mov	r2, r3
 8006908:	79fb      	ldrb	r3, [r7, #7]
 800690a:	429a      	cmp	r2, r3
 800690c:	d0c3      	beq.n	8006896 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800690e:	2300      	movs	r3, #0
}
 8006910:	4618      	mov	r0, r3
 8006912:	3710      	adds	r7, #16
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}

08006918 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006918:	b480      	push	{r7}
 800691a:	b083      	sub	sp, #12
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	68da      	ldr	r2, [r3, #12]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800692e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	695a      	ldr	r2, [r3, #20]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f022 0201 	bic.w	r2, r2, #1
 800693e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2220      	movs	r2, #32
 8006944:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006948:	bf00      	nop
 800694a:	370c      	adds	r7, #12
 800694c:	46bd      	mov	sp, r7
 800694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006952:	4770      	bx	lr

08006954 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b084      	sub	sp, #16
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006960:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2200      	movs	r2, #0
 8006966:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2200      	movs	r2, #0
 800696c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800696e:	68f8      	ldr	r0, [r7, #12]
 8006970:	f7ff ff7e 	bl	8006870 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006974:	bf00      	nop
 8006976:	3710      	adds	r7, #16
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}

0800697c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800697c:	b480      	push	{r7}
 800697e:	b085      	sub	sp, #20
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800698a:	b2db      	uxtb	r3, r3
 800698c:	2b21      	cmp	r3, #33	; 0x21
 800698e:	d144      	bne.n	8006a1a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006998:	d11a      	bne.n	80069d0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6a1b      	ldr	r3, [r3, #32]
 800699e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	881b      	ldrh	r3, [r3, #0]
 80069a4:	461a      	mov	r2, r3
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069ae:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	691b      	ldr	r3, [r3, #16]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d105      	bne.n	80069c4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6a1b      	ldr	r3, [r3, #32]
 80069bc:	1c9a      	adds	r2, r3, #2
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	621a      	str	r2, [r3, #32]
 80069c2:	e00e      	b.n	80069e2 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6a1b      	ldr	r3, [r3, #32]
 80069c8:	1c5a      	adds	r2, r3, #1
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	621a      	str	r2, [r3, #32]
 80069ce:	e008      	b.n	80069e2 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6a1b      	ldr	r3, [r3, #32]
 80069d4:	1c59      	adds	r1, r3, #1
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	6211      	str	r1, [r2, #32]
 80069da:	781a      	ldrb	r2, [r3, #0]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	3b01      	subs	r3, #1
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	4619      	mov	r1, r3
 80069f0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d10f      	bne.n	8006a16 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	68da      	ldr	r2, [r3, #12]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a04:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	68da      	ldr	r2, [r3, #12]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a14:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006a16:	2300      	movs	r3, #0
 8006a18:	e000      	b.n	8006a1c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006a1a:	2302      	movs	r3, #2
  }
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3714      	adds	r7, #20
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr

08006a28 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b082      	sub	sp, #8
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	68da      	ldr	r2, [r3, #12]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a3e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2220      	movs	r2, #32
 8006a44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f7ff ff07 	bl	800685c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006a4e:	2300      	movs	r3, #0
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3708      	adds	r7, #8
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}

08006a58 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b084      	sub	sp, #16
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006a66:	b2db      	uxtb	r3, r3
 8006a68:	2b22      	cmp	r3, #34	; 0x22
 8006a6a:	d171      	bne.n	8006b50 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a74:	d123      	bne.n	8006abe <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a7a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	691b      	ldr	r3, [r3, #16]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d10e      	bne.n	8006aa2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a90:	b29a      	uxth	r2, r3
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a9a:	1c9a      	adds	r2, r3, #2
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	629a      	str	r2, [r3, #40]	; 0x28
 8006aa0:	e029      	b.n	8006af6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	b2db      	uxtb	r3, r3
 8006aac:	b29a      	uxth	r2, r3
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ab6:	1c5a      	adds	r2, r3, #1
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	629a      	str	r2, [r3, #40]	; 0x28
 8006abc:	e01b      	b.n	8006af6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	691b      	ldr	r3, [r3, #16]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d10a      	bne.n	8006adc <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	6858      	ldr	r0, [r3, #4]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ad0:	1c59      	adds	r1, r3, #1
 8006ad2:	687a      	ldr	r2, [r7, #4]
 8006ad4:	6291      	str	r1, [r2, #40]	; 0x28
 8006ad6:	b2c2      	uxtb	r2, r0
 8006ad8:	701a      	strb	r2, [r3, #0]
 8006ada:	e00c      	b.n	8006af6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	b2da      	uxtb	r2, r3
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ae8:	1c58      	adds	r0, r3, #1
 8006aea:	6879      	ldr	r1, [r7, #4]
 8006aec:	6288      	str	r0, [r1, #40]	; 0x28
 8006aee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006af2:	b2d2      	uxtb	r2, r2
 8006af4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	3b01      	subs	r3, #1
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	687a      	ldr	r2, [r7, #4]
 8006b02:	4619      	mov	r1, r3
 8006b04:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d120      	bne.n	8006b4c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	68da      	ldr	r2, [r3, #12]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f022 0220 	bic.w	r2, r2, #32
 8006b18:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	68da      	ldr	r2, [r3, #12]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b28:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	695a      	ldr	r2, [r3, #20]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f022 0201 	bic.w	r2, r2, #1
 8006b38:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2220      	movs	r2, #32
 8006b3e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f7fa fc2c 	bl	80013a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	e002      	b.n	8006b52 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	e000      	b.n	8006b52 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006b50:	2302      	movs	r3, #2
  }
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3710      	adds	r7, #16
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}
	...

08006b5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b60:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b6a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	691b      	ldr	r3, [r3, #16]
 8006b72:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006b76:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006b7a:	68d9      	ldr	r1, [r3, #12]
 8006b7c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006b80:	681a      	ldr	r2, [r3, #0]
 8006b82:	ea40 0301 	orr.w	r3, r0, r1
 8006b86:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006b88:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006b8c:	689a      	ldr	r2, [r3, #8]
 8006b8e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006b92:	691b      	ldr	r3, [r3, #16]
 8006b94:	431a      	orrs	r2, r3
 8006b96:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006b9a:	695b      	ldr	r3, [r3, #20]
 8006b9c:	431a      	orrs	r2, r3
 8006b9e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006ba2:	69db      	ldr	r3, [r3, #28]
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 8006baa:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	68db      	ldr	r3, [r3, #12]
 8006bb2:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006bb6:	f021 010c 	bic.w	r1, r1, #12
 8006bba:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8006bc4:	430b      	orrs	r3, r1
 8006bc6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006bc8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	695b      	ldr	r3, [r3, #20]
 8006bd0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006bd4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006bd8:	6999      	ldr	r1, [r3, #24]
 8006bda:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006bde:	681a      	ldr	r2, [r3, #0]
 8006be0:	ea40 0301 	orr.w	r3, r0, r1
 8006be4:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006be6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006bea:	69db      	ldr	r3, [r3, #28]
 8006bec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bf0:	f040 824a 	bne.w	8007088 <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006bf4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	4b96      	ldr	r3, [pc, #600]	; (8006e54 <UART_SetConfig+0x2f8>)
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	d006      	beq.n	8006c0e <UART_SetConfig+0xb2>
 8006c00:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	4b94      	ldr	r3, [pc, #592]	; (8006e58 <UART_SetConfig+0x2fc>)
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	f040 8129 	bne.w	8006e60 <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006c0e:	f7fe f9e9 	bl	8004fe4 <HAL_RCC_GetPCLK2Freq>
 8006c12:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006c16:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8006c20:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 8006c24:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 8006c28:	4622      	mov	r2, r4
 8006c2a:	462b      	mov	r3, r5
 8006c2c:	1891      	adds	r1, r2, r2
 8006c2e:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8006c32:	415b      	adcs	r3, r3
 8006c34:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006c38:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8006c3c:	4621      	mov	r1, r4
 8006c3e:	1851      	adds	r1, r2, r1
 8006c40:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8006c44:	4629      	mov	r1, r5
 8006c46:	414b      	adcs	r3, r1
 8006c48:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006c4c:	f04f 0200 	mov.w	r2, #0
 8006c50:	f04f 0300 	mov.w	r3, #0
 8006c54:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 8006c58:	4649      	mov	r1, r9
 8006c5a:	00cb      	lsls	r3, r1, #3
 8006c5c:	4641      	mov	r1, r8
 8006c5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c62:	4641      	mov	r1, r8
 8006c64:	00ca      	lsls	r2, r1, #3
 8006c66:	4610      	mov	r0, r2
 8006c68:	4619      	mov	r1, r3
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	4622      	mov	r2, r4
 8006c6e:	189b      	adds	r3, r3, r2
 8006c70:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8006c74:	462b      	mov	r3, r5
 8006c76:	460a      	mov	r2, r1
 8006c78:	eb42 0303 	adc.w	r3, r2, r3
 8006c7c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8006c80:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	2200      	movs	r2, #0
 8006c88:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8006c8c:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 8006c90:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 8006c94:	460b      	mov	r3, r1
 8006c96:	18db      	adds	r3, r3, r3
 8006c98:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006c9c:	4613      	mov	r3, r2
 8006c9e:	eb42 0303 	adc.w	r3, r2, r3
 8006ca2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006ca6:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8006caa:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8006cae:	f7f9 febd 	bl	8000a2c <__aeabi_uldivmod>
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	460b      	mov	r3, r1
 8006cb6:	4b69      	ldr	r3, [pc, #420]	; (8006e5c <UART_SetConfig+0x300>)
 8006cb8:	fba3 2302 	umull	r2, r3, r3, r2
 8006cbc:	095b      	lsrs	r3, r3, #5
 8006cbe:	011c      	lsls	r4, r3, #4
 8006cc0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8006cca:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8006cce:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 8006cd2:	4642      	mov	r2, r8
 8006cd4:	464b      	mov	r3, r9
 8006cd6:	1891      	adds	r1, r2, r2
 8006cd8:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8006cdc:	415b      	adcs	r3, r3
 8006cde:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006ce2:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8006ce6:	4641      	mov	r1, r8
 8006ce8:	1851      	adds	r1, r2, r1
 8006cea:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8006cee:	4649      	mov	r1, r9
 8006cf0:	414b      	adcs	r3, r1
 8006cf2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006cf6:	f04f 0200 	mov.w	r2, #0
 8006cfa:	f04f 0300 	mov.w	r3, #0
 8006cfe:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 8006d02:	4659      	mov	r1, fp
 8006d04:	00cb      	lsls	r3, r1, #3
 8006d06:	4651      	mov	r1, sl
 8006d08:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d0c:	4651      	mov	r1, sl
 8006d0e:	00ca      	lsls	r2, r1, #3
 8006d10:	4610      	mov	r0, r2
 8006d12:	4619      	mov	r1, r3
 8006d14:	4603      	mov	r3, r0
 8006d16:	4642      	mov	r2, r8
 8006d18:	189b      	adds	r3, r3, r2
 8006d1a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8006d1e:	464b      	mov	r3, r9
 8006d20:	460a      	mov	r2, r1
 8006d22:	eb42 0303 	adc.w	r3, r2, r3
 8006d26:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8006d2a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	2200      	movs	r2, #0
 8006d32:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8006d36:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 8006d3a:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 8006d3e:	460b      	mov	r3, r1
 8006d40:	18db      	adds	r3, r3, r3
 8006d42:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006d46:	4613      	mov	r3, r2
 8006d48:	eb42 0303 	adc.w	r3, r2, r3
 8006d4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006d50:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8006d54:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 8006d58:	f7f9 fe68 	bl	8000a2c <__aeabi_uldivmod>
 8006d5c:	4602      	mov	r2, r0
 8006d5e:	460b      	mov	r3, r1
 8006d60:	4611      	mov	r1, r2
 8006d62:	4b3e      	ldr	r3, [pc, #248]	; (8006e5c <UART_SetConfig+0x300>)
 8006d64:	fba3 2301 	umull	r2, r3, r3, r1
 8006d68:	095b      	lsrs	r3, r3, #5
 8006d6a:	2264      	movs	r2, #100	; 0x64
 8006d6c:	fb02 f303 	mul.w	r3, r2, r3
 8006d70:	1acb      	subs	r3, r1, r3
 8006d72:	00db      	lsls	r3, r3, #3
 8006d74:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006d78:	4b38      	ldr	r3, [pc, #224]	; (8006e5c <UART_SetConfig+0x300>)
 8006d7a:	fba3 2302 	umull	r2, r3, r3, r2
 8006d7e:	095b      	lsrs	r3, r3, #5
 8006d80:	005b      	lsls	r3, r3, #1
 8006d82:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006d86:	441c      	add	r4, r3
 8006d88:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8006d92:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 8006d96:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 8006d9a:	4642      	mov	r2, r8
 8006d9c:	464b      	mov	r3, r9
 8006d9e:	1891      	adds	r1, r2, r2
 8006da0:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8006da4:	415b      	adcs	r3, r3
 8006da6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006daa:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8006dae:	4641      	mov	r1, r8
 8006db0:	1851      	adds	r1, r2, r1
 8006db2:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8006db6:	4649      	mov	r1, r9
 8006db8:	414b      	adcs	r3, r1
 8006dba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006dbe:	f04f 0200 	mov.w	r2, #0
 8006dc2:	f04f 0300 	mov.w	r3, #0
 8006dc6:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 8006dca:	4659      	mov	r1, fp
 8006dcc:	00cb      	lsls	r3, r1, #3
 8006dce:	4651      	mov	r1, sl
 8006dd0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006dd4:	4651      	mov	r1, sl
 8006dd6:	00ca      	lsls	r2, r1, #3
 8006dd8:	4610      	mov	r0, r2
 8006dda:	4619      	mov	r1, r3
 8006ddc:	4603      	mov	r3, r0
 8006dde:	4642      	mov	r2, r8
 8006de0:	189b      	adds	r3, r3, r2
 8006de2:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8006de6:	464b      	mov	r3, r9
 8006de8:	460a      	mov	r2, r1
 8006dea:	eb42 0303 	adc.w	r3, r2, r3
 8006dee:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8006df2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8006dfe:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 8006e02:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 8006e06:	460b      	mov	r3, r1
 8006e08:	18db      	adds	r3, r3, r3
 8006e0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006e0e:	4613      	mov	r3, r2
 8006e10:	eb42 0303 	adc.w	r3, r2, r3
 8006e14:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006e18:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8006e1c:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 8006e20:	f7f9 fe04 	bl	8000a2c <__aeabi_uldivmod>
 8006e24:	4602      	mov	r2, r0
 8006e26:	460b      	mov	r3, r1
 8006e28:	4b0c      	ldr	r3, [pc, #48]	; (8006e5c <UART_SetConfig+0x300>)
 8006e2a:	fba3 1302 	umull	r1, r3, r3, r2
 8006e2e:	095b      	lsrs	r3, r3, #5
 8006e30:	2164      	movs	r1, #100	; 0x64
 8006e32:	fb01 f303 	mul.w	r3, r1, r3
 8006e36:	1ad3      	subs	r3, r2, r3
 8006e38:	00db      	lsls	r3, r3, #3
 8006e3a:	3332      	adds	r3, #50	; 0x32
 8006e3c:	4a07      	ldr	r2, [pc, #28]	; (8006e5c <UART_SetConfig+0x300>)
 8006e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8006e42:	095b      	lsrs	r3, r3, #5
 8006e44:	f003 0207 	and.w	r2, r3, #7
 8006e48:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4422      	add	r2, r4
 8006e50:	609a      	str	r2, [r3, #8]
 8006e52:	e349      	b.n	80074e8 <UART_SetConfig+0x98c>
 8006e54:	40011000 	.word	0x40011000
 8006e58:	40011400 	.word	0x40011400
 8006e5c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006e60:	f7fe f8ac 	bl	8004fbc <HAL_RCC_GetPCLK1Freq>
 8006e64:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006e68:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8006e72:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 8006e76:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 8006e7a:	4622      	mov	r2, r4
 8006e7c:	462b      	mov	r3, r5
 8006e7e:	1891      	adds	r1, r2, r2
 8006e80:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8006e84:	415b      	adcs	r3, r3
 8006e86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006e8a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8006e8e:	4621      	mov	r1, r4
 8006e90:	eb12 0a01 	adds.w	sl, r2, r1
 8006e94:	4629      	mov	r1, r5
 8006e96:	eb43 0b01 	adc.w	fp, r3, r1
 8006e9a:	f04f 0200 	mov.w	r2, #0
 8006e9e:	f04f 0300 	mov.w	r3, #0
 8006ea2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006ea6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006eaa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006eae:	4692      	mov	sl, r2
 8006eb0:	469b      	mov	fp, r3
 8006eb2:	4623      	mov	r3, r4
 8006eb4:	eb1a 0303 	adds.w	r3, sl, r3
 8006eb8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8006ebc:	462b      	mov	r3, r5
 8006ebe:	eb4b 0303 	adc.w	r3, fp, r3
 8006ec2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8006ec6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8006ed2:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8006ed6:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 8006eda:	460b      	mov	r3, r1
 8006edc:	18db      	adds	r3, r3, r3
 8006ede:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006ee2:	4613      	mov	r3, r2
 8006ee4:	eb42 0303 	adc.w	r3, r2, r3
 8006ee8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006eec:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8006ef0:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 8006ef4:	f7f9 fd9a 	bl	8000a2c <__aeabi_uldivmod>
 8006ef8:	4602      	mov	r2, r0
 8006efa:	460b      	mov	r3, r1
 8006efc:	4b61      	ldr	r3, [pc, #388]	; (8007084 <UART_SetConfig+0x528>)
 8006efe:	fba3 2302 	umull	r2, r3, r3, r2
 8006f02:	095b      	lsrs	r3, r3, #5
 8006f04:	011c      	lsls	r4, r3, #4
 8006f06:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8006f10:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 8006f14:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 8006f18:	4642      	mov	r2, r8
 8006f1a:	464b      	mov	r3, r9
 8006f1c:	1891      	adds	r1, r2, r2
 8006f1e:	67b9      	str	r1, [r7, #120]	; 0x78
 8006f20:	415b      	adcs	r3, r3
 8006f22:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006f24:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8006f28:	4641      	mov	r1, r8
 8006f2a:	1851      	adds	r1, r2, r1
 8006f2c:	6739      	str	r1, [r7, #112]	; 0x70
 8006f2e:	4649      	mov	r1, r9
 8006f30:	414b      	adcs	r3, r1
 8006f32:	677b      	str	r3, [r7, #116]	; 0x74
 8006f34:	f04f 0200 	mov.w	r2, #0
 8006f38:	f04f 0300 	mov.w	r3, #0
 8006f3c:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 8006f40:	4659      	mov	r1, fp
 8006f42:	00cb      	lsls	r3, r1, #3
 8006f44:	4651      	mov	r1, sl
 8006f46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f4a:	4651      	mov	r1, sl
 8006f4c:	00ca      	lsls	r2, r1, #3
 8006f4e:	4610      	mov	r0, r2
 8006f50:	4619      	mov	r1, r3
 8006f52:	4603      	mov	r3, r0
 8006f54:	4642      	mov	r2, r8
 8006f56:	189b      	adds	r3, r3, r2
 8006f58:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8006f5c:	464b      	mov	r3, r9
 8006f5e:	460a      	mov	r2, r1
 8006f60:	eb42 0303 	adc.w	r3, r2, r3
 8006f64:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8006f68:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8006f74:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 8006f78:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 8006f7c:	460b      	mov	r3, r1
 8006f7e:	18db      	adds	r3, r3, r3
 8006f80:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f82:	4613      	mov	r3, r2
 8006f84:	eb42 0303 	adc.w	r3, r2, r3
 8006f88:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006f8a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8006f8e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8006f92:	f7f9 fd4b 	bl	8000a2c <__aeabi_uldivmod>
 8006f96:	4602      	mov	r2, r0
 8006f98:	460b      	mov	r3, r1
 8006f9a:	4611      	mov	r1, r2
 8006f9c:	4b39      	ldr	r3, [pc, #228]	; (8007084 <UART_SetConfig+0x528>)
 8006f9e:	fba3 2301 	umull	r2, r3, r3, r1
 8006fa2:	095b      	lsrs	r3, r3, #5
 8006fa4:	2264      	movs	r2, #100	; 0x64
 8006fa6:	fb02 f303 	mul.w	r3, r2, r3
 8006faa:	1acb      	subs	r3, r1, r3
 8006fac:	00db      	lsls	r3, r3, #3
 8006fae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006fb2:	4b34      	ldr	r3, [pc, #208]	; (8007084 <UART_SetConfig+0x528>)
 8006fb4:	fba3 2302 	umull	r2, r3, r3, r2
 8006fb8:	095b      	lsrs	r3, r3, #5
 8006fba:	005b      	lsls	r3, r3, #1
 8006fbc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006fc0:	441c      	add	r4, r3
 8006fc2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8006fcc:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8006fd0:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 8006fd4:	4642      	mov	r2, r8
 8006fd6:	464b      	mov	r3, r9
 8006fd8:	1891      	adds	r1, r2, r2
 8006fda:	6639      	str	r1, [r7, #96]	; 0x60
 8006fdc:	415b      	adcs	r3, r3
 8006fde:	667b      	str	r3, [r7, #100]	; 0x64
 8006fe0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8006fe4:	4641      	mov	r1, r8
 8006fe6:	1851      	adds	r1, r2, r1
 8006fe8:	65b9      	str	r1, [r7, #88]	; 0x58
 8006fea:	4649      	mov	r1, r9
 8006fec:	414b      	adcs	r3, r1
 8006fee:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ff0:	f04f 0200 	mov.w	r2, #0
 8006ff4:	f04f 0300 	mov.w	r3, #0
 8006ff8:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8006ffc:	4659      	mov	r1, fp
 8006ffe:	00cb      	lsls	r3, r1, #3
 8007000:	4651      	mov	r1, sl
 8007002:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007006:	4651      	mov	r1, sl
 8007008:	00ca      	lsls	r2, r1, #3
 800700a:	4610      	mov	r0, r2
 800700c:	4619      	mov	r1, r3
 800700e:	4603      	mov	r3, r0
 8007010:	4642      	mov	r2, r8
 8007012:	189b      	adds	r3, r3, r2
 8007014:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8007018:	464b      	mov	r3, r9
 800701a:	460a      	mov	r2, r1
 800701c:	eb42 0303 	adc.w	r3, r2, r3
 8007020:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8007024:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8007030:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 8007034:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 8007038:	460b      	mov	r3, r1
 800703a:	18db      	adds	r3, r3, r3
 800703c:	653b      	str	r3, [r7, #80]	; 0x50
 800703e:	4613      	mov	r3, r2
 8007040:	eb42 0303 	adc.w	r3, r2, r3
 8007044:	657b      	str	r3, [r7, #84]	; 0x54
 8007046:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800704a:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800704e:	f7f9 fced 	bl	8000a2c <__aeabi_uldivmod>
 8007052:	4602      	mov	r2, r0
 8007054:	460b      	mov	r3, r1
 8007056:	4b0b      	ldr	r3, [pc, #44]	; (8007084 <UART_SetConfig+0x528>)
 8007058:	fba3 1302 	umull	r1, r3, r3, r2
 800705c:	095b      	lsrs	r3, r3, #5
 800705e:	2164      	movs	r1, #100	; 0x64
 8007060:	fb01 f303 	mul.w	r3, r1, r3
 8007064:	1ad3      	subs	r3, r2, r3
 8007066:	00db      	lsls	r3, r3, #3
 8007068:	3332      	adds	r3, #50	; 0x32
 800706a:	4a06      	ldr	r2, [pc, #24]	; (8007084 <UART_SetConfig+0x528>)
 800706c:	fba2 2303 	umull	r2, r3, r2, r3
 8007070:	095b      	lsrs	r3, r3, #5
 8007072:	f003 0207 	and.w	r2, r3, #7
 8007076:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4422      	add	r2, r4
 800707e:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007080:	e232      	b.n	80074e8 <UART_SetConfig+0x98c>
 8007082:	bf00      	nop
 8007084:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007088:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800708c:	681a      	ldr	r2, [r3, #0]
 800708e:	4b8d      	ldr	r3, [pc, #564]	; (80072c4 <UART_SetConfig+0x768>)
 8007090:	429a      	cmp	r2, r3
 8007092:	d006      	beq.n	80070a2 <UART_SetConfig+0x546>
 8007094:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8007098:	681a      	ldr	r2, [r3, #0]
 800709a:	4b8b      	ldr	r3, [pc, #556]	; (80072c8 <UART_SetConfig+0x76c>)
 800709c:	429a      	cmp	r2, r3
 800709e:	f040 8117 	bne.w	80072d0 <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 80070a2:	f7fd ff9f 	bl	8004fe4 <HAL_RCC_GetPCLK2Freq>
 80070a6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80070aa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80070ae:	2200      	movs	r2, #0
 80070b0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 80070b4:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 80070b8:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 80070bc:	4622      	mov	r2, r4
 80070be:	462b      	mov	r3, r5
 80070c0:	1891      	adds	r1, r2, r2
 80070c2:	64b9      	str	r1, [r7, #72]	; 0x48
 80070c4:	415b      	adcs	r3, r3
 80070c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80070c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80070cc:	4621      	mov	r1, r4
 80070ce:	eb12 0801 	adds.w	r8, r2, r1
 80070d2:	4629      	mov	r1, r5
 80070d4:	eb43 0901 	adc.w	r9, r3, r1
 80070d8:	f04f 0200 	mov.w	r2, #0
 80070dc:	f04f 0300 	mov.w	r3, #0
 80070e0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80070e4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80070e8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80070ec:	4690      	mov	r8, r2
 80070ee:	4699      	mov	r9, r3
 80070f0:	4623      	mov	r3, r4
 80070f2:	eb18 0303 	adds.w	r3, r8, r3
 80070f6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80070fa:	462b      	mov	r3, r5
 80070fc:	eb49 0303 	adc.w	r3, r9, r3
 8007100:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8007104:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	2200      	movs	r2, #0
 800710c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8007110:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8007114:	f04f 0200 	mov.w	r2, #0
 8007118:	f04f 0300 	mov.w	r3, #0
 800711c:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 8007120:	4629      	mov	r1, r5
 8007122:	008b      	lsls	r3, r1, #2
 8007124:	4621      	mov	r1, r4
 8007126:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800712a:	4621      	mov	r1, r4
 800712c:	008a      	lsls	r2, r1, #2
 800712e:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 8007132:	f7f9 fc7b 	bl	8000a2c <__aeabi_uldivmod>
 8007136:	4602      	mov	r2, r0
 8007138:	460b      	mov	r3, r1
 800713a:	4b64      	ldr	r3, [pc, #400]	; (80072cc <UART_SetConfig+0x770>)
 800713c:	fba3 2302 	umull	r2, r3, r3, r2
 8007140:	095b      	lsrs	r3, r3, #5
 8007142:	011c      	lsls	r4, r3, #4
 8007144:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007148:	2200      	movs	r2, #0
 800714a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800714e:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8007152:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 8007156:	4642      	mov	r2, r8
 8007158:	464b      	mov	r3, r9
 800715a:	1891      	adds	r1, r2, r2
 800715c:	6439      	str	r1, [r7, #64]	; 0x40
 800715e:	415b      	adcs	r3, r3
 8007160:	647b      	str	r3, [r7, #68]	; 0x44
 8007162:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007166:	4641      	mov	r1, r8
 8007168:	1851      	adds	r1, r2, r1
 800716a:	63b9      	str	r1, [r7, #56]	; 0x38
 800716c:	4649      	mov	r1, r9
 800716e:	414b      	adcs	r3, r1
 8007170:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007172:	f04f 0200 	mov.w	r2, #0
 8007176:	f04f 0300 	mov.w	r3, #0
 800717a:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 800717e:	4659      	mov	r1, fp
 8007180:	00cb      	lsls	r3, r1, #3
 8007182:	4651      	mov	r1, sl
 8007184:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007188:	4651      	mov	r1, sl
 800718a:	00ca      	lsls	r2, r1, #3
 800718c:	4610      	mov	r0, r2
 800718e:	4619      	mov	r1, r3
 8007190:	4603      	mov	r3, r0
 8007192:	4642      	mov	r2, r8
 8007194:	189b      	adds	r3, r3, r2
 8007196:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 800719a:	464b      	mov	r3, r9
 800719c:	460a      	mov	r2, r1
 800719e:	eb42 0303 	adc.w	r3, r2, r3
 80071a2:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80071a6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	2200      	movs	r2, #0
 80071ae:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80071b2:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 80071b6:	f04f 0200 	mov.w	r2, #0
 80071ba:	f04f 0300 	mov.w	r3, #0
 80071be:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 80071c2:	4649      	mov	r1, r9
 80071c4:	008b      	lsls	r3, r1, #2
 80071c6:	4641      	mov	r1, r8
 80071c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80071cc:	4641      	mov	r1, r8
 80071ce:	008a      	lsls	r2, r1, #2
 80071d0:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 80071d4:	f7f9 fc2a 	bl	8000a2c <__aeabi_uldivmod>
 80071d8:	4602      	mov	r2, r0
 80071da:	460b      	mov	r3, r1
 80071dc:	4b3b      	ldr	r3, [pc, #236]	; (80072cc <UART_SetConfig+0x770>)
 80071de:	fba3 1302 	umull	r1, r3, r3, r2
 80071e2:	095b      	lsrs	r3, r3, #5
 80071e4:	2164      	movs	r1, #100	; 0x64
 80071e6:	fb01 f303 	mul.w	r3, r1, r3
 80071ea:	1ad3      	subs	r3, r2, r3
 80071ec:	011b      	lsls	r3, r3, #4
 80071ee:	3332      	adds	r3, #50	; 0x32
 80071f0:	4a36      	ldr	r2, [pc, #216]	; (80072cc <UART_SetConfig+0x770>)
 80071f2:	fba2 2303 	umull	r2, r3, r2, r3
 80071f6:	095b      	lsrs	r3, r3, #5
 80071f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80071fc:	441c      	add	r4, r3
 80071fe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007202:	2200      	movs	r2, #0
 8007204:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8007208:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 800720c:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 8007210:	4642      	mov	r2, r8
 8007212:	464b      	mov	r3, r9
 8007214:	1891      	adds	r1, r2, r2
 8007216:	6339      	str	r1, [r7, #48]	; 0x30
 8007218:	415b      	adcs	r3, r3
 800721a:	637b      	str	r3, [r7, #52]	; 0x34
 800721c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007220:	4641      	mov	r1, r8
 8007222:	1851      	adds	r1, r2, r1
 8007224:	62b9      	str	r1, [r7, #40]	; 0x28
 8007226:	4649      	mov	r1, r9
 8007228:	414b      	adcs	r3, r1
 800722a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800722c:	f04f 0200 	mov.w	r2, #0
 8007230:	f04f 0300 	mov.w	r3, #0
 8007234:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 8007238:	4659      	mov	r1, fp
 800723a:	00cb      	lsls	r3, r1, #3
 800723c:	4651      	mov	r1, sl
 800723e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007242:	4651      	mov	r1, sl
 8007244:	00ca      	lsls	r2, r1, #3
 8007246:	4610      	mov	r0, r2
 8007248:	4619      	mov	r1, r3
 800724a:	4603      	mov	r3, r0
 800724c:	4642      	mov	r2, r8
 800724e:	189b      	adds	r3, r3, r2
 8007250:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007254:	464b      	mov	r3, r9
 8007256:	460a      	mov	r2, r1
 8007258:	eb42 0303 	adc.w	r3, r2, r3
 800725c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8007260:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	2200      	movs	r2, #0
 8007268:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800726c:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8007270:	f04f 0200 	mov.w	r2, #0
 8007274:	f04f 0300 	mov.w	r3, #0
 8007278:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 800727c:	4649      	mov	r1, r9
 800727e:	008b      	lsls	r3, r1, #2
 8007280:	4641      	mov	r1, r8
 8007282:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007286:	4641      	mov	r1, r8
 8007288:	008a      	lsls	r2, r1, #2
 800728a:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800728e:	f7f9 fbcd 	bl	8000a2c <__aeabi_uldivmod>
 8007292:	4602      	mov	r2, r0
 8007294:	460b      	mov	r3, r1
 8007296:	4b0d      	ldr	r3, [pc, #52]	; (80072cc <UART_SetConfig+0x770>)
 8007298:	fba3 1302 	umull	r1, r3, r3, r2
 800729c:	095b      	lsrs	r3, r3, #5
 800729e:	2164      	movs	r1, #100	; 0x64
 80072a0:	fb01 f303 	mul.w	r3, r1, r3
 80072a4:	1ad3      	subs	r3, r2, r3
 80072a6:	011b      	lsls	r3, r3, #4
 80072a8:	3332      	adds	r3, #50	; 0x32
 80072aa:	4a08      	ldr	r2, [pc, #32]	; (80072cc <UART_SetConfig+0x770>)
 80072ac:	fba2 2303 	umull	r2, r3, r2, r3
 80072b0:	095b      	lsrs	r3, r3, #5
 80072b2:	f003 020f 	and.w	r2, r3, #15
 80072b6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4422      	add	r2, r4
 80072be:	609a      	str	r2, [r3, #8]
 80072c0:	e112      	b.n	80074e8 <UART_SetConfig+0x98c>
 80072c2:	bf00      	nop
 80072c4:	40011000 	.word	0x40011000
 80072c8:	40011400 	.word	0x40011400
 80072cc:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 80072d0:	f7fd fe74 	bl	8004fbc <HAL_RCC_GetPCLK1Freq>
 80072d4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80072d8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80072dc:	2200      	movs	r2, #0
 80072de:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80072e2:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80072e6:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 80072ea:	4642      	mov	r2, r8
 80072ec:	464b      	mov	r3, r9
 80072ee:	1891      	adds	r1, r2, r2
 80072f0:	6239      	str	r1, [r7, #32]
 80072f2:	415b      	adcs	r3, r3
 80072f4:	627b      	str	r3, [r7, #36]	; 0x24
 80072f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80072fa:	4641      	mov	r1, r8
 80072fc:	1854      	adds	r4, r2, r1
 80072fe:	4649      	mov	r1, r9
 8007300:	eb43 0501 	adc.w	r5, r3, r1
 8007304:	f04f 0200 	mov.w	r2, #0
 8007308:	f04f 0300 	mov.w	r3, #0
 800730c:	00eb      	lsls	r3, r5, #3
 800730e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007312:	00e2      	lsls	r2, r4, #3
 8007314:	4614      	mov	r4, r2
 8007316:	461d      	mov	r5, r3
 8007318:	4643      	mov	r3, r8
 800731a:	18e3      	adds	r3, r4, r3
 800731c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007320:	464b      	mov	r3, r9
 8007322:	eb45 0303 	adc.w	r3, r5, r3
 8007326:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800732a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	2200      	movs	r2, #0
 8007332:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007336:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800733a:	f04f 0200 	mov.w	r2, #0
 800733e:	f04f 0300 	mov.w	r3, #0
 8007342:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8007346:	4629      	mov	r1, r5
 8007348:	008b      	lsls	r3, r1, #2
 800734a:	4621      	mov	r1, r4
 800734c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007350:	4621      	mov	r1, r4
 8007352:	008a      	lsls	r2, r1, #2
 8007354:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8007358:	f7f9 fb68 	bl	8000a2c <__aeabi_uldivmod>
 800735c:	4602      	mov	r2, r0
 800735e:	460b      	mov	r3, r1
 8007360:	4b64      	ldr	r3, [pc, #400]	; (80074f4 <UART_SetConfig+0x998>)
 8007362:	fba3 2302 	umull	r2, r3, r3, r2
 8007366:	095b      	lsrs	r3, r3, #5
 8007368:	011c      	lsls	r4, r3, #4
 800736a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800736e:	2200      	movs	r2, #0
 8007370:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007374:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8007378:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 800737c:	4642      	mov	r2, r8
 800737e:	464b      	mov	r3, r9
 8007380:	1891      	adds	r1, r2, r2
 8007382:	61b9      	str	r1, [r7, #24]
 8007384:	415b      	adcs	r3, r3
 8007386:	61fb      	str	r3, [r7, #28]
 8007388:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800738c:	4641      	mov	r1, r8
 800738e:	1851      	adds	r1, r2, r1
 8007390:	6139      	str	r1, [r7, #16]
 8007392:	4649      	mov	r1, r9
 8007394:	414b      	adcs	r3, r1
 8007396:	617b      	str	r3, [r7, #20]
 8007398:	f04f 0200 	mov.w	r2, #0
 800739c:	f04f 0300 	mov.w	r3, #0
 80073a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80073a4:	4659      	mov	r1, fp
 80073a6:	00cb      	lsls	r3, r1, #3
 80073a8:	4651      	mov	r1, sl
 80073aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80073ae:	4651      	mov	r1, sl
 80073b0:	00ca      	lsls	r2, r1, #3
 80073b2:	4610      	mov	r0, r2
 80073b4:	4619      	mov	r1, r3
 80073b6:	4603      	mov	r3, r0
 80073b8:	4642      	mov	r2, r8
 80073ba:	189b      	adds	r3, r3, r2
 80073bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80073c0:	464b      	mov	r3, r9
 80073c2:	460a      	mov	r2, r1
 80073c4:	eb42 0303 	adc.w	r3, r2, r3
 80073c8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80073cc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	2200      	movs	r2, #0
 80073d4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80073d8:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80073dc:	f04f 0200 	mov.w	r2, #0
 80073e0:	f04f 0300 	mov.w	r3, #0
 80073e4:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 80073e8:	4649      	mov	r1, r9
 80073ea:	008b      	lsls	r3, r1, #2
 80073ec:	4641      	mov	r1, r8
 80073ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80073f2:	4641      	mov	r1, r8
 80073f4:	008a      	lsls	r2, r1, #2
 80073f6:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 80073fa:	f7f9 fb17 	bl	8000a2c <__aeabi_uldivmod>
 80073fe:	4602      	mov	r2, r0
 8007400:	460b      	mov	r3, r1
 8007402:	4b3c      	ldr	r3, [pc, #240]	; (80074f4 <UART_SetConfig+0x998>)
 8007404:	fba3 1302 	umull	r1, r3, r3, r2
 8007408:	095b      	lsrs	r3, r3, #5
 800740a:	2164      	movs	r1, #100	; 0x64
 800740c:	fb01 f303 	mul.w	r3, r1, r3
 8007410:	1ad3      	subs	r3, r2, r3
 8007412:	011b      	lsls	r3, r3, #4
 8007414:	3332      	adds	r3, #50	; 0x32
 8007416:	4a37      	ldr	r2, [pc, #220]	; (80074f4 <UART_SetConfig+0x998>)
 8007418:	fba2 2303 	umull	r2, r3, r2, r3
 800741c:	095b      	lsrs	r3, r3, #5
 800741e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007422:	441c      	add	r4, r3
 8007424:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007428:	2200      	movs	r2, #0
 800742a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800742e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007432:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8007436:	4642      	mov	r2, r8
 8007438:	464b      	mov	r3, r9
 800743a:	1891      	adds	r1, r2, r2
 800743c:	60b9      	str	r1, [r7, #8]
 800743e:	415b      	adcs	r3, r3
 8007440:	60fb      	str	r3, [r7, #12]
 8007442:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007446:	4641      	mov	r1, r8
 8007448:	1851      	adds	r1, r2, r1
 800744a:	6039      	str	r1, [r7, #0]
 800744c:	4649      	mov	r1, r9
 800744e:	414b      	adcs	r3, r1
 8007450:	607b      	str	r3, [r7, #4]
 8007452:	f04f 0200 	mov.w	r2, #0
 8007456:	f04f 0300 	mov.w	r3, #0
 800745a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800745e:	4659      	mov	r1, fp
 8007460:	00cb      	lsls	r3, r1, #3
 8007462:	4651      	mov	r1, sl
 8007464:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007468:	4651      	mov	r1, sl
 800746a:	00ca      	lsls	r2, r1, #3
 800746c:	4610      	mov	r0, r2
 800746e:	4619      	mov	r1, r3
 8007470:	4603      	mov	r3, r0
 8007472:	4642      	mov	r2, r8
 8007474:	189b      	adds	r3, r3, r2
 8007476:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800747a:	464b      	mov	r3, r9
 800747c:	460a      	mov	r2, r1
 800747e:	eb42 0303 	adc.w	r3, r2, r3
 8007482:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007486:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	2200      	movs	r2, #0
 800748e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007492:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007496:	f04f 0200 	mov.w	r2, #0
 800749a:	f04f 0300 	mov.w	r3, #0
 800749e:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 80074a2:	4649      	mov	r1, r9
 80074a4:	008b      	lsls	r3, r1, #2
 80074a6:	4641      	mov	r1, r8
 80074a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80074ac:	4641      	mov	r1, r8
 80074ae:	008a      	lsls	r2, r1, #2
 80074b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80074b4:	f7f9 faba 	bl	8000a2c <__aeabi_uldivmod>
 80074b8:	4602      	mov	r2, r0
 80074ba:	460b      	mov	r3, r1
 80074bc:	4b0d      	ldr	r3, [pc, #52]	; (80074f4 <UART_SetConfig+0x998>)
 80074be:	fba3 1302 	umull	r1, r3, r3, r2
 80074c2:	095b      	lsrs	r3, r3, #5
 80074c4:	2164      	movs	r1, #100	; 0x64
 80074c6:	fb01 f303 	mul.w	r3, r1, r3
 80074ca:	1ad3      	subs	r3, r2, r3
 80074cc:	011b      	lsls	r3, r3, #4
 80074ce:	3332      	adds	r3, #50	; 0x32
 80074d0:	4a08      	ldr	r2, [pc, #32]	; (80074f4 <UART_SetConfig+0x998>)
 80074d2:	fba2 2303 	umull	r2, r3, r2, r3
 80074d6:	095b      	lsrs	r3, r3, #5
 80074d8:	f003 020f 	and.w	r2, r3, #15
 80074dc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4422      	add	r2, r4
 80074e4:	609a      	str	r2, [r3, #8]
}
 80074e6:	e7ff      	b.n	80074e8 <UART_SetConfig+0x98c>
 80074e8:	bf00      	nop
 80074ea:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80074ee:	46bd      	mov	sp, r7
 80074f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80074f4:	51eb851f 	.word	0x51eb851f

080074f8 <__libc_init_array>:
 80074f8:	b570      	push	{r4, r5, r6, lr}
 80074fa:	4d0d      	ldr	r5, [pc, #52]	; (8007530 <__libc_init_array+0x38>)
 80074fc:	4c0d      	ldr	r4, [pc, #52]	; (8007534 <__libc_init_array+0x3c>)
 80074fe:	1b64      	subs	r4, r4, r5
 8007500:	10a4      	asrs	r4, r4, #2
 8007502:	2600      	movs	r6, #0
 8007504:	42a6      	cmp	r6, r4
 8007506:	d109      	bne.n	800751c <__libc_init_array+0x24>
 8007508:	4d0b      	ldr	r5, [pc, #44]	; (8007538 <__libc_init_array+0x40>)
 800750a:	4c0c      	ldr	r4, [pc, #48]	; (800753c <__libc_init_array+0x44>)
 800750c:	f000 f99e 	bl	800784c <_init>
 8007510:	1b64      	subs	r4, r4, r5
 8007512:	10a4      	asrs	r4, r4, #2
 8007514:	2600      	movs	r6, #0
 8007516:	42a6      	cmp	r6, r4
 8007518:	d105      	bne.n	8007526 <__libc_init_array+0x2e>
 800751a:	bd70      	pop	{r4, r5, r6, pc}
 800751c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007520:	4798      	blx	r3
 8007522:	3601      	adds	r6, #1
 8007524:	e7ee      	b.n	8007504 <__libc_init_array+0xc>
 8007526:	f855 3b04 	ldr.w	r3, [r5], #4
 800752a:	4798      	blx	r3
 800752c:	3601      	adds	r6, #1
 800752e:	e7f2      	b.n	8007516 <__libc_init_array+0x1e>
 8007530:	080078bc 	.word	0x080078bc
 8007534:	080078bc 	.word	0x080078bc
 8007538:	080078bc 	.word	0x080078bc
 800753c:	080078c0 	.word	0x080078c0

08007540 <memset>:
 8007540:	4402      	add	r2, r0
 8007542:	4603      	mov	r3, r0
 8007544:	4293      	cmp	r3, r2
 8007546:	d100      	bne.n	800754a <memset+0xa>
 8007548:	4770      	bx	lr
 800754a:	f803 1b01 	strb.w	r1, [r3], #1
 800754e:	e7f9      	b.n	8007544 <memset+0x4>

08007550 <atan2f>:
 8007550:	f000 b800 	b.w	8007554 <__ieee754_atan2f>

08007554 <__ieee754_atan2f>:
 8007554:	ee10 2a90 	vmov	r2, s1
 8007558:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800755c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8007560:	b510      	push	{r4, lr}
 8007562:	eef0 7a40 	vmov.f32	s15, s0
 8007566:	dc06      	bgt.n	8007576 <__ieee754_atan2f+0x22>
 8007568:	ee10 0a10 	vmov	r0, s0
 800756c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8007570:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007574:	dd04      	ble.n	8007580 <__ieee754_atan2f+0x2c>
 8007576:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800757a:	eeb0 0a67 	vmov.f32	s0, s15
 800757e:	bd10      	pop	{r4, pc}
 8007580:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8007584:	d103      	bne.n	800758e <__ieee754_atan2f+0x3a>
 8007586:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800758a:	f000 b883 	b.w	8007694 <atanf>
 800758e:	1794      	asrs	r4, r2, #30
 8007590:	f004 0402 	and.w	r4, r4, #2
 8007594:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8007598:	b943      	cbnz	r3, 80075ac <__ieee754_atan2f+0x58>
 800759a:	2c02      	cmp	r4, #2
 800759c:	d05e      	beq.n	800765c <__ieee754_atan2f+0x108>
 800759e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8007670 <__ieee754_atan2f+0x11c>
 80075a2:	2c03      	cmp	r4, #3
 80075a4:	bf08      	it	eq
 80075a6:	eef0 7a47 	vmoveq.f32	s15, s14
 80075aa:	e7e6      	b.n	800757a <__ieee754_atan2f+0x26>
 80075ac:	b941      	cbnz	r1, 80075c0 <__ieee754_atan2f+0x6c>
 80075ae:	eddf 7a31 	vldr	s15, [pc, #196]	; 8007674 <__ieee754_atan2f+0x120>
 80075b2:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8007678 <__ieee754_atan2f+0x124>
 80075b6:	2800      	cmp	r0, #0
 80075b8:	bfb8      	it	lt
 80075ba:	eef0 7a40 	vmovlt.f32	s15, s0
 80075be:	e7dc      	b.n	800757a <__ieee754_atan2f+0x26>
 80075c0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80075c4:	d110      	bne.n	80075e8 <__ieee754_atan2f+0x94>
 80075c6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80075ca:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80075ce:	d107      	bne.n	80075e0 <__ieee754_atan2f+0x8c>
 80075d0:	2c02      	cmp	r4, #2
 80075d2:	d846      	bhi.n	8007662 <__ieee754_atan2f+0x10e>
 80075d4:	4b29      	ldr	r3, [pc, #164]	; (800767c <__ieee754_atan2f+0x128>)
 80075d6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80075da:	edd4 7a00 	vldr	s15, [r4]
 80075de:	e7cc      	b.n	800757a <__ieee754_atan2f+0x26>
 80075e0:	2c02      	cmp	r4, #2
 80075e2:	d841      	bhi.n	8007668 <__ieee754_atan2f+0x114>
 80075e4:	4b26      	ldr	r3, [pc, #152]	; (8007680 <__ieee754_atan2f+0x12c>)
 80075e6:	e7f6      	b.n	80075d6 <__ieee754_atan2f+0x82>
 80075e8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80075ec:	d0df      	beq.n	80075ae <__ieee754_atan2f+0x5a>
 80075ee:	1a5b      	subs	r3, r3, r1
 80075f0:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 80075f4:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80075f8:	da1a      	bge.n	8007630 <__ieee754_atan2f+0xdc>
 80075fa:	2a00      	cmp	r2, #0
 80075fc:	da01      	bge.n	8007602 <__ieee754_atan2f+0xae>
 80075fe:	313c      	adds	r1, #60	; 0x3c
 8007600:	db19      	blt.n	8007636 <__ieee754_atan2f+0xe2>
 8007602:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8007606:	f000 f919 	bl	800783c <fabsf>
 800760a:	f000 f843 	bl	8007694 <atanf>
 800760e:	eef0 7a40 	vmov.f32	s15, s0
 8007612:	2c01      	cmp	r4, #1
 8007614:	d012      	beq.n	800763c <__ieee754_atan2f+0xe8>
 8007616:	2c02      	cmp	r4, #2
 8007618:	d017      	beq.n	800764a <__ieee754_atan2f+0xf6>
 800761a:	2c00      	cmp	r4, #0
 800761c:	d0ad      	beq.n	800757a <__ieee754_atan2f+0x26>
 800761e:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8007684 <__ieee754_atan2f+0x130>
 8007622:	ee77 7a80 	vadd.f32	s15, s15, s0
 8007626:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8007688 <__ieee754_atan2f+0x134>
 800762a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800762e:	e7a4      	b.n	800757a <__ieee754_atan2f+0x26>
 8007630:	eddf 7a10 	vldr	s15, [pc, #64]	; 8007674 <__ieee754_atan2f+0x120>
 8007634:	e7ed      	b.n	8007612 <__ieee754_atan2f+0xbe>
 8007636:	eddf 7a15 	vldr	s15, [pc, #84]	; 800768c <__ieee754_atan2f+0x138>
 800763a:	e7ea      	b.n	8007612 <__ieee754_atan2f+0xbe>
 800763c:	ee17 3a90 	vmov	r3, s15
 8007640:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007644:	ee07 3a90 	vmov	s15, r3
 8007648:	e797      	b.n	800757a <__ieee754_atan2f+0x26>
 800764a:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8007684 <__ieee754_atan2f+0x130>
 800764e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8007652:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8007688 <__ieee754_atan2f+0x134>
 8007656:	ee70 7a67 	vsub.f32	s15, s0, s15
 800765a:	e78e      	b.n	800757a <__ieee754_atan2f+0x26>
 800765c:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8007688 <__ieee754_atan2f+0x134>
 8007660:	e78b      	b.n	800757a <__ieee754_atan2f+0x26>
 8007662:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8007690 <__ieee754_atan2f+0x13c>
 8007666:	e788      	b.n	800757a <__ieee754_atan2f+0x26>
 8007668:	eddf 7a08 	vldr	s15, [pc, #32]	; 800768c <__ieee754_atan2f+0x138>
 800766c:	e785      	b.n	800757a <__ieee754_atan2f+0x26>
 800766e:	bf00      	nop
 8007670:	c0490fdb 	.word	0xc0490fdb
 8007674:	3fc90fdb 	.word	0x3fc90fdb
 8007678:	bfc90fdb 	.word	0xbfc90fdb
 800767c:	0800787c 	.word	0x0800787c
 8007680:	08007888 	.word	0x08007888
 8007684:	33bbbd2e 	.word	0x33bbbd2e
 8007688:	40490fdb 	.word	0x40490fdb
 800768c:	00000000 	.word	0x00000000
 8007690:	3f490fdb 	.word	0x3f490fdb

08007694 <atanf>:
 8007694:	b538      	push	{r3, r4, r5, lr}
 8007696:	ee10 5a10 	vmov	r5, s0
 800769a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800769e:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 80076a2:	eef0 7a40 	vmov.f32	s15, s0
 80076a6:	db10      	blt.n	80076ca <atanf+0x36>
 80076a8:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80076ac:	dd04      	ble.n	80076b8 <atanf+0x24>
 80076ae:	ee70 7a00 	vadd.f32	s15, s0, s0
 80076b2:	eeb0 0a67 	vmov.f32	s0, s15
 80076b6:	bd38      	pop	{r3, r4, r5, pc}
 80076b8:	eddf 7a4d 	vldr	s15, [pc, #308]	; 80077f0 <atanf+0x15c>
 80076bc:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 80077f4 <atanf+0x160>
 80076c0:	2d00      	cmp	r5, #0
 80076c2:	bfd8      	it	le
 80076c4:	eef0 7a40 	vmovle.f32	s15, s0
 80076c8:	e7f3      	b.n	80076b2 <atanf+0x1e>
 80076ca:	4b4b      	ldr	r3, [pc, #300]	; (80077f8 <atanf+0x164>)
 80076cc:	429c      	cmp	r4, r3
 80076ce:	dc10      	bgt.n	80076f2 <atanf+0x5e>
 80076d0:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 80076d4:	da0a      	bge.n	80076ec <atanf+0x58>
 80076d6:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80077fc <atanf+0x168>
 80076da:	ee30 7a07 	vadd.f32	s14, s0, s14
 80076de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076e2:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80076e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076ea:	dce2      	bgt.n	80076b2 <atanf+0x1e>
 80076ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80076f0:	e013      	b.n	800771a <atanf+0x86>
 80076f2:	f000 f8a3 	bl	800783c <fabsf>
 80076f6:	4b42      	ldr	r3, [pc, #264]	; (8007800 <atanf+0x16c>)
 80076f8:	429c      	cmp	r4, r3
 80076fa:	dc4f      	bgt.n	800779c <atanf+0x108>
 80076fc:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8007700:	429c      	cmp	r4, r3
 8007702:	dc41      	bgt.n	8007788 <atanf+0xf4>
 8007704:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8007708:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800770c:	eea0 7a27 	vfma.f32	s14, s0, s15
 8007710:	2300      	movs	r3, #0
 8007712:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007716:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800771a:	1c5a      	adds	r2, r3, #1
 800771c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8007720:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8007804 <atanf+0x170>
 8007724:	eddf 5a38 	vldr	s11, [pc, #224]	; 8007808 <atanf+0x174>
 8007728:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800780c <atanf+0x178>
 800772c:	ee66 6a06 	vmul.f32	s13, s12, s12
 8007730:	eee6 5a87 	vfma.f32	s11, s13, s14
 8007734:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8007810 <atanf+0x17c>
 8007738:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800773c:	eddf 5a35 	vldr	s11, [pc, #212]	; 8007814 <atanf+0x180>
 8007740:	eee7 5a26 	vfma.f32	s11, s14, s13
 8007744:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8007818 <atanf+0x184>
 8007748:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800774c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800781c <atanf+0x188>
 8007750:	eee7 5a26 	vfma.f32	s11, s14, s13
 8007754:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8007820 <atanf+0x18c>
 8007758:	eea6 5a87 	vfma.f32	s10, s13, s14
 800775c:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8007824 <atanf+0x190>
 8007760:	eea5 7a26 	vfma.f32	s14, s10, s13
 8007764:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8007828 <atanf+0x194>
 8007768:	eea7 5a26 	vfma.f32	s10, s14, s13
 800776c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800782c <atanf+0x198>
 8007770:	eea5 7a26 	vfma.f32	s14, s10, s13
 8007774:	ee27 7a26 	vmul.f32	s14, s14, s13
 8007778:	eea5 7a86 	vfma.f32	s14, s11, s12
 800777c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007780:	d121      	bne.n	80077c6 <atanf+0x132>
 8007782:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007786:	e794      	b.n	80076b2 <atanf+0x1e>
 8007788:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800778c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8007790:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007794:	2301      	movs	r3, #1
 8007796:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800779a:	e7be      	b.n	800771a <atanf+0x86>
 800779c:	4b24      	ldr	r3, [pc, #144]	; (8007830 <atanf+0x19c>)
 800779e:	429c      	cmp	r4, r3
 80077a0:	dc0b      	bgt.n	80077ba <atanf+0x126>
 80077a2:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 80077a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80077aa:	eea0 7a27 	vfma.f32	s14, s0, s15
 80077ae:	2302      	movs	r3, #2
 80077b0:	ee70 6a67 	vsub.f32	s13, s0, s15
 80077b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077b8:	e7af      	b.n	800771a <atanf+0x86>
 80077ba:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80077be:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80077c2:	2303      	movs	r3, #3
 80077c4:	e7a9      	b.n	800771a <atanf+0x86>
 80077c6:	4a1b      	ldr	r2, [pc, #108]	; (8007834 <atanf+0x1a0>)
 80077c8:	491b      	ldr	r1, [pc, #108]	; (8007838 <atanf+0x1a4>)
 80077ca:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80077ce:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80077d2:	ed93 0a00 	vldr	s0, [r3]
 80077d6:	ee37 7a40 	vsub.f32	s14, s14, s0
 80077da:	ed92 0a00 	vldr	s0, [r2]
 80077de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80077e2:	2d00      	cmp	r5, #0
 80077e4:	ee70 7a67 	vsub.f32	s15, s0, s15
 80077e8:	bfb8      	it	lt
 80077ea:	eef1 7a67 	vneglt.f32	s15, s15
 80077ee:	e760      	b.n	80076b2 <atanf+0x1e>
 80077f0:	3fc90fdb 	.word	0x3fc90fdb
 80077f4:	bfc90fdb 	.word	0xbfc90fdb
 80077f8:	3edfffff 	.word	0x3edfffff
 80077fc:	7149f2ca 	.word	0x7149f2ca
 8007800:	3f97ffff 	.word	0x3f97ffff
 8007804:	3c8569d7 	.word	0x3c8569d7
 8007808:	3d4bda59 	.word	0x3d4bda59
 800780c:	bd6ef16b 	.word	0xbd6ef16b
 8007810:	3d886b35 	.word	0x3d886b35
 8007814:	3dba2e6e 	.word	0x3dba2e6e
 8007818:	3e124925 	.word	0x3e124925
 800781c:	3eaaaaab 	.word	0x3eaaaaab
 8007820:	bd15a221 	.word	0xbd15a221
 8007824:	bd9d8795 	.word	0xbd9d8795
 8007828:	bde38e38 	.word	0xbde38e38
 800782c:	be4ccccd 	.word	0xbe4ccccd
 8007830:	401bffff 	.word	0x401bffff
 8007834:	08007894 	.word	0x08007894
 8007838:	080078a4 	.word	0x080078a4

0800783c <fabsf>:
 800783c:	ee10 3a10 	vmov	r3, s0
 8007840:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007844:	ee00 3a10 	vmov	s0, r3
 8007848:	4770      	bx	lr
	...

0800784c <_init>:
 800784c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800784e:	bf00      	nop
 8007850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007852:	bc08      	pop	{r3}
 8007854:	469e      	mov	lr, r3
 8007856:	4770      	bx	lr

08007858 <_fini>:
 8007858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800785a:	bf00      	nop
 800785c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800785e:	bc08      	pop	{r3}
 8007860:	469e      	mov	lr, r3
 8007862:	4770      	bx	lr
