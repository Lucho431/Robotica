
robot_core_STM32F429IGT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004458  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004604  08004604  00014604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800461c  0800461c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800461c  0800461c  0001461c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004624  08004624  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004624  08004624  00014624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004628  08004628  00014628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800462c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  20000010  0800463c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  0800463c  000201dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d860  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002129  00000000  00000000  0002d8a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d88  00000000  00000000  0002f9d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c60  00000000  00000000  00030758  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000236d7  00000000  00000000  000313b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b079  00000000  00000000  00054a8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d6579  00000000  00000000  0005fb08  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00136081  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000375c  00000000  00000000  001360fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000010 	.word	0x20000010
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080045ec 	.word	0x080045ec

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000014 	.word	0x20000014
 80001e8:	080045ec 	.word	0x080045ec

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000200:	f000 b972 	b.w	80004e8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	4688      	mov	r8, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14b      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022a:	428a      	cmp	r2, r1
 800022c:	4615      	mov	r5, r2
 800022e:	d967      	bls.n	8000300 <__udivmoddi4+0xe4>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0720 	rsb	r7, r2, #32
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	fa20 f707 	lsr.w	r7, r0, r7
 8000242:	4095      	lsls	r5, r2
 8000244:	ea47 0803 	orr.w	r8, r7, r3
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbb8 f7fe 	udiv	r7, r8, lr
 8000254:	fa1f fc85 	uxth.w	ip, r5
 8000258:	fb0e 8817 	mls	r8, lr, r7, r8
 800025c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000260:	fb07 f10c 	mul.w	r1, r7, ip
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18eb      	adds	r3, r5, r3
 800026a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800026e:	f080 811b 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8118 	bls.w	80004a8 <__udivmoddi4+0x28c>
 8000278:	3f02      	subs	r7, #2
 800027a:	442b      	add	r3, r5
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0fe 	udiv	r0, r3, lr
 8000284:	fb0e 3310 	mls	r3, lr, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000290:	45a4      	cmp	ip, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	192c      	adds	r4, r5, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800029a:	f080 8107 	bcs.w	80004ac <__udivmoddi4+0x290>
 800029e:	45a4      	cmp	ip, r4
 80002a0:	f240 8104 	bls.w	80004ac <__udivmoddi4+0x290>
 80002a4:	3802      	subs	r0, #2
 80002a6:	442c      	add	r4, r5
 80002a8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002ac:	eba4 040c 	sub.w	r4, r4, ip
 80002b0:	2700      	movs	r7, #0
 80002b2:	b11e      	cbz	r6, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c6 4300 	strd	r4, r3, [r6]
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0xbe>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80eb 	beq.w	80004a2 <__udivmoddi4+0x286>
 80002cc:	2700      	movs	r7, #0
 80002ce:	e9c6 0100 	strd	r0, r1, [r6]
 80002d2:	4638      	mov	r0, r7
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f783 	clz	r7, r3
 80002de:	2f00      	cmp	r7, #0
 80002e0:	d147      	bne.n	8000372 <__udivmoddi4+0x156>
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xd0>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80fa 	bhi.w	80004e0 <__udivmoddi4+0x2c4>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb61 0303 	sbc.w	r3, r1, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	4698      	mov	r8, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d0e0      	beq.n	80002bc <__udivmoddi4+0xa0>
 80002fa:	e9c6 4800 	strd	r4, r8, [r6]
 80002fe:	e7dd      	b.n	80002bc <__udivmoddi4+0xa0>
 8000300:	b902      	cbnz	r2, 8000304 <__udivmoddi4+0xe8>
 8000302:	deff      	udf	#255	; 0xff
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	2a00      	cmp	r2, #0
 800030a:	f040 808f 	bne.w	800042c <__udivmoddi4+0x210>
 800030e:	1b49      	subs	r1, r1, r5
 8000310:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000314:	fa1f f885 	uxth.w	r8, r5
 8000318:	2701      	movs	r7, #1
 800031a:	fbb1 fcfe 	udiv	ip, r1, lr
 800031e:	0c23      	lsrs	r3, r4, #16
 8000320:	fb0e 111c 	mls	r1, lr, ip, r1
 8000324:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000328:	fb08 f10c 	mul.w	r1, r8, ip
 800032c:	4299      	cmp	r1, r3
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x124>
 8000330:	18eb      	adds	r3, r5, r3
 8000332:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4299      	cmp	r1, r3
 800033a:	f200 80cd 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 800033e:	4684      	mov	ip, r0
 8000340:	1a59      	subs	r1, r3, r1
 8000342:	b2a3      	uxth	r3, r4
 8000344:	fbb1 f0fe 	udiv	r0, r1, lr
 8000348:	fb0e 1410 	mls	r4, lr, r0, r1
 800034c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000350:	fb08 f800 	mul.w	r8, r8, r0
 8000354:	45a0      	cmp	r8, r4
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x14c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x14a>
 8000360:	45a0      	cmp	r8, r4
 8000362:	f200 80b6 	bhi.w	80004d2 <__udivmoddi4+0x2b6>
 8000366:	4618      	mov	r0, r3
 8000368:	eba4 0408 	sub.w	r4, r4, r8
 800036c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000370:	e79f      	b.n	80002b2 <__udivmoddi4+0x96>
 8000372:	f1c7 0c20 	rsb	ip, r7, #32
 8000376:	40bb      	lsls	r3, r7
 8000378:	fa22 fe0c 	lsr.w	lr, r2, ip
 800037c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000380:	fa01 f407 	lsl.w	r4, r1, r7
 8000384:	fa20 f50c 	lsr.w	r5, r0, ip
 8000388:	fa21 f30c 	lsr.w	r3, r1, ip
 800038c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000390:	4325      	orrs	r5, r4
 8000392:	fbb3 f9f8 	udiv	r9, r3, r8
 8000396:	0c2c      	lsrs	r4, r5, #16
 8000398:	fb08 3319 	mls	r3, r8, r9, r3
 800039c:	fa1f fa8e 	uxth.w	sl, lr
 80003a0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a4:	fb09 f40a 	mul.w	r4, r9, sl
 80003a8:	429c      	cmp	r4, r3
 80003aa:	fa02 f207 	lsl.w	r2, r2, r7
 80003ae:	fa00 f107 	lsl.w	r1, r0, r7
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1e 0303 	adds.w	r3, lr, r3
 80003b8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003bc:	f080 8087 	bcs.w	80004ce <__udivmoddi4+0x2b2>
 80003c0:	429c      	cmp	r4, r3
 80003c2:	f240 8084 	bls.w	80004ce <__udivmoddi4+0x2b2>
 80003c6:	f1a9 0902 	sub.w	r9, r9, #2
 80003ca:	4473      	add	r3, lr
 80003cc:	1b1b      	subs	r3, r3, r4
 80003ce:	b2ad      	uxth	r5, r5
 80003d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d4:	fb08 3310 	mls	r3, r8, r0, r3
 80003d8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003dc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e0:	45a2      	cmp	sl, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1e 0404 	adds.w	r4, lr, r4
 80003e8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003ec:	d26b      	bcs.n	80004c6 <__udivmoddi4+0x2aa>
 80003ee:	45a2      	cmp	sl, r4
 80003f0:	d969      	bls.n	80004c6 <__udivmoddi4+0x2aa>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4474      	add	r4, lr
 80003f6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fa:	fba0 8902 	umull	r8, r9, r0, r2
 80003fe:	eba4 040a 	sub.w	r4, r4, sl
 8000402:	454c      	cmp	r4, r9
 8000404:	46c2      	mov	sl, r8
 8000406:	464b      	mov	r3, r9
 8000408:	d354      	bcc.n	80004b4 <__udivmoddi4+0x298>
 800040a:	d051      	beq.n	80004b0 <__udivmoddi4+0x294>
 800040c:	2e00      	cmp	r6, #0
 800040e:	d069      	beq.n	80004e4 <__udivmoddi4+0x2c8>
 8000410:	ebb1 050a 	subs.w	r5, r1, sl
 8000414:	eb64 0403 	sbc.w	r4, r4, r3
 8000418:	fa04 fc0c 	lsl.w	ip, r4, ip
 800041c:	40fd      	lsrs	r5, r7
 800041e:	40fc      	lsrs	r4, r7
 8000420:	ea4c 0505 	orr.w	r5, ip, r5
 8000424:	e9c6 5400 	strd	r5, r4, [r6]
 8000428:	2700      	movs	r7, #0
 800042a:	e747      	b.n	80002bc <__udivmoddi4+0xa0>
 800042c:	f1c2 0320 	rsb	r3, r2, #32
 8000430:	fa20 f703 	lsr.w	r7, r0, r3
 8000434:	4095      	lsls	r5, r2
 8000436:	fa01 f002 	lsl.w	r0, r1, r2
 800043a:	fa21 f303 	lsr.w	r3, r1, r3
 800043e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000442:	4338      	orrs	r0, r7
 8000444:	0c01      	lsrs	r1, r0, #16
 8000446:	fbb3 f7fe 	udiv	r7, r3, lr
 800044a:	fa1f f885 	uxth.w	r8, r5
 800044e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000452:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000456:	fb07 f308 	mul.w	r3, r7, r8
 800045a:	428b      	cmp	r3, r1
 800045c:	fa04 f402 	lsl.w	r4, r4, r2
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x256>
 8000462:	1869      	adds	r1, r5, r1
 8000464:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000468:	d22f      	bcs.n	80004ca <__udivmoddi4+0x2ae>
 800046a:	428b      	cmp	r3, r1
 800046c:	d92d      	bls.n	80004ca <__udivmoddi4+0x2ae>
 800046e:	3f02      	subs	r7, #2
 8000470:	4429      	add	r1, r5
 8000472:	1acb      	subs	r3, r1, r3
 8000474:	b281      	uxth	r1, r0
 8000476:	fbb3 f0fe 	udiv	r0, r3, lr
 800047a:	fb0e 3310 	mls	r3, lr, r0, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb00 f308 	mul.w	r3, r0, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x27e>
 800048a:	1869      	adds	r1, r5, r1
 800048c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000490:	d217      	bcs.n	80004c2 <__udivmoddi4+0x2a6>
 8000492:	428b      	cmp	r3, r1
 8000494:	d915      	bls.n	80004c2 <__udivmoddi4+0x2a6>
 8000496:	3802      	subs	r0, #2
 8000498:	4429      	add	r1, r5
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a0:	e73b      	b.n	800031a <__udivmoddi4+0xfe>
 80004a2:	4637      	mov	r7, r6
 80004a4:	4630      	mov	r0, r6
 80004a6:	e709      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a8:	4607      	mov	r7, r0
 80004aa:	e6e7      	b.n	800027c <__udivmoddi4+0x60>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6fb      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004b0:	4541      	cmp	r1, r8
 80004b2:	d2ab      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004b8:	eb69 020e 	sbc.w	r2, r9, lr
 80004bc:	3801      	subs	r0, #1
 80004be:	4613      	mov	r3, r2
 80004c0:	e7a4      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c2:	4660      	mov	r0, ip
 80004c4:	e7e9      	b.n	800049a <__udivmoddi4+0x27e>
 80004c6:	4618      	mov	r0, r3
 80004c8:	e795      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004ca:	4667      	mov	r7, ip
 80004cc:	e7d1      	b.n	8000472 <__udivmoddi4+0x256>
 80004ce:	4681      	mov	r9, r0
 80004d0:	e77c      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d2:	3802      	subs	r0, #2
 80004d4:	442c      	add	r4, r5
 80004d6:	e747      	b.n	8000368 <__udivmoddi4+0x14c>
 80004d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004dc:	442b      	add	r3, r5
 80004de:	e72f      	b.n	8000340 <__udivmoddi4+0x124>
 80004e0:	4638      	mov	r0, r7
 80004e2:	e708      	b.n	80002f6 <__udivmoddi4+0xda>
 80004e4:	4637      	mov	r7, r6
 80004e6:	e6e9      	b.n	80002bc <__udivmoddi4+0xa0>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 80004f2:	463b      	mov	r3, r7
 80004f4:	2200      	movs	r2, #0
 80004f6:	601a      	str	r2, [r3, #0]
 80004f8:	605a      	str	r2, [r3, #4]

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80004fa:	4b14      	ldr	r3, [pc, #80]	; (800054c <MX_DAC_Init+0x60>)
 80004fc:	4a14      	ldr	r2, [pc, #80]	; (8000550 <MX_DAC_Init+0x64>)
 80004fe:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000500:	4812      	ldr	r0, [pc, #72]	; (800054c <MX_DAC_Init+0x60>)
 8000502:	f001 f990 	bl	8001826 <HAL_DAC_Init>
 8000506:	4603      	mov	r3, r0
 8000508:	2b00      	cmp	r3, #0
 800050a:	d001      	beq.n	8000510 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800050c:	f000 fb78 	bl	8000c00 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000510:	2300      	movs	r3, #0
 8000512:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000514:	2300      	movs	r3, #0
 8000516:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000518:	463b      	mov	r3, r7
 800051a:	2200      	movs	r2, #0
 800051c:	4619      	mov	r1, r3
 800051e:	480b      	ldr	r0, [pc, #44]	; (800054c <MX_DAC_Init+0x60>)
 8000520:	f001 f9a3 	bl	800186a <HAL_DAC_ConfigChannel>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800052a:	f000 fb69 	bl	8000c00 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800052e:	463b      	mov	r3, r7
 8000530:	2210      	movs	r2, #16
 8000532:	4619      	mov	r1, r3
 8000534:	4805      	ldr	r0, [pc, #20]	; (800054c <MX_DAC_Init+0x60>)
 8000536:	f001 f998 	bl	800186a <HAL_DAC_ConfigChannel>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d001      	beq.n	8000544 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8000540:	f000 fb5e 	bl	8000c00 <Error_Handler>
  }

}
 8000544:	bf00      	nop
 8000546:	3708      	adds	r7, #8
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	2000003c 	.word	0x2000003c
 8000550:	40007400 	.word	0x40007400

08000554 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b08a      	sub	sp, #40	; 0x28
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800055c:	f107 0314 	add.w	r3, r7, #20
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
 8000564:	605a      	str	r2, [r3, #4]
 8000566:	609a      	str	r2, [r3, #8]
 8000568:	60da      	str	r2, [r3, #12]
 800056a:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a17      	ldr	r2, [pc, #92]	; (80005d0 <HAL_DAC_MspInit+0x7c>)
 8000572:	4293      	cmp	r3, r2
 8000574:	d127      	bne.n	80005c6 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000576:	2300      	movs	r3, #0
 8000578:	613b      	str	r3, [r7, #16]
 800057a:	4b16      	ldr	r3, [pc, #88]	; (80005d4 <HAL_DAC_MspInit+0x80>)
 800057c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800057e:	4a15      	ldr	r2, [pc, #84]	; (80005d4 <HAL_DAC_MspInit+0x80>)
 8000580:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000584:	6413      	str	r3, [r2, #64]	; 0x40
 8000586:	4b13      	ldr	r3, [pc, #76]	; (80005d4 <HAL_DAC_MspInit+0x80>)
 8000588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800058a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800058e:	613b      	str	r3, [r7, #16]
 8000590:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000592:	2300      	movs	r3, #0
 8000594:	60fb      	str	r3, [r7, #12]
 8000596:	4b0f      	ldr	r3, [pc, #60]	; (80005d4 <HAL_DAC_MspInit+0x80>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059a:	4a0e      	ldr	r2, [pc, #56]	; (80005d4 <HAL_DAC_MspInit+0x80>)
 800059c:	f043 0301 	orr.w	r3, r3, #1
 80005a0:	6313      	str	r3, [r2, #48]	; 0x30
 80005a2:	4b0c      	ldr	r3, [pc, #48]	; (80005d4 <HAL_DAC_MspInit+0x80>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a6:	f003 0301 	and.w	r3, r3, #1
 80005aa:	60fb      	str	r3, [r7, #12]
 80005ac:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80005ae:	2330      	movs	r3, #48	; 0x30
 80005b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005b2:	2303      	movs	r3, #3
 80005b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b6:	2300      	movs	r3, #0
 80005b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ba:	f107 0314 	add.w	r3, r7, #20
 80005be:	4619      	mov	r1, r3
 80005c0:	4805      	ldr	r0, [pc, #20]	; (80005d8 <HAL_DAC_MspInit+0x84>)
 80005c2:	f001 f9c1 	bl	8001948 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 80005c6:	bf00      	nop
 80005c8:	3728      	adds	r7, #40	; 0x28
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40007400 	.word	0x40007400
 80005d4:	40023800 	.word	0x40023800
 80005d8:	40020000 	.word	0x40020000

080005dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b08a      	sub	sp, #40	; 0x28
 80005e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e2:	f107 0314 	add.w	r3, r7, #20
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
 80005ee:	60da      	str	r2, [r3, #12]
 80005f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005f2:	2300      	movs	r3, #0
 80005f4:	613b      	str	r3, [r7, #16]
 80005f6:	4b3e      	ldr	r3, [pc, #248]	; (80006f0 <MX_GPIO_Init+0x114>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	4a3d      	ldr	r2, [pc, #244]	; (80006f0 <MX_GPIO_Init+0x114>)
 80005fc:	f043 0320 	orr.w	r3, r3, #32
 8000600:	6313      	str	r3, [r2, #48]	; 0x30
 8000602:	4b3b      	ldr	r3, [pc, #236]	; (80006f0 <MX_GPIO_Init+0x114>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	f003 0320 	and.w	r3, r3, #32
 800060a:	613b      	str	r3, [r7, #16]
 800060c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800060e:	2300      	movs	r3, #0
 8000610:	60fb      	str	r3, [r7, #12]
 8000612:	4b37      	ldr	r3, [pc, #220]	; (80006f0 <MX_GPIO_Init+0x114>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	4a36      	ldr	r2, [pc, #216]	; (80006f0 <MX_GPIO_Init+0x114>)
 8000618:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800061c:	6313      	str	r3, [r2, #48]	; 0x30
 800061e:	4b34      	ldr	r3, [pc, #208]	; (80006f0 <MX_GPIO_Init+0x114>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062a:	2300      	movs	r3, #0
 800062c:	60bb      	str	r3, [r7, #8]
 800062e:	4b30      	ldr	r3, [pc, #192]	; (80006f0 <MX_GPIO_Init+0x114>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	4a2f      	ldr	r2, [pc, #188]	; (80006f0 <MX_GPIO_Init+0x114>)
 8000634:	f043 0301 	orr.w	r3, r3, #1
 8000638:	6313      	str	r3, [r2, #48]	; 0x30
 800063a:	4b2d      	ldr	r3, [pc, #180]	; (80006f0 <MX_GPIO_Init+0x114>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	f003 0301 	and.w	r3, r3, #1
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000646:	2300      	movs	r3, #0
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	4b29      	ldr	r3, [pc, #164]	; (80006f0 <MX_GPIO_Init+0x114>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	4a28      	ldr	r2, [pc, #160]	; (80006f0 <MX_GPIO_Init+0x114>)
 8000650:	f043 0308 	orr.w	r3, r3, #8
 8000654:	6313      	str	r3, [r2, #48]	; 0x30
 8000656:	4b26      	ldr	r3, [pc, #152]	; (80006f0 <MX_GPIO_Init+0x114>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	f003 0308 	and.w	r3, r3, #8
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000662:	2300      	movs	r3, #0
 8000664:	603b      	str	r3, [r7, #0]
 8000666:	4b22      	ldr	r3, [pc, #136]	; (80006f0 <MX_GPIO_Init+0x114>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	4a21      	ldr	r2, [pc, #132]	; (80006f0 <MX_GPIO_Init+0x114>)
 800066c:	f043 0304 	orr.w	r3, r3, #4
 8000670:	6313      	str	r3, [r2, #48]	; 0x30
 8000672:	4b1f      	ldr	r3, [pc, #124]	; (80006f0 <MX_GPIO_Init+0x114>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	f003 0304 	and.w	r3, r3, #4
 800067a:	603b      	str	r3, [r7, #0]
 800067c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_in4_Pin|OUT_in3_Pin|OUT_in2_Pin, GPIO_PIN_RESET);
 800067e:	2200      	movs	r2, #0
 8000680:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8000684:	481b      	ldr	r0, [pc, #108]	; (80006f4 <MX_GPIO_Init+0x118>)
 8000686:	f001 fb21 	bl	8001ccc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, GPIO_PIN_RESET);
 800068a:	2200      	movs	r2, #0
 800068c:	2101      	movs	r1, #1
 800068e:	481a      	ldr	r0, [pc, #104]	; (80006f8 <MX_GPIO_Init+0x11c>)
 8000690:	f001 fb1c 	bl	8001ccc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = OUT_in4_Pin|OUT_in3_Pin|OUT_in2_Pin;
 8000694:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000698:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069a:	2301      	movs	r3, #1
 800069c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069e:	2300      	movs	r3, #0
 80006a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a2:	2300      	movs	r3, #0
 80006a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006a6:	f107 0314 	add.w	r3, r7, #20
 80006aa:	4619      	mov	r1, r3
 80006ac:	4811      	ldr	r0, [pc, #68]	; (80006f4 <MX_GPIO_Init+0x118>)
 80006ae:	f001 f94b 	bl	8001948 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OUT_in1_Pin;
 80006b2:	2301      	movs	r3, #1
 80006b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b6:	2301      	movs	r3, #1
 80006b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ba:	2300      	movs	r3, #0
 80006bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006be:	2300      	movs	r3, #0
 80006c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OUT_in1_GPIO_Port, &GPIO_InitStruct);
 80006c2:	f107 0314 	add.w	r3, r7, #20
 80006c6:	4619      	mov	r1, r3
 80006c8:	480b      	ldr	r0, [pc, #44]	; (80006f8 <MX_GPIO_Init+0x11c>)
 80006ca:	f001 f93d 	bl	8001948 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = IN_sensorR_Pin|IN_sensorL_Pin;
 80006ce:	230a      	movs	r3, #10
 80006d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006d2:	2300      	movs	r3, #0
 80006d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006d6:	2301      	movs	r3, #1
 80006d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006da:	f107 0314 	add.w	r3, r7, #20
 80006de:	4619      	mov	r1, r3
 80006e0:	4805      	ldr	r0, [pc, #20]	; (80006f8 <MX_GPIO_Init+0x11c>)
 80006e2:	f001 f931 	bl	8001948 <HAL_GPIO_Init>

}
 80006e6:	bf00      	nop
 80006e8:	3728      	adds	r7, #40	; 0x28
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40023800 	.word	0x40023800
 80006f4:	40020800 	.word	0x40020800
 80006f8:	40020c00 	.word	0x40020c00

080006fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000700:	f000 ff0e 	bl	8001520 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000704:	f000 f868 	bl	80007d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000708:	f7ff ff68 	bl	80005dc <MX_GPIO_Init>
  MX_DAC_Init();
 800070c:	f7ff feee 	bl	80004ec <MX_DAC_Init>
  MX_TIM2_Init();
 8000710:	f000 fb08 	bl	8000d24 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000714:	f000 fb58 	bl	8000dc8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000718:	f000 fbaa 	bl	8000e70 <MX_TIM4_Init>
  MX_TIM5_Init();
 800071c:	f000 fc28 	bl	8000f70 <MX_TIM5_Init>
  MX_UART7_Init();
 8000720:	f000 fe5a 	bl	80013d8 <MX_UART7_Init>
  MX_TIM7_Init();
 8000724:	f000 fcce 	bl	80010c4 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim7); //desborda cada 10 ms.
 8000728:	4822      	ldr	r0, [pc, #136]	; (80007b4 <main+0xb8>)
 800072a:	f001 ffea 	bl	8002702 <HAL_TIM_Base_Start_IT>

  HAL_TIM_Base_Start(&htim2); //encoder.
 800072e:	4822      	ldr	r0, [pc, #136]	; (80007b8 <main+0xbc>)
 8000730:	f001 ffc3 	bl	80026ba <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3); //encoder.
 8000734:	4821      	ldr	r0, [pc, #132]	; (80007bc <main+0xc0>)
 8000736:	f001 ffc0 	bl	80026ba <HAL_TIM_Base_Start>

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1); //rueda derecha (por default).
 800073a:	2100      	movs	r1, #0
 800073c:	4820      	ldr	r0, [pc, #128]	; (80007c0 <main+0xc4>)
 800073e:	f002 f839 	bl	80027b4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2); //rueda izquierda (por default).
 8000742:	2104      	movs	r1, #4
 8000744:	481e      	ldr	r0, [pc, #120]	; (80007c0 <main+0xc4>)
 8000746:	f002 f835 	bl	80027b4 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start(&htim5); //control del SR-04.
 800074a:	481e      	ldr	r0, [pc, #120]	; (80007c4 <main+0xc8>)
 800074c:	f001 ffb5 	bl	80026ba <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1); //para el pulso del trigger.
 8000750:	2100      	movs	r1, #0
 8000752:	481c      	ldr	r0, [pc, #112]	; (80007c4 <main+0xc8>)
 8000754:	f002 f82e 	bl	80027b4 <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_3); //para capturar el eco (flanco ascendente).
 8000758:	2108      	movs	r1, #8
 800075a:	481a      	ldr	r0, [pc, #104]	; (80007c4 <main+0xc8>)
 800075c:	f002 f89e 	bl	800289c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_4); //para capturar el eco (flanco descendente).
 8000760:	210c      	movs	r1, #12
 8000762:	4818      	ldr	r0, [pc, #96]	; (80007c4 <main+0xc8>)
 8000764:	f002 f89a 	bl	800289c <HAL_TIM_IC_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  read_button = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1);
 8000768:	2102      	movs	r1, #2
 800076a:	4817      	ldr	r0, [pc, #92]	; (80007c8 <main+0xcc>)
 800076c:	f001 fa96 	bl	8001c9c <HAL_GPIO_ReadPin>
 8000770:	4603      	mov	r3, r0
 8000772:	461a      	mov	r2, r3
 8000774:	4b15      	ldr	r3, [pc, #84]	; (80007cc <main+0xd0>)
 8000776:	701a      	strb	r2, [r3, #0]

	  if (!read_button){
 8000778:	4b14      	ldr	r3, [pc, #80]	; (80007cc <main+0xd0>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d108      	bne.n	8000792 <main+0x96>
		  if (last_button != 0){
 8000780:	4b13      	ldr	r3, [pc, #76]	; (80007d0 <main+0xd4>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d004      	beq.n	8000792 <main+0x96>
			  TRIG_SR04;
 8000788:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <main+0xc8>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	f06f 020a 	mvn.w	r2, #10
 8000790:	625a      	str	r2, [r3, #36]	; 0x24
		  }
	  }

	  last_button = read_button;
 8000792:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <main+0xd0>)
 8000794:	781a      	ldrb	r2, [r3, #0]
 8000796:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <main+0xd4>)
 8000798:	701a      	strb	r2, [r3, #0]


	  movimiento();
 800079a:	f000 f8d7 	bl	800094c <movimiento>

	  if (desbordeTIM7 > 21){
 800079e:	4b0d      	ldr	r3, [pc, #52]	; (80007d4 <main+0xd8>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	2b15      	cmp	r3, #21
 80007a4:	d9e0      	bls.n	8000768 <main+0x6c>
		  encoders();
 80007a6:	f000 f9df 	bl	8000b68 <encoders>
		  desbordeTIM7 = 0;
 80007aa:	4b0a      	ldr	r3, [pc, #40]	; (80007d4 <main+0xd8>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	701a      	strb	r2, [r3, #0]
	  read_button = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1);
 80007b0:	e7da      	b.n	8000768 <main+0x6c>
 80007b2:	bf00      	nop
 80007b4:	20000158 	.word	0x20000158
 80007b8:	20000118 	.word	0x20000118
 80007bc:	200000d8 	.word	0x200000d8
 80007c0:	20000058 	.word	0x20000058
 80007c4:	20000098 	.word	0x20000098
 80007c8:	40020c00 	.word	0x40020c00
 80007cc:	20000000 	.word	0x20000000
 80007d0:	20000001 	.word	0x20000001
 80007d4:	2000002e 	.word	0x2000002e

080007d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b094      	sub	sp, #80	; 0x50
 80007dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007de:	f107 0320 	add.w	r3, r7, #32
 80007e2:	2230      	movs	r2, #48	; 0x30
 80007e4:	2100      	movs	r1, #0
 80007e6:	4618      	mov	r0, r3
 80007e8:	f003 fef8 	bl	80045dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ec:	f107 030c 	add.w	r3, r7, #12
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]
 80007fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007fc:	2300      	movs	r3, #0
 80007fe:	60bb      	str	r3, [r7, #8]
 8000800:	4b2c      	ldr	r3, [pc, #176]	; (80008b4 <SystemClock_Config+0xdc>)
 8000802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000804:	4a2b      	ldr	r2, [pc, #172]	; (80008b4 <SystemClock_Config+0xdc>)
 8000806:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800080a:	6413      	str	r3, [r2, #64]	; 0x40
 800080c:	4b29      	ldr	r3, [pc, #164]	; (80008b4 <SystemClock_Config+0xdc>)
 800080e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000810:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000814:	60bb      	str	r3, [r7, #8]
 8000816:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000818:	2300      	movs	r3, #0
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	4b26      	ldr	r3, [pc, #152]	; (80008b8 <SystemClock_Config+0xe0>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a25      	ldr	r2, [pc, #148]	; (80008b8 <SystemClock_Config+0xe0>)
 8000822:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000826:	6013      	str	r3, [r2, #0]
 8000828:	4b23      	ldr	r3, [pc, #140]	; (80008b8 <SystemClock_Config+0xe0>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000834:	2309      	movs	r3, #9
 8000836:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000838:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800083c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800083e:	2301      	movs	r3, #1
 8000840:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000842:	2302      	movs	r3, #2
 8000844:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000846:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800084a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800084c:	2304      	movs	r3, #4
 800084e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000850:	23b4      	movs	r3, #180	; 0xb4
 8000852:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000854:	2302      	movs	r3, #2
 8000856:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000858:	2304      	movs	r3, #4
 800085a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800085c:	f107 0320 	add.w	r3, r7, #32
 8000860:	4618      	mov	r0, r3
 8000862:	f001 fa9d 	bl	8001da0 <HAL_RCC_OscConfig>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800086c:	f000 f9c8 	bl	8000c00 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000870:	f001 fa46 	bl	8001d00 <HAL_PWREx_EnableOverDrive>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800087a:	f000 f9c1 	bl	8000c00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800087e:	230f      	movs	r3, #15
 8000880:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000882:	2302      	movs	r3, #2
 8000884:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000886:	2300      	movs	r3, #0
 8000888:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800088a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800088e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000890:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000894:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000896:	f107 030c 	add.w	r3, r7, #12
 800089a:	2105      	movs	r1, #5
 800089c:	4618      	mov	r0, r3
 800089e:	f001 fcef 	bl	8002280 <HAL_RCC_ClockConfig>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80008a8:	f000 f9aa 	bl	8000c00 <Error_Handler>
  }
}
 80008ac:	bf00      	nop
 80008ae:	3750      	adds	r7, #80	; 0x50
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	40023800 	.word	0x40023800
 80008b8:	40007000 	.word	0x40007000

080008bc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
	if (htim->Instance==TIM7){
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a07      	ldr	r2, [pc, #28]	; (80008e8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d105      	bne.n	80008da <HAL_TIM_PeriodElapsedCallback+0x1e>
		desbordeTIM7++;
 80008ce:	4b07      	ldr	r3, [pc, #28]	; (80008ec <HAL_TIM_PeriodElapsedCallback+0x30>)
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	3301      	adds	r3, #1
 80008d4:	b2da      	uxtb	r2, r3
 80008d6:	4b05      	ldr	r3, [pc, #20]	; (80008ec <HAL_TIM_PeriodElapsedCallback+0x30>)
 80008d8:	701a      	strb	r2, [r3, #0]
	}
}
 80008da:	bf00      	nop
 80008dc:	370c      	adds	r7, #12
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	40001400 	.word	0x40001400
 80008ec:	2000002e 	.word	0x2000002e

080008f0 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3){
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	7f1b      	ldrb	r3, [r3, #28]
 80008fc:	2b04      	cmp	r3, #4
 80008fe:	d10a      	bne.n	8000916 <HAL_TIM_IC_CaptureCallback+0x26>
		ic1 = htim->Instance->CCR3;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000906:	4a0e      	ldr	r2, [pc, #56]	; (8000940 <HAL_TIM_IC_CaptureCallback+0x50>)
 8000908:	6013      	str	r3, [r2, #0]
		flancoEco++;
 800090a:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <HAL_TIM_IC_CaptureCallback+0x54>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	3301      	adds	r3, #1
 8000910:	b2da      	uxtb	r2, r3
 8000912:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <HAL_TIM_IC_CaptureCallback+0x54>)
 8000914:	701a      	strb	r2, [r3, #0]
	}

	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4){
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	7f1b      	ldrb	r3, [r3, #28]
 800091a:	2b08      	cmp	r3, #8
 800091c:	d10a      	bne.n	8000934 <HAL_TIM_IC_CaptureCallback+0x44>
		ic2 = htim->Instance->CCR4;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000924:	4a08      	ldr	r2, [pc, #32]	; (8000948 <HAL_TIM_IC_CaptureCallback+0x58>)
 8000926:	6013      	str	r3, [r2, #0]
		flancoEco++;
 8000928:	4b06      	ldr	r3, [pc, #24]	; (8000944 <HAL_TIM_IC_CaptureCallback+0x54>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	3301      	adds	r3, #1
 800092e:	b2da      	uxtb	r2, r3
 8000930:	4b04      	ldr	r3, [pc, #16]	; (8000944 <HAL_TIM_IC_CaptureCallback+0x54>)
 8000932:	701a      	strb	r2, [r3, #0]
	}
}
 8000934:	bf00      	nop
 8000936:	370c      	adds	r7, #12
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr
 8000940:	20000030 	.word	0x20000030
 8000944:	20000038 	.word	0x20000038
 8000948:	20000034 	.word	0x20000034

0800094c <movimiento>:
		break;
	} //end switch flancoEco

} //end SR_04()

void movimiento (void){
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0

	//sensores_dist = SI << 2 | SF << 1 | SD (logica negativa)
	SI = (HAL_GPIO_ReadPin(IN_sensorL_GPIO_Port, IN_sensorL_Pin)) ;
 8000950:	2108      	movs	r1, #8
 8000952:	487e      	ldr	r0, [pc, #504]	; (8000b4c <movimiento+0x200>)
 8000954:	f001 f9a2 	bl	8001c9c <HAL_GPIO_ReadPin>
 8000958:	4603      	mov	r3, r0
 800095a:	461a      	mov	r2, r3
 800095c:	4b7c      	ldr	r3, [pc, #496]	; (8000b50 <movimiento+0x204>)
 800095e:	701a      	strb	r2, [r3, #0]
	SD = HAL_GPIO_ReadPin(IN_sensorR_GPIO_Port, IN_sensorR_Pin);
 8000960:	2102      	movs	r1, #2
 8000962:	487a      	ldr	r0, [pc, #488]	; (8000b4c <movimiento+0x200>)
 8000964:	f001 f99a 	bl	8001c9c <HAL_GPIO_ReadPin>
 8000968:	4603      	mov	r3, r0
 800096a:	461a      	mov	r2, r3
 800096c:	4b79      	ldr	r3, [pc, #484]	; (8000b54 <movimiento+0x208>)
 800096e:	701a      	strb	r2, [r3, #0]
	if (distanciaSR04 < 25) SF = 0; else SF = 1;
 8000970:	4b79      	ldr	r3, [pc, #484]	; (8000b58 <movimiento+0x20c>)
 8000972:	881b      	ldrh	r3, [r3, #0]
 8000974:	2b18      	cmp	r3, #24
 8000976:	d803      	bhi.n	8000980 <movimiento+0x34>
 8000978:	4b78      	ldr	r3, [pc, #480]	; (8000b5c <movimiento+0x210>)
 800097a:	2200      	movs	r2, #0
 800097c:	701a      	strb	r2, [r3, #0]
 800097e:	e002      	b.n	8000986 <movimiento+0x3a>
 8000980:	4b76      	ldr	r3, [pc, #472]	; (8000b5c <movimiento+0x210>)
 8000982:	2201      	movs	r2, #1
 8000984:	701a      	strb	r2, [r3, #0]

	sensores_dist = SI << 2 | SF << 1 | SD;
 8000986:	4b72      	ldr	r3, [pc, #456]	; (8000b50 <movimiento+0x204>)
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	009b      	lsls	r3, r3, #2
 800098c:	b25a      	sxtb	r2, r3
 800098e:	4b73      	ldr	r3, [pc, #460]	; (8000b5c <movimiento+0x210>)
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	005b      	lsls	r3, r3, #1
 8000994:	b25b      	sxtb	r3, r3
 8000996:	4313      	orrs	r3, r2
 8000998:	b25a      	sxtb	r2, r3
 800099a:	4b6e      	ldr	r3, [pc, #440]	; (8000b54 <movimiento+0x208>)
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	b25b      	sxtb	r3, r3
 80009a0:	4313      	orrs	r3, r2
 80009a2:	b25b      	sxtb	r3, r3
 80009a4:	b2da      	uxtb	r2, r3
 80009a6:	4b6e      	ldr	r3, [pc, #440]	; (8000b60 <movimiento+0x214>)
 80009a8:	701a      	strb	r2, [r3, #0]


	switch (status_movimiento) {
 80009aa:	4b6e      	ldr	r3, [pc, #440]	; (8000b64 <movimiento+0x218>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	2b05      	cmp	r3, #5
 80009b0:	f200 80c8 	bhi.w	8000b44 <movimiento+0x1f8>
 80009b4:	a201      	add	r2, pc, #4	; (adr r2, 80009bc <movimiento+0x70>)
 80009b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009ba:	bf00      	nop
 80009bc:	080009d5 	.word	0x080009d5
 80009c0:	08000a0b 	.word	0x08000a0b
 80009c4:	08000b15 	.word	0x08000b15
 80009c8:	08000a79 	.word	0x08000a79
 80009cc:	08000ac7 	.word	0x08000ac7
 80009d0:	08000b45 	.word	0x08000b45
		case QUIETO:

			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 0);
 80009d4:	2200      	movs	r2, #0
 80009d6:	2101      	movs	r1, #1
 80009d8:	485c      	ldr	r0, [pc, #368]	; (8000b4c <movimiento+0x200>)
 80009da:	f001 f977 	bl	8001ccc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in4_Pin, 0);
 80009de:	2200      	movs	r2, #0
 80009e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009e4:	4859      	ldr	r0, [pc, #356]	; (8000b4c <movimiento+0x200>)
 80009e6:	f001 f971 	bl	8001ccc <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in2_Pin, 0);
 80009ea:	2200      	movs	r2, #0
 80009ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009f0:	4856      	ldr	r0, [pc, #344]	; (8000b4c <movimiento+0x200>)
 80009f2:	f001 f96b 	bl	8001ccc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in3_Pin, 0);
 80009f6:	2200      	movs	r2, #0
 80009f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009fc:	4853      	ldr	r0, [pc, #332]	; (8000b4c <movimiento+0x200>)
 80009fe:	f001 f965 	bl	8001ccc <HAL_GPIO_WritePin>

			status_movimiento = AVANZANDO;
 8000a02:	4b58      	ldr	r3, [pc, #352]	; (8000b64 <movimiento+0x218>)
 8000a04:	2201      	movs	r2, #1
 8000a06:	701a      	strb	r2, [r3, #0]
		break;
 8000a08:	e09d      	b.n	8000b46 <movimiento+0x1fa>
		case AVANZANDO:

			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 1);
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	2101      	movs	r1, #1
 8000a0e:	484f      	ldr	r0, [pc, #316]	; (8000b4c <movimiento+0x200>)
 8000a10:	f001 f95c 	bl	8001ccc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in4_Pin, 1);
 8000a14:	2201      	movs	r2, #1
 8000a16:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a1a:	484c      	ldr	r0, [pc, #304]	; (8000b4c <movimiento+0x200>)
 8000a1c:	f001 f956 	bl	8001ccc <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in2_Pin, 0);
 8000a20:	2200      	movs	r2, #0
 8000a22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a26:	4849      	ldr	r0, [pc, #292]	; (8000b4c <movimiento+0x200>)
 8000a28:	f001 f950 	bl	8001ccc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in3_Pin, 0);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a32:	4846      	ldr	r0, [pc, #280]	; (8000b4c <movimiento+0x200>)
 8000a34:	f001 f94a 	bl	8001ccc <HAL_GPIO_WritePin>

			switch (sensores_dist) {
 8000a38:	4b49      	ldr	r3, [pc, #292]	; (8000b60 <movimiento+0x214>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	2b06      	cmp	r3, #6
 8000a3e:	d819      	bhi.n	8000a74 <movimiento+0x128>
 8000a40:	a201      	add	r2, pc, #4	; (adr r2, 8000a48 <movimiento+0xfc>)
 8000a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a46:	bf00      	nop
 8000a48:	08000a65 	.word	0x08000a65
 8000a4c:	08000a6d 	.word	0x08000a6d
 8000a50:	08000a75 	.word	0x08000a75
 8000a54:	08000a6d 	.word	0x08000a6d
 8000a58:	08000a65 	.word	0x08000a65
 8000a5c:	08000a65 	.word	0x08000a65
 8000a60:	08000a65 	.word	0x08000a65
				case 0b110:
				case 0b101:
				case 0b100:
				case 0b000:
					status_movimiento = ROTANDO_IZQ;
 8000a64:	4b3f      	ldr	r3, [pc, #252]	; (8000b64 <movimiento+0x218>)
 8000a66:	2203      	movs	r2, #3
 8000a68:	701a      	strb	r2, [r3, #0]
					break;
 8000a6a:	e004      	b.n	8000a76 <movimiento+0x12a>
				case 0b011:
				case 0b001:
					status_movimiento = ROTANDO_DER;
 8000a6c:	4b3d      	ldr	r3, [pc, #244]	; (8000b64 <movimiento+0x218>)
 8000a6e:	2204      	movs	r2, #4
 8000a70:	701a      	strb	r2, [r3, #0]
					break;
 8000a72:	e000      	b.n	8000a76 <movimiento+0x12a>
				default:
					break;
 8000a74:	bf00      	nop
			} //end switch sensores_dist

		break;
 8000a76:	e066      	b.n	8000b46 <movimiento+0x1fa>
		case ROTANDO_IZQ:

			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 0);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	2101      	movs	r1, #1
 8000a7c:	4833      	ldr	r0, [pc, #204]	; (8000b4c <movimiento+0x200>)
 8000a7e:	f001 f925 	bl	8001ccc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in4_Pin, 1);
 8000a82:	2201      	movs	r2, #1
 8000a84:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a88:	4830      	ldr	r0, [pc, #192]	; (8000b4c <movimiento+0x200>)
 8000a8a:	f001 f91f 	bl	8001ccc <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in2_Pin, 1);
 8000a8e:	2201      	movs	r2, #1
 8000a90:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a94:	482d      	ldr	r0, [pc, #180]	; (8000b4c <movimiento+0x200>)
 8000a96:	f001 f919 	bl	8001ccc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in3_Pin, 0);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000aa0:	482a      	ldr	r0, [pc, #168]	; (8000b4c <movimiento+0x200>)
 8000aa2:	f001 f913 	bl	8001ccc <HAL_GPIO_WritePin>

			switch (sensores_dist){
 8000aa6:	4b2e      	ldr	r3, [pc, #184]	; (8000b60 <movimiento+0x214>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	2b03      	cmp	r3, #3
 8000aac:	d006      	beq.n	8000abc <movimiento+0x170>
 8000aae:	2b07      	cmp	r3, #7
 8000ab0:	d000      	beq.n	8000ab4 <movimiento+0x168>
					status_movimiento = AVANZANDO;
					break;
				case 0b011:
					status_movimiento = ROTANDO_DER;
				default:
					break;
 8000ab2:	e006      	b.n	8000ac2 <movimiento+0x176>
					status_movimiento = AVANZANDO;
 8000ab4:	4b2b      	ldr	r3, [pc, #172]	; (8000b64 <movimiento+0x218>)
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	701a      	strb	r2, [r3, #0]
					break;
 8000aba:	e003      	b.n	8000ac4 <movimiento+0x178>
					status_movimiento = ROTANDO_DER;
 8000abc:	4b29      	ldr	r3, [pc, #164]	; (8000b64 <movimiento+0x218>)
 8000abe:	2204      	movs	r2, #4
 8000ac0:	701a      	strb	r2, [r3, #0]
					break;
 8000ac2:	bf00      	nop
			} //end switch sensores_dist

		break;
 8000ac4:	e03f      	b.n	8000b46 <movimiento+0x1fa>
		case ROTANDO_DER:
			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 1);
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	2101      	movs	r1, #1
 8000aca:	4820      	ldr	r0, [pc, #128]	; (8000b4c <movimiento+0x200>)
 8000acc:	f001 f8fe 	bl	8001ccc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in4_Pin, 0);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ad6:	481d      	ldr	r0, [pc, #116]	; (8000b4c <movimiento+0x200>)
 8000ad8:	f001 f8f8 	bl	8001ccc <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in2_Pin, 0);
 8000adc:	2200      	movs	r2, #0
 8000ade:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ae2:	481a      	ldr	r0, [pc, #104]	; (8000b4c <movimiento+0x200>)
 8000ae4:	f001 f8f2 	bl	8001ccc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in3_Pin, 1);
 8000ae8:	2201      	movs	r2, #1
 8000aea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000aee:	4817      	ldr	r0, [pc, #92]	; (8000b4c <movimiento+0x200>)
 8000af0:	f001 f8ec 	bl	8001ccc <HAL_GPIO_WritePin>

			switch (sensores_dist){
 8000af4:	4b1a      	ldr	r3, [pc, #104]	; (8000b60 <movimiento+0x214>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	2b06      	cmp	r3, #6
 8000afa:	d006      	beq.n	8000b0a <movimiento+0x1be>
 8000afc:	2b07      	cmp	r3, #7
 8000afe:	d000      	beq.n	8000b02 <movimiento+0x1b6>
					status_movimiento = AVANZANDO;
					break;
				case 0b110:
					status_movimiento = ROTANDO_IZQ;
				default:
					break;
 8000b00:	e006      	b.n	8000b10 <movimiento+0x1c4>
					status_movimiento = AVANZANDO;
 8000b02:	4b18      	ldr	r3, [pc, #96]	; (8000b64 <movimiento+0x218>)
 8000b04:	2201      	movs	r2, #1
 8000b06:	701a      	strb	r2, [r3, #0]
					break;
 8000b08:	e003      	b.n	8000b12 <movimiento+0x1c6>
					status_movimiento = ROTANDO_IZQ;
 8000b0a:	4b16      	ldr	r3, [pc, #88]	; (8000b64 <movimiento+0x218>)
 8000b0c:	2203      	movs	r2, #3
 8000b0e:	701a      	strb	r2, [r3, #0]
					break;
 8000b10:	bf00      	nop
			} //end switch sensores_dist

		break;
 8000b12:	e018      	b.n	8000b46 <movimiento+0x1fa>
		case RETROCEDIENDO:
			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 0);
 8000b14:	2200      	movs	r2, #0
 8000b16:	2101      	movs	r1, #1
 8000b18:	480c      	ldr	r0, [pc, #48]	; (8000b4c <movimiento+0x200>)
 8000b1a:	f001 f8d7 	bl	8001ccc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in4_Pin, 0);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b24:	4809      	ldr	r0, [pc, #36]	; (8000b4c <movimiento+0x200>)
 8000b26:	f001 f8d1 	bl	8001ccc <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in2_Pin, 1);
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b30:	4806      	ldr	r0, [pc, #24]	; (8000b4c <movimiento+0x200>)
 8000b32:	f001 f8cb 	bl	8001ccc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in3_Pin, 1);
 8000b36:	2201      	movs	r2, #1
 8000b38:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b3c:	4803      	ldr	r0, [pc, #12]	; (8000b4c <movimiento+0x200>)
 8000b3e:	f001 f8c5 	bl	8001ccc <HAL_GPIO_WritePin>
			break;
 8000b42:	e000      	b.n	8000b46 <movimiento+0x1fa>

		break;
		case PIVOTE_DER_AVAN:

		default:
		break;
 8000b44:	bf00      	nop

	} //fin switch status_movimiento

} //fin movimiento()
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40020c00 	.word	0x40020c00
 8000b50:	20000052 	.word	0x20000052
 8000b54:	20000051 	.word	0x20000051
 8000b58:	2000003a 	.word	0x2000003a
 8000b5c:	20000050 	.word	0x20000050
 8000b60:	2000002d 	.word	0x2000002d
 8000b64:	2000002c 	.word	0x2000002c

08000b68 <encoders>:

void encoders (void){
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
	encoderL = __HAL_TIM_GET_COUNTER(&htim3);
 8000b6c:	4b1f      	ldr	r3, [pc, #124]	; (8000bec <encoders+0x84>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b72:	b21a      	sxth	r2, r3
 8000b74:	4b1e      	ldr	r3, [pc, #120]	; (8000bf0 <encoders+0x88>)
 8000b76:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8000b78:	4b1c      	ldr	r3, [pc, #112]	; (8000bec <encoders+0x84>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	625a      	str	r2, [r3, #36]	; 0x24
	encoderR = __HAL_TIM_GET_COUNTER(&htim2);
 8000b80:	4b1c      	ldr	r3, [pc, #112]	; (8000bf4 <encoders+0x8c>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b86:	b21a      	sxth	r2, r3
 8000b88:	4b1b      	ldr	r3, [pc, #108]	; (8000bf8 <encoders+0x90>)
 8000b8a:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8000b8c:	4b19      	ldr	r3, [pc, #100]	; (8000bf4 <encoders+0x8c>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	2200      	movs	r2, #0
 8000b92:	625a      	str	r2, [r3, #36]	; 0x24

	if (encoderL > 5){
 8000b94:	4b16      	ldr	r3, [pc, #88]	; (8000bf0 <encoders+0x88>)
 8000b96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b9a:	2b05      	cmp	r3, #5
 8000b9c:	dd04      	ble.n	8000ba8 <encoders+0x40>
		TIM4->CCR2--;
 8000b9e:	4b17      	ldr	r3, [pc, #92]	; (8000bfc <encoders+0x94>)
 8000ba0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000ba2:	3a01      	subs	r2, #1
 8000ba4:	639a      	str	r2, [r3, #56]	; 0x38
 8000ba6:	e008      	b.n	8000bba <encoders+0x52>
	}else if (encoderL < 5){
 8000ba8:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <encoders+0x88>)
 8000baa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bae:	2b04      	cmp	r3, #4
 8000bb0:	dc03      	bgt.n	8000bba <encoders+0x52>
		TIM4->CCR2++;
 8000bb2:	4b12      	ldr	r3, [pc, #72]	; (8000bfc <encoders+0x94>)
 8000bb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000bb6:	3201      	adds	r2, #1
 8000bb8:	639a      	str	r2, [r3, #56]	; 0x38
	}

	if (encoderR > 5){
 8000bba:	4b0f      	ldr	r3, [pc, #60]	; (8000bf8 <encoders+0x90>)
 8000bbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bc0:	2b05      	cmp	r3, #5
 8000bc2:	dd04      	ble.n	8000bce <encoders+0x66>
		TIM4->CCR1--;
 8000bc4:	4b0d      	ldr	r3, [pc, #52]	; (8000bfc <encoders+0x94>)
 8000bc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bc8:	3a01      	subs	r2, #1
 8000bca:	635a      	str	r2, [r3, #52]	; 0x34
	}else if (encoderR < 5){
		TIM4->CCR1++;
	}
} //fin encoders()
 8000bcc:	e008      	b.n	8000be0 <encoders+0x78>
	}else if (encoderR < 5){
 8000bce:	4b0a      	ldr	r3, [pc, #40]	; (8000bf8 <encoders+0x90>)
 8000bd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bd4:	2b04      	cmp	r3, #4
 8000bd6:	dc03      	bgt.n	8000be0 <encoders+0x78>
		TIM4->CCR1++;
 8000bd8:	4b08      	ldr	r3, [pc, #32]	; (8000bfc <encoders+0x94>)
 8000bda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bdc:	3201      	adds	r2, #1
 8000bde:	635a      	str	r2, [r3, #52]	; 0x34
} //fin encoders()
 8000be0:	bf00      	nop
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	200000d8 	.word	0x200000d8
 8000bf0:	20000054 	.word	0x20000054
 8000bf4:	20000118 	.word	0x20000118
 8000bf8:	20000056 	.word	0x20000056
 8000bfc:	40000800 	.word	0x40000800

08000c00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
	...

08000c10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	607b      	str	r3, [r7, #4]
 8000c1a:	4b10      	ldr	r3, [pc, #64]	; (8000c5c <HAL_MspInit+0x4c>)
 8000c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1e:	4a0f      	ldr	r2, [pc, #60]	; (8000c5c <HAL_MspInit+0x4c>)
 8000c20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c24:	6453      	str	r3, [r2, #68]	; 0x44
 8000c26:	4b0d      	ldr	r3, [pc, #52]	; (8000c5c <HAL_MspInit+0x4c>)
 8000c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c2e:	607b      	str	r3, [r7, #4]
 8000c30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	603b      	str	r3, [r7, #0]
 8000c36:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <HAL_MspInit+0x4c>)
 8000c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3a:	4a08      	ldr	r2, [pc, #32]	; (8000c5c <HAL_MspInit+0x4c>)
 8000c3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c40:	6413      	str	r3, [r2, #64]	; 0x40
 8000c42:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <HAL_MspInit+0x4c>)
 8000c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c4a:	603b      	str	r3, [r7, #0]
 8000c4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	370c      	adds	r7, #12
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	40023800 	.word	0x40023800

08000c60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr

08000c6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c72:	e7fe      	b.n	8000c72 <HardFault_Handler+0x4>

08000c74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c78:	e7fe      	b.n	8000c78 <MemManage_Handler+0x4>

08000c7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c7e:	e7fe      	b.n	8000c7e <BusFault_Handler+0x4>

08000c80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c84:	e7fe      	b.n	8000c84 <UsageFault_Handler+0x4>

08000c86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c86:	b480      	push	{r7}
 8000c88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr

08000c94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr

08000ca2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr

08000cb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cb4:	f000 fc86 	bl	80015c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cb8:	bf00      	nop
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000cc0:	4802      	ldr	r0, [pc, #8]	; (8000ccc <TIM5_IRQHandler+0x10>)
 8000cc2:	f001 fe53 	bl	800296c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	20000098 	.word	0x20000098

08000cd0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000cd4:	4802      	ldr	r0, [pc, #8]	; (8000ce0 <TIM7_IRQHandler+0x10>)
 8000cd6:	f001 fe49 	bl	800296c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	20000158 	.word	0x20000158

08000ce4 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8000ce8:	4802      	ldr	r0, [pc, #8]	; (8000cf4 <UART7_IRQHandler+0x10>)
 8000cea:	f002 fe97 	bl	8003a1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000198 	.word	0x20000198

08000cf8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cfc:	4b08      	ldr	r3, [pc, #32]	; (8000d20 <SystemInit+0x28>)
 8000cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d02:	4a07      	ldr	r2, [pc, #28]	; (8000d20 <SystemInit+0x28>)
 8000d04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d0c:	4b04      	ldr	r3, [pc, #16]	; (8000d20 <SystemInit+0x28>)
 8000d0e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d12:	609a      	str	r2, [r3, #8]
#endif
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b086      	sub	sp, #24
 8000d28:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d2a:	f107 0308 	add.w	r3, r7, #8
 8000d2e:	2200      	movs	r2, #0
 8000d30:	601a      	str	r2, [r3, #0]
 8000d32:	605a      	str	r2, [r3, #4]
 8000d34:	609a      	str	r2, [r3, #8]
 8000d36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d38:	463b      	mov	r3, r7
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8000d40:	4b20      	ldr	r3, [pc, #128]	; (8000dc4 <MX_TIM2_Init+0xa0>)
 8000d42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d46:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000d48:	4b1e      	ldr	r3, [pc, #120]	; (8000dc4 <MX_TIM2_Init+0xa0>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d4e:	4b1d      	ldr	r3, [pc, #116]	; (8000dc4 <MX_TIM2_Init+0xa0>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000d54:	4b1b      	ldr	r3, [pc, #108]	; (8000dc4 <MX_TIM2_Init+0xa0>)
 8000d56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d5a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d5c:	4b19      	ldr	r3, [pc, #100]	; (8000dc4 <MX_TIM2_Init+0xa0>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d62:	4b18      	ldr	r3, [pc, #96]	; (8000dc4 <MX_TIM2_Init+0xa0>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d68:	4816      	ldr	r0, [pc, #88]	; (8000dc4 <MX_TIM2_Init+0xa0>)
 8000d6a:	f001 fc7b 	bl	8002664 <HAL_TIM_Base_Init>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000d74:	f7ff ff44 	bl	8000c00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8000d78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d7c:	60bb      	str	r3, [r7, #8]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60fb      	str	r3, [r7, #12]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8000d82:	2300      	movs	r3, #0
 8000d84:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockFilter = 0;
 8000d86:	2300      	movs	r3, #0
 8000d88:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d8a:	f107 0308 	add.w	r3, r7, #8
 8000d8e:	4619      	mov	r1, r3
 8000d90:	480c      	ldr	r0, [pc, #48]	; (8000dc4 <MX_TIM2_Init+0xa0>)
 8000d92:	f002 f855 	bl	8002e40 <HAL_TIM_ConfigClockSource>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000d9c:	f7ff ff30 	bl	8000c00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000da0:	2300      	movs	r3, #0
 8000da2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000da4:	2300      	movs	r3, #0
 8000da6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000da8:	463b      	mov	r3, r7
 8000daa:	4619      	mov	r1, r3
 8000dac:	4805      	ldr	r0, [pc, #20]	; (8000dc4 <MX_TIM2_Init+0xa0>)
 8000dae:	f002 fd57 	bl	8003860 <HAL_TIMEx_MasterConfigSynchronization>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000db8:	f7ff ff22 	bl	8000c00 <Error_Handler>
  }

}
 8000dbc:	bf00      	nop
 8000dbe:	3718      	adds	r7, #24
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	20000118 	.word	0x20000118

08000dc8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b086      	sub	sp, #24
 8000dcc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dce:	f107 0308 	add.w	r3, r7, #8
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	601a      	str	r2, [r3, #0]
 8000dd6:	605a      	str	r2, [r3, #4]
 8000dd8:	609a      	str	r2, [r3, #8]
 8000dda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ddc:	463b      	mov	r3, r7
 8000dde:	2200      	movs	r2, #0
 8000de0:	601a      	str	r2, [r3, #0]
 8000de2:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8000de4:	4b20      	ldr	r3, [pc, #128]	; (8000e68 <MX_TIM3_Init+0xa0>)
 8000de6:	4a21      	ldr	r2, [pc, #132]	; (8000e6c <MX_TIM3_Init+0xa4>)
 8000de8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000dea:	4b1f      	ldr	r3, [pc, #124]	; (8000e68 <MX_TIM3_Init+0xa0>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000df0:	4b1d      	ldr	r3, [pc, #116]	; (8000e68 <MX_TIM3_Init+0xa0>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000df6:	4b1c      	ldr	r3, [pc, #112]	; (8000e68 <MX_TIM3_Init+0xa0>)
 8000df8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dfc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dfe:	4b1a      	ldr	r3, [pc, #104]	; (8000e68 <MX_TIM3_Init+0xa0>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e04:	4b18      	ldr	r3, [pc, #96]	; (8000e68 <MX_TIM3_Init+0xa0>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e0a:	4817      	ldr	r0, [pc, #92]	; (8000e68 <MX_TIM3_Init+0xa0>)
 8000e0c:	f001 fc2a 	bl	8002664 <HAL_TIM_Base_Init>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000e16:	f7ff fef3 	bl	8000c00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8000e1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e1e:	60bb      	str	r3, [r7, #8]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8000e20:	2300      	movs	r3, #0
 8000e22:	60fb      	str	r3, [r7, #12]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8000e24:	2300      	movs	r3, #0
 8000e26:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockFilter = 0;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e2c:	f107 0308 	add.w	r3, r7, #8
 8000e30:	4619      	mov	r1, r3
 8000e32:	480d      	ldr	r0, [pc, #52]	; (8000e68 <MX_TIM3_Init+0xa0>)
 8000e34:	f002 f804 	bl	8002e40 <HAL_TIM_ConfigClockSource>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8000e3e:	f7ff fedf 	bl	8000c00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e42:	2300      	movs	r3, #0
 8000e44:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e46:	2300      	movs	r3, #0
 8000e48:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e4a:	463b      	mov	r3, r7
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4806      	ldr	r0, [pc, #24]	; (8000e68 <MX_TIM3_Init+0xa0>)
 8000e50:	f002 fd06 	bl	8003860 <HAL_TIMEx_MasterConfigSynchronization>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000e5a:	f7ff fed1 	bl	8000c00 <Error_Handler>
  }

}
 8000e5e:	bf00      	nop
 8000e60:	3718      	adds	r7, #24
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	200000d8 	.word	0x200000d8
 8000e6c:	40000400 	.word	0x40000400

08000e70 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b08e      	sub	sp, #56	; 0x38
 8000e74:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	605a      	str	r2, [r3, #4]
 8000e80:	609a      	str	r2, [r3, #8]
 8000e82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e84:	f107 0320 	add.w	r3, r7, #32
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e8e:	1d3b      	adds	r3, r7, #4
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	60da      	str	r2, [r3, #12]
 8000e9a:	611a      	str	r2, [r3, #16]
 8000e9c:	615a      	str	r2, [r3, #20]
 8000e9e:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8000ea0:	4b31      	ldr	r3, [pc, #196]	; (8000f68 <MX_TIM4_Init+0xf8>)
 8000ea2:	4a32      	ldr	r2, [pc, #200]	; (8000f6c <MX_TIM4_Init+0xfc>)
 8000ea4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 30-1;
 8000ea6:	4b30      	ldr	r3, [pc, #192]	; (8000f68 <MX_TIM4_Init+0xf8>)
 8000ea8:	221d      	movs	r2, #29
 8000eaa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eac:	4b2e      	ldr	r3, [pc, #184]	; (8000f68 <MX_TIM4_Init+0xf8>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8000eb2:	4b2d      	ldr	r3, [pc, #180]	; (8000f68 <MX_TIM4_Init+0xf8>)
 8000eb4:	2263      	movs	r2, #99	; 0x63
 8000eb6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eb8:	4b2b      	ldr	r3, [pc, #172]	; (8000f68 <MX_TIM4_Init+0xf8>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ebe:	4b2a      	ldr	r3, [pc, #168]	; (8000f68 <MX_TIM4_Init+0xf8>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000ec4:	4828      	ldr	r0, [pc, #160]	; (8000f68 <MX_TIM4_Init+0xf8>)
 8000ec6:	f001 fbcd 	bl	8002664 <HAL_TIM_Base_Init>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8000ed0:	f7ff fe96 	bl	8000c00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ed4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ed8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000eda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4821      	ldr	r0, [pc, #132]	; (8000f68 <MX_TIM4_Init+0xf8>)
 8000ee2:	f001 ffad 	bl	8002e40 <HAL_TIM_ConfigClockSource>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8000eec:	f7ff fe88 	bl	8000c00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000ef0:	481d      	ldr	r0, [pc, #116]	; (8000f68 <MX_TIM4_Init+0xf8>)
 8000ef2:	f001 fc2a 	bl	800274a <HAL_TIM_PWM_Init>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8000efc:	f7ff fe80 	bl	8000c00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f00:	2300      	movs	r3, #0
 8000f02:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f04:	2300      	movs	r3, #0
 8000f06:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f08:	f107 0320 	add.w	r3, r7, #32
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4816      	ldr	r0, [pc, #88]	; (8000f68 <MX_TIM4_Init+0xf8>)
 8000f10:	f002 fca6 	bl	8003860 <HAL_TIMEx_MasterConfigSynchronization>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8000f1a:	f7ff fe71 	bl	8000c00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f1e:	2360      	movs	r3, #96	; 0x60
 8000f20:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50-1;
 8000f22:	2331      	movs	r3, #49	; 0x31
 8000f24:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f26:	2300      	movs	r3, #0
 8000f28:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f2e:	1d3b      	adds	r3, r7, #4
 8000f30:	2200      	movs	r2, #0
 8000f32:	4619      	mov	r1, r3
 8000f34:	480c      	ldr	r0, [pc, #48]	; (8000f68 <MX_TIM4_Init+0xf8>)
 8000f36:	f001 febd 	bl	8002cb4 <HAL_TIM_PWM_ConfigChannel>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8000f40:	f7ff fe5e 	bl	8000c00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f44:	1d3b      	adds	r3, r7, #4
 8000f46:	2204      	movs	r2, #4
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4807      	ldr	r0, [pc, #28]	; (8000f68 <MX_TIM4_Init+0xf8>)
 8000f4c:	f001 feb2 	bl	8002cb4 <HAL_TIM_PWM_ConfigChannel>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_TIM4_Init+0xea>
  {
    Error_Handler();
 8000f56:	f7ff fe53 	bl	8000c00 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8000f5a:	4803      	ldr	r0, [pc, #12]	; (8000f68 <MX_TIM4_Init+0xf8>)
 8000f5c:	f000 f9d8 	bl	8001310 <HAL_TIM_MspPostInit>

}
 8000f60:	bf00      	nop
 8000f62:	3738      	adds	r7, #56	; 0x38
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20000058 	.word	0x20000058
 8000f6c:	40000800 	.word	0x40000800

08000f70 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b092      	sub	sp, #72	; 0x48
 8000f74:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f76:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	605a      	str	r2, [r3, #4]
 8000f80:	609a      	str	r2, [r3, #8]
 8000f82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f84:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f8e:	f107 0314 	add.w	r3, r7, #20
 8000f92:	2200      	movs	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]
 8000f96:	605a      	str	r2, [r3, #4]
 8000f98:	609a      	str	r2, [r3, #8]
 8000f9a:	60da      	str	r2, [r3, #12]
 8000f9c:	611a      	str	r2, [r3, #16]
 8000f9e:	615a      	str	r2, [r3, #20]
 8000fa0:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000fa2:	1d3b      	adds	r3, r7, #4
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]

  htim5.Instance = TIM5;
 8000fae:	4b43      	ldr	r3, [pc, #268]	; (80010bc <MX_TIM5_Init+0x14c>)
 8000fb0:	4a43      	ldr	r2, [pc, #268]	; (80010c0 <MX_TIM5_Init+0x150>)
 8000fb2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 90-1;
 8000fb4:	4b41      	ldr	r3, [pc, #260]	; (80010bc <MX_TIM5_Init+0x14c>)
 8000fb6:	2259      	movs	r2, #89	; 0x59
 8000fb8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fba:	4b40      	ldr	r3, [pc, #256]	; (80010bc <MX_TIM5_Init+0x14c>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000fc0:	4b3e      	ldr	r3, [pc, #248]	; (80010bc <MX_TIM5_Init+0x14c>)
 8000fc2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fc6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fc8:	4b3c      	ldr	r3, [pc, #240]	; (80010bc <MX_TIM5_Init+0x14c>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fce:	4b3b      	ldr	r3, [pc, #236]	; (80010bc <MX_TIM5_Init+0x14c>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000fd4:	4839      	ldr	r0, [pc, #228]	; (80010bc <MX_TIM5_Init+0x14c>)
 8000fd6:	f001 fb45 	bl	8002664 <HAL_TIM_Base_Init>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8000fe0:	f7ff fe0e 	bl	8000c00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fe4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fe8:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000fea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4832      	ldr	r0, [pc, #200]	; (80010bc <MX_TIM5_Init+0x14c>)
 8000ff2:	f001 ff25 	bl	8002e40 <HAL_TIM_ConfigClockSource>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8000ffc:	f7ff fe00 	bl	8000c00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001000:	482e      	ldr	r0, [pc, #184]	; (80010bc <MX_TIM5_Init+0x14c>)
 8001002:	f001 fba2 	bl	800274a <HAL_TIM_PWM_Init>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_TIM5_Init+0xa0>
  {
    Error_Handler();
 800100c:	f7ff fdf8 	bl	8000c00 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8001010:	482a      	ldr	r0, [pc, #168]	; (80010bc <MX_TIM5_Init+0x14c>)
 8001012:	f001 fc0d 	bl	8002830 <HAL_TIM_IC_Init>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 800101c:	f7ff fdf0 	bl	8000c00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001020:	2300      	movs	r3, #0
 8001022:	633b      	str	r3, [r7, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001024:	2300      	movs	r3, #0
 8001026:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001028:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800102c:	4619      	mov	r1, r3
 800102e:	4823      	ldr	r0, [pc, #140]	; (80010bc <MX_TIM5_Init+0x14c>)
 8001030:	f002 fc16 	bl	8003860 <HAL_TIMEx_MasterConfigSynchronization>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_TIM5_Init+0xce>
  {
    Error_Handler();
 800103a:	f7ff fde1 	bl	8000c00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800103e:	2360      	movs	r3, #96	; 0x60
 8001040:	617b      	str	r3, [r7, #20]
  sConfigOC.Pulse = 0xFFFFFFF5;
 8001042:	f06f 030a 	mvn.w	r3, #10
 8001046:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001048:	2302      	movs	r3, #2
 800104a:	61fb      	str	r3, [r7, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800104c:	2300      	movs	r3, #0
 800104e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001050:	f107 0314 	add.w	r3, r7, #20
 8001054:	2200      	movs	r2, #0
 8001056:	4619      	mov	r1, r3
 8001058:	4818      	ldr	r0, [pc, #96]	; (80010bc <MX_TIM5_Init+0x14c>)
 800105a:	f001 fe2b 	bl	8002cb4 <HAL_TIM_PWM_ConfigChannel>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_TIM5_Init+0xf8>
  {
    Error_Handler();
 8001064:	f7ff fdcc 	bl	8000c00 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001068:	2300      	movs	r3, #0
 800106a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800106c:	2301      	movs	r3, #1
 800106e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001070:	2300      	movs	r3, #0
 8001072:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001074:	2300      	movs	r3, #0
 8001076:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001078:	1d3b      	adds	r3, r7, #4
 800107a:	2208      	movs	r2, #8
 800107c:	4619      	mov	r1, r3
 800107e:	480f      	ldr	r0, [pc, #60]	; (80010bc <MX_TIM5_Init+0x14c>)
 8001080:	f001 fd7c 	bl	8002b7c <HAL_TIM_IC_ConfigChannel>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_TIM5_Init+0x11e>
  {
    Error_Handler();
 800108a:	f7ff fdb9 	bl	8000c00 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800108e:	2302      	movs	r3, #2
 8001090:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001092:	2302      	movs	r3, #2
 8001094:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001096:	1d3b      	adds	r3, r7, #4
 8001098:	220c      	movs	r2, #12
 800109a:	4619      	mov	r1, r3
 800109c:	4807      	ldr	r0, [pc, #28]	; (80010bc <MX_TIM5_Init+0x14c>)
 800109e:	f001 fd6d 	bl	8002b7c <HAL_TIM_IC_ConfigChannel>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_TIM5_Init+0x13c>
  {
    Error_Handler();
 80010a8:	f7ff fdaa 	bl	8000c00 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim5);
 80010ac:	4803      	ldr	r0, [pc, #12]	; (80010bc <MX_TIM5_Init+0x14c>)
 80010ae:	f000 f92f 	bl	8001310 <HAL_TIM_MspPostInit>

}
 80010b2:	bf00      	nop
 80010b4:	3748      	adds	r7, #72	; 0x48
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000098 	.word	0x20000098
 80010c0:	40000c00 	.word	0x40000c00

080010c4 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ca:	463b      	mov	r3, r7
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]

  htim7.Instance = TIM7;
 80010d2:	4b15      	ldr	r3, [pc, #84]	; (8001128 <MX_TIM7_Init+0x64>)
 80010d4:	4a15      	ldr	r2, [pc, #84]	; (800112c <MX_TIM7_Init+0x68>)
 80010d6:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 900-1;
 80010d8:	4b13      	ldr	r3, [pc, #76]	; (8001128 <MX_TIM7_Init+0x64>)
 80010da:	f240 3283 	movw	r2, #899	; 0x383
 80010de:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010e0:	4b11      	ldr	r3, [pc, #68]	; (8001128 <MX_TIM7_Init+0x64>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 80010e6:	4b10      	ldr	r3, [pc, #64]	; (8001128 <MX_TIM7_Init+0x64>)
 80010e8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010ec:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ee:	4b0e      	ldr	r3, [pc, #56]	; (8001128 <MX_TIM7_Init+0x64>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80010f4:	480c      	ldr	r0, [pc, #48]	; (8001128 <MX_TIM7_Init+0x64>)
 80010f6:	f001 fab5 	bl	8002664 <HAL_TIM_Base_Init>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001100:	f7ff fd7e 	bl	8000c00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001104:	2300      	movs	r3, #0
 8001106:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001108:	2300      	movs	r3, #0
 800110a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800110c:	463b      	mov	r3, r7
 800110e:	4619      	mov	r1, r3
 8001110:	4805      	ldr	r0, [pc, #20]	; (8001128 <MX_TIM7_Init+0x64>)
 8001112:	f002 fba5 	bl	8003860 <HAL_TIMEx_MasterConfigSynchronization>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 800111c:	f7ff fd70 	bl	8000c00 <Error_Handler>
  }

}
 8001120:	bf00      	nop
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20000158 	.word	0x20000158
 800112c:	40001400 	.word	0x40001400

08001130 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b090      	sub	sp, #64	; 0x40
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001138:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
 8001146:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001150:	d12d      	bne.n	80011ae <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	62bb      	str	r3, [r7, #40]	; 0x28
 8001156:	4b66      	ldr	r3, [pc, #408]	; (80012f0 <HAL_TIM_Base_MspInit+0x1c0>)
 8001158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115a:	4a65      	ldr	r2, [pc, #404]	; (80012f0 <HAL_TIM_Base_MspInit+0x1c0>)
 800115c:	f043 0301 	orr.w	r3, r3, #1
 8001160:	6413      	str	r3, [r2, #64]	; 0x40
 8001162:	4b63      	ldr	r3, [pc, #396]	; (80012f0 <HAL_TIM_Base_MspInit+0x1c0>)
 8001164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	62bb      	str	r3, [r7, #40]	; 0x28
 800116c:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	627b      	str	r3, [r7, #36]	; 0x24
 8001172:	4b5f      	ldr	r3, [pc, #380]	; (80012f0 <HAL_TIM_Base_MspInit+0x1c0>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	4a5e      	ldr	r2, [pc, #376]	; (80012f0 <HAL_TIM_Base_MspInit+0x1c0>)
 8001178:	f043 0301 	orr.w	r3, r3, #1
 800117c:	6313      	str	r3, [r2, #48]	; 0x30
 800117e:	4b5c      	ldr	r3, [pc, #368]	; (80012f0 <HAL_TIM_Base_MspInit+0x1c0>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	f003 0301 	and.w	r3, r3, #1
 8001186:	627b      	str	r3, [r7, #36]	; 0x24
 8001188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800118a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800118e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001190:	2302      	movs	r3, #2
 8001192:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001194:	2300      	movs	r3, #0
 8001196:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001198:	2300      	movs	r3, #0
 800119a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800119c:	2301      	movs	r3, #1
 800119e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011a4:	4619      	mov	r1, r3
 80011a6:	4853      	ldr	r0, [pc, #332]	; (80012f4 <HAL_TIM_Base_MspInit+0x1c4>)
 80011a8:	f000 fbce 	bl	8001948 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80011ac:	e09b      	b.n	80012e6 <HAL_TIM_Base_MspInit+0x1b6>
  else if(tim_baseHandle->Instance==TIM3)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a51      	ldr	r2, [pc, #324]	; (80012f8 <HAL_TIM_Base_MspInit+0x1c8>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d12c      	bne.n	8001212 <HAL_TIM_Base_MspInit+0xe2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011b8:	2300      	movs	r3, #0
 80011ba:	623b      	str	r3, [r7, #32]
 80011bc:	4b4c      	ldr	r3, [pc, #304]	; (80012f0 <HAL_TIM_Base_MspInit+0x1c0>)
 80011be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c0:	4a4b      	ldr	r2, [pc, #300]	; (80012f0 <HAL_TIM_Base_MspInit+0x1c0>)
 80011c2:	f043 0302 	orr.w	r3, r3, #2
 80011c6:	6413      	str	r3, [r2, #64]	; 0x40
 80011c8:	4b49      	ldr	r3, [pc, #292]	; (80012f0 <HAL_TIM_Base_MspInit+0x1c0>)
 80011ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011cc:	f003 0302 	and.w	r3, r3, #2
 80011d0:	623b      	str	r3, [r7, #32]
 80011d2:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011d4:	2300      	movs	r3, #0
 80011d6:	61fb      	str	r3, [r7, #28]
 80011d8:	4b45      	ldr	r3, [pc, #276]	; (80012f0 <HAL_TIM_Base_MspInit+0x1c0>)
 80011da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011dc:	4a44      	ldr	r2, [pc, #272]	; (80012f0 <HAL_TIM_Base_MspInit+0x1c0>)
 80011de:	f043 0308 	orr.w	r3, r3, #8
 80011e2:	6313      	str	r3, [r2, #48]	; 0x30
 80011e4:	4b42      	ldr	r3, [pc, #264]	; (80012f0 <HAL_TIM_Base_MspInit+0x1c0>)
 80011e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e8:	f003 0308 	and.w	r3, r3, #8
 80011ec:	61fb      	str	r3, [r7, #28]
 80011ee:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80011f0:	2304      	movs	r3, #4
 80011f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f4:	2302      	movs	r3, #2
 80011f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fc:	2300      	movs	r3, #0
 80011fe:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001200:	2302      	movs	r3, #2
 8001202:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001204:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001208:	4619      	mov	r1, r3
 800120a:	483c      	ldr	r0, [pc, #240]	; (80012fc <HAL_TIM_Base_MspInit+0x1cc>)
 800120c:	f000 fb9c 	bl	8001948 <HAL_GPIO_Init>
}
 8001210:	e069      	b.n	80012e6 <HAL_TIM_Base_MspInit+0x1b6>
  else if(tim_baseHandle->Instance==TIM4)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a3a      	ldr	r2, [pc, #232]	; (8001300 <HAL_TIM_Base_MspInit+0x1d0>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d10e      	bne.n	800123a <HAL_TIM_Base_MspInit+0x10a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800121c:	2300      	movs	r3, #0
 800121e:	61bb      	str	r3, [r7, #24]
 8001220:	4b33      	ldr	r3, [pc, #204]	; (80012f0 <HAL_TIM_Base_MspInit+0x1c0>)
 8001222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001224:	4a32      	ldr	r2, [pc, #200]	; (80012f0 <HAL_TIM_Base_MspInit+0x1c0>)
 8001226:	f043 0304 	orr.w	r3, r3, #4
 800122a:	6413      	str	r3, [r2, #64]	; 0x40
 800122c:	4b30      	ldr	r3, [pc, #192]	; (80012f0 <HAL_TIM_Base_MspInit+0x1c0>)
 800122e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001230:	f003 0304 	and.w	r3, r3, #4
 8001234:	61bb      	str	r3, [r7, #24]
 8001236:	69bb      	ldr	r3, [r7, #24]
}
 8001238:	e055      	b.n	80012e6 <HAL_TIM_Base_MspInit+0x1b6>
  else if(tim_baseHandle->Instance==TIM5)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a31      	ldr	r2, [pc, #196]	; (8001304 <HAL_TIM_Base_MspInit+0x1d4>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d135      	bne.n	80012b0 <HAL_TIM_Base_MspInit+0x180>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]
 8001248:	4b29      	ldr	r3, [pc, #164]	; (80012f0 <HAL_TIM_Base_MspInit+0x1c0>)
 800124a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124c:	4a28      	ldr	r2, [pc, #160]	; (80012f0 <HAL_TIM_Base_MspInit+0x1c0>)
 800124e:	f043 0308 	orr.w	r3, r3, #8
 8001252:	6413      	str	r3, [r2, #64]	; 0x40
 8001254:	4b26      	ldr	r3, [pc, #152]	; (80012f0 <HAL_TIM_Base_MspInit+0x1c0>)
 8001256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001258:	f003 0308 	and.w	r3, r3, #8
 800125c:	617b      	str	r3, [r7, #20]
 800125e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001260:	2300      	movs	r3, #0
 8001262:	613b      	str	r3, [r7, #16]
 8001264:	4b22      	ldr	r3, [pc, #136]	; (80012f0 <HAL_TIM_Base_MspInit+0x1c0>)
 8001266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001268:	4a21      	ldr	r2, [pc, #132]	; (80012f0 <HAL_TIM_Base_MspInit+0x1c0>)
 800126a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800126e:	6313      	str	r3, [r2, #48]	; 0x30
 8001270:	4b1f      	ldr	r3, [pc, #124]	; (80012f0 <HAL_TIM_Base_MspInit+0x1c0>)
 8001272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001274:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001278:	613b      	str	r3, [r7, #16]
 800127a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = IC_Eco_Pin;
 800127c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001280:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001282:	2302      	movs	r3, #2
 8001284:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001286:	2300      	movs	r3, #0
 8001288:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128a:	2300      	movs	r3, #0
 800128c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800128e:	2302      	movs	r3, #2
 8001290:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(IC_Eco_GPIO_Port, &GPIO_InitStruct);
 8001292:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001296:	4619      	mov	r1, r3
 8001298:	481b      	ldr	r0, [pc, #108]	; (8001308 <HAL_TIM_Base_MspInit+0x1d8>)
 800129a:	f000 fb55 	bl	8001948 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800129e:	2200      	movs	r2, #0
 80012a0:	2100      	movs	r1, #0
 80012a2:	2032      	movs	r0, #50	; 0x32
 80012a4:	f000 fa89 	bl	80017ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80012a8:	2032      	movs	r0, #50	; 0x32
 80012aa:	f000 faa2 	bl	80017f2 <HAL_NVIC_EnableIRQ>
}
 80012ae:	e01a      	b.n	80012e6 <HAL_TIM_Base_MspInit+0x1b6>
  else if(tim_baseHandle->Instance==TIM7)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a15      	ldr	r2, [pc, #84]	; (800130c <HAL_TIM_Base_MspInit+0x1dc>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d115      	bne.n	80012e6 <HAL_TIM_Base_MspInit+0x1b6>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <HAL_TIM_Base_MspInit+0x1c0>)
 80012c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c2:	4a0b      	ldr	r2, [pc, #44]	; (80012f0 <HAL_TIM_Base_MspInit+0x1c0>)
 80012c4:	f043 0320 	orr.w	r3, r3, #32
 80012c8:	6413      	str	r3, [r2, #64]	; 0x40
 80012ca:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <HAL_TIM_Base_MspInit+0x1c0>)
 80012cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ce:	f003 0320 	and.w	r3, r3, #32
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80012d6:	2200      	movs	r2, #0
 80012d8:	2100      	movs	r1, #0
 80012da:	2037      	movs	r0, #55	; 0x37
 80012dc:	f000 fa6d 	bl	80017ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80012e0:	2037      	movs	r0, #55	; 0x37
 80012e2:	f000 fa86 	bl	80017f2 <HAL_NVIC_EnableIRQ>
}
 80012e6:	bf00      	nop
 80012e8:	3740      	adds	r7, #64	; 0x40
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40023800 	.word	0x40023800
 80012f4:	40020000 	.word	0x40020000
 80012f8:	40000400 	.word	0x40000400
 80012fc:	40020c00 	.word	0x40020c00
 8001300:	40000800 	.word	0x40000800
 8001304:	40000c00 	.word	0x40000c00
 8001308:	40021c00 	.word	0x40021c00
 800130c:	40001400 	.word	0x40001400

08001310 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b08a      	sub	sp, #40	; 0x28
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001318:	f107 0314 	add.w	r3, r7, #20
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]
 8001326:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a25      	ldr	r2, [pc, #148]	; (80013c4 <HAL_TIM_MspPostInit+0xb4>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d11f      	bne.n	8001372 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	613b      	str	r3, [r7, #16]
 8001336:	4b24      	ldr	r3, [pc, #144]	; (80013c8 <HAL_TIM_MspPostInit+0xb8>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	4a23      	ldr	r2, [pc, #140]	; (80013c8 <HAL_TIM_MspPostInit+0xb8>)
 800133c:	f043 0308 	orr.w	r3, r3, #8
 8001340:	6313      	str	r3, [r2, #48]	; 0x30
 8001342:	4b21      	ldr	r3, [pc, #132]	; (80013c8 <HAL_TIM_MspPostInit+0xb8>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	f003 0308 	and.w	r3, r3, #8
 800134a:	613b      	str	r3, [r7, #16]
 800134c:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = PWM_R_Pin|PWM_L_Pin;
 800134e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001352:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001354:	2302      	movs	r3, #2
 8001356:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001358:	2300      	movs	r3, #0
 800135a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135c:	2300      	movs	r3, #0
 800135e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001360:	2302      	movs	r3, #2
 8001362:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001364:	f107 0314 	add.w	r3, r7, #20
 8001368:	4619      	mov	r1, r3
 800136a:	4818      	ldr	r0, [pc, #96]	; (80013cc <HAL_TIM_MspPostInit+0xbc>)
 800136c:	f000 faec 	bl	8001948 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001370:	e023      	b.n	80013ba <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM5)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a16      	ldr	r2, [pc, #88]	; (80013d0 <HAL_TIM_MspPostInit+0xc0>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d11e      	bne.n	80013ba <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800137c:	2300      	movs	r3, #0
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	4b11      	ldr	r3, [pc, #68]	; (80013c8 <HAL_TIM_MspPostInit+0xb8>)
 8001382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001384:	4a10      	ldr	r2, [pc, #64]	; (80013c8 <HAL_TIM_MspPostInit+0xb8>)
 8001386:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800138a:	6313      	str	r3, [r2, #48]	; 0x30
 800138c:	4b0e      	ldr	r3, [pc, #56]	; (80013c8 <HAL_TIM_MspPostInit+0xb8>)
 800138e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001390:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_Trig_Pin;
 8001398:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800139c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139e:	2302      	movs	r3, #2
 80013a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a6:	2300      	movs	r3, #0
 80013a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80013aa:	2302      	movs	r3, #2
 80013ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_Trig_GPIO_Port, &GPIO_InitStruct);
 80013ae:	f107 0314 	add.w	r3, r7, #20
 80013b2:	4619      	mov	r1, r3
 80013b4:	4807      	ldr	r0, [pc, #28]	; (80013d4 <HAL_TIM_MspPostInit+0xc4>)
 80013b6:	f000 fac7 	bl	8001948 <HAL_GPIO_Init>
}
 80013ba:	bf00      	nop
 80013bc:	3728      	adds	r7, #40	; 0x28
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40000800 	.word	0x40000800
 80013c8:	40023800 	.word	0x40023800
 80013cc:	40020c00 	.word	0x40020c00
 80013d0:	40000c00 	.word	0x40000c00
 80013d4:	40021c00 	.word	0x40021c00

080013d8 <MX_UART7_Init>:

UART_HandleTypeDef huart7;

/* UART7 init function */
void MX_UART7_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0

  huart7.Instance = UART7;
 80013dc:	4b11      	ldr	r3, [pc, #68]	; (8001424 <MX_UART7_Init+0x4c>)
 80013de:	4a12      	ldr	r2, [pc, #72]	; (8001428 <MX_UART7_Init+0x50>)
 80013e0:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 80013e2:	4b10      	ldr	r3, [pc, #64]	; (8001424 <MX_UART7_Init+0x4c>)
 80013e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013e8:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80013ea:	4b0e      	ldr	r3, [pc, #56]	; (8001424 <MX_UART7_Init+0x4c>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80013f0:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <MX_UART7_Init+0x4c>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80013f6:	4b0b      	ldr	r3, [pc, #44]	; (8001424 <MX_UART7_Init+0x4c>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80013fc:	4b09      	ldr	r3, [pc, #36]	; (8001424 <MX_UART7_Init+0x4c>)
 80013fe:	220c      	movs	r2, #12
 8001400:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001402:	4b08      	ldr	r3, [pc, #32]	; (8001424 <MX_UART7_Init+0x4c>)
 8001404:	2200      	movs	r2, #0
 8001406:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001408:	4b06      	ldr	r3, [pc, #24]	; (8001424 <MX_UART7_Init+0x4c>)
 800140a:	2200      	movs	r2, #0
 800140c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800140e:	4805      	ldr	r0, [pc, #20]	; (8001424 <MX_UART7_Init+0x4c>)
 8001410:	f002 fab6 	bl	8003980 <HAL_UART_Init>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_UART7_Init+0x46>
  {
    Error_Handler();
 800141a:	f7ff fbf1 	bl	8000c00 <Error_Handler>
  }

}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	20000198 	.word	0x20000198
 8001428:	40007800 	.word	0x40007800

0800142c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b08a      	sub	sp, #40	; 0x28
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001434:	f107 0314 	add.w	r3, r7, #20
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	609a      	str	r2, [r3, #8]
 8001440:	60da      	str	r2, [r3, #12]
 8001442:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART7)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a1d      	ldr	r2, [pc, #116]	; (80014c0 <HAL_UART_MspInit+0x94>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d133      	bne.n	80014b6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	613b      	str	r3, [r7, #16]
 8001452:	4b1c      	ldr	r3, [pc, #112]	; (80014c4 <HAL_UART_MspInit+0x98>)
 8001454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001456:	4a1b      	ldr	r2, [pc, #108]	; (80014c4 <HAL_UART_MspInit+0x98>)
 8001458:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800145c:	6413      	str	r3, [r2, #64]	; 0x40
 800145e:	4b19      	ldr	r3, [pc, #100]	; (80014c4 <HAL_UART_MspInit+0x98>)
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001466:	613b      	str	r3, [r7, #16]
 8001468:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	4b15      	ldr	r3, [pc, #84]	; (80014c4 <HAL_UART_MspInit+0x98>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	4a14      	ldr	r2, [pc, #80]	; (80014c4 <HAL_UART_MspInit+0x98>)
 8001474:	f043 0320 	orr.w	r3, r3, #32
 8001478:	6313      	str	r3, [r2, #48]	; 0x30
 800147a:	4b12      	ldr	r3, [pc, #72]	; (80014c4 <HAL_UART_MspInit+0x98>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	f003 0320 	and.w	r3, r3, #32
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	68fb      	ldr	r3, [r7, #12]
    /**UART7 GPIO Configuration
    PF6     ------> UART7_RX
    PF7     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001486:	23c0      	movs	r3, #192	; 0xc0
 8001488:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148a:	2302      	movs	r3, #2
 800148c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800148e:	2301      	movs	r3, #1
 8001490:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001492:	2303      	movs	r3, #3
 8001494:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8001496:	2308      	movs	r3, #8
 8001498:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800149a:	f107 0314 	add.w	r3, r7, #20
 800149e:	4619      	mov	r1, r3
 80014a0:	4809      	ldr	r0, [pc, #36]	; (80014c8 <HAL_UART_MspInit+0x9c>)
 80014a2:	f000 fa51 	bl	8001948 <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 80014a6:	2200      	movs	r2, #0
 80014a8:	2100      	movs	r1, #0
 80014aa:	2052      	movs	r0, #82	; 0x52
 80014ac:	f000 f985 	bl	80017ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 80014b0:	2052      	movs	r0, #82	; 0x52
 80014b2:	f000 f99e 	bl	80017f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }
}
 80014b6:	bf00      	nop
 80014b8:	3728      	adds	r7, #40	; 0x28
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40007800 	.word	0x40007800
 80014c4:	40023800 	.word	0x40023800
 80014c8:	40021400 	.word	0x40021400

080014cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80014cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001504 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80014d0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80014d2:	e003      	b.n	80014dc <LoopCopyDataInit>

080014d4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80014d4:	4b0c      	ldr	r3, [pc, #48]	; (8001508 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80014d6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80014d8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80014da:	3104      	adds	r1, #4

080014dc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80014dc:	480b      	ldr	r0, [pc, #44]	; (800150c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80014de:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80014e0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80014e2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80014e4:	d3f6      	bcc.n	80014d4 <CopyDataInit>
  ldr  r2, =_sbss
 80014e6:	4a0b      	ldr	r2, [pc, #44]	; (8001514 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80014e8:	e002      	b.n	80014f0 <LoopFillZerobss>

080014ea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80014ea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80014ec:	f842 3b04 	str.w	r3, [r2], #4

080014f0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80014f0:	4b09      	ldr	r3, [pc, #36]	; (8001518 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80014f2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80014f4:	d3f9      	bcc.n	80014ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80014f6:	f7ff fbff 	bl	8000cf8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014fa:	f003 f84b 	bl	8004594 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014fe:	f7ff f8fd 	bl	80006fc <main>
  bx  lr    
 8001502:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001504:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001508:	0800462c 	.word	0x0800462c
  ldr  r0, =_sdata
 800150c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001510:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8001514:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8001518:	200001dc 	.word	0x200001dc

0800151c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800151c:	e7fe      	b.n	800151c <ADC_IRQHandler>
	...

08001520 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001524:	4b0e      	ldr	r3, [pc, #56]	; (8001560 <HAL_Init+0x40>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a0d      	ldr	r2, [pc, #52]	; (8001560 <HAL_Init+0x40>)
 800152a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800152e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001530:	4b0b      	ldr	r3, [pc, #44]	; (8001560 <HAL_Init+0x40>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a0a      	ldr	r2, [pc, #40]	; (8001560 <HAL_Init+0x40>)
 8001536:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800153a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800153c:	4b08      	ldr	r3, [pc, #32]	; (8001560 <HAL_Init+0x40>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a07      	ldr	r2, [pc, #28]	; (8001560 <HAL_Init+0x40>)
 8001542:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001546:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001548:	2003      	movs	r0, #3
 800154a:	f000 f92b 	bl	80017a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800154e:	2000      	movs	r0, #0
 8001550:	f000 f808 	bl	8001564 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001554:	f7ff fb5c 	bl	8000c10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	40023c00 	.word	0x40023c00

08001564 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800156c:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <HAL_InitTick+0x54>)
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	4b12      	ldr	r3, [pc, #72]	; (80015bc <HAL_InitTick+0x58>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	4619      	mov	r1, r3
 8001576:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800157a:	fbb3 f3f1 	udiv	r3, r3, r1
 800157e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001582:	4618      	mov	r0, r3
 8001584:	f000 f943 	bl	800180e <HAL_SYSTICK_Config>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e00e      	b.n	80015b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2b0f      	cmp	r3, #15
 8001596:	d80a      	bhi.n	80015ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001598:	2200      	movs	r2, #0
 800159a:	6879      	ldr	r1, [r7, #4]
 800159c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015a0:	f000 f90b 	bl	80017ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015a4:	4a06      	ldr	r2, [pc, #24]	; (80015c0 <HAL_InitTick+0x5c>)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015aa:	2300      	movs	r3, #0
 80015ac:	e000      	b.n	80015b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	20000004 	.word	0x20000004
 80015bc:	2000000c 	.word	0x2000000c
 80015c0:	20000008 	.word	0x20000008

080015c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015c8:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <HAL_IncTick+0x20>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	461a      	mov	r2, r3
 80015ce:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <HAL_IncTick+0x24>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4413      	add	r3, r2
 80015d4:	4a04      	ldr	r2, [pc, #16]	; (80015e8 <HAL_IncTick+0x24>)
 80015d6:	6013      	str	r3, [r2, #0]
}
 80015d8:	bf00      	nop
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	2000000c 	.word	0x2000000c
 80015e8:	200001d8 	.word	0x200001d8

080015ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  return uwTick;
 80015f0:	4b03      	ldr	r3, [pc, #12]	; (8001600 <HAL_GetTick+0x14>)
 80015f2:	681b      	ldr	r3, [r3, #0]
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	200001d8 	.word	0x200001d8

08001604 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001604:	b480      	push	{r7}
 8001606:	b085      	sub	sp, #20
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f003 0307 	and.w	r3, r3, #7
 8001612:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001614:	4b0c      	ldr	r3, [pc, #48]	; (8001648 <__NVIC_SetPriorityGrouping+0x44>)
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800161a:	68ba      	ldr	r2, [r7, #8]
 800161c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001620:	4013      	ands	r3, r2
 8001622:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800162c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001630:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001634:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001636:	4a04      	ldr	r2, [pc, #16]	; (8001648 <__NVIC_SetPriorityGrouping+0x44>)
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	60d3      	str	r3, [r2, #12]
}
 800163c:	bf00      	nop
 800163e:	3714      	adds	r7, #20
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	e000ed00 	.word	0xe000ed00

0800164c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001650:	4b04      	ldr	r3, [pc, #16]	; (8001664 <__NVIC_GetPriorityGrouping+0x18>)
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	0a1b      	lsrs	r3, r3, #8
 8001656:	f003 0307 	and.w	r3, r3, #7
}
 800165a:	4618      	mov	r0, r3
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	e000ed00 	.word	0xe000ed00

08001668 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001676:	2b00      	cmp	r3, #0
 8001678:	db0b      	blt.n	8001692 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800167a:	79fb      	ldrb	r3, [r7, #7]
 800167c:	f003 021f 	and.w	r2, r3, #31
 8001680:	4907      	ldr	r1, [pc, #28]	; (80016a0 <__NVIC_EnableIRQ+0x38>)
 8001682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001686:	095b      	lsrs	r3, r3, #5
 8001688:	2001      	movs	r0, #1
 800168a:	fa00 f202 	lsl.w	r2, r0, r2
 800168e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001692:	bf00      	nop
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	e000e100 	.word	0xe000e100

080016a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	4603      	mov	r3, r0
 80016ac:	6039      	str	r1, [r7, #0]
 80016ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	db0a      	blt.n	80016ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	b2da      	uxtb	r2, r3
 80016bc:	490c      	ldr	r1, [pc, #48]	; (80016f0 <__NVIC_SetPriority+0x4c>)
 80016be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c2:	0112      	lsls	r2, r2, #4
 80016c4:	b2d2      	uxtb	r2, r2
 80016c6:	440b      	add	r3, r1
 80016c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016cc:	e00a      	b.n	80016e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	b2da      	uxtb	r2, r3
 80016d2:	4908      	ldr	r1, [pc, #32]	; (80016f4 <__NVIC_SetPriority+0x50>)
 80016d4:	79fb      	ldrb	r3, [r7, #7]
 80016d6:	f003 030f 	and.w	r3, r3, #15
 80016da:	3b04      	subs	r3, #4
 80016dc:	0112      	lsls	r2, r2, #4
 80016de:	b2d2      	uxtb	r2, r2
 80016e0:	440b      	add	r3, r1
 80016e2:	761a      	strb	r2, [r3, #24]
}
 80016e4:	bf00      	nop
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	e000e100 	.word	0xe000e100
 80016f4:	e000ed00 	.word	0xe000ed00

080016f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b089      	sub	sp, #36	; 0x24
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	60f8      	str	r0, [r7, #12]
 8001700:	60b9      	str	r1, [r7, #8]
 8001702:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f003 0307 	and.w	r3, r3, #7
 800170a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	f1c3 0307 	rsb	r3, r3, #7
 8001712:	2b04      	cmp	r3, #4
 8001714:	bf28      	it	cs
 8001716:	2304      	movcs	r3, #4
 8001718:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	3304      	adds	r3, #4
 800171e:	2b06      	cmp	r3, #6
 8001720:	d902      	bls.n	8001728 <NVIC_EncodePriority+0x30>
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	3b03      	subs	r3, #3
 8001726:	e000      	b.n	800172a <NVIC_EncodePriority+0x32>
 8001728:	2300      	movs	r3, #0
 800172a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800172c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	fa02 f303 	lsl.w	r3, r2, r3
 8001736:	43da      	mvns	r2, r3
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	401a      	ands	r2, r3
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001740:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	fa01 f303 	lsl.w	r3, r1, r3
 800174a:	43d9      	mvns	r1, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001750:	4313      	orrs	r3, r2
         );
}
 8001752:	4618      	mov	r0, r3
 8001754:	3724      	adds	r7, #36	; 0x24
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
	...

08001760 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	3b01      	subs	r3, #1
 800176c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001770:	d301      	bcc.n	8001776 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001772:	2301      	movs	r3, #1
 8001774:	e00f      	b.n	8001796 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001776:	4a0a      	ldr	r2, [pc, #40]	; (80017a0 <SysTick_Config+0x40>)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3b01      	subs	r3, #1
 800177c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800177e:	210f      	movs	r1, #15
 8001780:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001784:	f7ff ff8e 	bl	80016a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001788:	4b05      	ldr	r3, [pc, #20]	; (80017a0 <SysTick_Config+0x40>)
 800178a:	2200      	movs	r2, #0
 800178c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800178e:	4b04      	ldr	r3, [pc, #16]	; (80017a0 <SysTick_Config+0x40>)
 8001790:	2207      	movs	r2, #7
 8001792:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	e000e010 	.word	0xe000e010

080017a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f7ff ff29 	bl	8001604 <__NVIC_SetPriorityGrouping>
}
 80017b2:	bf00      	nop
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b086      	sub	sp, #24
 80017be:	af00      	add	r7, sp, #0
 80017c0:	4603      	mov	r3, r0
 80017c2:	60b9      	str	r1, [r7, #8]
 80017c4:	607a      	str	r2, [r7, #4]
 80017c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017c8:	2300      	movs	r3, #0
 80017ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017cc:	f7ff ff3e 	bl	800164c <__NVIC_GetPriorityGrouping>
 80017d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	68b9      	ldr	r1, [r7, #8]
 80017d6:	6978      	ldr	r0, [r7, #20]
 80017d8:	f7ff ff8e 	bl	80016f8 <NVIC_EncodePriority>
 80017dc:	4602      	mov	r2, r0
 80017de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017e2:	4611      	mov	r1, r2
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff ff5d 	bl	80016a4 <__NVIC_SetPriority>
}
 80017ea:	bf00      	nop
 80017ec:	3718      	adds	r7, #24
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b082      	sub	sp, #8
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	4603      	mov	r3, r0
 80017fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff ff31 	bl	8001668 <__NVIC_EnableIRQ>
}
 8001806:	bf00      	nop
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	b082      	sub	sp, #8
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f7ff ffa2 	bl	8001760 <SysTick_Config>
 800181c:	4603      	mov	r3, r0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8001826:	b580      	push	{r7, lr}
 8001828:	b082      	sub	sp, #8
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d101      	bne.n	8001838 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e014      	b.n	8001862 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	791b      	ldrb	r3, [r3, #4]
 800183c:	b2db      	uxtb	r3, r3
 800183e:	2b00      	cmp	r3, #0
 8001840:	d105      	bne.n	800184e <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2200      	movs	r2, #0
 8001846:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f7fe fe83 	bl	8000554 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2202      	movs	r2, #2
 8001852:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2200      	movs	r2, #0
 8001858:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2201      	movs	r2, #1
 800185e:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8001860:	2300      	movs	r3, #0
}
 8001862:	4618      	mov	r0, r3
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 800186a:	b480      	push	{r7}
 800186c:	b087      	sub	sp, #28
 800186e:	af00      	add	r7, sp, #0
 8001870:	60f8      	str	r0, [r7, #12]
 8001872:	60b9      	str	r1, [r7, #8]
 8001874:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8001876:	2300      	movs	r3, #0
 8001878:	617b      	str	r3, [r7, #20]
 800187a:	2300      	movs	r3, #0
 800187c:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	795b      	ldrb	r3, [r3, #5]
 8001882:	2b01      	cmp	r3, #1
 8001884:	d101      	bne.n	800188a <HAL_DAC_ConfigChannel+0x20>
 8001886:	2302      	movs	r3, #2
 8001888:	e036      	b.n	80018f8 <HAL_DAC_ConfigChannel+0x8e>
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2201      	movs	r2, #1
 800188e:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	2202      	movs	r2, #2
 8001894:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 800189e:	f640 72fe 	movw	r2, #4094	; 0xffe
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	43db      	mvns	r3, r3
 80018aa:	697a      	ldr	r2, [r7, #20]
 80018ac:	4013      	ands	r3, r2
 80018ae:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80018bc:	693a      	ldr	r2, [r7, #16]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	697a      	ldr	r2, [r7, #20]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	697a      	ldr	r2, [r7, #20]
 80018d0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	6819      	ldr	r1, [r3, #0]
 80018d8:	22c0      	movs	r2, #192	; 0xc0
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	43da      	mvns	r2, r3
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	400a      	ands	r2, r1
 80018e8:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	2201      	movs	r2, #1
 80018ee:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2200      	movs	r2, #0
 80018f4:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80018f6:	2300      	movs	r3, #0
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	371c      	adds	r7, #28
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001912:	b2db      	uxtb	r3, r3
 8001914:	2b02      	cmp	r3, #2
 8001916:	d004      	beq.n	8001922 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2280      	movs	r2, #128	; 0x80
 800191c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e00c      	b.n	800193c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2205      	movs	r2, #5
 8001926:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f022 0201 	bic.w	r2, r2, #1
 8001938:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800193a:	2300      	movs	r3, #0
}
 800193c:	4618      	mov	r0, r3
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001948:	b480      	push	{r7}
 800194a:	b089      	sub	sp, #36	; 0x24
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001952:	2300      	movs	r3, #0
 8001954:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001956:	2300      	movs	r3, #0
 8001958:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800195a:	2300      	movs	r3, #0
 800195c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800195e:	2300      	movs	r3, #0
 8001960:	61fb      	str	r3, [r7, #28]
 8001962:	e177      	b.n	8001c54 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001964:	2201      	movs	r2, #1
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	697a      	ldr	r2, [r7, #20]
 8001974:	4013      	ands	r3, r2
 8001976:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001978:	693a      	ldr	r2, [r7, #16]
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	429a      	cmp	r2, r3
 800197e:	f040 8166 	bne.w	8001c4e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	2b01      	cmp	r3, #1
 8001988:	d00b      	beq.n	80019a2 <HAL_GPIO_Init+0x5a>
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	2b02      	cmp	r3, #2
 8001990:	d007      	beq.n	80019a2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001996:	2b11      	cmp	r3, #17
 8001998:	d003      	beq.n	80019a2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	2b12      	cmp	r3, #18
 80019a0:	d130      	bne.n	8001a04 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	2203      	movs	r2, #3
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	43db      	mvns	r3, r3
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	4013      	ands	r3, r2
 80019b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	68da      	ldr	r2, [r3, #12]
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	fa02 f303 	lsl.w	r3, r2, r3
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019d8:	2201      	movs	r2, #1
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	43db      	mvns	r3, r3
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	4013      	ands	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	091b      	lsrs	r3, r3, #4
 80019ee:	f003 0201 	and.w	r2, r3, #1
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	2203      	movs	r2, #3
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	43db      	mvns	r3, r3
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	689a      	ldr	r2, [r3, #8]
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d003      	beq.n	8001a44 <HAL_GPIO_Init+0xfc>
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	2b12      	cmp	r3, #18
 8001a42:	d123      	bne.n	8001a8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	08da      	lsrs	r2, r3, #3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	3208      	adds	r2, #8
 8001a4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	f003 0307 	and.w	r3, r3, #7
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	220f      	movs	r2, #15
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	43db      	mvns	r3, r3
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	4013      	ands	r3, r2
 8001a66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	691a      	ldr	r2, [r3, #16]
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	f003 0307 	and.w	r3, r3, #7
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	08da      	lsrs	r2, r3, #3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	3208      	adds	r2, #8
 8001a86:	69b9      	ldr	r1, [r7, #24]
 8001a88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	2203      	movs	r2, #3
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f003 0203 	and.w	r2, r3, #3
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	f000 80c0 	beq.w	8001c4e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60fb      	str	r3, [r7, #12]
 8001ad2:	4b65      	ldr	r3, [pc, #404]	; (8001c68 <HAL_GPIO_Init+0x320>)
 8001ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad6:	4a64      	ldr	r2, [pc, #400]	; (8001c68 <HAL_GPIO_Init+0x320>)
 8001ad8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001adc:	6453      	str	r3, [r2, #68]	; 0x44
 8001ade:	4b62      	ldr	r3, [pc, #392]	; (8001c68 <HAL_GPIO_Init+0x320>)
 8001ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001aea:	4a60      	ldr	r2, [pc, #384]	; (8001c6c <HAL_GPIO_Init+0x324>)
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	089b      	lsrs	r3, r3, #2
 8001af0:	3302      	adds	r3, #2
 8001af2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001af6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	f003 0303 	and.w	r3, r3, #3
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	220f      	movs	r2, #15
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	43db      	mvns	r3, r3
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a57      	ldr	r2, [pc, #348]	; (8001c70 <HAL_GPIO_Init+0x328>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d037      	beq.n	8001b86 <HAL_GPIO_Init+0x23e>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a56      	ldr	r2, [pc, #344]	; (8001c74 <HAL_GPIO_Init+0x32c>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d031      	beq.n	8001b82 <HAL_GPIO_Init+0x23a>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a55      	ldr	r2, [pc, #340]	; (8001c78 <HAL_GPIO_Init+0x330>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d02b      	beq.n	8001b7e <HAL_GPIO_Init+0x236>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a54      	ldr	r2, [pc, #336]	; (8001c7c <HAL_GPIO_Init+0x334>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d025      	beq.n	8001b7a <HAL_GPIO_Init+0x232>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a53      	ldr	r2, [pc, #332]	; (8001c80 <HAL_GPIO_Init+0x338>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d01f      	beq.n	8001b76 <HAL_GPIO_Init+0x22e>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a52      	ldr	r2, [pc, #328]	; (8001c84 <HAL_GPIO_Init+0x33c>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d019      	beq.n	8001b72 <HAL_GPIO_Init+0x22a>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4a51      	ldr	r2, [pc, #324]	; (8001c88 <HAL_GPIO_Init+0x340>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d013      	beq.n	8001b6e <HAL_GPIO_Init+0x226>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a50      	ldr	r2, [pc, #320]	; (8001c8c <HAL_GPIO_Init+0x344>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d00d      	beq.n	8001b6a <HAL_GPIO_Init+0x222>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a4f      	ldr	r2, [pc, #316]	; (8001c90 <HAL_GPIO_Init+0x348>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d007      	beq.n	8001b66 <HAL_GPIO_Init+0x21e>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a4e      	ldr	r2, [pc, #312]	; (8001c94 <HAL_GPIO_Init+0x34c>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d101      	bne.n	8001b62 <HAL_GPIO_Init+0x21a>
 8001b5e:	2309      	movs	r3, #9
 8001b60:	e012      	b.n	8001b88 <HAL_GPIO_Init+0x240>
 8001b62:	230a      	movs	r3, #10
 8001b64:	e010      	b.n	8001b88 <HAL_GPIO_Init+0x240>
 8001b66:	2308      	movs	r3, #8
 8001b68:	e00e      	b.n	8001b88 <HAL_GPIO_Init+0x240>
 8001b6a:	2307      	movs	r3, #7
 8001b6c:	e00c      	b.n	8001b88 <HAL_GPIO_Init+0x240>
 8001b6e:	2306      	movs	r3, #6
 8001b70:	e00a      	b.n	8001b88 <HAL_GPIO_Init+0x240>
 8001b72:	2305      	movs	r3, #5
 8001b74:	e008      	b.n	8001b88 <HAL_GPIO_Init+0x240>
 8001b76:	2304      	movs	r3, #4
 8001b78:	e006      	b.n	8001b88 <HAL_GPIO_Init+0x240>
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e004      	b.n	8001b88 <HAL_GPIO_Init+0x240>
 8001b7e:	2302      	movs	r3, #2
 8001b80:	e002      	b.n	8001b88 <HAL_GPIO_Init+0x240>
 8001b82:	2301      	movs	r3, #1
 8001b84:	e000      	b.n	8001b88 <HAL_GPIO_Init+0x240>
 8001b86:	2300      	movs	r3, #0
 8001b88:	69fa      	ldr	r2, [r7, #28]
 8001b8a:	f002 0203 	and.w	r2, r2, #3
 8001b8e:	0092      	lsls	r2, r2, #2
 8001b90:	4093      	lsls	r3, r2
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b98:	4934      	ldr	r1, [pc, #208]	; (8001c6c <HAL_GPIO_Init+0x324>)
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	089b      	lsrs	r3, r3, #2
 8001b9e:	3302      	adds	r3, #2
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ba6:	4b3c      	ldr	r3, [pc, #240]	; (8001c98 <HAL_GPIO_Init+0x350>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	43db      	mvns	r3, r3
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d003      	beq.n	8001bca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bca:	4a33      	ldr	r2, [pc, #204]	; (8001c98 <HAL_GPIO_Init+0x350>)
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001bd0:	4b31      	ldr	r3, [pc, #196]	; (8001c98 <HAL_GPIO_Init+0x350>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d003      	beq.n	8001bf4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bf4:	4a28      	ldr	r2, [pc, #160]	; (8001c98 <HAL_GPIO_Init+0x350>)
 8001bf6:	69bb      	ldr	r3, [r7, #24]
 8001bf8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bfa:	4b27      	ldr	r3, [pc, #156]	; (8001c98 <HAL_GPIO_Init+0x350>)
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	43db      	mvns	r3, r3
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	4013      	ands	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d003      	beq.n	8001c1e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c1e:	4a1e      	ldr	r2, [pc, #120]	; (8001c98 <HAL_GPIO_Init+0x350>)
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c24:	4b1c      	ldr	r3, [pc, #112]	; (8001c98 <HAL_GPIO_Init+0x350>)
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	4013      	ands	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d003      	beq.n	8001c48 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c48:	4a13      	ldr	r2, [pc, #76]	; (8001c98 <HAL_GPIO_Init+0x350>)
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	3301      	adds	r3, #1
 8001c52:	61fb      	str	r3, [r7, #28]
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	2b0f      	cmp	r3, #15
 8001c58:	f67f ae84 	bls.w	8001964 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c5c:	bf00      	nop
 8001c5e:	3724      	adds	r7, #36	; 0x24
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr
 8001c68:	40023800 	.word	0x40023800
 8001c6c:	40013800 	.word	0x40013800
 8001c70:	40020000 	.word	0x40020000
 8001c74:	40020400 	.word	0x40020400
 8001c78:	40020800 	.word	0x40020800
 8001c7c:	40020c00 	.word	0x40020c00
 8001c80:	40021000 	.word	0x40021000
 8001c84:	40021400 	.word	0x40021400
 8001c88:	40021800 	.word	0x40021800
 8001c8c:	40021c00 	.word	0x40021c00
 8001c90:	40022000 	.word	0x40022000
 8001c94:	40022400 	.word	0x40022400
 8001c98:	40013c00 	.word	0x40013c00

08001c9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b085      	sub	sp, #20
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	691a      	ldr	r2, [r3, #16]
 8001cac:	887b      	ldrh	r3, [r7, #2]
 8001cae:	4013      	ands	r3, r2
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d002      	beq.n	8001cba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	73fb      	strb	r3, [r7, #15]
 8001cb8:	e001      	b.n	8001cbe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3714      	adds	r7, #20
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	807b      	strh	r3, [r7, #2]
 8001cd8:	4613      	mov	r3, r2
 8001cda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cdc:	787b      	ldrb	r3, [r7, #1]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d003      	beq.n	8001cea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ce2:	887a      	ldrh	r2, [r7, #2]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ce8:	e003      	b.n	8001cf2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cea:	887b      	ldrh	r3, [r7, #2]
 8001cec:	041a      	lsls	r2, r3, #16
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	619a      	str	r2, [r3, #24]
}
 8001cf2:	bf00      	nop
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
	...

08001d00 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001d06:	2300      	movs	r3, #0
 8001d08:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	603b      	str	r3, [r7, #0]
 8001d0e:	4b20      	ldr	r3, [pc, #128]	; (8001d90 <HAL_PWREx_EnableOverDrive+0x90>)
 8001d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d12:	4a1f      	ldr	r2, [pc, #124]	; (8001d90 <HAL_PWREx_EnableOverDrive+0x90>)
 8001d14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d18:	6413      	str	r3, [r2, #64]	; 0x40
 8001d1a:	4b1d      	ldr	r3, [pc, #116]	; (8001d90 <HAL_PWREx_EnableOverDrive+0x90>)
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d22:	603b      	str	r3, [r7, #0]
 8001d24:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001d26:	4b1b      	ldr	r3, [pc, #108]	; (8001d94 <HAL_PWREx_EnableOverDrive+0x94>)
 8001d28:	2201      	movs	r2, #1
 8001d2a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d2c:	f7ff fc5e 	bl	80015ec <HAL_GetTick>
 8001d30:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001d32:	e009      	b.n	8001d48 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001d34:	f7ff fc5a 	bl	80015ec <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d42:	d901      	bls.n	8001d48 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e01f      	b.n	8001d88 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001d48:	4b13      	ldr	r3, [pc, #76]	; (8001d98 <HAL_PWREx_EnableOverDrive+0x98>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d54:	d1ee      	bne.n	8001d34 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001d56:	4b11      	ldr	r3, [pc, #68]	; (8001d9c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d58:	2201      	movs	r2, #1
 8001d5a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d5c:	f7ff fc46 	bl	80015ec <HAL_GetTick>
 8001d60:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001d62:	e009      	b.n	8001d78 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001d64:	f7ff fc42 	bl	80015ec <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d72:	d901      	bls.n	8001d78 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001d74:	2303      	movs	r3, #3
 8001d76:	e007      	b.n	8001d88 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001d78:	4b07      	ldr	r3, [pc, #28]	; (8001d98 <HAL_PWREx_EnableOverDrive+0x98>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001d84:	d1ee      	bne.n	8001d64 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001d86:	2300      	movs	r3, #0
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3708      	adds	r7, #8
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	40023800 	.word	0x40023800
 8001d94:	420e0040 	.word	0x420e0040
 8001d98:	40007000 	.word	0x40007000
 8001d9c:	420e0044 	.word	0x420e0044

08001da0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b086      	sub	sp, #24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d101      	bne.n	8001db2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e25b      	b.n	800226a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d075      	beq.n	8001eaa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001dbe:	4ba3      	ldr	r3, [pc, #652]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f003 030c 	and.w	r3, r3, #12
 8001dc6:	2b04      	cmp	r3, #4
 8001dc8:	d00c      	beq.n	8001de4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dca:	4ba0      	ldr	r3, [pc, #640]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001dd2:	2b08      	cmp	r3, #8
 8001dd4:	d112      	bne.n	8001dfc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dd6:	4b9d      	ldr	r3, [pc, #628]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001de2:	d10b      	bne.n	8001dfc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de4:	4b99      	ldr	r3, [pc, #612]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d05b      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x108>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d157      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e236      	b.n	800226a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e04:	d106      	bne.n	8001e14 <HAL_RCC_OscConfig+0x74>
 8001e06:	4b91      	ldr	r3, [pc, #580]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a90      	ldr	r2, [pc, #576]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001e0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e10:	6013      	str	r3, [r2, #0]
 8001e12:	e01d      	b.n	8001e50 <HAL_RCC_OscConfig+0xb0>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e1c:	d10c      	bne.n	8001e38 <HAL_RCC_OscConfig+0x98>
 8001e1e:	4b8b      	ldr	r3, [pc, #556]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a8a      	ldr	r2, [pc, #552]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001e24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e28:	6013      	str	r3, [r2, #0]
 8001e2a:	4b88      	ldr	r3, [pc, #544]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a87      	ldr	r2, [pc, #540]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001e30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e34:	6013      	str	r3, [r2, #0]
 8001e36:	e00b      	b.n	8001e50 <HAL_RCC_OscConfig+0xb0>
 8001e38:	4b84      	ldr	r3, [pc, #528]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a83      	ldr	r2, [pc, #524]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001e3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e42:	6013      	str	r3, [r2, #0]
 8001e44:	4b81      	ldr	r3, [pc, #516]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a80      	ldr	r2, [pc, #512]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001e4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d013      	beq.n	8001e80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e58:	f7ff fbc8 	bl	80015ec <HAL_GetTick>
 8001e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e5e:	e008      	b.n	8001e72 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e60:	f7ff fbc4 	bl	80015ec <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b64      	cmp	r3, #100	; 0x64
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e1fb      	b.n	800226a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e72:	4b76      	ldr	r3, [pc, #472]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d0f0      	beq.n	8001e60 <HAL_RCC_OscConfig+0xc0>
 8001e7e:	e014      	b.n	8001eaa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e80:	f7ff fbb4 	bl	80015ec <HAL_GetTick>
 8001e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e86:	e008      	b.n	8001e9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e88:	f7ff fbb0 	bl	80015ec <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b64      	cmp	r3, #100	; 0x64
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e1e7      	b.n	800226a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e9a:	4b6c      	ldr	r3, [pc, #432]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d1f0      	bne.n	8001e88 <HAL_RCC_OscConfig+0xe8>
 8001ea6:	e000      	b.n	8001eaa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ea8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d063      	beq.n	8001f7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001eb6:	4b65      	ldr	r3, [pc, #404]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	f003 030c 	and.w	r3, r3, #12
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d00b      	beq.n	8001eda <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ec2:	4b62      	ldr	r3, [pc, #392]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001eca:	2b08      	cmp	r3, #8
 8001ecc:	d11c      	bne.n	8001f08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ece:	4b5f      	ldr	r3, [pc, #380]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d116      	bne.n	8001f08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eda:	4b5c      	ldr	r3, [pc, #368]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d005      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x152>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d001      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e1bb      	b.n	800226a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ef2:	4b56      	ldr	r3, [pc, #344]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	691b      	ldr	r3, [r3, #16]
 8001efe:	00db      	lsls	r3, r3, #3
 8001f00:	4952      	ldr	r1, [pc, #328]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001f02:	4313      	orrs	r3, r2
 8001f04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f06:	e03a      	b.n	8001f7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d020      	beq.n	8001f52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f10:	4b4f      	ldr	r3, [pc, #316]	; (8002050 <HAL_RCC_OscConfig+0x2b0>)
 8001f12:	2201      	movs	r2, #1
 8001f14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f16:	f7ff fb69 	bl	80015ec <HAL_GetTick>
 8001f1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f1c:	e008      	b.n	8001f30 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f1e:	f7ff fb65 	bl	80015ec <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d901      	bls.n	8001f30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e19c      	b.n	800226a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f30:	4b46      	ldr	r3, [pc, #280]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0302 	and.w	r3, r3, #2
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d0f0      	beq.n	8001f1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f3c:	4b43      	ldr	r3, [pc, #268]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	691b      	ldr	r3, [r3, #16]
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	4940      	ldr	r1, [pc, #256]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	600b      	str	r3, [r1, #0]
 8001f50:	e015      	b.n	8001f7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f52:	4b3f      	ldr	r3, [pc, #252]	; (8002050 <HAL_RCC_OscConfig+0x2b0>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f58:	f7ff fb48 	bl	80015ec <HAL_GetTick>
 8001f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f5e:	e008      	b.n	8001f72 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f60:	f7ff fb44 	bl	80015ec <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e17b      	b.n	800226a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f72:	4b36      	ldr	r3, [pc, #216]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d1f0      	bne.n	8001f60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0308 	and.w	r3, r3, #8
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d030      	beq.n	8001fec <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d016      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f92:	4b30      	ldr	r3, [pc, #192]	; (8002054 <HAL_RCC_OscConfig+0x2b4>)
 8001f94:	2201      	movs	r2, #1
 8001f96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f98:	f7ff fb28 	bl	80015ec <HAL_GetTick>
 8001f9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f9e:	e008      	b.n	8001fb2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fa0:	f7ff fb24 	bl	80015ec <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e15b      	b.n	800226a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fb2:	4b26      	ldr	r3, [pc, #152]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001fb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d0f0      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x200>
 8001fbe:	e015      	b.n	8001fec <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fc0:	4b24      	ldr	r3, [pc, #144]	; (8002054 <HAL_RCC_OscConfig+0x2b4>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fc6:	f7ff fb11 	bl	80015ec <HAL_GetTick>
 8001fca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fcc:	e008      	b.n	8001fe0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fce:	f7ff fb0d 	bl	80015ec <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d901      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e144      	b.n	800226a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fe0:	4b1a      	ldr	r3, [pc, #104]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001fe2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d1f0      	bne.n	8001fce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0304 	and.w	r3, r3, #4
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	f000 80a0 	beq.w	800213a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ffe:	4b13      	ldr	r3, [pc, #76]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8002000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d10f      	bne.n	800202a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800200a:	2300      	movs	r3, #0
 800200c:	60bb      	str	r3, [r7, #8]
 800200e:	4b0f      	ldr	r3, [pc, #60]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8002010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002012:	4a0e      	ldr	r2, [pc, #56]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8002014:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002018:	6413      	str	r3, [r2, #64]	; 0x40
 800201a:	4b0c      	ldr	r3, [pc, #48]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 800201c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002022:	60bb      	str	r3, [r7, #8]
 8002024:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002026:	2301      	movs	r3, #1
 8002028:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800202a:	4b0b      	ldr	r3, [pc, #44]	; (8002058 <HAL_RCC_OscConfig+0x2b8>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002032:	2b00      	cmp	r3, #0
 8002034:	d121      	bne.n	800207a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002036:	4b08      	ldr	r3, [pc, #32]	; (8002058 <HAL_RCC_OscConfig+0x2b8>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a07      	ldr	r2, [pc, #28]	; (8002058 <HAL_RCC_OscConfig+0x2b8>)
 800203c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002040:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002042:	f7ff fad3 	bl	80015ec <HAL_GetTick>
 8002046:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002048:	e011      	b.n	800206e <HAL_RCC_OscConfig+0x2ce>
 800204a:	bf00      	nop
 800204c:	40023800 	.word	0x40023800
 8002050:	42470000 	.word	0x42470000
 8002054:	42470e80 	.word	0x42470e80
 8002058:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800205c:	f7ff fac6 	bl	80015ec <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e0fd      	b.n	800226a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800206e:	4b81      	ldr	r3, [pc, #516]	; (8002274 <HAL_RCC_OscConfig+0x4d4>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002076:	2b00      	cmp	r3, #0
 8002078:	d0f0      	beq.n	800205c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d106      	bne.n	8002090 <HAL_RCC_OscConfig+0x2f0>
 8002082:	4b7d      	ldr	r3, [pc, #500]	; (8002278 <HAL_RCC_OscConfig+0x4d8>)
 8002084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002086:	4a7c      	ldr	r2, [pc, #496]	; (8002278 <HAL_RCC_OscConfig+0x4d8>)
 8002088:	f043 0301 	orr.w	r3, r3, #1
 800208c:	6713      	str	r3, [r2, #112]	; 0x70
 800208e:	e01c      	b.n	80020ca <HAL_RCC_OscConfig+0x32a>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	2b05      	cmp	r3, #5
 8002096:	d10c      	bne.n	80020b2 <HAL_RCC_OscConfig+0x312>
 8002098:	4b77      	ldr	r3, [pc, #476]	; (8002278 <HAL_RCC_OscConfig+0x4d8>)
 800209a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800209c:	4a76      	ldr	r2, [pc, #472]	; (8002278 <HAL_RCC_OscConfig+0x4d8>)
 800209e:	f043 0304 	orr.w	r3, r3, #4
 80020a2:	6713      	str	r3, [r2, #112]	; 0x70
 80020a4:	4b74      	ldr	r3, [pc, #464]	; (8002278 <HAL_RCC_OscConfig+0x4d8>)
 80020a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020a8:	4a73      	ldr	r2, [pc, #460]	; (8002278 <HAL_RCC_OscConfig+0x4d8>)
 80020aa:	f043 0301 	orr.w	r3, r3, #1
 80020ae:	6713      	str	r3, [r2, #112]	; 0x70
 80020b0:	e00b      	b.n	80020ca <HAL_RCC_OscConfig+0x32a>
 80020b2:	4b71      	ldr	r3, [pc, #452]	; (8002278 <HAL_RCC_OscConfig+0x4d8>)
 80020b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020b6:	4a70      	ldr	r2, [pc, #448]	; (8002278 <HAL_RCC_OscConfig+0x4d8>)
 80020b8:	f023 0301 	bic.w	r3, r3, #1
 80020bc:	6713      	str	r3, [r2, #112]	; 0x70
 80020be:	4b6e      	ldr	r3, [pc, #440]	; (8002278 <HAL_RCC_OscConfig+0x4d8>)
 80020c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020c2:	4a6d      	ldr	r2, [pc, #436]	; (8002278 <HAL_RCC_OscConfig+0x4d8>)
 80020c4:	f023 0304 	bic.w	r3, r3, #4
 80020c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d015      	beq.n	80020fe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020d2:	f7ff fa8b 	bl	80015ec <HAL_GetTick>
 80020d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020d8:	e00a      	b.n	80020f0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020da:	f7ff fa87 	bl	80015ec <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d901      	bls.n	80020f0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e0bc      	b.n	800226a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020f0:	4b61      	ldr	r3, [pc, #388]	; (8002278 <HAL_RCC_OscConfig+0x4d8>)
 80020f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020f4:	f003 0302 	and.w	r3, r3, #2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d0ee      	beq.n	80020da <HAL_RCC_OscConfig+0x33a>
 80020fc:	e014      	b.n	8002128 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020fe:	f7ff fa75 	bl	80015ec <HAL_GetTick>
 8002102:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002104:	e00a      	b.n	800211c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002106:	f7ff fa71 	bl	80015ec <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	f241 3288 	movw	r2, #5000	; 0x1388
 8002114:	4293      	cmp	r3, r2
 8002116:	d901      	bls.n	800211c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e0a6      	b.n	800226a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800211c:	4b56      	ldr	r3, [pc, #344]	; (8002278 <HAL_RCC_OscConfig+0x4d8>)
 800211e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002120:	f003 0302 	and.w	r3, r3, #2
 8002124:	2b00      	cmp	r3, #0
 8002126:	d1ee      	bne.n	8002106 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002128:	7dfb      	ldrb	r3, [r7, #23]
 800212a:	2b01      	cmp	r3, #1
 800212c:	d105      	bne.n	800213a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800212e:	4b52      	ldr	r3, [pc, #328]	; (8002278 <HAL_RCC_OscConfig+0x4d8>)
 8002130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002132:	4a51      	ldr	r2, [pc, #324]	; (8002278 <HAL_RCC_OscConfig+0x4d8>)
 8002134:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002138:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	699b      	ldr	r3, [r3, #24]
 800213e:	2b00      	cmp	r3, #0
 8002140:	f000 8092 	beq.w	8002268 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002144:	4b4c      	ldr	r3, [pc, #304]	; (8002278 <HAL_RCC_OscConfig+0x4d8>)
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	f003 030c 	and.w	r3, r3, #12
 800214c:	2b08      	cmp	r3, #8
 800214e:	d05c      	beq.n	800220a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	2b02      	cmp	r3, #2
 8002156:	d141      	bne.n	80021dc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002158:	4b48      	ldr	r3, [pc, #288]	; (800227c <HAL_RCC_OscConfig+0x4dc>)
 800215a:	2200      	movs	r2, #0
 800215c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800215e:	f7ff fa45 	bl	80015ec <HAL_GetTick>
 8002162:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002164:	e008      	b.n	8002178 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002166:	f7ff fa41 	bl	80015ec <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	2b02      	cmp	r3, #2
 8002172:	d901      	bls.n	8002178 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e078      	b.n	800226a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002178:	4b3f      	ldr	r3, [pc, #252]	; (8002278 <HAL_RCC_OscConfig+0x4d8>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d1f0      	bne.n	8002166 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	69da      	ldr	r2, [r3, #28]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6a1b      	ldr	r3, [r3, #32]
 800218c:	431a      	orrs	r2, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002192:	019b      	lsls	r3, r3, #6
 8002194:	431a      	orrs	r2, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800219a:	085b      	lsrs	r3, r3, #1
 800219c:	3b01      	subs	r3, #1
 800219e:	041b      	lsls	r3, r3, #16
 80021a0:	431a      	orrs	r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a6:	061b      	lsls	r3, r3, #24
 80021a8:	4933      	ldr	r1, [pc, #204]	; (8002278 <HAL_RCC_OscConfig+0x4d8>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021ae:	4b33      	ldr	r3, [pc, #204]	; (800227c <HAL_RCC_OscConfig+0x4dc>)
 80021b0:	2201      	movs	r2, #1
 80021b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b4:	f7ff fa1a 	bl	80015ec <HAL_GetTick>
 80021b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ba:	e008      	b.n	80021ce <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021bc:	f7ff fa16 	bl	80015ec <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e04d      	b.n	800226a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ce:	4b2a      	ldr	r3, [pc, #168]	; (8002278 <HAL_RCC_OscConfig+0x4d8>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d0f0      	beq.n	80021bc <HAL_RCC_OscConfig+0x41c>
 80021da:	e045      	b.n	8002268 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021dc:	4b27      	ldr	r3, [pc, #156]	; (800227c <HAL_RCC_OscConfig+0x4dc>)
 80021de:	2200      	movs	r2, #0
 80021e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e2:	f7ff fa03 	bl	80015ec <HAL_GetTick>
 80021e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021e8:	e008      	b.n	80021fc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021ea:	f7ff f9ff 	bl	80015ec <HAL_GetTick>
 80021ee:	4602      	mov	r2, r0
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d901      	bls.n	80021fc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e036      	b.n	800226a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021fc:	4b1e      	ldr	r3, [pc, #120]	; (8002278 <HAL_RCC_OscConfig+0x4d8>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d1f0      	bne.n	80021ea <HAL_RCC_OscConfig+0x44a>
 8002208:	e02e      	b.n	8002268 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	699b      	ldr	r3, [r3, #24]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d101      	bne.n	8002216 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e029      	b.n	800226a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002216:	4b18      	ldr	r3, [pc, #96]	; (8002278 <HAL_RCC_OscConfig+0x4d8>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	69db      	ldr	r3, [r3, #28]
 8002226:	429a      	cmp	r2, r3
 8002228:	d11c      	bne.n	8002264 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002234:	429a      	cmp	r2, r3
 8002236:	d115      	bne.n	8002264 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002238:	68fa      	ldr	r2, [r7, #12]
 800223a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800223e:	4013      	ands	r3, r2
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002244:	4293      	cmp	r3, r2
 8002246:	d10d      	bne.n	8002264 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002252:	429a      	cmp	r2, r3
 8002254:	d106      	bne.n	8002264 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002260:	429a      	cmp	r2, r3
 8002262:	d001      	beq.n	8002268 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e000      	b.n	800226a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3718      	adds	r7, #24
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	40007000 	.word	0x40007000
 8002278:	40023800 	.word	0x40023800
 800227c:	42470060 	.word	0x42470060

08002280 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d101      	bne.n	8002294 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e0cc      	b.n	800242e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002294:	4b68      	ldr	r3, [pc, #416]	; (8002438 <HAL_RCC_ClockConfig+0x1b8>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 030f 	and.w	r3, r3, #15
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d90c      	bls.n	80022bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022a2:	4b65      	ldr	r3, [pc, #404]	; (8002438 <HAL_RCC_ClockConfig+0x1b8>)
 80022a4:	683a      	ldr	r2, [r7, #0]
 80022a6:	b2d2      	uxtb	r2, r2
 80022a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022aa:	4b63      	ldr	r3, [pc, #396]	; (8002438 <HAL_RCC_ClockConfig+0x1b8>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 030f 	and.w	r3, r3, #15
 80022b2:	683a      	ldr	r2, [r7, #0]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d001      	beq.n	80022bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e0b8      	b.n	800242e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0302 	and.w	r3, r3, #2
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d020      	beq.n	800230a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0304 	and.w	r3, r3, #4
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d005      	beq.n	80022e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022d4:	4b59      	ldr	r3, [pc, #356]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	4a58      	ldr	r2, [pc, #352]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 80022da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80022de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0308 	and.w	r3, r3, #8
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d005      	beq.n	80022f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022ec:	4b53      	ldr	r3, [pc, #332]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	4a52      	ldr	r2, [pc, #328]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 80022f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80022f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022f8:	4b50      	ldr	r3, [pc, #320]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	494d      	ldr	r1, [pc, #308]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 8002306:	4313      	orrs	r3, r2
 8002308:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	2b00      	cmp	r3, #0
 8002314:	d044      	beq.n	80023a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	2b01      	cmp	r3, #1
 800231c:	d107      	bne.n	800232e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800231e:	4b47      	ldr	r3, [pc, #284]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d119      	bne.n	800235e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e07f      	b.n	800242e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	2b02      	cmp	r3, #2
 8002334:	d003      	beq.n	800233e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800233a:	2b03      	cmp	r3, #3
 800233c:	d107      	bne.n	800234e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800233e:	4b3f      	ldr	r3, [pc, #252]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d109      	bne.n	800235e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e06f      	b.n	800242e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800234e:	4b3b      	ldr	r3, [pc, #236]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d101      	bne.n	800235e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e067      	b.n	800242e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800235e:	4b37      	ldr	r3, [pc, #220]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f023 0203 	bic.w	r2, r3, #3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	4934      	ldr	r1, [pc, #208]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 800236c:	4313      	orrs	r3, r2
 800236e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002370:	f7ff f93c 	bl	80015ec <HAL_GetTick>
 8002374:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002376:	e00a      	b.n	800238e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002378:	f7ff f938 	bl	80015ec <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	f241 3288 	movw	r2, #5000	; 0x1388
 8002386:	4293      	cmp	r3, r2
 8002388:	d901      	bls.n	800238e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e04f      	b.n	800242e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800238e:	4b2b      	ldr	r3, [pc, #172]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f003 020c 	and.w	r2, r3, #12
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	429a      	cmp	r2, r3
 800239e:	d1eb      	bne.n	8002378 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023a0:	4b25      	ldr	r3, [pc, #148]	; (8002438 <HAL_RCC_ClockConfig+0x1b8>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 030f 	and.w	r3, r3, #15
 80023a8:	683a      	ldr	r2, [r7, #0]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d20c      	bcs.n	80023c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ae:	4b22      	ldr	r3, [pc, #136]	; (8002438 <HAL_RCC_ClockConfig+0x1b8>)
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	b2d2      	uxtb	r2, r2
 80023b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023b6:	4b20      	ldr	r3, [pc, #128]	; (8002438 <HAL_RCC_ClockConfig+0x1b8>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 030f 	and.w	r3, r3, #15
 80023be:	683a      	ldr	r2, [r7, #0]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d001      	beq.n	80023c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e032      	b.n	800242e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0304 	and.w	r3, r3, #4
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d008      	beq.n	80023e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023d4:	4b19      	ldr	r3, [pc, #100]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	4916      	ldr	r1, [pc, #88]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0308 	and.w	r3, r3, #8
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d009      	beq.n	8002406 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023f2:	4b12      	ldr	r3, [pc, #72]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	00db      	lsls	r3, r3, #3
 8002400:	490e      	ldr	r1, [pc, #56]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 8002402:	4313      	orrs	r3, r2
 8002404:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002406:	f000 f821 	bl	800244c <HAL_RCC_GetSysClockFreq>
 800240a:	4601      	mov	r1, r0
 800240c:	4b0b      	ldr	r3, [pc, #44]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	091b      	lsrs	r3, r3, #4
 8002412:	f003 030f 	and.w	r3, r3, #15
 8002416:	4a0a      	ldr	r2, [pc, #40]	; (8002440 <HAL_RCC_ClockConfig+0x1c0>)
 8002418:	5cd3      	ldrb	r3, [r2, r3]
 800241a:	fa21 f303 	lsr.w	r3, r1, r3
 800241e:	4a09      	ldr	r2, [pc, #36]	; (8002444 <HAL_RCC_ClockConfig+0x1c4>)
 8002420:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002422:	4b09      	ldr	r3, [pc, #36]	; (8002448 <HAL_RCC_ClockConfig+0x1c8>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4618      	mov	r0, r3
 8002428:	f7ff f89c 	bl	8001564 <HAL_InitTick>

  return HAL_OK;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	40023c00 	.word	0x40023c00
 800243c:	40023800 	.word	0x40023800
 8002440:	08004604 	.word	0x08004604
 8002444:	20000004 	.word	0x20000004
 8002448:	20000008 	.word	0x20000008

0800244c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800244c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800244e:	b085      	sub	sp, #20
 8002450:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002452:	2300      	movs	r3, #0
 8002454:	607b      	str	r3, [r7, #4]
 8002456:	2300      	movs	r3, #0
 8002458:	60fb      	str	r3, [r7, #12]
 800245a:	2300      	movs	r3, #0
 800245c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800245e:	2300      	movs	r3, #0
 8002460:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002462:	4b63      	ldr	r3, [pc, #396]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f003 030c 	and.w	r3, r3, #12
 800246a:	2b04      	cmp	r3, #4
 800246c:	d007      	beq.n	800247e <HAL_RCC_GetSysClockFreq+0x32>
 800246e:	2b08      	cmp	r3, #8
 8002470:	d008      	beq.n	8002484 <HAL_RCC_GetSysClockFreq+0x38>
 8002472:	2b00      	cmp	r3, #0
 8002474:	f040 80b4 	bne.w	80025e0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002478:	4b5e      	ldr	r3, [pc, #376]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800247a:	60bb      	str	r3, [r7, #8]
       break;
 800247c:	e0b3      	b.n	80025e6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800247e:	4b5e      	ldr	r3, [pc, #376]	; (80025f8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002480:	60bb      	str	r3, [r7, #8]
      break;
 8002482:	e0b0      	b.n	80025e6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002484:	4b5a      	ldr	r3, [pc, #360]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800248c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800248e:	4b58      	ldr	r3, [pc, #352]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d04a      	beq.n	8002530 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800249a:	4b55      	ldr	r3, [pc, #340]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	099b      	lsrs	r3, r3, #6
 80024a0:	f04f 0400 	mov.w	r4, #0
 80024a4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80024a8:	f04f 0200 	mov.w	r2, #0
 80024ac:	ea03 0501 	and.w	r5, r3, r1
 80024b0:	ea04 0602 	and.w	r6, r4, r2
 80024b4:	4629      	mov	r1, r5
 80024b6:	4632      	mov	r2, r6
 80024b8:	f04f 0300 	mov.w	r3, #0
 80024bc:	f04f 0400 	mov.w	r4, #0
 80024c0:	0154      	lsls	r4, r2, #5
 80024c2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80024c6:	014b      	lsls	r3, r1, #5
 80024c8:	4619      	mov	r1, r3
 80024ca:	4622      	mov	r2, r4
 80024cc:	1b49      	subs	r1, r1, r5
 80024ce:	eb62 0206 	sbc.w	r2, r2, r6
 80024d2:	f04f 0300 	mov.w	r3, #0
 80024d6:	f04f 0400 	mov.w	r4, #0
 80024da:	0194      	lsls	r4, r2, #6
 80024dc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80024e0:	018b      	lsls	r3, r1, #6
 80024e2:	1a5b      	subs	r3, r3, r1
 80024e4:	eb64 0402 	sbc.w	r4, r4, r2
 80024e8:	f04f 0100 	mov.w	r1, #0
 80024ec:	f04f 0200 	mov.w	r2, #0
 80024f0:	00e2      	lsls	r2, r4, #3
 80024f2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80024f6:	00d9      	lsls	r1, r3, #3
 80024f8:	460b      	mov	r3, r1
 80024fa:	4614      	mov	r4, r2
 80024fc:	195b      	adds	r3, r3, r5
 80024fe:	eb44 0406 	adc.w	r4, r4, r6
 8002502:	f04f 0100 	mov.w	r1, #0
 8002506:	f04f 0200 	mov.w	r2, #0
 800250a:	0262      	lsls	r2, r4, #9
 800250c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002510:	0259      	lsls	r1, r3, #9
 8002512:	460b      	mov	r3, r1
 8002514:	4614      	mov	r4, r2
 8002516:	4618      	mov	r0, r3
 8002518:	4621      	mov	r1, r4
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f04f 0400 	mov.w	r4, #0
 8002520:	461a      	mov	r2, r3
 8002522:	4623      	mov	r3, r4
 8002524:	f7fd fe62 	bl	80001ec <__aeabi_uldivmod>
 8002528:	4603      	mov	r3, r0
 800252a:	460c      	mov	r4, r1
 800252c:	60fb      	str	r3, [r7, #12]
 800252e:	e049      	b.n	80025c4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002530:	4b2f      	ldr	r3, [pc, #188]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	099b      	lsrs	r3, r3, #6
 8002536:	f04f 0400 	mov.w	r4, #0
 800253a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800253e:	f04f 0200 	mov.w	r2, #0
 8002542:	ea03 0501 	and.w	r5, r3, r1
 8002546:	ea04 0602 	and.w	r6, r4, r2
 800254a:	4629      	mov	r1, r5
 800254c:	4632      	mov	r2, r6
 800254e:	f04f 0300 	mov.w	r3, #0
 8002552:	f04f 0400 	mov.w	r4, #0
 8002556:	0154      	lsls	r4, r2, #5
 8002558:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800255c:	014b      	lsls	r3, r1, #5
 800255e:	4619      	mov	r1, r3
 8002560:	4622      	mov	r2, r4
 8002562:	1b49      	subs	r1, r1, r5
 8002564:	eb62 0206 	sbc.w	r2, r2, r6
 8002568:	f04f 0300 	mov.w	r3, #0
 800256c:	f04f 0400 	mov.w	r4, #0
 8002570:	0194      	lsls	r4, r2, #6
 8002572:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002576:	018b      	lsls	r3, r1, #6
 8002578:	1a5b      	subs	r3, r3, r1
 800257a:	eb64 0402 	sbc.w	r4, r4, r2
 800257e:	f04f 0100 	mov.w	r1, #0
 8002582:	f04f 0200 	mov.w	r2, #0
 8002586:	00e2      	lsls	r2, r4, #3
 8002588:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800258c:	00d9      	lsls	r1, r3, #3
 800258e:	460b      	mov	r3, r1
 8002590:	4614      	mov	r4, r2
 8002592:	195b      	adds	r3, r3, r5
 8002594:	eb44 0406 	adc.w	r4, r4, r6
 8002598:	f04f 0100 	mov.w	r1, #0
 800259c:	f04f 0200 	mov.w	r2, #0
 80025a0:	02a2      	lsls	r2, r4, #10
 80025a2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80025a6:	0299      	lsls	r1, r3, #10
 80025a8:	460b      	mov	r3, r1
 80025aa:	4614      	mov	r4, r2
 80025ac:	4618      	mov	r0, r3
 80025ae:	4621      	mov	r1, r4
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f04f 0400 	mov.w	r4, #0
 80025b6:	461a      	mov	r2, r3
 80025b8:	4623      	mov	r3, r4
 80025ba:	f7fd fe17 	bl	80001ec <__aeabi_uldivmod>
 80025be:	4603      	mov	r3, r0
 80025c0:	460c      	mov	r4, r1
 80025c2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80025c4:	4b0a      	ldr	r3, [pc, #40]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	0c1b      	lsrs	r3, r3, #16
 80025ca:	f003 0303 	and.w	r3, r3, #3
 80025ce:	3301      	adds	r3, #1
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80025d4:	68fa      	ldr	r2, [r7, #12]
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025dc:	60bb      	str	r3, [r7, #8]
      break;
 80025de:	e002      	b.n	80025e6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025e0:	4b04      	ldr	r3, [pc, #16]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80025e2:	60bb      	str	r3, [r7, #8]
      break;
 80025e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025e6:	68bb      	ldr	r3, [r7, #8]
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3714      	adds	r7, #20
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025f0:	40023800 	.word	0x40023800
 80025f4:	00f42400 	.word	0x00f42400
 80025f8:	007a1200 	.word	0x007a1200

080025fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002600:	4b03      	ldr	r3, [pc, #12]	; (8002610 <HAL_RCC_GetHCLKFreq+0x14>)
 8002602:	681b      	ldr	r3, [r3, #0]
}
 8002604:	4618      	mov	r0, r3
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	20000004 	.word	0x20000004

08002614 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002618:	f7ff fff0 	bl	80025fc <HAL_RCC_GetHCLKFreq>
 800261c:	4601      	mov	r1, r0
 800261e:	4b05      	ldr	r3, [pc, #20]	; (8002634 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	0a9b      	lsrs	r3, r3, #10
 8002624:	f003 0307 	and.w	r3, r3, #7
 8002628:	4a03      	ldr	r2, [pc, #12]	; (8002638 <HAL_RCC_GetPCLK1Freq+0x24>)
 800262a:	5cd3      	ldrb	r3, [r2, r3]
 800262c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002630:	4618      	mov	r0, r3
 8002632:	bd80      	pop	{r7, pc}
 8002634:	40023800 	.word	0x40023800
 8002638:	08004614 	.word	0x08004614

0800263c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002640:	f7ff ffdc 	bl	80025fc <HAL_RCC_GetHCLKFreq>
 8002644:	4601      	mov	r1, r0
 8002646:	4b05      	ldr	r3, [pc, #20]	; (800265c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	0b5b      	lsrs	r3, r3, #13
 800264c:	f003 0307 	and.w	r3, r3, #7
 8002650:	4a03      	ldr	r2, [pc, #12]	; (8002660 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002652:	5cd3      	ldrb	r3, [r2, r3]
 8002654:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002658:	4618      	mov	r0, r3
 800265a:	bd80      	pop	{r7, pc}
 800265c:	40023800 	.word	0x40023800
 8002660:	08004614 	.word	0x08004614

08002664 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d101      	bne.n	8002676 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e01d      	b.n	80026b2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800267c:	b2db      	uxtb	r3, r3
 800267e:	2b00      	cmp	r3, #0
 8002680:	d106      	bne.n	8002690 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f7fe fd50 	bl	8001130 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2202      	movs	r2, #2
 8002694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	3304      	adds	r3, #4
 80026a0:	4619      	mov	r1, r3
 80026a2:	4610      	mov	r0, r2
 80026a4:	f000 fca2 	bl	8002fec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}

080026ba <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80026ba:	b480      	push	{r7}
 80026bc:	b085      	sub	sp, #20
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2202      	movs	r2, #2
 80026c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f003 0307 	and.w	r3, r3, #7
 80026d4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2b06      	cmp	r3, #6
 80026da:	d007      	beq.n	80026ec <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f042 0201 	orr.w	r2, r2, #1
 80026ea:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2201      	movs	r2, #1
 80026f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3714      	adds	r7, #20
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr

08002702 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002702:	b480      	push	{r7}
 8002704:	b085      	sub	sp, #20
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	68da      	ldr	r2, [r3, #12]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f042 0201 	orr.w	r2, r2, #1
 8002718:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	f003 0307 	and.w	r3, r3, #7
 8002724:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2b06      	cmp	r3, #6
 800272a:	d007      	beq.n	800273c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f042 0201 	orr.w	r2, r2, #1
 800273a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3714      	adds	r7, #20
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr

0800274a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800274a:	b580      	push	{r7, lr}
 800274c:	b082      	sub	sp, #8
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d101      	bne.n	800275c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e01d      	b.n	8002798 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002762:	b2db      	uxtb	r3, r3
 8002764:	2b00      	cmp	r3, #0
 8002766:	d106      	bne.n	8002776 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f000 f815 	bl	80027a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2202      	movs	r2, #2
 800277a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	3304      	adds	r3, #4
 8002786:	4619      	mov	r1, r3
 8002788:	4610      	mov	r0, r2
 800278a:	f000 fc2f 	bl	8002fec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2201      	movs	r2, #1
 8002792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	3708      	adds	r7, #8
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80027a8:	bf00      	nop
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2201      	movs	r2, #1
 80027c4:	6839      	ldr	r1, [r7, #0]
 80027c6:	4618      	mov	r0, r3
 80027c8:	f001 f824 	bl	8003814 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a15      	ldr	r2, [pc, #84]	; (8002828 <HAL_TIM_PWM_Start+0x74>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d004      	beq.n	80027e0 <HAL_TIM_PWM_Start+0x2c>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a14      	ldr	r2, [pc, #80]	; (800282c <HAL_TIM_PWM_Start+0x78>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d101      	bne.n	80027e4 <HAL_TIM_PWM_Start+0x30>
 80027e0:	2301      	movs	r3, #1
 80027e2:	e000      	b.n	80027e6 <HAL_TIM_PWM_Start+0x32>
 80027e4:	2300      	movs	r3, #0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d007      	beq.n	80027fa <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027f8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	f003 0307 	and.w	r3, r3, #7
 8002804:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2b06      	cmp	r3, #6
 800280a:	d007      	beq.n	800281c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f042 0201 	orr.w	r2, r2, #1
 800281a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800281c:	2300      	movs	r3, #0
}
 800281e:	4618      	mov	r0, r3
 8002820:	3710      	adds	r7, #16
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	40010000 	.word	0x40010000
 800282c:	40010400 	.word	0x40010400

08002830 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d101      	bne.n	8002842 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e01d      	b.n	800287e <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002848:	b2db      	uxtb	r3, r3
 800284a:	2b00      	cmp	r3, #0
 800284c:	d106      	bne.n	800285c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 f815 	bl	8002886 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2202      	movs	r2, #2
 8002860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	3304      	adds	r3, #4
 800286c:	4619      	mov	r1, r3
 800286e:	4610      	mov	r0, r2
 8002870:	f000 fbbc 	bl	8002fec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002886:	b480      	push	{r7}
 8002888:	b083      	sub	sp, #12
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800288e:	bf00      	nop
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
	...

0800289c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	2b0c      	cmp	r3, #12
 80028aa:	d841      	bhi.n	8002930 <HAL_TIM_IC_Start_IT+0x94>
 80028ac:	a201      	add	r2, pc, #4	; (adr r2, 80028b4 <HAL_TIM_IC_Start_IT+0x18>)
 80028ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028b2:	bf00      	nop
 80028b4:	080028e9 	.word	0x080028e9
 80028b8:	08002931 	.word	0x08002931
 80028bc:	08002931 	.word	0x08002931
 80028c0:	08002931 	.word	0x08002931
 80028c4:	080028fb 	.word	0x080028fb
 80028c8:	08002931 	.word	0x08002931
 80028cc:	08002931 	.word	0x08002931
 80028d0:	08002931 	.word	0x08002931
 80028d4:	0800290d 	.word	0x0800290d
 80028d8:	08002931 	.word	0x08002931
 80028dc:	08002931 	.word	0x08002931
 80028e0:	08002931 	.word	0x08002931
 80028e4:	0800291f 	.word	0x0800291f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	68da      	ldr	r2, [r3, #12]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f042 0202 	orr.w	r2, r2, #2
 80028f6:	60da      	str	r2, [r3, #12]
      break;
 80028f8:	e01b      	b.n	8002932 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	68da      	ldr	r2, [r3, #12]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f042 0204 	orr.w	r2, r2, #4
 8002908:	60da      	str	r2, [r3, #12]
      break;
 800290a:	e012      	b.n	8002932 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	68da      	ldr	r2, [r3, #12]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f042 0208 	orr.w	r2, r2, #8
 800291a:	60da      	str	r2, [r3, #12]
      break;
 800291c:	e009      	b.n	8002932 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	68da      	ldr	r2, [r3, #12]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f042 0210 	orr.w	r2, r2, #16
 800292c:	60da      	str	r2, [r3, #12]
      break;
 800292e:	e000      	b.n	8002932 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8002930:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2201      	movs	r2, #1
 8002938:	6839      	ldr	r1, [r7, #0]
 800293a:	4618      	mov	r0, r3
 800293c:	f000 ff6a 	bl	8003814 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f003 0307 	and.w	r3, r3, #7
 800294a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2b06      	cmp	r3, #6
 8002950:	d007      	beq.n	8002962 <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f042 0201 	orr.w	r2, r2, #1
 8002960:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002962:	2300      	movs	r3, #0
}
 8002964:	4618      	mov	r0, r3
 8002966:	3710      	adds	r7, #16
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	2b02      	cmp	r3, #2
 8002980:	d122      	bne.n	80029c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	f003 0302 	and.w	r3, r3, #2
 800298c:	2b02      	cmp	r3, #2
 800298e:	d11b      	bne.n	80029c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f06f 0202 	mvn.w	r2, #2
 8002998:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2201      	movs	r2, #1
 800299e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	f003 0303 	and.w	r3, r3, #3
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d003      	beq.n	80029b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f7fd ff9e 	bl	80008f0 <HAL_TIM_IC_CaptureCallback>
 80029b4:	e005      	b.n	80029c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f000 faf9 	bl	8002fae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f000 fb00 	bl	8002fc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	f003 0304 	and.w	r3, r3, #4
 80029d2:	2b04      	cmp	r3, #4
 80029d4:	d122      	bne.n	8002a1c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	f003 0304 	and.w	r3, r3, #4
 80029e0:	2b04      	cmp	r3, #4
 80029e2:	d11b      	bne.n	8002a1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f06f 0204 	mvn.w	r2, #4
 80029ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2202      	movs	r2, #2
 80029f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	699b      	ldr	r3, [r3, #24]
 80029fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d003      	beq.n	8002a0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f7fd ff74 	bl	80008f0 <HAL_TIM_IC_CaptureCallback>
 8002a08:	e005      	b.n	8002a16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f000 facf 	bl	8002fae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f000 fad6 	bl	8002fc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	691b      	ldr	r3, [r3, #16]
 8002a22:	f003 0308 	and.w	r3, r3, #8
 8002a26:	2b08      	cmp	r3, #8
 8002a28:	d122      	bne.n	8002a70 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	f003 0308 	and.w	r3, r3, #8
 8002a34:	2b08      	cmp	r3, #8
 8002a36:	d11b      	bne.n	8002a70 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f06f 0208 	mvn.w	r2, #8
 8002a40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2204      	movs	r2, #4
 8002a46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	69db      	ldr	r3, [r3, #28]
 8002a4e:	f003 0303 	and.w	r3, r3, #3
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d003      	beq.n	8002a5e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f7fd ff4a 	bl	80008f0 <HAL_TIM_IC_CaptureCallback>
 8002a5c:	e005      	b.n	8002a6a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 faa5 	bl	8002fae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f000 faac 	bl	8002fc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	f003 0310 	and.w	r3, r3, #16
 8002a7a:	2b10      	cmp	r3, #16
 8002a7c:	d122      	bne.n	8002ac4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	f003 0310 	and.w	r3, r3, #16
 8002a88:	2b10      	cmp	r3, #16
 8002a8a:	d11b      	bne.n	8002ac4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f06f 0210 	mvn.w	r2, #16
 8002a94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2208      	movs	r2, #8
 8002a9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	69db      	ldr	r3, [r3, #28]
 8002aa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d003      	beq.n	8002ab2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f7fd ff20 	bl	80008f0 <HAL_TIM_IC_CaptureCallback>
 8002ab0:	e005      	b.n	8002abe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 fa7b 	bl	8002fae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f000 fa82 	bl	8002fc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	f003 0301 	and.w	r3, r3, #1
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d10e      	bne.n	8002af0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	f003 0301 	and.w	r3, r3, #1
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d107      	bne.n	8002af0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f06f 0201 	mvn.w	r2, #1
 8002ae8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f7fd fee6 	bl	80008bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	691b      	ldr	r3, [r3, #16]
 8002af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002afa:	2b80      	cmp	r3, #128	; 0x80
 8002afc:	d10e      	bne.n	8002b1c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b08:	2b80      	cmp	r3, #128	; 0x80
 8002b0a:	d107      	bne.n	8002b1c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 ff28 	bl	800396c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b26:	2b40      	cmp	r3, #64	; 0x40
 8002b28:	d10e      	bne.n	8002b48 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b34:	2b40      	cmp	r3, #64	; 0x40
 8002b36:	d107      	bne.n	8002b48 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 fa47 	bl	8002fd6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	f003 0320 	and.w	r3, r3, #32
 8002b52:	2b20      	cmp	r3, #32
 8002b54:	d10e      	bne.n	8002b74 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	f003 0320 	and.w	r3, r3, #32
 8002b60:	2b20      	cmp	r3, #32
 8002b62:	d107      	bne.n	8002b74 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f06f 0220 	mvn.w	r2, #32
 8002b6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f000 fef2 	bl	8003958 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b74:	bf00      	nop
 8002b76:	3708      	adds	r7, #8
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d101      	bne.n	8002b96 <HAL_TIM_IC_ConfigChannel+0x1a>
 8002b92:	2302      	movs	r3, #2
 8002b94:	e08a      	b.n	8002cac <HAL_TIM_IC_ConfigChannel+0x130>
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2202      	movs	r2, #2
 8002ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d11b      	bne.n	8002be4 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6818      	ldr	r0, [r3, #0]
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	6819      	ldr	r1, [r3, #0]
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	685a      	ldr	r2, [r3, #4]
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	f000 fc66 	bl	800348c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	699a      	ldr	r2, [r3, #24]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f022 020c 	bic.w	r2, r2, #12
 8002bce:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6999      	ldr	r1, [r3, #24]
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	689a      	ldr	r2, [r3, #8]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	430a      	orrs	r2, r1
 8002be0:	619a      	str	r2, [r3, #24]
 8002be2:	e05a      	b.n	8002c9a <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2b04      	cmp	r3, #4
 8002be8:	d11c      	bne.n	8002c24 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6818      	ldr	r0, [r3, #0]
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	6819      	ldr	r1, [r3, #0]
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	685a      	ldr	r2, [r3, #4]
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	f000 fcea 	bl	80035d2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	699a      	ldr	r2, [r3, #24]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002c0c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	6999      	ldr	r1, [r3, #24]
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	021a      	lsls	r2, r3, #8
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	430a      	orrs	r2, r1
 8002c20:	619a      	str	r2, [r3, #24]
 8002c22:	e03a      	b.n	8002c9a <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2b08      	cmp	r3, #8
 8002c28:	d11b      	bne.n	8002c62 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6818      	ldr	r0, [r3, #0]
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	6819      	ldr	r1, [r3, #0]
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	685a      	ldr	r2, [r3, #4]
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	f000 fd37 	bl	80036ac <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	69da      	ldr	r2, [r3, #28]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f022 020c 	bic.w	r2, r2, #12
 8002c4c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	69d9      	ldr	r1, [r3, #28]
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	689a      	ldr	r2, [r3, #8]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	61da      	str	r2, [r3, #28]
 8002c60:	e01b      	b.n	8002c9a <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	6818      	ldr	r0, [r3, #0]
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	6819      	ldr	r1, [r3, #0]
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	685a      	ldr	r2, [r3, #4]
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	f000 fd57 	bl	8003724 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	69da      	ldr	r2, [r3, #28]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002c84:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	69d9      	ldr	r1, [r3, #28]
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	021a      	lsls	r2, r3, #8
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	430a      	orrs	r2, r1
 8002c98:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002caa:	2300      	movs	r3, #0
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3710      	adds	r7, #16
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d101      	bne.n	8002cce <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002cca:	2302      	movs	r3, #2
 8002ccc:	e0b4      	b.n	8002e38 <HAL_TIM_PWM_ConfigChannel+0x184>
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2202      	movs	r2, #2
 8002cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2b0c      	cmp	r3, #12
 8002ce2:	f200 809f 	bhi.w	8002e24 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002ce6:	a201      	add	r2, pc, #4	; (adr r2, 8002cec <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cec:	08002d21 	.word	0x08002d21
 8002cf0:	08002e25 	.word	0x08002e25
 8002cf4:	08002e25 	.word	0x08002e25
 8002cf8:	08002e25 	.word	0x08002e25
 8002cfc:	08002d61 	.word	0x08002d61
 8002d00:	08002e25 	.word	0x08002e25
 8002d04:	08002e25 	.word	0x08002e25
 8002d08:	08002e25 	.word	0x08002e25
 8002d0c:	08002da3 	.word	0x08002da3
 8002d10:	08002e25 	.word	0x08002e25
 8002d14:	08002e25 	.word	0x08002e25
 8002d18:	08002e25 	.word	0x08002e25
 8002d1c:	08002de3 	.word	0x08002de3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	68b9      	ldr	r1, [r7, #8]
 8002d26:	4618      	mov	r0, r3
 8002d28:	f000 fa00 	bl	800312c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	699a      	ldr	r2, [r3, #24]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f042 0208 	orr.w	r2, r2, #8
 8002d3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	699a      	ldr	r2, [r3, #24]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f022 0204 	bic.w	r2, r2, #4
 8002d4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	6999      	ldr	r1, [r3, #24]
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	691a      	ldr	r2, [r3, #16]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	619a      	str	r2, [r3, #24]
      break;
 8002d5e:	e062      	b.n	8002e26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	68b9      	ldr	r1, [r7, #8]
 8002d66:	4618      	mov	r0, r3
 8002d68:	f000 fa50 	bl	800320c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	699a      	ldr	r2, [r3, #24]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	699a      	ldr	r2, [r3, #24]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	6999      	ldr	r1, [r3, #24]
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	021a      	lsls	r2, r3, #8
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	430a      	orrs	r2, r1
 8002d9e:	619a      	str	r2, [r3, #24]
      break;
 8002da0:	e041      	b.n	8002e26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68b9      	ldr	r1, [r7, #8]
 8002da8:	4618      	mov	r0, r3
 8002daa:	f000 faa5 	bl	80032f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	69da      	ldr	r2, [r3, #28]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f042 0208 	orr.w	r2, r2, #8
 8002dbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	69da      	ldr	r2, [r3, #28]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 0204 	bic.w	r2, r2, #4
 8002dcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	69d9      	ldr	r1, [r3, #28]
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	691a      	ldr	r2, [r3, #16]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	430a      	orrs	r2, r1
 8002dde:	61da      	str	r2, [r3, #28]
      break;
 8002de0:	e021      	b.n	8002e26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	68b9      	ldr	r1, [r7, #8]
 8002de8:	4618      	mov	r0, r3
 8002dea:	f000 faf9 	bl	80033e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	69da      	ldr	r2, [r3, #28]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002dfc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	69da      	ldr	r2, [r3, #28]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	69d9      	ldr	r1, [r3, #28]
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	691b      	ldr	r3, [r3, #16]
 8002e18:	021a      	lsls	r2, r3, #8
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	430a      	orrs	r2, r1
 8002e20:	61da      	str	r2, [r3, #28]
      break;
 8002e22:	e000      	b.n	8002e26 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002e24:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e36:	2300      	movs	r3, #0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3710      	adds	r7, #16
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d101      	bne.n	8002e58 <HAL_TIM_ConfigClockSource+0x18>
 8002e54:	2302      	movs	r3, #2
 8002e56:	e0a6      	b.n	8002fa6 <HAL_TIM_ConfigClockSource+0x166>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2202      	movs	r2, #2
 8002e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e76:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e7e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	68fa      	ldr	r2, [r7, #12]
 8002e86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2b40      	cmp	r3, #64	; 0x40
 8002e8e:	d067      	beq.n	8002f60 <HAL_TIM_ConfigClockSource+0x120>
 8002e90:	2b40      	cmp	r3, #64	; 0x40
 8002e92:	d80b      	bhi.n	8002eac <HAL_TIM_ConfigClockSource+0x6c>
 8002e94:	2b10      	cmp	r3, #16
 8002e96:	d073      	beq.n	8002f80 <HAL_TIM_ConfigClockSource+0x140>
 8002e98:	2b10      	cmp	r3, #16
 8002e9a:	d802      	bhi.n	8002ea2 <HAL_TIM_ConfigClockSource+0x62>
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d06f      	beq.n	8002f80 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002ea0:	e078      	b.n	8002f94 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002ea2:	2b20      	cmp	r3, #32
 8002ea4:	d06c      	beq.n	8002f80 <HAL_TIM_ConfigClockSource+0x140>
 8002ea6:	2b30      	cmp	r3, #48	; 0x30
 8002ea8:	d06a      	beq.n	8002f80 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002eaa:	e073      	b.n	8002f94 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002eac:	2b70      	cmp	r3, #112	; 0x70
 8002eae:	d00d      	beq.n	8002ecc <HAL_TIM_ConfigClockSource+0x8c>
 8002eb0:	2b70      	cmp	r3, #112	; 0x70
 8002eb2:	d804      	bhi.n	8002ebe <HAL_TIM_ConfigClockSource+0x7e>
 8002eb4:	2b50      	cmp	r3, #80	; 0x50
 8002eb6:	d033      	beq.n	8002f20 <HAL_TIM_ConfigClockSource+0xe0>
 8002eb8:	2b60      	cmp	r3, #96	; 0x60
 8002eba:	d041      	beq.n	8002f40 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002ebc:	e06a      	b.n	8002f94 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002ebe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ec2:	d066      	beq.n	8002f92 <HAL_TIM_ConfigClockSource+0x152>
 8002ec4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ec8:	d017      	beq.n	8002efa <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002eca:	e063      	b.n	8002f94 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6818      	ldr	r0, [r3, #0]
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	6899      	ldr	r1, [r3, #8]
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	685a      	ldr	r2, [r3, #4]
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	f000 fc7a 	bl	80037d4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002eee:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	609a      	str	r2, [r3, #8]
      break;
 8002ef8:	e04c      	b.n	8002f94 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6818      	ldr	r0, [r3, #0]
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	6899      	ldr	r1, [r3, #8]
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	685a      	ldr	r2, [r3, #4]
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	f000 fc63 	bl	80037d4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	689a      	ldr	r2, [r3, #8]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f1c:	609a      	str	r2, [r3, #8]
      break;
 8002f1e:	e039      	b.n	8002f94 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6818      	ldr	r0, [r3, #0]
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	6859      	ldr	r1, [r3, #4]
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	f000 fb21 	bl	8003574 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2150      	movs	r1, #80	; 0x50
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f000 fc30 	bl	800379e <TIM_ITRx_SetConfig>
      break;
 8002f3e:	e029      	b.n	8002f94 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6818      	ldr	r0, [r3, #0]
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	6859      	ldr	r1, [r3, #4]
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	f000 fb7d 	bl	800364c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2160      	movs	r1, #96	; 0x60
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f000 fc20 	bl	800379e <TIM_ITRx_SetConfig>
      break;
 8002f5e:	e019      	b.n	8002f94 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6818      	ldr	r0, [r3, #0]
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	6859      	ldr	r1, [r3, #4]
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	f000 fb01 	bl	8003574 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2140      	movs	r1, #64	; 0x40
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f000 fc10 	bl	800379e <TIM_ITRx_SetConfig>
      break;
 8002f7e:	e009      	b.n	8002f94 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4619      	mov	r1, r3
 8002f8a:	4610      	mov	r0, r2
 8002f8c:	f000 fc07 	bl	800379e <TIM_ITRx_SetConfig>
      break;
 8002f90:	e000      	b.n	8002f94 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002f92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3710      	adds	r7, #16
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}

08002fae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fae:	b480      	push	{r7}
 8002fb0:	b083      	sub	sp, #12
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002fb6:	bf00      	nop
 8002fb8:	370c      	adds	r7, #12
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr

08002fc2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002fc2:	b480      	push	{r7}
 8002fc4:	b083      	sub	sp, #12
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002fca:	bf00      	nop
 8002fcc:	370c      	adds	r7, #12
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr

08002fd6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002fd6:	b480      	push	{r7}
 8002fd8:	b083      	sub	sp, #12
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002fde:	bf00      	nop
 8002fe0:	370c      	adds	r7, #12
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
	...

08002fec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b085      	sub	sp, #20
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	4a40      	ldr	r2, [pc, #256]	; (8003100 <TIM_Base_SetConfig+0x114>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d013      	beq.n	800302c <TIM_Base_SetConfig+0x40>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800300a:	d00f      	beq.n	800302c <TIM_Base_SetConfig+0x40>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4a3d      	ldr	r2, [pc, #244]	; (8003104 <TIM_Base_SetConfig+0x118>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d00b      	beq.n	800302c <TIM_Base_SetConfig+0x40>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	4a3c      	ldr	r2, [pc, #240]	; (8003108 <TIM_Base_SetConfig+0x11c>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d007      	beq.n	800302c <TIM_Base_SetConfig+0x40>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4a3b      	ldr	r2, [pc, #236]	; (800310c <TIM_Base_SetConfig+0x120>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d003      	beq.n	800302c <TIM_Base_SetConfig+0x40>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4a3a      	ldr	r2, [pc, #232]	; (8003110 <TIM_Base_SetConfig+0x124>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d108      	bne.n	800303e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003032:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	68fa      	ldr	r2, [r7, #12]
 800303a:	4313      	orrs	r3, r2
 800303c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a2f      	ldr	r2, [pc, #188]	; (8003100 <TIM_Base_SetConfig+0x114>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d02b      	beq.n	800309e <TIM_Base_SetConfig+0xb2>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800304c:	d027      	beq.n	800309e <TIM_Base_SetConfig+0xb2>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a2c      	ldr	r2, [pc, #176]	; (8003104 <TIM_Base_SetConfig+0x118>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d023      	beq.n	800309e <TIM_Base_SetConfig+0xb2>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a2b      	ldr	r2, [pc, #172]	; (8003108 <TIM_Base_SetConfig+0x11c>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d01f      	beq.n	800309e <TIM_Base_SetConfig+0xb2>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a2a      	ldr	r2, [pc, #168]	; (800310c <TIM_Base_SetConfig+0x120>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d01b      	beq.n	800309e <TIM_Base_SetConfig+0xb2>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a29      	ldr	r2, [pc, #164]	; (8003110 <TIM_Base_SetConfig+0x124>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d017      	beq.n	800309e <TIM_Base_SetConfig+0xb2>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a28      	ldr	r2, [pc, #160]	; (8003114 <TIM_Base_SetConfig+0x128>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d013      	beq.n	800309e <TIM_Base_SetConfig+0xb2>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a27      	ldr	r2, [pc, #156]	; (8003118 <TIM_Base_SetConfig+0x12c>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d00f      	beq.n	800309e <TIM_Base_SetConfig+0xb2>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a26      	ldr	r2, [pc, #152]	; (800311c <TIM_Base_SetConfig+0x130>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d00b      	beq.n	800309e <TIM_Base_SetConfig+0xb2>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a25      	ldr	r2, [pc, #148]	; (8003120 <TIM_Base_SetConfig+0x134>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d007      	beq.n	800309e <TIM_Base_SetConfig+0xb2>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a24      	ldr	r2, [pc, #144]	; (8003124 <TIM_Base_SetConfig+0x138>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d003      	beq.n	800309e <TIM_Base_SetConfig+0xb2>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a23      	ldr	r2, [pc, #140]	; (8003128 <TIM_Base_SetConfig+0x13c>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d108      	bne.n	80030b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	68fa      	ldr	r2, [r7, #12]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	695b      	ldr	r3, [r3, #20]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	68fa      	ldr	r2, [r7, #12]
 80030c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	689a      	ldr	r2, [r3, #8]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	4a0a      	ldr	r2, [pc, #40]	; (8003100 <TIM_Base_SetConfig+0x114>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d003      	beq.n	80030e4 <TIM_Base_SetConfig+0xf8>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4a0c      	ldr	r2, [pc, #48]	; (8003110 <TIM_Base_SetConfig+0x124>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d103      	bne.n	80030ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	691a      	ldr	r2, [r3, #16]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	615a      	str	r2, [r3, #20]
}
 80030f2:	bf00      	nop
 80030f4:	3714      	adds	r7, #20
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop
 8003100:	40010000 	.word	0x40010000
 8003104:	40000400 	.word	0x40000400
 8003108:	40000800 	.word	0x40000800
 800310c:	40000c00 	.word	0x40000c00
 8003110:	40010400 	.word	0x40010400
 8003114:	40014000 	.word	0x40014000
 8003118:	40014400 	.word	0x40014400
 800311c:	40014800 	.word	0x40014800
 8003120:	40001800 	.word	0x40001800
 8003124:	40001c00 	.word	0x40001c00
 8003128:	40002000 	.word	0x40002000

0800312c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800312c:	b480      	push	{r7}
 800312e:	b087      	sub	sp, #28
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a1b      	ldr	r3, [r3, #32]
 800313a:	f023 0201 	bic.w	r2, r3, #1
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a1b      	ldr	r3, [r3, #32]
 8003146:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800315a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f023 0303 	bic.w	r3, r3, #3
 8003162:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	68fa      	ldr	r2, [r7, #12]
 800316a:	4313      	orrs	r3, r2
 800316c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	f023 0302 	bic.w	r3, r3, #2
 8003174:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	697a      	ldr	r2, [r7, #20]
 800317c:	4313      	orrs	r3, r2
 800317e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4a20      	ldr	r2, [pc, #128]	; (8003204 <TIM_OC1_SetConfig+0xd8>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d003      	beq.n	8003190 <TIM_OC1_SetConfig+0x64>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	4a1f      	ldr	r2, [pc, #124]	; (8003208 <TIM_OC1_SetConfig+0xdc>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d10c      	bne.n	80031aa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	f023 0308 	bic.w	r3, r3, #8
 8003196:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	697a      	ldr	r2, [r7, #20]
 800319e:	4313      	orrs	r3, r2
 80031a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	f023 0304 	bic.w	r3, r3, #4
 80031a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a15      	ldr	r2, [pc, #84]	; (8003204 <TIM_OC1_SetConfig+0xd8>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d003      	beq.n	80031ba <TIM_OC1_SetConfig+0x8e>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a14      	ldr	r2, [pc, #80]	; (8003208 <TIM_OC1_SetConfig+0xdc>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d111      	bne.n	80031de <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80031c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	693a      	ldr	r2, [r7, #16]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	699b      	ldr	r3, [r3, #24]
 80031d8:	693a      	ldr	r2, [r7, #16]
 80031da:	4313      	orrs	r3, r2
 80031dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	693a      	ldr	r2, [r7, #16]
 80031e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	685a      	ldr	r2, [r3, #4]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	697a      	ldr	r2, [r7, #20]
 80031f6:	621a      	str	r2, [r3, #32]
}
 80031f8:	bf00      	nop
 80031fa:	371c      	adds	r7, #28
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr
 8003204:	40010000 	.word	0x40010000
 8003208:	40010400 	.word	0x40010400

0800320c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800320c:	b480      	push	{r7}
 800320e:	b087      	sub	sp, #28
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a1b      	ldr	r3, [r3, #32]
 800321a:	f023 0210 	bic.w	r2, r3, #16
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800323a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003242:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	021b      	lsls	r3, r3, #8
 800324a:	68fa      	ldr	r2, [r7, #12]
 800324c:	4313      	orrs	r3, r2
 800324e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	f023 0320 	bic.w	r3, r3, #32
 8003256:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	011b      	lsls	r3, r3, #4
 800325e:	697a      	ldr	r2, [r7, #20]
 8003260:	4313      	orrs	r3, r2
 8003262:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	4a22      	ldr	r2, [pc, #136]	; (80032f0 <TIM_OC2_SetConfig+0xe4>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d003      	beq.n	8003274 <TIM_OC2_SetConfig+0x68>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	4a21      	ldr	r2, [pc, #132]	; (80032f4 <TIM_OC2_SetConfig+0xe8>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d10d      	bne.n	8003290 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800327a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	011b      	lsls	r3, r3, #4
 8003282:	697a      	ldr	r2, [r7, #20]
 8003284:	4313      	orrs	r3, r2
 8003286:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800328e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4a17      	ldr	r2, [pc, #92]	; (80032f0 <TIM_OC2_SetConfig+0xe4>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d003      	beq.n	80032a0 <TIM_OC2_SetConfig+0x94>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	4a16      	ldr	r2, [pc, #88]	; (80032f4 <TIM_OC2_SetConfig+0xe8>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d113      	bne.n	80032c8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80032a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80032ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	695b      	ldr	r3, [r3, #20]
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	693a      	ldr	r2, [r7, #16]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	693a      	ldr	r2, [r7, #16]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	693a      	ldr	r2, [r7, #16]
 80032cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	68fa      	ldr	r2, [r7, #12]
 80032d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685a      	ldr	r2, [r3, #4]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	697a      	ldr	r2, [r7, #20]
 80032e0:	621a      	str	r2, [r3, #32]
}
 80032e2:	bf00      	nop
 80032e4:	371c      	adds	r7, #28
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	40010000 	.word	0x40010000
 80032f4:	40010400 	.word	0x40010400

080032f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b087      	sub	sp, #28
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a1b      	ldr	r3, [r3, #32]
 8003306:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a1b      	ldr	r3, [r3, #32]
 8003312:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	69db      	ldr	r3, [r3, #28]
 800331e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003326:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f023 0303 	bic.w	r3, r3, #3
 800332e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68fa      	ldr	r2, [r7, #12]
 8003336:	4313      	orrs	r3, r2
 8003338:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003340:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	021b      	lsls	r3, r3, #8
 8003348:	697a      	ldr	r2, [r7, #20]
 800334a:	4313      	orrs	r3, r2
 800334c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a21      	ldr	r2, [pc, #132]	; (80033d8 <TIM_OC3_SetConfig+0xe0>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d003      	beq.n	800335e <TIM_OC3_SetConfig+0x66>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a20      	ldr	r2, [pc, #128]	; (80033dc <TIM_OC3_SetConfig+0xe4>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d10d      	bne.n	800337a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003364:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	021b      	lsls	r3, r3, #8
 800336c:	697a      	ldr	r2, [r7, #20]
 800336e:	4313      	orrs	r3, r2
 8003370:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003378:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a16      	ldr	r2, [pc, #88]	; (80033d8 <TIM_OC3_SetConfig+0xe0>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d003      	beq.n	800338a <TIM_OC3_SetConfig+0x92>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a15      	ldr	r2, [pc, #84]	; (80033dc <TIM_OC3_SetConfig+0xe4>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d113      	bne.n	80033b2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003390:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003398:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	011b      	lsls	r3, r3, #4
 80033a0:	693a      	ldr	r2, [r7, #16]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	011b      	lsls	r3, r3, #4
 80033ac:	693a      	ldr	r2, [r7, #16]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	693a      	ldr	r2, [r7, #16]
 80033b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	685a      	ldr	r2, [r3, #4]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	697a      	ldr	r2, [r7, #20]
 80033ca:	621a      	str	r2, [r3, #32]
}
 80033cc:	bf00      	nop
 80033ce:	371c      	adds	r7, #28
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr
 80033d8:	40010000 	.word	0x40010000
 80033dc:	40010400 	.word	0x40010400

080033e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b087      	sub	sp, #28
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a1b      	ldr	r3, [r3, #32]
 80033ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a1b      	ldr	r3, [r3, #32]
 80033fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	69db      	ldr	r3, [r3, #28]
 8003406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800340e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003416:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	021b      	lsls	r3, r3, #8
 800341e:	68fa      	ldr	r2, [r7, #12]
 8003420:	4313      	orrs	r3, r2
 8003422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800342a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	031b      	lsls	r3, r3, #12
 8003432:	693a      	ldr	r2, [r7, #16]
 8003434:	4313      	orrs	r3, r2
 8003436:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a12      	ldr	r2, [pc, #72]	; (8003484 <TIM_OC4_SetConfig+0xa4>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d003      	beq.n	8003448 <TIM_OC4_SetConfig+0x68>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4a11      	ldr	r2, [pc, #68]	; (8003488 <TIM_OC4_SetConfig+0xa8>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d109      	bne.n	800345c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800344e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	695b      	ldr	r3, [r3, #20]
 8003454:	019b      	lsls	r3, r3, #6
 8003456:	697a      	ldr	r2, [r7, #20]
 8003458:	4313      	orrs	r3, r2
 800345a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	697a      	ldr	r2, [r7, #20]
 8003460:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	68fa      	ldr	r2, [r7, #12]
 8003466:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	685a      	ldr	r2, [r3, #4]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	693a      	ldr	r2, [r7, #16]
 8003474:	621a      	str	r2, [r3, #32]
}
 8003476:	bf00      	nop
 8003478:	371c      	adds	r7, #28
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	40010000 	.word	0x40010000
 8003488:	40010400 	.word	0x40010400

0800348c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800348c:	b480      	push	{r7}
 800348e:	b087      	sub	sp, #28
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	607a      	str	r2, [r7, #4]
 8003498:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6a1b      	ldr	r3, [r3, #32]
 800349e:	f023 0201 	bic.w	r2, r3, #1
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	699b      	ldr	r3, [r3, #24]
 80034aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6a1b      	ldr	r3, [r3, #32]
 80034b0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	4a28      	ldr	r2, [pc, #160]	; (8003558 <TIM_TI1_SetConfig+0xcc>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d01b      	beq.n	80034f2 <TIM_TI1_SetConfig+0x66>
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034c0:	d017      	beq.n	80034f2 <TIM_TI1_SetConfig+0x66>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	4a25      	ldr	r2, [pc, #148]	; (800355c <TIM_TI1_SetConfig+0xd0>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d013      	beq.n	80034f2 <TIM_TI1_SetConfig+0x66>
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	4a24      	ldr	r2, [pc, #144]	; (8003560 <TIM_TI1_SetConfig+0xd4>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d00f      	beq.n	80034f2 <TIM_TI1_SetConfig+0x66>
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	4a23      	ldr	r2, [pc, #140]	; (8003564 <TIM_TI1_SetConfig+0xd8>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d00b      	beq.n	80034f2 <TIM_TI1_SetConfig+0x66>
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	4a22      	ldr	r2, [pc, #136]	; (8003568 <TIM_TI1_SetConfig+0xdc>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d007      	beq.n	80034f2 <TIM_TI1_SetConfig+0x66>
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	4a21      	ldr	r2, [pc, #132]	; (800356c <TIM_TI1_SetConfig+0xe0>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d003      	beq.n	80034f2 <TIM_TI1_SetConfig+0x66>
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	4a20      	ldr	r2, [pc, #128]	; (8003570 <TIM_TI1_SetConfig+0xe4>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d101      	bne.n	80034f6 <TIM_TI1_SetConfig+0x6a>
 80034f2:	2301      	movs	r3, #1
 80034f4:	e000      	b.n	80034f8 <TIM_TI1_SetConfig+0x6c>
 80034f6:	2300      	movs	r3, #0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d008      	beq.n	800350e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	f023 0303 	bic.w	r3, r3, #3
 8003502:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003504:	697a      	ldr	r2, [r7, #20]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4313      	orrs	r3, r2
 800350a:	617b      	str	r3, [r7, #20]
 800350c:	e003      	b.n	8003516 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	f043 0301 	orr.w	r3, r3, #1
 8003514:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800351c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	011b      	lsls	r3, r3, #4
 8003522:	b2db      	uxtb	r3, r3
 8003524:	697a      	ldr	r2, [r7, #20]
 8003526:	4313      	orrs	r3, r2
 8003528:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	f023 030a 	bic.w	r3, r3, #10
 8003530:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	f003 030a 	and.w	r3, r3, #10
 8003538:	693a      	ldr	r2, [r7, #16]
 800353a:	4313      	orrs	r3, r2
 800353c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	697a      	ldr	r2, [r7, #20]
 8003542:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	693a      	ldr	r2, [r7, #16]
 8003548:	621a      	str	r2, [r3, #32]
}
 800354a:	bf00      	nop
 800354c:	371c      	adds	r7, #28
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	40010000 	.word	0x40010000
 800355c:	40000400 	.word	0x40000400
 8003560:	40000800 	.word	0x40000800
 8003564:	40000c00 	.word	0x40000c00
 8003568:	40010400 	.word	0x40010400
 800356c:	40014000 	.word	0x40014000
 8003570:	40001800 	.word	0x40001800

08003574 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003574:	b480      	push	{r7}
 8003576:	b087      	sub	sp, #28
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6a1b      	ldr	r3, [r3, #32]
 8003584:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6a1b      	ldr	r3, [r3, #32]
 800358a:	f023 0201 	bic.w	r2, r3, #1
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800359e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	011b      	lsls	r3, r3, #4
 80035a4:	693a      	ldr	r2, [r7, #16]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	f023 030a 	bic.w	r3, r3, #10
 80035b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80035b2:	697a      	ldr	r2, [r7, #20]
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	693a      	ldr	r2, [r7, #16]
 80035be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	697a      	ldr	r2, [r7, #20]
 80035c4:	621a      	str	r2, [r3, #32]
}
 80035c6:	bf00      	nop
 80035c8:	371c      	adds	r7, #28
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr

080035d2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80035d2:	b480      	push	{r7}
 80035d4:	b087      	sub	sp, #28
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	60f8      	str	r0, [r7, #12]
 80035da:	60b9      	str	r1, [r7, #8]
 80035dc:	607a      	str	r2, [r7, #4]
 80035de:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6a1b      	ldr	r3, [r3, #32]
 80035e4:	f023 0210 	bic.w	r2, r3, #16
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	699b      	ldr	r3, [r3, #24]
 80035f0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6a1b      	ldr	r3, [r3, #32]
 80035f6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035fe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	021b      	lsls	r3, r3, #8
 8003604:	697a      	ldr	r2, [r7, #20]
 8003606:	4313      	orrs	r3, r2
 8003608:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003610:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	031b      	lsls	r3, r3, #12
 8003616:	b29b      	uxth	r3, r3
 8003618:	697a      	ldr	r2, [r7, #20]
 800361a:	4313      	orrs	r3, r2
 800361c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003624:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	011b      	lsls	r3, r3, #4
 800362a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800362e:	693a      	ldr	r2, [r7, #16]
 8003630:	4313      	orrs	r3, r2
 8003632:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	697a      	ldr	r2, [r7, #20]
 8003638:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	693a      	ldr	r2, [r7, #16]
 800363e:	621a      	str	r2, [r3, #32]
}
 8003640:	bf00      	nop
 8003642:	371c      	adds	r7, #28
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr

0800364c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800364c:	b480      	push	{r7}
 800364e:	b087      	sub	sp, #28
 8003650:	af00      	add	r7, sp, #0
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6a1b      	ldr	r3, [r3, #32]
 800365c:	f023 0210 	bic.w	r2, r3, #16
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	699b      	ldr	r3, [r3, #24]
 8003668:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6a1b      	ldr	r3, [r3, #32]
 800366e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003676:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	031b      	lsls	r3, r3, #12
 800367c:	697a      	ldr	r2, [r7, #20]
 800367e:	4313      	orrs	r3, r2
 8003680:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003688:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	011b      	lsls	r3, r3, #4
 800368e:	693a      	ldr	r2, [r7, #16]
 8003690:	4313      	orrs	r3, r2
 8003692:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	697a      	ldr	r2, [r7, #20]
 8003698:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	693a      	ldr	r2, [r7, #16]
 800369e:	621a      	str	r2, [r3, #32]
}
 80036a0:	bf00      	nop
 80036a2:	371c      	adds	r7, #28
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr

080036ac <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b087      	sub	sp, #28
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	60b9      	str	r1, [r7, #8]
 80036b6:	607a      	str	r2, [r7, #4]
 80036b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6a1b      	ldr	r3, [r3, #32]
 80036be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	69db      	ldr	r3, [r3, #28]
 80036ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6a1b      	ldr	r3, [r3, #32]
 80036d0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	f023 0303 	bic.w	r3, r3, #3
 80036d8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80036da:	697a      	ldr	r2, [r7, #20]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4313      	orrs	r3, r2
 80036e0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036e8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	011b      	lsls	r3, r3, #4
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	697a      	ldr	r2, [r7, #20]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80036fc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	021b      	lsls	r3, r3, #8
 8003702:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003706:	693a      	ldr	r2, [r7, #16]
 8003708:	4313      	orrs	r3, r2
 800370a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	697a      	ldr	r2, [r7, #20]
 8003710:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	693a      	ldr	r2, [r7, #16]
 8003716:	621a      	str	r2, [r3, #32]
}
 8003718:	bf00      	nop
 800371a:	371c      	adds	r7, #28
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003724:	b480      	push	{r7}
 8003726:	b087      	sub	sp, #28
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	60b9      	str	r1, [r7, #8]
 800372e:	607a      	str	r2, [r7, #4]
 8003730:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6a1b      	ldr	r3, [r3, #32]
 8003736:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	69db      	ldr	r3, [r3, #28]
 8003742:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6a1b      	ldr	r3, [r3, #32]
 8003748:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003750:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	021b      	lsls	r3, r3, #8
 8003756:	697a      	ldr	r2, [r7, #20]
 8003758:	4313      	orrs	r3, r2
 800375a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003762:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	031b      	lsls	r3, r3, #12
 8003768:	b29b      	uxth	r3, r3
 800376a:	697a      	ldr	r2, [r7, #20]
 800376c:	4313      	orrs	r3, r2
 800376e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003776:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	031b      	lsls	r3, r3, #12
 800377c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003780:	693a      	ldr	r2, [r7, #16]
 8003782:	4313      	orrs	r3, r2
 8003784:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	697a      	ldr	r2, [r7, #20]
 800378a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	693a      	ldr	r2, [r7, #16]
 8003790:	621a      	str	r2, [r3, #32]
}
 8003792:	bf00      	nop
 8003794:	371c      	adds	r7, #28
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr

0800379e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800379e:	b480      	push	{r7}
 80037a0:	b085      	sub	sp, #20
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
 80037a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80037b6:	683a      	ldr	r2, [r7, #0]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	f043 0307 	orr.w	r3, r3, #7
 80037c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	68fa      	ldr	r2, [r7, #12]
 80037c6:	609a      	str	r2, [r3, #8]
}
 80037c8:	bf00      	nop
 80037ca:	3714      	adds	r7, #20
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr

080037d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b087      	sub	sp, #28
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	607a      	str	r2, [r7, #4]
 80037e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	021a      	lsls	r2, r3, #8
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	431a      	orrs	r2, r3
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	697a      	ldr	r2, [r7, #20]
 80037fe:	4313      	orrs	r3, r2
 8003800:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	697a      	ldr	r2, [r7, #20]
 8003806:	609a      	str	r2, [r3, #8]
}
 8003808:	bf00      	nop
 800380a:	371c      	adds	r7, #28
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr

08003814 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003814:	b480      	push	{r7}
 8003816:	b087      	sub	sp, #28
 8003818:	af00      	add	r7, sp, #0
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	f003 031f 	and.w	r3, r3, #31
 8003826:	2201      	movs	r2, #1
 8003828:	fa02 f303 	lsl.w	r3, r2, r3
 800382c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6a1a      	ldr	r2, [r3, #32]
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	43db      	mvns	r3, r3
 8003836:	401a      	ands	r2, r3
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6a1a      	ldr	r2, [r3, #32]
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	f003 031f 	and.w	r3, r3, #31
 8003846:	6879      	ldr	r1, [r7, #4]
 8003848:	fa01 f303 	lsl.w	r3, r1, r3
 800384c:	431a      	orrs	r2, r3
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	621a      	str	r2, [r3, #32]
}
 8003852:	bf00      	nop
 8003854:	371c      	adds	r7, #28
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
	...

08003860 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003860:	b480      	push	{r7}
 8003862:	b085      	sub	sp, #20
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003870:	2b01      	cmp	r3, #1
 8003872:	d101      	bne.n	8003878 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003874:	2302      	movs	r3, #2
 8003876:	e05a      	b.n	800392e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2202      	movs	r2, #2
 8003884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800389e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	68fa      	ldr	r2, [r7, #12]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	68fa      	ldr	r2, [r7, #12]
 80038b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a21      	ldr	r2, [pc, #132]	; (800393c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d022      	beq.n	8003902 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038c4:	d01d      	beq.n	8003902 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a1d      	ldr	r2, [pc, #116]	; (8003940 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d018      	beq.n	8003902 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a1b      	ldr	r2, [pc, #108]	; (8003944 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d013      	beq.n	8003902 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a1a      	ldr	r2, [pc, #104]	; (8003948 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d00e      	beq.n	8003902 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a18      	ldr	r2, [pc, #96]	; (800394c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d009      	beq.n	8003902 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a17      	ldr	r2, [pc, #92]	; (8003950 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d004      	beq.n	8003902 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a15      	ldr	r2, [pc, #84]	; (8003954 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d10c      	bne.n	800391c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003908:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	68ba      	ldr	r2, [r7, #8]
 8003910:	4313      	orrs	r3, r2
 8003912:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68ba      	ldr	r2, [r7, #8]
 800391a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3714      	adds	r7, #20
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	40010000 	.word	0x40010000
 8003940:	40000400 	.word	0x40000400
 8003944:	40000800 	.word	0x40000800
 8003948:	40000c00 	.word	0x40000c00
 800394c:	40010400 	.word	0x40010400
 8003950:	40014000 	.word	0x40014000
 8003954:	40001800 	.word	0x40001800

08003958 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003960:	bf00      	nop
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003974:	bf00      	nop
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e03f      	b.n	8003a12 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003998:	b2db      	uxtb	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	d106      	bne.n	80039ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f7fd fd40 	bl	800142c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2224      	movs	r2, #36	; 0x24
 80039b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	68da      	ldr	r2, [r3, #12]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f000 fa69 	bl	8003e9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	691a      	ldr	r2, [r3, #16]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	695a      	ldr	r2, [r3, #20]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	68da      	ldr	r2, [r3, #12]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2220      	movs	r2, #32
 8003a04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2220      	movs	r2, #32
 8003a0c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3708      	adds	r7, #8
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
	...

08003a1c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b088      	sub	sp, #32
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	695b      	ldr	r3, [r3, #20]
 8003a3a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003a40:	2300      	movs	r3, #0
 8003a42:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	f003 030f 	and.w	r3, r3, #15
 8003a4a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d10d      	bne.n	8003a6e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	f003 0320 	and.w	r3, r3, #32
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d008      	beq.n	8003a6e <HAL_UART_IRQHandler+0x52>
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	f003 0320 	and.w	r3, r3, #32
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d003      	beq.n	8003a6e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f000 f996 	bl	8003d98 <UART_Receive_IT>
      return;
 8003a6c:	e0d1      	b.n	8003c12 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	f000 80b0 	beq.w	8003bd6 <HAL_UART_IRQHandler+0x1ba>
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	f003 0301 	and.w	r3, r3, #1
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d105      	bne.n	8003a8c <HAL_UART_IRQHandler+0x70>
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	f000 80a5 	beq.w	8003bd6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	f003 0301 	and.w	r3, r3, #1
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00a      	beq.n	8003aac <HAL_UART_IRQHandler+0x90>
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d005      	beq.n	8003aac <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa4:	f043 0201 	orr.w	r2, r3, #1
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	f003 0304 	and.w	r3, r3, #4
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d00a      	beq.n	8003acc <HAL_UART_IRQHandler+0xb0>
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	f003 0301 	and.w	r3, r3, #1
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d005      	beq.n	8003acc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ac4:	f043 0202 	orr.w	r2, r3, #2
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00a      	beq.n	8003aec <HAL_UART_IRQHandler+0xd0>
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	f003 0301 	and.w	r3, r3, #1
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d005      	beq.n	8003aec <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ae4:	f043 0204 	orr.w	r2, r3, #4
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	f003 0308 	and.w	r3, r3, #8
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00f      	beq.n	8003b16 <HAL_UART_IRQHandler+0xfa>
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	f003 0320 	and.w	r3, r3, #32
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d104      	bne.n	8003b0a <HAL_UART_IRQHandler+0xee>
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	f003 0301 	and.w	r3, r3, #1
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d005      	beq.n	8003b16 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b0e:	f043 0208 	orr.w	r2, r3, #8
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d078      	beq.n	8003c10 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	f003 0320 	and.w	r3, r3, #32
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d007      	beq.n	8003b38 <HAL_UART_IRQHandler+0x11c>
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	f003 0320 	and.w	r3, r3, #32
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d002      	beq.n	8003b38 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 f930 	bl	8003d98 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b42:	2b40      	cmp	r3, #64	; 0x40
 8003b44:	bf0c      	ite	eq
 8003b46:	2301      	moveq	r3, #1
 8003b48:	2300      	movne	r3, #0
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b52:	f003 0308 	and.w	r3, r3, #8
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d102      	bne.n	8003b60 <HAL_UART_IRQHandler+0x144>
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d031      	beq.n	8003bc4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f000 f879 	bl	8003c58 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	695b      	ldr	r3, [r3, #20]
 8003b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b70:	2b40      	cmp	r3, #64	; 0x40
 8003b72:	d123      	bne.n	8003bbc <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	695a      	ldr	r2, [r3, #20]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b82:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d013      	beq.n	8003bb4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b90:	4a21      	ldr	r2, [pc, #132]	; (8003c18 <HAL_UART_IRQHandler+0x1fc>)
 8003b92:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f7fd feb3 	bl	8001904 <HAL_DMA_Abort_IT>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d016      	beq.n	8003bd2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ba8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003bae:	4610      	mov	r0, r2
 8003bb0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bb2:	e00e      	b.n	8003bd2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f000 f845 	bl	8003c44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bba:	e00a      	b.n	8003bd2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f000 f841 	bl	8003c44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bc2:	e006      	b.n	8003bd2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f000 f83d 	bl	8003c44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003bd0:	e01e      	b.n	8003c10 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bd2:	bf00      	nop
    return;
 8003bd4:	e01c      	b.n	8003c10 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d008      	beq.n	8003bf2 <HAL_UART_IRQHandler+0x1d6>
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d003      	beq.n	8003bf2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 f866 	bl	8003cbc <UART_Transmit_IT>
    return;
 8003bf0:	e00f      	b.n	8003c12 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d00a      	beq.n	8003c12 <HAL_UART_IRQHandler+0x1f6>
 8003bfc:	69bb      	ldr	r3, [r7, #24]
 8003bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d005      	beq.n	8003c12 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 f8ae 	bl	8003d68 <UART_EndTransmit_IT>
    return;
 8003c0c:	bf00      	nop
 8003c0e:	e000      	b.n	8003c12 <HAL_UART_IRQHandler+0x1f6>
    return;
 8003c10:	bf00      	nop
  }
}
 8003c12:	3720      	adds	r7, #32
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	08003c95 	.word	0x08003c95

08003c1c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003c24:	bf00      	nop
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003c38:	bf00      	nop
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003c4c:	bf00      	nop
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68da      	ldr	r2, [r3, #12]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003c6e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	695a      	ldr	r2, [r3, #20]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f022 0201 	bic.w	r2, r2, #1
 8003c7e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2220      	movs	r2, #32
 8003c84:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003c88:	bf00      	nop
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003cae:	68f8      	ldr	r0, [r7, #12]
 8003cb0:	f7ff ffc8 	bl	8003c44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003cb4:	bf00      	nop
 8003cb6:	3710      	adds	r7, #16
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b085      	sub	sp, #20
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	2b21      	cmp	r3, #33	; 0x21
 8003cce:	d144      	bne.n	8003d5a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cd8:	d11a      	bne.n	8003d10 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a1b      	ldr	r3, [r3, #32]
 8003cde:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	881b      	ldrh	r3, [r3, #0]
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cee:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	691b      	ldr	r3, [r3, #16]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d105      	bne.n	8003d04 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a1b      	ldr	r3, [r3, #32]
 8003cfc:	1c9a      	adds	r2, r3, #2
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	621a      	str	r2, [r3, #32]
 8003d02:	e00e      	b.n	8003d22 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a1b      	ldr	r3, [r3, #32]
 8003d08:	1c5a      	adds	r2, r3, #1
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	621a      	str	r2, [r3, #32]
 8003d0e:	e008      	b.n	8003d22 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6a1b      	ldr	r3, [r3, #32]
 8003d14:	1c59      	adds	r1, r3, #1
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	6211      	str	r1, [r2, #32]
 8003d1a:	781a      	ldrb	r2, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	3b01      	subs	r3, #1
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	4619      	mov	r1, r3
 8003d30:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d10f      	bne.n	8003d56 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	68da      	ldr	r2, [r3, #12]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d44:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	68da      	ldr	r2, [r3, #12]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d54:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003d56:	2300      	movs	r3, #0
 8003d58:	e000      	b.n	8003d5c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003d5a:	2302      	movs	r3, #2
  }
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3714      	adds	r7, #20
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68da      	ldr	r2, [r3, #12]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d7e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2220      	movs	r2, #32
 8003d84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f7ff ff47 	bl	8003c1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003d8e:	2300      	movs	r3, #0
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3708      	adds	r7, #8
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	2b22      	cmp	r3, #34	; 0x22
 8003daa:	d171      	bne.n	8003e90 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003db4:	d123      	bne.n	8003dfe <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dba:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	691b      	ldr	r3, [r3, #16]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d10e      	bne.n	8003de2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dd0:	b29a      	uxth	r2, r3
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dda:	1c9a      	adds	r2, r3, #2
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	629a      	str	r2, [r3, #40]	; 0x28
 8003de0:	e029      	b.n	8003e36 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	b29a      	uxth	r2, r3
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df6:	1c5a      	adds	r2, r3, #1
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	629a      	str	r2, [r3, #40]	; 0x28
 8003dfc:	e01b      	b.n	8003e36 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d10a      	bne.n	8003e1c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	6858      	ldr	r0, [r3, #4]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e10:	1c59      	adds	r1, r3, #1
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	6291      	str	r1, [r2, #40]	; 0x28
 8003e16:	b2c2      	uxtb	r2, r0
 8003e18:	701a      	strb	r2, [r3, #0]
 8003e1a:	e00c      	b.n	8003e36 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	b2da      	uxtb	r2, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e28:	1c58      	adds	r0, r3, #1
 8003e2a:	6879      	ldr	r1, [r7, #4]
 8003e2c:	6288      	str	r0, [r1, #40]	; 0x28
 8003e2e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003e32:	b2d2      	uxtb	r2, r2
 8003e34:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	3b01      	subs	r3, #1
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	4619      	mov	r1, r3
 8003e44:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d120      	bne.n	8003e8c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68da      	ldr	r2, [r3, #12]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f022 0220 	bic.w	r2, r2, #32
 8003e58:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	68da      	ldr	r2, [r3, #12]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e68:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	695a      	ldr	r2, [r3, #20]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f022 0201 	bic.w	r2, r2, #1
 8003e78:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2220      	movs	r2, #32
 8003e7e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f7ff fed4 	bl	8003c30 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	e002      	b.n	8003e92 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	e000      	b.n	8003e92 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003e90:	2302      	movs	r3, #2
  }
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3710      	adds	r7, #16
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
	...

08003e9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ea0:	b085      	sub	sp, #20
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	691b      	ldr	r3, [r3, #16]
 8003eac:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	68da      	ldr	r2, [r3, #12]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	430a      	orrs	r2, r1
 8003eba:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	689a      	ldr	r2, [r3, #8]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	691b      	ldr	r3, [r3, #16]
 8003ec4:	431a      	orrs	r2, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	695b      	ldr	r3, [r3, #20]
 8003eca:	431a      	orrs	r2, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	69db      	ldr	r3, [r3, #28]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003ede:	f023 030c 	bic.w	r3, r3, #12
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	6812      	ldr	r2, [r2, #0]
 8003ee6:	68f9      	ldr	r1, [r7, #12]
 8003ee8:	430b      	orrs	r3, r1
 8003eea:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	695b      	ldr	r3, [r3, #20]
 8003ef2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	699a      	ldr	r2, [r3, #24]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	430a      	orrs	r2, r1
 8003f00:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	69db      	ldr	r3, [r3, #28]
 8003f06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f0a:	f040 818b 	bne.w	8004224 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4ac1      	ldr	r2, [pc, #772]	; (8004218 <UART_SetConfig+0x37c>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d005      	beq.n	8003f24 <UART_SetConfig+0x88>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4abf      	ldr	r2, [pc, #764]	; (800421c <UART_SetConfig+0x380>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	f040 80bd 	bne.w	800409e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f24:	f7fe fb8a 	bl	800263c <HAL_RCC_GetPCLK2Freq>
 8003f28:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	461d      	mov	r5, r3
 8003f2e:	f04f 0600 	mov.w	r6, #0
 8003f32:	46a8      	mov	r8, r5
 8003f34:	46b1      	mov	r9, r6
 8003f36:	eb18 0308 	adds.w	r3, r8, r8
 8003f3a:	eb49 0409 	adc.w	r4, r9, r9
 8003f3e:	4698      	mov	r8, r3
 8003f40:	46a1      	mov	r9, r4
 8003f42:	eb18 0805 	adds.w	r8, r8, r5
 8003f46:	eb49 0906 	adc.w	r9, r9, r6
 8003f4a:	f04f 0100 	mov.w	r1, #0
 8003f4e:	f04f 0200 	mov.w	r2, #0
 8003f52:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003f56:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003f5a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003f5e:	4688      	mov	r8, r1
 8003f60:	4691      	mov	r9, r2
 8003f62:	eb18 0005 	adds.w	r0, r8, r5
 8003f66:	eb49 0106 	adc.w	r1, r9, r6
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	461d      	mov	r5, r3
 8003f70:	f04f 0600 	mov.w	r6, #0
 8003f74:	196b      	adds	r3, r5, r5
 8003f76:	eb46 0406 	adc.w	r4, r6, r6
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	4623      	mov	r3, r4
 8003f7e:	f7fc f935 	bl	80001ec <__aeabi_uldivmod>
 8003f82:	4603      	mov	r3, r0
 8003f84:	460c      	mov	r4, r1
 8003f86:	461a      	mov	r2, r3
 8003f88:	4ba5      	ldr	r3, [pc, #660]	; (8004220 <UART_SetConfig+0x384>)
 8003f8a:	fba3 2302 	umull	r2, r3, r3, r2
 8003f8e:	095b      	lsrs	r3, r3, #5
 8003f90:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	461d      	mov	r5, r3
 8003f98:	f04f 0600 	mov.w	r6, #0
 8003f9c:	46a9      	mov	r9, r5
 8003f9e:	46b2      	mov	sl, r6
 8003fa0:	eb19 0309 	adds.w	r3, r9, r9
 8003fa4:	eb4a 040a 	adc.w	r4, sl, sl
 8003fa8:	4699      	mov	r9, r3
 8003faa:	46a2      	mov	sl, r4
 8003fac:	eb19 0905 	adds.w	r9, r9, r5
 8003fb0:	eb4a 0a06 	adc.w	sl, sl, r6
 8003fb4:	f04f 0100 	mov.w	r1, #0
 8003fb8:	f04f 0200 	mov.w	r2, #0
 8003fbc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fc0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003fc4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003fc8:	4689      	mov	r9, r1
 8003fca:	4692      	mov	sl, r2
 8003fcc:	eb19 0005 	adds.w	r0, r9, r5
 8003fd0:	eb4a 0106 	adc.w	r1, sl, r6
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	461d      	mov	r5, r3
 8003fda:	f04f 0600 	mov.w	r6, #0
 8003fde:	196b      	adds	r3, r5, r5
 8003fe0:	eb46 0406 	adc.w	r4, r6, r6
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	4623      	mov	r3, r4
 8003fe8:	f7fc f900 	bl	80001ec <__aeabi_uldivmod>
 8003fec:	4603      	mov	r3, r0
 8003fee:	460c      	mov	r4, r1
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	4b8b      	ldr	r3, [pc, #556]	; (8004220 <UART_SetConfig+0x384>)
 8003ff4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ff8:	095b      	lsrs	r3, r3, #5
 8003ffa:	2164      	movs	r1, #100	; 0x64
 8003ffc:	fb01 f303 	mul.w	r3, r1, r3
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	00db      	lsls	r3, r3, #3
 8004004:	3332      	adds	r3, #50	; 0x32
 8004006:	4a86      	ldr	r2, [pc, #536]	; (8004220 <UART_SetConfig+0x384>)
 8004008:	fba2 2303 	umull	r2, r3, r2, r3
 800400c:	095b      	lsrs	r3, r3, #5
 800400e:	005b      	lsls	r3, r3, #1
 8004010:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004014:	4498      	add	r8, r3
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	461d      	mov	r5, r3
 800401a:	f04f 0600 	mov.w	r6, #0
 800401e:	46a9      	mov	r9, r5
 8004020:	46b2      	mov	sl, r6
 8004022:	eb19 0309 	adds.w	r3, r9, r9
 8004026:	eb4a 040a 	adc.w	r4, sl, sl
 800402a:	4699      	mov	r9, r3
 800402c:	46a2      	mov	sl, r4
 800402e:	eb19 0905 	adds.w	r9, r9, r5
 8004032:	eb4a 0a06 	adc.w	sl, sl, r6
 8004036:	f04f 0100 	mov.w	r1, #0
 800403a:	f04f 0200 	mov.w	r2, #0
 800403e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004042:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004046:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800404a:	4689      	mov	r9, r1
 800404c:	4692      	mov	sl, r2
 800404e:	eb19 0005 	adds.w	r0, r9, r5
 8004052:	eb4a 0106 	adc.w	r1, sl, r6
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	461d      	mov	r5, r3
 800405c:	f04f 0600 	mov.w	r6, #0
 8004060:	196b      	adds	r3, r5, r5
 8004062:	eb46 0406 	adc.w	r4, r6, r6
 8004066:	461a      	mov	r2, r3
 8004068:	4623      	mov	r3, r4
 800406a:	f7fc f8bf 	bl	80001ec <__aeabi_uldivmod>
 800406e:	4603      	mov	r3, r0
 8004070:	460c      	mov	r4, r1
 8004072:	461a      	mov	r2, r3
 8004074:	4b6a      	ldr	r3, [pc, #424]	; (8004220 <UART_SetConfig+0x384>)
 8004076:	fba3 1302 	umull	r1, r3, r3, r2
 800407a:	095b      	lsrs	r3, r3, #5
 800407c:	2164      	movs	r1, #100	; 0x64
 800407e:	fb01 f303 	mul.w	r3, r1, r3
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	00db      	lsls	r3, r3, #3
 8004086:	3332      	adds	r3, #50	; 0x32
 8004088:	4a65      	ldr	r2, [pc, #404]	; (8004220 <UART_SetConfig+0x384>)
 800408a:	fba2 2303 	umull	r2, r3, r2, r3
 800408e:	095b      	lsrs	r3, r3, #5
 8004090:	f003 0207 	and.w	r2, r3, #7
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4442      	add	r2, r8
 800409a:	609a      	str	r2, [r3, #8]
 800409c:	e26f      	b.n	800457e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800409e:	f7fe fab9 	bl	8002614 <HAL_RCC_GetPCLK1Freq>
 80040a2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	461d      	mov	r5, r3
 80040a8:	f04f 0600 	mov.w	r6, #0
 80040ac:	46a8      	mov	r8, r5
 80040ae:	46b1      	mov	r9, r6
 80040b0:	eb18 0308 	adds.w	r3, r8, r8
 80040b4:	eb49 0409 	adc.w	r4, r9, r9
 80040b8:	4698      	mov	r8, r3
 80040ba:	46a1      	mov	r9, r4
 80040bc:	eb18 0805 	adds.w	r8, r8, r5
 80040c0:	eb49 0906 	adc.w	r9, r9, r6
 80040c4:	f04f 0100 	mov.w	r1, #0
 80040c8:	f04f 0200 	mov.w	r2, #0
 80040cc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80040d0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80040d4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80040d8:	4688      	mov	r8, r1
 80040da:	4691      	mov	r9, r2
 80040dc:	eb18 0005 	adds.w	r0, r8, r5
 80040e0:	eb49 0106 	adc.w	r1, r9, r6
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	461d      	mov	r5, r3
 80040ea:	f04f 0600 	mov.w	r6, #0
 80040ee:	196b      	adds	r3, r5, r5
 80040f0:	eb46 0406 	adc.w	r4, r6, r6
 80040f4:	461a      	mov	r2, r3
 80040f6:	4623      	mov	r3, r4
 80040f8:	f7fc f878 	bl	80001ec <__aeabi_uldivmod>
 80040fc:	4603      	mov	r3, r0
 80040fe:	460c      	mov	r4, r1
 8004100:	461a      	mov	r2, r3
 8004102:	4b47      	ldr	r3, [pc, #284]	; (8004220 <UART_SetConfig+0x384>)
 8004104:	fba3 2302 	umull	r2, r3, r3, r2
 8004108:	095b      	lsrs	r3, r3, #5
 800410a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	461d      	mov	r5, r3
 8004112:	f04f 0600 	mov.w	r6, #0
 8004116:	46a9      	mov	r9, r5
 8004118:	46b2      	mov	sl, r6
 800411a:	eb19 0309 	adds.w	r3, r9, r9
 800411e:	eb4a 040a 	adc.w	r4, sl, sl
 8004122:	4699      	mov	r9, r3
 8004124:	46a2      	mov	sl, r4
 8004126:	eb19 0905 	adds.w	r9, r9, r5
 800412a:	eb4a 0a06 	adc.w	sl, sl, r6
 800412e:	f04f 0100 	mov.w	r1, #0
 8004132:	f04f 0200 	mov.w	r2, #0
 8004136:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800413a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800413e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004142:	4689      	mov	r9, r1
 8004144:	4692      	mov	sl, r2
 8004146:	eb19 0005 	adds.w	r0, r9, r5
 800414a:	eb4a 0106 	adc.w	r1, sl, r6
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	461d      	mov	r5, r3
 8004154:	f04f 0600 	mov.w	r6, #0
 8004158:	196b      	adds	r3, r5, r5
 800415a:	eb46 0406 	adc.w	r4, r6, r6
 800415e:	461a      	mov	r2, r3
 8004160:	4623      	mov	r3, r4
 8004162:	f7fc f843 	bl	80001ec <__aeabi_uldivmod>
 8004166:	4603      	mov	r3, r0
 8004168:	460c      	mov	r4, r1
 800416a:	461a      	mov	r2, r3
 800416c:	4b2c      	ldr	r3, [pc, #176]	; (8004220 <UART_SetConfig+0x384>)
 800416e:	fba3 1302 	umull	r1, r3, r3, r2
 8004172:	095b      	lsrs	r3, r3, #5
 8004174:	2164      	movs	r1, #100	; 0x64
 8004176:	fb01 f303 	mul.w	r3, r1, r3
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	00db      	lsls	r3, r3, #3
 800417e:	3332      	adds	r3, #50	; 0x32
 8004180:	4a27      	ldr	r2, [pc, #156]	; (8004220 <UART_SetConfig+0x384>)
 8004182:	fba2 2303 	umull	r2, r3, r2, r3
 8004186:	095b      	lsrs	r3, r3, #5
 8004188:	005b      	lsls	r3, r3, #1
 800418a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800418e:	4498      	add	r8, r3
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	461d      	mov	r5, r3
 8004194:	f04f 0600 	mov.w	r6, #0
 8004198:	46a9      	mov	r9, r5
 800419a:	46b2      	mov	sl, r6
 800419c:	eb19 0309 	adds.w	r3, r9, r9
 80041a0:	eb4a 040a 	adc.w	r4, sl, sl
 80041a4:	4699      	mov	r9, r3
 80041a6:	46a2      	mov	sl, r4
 80041a8:	eb19 0905 	adds.w	r9, r9, r5
 80041ac:	eb4a 0a06 	adc.w	sl, sl, r6
 80041b0:	f04f 0100 	mov.w	r1, #0
 80041b4:	f04f 0200 	mov.w	r2, #0
 80041b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041bc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80041c0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80041c4:	4689      	mov	r9, r1
 80041c6:	4692      	mov	sl, r2
 80041c8:	eb19 0005 	adds.w	r0, r9, r5
 80041cc:	eb4a 0106 	adc.w	r1, sl, r6
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	461d      	mov	r5, r3
 80041d6:	f04f 0600 	mov.w	r6, #0
 80041da:	196b      	adds	r3, r5, r5
 80041dc:	eb46 0406 	adc.w	r4, r6, r6
 80041e0:	461a      	mov	r2, r3
 80041e2:	4623      	mov	r3, r4
 80041e4:	f7fc f802 	bl	80001ec <__aeabi_uldivmod>
 80041e8:	4603      	mov	r3, r0
 80041ea:	460c      	mov	r4, r1
 80041ec:	461a      	mov	r2, r3
 80041ee:	4b0c      	ldr	r3, [pc, #48]	; (8004220 <UART_SetConfig+0x384>)
 80041f0:	fba3 1302 	umull	r1, r3, r3, r2
 80041f4:	095b      	lsrs	r3, r3, #5
 80041f6:	2164      	movs	r1, #100	; 0x64
 80041f8:	fb01 f303 	mul.w	r3, r1, r3
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	00db      	lsls	r3, r3, #3
 8004200:	3332      	adds	r3, #50	; 0x32
 8004202:	4a07      	ldr	r2, [pc, #28]	; (8004220 <UART_SetConfig+0x384>)
 8004204:	fba2 2303 	umull	r2, r3, r2, r3
 8004208:	095b      	lsrs	r3, r3, #5
 800420a:	f003 0207 	and.w	r2, r3, #7
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4442      	add	r2, r8
 8004214:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004216:	e1b2      	b.n	800457e <UART_SetConfig+0x6e2>
 8004218:	40011000 	.word	0x40011000
 800421c:	40011400 	.word	0x40011400
 8004220:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4ad7      	ldr	r2, [pc, #860]	; (8004588 <UART_SetConfig+0x6ec>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d005      	beq.n	800423a <UART_SetConfig+0x39e>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4ad6      	ldr	r2, [pc, #856]	; (800458c <UART_SetConfig+0x6f0>)
 8004234:	4293      	cmp	r3, r2
 8004236:	f040 80d1 	bne.w	80043dc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800423a:	f7fe f9ff 	bl	800263c <HAL_RCC_GetPCLK2Freq>
 800423e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	469a      	mov	sl, r3
 8004244:	f04f 0b00 	mov.w	fp, #0
 8004248:	46d0      	mov	r8, sl
 800424a:	46d9      	mov	r9, fp
 800424c:	eb18 0308 	adds.w	r3, r8, r8
 8004250:	eb49 0409 	adc.w	r4, r9, r9
 8004254:	4698      	mov	r8, r3
 8004256:	46a1      	mov	r9, r4
 8004258:	eb18 080a 	adds.w	r8, r8, sl
 800425c:	eb49 090b 	adc.w	r9, r9, fp
 8004260:	f04f 0100 	mov.w	r1, #0
 8004264:	f04f 0200 	mov.w	r2, #0
 8004268:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800426c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004270:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004274:	4688      	mov	r8, r1
 8004276:	4691      	mov	r9, r2
 8004278:	eb1a 0508 	adds.w	r5, sl, r8
 800427c:	eb4b 0609 	adc.w	r6, fp, r9
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	4619      	mov	r1, r3
 8004286:	f04f 0200 	mov.w	r2, #0
 800428a:	f04f 0300 	mov.w	r3, #0
 800428e:	f04f 0400 	mov.w	r4, #0
 8004292:	0094      	lsls	r4, r2, #2
 8004294:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004298:	008b      	lsls	r3, r1, #2
 800429a:	461a      	mov	r2, r3
 800429c:	4623      	mov	r3, r4
 800429e:	4628      	mov	r0, r5
 80042a0:	4631      	mov	r1, r6
 80042a2:	f7fb ffa3 	bl	80001ec <__aeabi_uldivmod>
 80042a6:	4603      	mov	r3, r0
 80042a8:	460c      	mov	r4, r1
 80042aa:	461a      	mov	r2, r3
 80042ac:	4bb8      	ldr	r3, [pc, #736]	; (8004590 <UART_SetConfig+0x6f4>)
 80042ae:	fba3 2302 	umull	r2, r3, r3, r2
 80042b2:	095b      	lsrs	r3, r3, #5
 80042b4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	469b      	mov	fp, r3
 80042bc:	f04f 0c00 	mov.w	ip, #0
 80042c0:	46d9      	mov	r9, fp
 80042c2:	46e2      	mov	sl, ip
 80042c4:	eb19 0309 	adds.w	r3, r9, r9
 80042c8:	eb4a 040a 	adc.w	r4, sl, sl
 80042cc:	4699      	mov	r9, r3
 80042ce:	46a2      	mov	sl, r4
 80042d0:	eb19 090b 	adds.w	r9, r9, fp
 80042d4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80042d8:	f04f 0100 	mov.w	r1, #0
 80042dc:	f04f 0200 	mov.w	r2, #0
 80042e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042e4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80042e8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80042ec:	4689      	mov	r9, r1
 80042ee:	4692      	mov	sl, r2
 80042f0:	eb1b 0509 	adds.w	r5, fp, r9
 80042f4:	eb4c 060a 	adc.w	r6, ip, sl
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	4619      	mov	r1, r3
 80042fe:	f04f 0200 	mov.w	r2, #0
 8004302:	f04f 0300 	mov.w	r3, #0
 8004306:	f04f 0400 	mov.w	r4, #0
 800430a:	0094      	lsls	r4, r2, #2
 800430c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004310:	008b      	lsls	r3, r1, #2
 8004312:	461a      	mov	r2, r3
 8004314:	4623      	mov	r3, r4
 8004316:	4628      	mov	r0, r5
 8004318:	4631      	mov	r1, r6
 800431a:	f7fb ff67 	bl	80001ec <__aeabi_uldivmod>
 800431e:	4603      	mov	r3, r0
 8004320:	460c      	mov	r4, r1
 8004322:	461a      	mov	r2, r3
 8004324:	4b9a      	ldr	r3, [pc, #616]	; (8004590 <UART_SetConfig+0x6f4>)
 8004326:	fba3 1302 	umull	r1, r3, r3, r2
 800432a:	095b      	lsrs	r3, r3, #5
 800432c:	2164      	movs	r1, #100	; 0x64
 800432e:	fb01 f303 	mul.w	r3, r1, r3
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	011b      	lsls	r3, r3, #4
 8004336:	3332      	adds	r3, #50	; 0x32
 8004338:	4a95      	ldr	r2, [pc, #596]	; (8004590 <UART_SetConfig+0x6f4>)
 800433a:	fba2 2303 	umull	r2, r3, r2, r3
 800433e:	095b      	lsrs	r3, r3, #5
 8004340:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004344:	4498      	add	r8, r3
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	469b      	mov	fp, r3
 800434a:	f04f 0c00 	mov.w	ip, #0
 800434e:	46d9      	mov	r9, fp
 8004350:	46e2      	mov	sl, ip
 8004352:	eb19 0309 	adds.w	r3, r9, r9
 8004356:	eb4a 040a 	adc.w	r4, sl, sl
 800435a:	4699      	mov	r9, r3
 800435c:	46a2      	mov	sl, r4
 800435e:	eb19 090b 	adds.w	r9, r9, fp
 8004362:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004366:	f04f 0100 	mov.w	r1, #0
 800436a:	f04f 0200 	mov.w	r2, #0
 800436e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004372:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004376:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800437a:	4689      	mov	r9, r1
 800437c:	4692      	mov	sl, r2
 800437e:	eb1b 0509 	adds.w	r5, fp, r9
 8004382:	eb4c 060a 	adc.w	r6, ip, sl
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	4619      	mov	r1, r3
 800438c:	f04f 0200 	mov.w	r2, #0
 8004390:	f04f 0300 	mov.w	r3, #0
 8004394:	f04f 0400 	mov.w	r4, #0
 8004398:	0094      	lsls	r4, r2, #2
 800439a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800439e:	008b      	lsls	r3, r1, #2
 80043a0:	461a      	mov	r2, r3
 80043a2:	4623      	mov	r3, r4
 80043a4:	4628      	mov	r0, r5
 80043a6:	4631      	mov	r1, r6
 80043a8:	f7fb ff20 	bl	80001ec <__aeabi_uldivmod>
 80043ac:	4603      	mov	r3, r0
 80043ae:	460c      	mov	r4, r1
 80043b0:	461a      	mov	r2, r3
 80043b2:	4b77      	ldr	r3, [pc, #476]	; (8004590 <UART_SetConfig+0x6f4>)
 80043b4:	fba3 1302 	umull	r1, r3, r3, r2
 80043b8:	095b      	lsrs	r3, r3, #5
 80043ba:	2164      	movs	r1, #100	; 0x64
 80043bc:	fb01 f303 	mul.w	r3, r1, r3
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	011b      	lsls	r3, r3, #4
 80043c4:	3332      	adds	r3, #50	; 0x32
 80043c6:	4a72      	ldr	r2, [pc, #456]	; (8004590 <UART_SetConfig+0x6f4>)
 80043c8:	fba2 2303 	umull	r2, r3, r2, r3
 80043cc:	095b      	lsrs	r3, r3, #5
 80043ce:	f003 020f 	and.w	r2, r3, #15
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4442      	add	r2, r8
 80043d8:	609a      	str	r2, [r3, #8]
 80043da:	e0d0      	b.n	800457e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80043dc:	f7fe f91a 	bl	8002614 <HAL_RCC_GetPCLK1Freq>
 80043e0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	469a      	mov	sl, r3
 80043e6:	f04f 0b00 	mov.w	fp, #0
 80043ea:	46d0      	mov	r8, sl
 80043ec:	46d9      	mov	r9, fp
 80043ee:	eb18 0308 	adds.w	r3, r8, r8
 80043f2:	eb49 0409 	adc.w	r4, r9, r9
 80043f6:	4698      	mov	r8, r3
 80043f8:	46a1      	mov	r9, r4
 80043fa:	eb18 080a 	adds.w	r8, r8, sl
 80043fe:	eb49 090b 	adc.w	r9, r9, fp
 8004402:	f04f 0100 	mov.w	r1, #0
 8004406:	f04f 0200 	mov.w	r2, #0
 800440a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800440e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004412:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004416:	4688      	mov	r8, r1
 8004418:	4691      	mov	r9, r2
 800441a:	eb1a 0508 	adds.w	r5, sl, r8
 800441e:	eb4b 0609 	adc.w	r6, fp, r9
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	4619      	mov	r1, r3
 8004428:	f04f 0200 	mov.w	r2, #0
 800442c:	f04f 0300 	mov.w	r3, #0
 8004430:	f04f 0400 	mov.w	r4, #0
 8004434:	0094      	lsls	r4, r2, #2
 8004436:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800443a:	008b      	lsls	r3, r1, #2
 800443c:	461a      	mov	r2, r3
 800443e:	4623      	mov	r3, r4
 8004440:	4628      	mov	r0, r5
 8004442:	4631      	mov	r1, r6
 8004444:	f7fb fed2 	bl	80001ec <__aeabi_uldivmod>
 8004448:	4603      	mov	r3, r0
 800444a:	460c      	mov	r4, r1
 800444c:	461a      	mov	r2, r3
 800444e:	4b50      	ldr	r3, [pc, #320]	; (8004590 <UART_SetConfig+0x6f4>)
 8004450:	fba3 2302 	umull	r2, r3, r3, r2
 8004454:	095b      	lsrs	r3, r3, #5
 8004456:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	469b      	mov	fp, r3
 800445e:	f04f 0c00 	mov.w	ip, #0
 8004462:	46d9      	mov	r9, fp
 8004464:	46e2      	mov	sl, ip
 8004466:	eb19 0309 	adds.w	r3, r9, r9
 800446a:	eb4a 040a 	adc.w	r4, sl, sl
 800446e:	4699      	mov	r9, r3
 8004470:	46a2      	mov	sl, r4
 8004472:	eb19 090b 	adds.w	r9, r9, fp
 8004476:	eb4a 0a0c 	adc.w	sl, sl, ip
 800447a:	f04f 0100 	mov.w	r1, #0
 800447e:	f04f 0200 	mov.w	r2, #0
 8004482:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004486:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800448a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800448e:	4689      	mov	r9, r1
 8004490:	4692      	mov	sl, r2
 8004492:	eb1b 0509 	adds.w	r5, fp, r9
 8004496:	eb4c 060a 	adc.w	r6, ip, sl
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	4619      	mov	r1, r3
 80044a0:	f04f 0200 	mov.w	r2, #0
 80044a4:	f04f 0300 	mov.w	r3, #0
 80044a8:	f04f 0400 	mov.w	r4, #0
 80044ac:	0094      	lsls	r4, r2, #2
 80044ae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80044b2:	008b      	lsls	r3, r1, #2
 80044b4:	461a      	mov	r2, r3
 80044b6:	4623      	mov	r3, r4
 80044b8:	4628      	mov	r0, r5
 80044ba:	4631      	mov	r1, r6
 80044bc:	f7fb fe96 	bl	80001ec <__aeabi_uldivmod>
 80044c0:	4603      	mov	r3, r0
 80044c2:	460c      	mov	r4, r1
 80044c4:	461a      	mov	r2, r3
 80044c6:	4b32      	ldr	r3, [pc, #200]	; (8004590 <UART_SetConfig+0x6f4>)
 80044c8:	fba3 1302 	umull	r1, r3, r3, r2
 80044cc:	095b      	lsrs	r3, r3, #5
 80044ce:	2164      	movs	r1, #100	; 0x64
 80044d0:	fb01 f303 	mul.w	r3, r1, r3
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	011b      	lsls	r3, r3, #4
 80044d8:	3332      	adds	r3, #50	; 0x32
 80044da:	4a2d      	ldr	r2, [pc, #180]	; (8004590 <UART_SetConfig+0x6f4>)
 80044dc:	fba2 2303 	umull	r2, r3, r2, r3
 80044e0:	095b      	lsrs	r3, r3, #5
 80044e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044e6:	4498      	add	r8, r3
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	469b      	mov	fp, r3
 80044ec:	f04f 0c00 	mov.w	ip, #0
 80044f0:	46d9      	mov	r9, fp
 80044f2:	46e2      	mov	sl, ip
 80044f4:	eb19 0309 	adds.w	r3, r9, r9
 80044f8:	eb4a 040a 	adc.w	r4, sl, sl
 80044fc:	4699      	mov	r9, r3
 80044fe:	46a2      	mov	sl, r4
 8004500:	eb19 090b 	adds.w	r9, r9, fp
 8004504:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004508:	f04f 0100 	mov.w	r1, #0
 800450c:	f04f 0200 	mov.w	r2, #0
 8004510:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004514:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004518:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800451c:	4689      	mov	r9, r1
 800451e:	4692      	mov	sl, r2
 8004520:	eb1b 0509 	adds.w	r5, fp, r9
 8004524:	eb4c 060a 	adc.w	r6, ip, sl
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	4619      	mov	r1, r3
 800452e:	f04f 0200 	mov.w	r2, #0
 8004532:	f04f 0300 	mov.w	r3, #0
 8004536:	f04f 0400 	mov.w	r4, #0
 800453a:	0094      	lsls	r4, r2, #2
 800453c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004540:	008b      	lsls	r3, r1, #2
 8004542:	461a      	mov	r2, r3
 8004544:	4623      	mov	r3, r4
 8004546:	4628      	mov	r0, r5
 8004548:	4631      	mov	r1, r6
 800454a:	f7fb fe4f 	bl	80001ec <__aeabi_uldivmod>
 800454e:	4603      	mov	r3, r0
 8004550:	460c      	mov	r4, r1
 8004552:	461a      	mov	r2, r3
 8004554:	4b0e      	ldr	r3, [pc, #56]	; (8004590 <UART_SetConfig+0x6f4>)
 8004556:	fba3 1302 	umull	r1, r3, r3, r2
 800455a:	095b      	lsrs	r3, r3, #5
 800455c:	2164      	movs	r1, #100	; 0x64
 800455e:	fb01 f303 	mul.w	r3, r1, r3
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	011b      	lsls	r3, r3, #4
 8004566:	3332      	adds	r3, #50	; 0x32
 8004568:	4a09      	ldr	r2, [pc, #36]	; (8004590 <UART_SetConfig+0x6f4>)
 800456a:	fba2 2303 	umull	r2, r3, r2, r3
 800456e:	095b      	lsrs	r3, r3, #5
 8004570:	f003 020f 	and.w	r2, r3, #15
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4442      	add	r2, r8
 800457a:	609a      	str	r2, [r3, #8]
}
 800457c:	e7ff      	b.n	800457e <UART_SetConfig+0x6e2>
 800457e:	bf00      	nop
 8004580:	3714      	adds	r7, #20
 8004582:	46bd      	mov	sp, r7
 8004584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004588:	40011000 	.word	0x40011000
 800458c:	40011400 	.word	0x40011400
 8004590:	51eb851f 	.word	0x51eb851f

08004594 <__libc_init_array>:
 8004594:	b570      	push	{r4, r5, r6, lr}
 8004596:	4e0d      	ldr	r6, [pc, #52]	; (80045cc <__libc_init_array+0x38>)
 8004598:	4c0d      	ldr	r4, [pc, #52]	; (80045d0 <__libc_init_array+0x3c>)
 800459a:	1ba4      	subs	r4, r4, r6
 800459c:	10a4      	asrs	r4, r4, #2
 800459e:	2500      	movs	r5, #0
 80045a0:	42a5      	cmp	r5, r4
 80045a2:	d109      	bne.n	80045b8 <__libc_init_array+0x24>
 80045a4:	4e0b      	ldr	r6, [pc, #44]	; (80045d4 <__libc_init_array+0x40>)
 80045a6:	4c0c      	ldr	r4, [pc, #48]	; (80045d8 <__libc_init_array+0x44>)
 80045a8:	f000 f820 	bl	80045ec <_init>
 80045ac:	1ba4      	subs	r4, r4, r6
 80045ae:	10a4      	asrs	r4, r4, #2
 80045b0:	2500      	movs	r5, #0
 80045b2:	42a5      	cmp	r5, r4
 80045b4:	d105      	bne.n	80045c2 <__libc_init_array+0x2e>
 80045b6:	bd70      	pop	{r4, r5, r6, pc}
 80045b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80045bc:	4798      	blx	r3
 80045be:	3501      	adds	r5, #1
 80045c0:	e7ee      	b.n	80045a0 <__libc_init_array+0xc>
 80045c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80045c6:	4798      	blx	r3
 80045c8:	3501      	adds	r5, #1
 80045ca:	e7f2      	b.n	80045b2 <__libc_init_array+0x1e>
 80045cc:	08004624 	.word	0x08004624
 80045d0:	08004624 	.word	0x08004624
 80045d4:	08004624 	.word	0x08004624
 80045d8:	08004628 	.word	0x08004628

080045dc <memset>:
 80045dc:	4402      	add	r2, r0
 80045de:	4603      	mov	r3, r0
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d100      	bne.n	80045e6 <memset+0xa>
 80045e4:	4770      	bx	lr
 80045e6:	f803 1b01 	strb.w	r1, [r3], #1
 80045ea:	e7f9      	b.n	80045e0 <memset+0x4>

080045ec <_init>:
 80045ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ee:	bf00      	nop
 80045f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045f2:	bc08      	pop	{r3}
 80045f4:	469e      	mov	lr, r3
 80045f6:	4770      	bx	lr

080045f8 <_fini>:
 80045f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045fa:	bf00      	nop
 80045fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045fe:	bc08      	pop	{r3}
 8004600:	469e      	mov	lr, r3
 8004602:	4770      	bx	lr
