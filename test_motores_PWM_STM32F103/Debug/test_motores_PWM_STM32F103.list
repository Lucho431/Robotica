
test_motores_PWM_STM32F103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cec  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002df8  08002df8  00012df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e1c  08002e1c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08002e1c  08002e1c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e1c  08002e1c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e1c  08002e1c  00012e1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e20  08002e20  00012e20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002e24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  20000010  08002e34  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d8  08002e34  000200d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000083e6  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001565  00000000  00000000  0002841f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000988  00000000  00000000  00029988  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008c0  00000000  00000000  0002a310  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016940  00000000  00000000  0002abd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007ad0  00000000  00000000  00041510  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008411f  00000000  00000000  00048fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cd0ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026a8  00000000  00000000  000cd17c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08002de0 	.word	0x08002de0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08002de0 	.word	0x08002de0

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0310 	add.w	r3, r7, #16
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000160:	4b34      	ldr	r3, [pc, #208]	; (8000234 <MX_GPIO_Init+0xe8>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a33      	ldr	r2, [pc, #204]	; (8000234 <MX_GPIO_Init+0xe8>)
 8000166:	f043 0310 	orr.w	r3, r3, #16
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b31      	ldr	r3, [pc, #196]	; (8000234 <MX_GPIO_Init+0xe8>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0310 	and.w	r3, r3, #16
 8000174:	60fb      	str	r3, [r7, #12]
 8000176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000178:	4b2e      	ldr	r3, [pc, #184]	; (8000234 <MX_GPIO_Init+0xe8>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a2d      	ldr	r2, [pc, #180]	; (8000234 <MX_GPIO_Init+0xe8>)
 800017e:	f043 0320 	orr.w	r3, r3, #32
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b2b      	ldr	r3, [pc, #172]	; (8000234 <MX_GPIO_Init+0xe8>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0320 	and.w	r3, r3, #32
 800018c:	60bb      	str	r3, [r7, #8]
 800018e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000190:	4b28      	ldr	r3, [pc, #160]	; (8000234 <MX_GPIO_Init+0xe8>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a27      	ldr	r2, [pc, #156]	; (8000234 <MX_GPIO_Init+0xe8>)
 8000196:	f043 0304 	orr.w	r3, r3, #4
 800019a:	6193      	str	r3, [r2, #24]
 800019c:	4b25      	ldr	r3, [pc, #148]	; (8000234 <MX_GPIO_Init+0xe8>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	f003 0304 	and.w	r3, r3, #4
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001a8:	4b22      	ldr	r3, [pc, #136]	; (8000234 <MX_GPIO_Init+0xe8>)
 80001aa:	699b      	ldr	r3, [r3, #24]
 80001ac:	4a21      	ldr	r2, [pc, #132]	; (8000234 <MX_GPIO_Init+0xe8>)
 80001ae:	f043 0308 	orr.w	r3, r3, #8
 80001b2:	6193      	str	r3, [r2, #24]
 80001b4:	4b1f      	ldr	r3, [pc, #124]	; (8000234 <MX_GPIO_Init+0xe8>)
 80001b6:	699b      	ldr	r3, [r3, #24]
 80001b8:	f003 0308 	and.w	r3, r3, #8
 80001bc:	603b      	str	r3, [r7, #0]
 80001be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80001c0:	2200      	movs	r2, #0
 80001c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001c6:	481c      	ldr	r0, [pc, #112]	; (8000238 <MX_GPIO_Init+0xec>)
 80001c8:	f000 ff93 	bl	80010f2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUT_in1_Pin|OUT_in2_Pin|OUT_in3_Pin|OUT_in4_Pin
 80001cc:	2200      	movs	r2, #0
 80001ce:	f648 4103 	movw	r1, #35843	; 0x8c03
 80001d2:	481a      	ldr	r0, [pc, #104]	; (800023c <MX_GPIO_Init+0xf0>)
 80001d4:	f000 ff8d 	bl	80010f2 <HAL_GPIO_WritePin>
                          |OUT_Trig_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80001d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001de:	2301      	movs	r3, #1
 80001e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001e2:	2300      	movs	r3, #0
 80001e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001e6:	2302      	movs	r3, #2
 80001e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80001ea:	f107 0310 	add.w	r3, r7, #16
 80001ee:	4619      	mov	r1, r3
 80001f0:	4811      	ldr	r0, [pc, #68]	; (8000238 <MX_GPIO_Init+0xec>)
 80001f2:	f000 fe0d 	bl	8000e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = IN_sensorL_Pin|IN_sensorR_Pin;
 80001f6:	2330      	movs	r3, #48	; 0x30
 80001f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80001fa:	2300      	movs	r3, #0
 80001fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80001fe:	2301      	movs	r3, #1
 8000200:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000202:	f107 0310 	add.w	r3, r7, #16
 8000206:	4619      	mov	r1, r3
 8000208:	480d      	ldr	r0, [pc, #52]	; (8000240 <MX_GPIO_Init+0xf4>)
 800020a:	f000 fe01 	bl	8000e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = OUT_in1_Pin|OUT_in2_Pin|OUT_in3_Pin|OUT_in4_Pin
 800020e:	f648 4303 	movw	r3, #35843	; 0x8c03
 8000212:	613b      	str	r3, [r7, #16]
                          |OUT_Trig_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000214:	2301      	movs	r3, #1
 8000216:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000218:	2300      	movs	r3, #0
 800021a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800021c:	2302      	movs	r3, #2
 800021e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000220:	f107 0310 	add.w	r3, r7, #16
 8000224:	4619      	mov	r1, r3
 8000226:	4805      	ldr	r0, [pc, #20]	; (800023c <MX_GPIO_Init+0xf0>)
 8000228:	f000 fdf2 	bl	8000e10 <HAL_GPIO_Init>

}
 800022c:	bf00      	nop
 800022e:	3720      	adds	r7, #32
 8000230:	46bd      	mov	sp, r7
 8000232:	bd80      	pop	{r7, pc}
 8000234:	40021000 	.word	0x40021000
 8000238:	40011000 	.word	0x40011000
 800023c:	40010c00 	.word	0x40010c00
 8000240:	40010800 	.word	0x40010800

08000244 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000248:	f000 fc72 	bl	8000b30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800024c:	f000 f96a 	bl	8000524 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000250:	f7ff ff7c 	bl	800014c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000254:	f000 fb5a 	bl	800090c <MX_TIM2_Init>
  MX_TIM1_Init();
 8000258:	f000 fa78 	bl	800074c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 1);
 800025c:	2201      	movs	r2, #1
 800025e:	2101      	movs	r1, #1
 8000260:	48a2      	ldr	r0, [pc, #648]	; (80004ec <main+0x2a8>)
 8000262:	f000 ff46 	bl	80010f2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_in2_GPIO_Port, OUT_in2_Pin, 1);
 8000266:	2201      	movs	r2, #1
 8000268:	2102      	movs	r1, #2
 800026a:	48a0      	ldr	r0, [pc, #640]	; (80004ec <main+0x2a8>)
 800026c:	f000 ff41 	bl	80010f2 <HAL_GPIO_WritePin>

  //HAL_TIM_Base_Start_IT(&htim2);
  //HAL_TIM_Base_Start_IT(&htim3);

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000270:	2100      	movs	r1, #0
 8000272:	489f      	ldr	r0, [pc, #636]	; (80004f0 <main+0x2ac>)
 8000274:	f001 fbe8 	bl	8001a48 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000278:	2104      	movs	r1, #4
 800027a:	489d      	ldr	r0, [pc, #628]	; (80004f0 <main+0x2ac>)
 800027c:	f001 fbe4 	bl	8001a48 <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_3);
 8000280:	2108      	movs	r1, #8
 8000282:	489b      	ldr	r0, [pc, #620]	; (80004f0 <main+0x2ac>)
 8000284:	f001 fcda 	bl	8001c3c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_4);
 8000288:	210c      	movs	r1, #12
 800028a:	4899      	ldr	r0, [pc, #612]	; (80004f0 <main+0x2ac>)
 800028c:	f001 fcd6 	bl	8001c3c <HAL_TIM_IC_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  switch (statusBurst){
 8000290:	4b98      	ldr	r3, [pc, #608]	; (80004f4 <main+0x2b0>)
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	2b01      	cmp	r3, #1
 8000296:	d033      	beq.n	8000300 <main+0xbc>
 8000298:	2b02      	cmp	r3, #2
 800029a:	d03c      	beq.n	8000316 <main+0xd2>
 800029c:	2b00      	cmp	r3, #0
 800029e:	d166      	bne.n	800036e <main+0x12a>
	  	  case 0:
	  		  HAL_GPIO_WritePin(OUT_Trig_GPIO_Port, OUT_Trig_Pin, 1);
 80002a0:	2201      	movs	r2, #1
 80002a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002a6:	4891      	ldr	r0, [pc, #580]	; (80004ec <main+0x2a8>)
 80002a8:	f000 ff23 	bl	80010f2 <HAL_GPIO_WritePin>

	  		  delayTrig = 10 + (uint8_t)__HAL_TIM_GET_COUNTER (&htim1);
 80002ac:	4b90      	ldr	r3, [pc, #576]	; (80004f0 <main+0x2ac>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002b2:	b2db      	uxtb	r3, r3
 80002b4:	330a      	adds	r3, #10
 80002b6:	b2da      	uxtb	r2, r3
 80002b8:	4b8f      	ldr	r3, [pc, #572]	; (80004f8 <main+0x2b4>)
 80002ba:	701a      	strb	r2, [r3, #0]
	  		  if (delayTrig > 32){
 80002bc:	4b8e      	ldr	r3, [pc, #568]	; (80004f8 <main+0x2b4>)
 80002be:	781b      	ldrb	r3, [r3, #0]
 80002c0:	2b20      	cmp	r3, #32
 80002c2:	d90b      	bls.n	80002dc <main+0x98>
	  			  delayTrig -= 32;
 80002c4:	4b8c      	ldr	r3, [pc, #560]	; (80004f8 <main+0x2b4>)
 80002c6:	781b      	ldrb	r3, [r3, #0]
 80002c8:	3b20      	subs	r3, #32
 80002ca:	b2da      	uxtb	r2, r3
 80002cc:	4b8a      	ldr	r3, [pc, #552]	; (80004f8 <main+0x2b4>)
 80002ce:	701a      	strb	r2, [r3, #0]
	  			  while (__HAL_TIM_GET_COUNTER (&htim1) > 32);
 80002d0:	bf00      	nop
 80002d2:	4b87      	ldr	r3, [pc, #540]	; (80004f0 <main+0x2ac>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002d8:	2b20      	cmp	r3, #32
 80002da:	d8fa      	bhi.n	80002d2 <main+0x8e>
	  		  }
	  		  while (__HAL_TIM_GET_COUNTER (&htim1) < delayTrig);
 80002dc:	bf00      	nop
 80002de:	4b84      	ldr	r3, [pc, #528]	; (80004f0 <main+0x2ac>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002e4:	4a84      	ldr	r2, [pc, #528]	; (80004f8 <main+0x2b4>)
 80002e6:	7812      	ldrb	r2, [r2, #0]
 80002e8:	4293      	cmp	r3, r2
 80002ea:	d3f8      	bcc.n	80002de <main+0x9a>

	  		  HAL_GPIO_WritePin(OUT_Trig_GPIO_Port, OUT_Trig_Pin, 0);
 80002ec:	2200      	movs	r2, #0
 80002ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002f2:	487e      	ldr	r0, [pc, #504]	; (80004ec <main+0x2a8>)
 80002f4:	f000 fefd 	bl	80010f2 <HAL_GPIO_WritePin>

	  		  statusBurst = 1;
 80002f8:	4b7e      	ldr	r3, [pc, #504]	; (80004f4 <main+0x2b0>)
 80002fa:	2201      	movs	r2, #1
 80002fc:	701a      	strb	r2, [r3, #0]
		  break;
 80002fe:	e036      	b.n	800036e <main+0x12a>
	  	  case 1:
	  		  if (flagEco != 0){
 8000300:	4b7e      	ldr	r3, [pc, #504]	; (80004fc <main+0x2b8>)
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	2b00      	cmp	r3, #0
 8000306:	d031      	beq.n	800036c <main+0x128>
	  			  flagEco = 0;
 8000308:	4b7c      	ldr	r3, [pc, #496]	; (80004fc <main+0x2b8>)
 800030a:	2200      	movs	r2, #0
 800030c:	701a      	strb	r2, [r3, #0]
	  			  statusBurst = 2;
 800030e:	4b79      	ldr	r3, [pc, #484]	; (80004f4 <main+0x2b0>)
 8000310:	2202      	movs	r2, #2
 8000312:	701a      	strb	r2, [r3, #0]
	  		  }
		  break;
 8000314:	e02a      	b.n	800036c <main+0x128>
	  	  case 2:
	  		  if (cuentasDesbordes != 0){
 8000316:	4b7a      	ldr	r3, [pc, #488]	; (8000500 <main+0x2bc>)
 8000318:	881b      	ldrh	r3, [r3, #0]
 800031a:	2b00      	cmp	r3, #0
 800031c:	d00e      	beq.n	800033c <main+0xf8>
				  cuentaPulsos = 42 * cuentasDesbordes + ic2 - ic1;
 800031e:	4b78      	ldr	r3, [pc, #480]	; (8000500 <main+0x2bc>)
 8000320:	881b      	ldrh	r3, [r3, #0]
 8000322:	461a      	mov	r2, r3
 8000324:	232a      	movs	r3, #42	; 0x2a
 8000326:	fb03 f302 	mul.w	r3, r3, r2
 800032a:	461a      	mov	r2, r3
 800032c:	4b75      	ldr	r3, [pc, #468]	; (8000504 <main+0x2c0>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	441a      	add	r2, r3
 8000332:	4b75      	ldr	r3, [pc, #468]	; (8000508 <main+0x2c4>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	1ad3      	subs	r3, r2, r3
 8000338:	4a74      	ldr	r2, [pc, #464]	; (800050c <main+0x2c8>)
 800033a:	6013      	str	r3, [r2, #0]
			  }

			  if (cuentaPulsos < 25000){
 800033c:	4b73      	ldr	r3, [pc, #460]	; (800050c <main+0x2c8>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	f246 12a7 	movw	r2, #24999	; 0x61a7
 8000344:	4293      	cmp	r3, r2
 8000346:	d80d      	bhi.n	8000364 <main+0x120>
				  distancia = cuentaPulsos * 34 / 2000;
 8000348:	4b70      	ldr	r3, [pc, #448]	; (800050c <main+0x2c8>)
 800034a:	681a      	ldr	r2, [r3, #0]
 800034c:	4613      	mov	r3, r2
 800034e:	011b      	lsls	r3, r3, #4
 8000350:	4413      	add	r3, r2
 8000352:	005b      	lsls	r3, r3, #1
 8000354:	461a      	mov	r2, r3
 8000356:	4b6e      	ldr	r3, [pc, #440]	; (8000510 <main+0x2cc>)
 8000358:	fba3 2302 	umull	r2, r3, r3, r2
 800035c:	09db      	lsrs	r3, r3, #7
 800035e:	b29a      	uxth	r2, r3
 8000360:	4b6c      	ldr	r3, [pc, #432]	; (8000514 <main+0x2d0>)
 8000362:	801a      	strh	r2, [r3, #0]
			  }

			  statusBurst = 0;
 8000364:	4b63      	ldr	r3, [pc, #396]	; (80004f4 <main+0x2b0>)
 8000366:	2200      	movs	r2, #0
 8000368:	701a      	strb	r2, [r3, #0]
		  break;
 800036a:	e000      	b.n	800036e <main+0x12a>
		  break;
 800036c:	bf00      	nop
	  } //fin switch (statusBurst)


	  //TIM2->CCR1;

	  sensores_dist = (HAL_GPIO_ReadPin(IN_sensorL_GPIO_Port, IN_sensorL_Pin)) << 0b01;
 800036e:	2110      	movs	r1, #16
 8000370:	4869      	ldr	r0, [pc, #420]	; (8000518 <main+0x2d4>)
 8000372:	f000 fea7 	bl	80010c4 <HAL_GPIO_ReadPin>
 8000376:	4603      	mov	r3, r0
 8000378:	005b      	lsls	r3, r3, #1
 800037a:	b2da      	uxtb	r2, r3
 800037c:	4b67      	ldr	r3, [pc, #412]	; (800051c <main+0x2d8>)
 800037e:	701a      	strb	r2, [r3, #0]
	  sensores_dist += HAL_GPIO_ReadPin(IN_sensorR_GPIO_Port, IN_sensorR_Pin);
 8000380:	2120      	movs	r1, #32
 8000382:	4865      	ldr	r0, [pc, #404]	; (8000518 <main+0x2d4>)
 8000384:	f000 fe9e 	bl	80010c4 <HAL_GPIO_ReadPin>
 8000388:	4603      	mov	r3, r0
 800038a:	461a      	mov	r2, r3
 800038c:	4b63      	ldr	r3, [pc, #396]	; (800051c <main+0x2d8>)
 800038e:	781b      	ldrb	r3, [r3, #0]
 8000390:	4413      	add	r3, r2
 8000392:	b2da      	uxtb	r2, r3
 8000394:	4b61      	ldr	r3, [pc, #388]	; (800051c <main+0x2d8>)
 8000396:	701a      	strb	r2, [r3, #0]

	  switch (sensores_dist) {
 8000398:	4b60      	ldr	r3, [pc, #384]	; (800051c <main+0x2d8>)
 800039a:	781b      	ldrb	r3, [r3, #0]
 800039c:	2b03      	cmp	r3, #3
 800039e:	d81a      	bhi.n	80003d6 <main+0x192>
 80003a0:	a201      	add	r2, pc, #4	; (adr r2, 80003a8 <main+0x164>)
 80003a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003a6:	bf00      	nop
 80003a8:	080003b9 	.word	0x080003b9
 80003ac:	080003d1 	.word	0x080003d1
 80003b0:	080003c1 	.word	0x080003c1
 80003b4:	080003c9 	.word	0x080003c9
		case 0b0:
			status_movimiento = ROTANDO_DER;
 80003b8:	4b59      	ldr	r3, [pc, #356]	; (8000520 <main+0x2dc>)
 80003ba:	2204      	movs	r2, #4
 80003bc:	701a      	strb	r2, [r3, #0]
		break;
 80003be:	e00b      	b.n	80003d8 <main+0x194>
		case 0b10:
			status_movimiento = ROTANDO_DER;
 80003c0:	4b57      	ldr	r3, [pc, #348]	; (8000520 <main+0x2dc>)
 80003c2:	2204      	movs	r2, #4
 80003c4:	701a      	strb	r2, [r3, #0]
		break;
 80003c6:	e007      	b.n	80003d8 <main+0x194>
		case 0b11:
			status_movimiento = AVANZANDO;
 80003c8:	4b55      	ldr	r3, [pc, #340]	; (8000520 <main+0x2dc>)
 80003ca:	2201      	movs	r2, #1
 80003cc:	701a      	strb	r2, [r3, #0]
		break;
 80003ce:	e003      	b.n	80003d8 <main+0x194>
		case 0b01:
			status_movimiento = ROTANDO_IZQ;
 80003d0:	4b53      	ldr	r3, [pc, #332]	; (8000520 <main+0x2dc>)
 80003d2:	2203      	movs	r2, #3
 80003d4:	701a      	strb	r2, [r3, #0]
		default:
		break;
 80003d6:	bf00      	nop
	} //fin switch sensopres_dist


	  switch (status_movimiento) {
 80003d8:	4b51      	ldr	r3, [pc, #324]	; (8000520 <main+0x2dc>)
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	2b05      	cmp	r3, #5
 80003de:	f200 8082 	bhi.w	80004e6 <main+0x2a2>
 80003e2:	a201      	add	r2, pc, #4	; (adr r2, 80003e8 <main+0x1a4>)
 80003e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003e8:	08000401 	.word	0x08000401
 80003ec:	0800042f 	.word	0x0800042f
 80003f0:	080004b9 	.word	0x080004b9
 80003f4:	0800045d 	.word	0x0800045d
 80003f8:	0800048b 	.word	0x0800048b
 80003fc:	080004e7 	.word	0x080004e7
		case QUIETO:
			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 0);
 8000400:	2200      	movs	r2, #0
 8000402:	2101      	movs	r1, #1
 8000404:	4839      	ldr	r0, [pc, #228]	; (80004ec <main+0x2a8>)
 8000406:	f000 fe74 	bl	80010f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in4_Pin, 0);
 800040a:	2200      	movs	r2, #0
 800040c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000410:	4836      	ldr	r0, [pc, #216]	; (80004ec <main+0x2a8>)
 8000412:	f000 fe6e 	bl	80010f2 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in2_Pin, 0);
 8000416:	2200      	movs	r2, #0
 8000418:	2102      	movs	r1, #2
 800041a:	4834      	ldr	r0, [pc, #208]	; (80004ec <main+0x2a8>)
 800041c:	f000 fe69 	bl	80010f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in3_Pin, 0);
 8000420:	2200      	movs	r2, #0
 8000422:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000426:	4831      	ldr	r0, [pc, #196]	; (80004ec <main+0x2a8>)
 8000428:	f000 fe63 	bl	80010f2 <HAL_GPIO_WritePin>
		break;
 800042c:	e05c      	b.n	80004e8 <main+0x2a4>
		case AVANZANDO:
			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 1);
 800042e:	2201      	movs	r2, #1
 8000430:	2101      	movs	r1, #1
 8000432:	482e      	ldr	r0, [pc, #184]	; (80004ec <main+0x2a8>)
 8000434:	f000 fe5d 	bl	80010f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in4_Pin, 1);
 8000438:	2201      	movs	r2, #1
 800043a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800043e:	482b      	ldr	r0, [pc, #172]	; (80004ec <main+0x2a8>)
 8000440:	f000 fe57 	bl	80010f2 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in2_Pin, 0);
 8000444:	2200      	movs	r2, #0
 8000446:	2102      	movs	r1, #2
 8000448:	4828      	ldr	r0, [pc, #160]	; (80004ec <main+0x2a8>)
 800044a:	f000 fe52 	bl	80010f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in3_Pin, 0);
 800044e:	2200      	movs	r2, #0
 8000450:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000454:	4825      	ldr	r0, [pc, #148]	; (80004ec <main+0x2a8>)
 8000456:	f000 fe4c 	bl	80010f2 <HAL_GPIO_WritePin>
		break;
 800045a:	e045      	b.n	80004e8 <main+0x2a4>
		case ROTANDO_IZQ:
			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 0);
 800045c:	2200      	movs	r2, #0
 800045e:	2101      	movs	r1, #1
 8000460:	4822      	ldr	r0, [pc, #136]	; (80004ec <main+0x2a8>)
 8000462:	f000 fe46 	bl	80010f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in4_Pin, 1);
 8000466:	2201      	movs	r2, #1
 8000468:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800046c:	481f      	ldr	r0, [pc, #124]	; (80004ec <main+0x2a8>)
 800046e:	f000 fe40 	bl	80010f2 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in2_Pin, 1);
 8000472:	2201      	movs	r2, #1
 8000474:	2102      	movs	r1, #2
 8000476:	481d      	ldr	r0, [pc, #116]	; (80004ec <main+0x2a8>)
 8000478:	f000 fe3b 	bl	80010f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in3_Pin, 0);
 800047c:	2200      	movs	r2, #0
 800047e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000482:	481a      	ldr	r0, [pc, #104]	; (80004ec <main+0x2a8>)
 8000484:	f000 fe35 	bl	80010f2 <HAL_GPIO_WritePin>
		break;
 8000488:	e02e      	b.n	80004e8 <main+0x2a4>
		case ROTANDO_DER:
			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 1);
 800048a:	2201      	movs	r2, #1
 800048c:	2101      	movs	r1, #1
 800048e:	4817      	ldr	r0, [pc, #92]	; (80004ec <main+0x2a8>)
 8000490:	f000 fe2f 	bl	80010f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in4_Pin, 0);
 8000494:	2200      	movs	r2, #0
 8000496:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800049a:	4814      	ldr	r0, [pc, #80]	; (80004ec <main+0x2a8>)
 800049c:	f000 fe29 	bl	80010f2 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in2_Pin, 0);
 80004a0:	2200      	movs	r2, #0
 80004a2:	2102      	movs	r1, #2
 80004a4:	4811      	ldr	r0, [pc, #68]	; (80004ec <main+0x2a8>)
 80004a6:	f000 fe24 	bl	80010f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in3_Pin, 1);
 80004aa:	2201      	movs	r2, #1
 80004ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004b0:	480e      	ldr	r0, [pc, #56]	; (80004ec <main+0x2a8>)
 80004b2:	f000 fe1e 	bl	80010f2 <HAL_GPIO_WritePin>
		break;
 80004b6:	e017      	b.n	80004e8 <main+0x2a4>
		case RETROCEDIENDO:
			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in1_Pin, 0);
 80004b8:	2200      	movs	r2, #0
 80004ba:	2101      	movs	r1, #1
 80004bc:	480b      	ldr	r0, [pc, #44]	; (80004ec <main+0x2a8>)
 80004be:	f000 fe18 	bl	80010f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in4_Pin, 0);
 80004c2:	2200      	movs	r2, #0
 80004c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004c8:	4808      	ldr	r0, [pc, #32]	; (80004ec <main+0x2a8>)
 80004ca:	f000 fe12 	bl	80010f2 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in2_Pin, 1);
 80004ce:	2201      	movs	r2, #1
 80004d0:	2102      	movs	r1, #2
 80004d2:	4806      	ldr	r0, [pc, #24]	; (80004ec <main+0x2a8>)
 80004d4:	f000 fe0d 	bl	80010f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_in1_GPIO_Port, OUT_in3_Pin, 1);
 80004d8:	2201      	movs	r2, #1
 80004da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004de:	4803      	ldr	r0, [pc, #12]	; (80004ec <main+0x2a8>)
 80004e0:	f000 fe07 	bl	80010f2 <HAL_GPIO_WritePin>
		break;
 80004e4:	e000      	b.n	80004e8 <main+0x2a4>

		break;
		case PIVOTE_DER_AVAN:

		default:
		break;
 80004e6:	bf00      	nop
	  switch (statusBurst){
 80004e8:	e6d2      	b.n	8000290 <main+0x4c>
 80004ea:	bf00      	nop
 80004ec:	40010c00 	.word	0x40010c00
 80004f0:	20000044 	.word	0x20000044
 80004f4:	20000040 	.word	0x20000040
 80004f8:	20000041 	.word	0x20000041
 80004fc:	20000042 	.word	0x20000042
 8000500:	20000038 	.word	0x20000038
 8000504:	20000034 	.word	0x20000034
 8000508:	20000030 	.word	0x20000030
 800050c:	2000003c 	.word	0x2000003c
 8000510:	10624dd3 	.word	0x10624dd3
 8000514:	20000000 	.word	0x20000000
 8000518:	40010800 	.word	0x40010800
 800051c:	2000002d 	.word	0x2000002d
 8000520:	2000002c 	.word	0x2000002c

08000524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b090      	sub	sp, #64	; 0x40
 8000528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052a:	f107 0318 	add.w	r3, r7, #24
 800052e:	2228      	movs	r2, #40	; 0x28
 8000530:	2100      	movs	r1, #0
 8000532:	4618      	mov	r0, r3
 8000534:	f002 fc4c 	bl	8002dd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000538:	1d3b      	adds	r3, r7, #4
 800053a:	2200      	movs	r2, #0
 800053c:	601a      	str	r2, [r3, #0]
 800053e:	605a      	str	r2, [r3, #4]
 8000540:	609a      	str	r2, [r3, #8]
 8000542:	60da      	str	r2, [r3, #12]
 8000544:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000546:	2301      	movs	r3, #1
 8000548:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800054a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800054e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000550:	2300      	movs	r3, #0
 8000552:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000554:	2301      	movs	r3, #1
 8000556:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000558:	2302      	movs	r3, #2
 800055a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800055c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000560:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000562:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000566:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000568:	f107 0318 	add.w	r3, r7, #24
 800056c:	4618      	mov	r0, r3
 800056e:	f000 fdd9 	bl	8001124 <HAL_RCC_OscConfig>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000578:	f000 f862 	bl	8000640 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800057c:	230f      	movs	r3, #15
 800057e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000580:	2302      	movs	r3, #2
 8000582:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000584:	2300      	movs	r3, #0
 8000586:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000588:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800058c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800058e:	2300      	movs	r3, #0
 8000590:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000592:	1d3b      	adds	r3, r7, #4
 8000594:	2102      	movs	r1, #2
 8000596:	4618      	mov	r0, r3
 8000598:	f001 f844 	bl	8001624 <HAL_RCC_ClockConfig>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80005a2:	f000 f84d 	bl	8000640 <Error_Handler>
  }
}
 80005a6:	bf00      	nop
 80005a8:	3740      	adds	r7, #64	; 0x40
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
	...

080005b0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	if (htim->Instance==TIM1){
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a06      	ldr	r2, [pc, #24]	; (80005d8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80005be:	4293      	cmp	r3, r2
 80005c0:	d105      	bne.n	80005ce <HAL_TIM_PeriodElapsedCallback+0x1e>
		desbordeTIM1++;
 80005c2:	4b06      	ldr	r3, [pc, #24]	; (80005dc <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80005c4:	881b      	ldrh	r3, [r3, #0]
 80005c6:	3301      	adds	r3, #1
 80005c8:	b29a      	uxth	r2, r3
 80005ca:	4b04      	ldr	r3, [pc, #16]	; (80005dc <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80005cc:	801a      	strh	r2, [r3, #0]
	}

}
 80005ce:	bf00      	nop
 80005d0:	370c      	adds	r7, #12
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bc80      	pop	{r7}
 80005d6:	4770      	bx	lr
 80005d8:	40012c00 	.word	0x40012c00
 80005dc:	2000002e 	.word	0x2000002e

080005e0 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3){
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	7f1b      	ldrb	r3, [r3, #28]
 80005ec:	2b04      	cmp	r3, #4
 80005ee:	d107      	bne.n	8000600 <HAL_TIM_IC_CaptureCallback+0x20>
		//HAL_TIM_ReadCapturedValue(htim, HAL_TIM_ACTIVE_CHANNEL_3);
		ic1 = htim->Instance->CCR3;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80005f6:	4a0d      	ldr	r2, [pc, #52]	; (800062c <HAL_TIM_IC_CaptureCallback+0x4c>)
 80005f8:	6013      	str	r3, [r2, #0]
		desbordeTIM1 = 0;
 80005fa:	4b0d      	ldr	r3, [pc, #52]	; (8000630 <HAL_TIM_IC_CaptureCallback+0x50>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	801a      	strh	r2, [r3, #0]
	}

	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4){
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	7f1b      	ldrb	r3, [r3, #28]
 8000604:	2b08      	cmp	r3, #8
 8000606:	d10b      	bne.n	8000620 <HAL_TIM_IC_CaptureCallback+0x40>
		ic2 = htim->Instance->CCR4;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060e:	4a09      	ldr	r2, [pc, #36]	; (8000634 <HAL_TIM_IC_CaptureCallback+0x54>)
 8000610:	6013      	str	r3, [r2, #0]
		cuentasDesbordes = desbordeTIM1;
 8000612:	4b07      	ldr	r3, [pc, #28]	; (8000630 <HAL_TIM_IC_CaptureCallback+0x50>)
 8000614:	881a      	ldrh	r2, [r3, #0]
 8000616:	4b08      	ldr	r3, [pc, #32]	; (8000638 <HAL_TIM_IC_CaptureCallback+0x58>)
 8000618:	801a      	strh	r2, [r3, #0]
		flagEco = 1;
 800061a:	4b08      	ldr	r3, [pc, #32]	; (800063c <HAL_TIM_IC_CaptureCallback+0x5c>)
 800061c:	2201      	movs	r2, #1
 800061e:	701a      	strb	r2, [r3, #0]
	}
}
 8000620:	bf00      	nop
 8000622:	370c      	adds	r7, #12
 8000624:	46bd      	mov	sp, r7
 8000626:	bc80      	pop	{r7}
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	20000030 	.word	0x20000030
 8000630:	2000002e 	.word	0x2000002e
 8000634:	20000034 	.word	0x20000034
 8000638:	20000038 	.word	0x20000038
 800063c:	20000042 	.word	0x20000042

08000640 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000644:	bf00      	nop
 8000646:	46bd      	mov	sp, r7
 8000648:	bc80      	pop	{r7}
 800064a:	4770      	bx	lr

0800064c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800064c:	b480      	push	{r7}
 800064e:	b085      	sub	sp, #20
 8000650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000652:	4b15      	ldr	r3, [pc, #84]	; (80006a8 <HAL_MspInit+0x5c>)
 8000654:	699b      	ldr	r3, [r3, #24]
 8000656:	4a14      	ldr	r2, [pc, #80]	; (80006a8 <HAL_MspInit+0x5c>)
 8000658:	f043 0301 	orr.w	r3, r3, #1
 800065c:	6193      	str	r3, [r2, #24]
 800065e:	4b12      	ldr	r3, [pc, #72]	; (80006a8 <HAL_MspInit+0x5c>)
 8000660:	699b      	ldr	r3, [r3, #24]
 8000662:	f003 0301 	and.w	r3, r3, #1
 8000666:	60bb      	str	r3, [r7, #8]
 8000668:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800066a:	4b0f      	ldr	r3, [pc, #60]	; (80006a8 <HAL_MspInit+0x5c>)
 800066c:	69db      	ldr	r3, [r3, #28]
 800066e:	4a0e      	ldr	r2, [pc, #56]	; (80006a8 <HAL_MspInit+0x5c>)
 8000670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000674:	61d3      	str	r3, [r2, #28]
 8000676:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <HAL_MspInit+0x5c>)
 8000678:	69db      	ldr	r3, [r3, #28]
 800067a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000682:	4b0a      	ldr	r3, [pc, #40]	; (80006ac <HAL_MspInit+0x60>)
 8000684:	685b      	ldr	r3, [r3, #4]
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000696:	60fb      	str	r3, [r7, #12]
 8000698:	4a04      	ldr	r2, [pc, #16]	; (80006ac <HAL_MspInit+0x60>)
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800069e:	bf00      	nop
 80006a0:	3714      	adds	r7, #20
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bc80      	pop	{r7}
 80006a6:	4770      	bx	lr
 80006a8:	40021000 	.word	0x40021000
 80006ac:	40010000 	.word	0x40010000

080006b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80006b4:	bf00      	nop
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bc80      	pop	{r7}
 80006ba:	4770      	bx	lr

080006bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006c0:	e7fe      	b.n	80006c0 <HardFault_Handler+0x4>

080006c2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006c2:	b480      	push	{r7}
 80006c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006c6:	e7fe      	b.n	80006c6 <MemManage_Handler+0x4>

080006c8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006cc:	e7fe      	b.n	80006cc <BusFault_Handler+0x4>

080006ce <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006ce:	b480      	push	{r7}
 80006d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006d2:	e7fe      	b.n	80006d2 <UsageFault_Handler+0x4>

080006d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006d8:	bf00      	nop
 80006da:	46bd      	mov	sp, r7
 80006dc:	bc80      	pop	{r7}
 80006de:	4770      	bx	lr

080006e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006e4:	bf00      	nop
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bc80      	pop	{r7}
 80006ea:	4770      	bx	lr

080006ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006f0:	bf00      	nop
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bc80      	pop	{r7}
 80006f6:	4770      	bx	lr

080006f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006fc:	f000 fa5e 	bl	8000bbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000700:	bf00      	nop
 8000702:	bd80      	pop	{r7, pc}

08000704 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000708:	4802      	ldr	r0, [pc, #8]	; (8000714 <TIM1_UP_IRQHandler+0x10>)
 800070a:	f001 fb9d 	bl	8001e48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	20000044 	.word	0x20000044

08000718 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800071c:	4802      	ldr	r0, [pc, #8]	; (8000728 <TIM1_CC_IRQHandler+0x10>)
 800071e:	f001 fb93 	bl	8001e48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	20000044 	.word	0x20000044

0800072c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000730:	4802      	ldr	r0, [pc, #8]	; (800073c <TIM2_IRQHandler+0x10>)
 8000732:	f001 fb89 	bl	8001e48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	2000008c 	.word	0x2000008c

08000740 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000744:	bf00      	nop
 8000746:	46bd      	mov	sp, r7
 8000748:	bc80      	pop	{r7}
 800074a:	4770      	bx	lr

0800074c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b09a      	sub	sp, #104	; 0x68
 8000750:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000752:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]
 800075e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000760:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800076a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	605a      	str	r2, [r3, #4]
 8000774:	609a      	str	r2, [r3, #8]
 8000776:	60da      	str	r2, [r3, #12]
 8000778:	611a      	str	r2, [r3, #16]
 800077a:	615a      	str	r2, [r3, #20]
 800077c:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800077e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	60da      	str	r2, [r3, #12]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800078c:	1d3b      	adds	r3, r7, #4
 800078e:	2220      	movs	r2, #32
 8000790:	2100      	movs	r1, #0
 8000792:	4618      	mov	r0, r3
 8000794:	f002 fb1c 	bl	8002dd0 <memset>

  htim1.Instance = TIM1;
 8000798:	4b5a      	ldr	r3, [pc, #360]	; (8000904 <MX_TIM1_Init+0x1b8>)
 800079a:	4a5b      	ldr	r2, [pc, #364]	; (8000908 <MX_TIM1_Init+0x1bc>)
 800079c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 800079e:	4b59      	ldr	r3, [pc, #356]	; (8000904 <MX_TIM1_Init+0x1b8>)
 80007a0:	2247      	movs	r2, #71	; 0x47
 80007a2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007a4:	4b57      	ldr	r3, [pc, #348]	; (8000904 <MX_TIM1_Init+0x1b8>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 42-1;
 80007aa:	4b56      	ldr	r3, [pc, #344]	; (8000904 <MX_TIM1_Init+0x1b8>)
 80007ac:	2229      	movs	r2, #41	; 0x29
 80007ae:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007b0:	4b54      	ldr	r3, [pc, #336]	; (8000904 <MX_TIM1_Init+0x1b8>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007b6:	4b53      	ldr	r3, [pc, #332]	; (8000904 <MX_TIM1_Init+0x1b8>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007bc:	4b51      	ldr	r3, [pc, #324]	; (8000904 <MX_TIM1_Init+0x1b8>)
 80007be:	2200      	movs	r2, #0
 80007c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007c2:	4850      	ldr	r0, [pc, #320]	; (8000904 <MX_TIM1_Init+0x1b8>)
 80007c4:	f001 f898 	bl	80018f8 <HAL_TIM_Base_Init>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_TIM1_Init+0x86>
  {
    Error_Handler();
 80007ce:	f7ff ff37 	bl	8000640 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007d6:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007d8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80007dc:	4619      	mov	r1, r3
 80007de:	4849      	ldr	r0, [pc, #292]	; (8000904 <MX_TIM1_Init+0x1b8>)
 80007e0:	f001 fd8c 	bl	80022fc <HAL_TIM_ConfigClockSource>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 80007ea:	f7ff ff29 	bl	8000640 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007ee:	4845      	ldr	r0, [pc, #276]	; (8000904 <MX_TIM1_Init+0x1b8>)
 80007f0:	f001 f8d1 	bl	8001996 <HAL_TIM_PWM_Init>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_TIM1_Init+0xb2>
  {
    Error_Handler();
 80007fa:	f7ff ff21 	bl	8000640 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80007fe:	4841      	ldr	r0, [pc, #260]	; (8000904 <MX_TIM1_Init+0x1b8>)
 8000800:	f001 f9c4 	bl	8001b8c <HAL_TIM_IC_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800080a:	f7ff ff19 	bl	8000640 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800080e:	2300      	movs	r3, #0
 8000810:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000812:	2300      	movs	r3, #0
 8000814:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000816:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800081a:	4619      	mov	r1, r3
 800081c:	4839      	ldr	r0, [pc, #228]	; (8000904 <MX_TIM1_Init+0x1b8>)
 800081e:	f002 f9f1 	bl	8002c04 <HAL_TIMEx_MasterConfigSynchronization>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_TIM1_Init+0xe0>
  {
    Error_Handler();
 8000828:	f7ff ff0a 	bl	8000640 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800082c:	2360      	movs	r3, #96	; 0x60
 800082e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 31-1;
 8000830:	231e      	movs	r3, #30
 8000832:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000834:	2300      	movs	r3, #0
 8000836:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000838:	2300      	movs	r3, #0
 800083a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800083c:	2300      	movs	r3, #0
 800083e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000840:	2300      	movs	r3, #0
 8000842:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000844:	2300      	movs	r3, #0
 8000846:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000848:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800084c:	2200      	movs	r2, #0
 800084e:	4619      	mov	r1, r3
 8000850:	482c      	ldr	r0, [pc, #176]	; (8000904 <MX_TIM1_Init+0x1b8>)
 8000852:	f001 fc95 	bl	8002180 <HAL_TIM_PWM_ConfigChannel>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 800085c:	f7ff fef0 	bl	8000640 <Error_Handler>
  }
  sConfigOC.Pulse = 32-1;
 8000860:	231f      	movs	r3, #31
 8000862:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000864:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000868:	2204      	movs	r2, #4
 800086a:	4619      	mov	r1, r3
 800086c:	4825      	ldr	r0, [pc, #148]	; (8000904 <MX_TIM1_Init+0x1b8>)
 800086e:	f001 fc87 	bl	8002180 <HAL_TIM_PWM_ConfigChannel>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8000878:	f7ff fee2 	bl	8000640 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800087c:	2300      	movs	r3, #0
 800087e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000880:	2301      	movs	r3, #1
 8000882:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000884:	2300      	movs	r3, #0
 8000886:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigIC.ICFilter = 0;
 8000888:	2300      	movs	r3, #0
 800088a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800088c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000890:	2208      	movs	r2, #8
 8000892:	4619      	mov	r1, r3
 8000894:	481b      	ldr	r0, [pc, #108]	; (8000904 <MX_TIM1_Init+0x1b8>)
 8000896:	f001 fbdf 	bl	8002058 <HAL_TIM_IC_ConfigChannel>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 80008a0:	f7ff fece 	bl	8000640 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80008a4:	2302      	movs	r3, #2
 80008a6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80008a8:	2302      	movs	r3, #2
 80008aa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80008ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008b0:	220c      	movs	r2, #12
 80008b2:	4619      	mov	r1, r3
 80008b4:	4813      	ldr	r0, [pc, #76]	; (8000904 <MX_TIM1_Init+0x1b8>)
 80008b6:	f001 fbcf 	bl	8002058 <HAL_TIM_IC_ConfigChannel>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_TIM1_Init+0x178>
  {
    Error_Handler();
 80008c0:	f7ff febe 	bl	8000640 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008c4:	2300      	movs	r3, #0
 80008c6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008c8:	2300      	movs	r3, #0
 80008ca:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008cc:	2300      	movs	r3, #0
 80008ce:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008d0:	2300      	movs	r3, #0
 80008d2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008d4:	2300      	movs	r3, #0
 80008d6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008dc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008de:	2300      	movs	r3, #0
 80008e0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	4619      	mov	r1, r3
 80008e6:	4807      	ldr	r0, [pc, #28]	; (8000904 <MX_TIM1_Init+0x1b8>)
 80008e8:	f002 f9ea 	bl	8002cc0 <HAL_TIMEx_ConfigBreakDeadTime>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_TIM1_Init+0x1aa>
  {
    Error_Handler();
 80008f2:	f7ff fea5 	bl	8000640 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 80008f6:	4803      	ldr	r0, [pc, #12]	; (8000904 <MX_TIM1_Init+0x1b8>)
 80008f8:	f000 f8c0 	bl	8000a7c <HAL_TIM_MspPostInit>

}
 80008fc:	bf00      	nop
 80008fe:	3768      	adds	r7, #104	; 0x68
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	20000044 	.word	0x20000044
 8000908:	40012c00 	.word	0x40012c00

0800090c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b086      	sub	sp, #24
 8000910:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000912:	f107 0308 	add.w	r3, r7, #8
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]
 800091e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000920:	463b      	mov	r3, r7
 8000922:	2200      	movs	r2, #0
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8000928:	4b1e      	ldr	r3, [pc, #120]	; (80009a4 <MX_TIM2_Init+0x98>)
 800092a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800092e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 720-1;
 8000930:	4b1c      	ldr	r3, [pc, #112]	; (80009a4 <MX_TIM2_Init+0x98>)
 8000932:	f240 22cf 	movw	r2, #719	; 0x2cf
 8000936:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000938:	4b1a      	ldr	r3, [pc, #104]	; (80009a4 <MX_TIM2_Init+0x98>)
 800093a:	2200      	movs	r2, #0
 800093c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 800093e:	4b19      	ldr	r3, [pc, #100]	; (80009a4 <MX_TIM2_Init+0x98>)
 8000940:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000944:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000946:	4b17      	ldr	r3, [pc, #92]	; (80009a4 <MX_TIM2_Init+0x98>)
 8000948:	2200      	movs	r2, #0
 800094a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800094c:	4b15      	ldr	r3, [pc, #84]	; (80009a4 <MX_TIM2_Init+0x98>)
 800094e:	2200      	movs	r2, #0
 8000950:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000952:	4814      	ldr	r0, [pc, #80]	; (80009a4 <MX_TIM2_Init+0x98>)
 8000954:	f000 ffd0 	bl	80018f8 <HAL_TIM_Base_Init>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800095e:	f7ff fe6f 	bl	8000640 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000962:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000966:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000968:	f107 0308 	add.w	r3, r7, #8
 800096c:	4619      	mov	r1, r3
 800096e:	480d      	ldr	r0, [pc, #52]	; (80009a4 <MX_TIM2_Init+0x98>)
 8000970:	f001 fcc4 	bl	80022fc <HAL_TIM_ConfigClockSource>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800097a:	f7ff fe61 	bl	8000640 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800097e:	2300      	movs	r3, #0
 8000980:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000982:	2300      	movs	r3, #0
 8000984:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000986:	463b      	mov	r3, r7
 8000988:	4619      	mov	r1, r3
 800098a:	4806      	ldr	r0, [pc, #24]	; (80009a4 <MX_TIM2_Init+0x98>)
 800098c:	f002 f93a 	bl	8002c04 <HAL_TIMEx_MasterConfigSynchronization>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000996:	f7ff fe53 	bl	8000640 <Error_Handler>
  }

}
 800099a:	bf00      	nop
 800099c:	3718      	adds	r7, #24
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	2000008c 	.word	0x2000008c

080009a8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08a      	sub	sp, #40	; 0x28
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b0:	f107 0318 	add.w	r3, r7, #24
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM1)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4a2b      	ldr	r2, [pc, #172]	; (8000a70 <HAL_TIM_Base_MspInit+0xc8>)
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d135      	bne.n	8000a34 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80009c8:	4b2a      	ldr	r3, [pc, #168]	; (8000a74 <HAL_TIM_Base_MspInit+0xcc>)
 80009ca:	699b      	ldr	r3, [r3, #24]
 80009cc:	4a29      	ldr	r2, [pc, #164]	; (8000a74 <HAL_TIM_Base_MspInit+0xcc>)
 80009ce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80009d2:	6193      	str	r3, [r2, #24]
 80009d4:	4b27      	ldr	r3, [pc, #156]	; (8000a74 <HAL_TIM_Base_MspInit+0xcc>)
 80009d6:	699b      	ldr	r3, [r3, #24]
 80009d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80009dc:	617b      	str	r3, [r7, #20]
 80009de:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e0:	4b24      	ldr	r3, [pc, #144]	; (8000a74 <HAL_TIM_Base_MspInit+0xcc>)
 80009e2:	699b      	ldr	r3, [r3, #24]
 80009e4:	4a23      	ldr	r2, [pc, #140]	; (8000a74 <HAL_TIM_Base_MspInit+0xcc>)
 80009e6:	f043 0304 	orr.w	r3, r3, #4
 80009ea:	6193      	str	r3, [r2, #24]
 80009ec:	4b21      	ldr	r3, [pc, #132]	; (8000a74 <HAL_TIM_Base_MspInit+0xcc>)
 80009ee:	699b      	ldr	r3, [r3, #24]
 80009f0:	f003 0304 	and.w	r3, r3, #4
 80009f4:	613b      	str	r3, [r7, #16]
 80009f6:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = IC_Eco_Pin;
 80009f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009fe:	2300      	movs	r3, #0
 8000a00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(IC_Eco_GPIO_Port, &GPIO_InitStruct);
 8000a06:	f107 0318 	add.w	r3, r7, #24
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	481a      	ldr	r0, [pc, #104]	; (8000a78 <HAL_TIM_Base_MspInit+0xd0>)
 8000a0e:	f000 f9ff 	bl	8000e10 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000a12:	2200      	movs	r2, #0
 8000a14:	2100      	movs	r1, #0
 8000a16:	2019      	movs	r0, #25
 8000a18:	f000 f9c3 	bl	8000da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000a1c:	2019      	movs	r0, #25
 8000a1e:	f000 f9dc 	bl	8000dda <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000a22:	2200      	movs	r2, #0
 8000a24:	2100      	movs	r1, #0
 8000a26:	201b      	movs	r0, #27
 8000a28:	f000 f9bb 	bl	8000da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000a2c:	201b      	movs	r0, #27
 8000a2e:	f000 f9d4 	bl	8000dda <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000a32:	e018      	b.n	8000a66 <HAL_TIM_Base_MspInit+0xbe>
  else if(tim_baseHandle->Instance==TIM2)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a3c:	d113      	bne.n	8000a66 <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a3e:	4b0d      	ldr	r3, [pc, #52]	; (8000a74 <HAL_TIM_Base_MspInit+0xcc>)
 8000a40:	69db      	ldr	r3, [r3, #28]
 8000a42:	4a0c      	ldr	r2, [pc, #48]	; (8000a74 <HAL_TIM_Base_MspInit+0xcc>)
 8000a44:	f043 0301 	orr.w	r3, r3, #1
 8000a48:	61d3      	str	r3, [r2, #28]
 8000a4a:	4b0a      	ldr	r3, [pc, #40]	; (8000a74 <HAL_TIM_Base_MspInit+0xcc>)
 8000a4c:	69db      	ldr	r3, [r3, #28]
 8000a4e:	f003 0301 	and.w	r3, r3, #1
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a56:	2200      	movs	r2, #0
 8000a58:	2100      	movs	r1, #0
 8000a5a:	201c      	movs	r0, #28
 8000a5c:	f000 f9a1 	bl	8000da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a60:	201c      	movs	r0, #28
 8000a62:	f000 f9ba 	bl	8000dda <HAL_NVIC_EnableIRQ>
}
 8000a66:	bf00      	nop
 8000a68:	3728      	adds	r7, #40	; 0x28
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40012c00 	.word	0x40012c00
 8000a74:	40021000 	.word	0x40021000
 8000a78:	40010800 	.word	0x40010800

08000a7c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b088      	sub	sp, #32
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a84:	f107 0310 	add.w	r3, r7, #16
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a10      	ldr	r2, [pc, #64]	; (8000ad8 <HAL_TIM_MspPostInit+0x5c>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d118      	bne.n	8000ace <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9c:	4b0f      	ldr	r3, [pc, #60]	; (8000adc <HAL_TIM_MspPostInit+0x60>)
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	4a0e      	ldr	r2, [pc, #56]	; (8000adc <HAL_TIM_MspPostInit+0x60>)
 8000aa2:	f043 0304 	orr.w	r3, r3, #4
 8000aa6:	6193      	str	r3, [r2, #24]
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <HAL_TIM_MspPostInit+0x60>)
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	f003 0304 	and.w	r3, r3, #4
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = PWM_L_Pin|PWM_R_Pin;
 8000ab4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ab8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aba:	2302      	movs	r3, #2
 8000abc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac2:	f107 0310 	add.w	r3, r7, #16
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4805      	ldr	r0, [pc, #20]	; (8000ae0 <HAL_TIM_MspPostInit+0x64>)
 8000aca:	f000 f9a1 	bl	8000e10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000ace:	bf00      	nop
 8000ad0:	3720      	adds	r7, #32
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40012c00 	.word	0x40012c00
 8000adc:	40021000 	.word	0x40021000
 8000ae0:	40010800 	.word	0x40010800

08000ae4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ae4:	480c      	ldr	r0, [pc, #48]	; (8000b18 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ae6:	490d      	ldr	r1, [pc, #52]	; (8000b1c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ae8:	4a0d      	ldr	r2, [pc, #52]	; (8000b20 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000aea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aec:	e002      	b.n	8000af4 <LoopCopyDataInit>

08000aee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000af0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000af2:	3304      	adds	r3, #4

08000af4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000af4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000af6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000af8:	d3f9      	bcc.n	8000aee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000afa:	4a0a      	ldr	r2, [pc, #40]	; (8000b24 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000afc:	4c0a      	ldr	r4, [pc, #40]	; (8000b28 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000afe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b00:	e001      	b.n	8000b06 <LoopFillZerobss>

08000b02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b04:	3204      	adds	r2, #4

08000b06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b08:	d3fb      	bcc.n	8000b02 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b0a:	f7ff fe19 	bl	8000740 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b0e:	f002 f93b 	bl	8002d88 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b12:	f7ff fb97 	bl	8000244 <main>
  bx lr
 8000b16:	4770      	bx	lr
  ldr r0, =_sdata
 8000b18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b1c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000b20:	08002e24 	.word	0x08002e24
  ldr r2, =_sbss
 8000b24:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000b28:	200000d8 	.word	0x200000d8

08000b2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b2c:	e7fe      	b.n	8000b2c <ADC1_2_IRQHandler>
	...

08000b30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b34:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <HAL_Init+0x28>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a07      	ldr	r2, [pc, #28]	; (8000b58 <HAL_Init+0x28>)
 8000b3a:	f043 0310 	orr.w	r3, r3, #16
 8000b3e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b40:	2003      	movs	r0, #3
 8000b42:	f000 f923 	bl	8000d8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b46:	2000      	movs	r0, #0
 8000b48:	f000 f808 	bl	8000b5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b4c:	f7ff fd7e 	bl	800064c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b50:	2300      	movs	r3, #0
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40022000 	.word	0x40022000

08000b5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b64:	4b12      	ldr	r3, [pc, #72]	; (8000bb0 <HAL_InitTick+0x54>)
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	4b12      	ldr	r3, [pc, #72]	; (8000bb4 <HAL_InitTick+0x58>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f000 f93b 	bl	8000df6 <HAL_SYSTICK_Config>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b86:	2301      	movs	r3, #1
 8000b88:	e00e      	b.n	8000ba8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2b0f      	cmp	r3, #15
 8000b8e:	d80a      	bhi.n	8000ba6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b90:	2200      	movs	r2, #0
 8000b92:	6879      	ldr	r1, [r7, #4]
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b98:	f000 f903 	bl	8000da2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b9c:	4a06      	ldr	r2, [pc, #24]	; (8000bb8 <HAL_InitTick+0x5c>)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	e000      	b.n	8000ba8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ba6:	2301      	movs	r3, #1
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	3708      	adds	r7, #8
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	20000004 	.word	0x20000004
 8000bb4:	2000000c 	.word	0x2000000c
 8000bb8:	20000008 	.word	0x20000008

08000bbc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bc0:	4b05      	ldr	r3, [pc, #20]	; (8000bd8 <HAL_IncTick+0x1c>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	4b05      	ldr	r3, [pc, #20]	; (8000bdc <HAL_IncTick+0x20>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4413      	add	r3, r2
 8000bcc:	4a03      	ldr	r2, [pc, #12]	; (8000bdc <HAL_IncTick+0x20>)
 8000bce:	6013      	str	r3, [r2, #0]
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bc80      	pop	{r7}
 8000bd6:	4770      	bx	lr
 8000bd8:	2000000c 	.word	0x2000000c
 8000bdc:	200000d4 	.word	0x200000d4

08000be0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  return uwTick;
 8000be4:	4b02      	ldr	r3, [pc, #8]	; (8000bf0 <HAL_GetTick+0x10>)
 8000be6:	681b      	ldr	r3, [r3, #0]
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bc80      	pop	{r7}
 8000bee:	4770      	bx	lr
 8000bf0:	200000d4 	.word	0x200000d4

08000bf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b085      	sub	sp, #20
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	f003 0307 	and.w	r3, r3, #7
 8000c02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c04:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <__NVIC_SetPriorityGrouping+0x44>)
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c0a:	68ba      	ldr	r2, [r7, #8]
 8000c0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c10:	4013      	ands	r3, r2
 8000c12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c26:	4a04      	ldr	r2, [pc, #16]	; (8000c38 <__NVIC_SetPriorityGrouping+0x44>)
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	60d3      	str	r3, [r2, #12]
}
 8000c2c:	bf00      	nop
 8000c2e:	3714      	adds	r7, #20
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bc80      	pop	{r7}
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c40:	4b04      	ldr	r3, [pc, #16]	; (8000c54 <__NVIC_GetPriorityGrouping+0x18>)
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	0a1b      	lsrs	r3, r3, #8
 8000c46:	f003 0307 	and.w	r3, r3, #7
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bc80      	pop	{r7}
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	db0b      	blt.n	8000c82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c6a:	79fb      	ldrb	r3, [r7, #7]
 8000c6c:	f003 021f 	and.w	r2, r3, #31
 8000c70:	4906      	ldr	r1, [pc, #24]	; (8000c8c <__NVIC_EnableIRQ+0x34>)
 8000c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c76:	095b      	lsrs	r3, r3, #5
 8000c78:	2001      	movs	r0, #1
 8000c7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c82:	bf00      	nop
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bc80      	pop	{r7}
 8000c8a:	4770      	bx	lr
 8000c8c:	e000e100 	.word	0xe000e100

08000c90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4603      	mov	r3, r0
 8000c98:	6039      	str	r1, [r7, #0]
 8000c9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	db0a      	blt.n	8000cba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	b2da      	uxtb	r2, r3
 8000ca8:	490c      	ldr	r1, [pc, #48]	; (8000cdc <__NVIC_SetPriority+0x4c>)
 8000caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cae:	0112      	lsls	r2, r2, #4
 8000cb0:	b2d2      	uxtb	r2, r2
 8000cb2:	440b      	add	r3, r1
 8000cb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cb8:	e00a      	b.n	8000cd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	b2da      	uxtb	r2, r3
 8000cbe:	4908      	ldr	r1, [pc, #32]	; (8000ce0 <__NVIC_SetPriority+0x50>)
 8000cc0:	79fb      	ldrb	r3, [r7, #7]
 8000cc2:	f003 030f 	and.w	r3, r3, #15
 8000cc6:	3b04      	subs	r3, #4
 8000cc8:	0112      	lsls	r2, r2, #4
 8000cca:	b2d2      	uxtb	r2, r2
 8000ccc:	440b      	add	r3, r1
 8000cce:	761a      	strb	r2, [r3, #24]
}
 8000cd0:	bf00      	nop
 8000cd2:	370c      	adds	r7, #12
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bc80      	pop	{r7}
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	e000e100 	.word	0xe000e100
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b089      	sub	sp, #36	; 0x24
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	60f8      	str	r0, [r7, #12]
 8000cec:	60b9      	str	r1, [r7, #8]
 8000cee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	f003 0307 	and.w	r3, r3, #7
 8000cf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cf8:	69fb      	ldr	r3, [r7, #28]
 8000cfa:	f1c3 0307 	rsb	r3, r3, #7
 8000cfe:	2b04      	cmp	r3, #4
 8000d00:	bf28      	it	cs
 8000d02:	2304      	movcs	r3, #4
 8000d04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	3304      	adds	r3, #4
 8000d0a:	2b06      	cmp	r3, #6
 8000d0c:	d902      	bls.n	8000d14 <NVIC_EncodePriority+0x30>
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	3b03      	subs	r3, #3
 8000d12:	e000      	b.n	8000d16 <NVIC_EncodePriority+0x32>
 8000d14:	2300      	movs	r3, #0
 8000d16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d1c:	69bb      	ldr	r3, [r7, #24]
 8000d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d22:	43da      	mvns	r2, r3
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	401a      	ands	r2, r3
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	fa01 f303 	lsl.w	r3, r1, r3
 8000d36:	43d9      	mvns	r1, r3
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d3c:	4313      	orrs	r3, r2
         );
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3724      	adds	r7, #36	; 0x24
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bc80      	pop	{r7}
 8000d46:	4770      	bx	lr

08000d48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	3b01      	subs	r3, #1
 8000d54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d58:	d301      	bcc.n	8000d5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	e00f      	b.n	8000d7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d5e:	4a0a      	ldr	r2, [pc, #40]	; (8000d88 <SysTick_Config+0x40>)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	3b01      	subs	r3, #1
 8000d64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d66:	210f      	movs	r1, #15
 8000d68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d6c:	f7ff ff90 	bl	8000c90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d70:	4b05      	ldr	r3, [pc, #20]	; (8000d88 <SysTick_Config+0x40>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d76:	4b04      	ldr	r3, [pc, #16]	; (8000d88 <SysTick_Config+0x40>)
 8000d78:	2207      	movs	r2, #7
 8000d7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d7c:	2300      	movs	r3, #0
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	e000e010 	.word	0xe000e010

08000d8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d94:	6878      	ldr	r0, [r7, #4]
 8000d96:	f7ff ff2d 	bl	8000bf4 <__NVIC_SetPriorityGrouping>
}
 8000d9a:	bf00      	nop
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}

08000da2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000da2:	b580      	push	{r7, lr}
 8000da4:	b086      	sub	sp, #24
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	4603      	mov	r3, r0
 8000daa:	60b9      	str	r1, [r7, #8]
 8000dac:	607a      	str	r2, [r7, #4]
 8000dae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000db0:	2300      	movs	r3, #0
 8000db2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000db4:	f7ff ff42 	bl	8000c3c <__NVIC_GetPriorityGrouping>
 8000db8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dba:	687a      	ldr	r2, [r7, #4]
 8000dbc:	68b9      	ldr	r1, [r7, #8]
 8000dbe:	6978      	ldr	r0, [r7, #20]
 8000dc0:	f7ff ff90 	bl	8000ce4 <NVIC_EncodePriority>
 8000dc4:	4602      	mov	r2, r0
 8000dc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dca:	4611      	mov	r1, r2
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff ff5f 	bl	8000c90 <__NVIC_SetPriority>
}
 8000dd2:	bf00      	nop
 8000dd4:	3718      	adds	r7, #24
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	b082      	sub	sp, #8
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	4603      	mov	r3, r0
 8000de2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff ff35 	bl	8000c58 <__NVIC_EnableIRQ>
}
 8000dee:	bf00      	nop
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000df6:	b580      	push	{r7, lr}
 8000df8:	b082      	sub	sp, #8
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	f7ff ffa2 	bl	8000d48 <SysTick_Config>
 8000e04:	4603      	mov	r3, r0
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
	...

08000e10 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b08b      	sub	sp, #44	; 0x2c
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
 8000e18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e22:	e127      	b.n	8001074 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e24:	2201      	movs	r2, #1
 8000e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	69fa      	ldr	r2, [r7, #28]
 8000e34:	4013      	ands	r3, r2
 8000e36:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	f040 8116 	bne.w	800106e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	2b12      	cmp	r3, #18
 8000e48:	d034      	beq.n	8000eb4 <HAL_GPIO_Init+0xa4>
 8000e4a:	2b12      	cmp	r3, #18
 8000e4c:	d80d      	bhi.n	8000e6a <HAL_GPIO_Init+0x5a>
 8000e4e:	2b02      	cmp	r3, #2
 8000e50:	d02b      	beq.n	8000eaa <HAL_GPIO_Init+0x9a>
 8000e52:	2b02      	cmp	r3, #2
 8000e54:	d804      	bhi.n	8000e60 <HAL_GPIO_Init+0x50>
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d031      	beq.n	8000ebe <HAL_GPIO_Init+0xae>
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d01c      	beq.n	8000e98 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e5e:	e048      	b.n	8000ef2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000e60:	2b03      	cmp	r3, #3
 8000e62:	d043      	beq.n	8000eec <HAL_GPIO_Init+0xdc>
 8000e64:	2b11      	cmp	r3, #17
 8000e66:	d01b      	beq.n	8000ea0 <HAL_GPIO_Init+0x90>
          break;
 8000e68:	e043      	b.n	8000ef2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000e6a:	4a89      	ldr	r2, [pc, #548]	; (8001090 <HAL_GPIO_Init+0x280>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d026      	beq.n	8000ebe <HAL_GPIO_Init+0xae>
 8000e70:	4a87      	ldr	r2, [pc, #540]	; (8001090 <HAL_GPIO_Init+0x280>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d806      	bhi.n	8000e84 <HAL_GPIO_Init+0x74>
 8000e76:	4a87      	ldr	r2, [pc, #540]	; (8001094 <HAL_GPIO_Init+0x284>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d020      	beq.n	8000ebe <HAL_GPIO_Init+0xae>
 8000e7c:	4a86      	ldr	r2, [pc, #536]	; (8001098 <HAL_GPIO_Init+0x288>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d01d      	beq.n	8000ebe <HAL_GPIO_Init+0xae>
          break;
 8000e82:	e036      	b.n	8000ef2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000e84:	4a85      	ldr	r2, [pc, #532]	; (800109c <HAL_GPIO_Init+0x28c>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d019      	beq.n	8000ebe <HAL_GPIO_Init+0xae>
 8000e8a:	4a85      	ldr	r2, [pc, #532]	; (80010a0 <HAL_GPIO_Init+0x290>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d016      	beq.n	8000ebe <HAL_GPIO_Init+0xae>
 8000e90:	4a84      	ldr	r2, [pc, #528]	; (80010a4 <HAL_GPIO_Init+0x294>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d013      	beq.n	8000ebe <HAL_GPIO_Init+0xae>
          break;
 8000e96:	e02c      	b.n	8000ef2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	623b      	str	r3, [r7, #32]
          break;
 8000e9e:	e028      	b.n	8000ef2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	3304      	adds	r3, #4
 8000ea6:	623b      	str	r3, [r7, #32]
          break;
 8000ea8:	e023      	b.n	8000ef2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	68db      	ldr	r3, [r3, #12]
 8000eae:	3308      	adds	r3, #8
 8000eb0:	623b      	str	r3, [r7, #32]
          break;
 8000eb2:	e01e      	b.n	8000ef2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	330c      	adds	r3, #12
 8000eba:	623b      	str	r3, [r7, #32]
          break;
 8000ebc:	e019      	b.n	8000ef2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	689b      	ldr	r3, [r3, #8]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d102      	bne.n	8000ecc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ec6:	2304      	movs	r3, #4
 8000ec8:	623b      	str	r3, [r7, #32]
          break;
 8000eca:	e012      	b.n	8000ef2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	689b      	ldr	r3, [r3, #8]
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d105      	bne.n	8000ee0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ed4:	2308      	movs	r3, #8
 8000ed6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	69fa      	ldr	r2, [r7, #28]
 8000edc:	611a      	str	r2, [r3, #16]
          break;
 8000ede:	e008      	b.n	8000ef2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ee0:	2308      	movs	r3, #8
 8000ee2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	69fa      	ldr	r2, [r7, #28]
 8000ee8:	615a      	str	r2, [r3, #20]
          break;
 8000eea:	e002      	b.n	8000ef2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000eec:	2300      	movs	r3, #0
 8000eee:	623b      	str	r3, [r7, #32]
          break;
 8000ef0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ef2:	69bb      	ldr	r3, [r7, #24]
 8000ef4:	2bff      	cmp	r3, #255	; 0xff
 8000ef6:	d801      	bhi.n	8000efc <HAL_GPIO_Init+0xec>
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	e001      	b.n	8000f00 <HAL_GPIO_Init+0xf0>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3304      	adds	r3, #4
 8000f00:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f02:	69bb      	ldr	r3, [r7, #24]
 8000f04:	2bff      	cmp	r3, #255	; 0xff
 8000f06:	d802      	bhi.n	8000f0e <HAL_GPIO_Init+0xfe>
 8000f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	e002      	b.n	8000f14 <HAL_GPIO_Init+0x104>
 8000f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f10:	3b08      	subs	r3, #8
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	210f      	movs	r1, #15
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f22:	43db      	mvns	r3, r3
 8000f24:	401a      	ands	r2, r3
 8000f26:	6a39      	ldr	r1, [r7, #32]
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f2e:	431a      	orrs	r2, r3
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	f000 8096 	beq.w	800106e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f42:	4b59      	ldr	r3, [pc, #356]	; (80010a8 <HAL_GPIO_Init+0x298>)
 8000f44:	699b      	ldr	r3, [r3, #24]
 8000f46:	4a58      	ldr	r2, [pc, #352]	; (80010a8 <HAL_GPIO_Init+0x298>)
 8000f48:	f043 0301 	orr.w	r3, r3, #1
 8000f4c:	6193      	str	r3, [r2, #24]
 8000f4e:	4b56      	ldr	r3, [pc, #344]	; (80010a8 <HAL_GPIO_Init+0x298>)
 8000f50:	699b      	ldr	r3, [r3, #24]
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	60bb      	str	r3, [r7, #8]
 8000f58:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f5a:	4a54      	ldr	r2, [pc, #336]	; (80010ac <HAL_GPIO_Init+0x29c>)
 8000f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5e:	089b      	lsrs	r3, r3, #2
 8000f60:	3302      	adds	r3, #2
 8000f62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f66:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f6a:	f003 0303 	and.w	r3, r3, #3
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	220f      	movs	r2, #15
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	43db      	mvns	r3, r3
 8000f78:	68fa      	ldr	r2, [r7, #12]
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a4b      	ldr	r2, [pc, #300]	; (80010b0 <HAL_GPIO_Init+0x2a0>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d013      	beq.n	8000fae <HAL_GPIO_Init+0x19e>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a4a      	ldr	r2, [pc, #296]	; (80010b4 <HAL_GPIO_Init+0x2a4>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d00d      	beq.n	8000faa <HAL_GPIO_Init+0x19a>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a49      	ldr	r2, [pc, #292]	; (80010b8 <HAL_GPIO_Init+0x2a8>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d007      	beq.n	8000fa6 <HAL_GPIO_Init+0x196>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a48      	ldr	r2, [pc, #288]	; (80010bc <HAL_GPIO_Init+0x2ac>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d101      	bne.n	8000fa2 <HAL_GPIO_Init+0x192>
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	e006      	b.n	8000fb0 <HAL_GPIO_Init+0x1a0>
 8000fa2:	2304      	movs	r3, #4
 8000fa4:	e004      	b.n	8000fb0 <HAL_GPIO_Init+0x1a0>
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	e002      	b.n	8000fb0 <HAL_GPIO_Init+0x1a0>
 8000faa:	2301      	movs	r3, #1
 8000fac:	e000      	b.n	8000fb0 <HAL_GPIO_Init+0x1a0>
 8000fae:	2300      	movs	r3, #0
 8000fb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fb2:	f002 0203 	and.w	r2, r2, #3
 8000fb6:	0092      	lsls	r2, r2, #2
 8000fb8:	4093      	lsls	r3, r2
 8000fba:	68fa      	ldr	r2, [r7, #12]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000fc0:	493a      	ldr	r1, [pc, #232]	; (80010ac <HAL_GPIO_Init+0x29c>)
 8000fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc4:	089b      	lsrs	r3, r3, #2
 8000fc6:	3302      	adds	r3, #2
 8000fc8:	68fa      	ldr	r2, [r7, #12]
 8000fca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d006      	beq.n	8000fe8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000fda:	4b39      	ldr	r3, [pc, #228]	; (80010c0 <HAL_GPIO_Init+0x2b0>)
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	4938      	ldr	r1, [pc, #224]	; (80010c0 <HAL_GPIO_Init+0x2b0>)
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	600b      	str	r3, [r1, #0]
 8000fe6:	e006      	b.n	8000ff6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000fe8:	4b35      	ldr	r3, [pc, #212]	; (80010c0 <HAL_GPIO_Init+0x2b0>)
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	69bb      	ldr	r3, [r7, #24]
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	4933      	ldr	r1, [pc, #204]	; (80010c0 <HAL_GPIO_Init+0x2b0>)
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d006      	beq.n	8001010 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001002:	4b2f      	ldr	r3, [pc, #188]	; (80010c0 <HAL_GPIO_Init+0x2b0>)
 8001004:	685a      	ldr	r2, [r3, #4]
 8001006:	492e      	ldr	r1, [pc, #184]	; (80010c0 <HAL_GPIO_Init+0x2b0>)
 8001008:	69bb      	ldr	r3, [r7, #24]
 800100a:	4313      	orrs	r3, r2
 800100c:	604b      	str	r3, [r1, #4]
 800100e:	e006      	b.n	800101e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001010:	4b2b      	ldr	r3, [pc, #172]	; (80010c0 <HAL_GPIO_Init+0x2b0>)
 8001012:	685a      	ldr	r2, [r3, #4]
 8001014:	69bb      	ldr	r3, [r7, #24]
 8001016:	43db      	mvns	r3, r3
 8001018:	4929      	ldr	r1, [pc, #164]	; (80010c0 <HAL_GPIO_Init+0x2b0>)
 800101a:	4013      	ands	r3, r2
 800101c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001026:	2b00      	cmp	r3, #0
 8001028:	d006      	beq.n	8001038 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800102a:	4b25      	ldr	r3, [pc, #148]	; (80010c0 <HAL_GPIO_Init+0x2b0>)
 800102c:	689a      	ldr	r2, [r3, #8]
 800102e:	4924      	ldr	r1, [pc, #144]	; (80010c0 <HAL_GPIO_Init+0x2b0>)
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	4313      	orrs	r3, r2
 8001034:	608b      	str	r3, [r1, #8]
 8001036:	e006      	b.n	8001046 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001038:	4b21      	ldr	r3, [pc, #132]	; (80010c0 <HAL_GPIO_Init+0x2b0>)
 800103a:	689a      	ldr	r2, [r3, #8]
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	43db      	mvns	r3, r3
 8001040:	491f      	ldr	r1, [pc, #124]	; (80010c0 <HAL_GPIO_Init+0x2b0>)
 8001042:	4013      	ands	r3, r2
 8001044:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800104e:	2b00      	cmp	r3, #0
 8001050:	d006      	beq.n	8001060 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001052:	4b1b      	ldr	r3, [pc, #108]	; (80010c0 <HAL_GPIO_Init+0x2b0>)
 8001054:	68da      	ldr	r2, [r3, #12]
 8001056:	491a      	ldr	r1, [pc, #104]	; (80010c0 <HAL_GPIO_Init+0x2b0>)
 8001058:	69bb      	ldr	r3, [r7, #24]
 800105a:	4313      	orrs	r3, r2
 800105c:	60cb      	str	r3, [r1, #12]
 800105e:	e006      	b.n	800106e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001060:	4b17      	ldr	r3, [pc, #92]	; (80010c0 <HAL_GPIO_Init+0x2b0>)
 8001062:	68da      	ldr	r2, [r3, #12]
 8001064:	69bb      	ldr	r3, [r7, #24]
 8001066:	43db      	mvns	r3, r3
 8001068:	4915      	ldr	r1, [pc, #84]	; (80010c0 <HAL_GPIO_Init+0x2b0>)
 800106a:	4013      	ands	r3, r2
 800106c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800106e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001070:	3301      	adds	r3, #1
 8001072:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800107a:	fa22 f303 	lsr.w	r3, r2, r3
 800107e:	2b00      	cmp	r3, #0
 8001080:	f47f aed0 	bne.w	8000e24 <HAL_GPIO_Init+0x14>
  }
}
 8001084:	bf00      	nop
 8001086:	372c      	adds	r7, #44	; 0x2c
 8001088:	46bd      	mov	sp, r7
 800108a:	bc80      	pop	{r7}
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	10210000 	.word	0x10210000
 8001094:	10110000 	.word	0x10110000
 8001098:	10120000 	.word	0x10120000
 800109c:	10310000 	.word	0x10310000
 80010a0:	10320000 	.word	0x10320000
 80010a4:	10220000 	.word	0x10220000
 80010a8:	40021000 	.word	0x40021000
 80010ac:	40010000 	.word	0x40010000
 80010b0:	40010800 	.word	0x40010800
 80010b4:	40010c00 	.word	0x40010c00
 80010b8:	40011000 	.word	0x40011000
 80010bc:	40011400 	.word	0x40011400
 80010c0:	40010400 	.word	0x40010400

080010c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	460b      	mov	r3, r1
 80010ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	689a      	ldr	r2, [r3, #8]
 80010d4:	887b      	ldrh	r3, [r7, #2]
 80010d6:	4013      	ands	r3, r2
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d002      	beq.n	80010e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80010dc:	2301      	movs	r3, #1
 80010de:	73fb      	strb	r3, [r7, #15]
 80010e0:	e001      	b.n	80010e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80010e2:	2300      	movs	r3, #0
 80010e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80010e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3714      	adds	r7, #20
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bc80      	pop	{r7}
 80010f0:	4770      	bx	lr

080010f2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010f2:	b480      	push	{r7}
 80010f4:	b083      	sub	sp, #12
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
 80010fa:	460b      	mov	r3, r1
 80010fc:	807b      	strh	r3, [r7, #2]
 80010fe:	4613      	mov	r3, r2
 8001100:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001102:	787b      	ldrb	r3, [r7, #1]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d003      	beq.n	8001110 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001108:	887a      	ldrh	r2, [r7, #2]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800110e:	e003      	b.n	8001118 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001110:	887b      	ldrh	r3, [r7, #2]
 8001112:	041a      	lsls	r2, r3, #16
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	611a      	str	r2, [r3, #16]
}
 8001118:	bf00      	nop
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	bc80      	pop	{r7}
 8001120:	4770      	bx	lr
	...

08001124 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d101      	bne.n	8001136 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e26c      	b.n	8001610 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f003 0301 	and.w	r3, r3, #1
 800113e:	2b00      	cmp	r3, #0
 8001140:	f000 8087 	beq.w	8001252 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001144:	4b92      	ldr	r3, [pc, #584]	; (8001390 <HAL_RCC_OscConfig+0x26c>)
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f003 030c 	and.w	r3, r3, #12
 800114c:	2b04      	cmp	r3, #4
 800114e:	d00c      	beq.n	800116a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001150:	4b8f      	ldr	r3, [pc, #572]	; (8001390 <HAL_RCC_OscConfig+0x26c>)
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f003 030c 	and.w	r3, r3, #12
 8001158:	2b08      	cmp	r3, #8
 800115a:	d112      	bne.n	8001182 <HAL_RCC_OscConfig+0x5e>
 800115c:	4b8c      	ldr	r3, [pc, #560]	; (8001390 <HAL_RCC_OscConfig+0x26c>)
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001164:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001168:	d10b      	bne.n	8001182 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800116a:	4b89      	ldr	r3, [pc, #548]	; (8001390 <HAL_RCC_OscConfig+0x26c>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d06c      	beq.n	8001250 <HAL_RCC_OscConfig+0x12c>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d168      	bne.n	8001250 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e246      	b.n	8001610 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800118a:	d106      	bne.n	800119a <HAL_RCC_OscConfig+0x76>
 800118c:	4b80      	ldr	r3, [pc, #512]	; (8001390 <HAL_RCC_OscConfig+0x26c>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a7f      	ldr	r2, [pc, #508]	; (8001390 <HAL_RCC_OscConfig+0x26c>)
 8001192:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001196:	6013      	str	r3, [r2, #0]
 8001198:	e02e      	b.n	80011f8 <HAL_RCC_OscConfig+0xd4>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d10c      	bne.n	80011bc <HAL_RCC_OscConfig+0x98>
 80011a2:	4b7b      	ldr	r3, [pc, #492]	; (8001390 <HAL_RCC_OscConfig+0x26c>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a7a      	ldr	r2, [pc, #488]	; (8001390 <HAL_RCC_OscConfig+0x26c>)
 80011a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011ac:	6013      	str	r3, [r2, #0]
 80011ae:	4b78      	ldr	r3, [pc, #480]	; (8001390 <HAL_RCC_OscConfig+0x26c>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a77      	ldr	r2, [pc, #476]	; (8001390 <HAL_RCC_OscConfig+0x26c>)
 80011b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011b8:	6013      	str	r3, [r2, #0]
 80011ba:	e01d      	b.n	80011f8 <HAL_RCC_OscConfig+0xd4>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011c4:	d10c      	bne.n	80011e0 <HAL_RCC_OscConfig+0xbc>
 80011c6:	4b72      	ldr	r3, [pc, #456]	; (8001390 <HAL_RCC_OscConfig+0x26c>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a71      	ldr	r2, [pc, #452]	; (8001390 <HAL_RCC_OscConfig+0x26c>)
 80011cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011d0:	6013      	str	r3, [r2, #0]
 80011d2:	4b6f      	ldr	r3, [pc, #444]	; (8001390 <HAL_RCC_OscConfig+0x26c>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a6e      	ldr	r2, [pc, #440]	; (8001390 <HAL_RCC_OscConfig+0x26c>)
 80011d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011dc:	6013      	str	r3, [r2, #0]
 80011de:	e00b      	b.n	80011f8 <HAL_RCC_OscConfig+0xd4>
 80011e0:	4b6b      	ldr	r3, [pc, #428]	; (8001390 <HAL_RCC_OscConfig+0x26c>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a6a      	ldr	r2, [pc, #424]	; (8001390 <HAL_RCC_OscConfig+0x26c>)
 80011e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011ea:	6013      	str	r3, [r2, #0]
 80011ec:	4b68      	ldr	r3, [pc, #416]	; (8001390 <HAL_RCC_OscConfig+0x26c>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a67      	ldr	r2, [pc, #412]	; (8001390 <HAL_RCC_OscConfig+0x26c>)
 80011f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011f6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d013      	beq.n	8001228 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001200:	f7ff fcee 	bl	8000be0 <HAL_GetTick>
 8001204:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001206:	e008      	b.n	800121a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001208:	f7ff fcea 	bl	8000be0 <HAL_GetTick>
 800120c:	4602      	mov	r2, r0
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	2b64      	cmp	r3, #100	; 0x64
 8001214:	d901      	bls.n	800121a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001216:	2303      	movs	r3, #3
 8001218:	e1fa      	b.n	8001610 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800121a:	4b5d      	ldr	r3, [pc, #372]	; (8001390 <HAL_RCC_OscConfig+0x26c>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d0f0      	beq.n	8001208 <HAL_RCC_OscConfig+0xe4>
 8001226:	e014      	b.n	8001252 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001228:	f7ff fcda 	bl	8000be0 <HAL_GetTick>
 800122c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800122e:	e008      	b.n	8001242 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001230:	f7ff fcd6 	bl	8000be0 <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	2b64      	cmp	r3, #100	; 0x64
 800123c:	d901      	bls.n	8001242 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800123e:	2303      	movs	r3, #3
 8001240:	e1e6      	b.n	8001610 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001242:	4b53      	ldr	r3, [pc, #332]	; (8001390 <HAL_RCC_OscConfig+0x26c>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d1f0      	bne.n	8001230 <HAL_RCC_OscConfig+0x10c>
 800124e:	e000      	b.n	8001252 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001250:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	2b00      	cmp	r3, #0
 800125c:	d063      	beq.n	8001326 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800125e:	4b4c      	ldr	r3, [pc, #304]	; (8001390 <HAL_RCC_OscConfig+0x26c>)
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f003 030c 	and.w	r3, r3, #12
 8001266:	2b00      	cmp	r3, #0
 8001268:	d00b      	beq.n	8001282 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800126a:	4b49      	ldr	r3, [pc, #292]	; (8001390 <HAL_RCC_OscConfig+0x26c>)
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f003 030c 	and.w	r3, r3, #12
 8001272:	2b08      	cmp	r3, #8
 8001274:	d11c      	bne.n	80012b0 <HAL_RCC_OscConfig+0x18c>
 8001276:	4b46      	ldr	r3, [pc, #280]	; (8001390 <HAL_RCC_OscConfig+0x26c>)
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d116      	bne.n	80012b0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001282:	4b43      	ldr	r3, [pc, #268]	; (8001390 <HAL_RCC_OscConfig+0x26c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 0302 	and.w	r3, r3, #2
 800128a:	2b00      	cmp	r3, #0
 800128c:	d005      	beq.n	800129a <HAL_RCC_OscConfig+0x176>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	691b      	ldr	r3, [r3, #16]
 8001292:	2b01      	cmp	r3, #1
 8001294:	d001      	beq.n	800129a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e1ba      	b.n	8001610 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800129a:	4b3d      	ldr	r3, [pc, #244]	; (8001390 <HAL_RCC_OscConfig+0x26c>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	695b      	ldr	r3, [r3, #20]
 80012a6:	00db      	lsls	r3, r3, #3
 80012a8:	4939      	ldr	r1, [pc, #228]	; (8001390 <HAL_RCC_OscConfig+0x26c>)
 80012aa:	4313      	orrs	r3, r2
 80012ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ae:	e03a      	b.n	8001326 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	691b      	ldr	r3, [r3, #16]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d020      	beq.n	80012fa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012b8:	4b36      	ldr	r3, [pc, #216]	; (8001394 <HAL_RCC_OscConfig+0x270>)
 80012ba:	2201      	movs	r2, #1
 80012bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012be:	f7ff fc8f 	bl	8000be0 <HAL_GetTick>
 80012c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012c4:	e008      	b.n	80012d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012c6:	f7ff fc8b 	bl	8000be0 <HAL_GetTick>
 80012ca:	4602      	mov	r2, r0
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d901      	bls.n	80012d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80012d4:	2303      	movs	r3, #3
 80012d6:	e19b      	b.n	8001610 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012d8:	4b2d      	ldr	r3, [pc, #180]	; (8001390 <HAL_RCC_OscConfig+0x26c>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f003 0302 	and.w	r3, r3, #2
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d0f0      	beq.n	80012c6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012e4:	4b2a      	ldr	r3, [pc, #168]	; (8001390 <HAL_RCC_OscConfig+0x26c>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	695b      	ldr	r3, [r3, #20]
 80012f0:	00db      	lsls	r3, r3, #3
 80012f2:	4927      	ldr	r1, [pc, #156]	; (8001390 <HAL_RCC_OscConfig+0x26c>)
 80012f4:	4313      	orrs	r3, r2
 80012f6:	600b      	str	r3, [r1, #0]
 80012f8:	e015      	b.n	8001326 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012fa:	4b26      	ldr	r3, [pc, #152]	; (8001394 <HAL_RCC_OscConfig+0x270>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001300:	f7ff fc6e 	bl	8000be0 <HAL_GetTick>
 8001304:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001306:	e008      	b.n	800131a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001308:	f7ff fc6a 	bl	8000be0 <HAL_GetTick>
 800130c:	4602      	mov	r2, r0
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	2b02      	cmp	r3, #2
 8001314:	d901      	bls.n	800131a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	e17a      	b.n	8001610 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800131a:	4b1d      	ldr	r3, [pc, #116]	; (8001390 <HAL_RCC_OscConfig+0x26c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 0302 	and.w	r3, r3, #2
 8001322:	2b00      	cmp	r3, #0
 8001324:	d1f0      	bne.n	8001308 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 0308 	and.w	r3, r3, #8
 800132e:	2b00      	cmp	r3, #0
 8001330:	d03a      	beq.n	80013a8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	699b      	ldr	r3, [r3, #24]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d019      	beq.n	800136e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800133a:	4b17      	ldr	r3, [pc, #92]	; (8001398 <HAL_RCC_OscConfig+0x274>)
 800133c:	2201      	movs	r2, #1
 800133e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001340:	f7ff fc4e 	bl	8000be0 <HAL_GetTick>
 8001344:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001346:	e008      	b.n	800135a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001348:	f7ff fc4a 	bl	8000be0 <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	2b02      	cmp	r3, #2
 8001354:	d901      	bls.n	800135a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e15a      	b.n	8001610 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800135a:	4b0d      	ldr	r3, [pc, #52]	; (8001390 <HAL_RCC_OscConfig+0x26c>)
 800135c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	2b00      	cmp	r3, #0
 8001364:	d0f0      	beq.n	8001348 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001366:	2001      	movs	r0, #1
 8001368:	f000 faa8 	bl	80018bc <RCC_Delay>
 800136c:	e01c      	b.n	80013a8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800136e:	4b0a      	ldr	r3, [pc, #40]	; (8001398 <HAL_RCC_OscConfig+0x274>)
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001374:	f7ff fc34 	bl	8000be0 <HAL_GetTick>
 8001378:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800137a:	e00f      	b.n	800139c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800137c:	f7ff fc30 	bl	8000be0 <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	2b02      	cmp	r3, #2
 8001388:	d908      	bls.n	800139c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e140      	b.n	8001610 <HAL_RCC_OscConfig+0x4ec>
 800138e:	bf00      	nop
 8001390:	40021000 	.word	0x40021000
 8001394:	42420000 	.word	0x42420000
 8001398:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800139c:	4b9e      	ldr	r3, [pc, #632]	; (8001618 <HAL_RCC_OscConfig+0x4f4>)
 800139e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a0:	f003 0302 	and.w	r3, r3, #2
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d1e9      	bne.n	800137c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f003 0304 	and.w	r3, r3, #4
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	f000 80a6 	beq.w	8001502 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013b6:	2300      	movs	r3, #0
 80013b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013ba:	4b97      	ldr	r3, [pc, #604]	; (8001618 <HAL_RCC_OscConfig+0x4f4>)
 80013bc:	69db      	ldr	r3, [r3, #28]
 80013be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d10d      	bne.n	80013e2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013c6:	4b94      	ldr	r3, [pc, #592]	; (8001618 <HAL_RCC_OscConfig+0x4f4>)
 80013c8:	69db      	ldr	r3, [r3, #28]
 80013ca:	4a93      	ldr	r2, [pc, #588]	; (8001618 <HAL_RCC_OscConfig+0x4f4>)
 80013cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013d0:	61d3      	str	r3, [r2, #28]
 80013d2:	4b91      	ldr	r3, [pc, #580]	; (8001618 <HAL_RCC_OscConfig+0x4f4>)
 80013d4:	69db      	ldr	r3, [r3, #28]
 80013d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013da:	60bb      	str	r3, [r7, #8]
 80013dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013de:	2301      	movs	r3, #1
 80013e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013e2:	4b8e      	ldr	r3, [pc, #568]	; (800161c <HAL_RCC_OscConfig+0x4f8>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d118      	bne.n	8001420 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013ee:	4b8b      	ldr	r3, [pc, #556]	; (800161c <HAL_RCC_OscConfig+0x4f8>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a8a      	ldr	r2, [pc, #552]	; (800161c <HAL_RCC_OscConfig+0x4f8>)
 80013f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013fa:	f7ff fbf1 	bl	8000be0 <HAL_GetTick>
 80013fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001400:	e008      	b.n	8001414 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001402:	f7ff fbed 	bl	8000be0 <HAL_GetTick>
 8001406:	4602      	mov	r2, r0
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	2b64      	cmp	r3, #100	; 0x64
 800140e:	d901      	bls.n	8001414 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001410:	2303      	movs	r3, #3
 8001412:	e0fd      	b.n	8001610 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001414:	4b81      	ldr	r3, [pc, #516]	; (800161c <HAL_RCC_OscConfig+0x4f8>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800141c:	2b00      	cmp	r3, #0
 800141e:	d0f0      	beq.n	8001402 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d106      	bne.n	8001436 <HAL_RCC_OscConfig+0x312>
 8001428:	4b7b      	ldr	r3, [pc, #492]	; (8001618 <HAL_RCC_OscConfig+0x4f4>)
 800142a:	6a1b      	ldr	r3, [r3, #32]
 800142c:	4a7a      	ldr	r2, [pc, #488]	; (8001618 <HAL_RCC_OscConfig+0x4f4>)
 800142e:	f043 0301 	orr.w	r3, r3, #1
 8001432:	6213      	str	r3, [r2, #32]
 8001434:	e02d      	b.n	8001492 <HAL_RCC_OscConfig+0x36e>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	68db      	ldr	r3, [r3, #12]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d10c      	bne.n	8001458 <HAL_RCC_OscConfig+0x334>
 800143e:	4b76      	ldr	r3, [pc, #472]	; (8001618 <HAL_RCC_OscConfig+0x4f4>)
 8001440:	6a1b      	ldr	r3, [r3, #32]
 8001442:	4a75      	ldr	r2, [pc, #468]	; (8001618 <HAL_RCC_OscConfig+0x4f4>)
 8001444:	f023 0301 	bic.w	r3, r3, #1
 8001448:	6213      	str	r3, [r2, #32]
 800144a:	4b73      	ldr	r3, [pc, #460]	; (8001618 <HAL_RCC_OscConfig+0x4f4>)
 800144c:	6a1b      	ldr	r3, [r3, #32]
 800144e:	4a72      	ldr	r2, [pc, #456]	; (8001618 <HAL_RCC_OscConfig+0x4f4>)
 8001450:	f023 0304 	bic.w	r3, r3, #4
 8001454:	6213      	str	r3, [r2, #32]
 8001456:	e01c      	b.n	8001492 <HAL_RCC_OscConfig+0x36e>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	2b05      	cmp	r3, #5
 800145e:	d10c      	bne.n	800147a <HAL_RCC_OscConfig+0x356>
 8001460:	4b6d      	ldr	r3, [pc, #436]	; (8001618 <HAL_RCC_OscConfig+0x4f4>)
 8001462:	6a1b      	ldr	r3, [r3, #32]
 8001464:	4a6c      	ldr	r2, [pc, #432]	; (8001618 <HAL_RCC_OscConfig+0x4f4>)
 8001466:	f043 0304 	orr.w	r3, r3, #4
 800146a:	6213      	str	r3, [r2, #32]
 800146c:	4b6a      	ldr	r3, [pc, #424]	; (8001618 <HAL_RCC_OscConfig+0x4f4>)
 800146e:	6a1b      	ldr	r3, [r3, #32]
 8001470:	4a69      	ldr	r2, [pc, #420]	; (8001618 <HAL_RCC_OscConfig+0x4f4>)
 8001472:	f043 0301 	orr.w	r3, r3, #1
 8001476:	6213      	str	r3, [r2, #32]
 8001478:	e00b      	b.n	8001492 <HAL_RCC_OscConfig+0x36e>
 800147a:	4b67      	ldr	r3, [pc, #412]	; (8001618 <HAL_RCC_OscConfig+0x4f4>)
 800147c:	6a1b      	ldr	r3, [r3, #32]
 800147e:	4a66      	ldr	r2, [pc, #408]	; (8001618 <HAL_RCC_OscConfig+0x4f4>)
 8001480:	f023 0301 	bic.w	r3, r3, #1
 8001484:	6213      	str	r3, [r2, #32]
 8001486:	4b64      	ldr	r3, [pc, #400]	; (8001618 <HAL_RCC_OscConfig+0x4f4>)
 8001488:	6a1b      	ldr	r3, [r3, #32]
 800148a:	4a63      	ldr	r2, [pc, #396]	; (8001618 <HAL_RCC_OscConfig+0x4f4>)
 800148c:	f023 0304 	bic.w	r3, r3, #4
 8001490:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	68db      	ldr	r3, [r3, #12]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d015      	beq.n	80014c6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800149a:	f7ff fba1 	bl	8000be0 <HAL_GetTick>
 800149e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014a0:	e00a      	b.n	80014b8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014a2:	f7ff fb9d 	bl	8000be0 <HAL_GetTick>
 80014a6:	4602      	mov	r2, r0
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d901      	bls.n	80014b8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80014b4:	2303      	movs	r3, #3
 80014b6:	e0ab      	b.n	8001610 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014b8:	4b57      	ldr	r3, [pc, #348]	; (8001618 <HAL_RCC_OscConfig+0x4f4>)
 80014ba:	6a1b      	ldr	r3, [r3, #32]
 80014bc:	f003 0302 	and.w	r3, r3, #2
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d0ee      	beq.n	80014a2 <HAL_RCC_OscConfig+0x37e>
 80014c4:	e014      	b.n	80014f0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014c6:	f7ff fb8b 	bl	8000be0 <HAL_GetTick>
 80014ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014cc:	e00a      	b.n	80014e4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014ce:	f7ff fb87 	bl	8000be0 <HAL_GetTick>
 80014d2:	4602      	mov	r2, r0
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80014dc:	4293      	cmp	r3, r2
 80014de:	d901      	bls.n	80014e4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80014e0:	2303      	movs	r3, #3
 80014e2:	e095      	b.n	8001610 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014e4:	4b4c      	ldr	r3, [pc, #304]	; (8001618 <HAL_RCC_OscConfig+0x4f4>)
 80014e6:	6a1b      	ldr	r3, [r3, #32]
 80014e8:	f003 0302 	and.w	r3, r3, #2
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d1ee      	bne.n	80014ce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80014f0:	7dfb      	ldrb	r3, [r7, #23]
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d105      	bne.n	8001502 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014f6:	4b48      	ldr	r3, [pc, #288]	; (8001618 <HAL_RCC_OscConfig+0x4f4>)
 80014f8:	69db      	ldr	r3, [r3, #28]
 80014fa:	4a47      	ldr	r2, [pc, #284]	; (8001618 <HAL_RCC_OscConfig+0x4f4>)
 80014fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001500:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	69db      	ldr	r3, [r3, #28]
 8001506:	2b00      	cmp	r3, #0
 8001508:	f000 8081 	beq.w	800160e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800150c:	4b42      	ldr	r3, [pc, #264]	; (8001618 <HAL_RCC_OscConfig+0x4f4>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f003 030c 	and.w	r3, r3, #12
 8001514:	2b08      	cmp	r3, #8
 8001516:	d061      	beq.n	80015dc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	69db      	ldr	r3, [r3, #28]
 800151c:	2b02      	cmp	r3, #2
 800151e:	d146      	bne.n	80015ae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001520:	4b3f      	ldr	r3, [pc, #252]	; (8001620 <HAL_RCC_OscConfig+0x4fc>)
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001526:	f7ff fb5b 	bl	8000be0 <HAL_GetTick>
 800152a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800152c:	e008      	b.n	8001540 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800152e:	f7ff fb57 	bl	8000be0 <HAL_GetTick>
 8001532:	4602      	mov	r2, r0
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	2b02      	cmp	r3, #2
 800153a:	d901      	bls.n	8001540 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e067      	b.n	8001610 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001540:	4b35      	ldr	r3, [pc, #212]	; (8001618 <HAL_RCC_OscConfig+0x4f4>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001548:	2b00      	cmp	r3, #0
 800154a:	d1f0      	bne.n	800152e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6a1b      	ldr	r3, [r3, #32]
 8001550:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001554:	d108      	bne.n	8001568 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001556:	4b30      	ldr	r3, [pc, #192]	; (8001618 <HAL_RCC_OscConfig+0x4f4>)
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	492d      	ldr	r1, [pc, #180]	; (8001618 <HAL_RCC_OscConfig+0x4f4>)
 8001564:	4313      	orrs	r3, r2
 8001566:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001568:	4b2b      	ldr	r3, [pc, #172]	; (8001618 <HAL_RCC_OscConfig+0x4f4>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6a19      	ldr	r1, [r3, #32]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001578:	430b      	orrs	r3, r1
 800157a:	4927      	ldr	r1, [pc, #156]	; (8001618 <HAL_RCC_OscConfig+0x4f4>)
 800157c:	4313      	orrs	r3, r2
 800157e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001580:	4b27      	ldr	r3, [pc, #156]	; (8001620 <HAL_RCC_OscConfig+0x4fc>)
 8001582:	2201      	movs	r2, #1
 8001584:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001586:	f7ff fb2b 	bl	8000be0 <HAL_GetTick>
 800158a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800158c:	e008      	b.n	80015a0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800158e:	f7ff fb27 	bl	8000be0 <HAL_GetTick>
 8001592:	4602      	mov	r2, r0
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	2b02      	cmp	r3, #2
 800159a:	d901      	bls.n	80015a0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800159c:	2303      	movs	r3, #3
 800159e:	e037      	b.n	8001610 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015a0:	4b1d      	ldr	r3, [pc, #116]	; (8001618 <HAL_RCC_OscConfig+0x4f4>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d0f0      	beq.n	800158e <HAL_RCC_OscConfig+0x46a>
 80015ac:	e02f      	b.n	800160e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ae:	4b1c      	ldr	r3, [pc, #112]	; (8001620 <HAL_RCC_OscConfig+0x4fc>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b4:	f7ff fb14 	bl	8000be0 <HAL_GetTick>
 80015b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015ba:	e008      	b.n	80015ce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015bc:	f7ff fb10 	bl	8000be0 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e020      	b.n	8001610 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015ce:	4b12      	ldr	r3, [pc, #72]	; (8001618 <HAL_RCC_OscConfig+0x4f4>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d1f0      	bne.n	80015bc <HAL_RCC_OscConfig+0x498>
 80015da:	e018      	b.n	800160e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	69db      	ldr	r3, [r3, #28]
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d101      	bne.n	80015e8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e013      	b.n	8001610 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80015e8:	4b0b      	ldr	r3, [pc, #44]	; (8001618 <HAL_RCC_OscConfig+0x4f4>)
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a1b      	ldr	r3, [r3, #32]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d106      	bne.n	800160a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001606:	429a      	cmp	r2, r3
 8001608:	d001      	beq.n	800160e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e000      	b.n	8001610 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800160e:	2300      	movs	r3, #0
}
 8001610:	4618      	mov	r0, r3
 8001612:	3718      	adds	r7, #24
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	40021000 	.word	0x40021000
 800161c:	40007000 	.word	0x40007000
 8001620:	42420060 	.word	0x42420060

08001624 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d101      	bne.n	8001638 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e0d0      	b.n	80017da <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001638:	4b6a      	ldr	r3, [pc, #424]	; (80017e4 <HAL_RCC_ClockConfig+0x1c0>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 0307 	and.w	r3, r3, #7
 8001640:	683a      	ldr	r2, [r7, #0]
 8001642:	429a      	cmp	r2, r3
 8001644:	d910      	bls.n	8001668 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001646:	4b67      	ldr	r3, [pc, #412]	; (80017e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f023 0207 	bic.w	r2, r3, #7
 800164e:	4965      	ldr	r1, [pc, #404]	; (80017e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	4313      	orrs	r3, r2
 8001654:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001656:	4b63      	ldr	r3, [pc, #396]	; (80017e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0307 	and.w	r3, r3, #7
 800165e:	683a      	ldr	r2, [r7, #0]
 8001660:	429a      	cmp	r2, r3
 8001662:	d001      	beq.n	8001668 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	e0b8      	b.n	80017da <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 0302 	and.w	r3, r3, #2
 8001670:	2b00      	cmp	r3, #0
 8001672:	d020      	beq.n	80016b6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0304 	and.w	r3, r3, #4
 800167c:	2b00      	cmp	r3, #0
 800167e:	d005      	beq.n	800168c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001680:	4b59      	ldr	r3, [pc, #356]	; (80017e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	4a58      	ldr	r2, [pc, #352]	; (80017e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001686:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800168a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 0308 	and.w	r3, r3, #8
 8001694:	2b00      	cmp	r3, #0
 8001696:	d005      	beq.n	80016a4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001698:	4b53      	ldr	r3, [pc, #332]	; (80017e8 <HAL_RCC_ClockConfig+0x1c4>)
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	4a52      	ldr	r2, [pc, #328]	; (80017e8 <HAL_RCC_ClockConfig+0x1c4>)
 800169e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80016a2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016a4:	4b50      	ldr	r3, [pc, #320]	; (80017e8 <HAL_RCC_ClockConfig+0x1c4>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	494d      	ldr	r1, [pc, #308]	; (80017e8 <HAL_RCC_ClockConfig+0x1c4>)
 80016b2:	4313      	orrs	r3, r2
 80016b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d040      	beq.n	8001744 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d107      	bne.n	80016da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ca:	4b47      	ldr	r3, [pc, #284]	; (80017e8 <HAL_RCC_ClockConfig+0x1c4>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d115      	bne.n	8001702 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e07f      	b.n	80017da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d107      	bne.n	80016f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016e2:	4b41      	ldr	r3, [pc, #260]	; (80017e8 <HAL_RCC_ClockConfig+0x1c4>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d109      	bne.n	8001702 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e073      	b.n	80017da <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016f2:	4b3d      	ldr	r3, [pc, #244]	; (80017e8 <HAL_RCC_ClockConfig+0x1c4>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d101      	bne.n	8001702 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e06b      	b.n	80017da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001702:	4b39      	ldr	r3, [pc, #228]	; (80017e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f023 0203 	bic.w	r2, r3, #3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	4936      	ldr	r1, [pc, #216]	; (80017e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001710:	4313      	orrs	r3, r2
 8001712:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001714:	f7ff fa64 	bl	8000be0 <HAL_GetTick>
 8001718:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800171a:	e00a      	b.n	8001732 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800171c:	f7ff fa60 	bl	8000be0 <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	f241 3288 	movw	r2, #5000	; 0x1388
 800172a:	4293      	cmp	r3, r2
 800172c:	d901      	bls.n	8001732 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e053      	b.n	80017da <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001732:	4b2d      	ldr	r3, [pc, #180]	; (80017e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f003 020c 	and.w	r2, r3, #12
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	429a      	cmp	r2, r3
 8001742:	d1eb      	bne.n	800171c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001744:	4b27      	ldr	r3, [pc, #156]	; (80017e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0307 	and.w	r3, r3, #7
 800174c:	683a      	ldr	r2, [r7, #0]
 800174e:	429a      	cmp	r2, r3
 8001750:	d210      	bcs.n	8001774 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001752:	4b24      	ldr	r3, [pc, #144]	; (80017e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f023 0207 	bic.w	r2, r3, #7
 800175a:	4922      	ldr	r1, [pc, #136]	; (80017e4 <HAL_RCC_ClockConfig+0x1c0>)
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	4313      	orrs	r3, r2
 8001760:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001762:	4b20      	ldr	r3, [pc, #128]	; (80017e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0307 	and.w	r3, r3, #7
 800176a:	683a      	ldr	r2, [r7, #0]
 800176c:	429a      	cmp	r2, r3
 800176e:	d001      	beq.n	8001774 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	e032      	b.n	80017da <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0304 	and.w	r3, r3, #4
 800177c:	2b00      	cmp	r3, #0
 800177e:	d008      	beq.n	8001792 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001780:	4b19      	ldr	r3, [pc, #100]	; (80017e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	4916      	ldr	r1, [pc, #88]	; (80017e8 <HAL_RCC_ClockConfig+0x1c4>)
 800178e:	4313      	orrs	r3, r2
 8001790:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0308 	and.w	r3, r3, #8
 800179a:	2b00      	cmp	r3, #0
 800179c:	d009      	beq.n	80017b2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800179e:	4b12      	ldr	r3, [pc, #72]	; (80017e8 <HAL_RCC_ClockConfig+0x1c4>)
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	691b      	ldr	r3, [r3, #16]
 80017aa:	00db      	lsls	r3, r3, #3
 80017ac:	490e      	ldr	r1, [pc, #56]	; (80017e8 <HAL_RCC_ClockConfig+0x1c4>)
 80017ae:	4313      	orrs	r3, r2
 80017b0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017b2:	f000 f821 	bl	80017f8 <HAL_RCC_GetSysClockFreq>
 80017b6:	4601      	mov	r1, r0
 80017b8:	4b0b      	ldr	r3, [pc, #44]	; (80017e8 <HAL_RCC_ClockConfig+0x1c4>)
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	091b      	lsrs	r3, r3, #4
 80017be:	f003 030f 	and.w	r3, r3, #15
 80017c2:	4a0a      	ldr	r2, [pc, #40]	; (80017ec <HAL_RCC_ClockConfig+0x1c8>)
 80017c4:	5cd3      	ldrb	r3, [r2, r3]
 80017c6:	fa21 f303 	lsr.w	r3, r1, r3
 80017ca:	4a09      	ldr	r2, [pc, #36]	; (80017f0 <HAL_RCC_ClockConfig+0x1cc>)
 80017cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80017ce:	4b09      	ldr	r3, [pc, #36]	; (80017f4 <HAL_RCC_ClockConfig+0x1d0>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7ff f9c2 	bl	8000b5c <HAL_InitTick>

  return HAL_OK;
 80017d8:	2300      	movs	r3, #0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3710      	adds	r7, #16
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40022000 	.word	0x40022000
 80017e8:	40021000 	.word	0x40021000
 80017ec:	08002e0c 	.word	0x08002e0c
 80017f0:	20000004 	.word	0x20000004
 80017f4:	20000008 	.word	0x20000008

080017f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017f8:	b490      	push	{r4, r7}
 80017fa:	b08a      	sub	sp, #40	; 0x28
 80017fc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80017fe:	4b2a      	ldr	r3, [pc, #168]	; (80018a8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001800:	1d3c      	adds	r4, r7, #4
 8001802:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001804:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001808:	4b28      	ldr	r3, [pc, #160]	; (80018ac <HAL_RCC_GetSysClockFreq+0xb4>)
 800180a:	881b      	ldrh	r3, [r3, #0]
 800180c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800180e:	2300      	movs	r3, #0
 8001810:	61fb      	str	r3, [r7, #28]
 8001812:	2300      	movs	r3, #0
 8001814:	61bb      	str	r3, [r7, #24]
 8001816:	2300      	movs	r3, #0
 8001818:	627b      	str	r3, [r7, #36]	; 0x24
 800181a:	2300      	movs	r3, #0
 800181c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800181e:	2300      	movs	r3, #0
 8001820:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001822:	4b23      	ldr	r3, [pc, #140]	; (80018b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	f003 030c 	and.w	r3, r3, #12
 800182e:	2b04      	cmp	r3, #4
 8001830:	d002      	beq.n	8001838 <HAL_RCC_GetSysClockFreq+0x40>
 8001832:	2b08      	cmp	r3, #8
 8001834:	d003      	beq.n	800183e <HAL_RCC_GetSysClockFreq+0x46>
 8001836:	e02d      	b.n	8001894 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001838:	4b1e      	ldr	r3, [pc, #120]	; (80018b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800183a:	623b      	str	r3, [r7, #32]
      break;
 800183c:	e02d      	b.n	800189a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	0c9b      	lsrs	r3, r3, #18
 8001842:	f003 030f 	and.w	r3, r3, #15
 8001846:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800184a:	4413      	add	r3, r2
 800184c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001850:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d013      	beq.n	8001884 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800185c:	4b14      	ldr	r3, [pc, #80]	; (80018b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	0c5b      	lsrs	r3, r3, #17
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800186a:	4413      	add	r3, r2
 800186c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001870:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	4a0f      	ldr	r2, [pc, #60]	; (80018b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001876:	fb02 f203 	mul.w	r2, r2, r3
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001880:	627b      	str	r3, [r7, #36]	; 0x24
 8001882:	e004      	b.n	800188e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	4a0c      	ldr	r2, [pc, #48]	; (80018b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001888:	fb02 f303 	mul.w	r3, r2, r3
 800188c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800188e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001890:	623b      	str	r3, [r7, #32]
      break;
 8001892:	e002      	b.n	800189a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001894:	4b07      	ldr	r3, [pc, #28]	; (80018b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001896:	623b      	str	r3, [r7, #32]
      break;
 8001898:	bf00      	nop
    }
  }
  return sysclockfreq;
 800189a:	6a3b      	ldr	r3, [r7, #32]
}
 800189c:	4618      	mov	r0, r3
 800189e:	3728      	adds	r7, #40	; 0x28
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bc90      	pop	{r4, r7}
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	08002df8 	.word	0x08002df8
 80018ac:	08002e08 	.word	0x08002e08
 80018b0:	40021000 	.word	0x40021000
 80018b4:	007a1200 	.word	0x007a1200
 80018b8:	003d0900 	.word	0x003d0900

080018bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80018bc:	b480      	push	{r7}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80018c4:	4b0a      	ldr	r3, [pc, #40]	; (80018f0 <RCC_Delay+0x34>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a0a      	ldr	r2, [pc, #40]	; (80018f4 <RCC_Delay+0x38>)
 80018ca:	fba2 2303 	umull	r2, r3, r2, r3
 80018ce:	0a5b      	lsrs	r3, r3, #9
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	fb02 f303 	mul.w	r3, r2, r3
 80018d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80018d8:	bf00      	nop
  }
  while (Delay --);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	1e5a      	subs	r2, r3, #1
 80018de:	60fa      	str	r2, [r7, #12]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d1f9      	bne.n	80018d8 <RCC_Delay+0x1c>
}
 80018e4:	bf00      	nop
 80018e6:	3714      	adds	r7, #20
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bc80      	pop	{r7}
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	20000004 	.word	0x20000004
 80018f4:	10624dd3 	.word	0x10624dd3

080018f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d101      	bne.n	800190a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e041      	b.n	800198e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001910:	b2db      	uxtb	r3, r3
 8001912:	2b00      	cmp	r3, #0
 8001914:	d106      	bne.n	8001924 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2200      	movs	r2, #0
 800191a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f7ff f842 	bl	80009a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2202      	movs	r2, #2
 8001928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	3304      	adds	r3, #4
 8001934:	4619      	mov	r1, r3
 8001936:	4610      	mov	r0, r2
 8001938:	f000 fdb2 	bl	80024a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2201      	movs	r2, #1
 8001940:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2201      	movs	r2, #1
 8001948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2201      	movs	r2, #1
 8001950:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2201      	movs	r2, #1
 8001958:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2201      	movs	r2, #1
 8001960:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2201      	movs	r2, #1
 8001968:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2201      	movs	r2, #1
 8001970:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2201      	movs	r2, #1
 8001978:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2201      	movs	r2, #1
 8001980:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2201      	movs	r2, #1
 8001988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b082      	sub	sp, #8
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d101      	bne.n	80019a8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e041      	b.n	8001a2c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d106      	bne.n	80019c2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f000 f839 	bl	8001a34 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2202      	movs	r2, #2
 80019c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	3304      	adds	r3, #4
 80019d2:	4619      	mov	r1, r3
 80019d4:	4610      	mov	r0, r2
 80019d6:	f000 fd63 	bl	80024a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2201      	movs	r2, #1
 80019de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2201      	movs	r2, #1
 80019e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2201      	movs	r2, #1
 80019ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2201      	movs	r2, #1
 80019f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2201      	movs	r2, #1
 80019fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2201      	movs	r2, #1
 8001a06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2201      	movs	r2, #1
 8001a16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2201      	movs	r2, #1
 8001a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a2a:	2300      	movs	r3, #0
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3708      	adds	r7, #8
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001a3c:	bf00      	nop
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bc80      	pop	{r7}
 8001a44:	4770      	bx	lr
	...

08001a48 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d109      	bne.n	8001a6c <HAL_TIM_PWM_Start+0x24>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	bf14      	ite	ne
 8001a64:	2301      	movne	r3, #1
 8001a66:	2300      	moveq	r3, #0
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	e022      	b.n	8001ab2 <HAL_TIM_PWM_Start+0x6a>
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	2b04      	cmp	r3, #4
 8001a70:	d109      	bne.n	8001a86 <HAL_TIM_PWM_Start+0x3e>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	bf14      	ite	ne
 8001a7e:	2301      	movne	r3, #1
 8001a80:	2300      	moveq	r3, #0
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	e015      	b.n	8001ab2 <HAL_TIM_PWM_Start+0x6a>
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	2b08      	cmp	r3, #8
 8001a8a:	d109      	bne.n	8001aa0 <HAL_TIM_PWM_Start+0x58>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	bf14      	ite	ne
 8001a98:	2301      	movne	r3, #1
 8001a9a:	2300      	moveq	r3, #0
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	e008      	b.n	8001ab2 <HAL_TIM_PWM_Start+0x6a>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	bf14      	ite	ne
 8001aac:	2301      	movne	r3, #1
 8001aae:	2300      	moveq	r3, #0
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e05e      	b.n	8001b78 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d104      	bne.n	8001aca <HAL_TIM_PWM_Start+0x82>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2202      	movs	r2, #2
 8001ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ac8:	e013      	b.n	8001af2 <HAL_TIM_PWM_Start+0xaa>
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	2b04      	cmp	r3, #4
 8001ace:	d104      	bne.n	8001ada <HAL_TIM_PWM_Start+0x92>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2202      	movs	r2, #2
 8001ad4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ad8:	e00b      	b.n	8001af2 <HAL_TIM_PWM_Start+0xaa>
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	2b08      	cmp	r3, #8
 8001ade:	d104      	bne.n	8001aea <HAL_TIM_PWM_Start+0xa2>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2202      	movs	r2, #2
 8001ae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ae8:	e003      	b.n	8001af2 <HAL_TIM_PWM_Start+0xaa>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2202      	movs	r2, #2
 8001aee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2201      	movs	r2, #1
 8001af8:	6839      	ldr	r1, [r7, #0]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f001 f85d 	bl	8002bba <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a1e      	ldr	r2, [pc, #120]	; (8001b80 <HAL_TIM_PWM_Start+0x138>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d107      	bne.n	8001b1a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b18:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a18      	ldr	r2, [pc, #96]	; (8001b80 <HAL_TIM_PWM_Start+0x138>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d00e      	beq.n	8001b42 <HAL_TIM_PWM_Start+0xfa>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b2c:	d009      	beq.n	8001b42 <HAL_TIM_PWM_Start+0xfa>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a14      	ldr	r2, [pc, #80]	; (8001b84 <HAL_TIM_PWM_Start+0x13c>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d004      	beq.n	8001b42 <HAL_TIM_PWM_Start+0xfa>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a12      	ldr	r2, [pc, #72]	; (8001b88 <HAL_TIM_PWM_Start+0x140>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d111      	bne.n	8001b66 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f003 0307 	and.w	r3, r3, #7
 8001b4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2b06      	cmp	r3, #6
 8001b52:	d010      	beq.n	8001b76 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f042 0201 	orr.w	r2, r2, #1
 8001b62:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b64:	e007      	b.n	8001b76 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f042 0201 	orr.w	r2, r2, #1
 8001b74:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b76:	2300      	movs	r3, #0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3710      	adds	r7, #16
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	40012c00 	.word	0x40012c00
 8001b84:	40000400 	.word	0x40000400
 8001b88:	40000800 	.word	0x40000800

08001b8c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d101      	bne.n	8001b9e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e041      	b.n	8001c22 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d106      	bne.n	8001bb8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f000 f839 	bl	8001c2a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2202      	movs	r2, #2
 8001bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	3304      	adds	r3, #4
 8001bc8:	4619      	mov	r1, r3
 8001bca:	4610      	mov	r0, r2
 8001bcc:	f000 fc68 	bl	80024a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2201      	movs	r2, #1
 8001be4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2201      	movs	r2, #1
 8001c04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	b083      	sub	sp, #12
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8001c32:	bf00      	nop
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bc80      	pop	{r7}
 8001c3a:	4770      	bx	lr

08001c3c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d104      	bne.n	8001c56 <HAL_TIM_IC_Start_IT+0x1a>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	e013      	b.n	8001c7e <HAL_TIM_IC_Start_IT+0x42>
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	2b04      	cmp	r3, #4
 8001c5a:	d104      	bne.n	8001c66 <HAL_TIM_IC_Start_IT+0x2a>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	e00b      	b.n	8001c7e <HAL_TIM_IC_Start_IT+0x42>
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	2b08      	cmp	r3, #8
 8001c6a:	d104      	bne.n	8001c76 <HAL_TIM_IC_Start_IT+0x3a>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	e003      	b.n	8001c7e <HAL_TIM_IC_Start_IT+0x42>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d104      	bne.n	8001c90 <HAL_TIM_IC_Start_IT+0x54>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	e013      	b.n	8001cb8 <HAL_TIM_IC_Start_IT+0x7c>
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	2b04      	cmp	r3, #4
 8001c94:	d104      	bne.n	8001ca0 <HAL_TIM_IC_Start_IT+0x64>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	e00b      	b.n	8001cb8 <HAL_TIM_IC_Start_IT+0x7c>
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	2b08      	cmp	r3, #8
 8001ca4:	d104      	bne.n	8001cb0 <HAL_TIM_IC_Start_IT+0x74>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	e003      	b.n	8001cb8 <HAL_TIM_IC_Start_IT+0x7c>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8001cba:	7bfb      	ldrb	r3, [r7, #15]
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d102      	bne.n	8001cc6 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8001cc0:	7bbb      	ldrb	r3, [r7, #14]
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d001      	beq.n	8001cca <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e0b3      	b.n	8001e32 <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d104      	bne.n	8001cda <HAL_TIM_IC_Start_IT+0x9e>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2202      	movs	r2, #2
 8001cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001cd8:	e013      	b.n	8001d02 <HAL_TIM_IC_Start_IT+0xc6>
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	2b04      	cmp	r3, #4
 8001cde:	d104      	bne.n	8001cea <HAL_TIM_IC_Start_IT+0xae>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2202      	movs	r2, #2
 8001ce4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ce8:	e00b      	b.n	8001d02 <HAL_TIM_IC_Start_IT+0xc6>
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	2b08      	cmp	r3, #8
 8001cee:	d104      	bne.n	8001cfa <HAL_TIM_IC_Start_IT+0xbe>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2202      	movs	r2, #2
 8001cf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001cf8:	e003      	b.n	8001d02 <HAL_TIM_IC_Start_IT+0xc6>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2202      	movs	r2, #2
 8001cfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d104      	bne.n	8001d12 <HAL_TIM_IC_Start_IT+0xd6>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2202      	movs	r2, #2
 8001d0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d10:	e013      	b.n	8001d3a <HAL_TIM_IC_Start_IT+0xfe>
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	2b04      	cmp	r3, #4
 8001d16:	d104      	bne.n	8001d22 <HAL_TIM_IC_Start_IT+0xe6>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2202      	movs	r2, #2
 8001d1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d20:	e00b      	b.n	8001d3a <HAL_TIM_IC_Start_IT+0xfe>
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	2b08      	cmp	r3, #8
 8001d26:	d104      	bne.n	8001d32 <HAL_TIM_IC_Start_IT+0xf6>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2202      	movs	r2, #2
 8001d2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d30:	e003      	b.n	8001d3a <HAL_TIM_IC_Start_IT+0xfe>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2202      	movs	r2, #2
 8001d36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	2b0c      	cmp	r3, #12
 8001d3e:	d841      	bhi.n	8001dc4 <HAL_TIM_IC_Start_IT+0x188>
 8001d40:	a201      	add	r2, pc, #4	; (adr r2, 8001d48 <HAL_TIM_IC_Start_IT+0x10c>)
 8001d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d46:	bf00      	nop
 8001d48:	08001d7d 	.word	0x08001d7d
 8001d4c:	08001dc5 	.word	0x08001dc5
 8001d50:	08001dc5 	.word	0x08001dc5
 8001d54:	08001dc5 	.word	0x08001dc5
 8001d58:	08001d8f 	.word	0x08001d8f
 8001d5c:	08001dc5 	.word	0x08001dc5
 8001d60:	08001dc5 	.word	0x08001dc5
 8001d64:	08001dc5 	.word	0x08001dc5
 8001d68:	08001da1 	.word	0x08001da1
 8001d6c:	08001dc5 	.word	0x08001dc5
 8001d70:	08001dc5 	.word	0x08001dc5
 8001d74:	08001dc5 	.word	0x08001dc5
 8001d78:	08001db3 	.word	0x08001db3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	68da      	ldr	r2, [r3, #12]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f042 0202 	orr.w	r2, r2, #2
 8001d8a:	60da      	str	r2, [r3, #12]
      break;
 8001d8c:	e01b      	b.n	8001dc6 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	68da      	ldr	r2, [r3, #12]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f042 0204 	orr.w	r2, r2, #4
 8001d9c:	60da      	str	r2, [r3, #12]
      break;
 8001d9e:	e012      	b.n	8001dc6 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	68da      	ldr	r2, [r3, #12]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f042 0208 	orr.w	r2, r2, #8
 8001dae:	60da      	str	r2, [r3, #12]
      break;
 8001db0:	e009      	b.n	8001dc6 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	68da      	ldr	r2, [r3, #12]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f042 0210 	orr.w	r2, r2, #16
 8001dc0:	60da      	str	r2, [r3, #12]
      break;
 8001dc2:	e000      	b.n	8001dc6 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8001dc4:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	6839      	ldr	r1, [r7, #0]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f000 fef3 	bl	8002bba <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a18      	ldr	r2, [pc, #96]	; (8001e3c <HAL_TIM_IC_Start_IT+0x200>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d00e      	beq.n	8001dfc <HAL_TIM_IC_Start_IT+0x1c0>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001de6:	d009      	beq.n	8001dfc <HAL_TIM_IC_Start_IT+0x1c0>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a14      	ldr	r2, [pc, #80]	; (8001e40 <HAL_TIM_IC_Start_IT+0x204>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d004      	beq.n	8001dfc <HAL_TIM_IC_Start_IT+0x1c0>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a13      	ldr	r2, [pc, #76]	; (8001e44 <HAL_TIM_IC_Start_IT+0x208>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d111      	bne.n	8001e20 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f003 0307 	and.w	r3, r3, #7
 8001e06:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	2b06      	cmp	r3, #6
 8001e0c:	d010      	beq.n	8001e30 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f042 0201 	orr.w	r2, r2, #1
 8001e1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e1e:	e007      	b.n	8001e30 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f042 0201 	orr.w	r2, r2, #1
 8001e2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3710      	adds	r7, #16
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	40012c00 	.word	0x40012c00
 8001e40:	40000400 	.word	0x40000400
 8001e44:	40000800 	.word	0x40000800

08001e48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d122      	bne.n	8001ea4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	f003 0302 	and.w	r3, r3, #2
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d11b      	bne.n	8001ea4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f06f 0202 	mvn.w	r2, #2
 8001e74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2201      	movs	r2, #1
 8001e7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	699b      	ldr	r3, [r3, #24]
 8001e82:	f003 0303 	and.w	r3, r3, #3
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d003      	beq.n	8001e92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f7fe fba8 	bl	80005e0 <HAL_TIM_IC_CaptureCallback>
 8001e90:	e005      	b.n	8001e9e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f000 fae9 	bl	800246a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f000 faef 	bl	800247c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	f003 0304 	and.w	r3, r3, #4
 8001eae:	2b04      	cmp	r3, #4
 8001eb0:	d122      	bne.n	8001ef8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	f003 0304 	and.w	r3, r3, #4
 8001ebc:	2b04      	cmp	r3, #4
 8001ebe:	d11b      	bne.n	8001ef8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f06f 0204 	mvn.w	r2, #4
 8001ec8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2202      	movs	r2, #2
 8001ece:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	699b      	ldr	r3, [r3, #24]
 8001ed6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d003      	beq.n	8001ee6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f7fe fb7e 	bl	80005e0 <HAL_TIM_IC_CaptureCallback>
 8001ee4:	e005      	b.n	8001ef2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f000 fabf 	bl	800246a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f000 fac5 	bl	800247c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	691b      	ldr	r3, [r3, #16]
 8001efe:	f003 0308 	and.w	r3, r3, #8
 8001f02:	2b08      	cmp	r3, #8
 8001f04:	d122      	bne.n	8001f4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	f003 0308 	and.w	r3, r3, #8
 8001f10:	2b08      	cmp	r3, #8
 8001f12:	d11b      	bne.n	8001f4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f06f 0208 	mvn.w	r2, #8
 8001f1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2204      	movs	r2, #4
 8001f22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	69db      	ldr	r3, [r3, #28]
 8001f2a:	f003 0303 	and.w	r3, r3, #3
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d003      	beq.n	8001f3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f7fe fb54 	bl	80005e0 <HAL_TIM_IC_CaptureCallback>
 8001f38:	e005      	b.n	8001f46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f000 fa95 	bl	800246a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f000 fa9b 	bl	800247c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	691b      	ldr	r3, [r3, #16]
 8001f52:	f003 0310 	and.w	r3, r3, #16
 8001f56:	2b10      	cmp	r3, #16
 8001f58:	d122      	bne.n	8001fa0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	f003 0310 	and.w	r3, r3, #16
 8001f64:	2b10      	cmp	r3, #16
 8001f66:	d11b      	bne.n	8001fa0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f06f 0210 	mvn.w	r2, #16
 8001f70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2208      	movs	r2, #8
 8001f76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	69db      	ldr	r3, [r3, #28]
 8001f7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d003      	beq.n	8001f8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f7fe fb2a 	bl	80005e0 <HAL_TIM_IC_CaptureCallback>
 8001f8c:	e005      	b.n	8001f9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 fa6b 	bl	800246a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f000 fa71 	bl	800247c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d10e      	bne.n	8001fcc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	f003 0301 	and.w	r3, r3, #1
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d107      	bne.n	8001fcc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f06f 0201 	mvn.w	r2, #1
 8001fc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f7fe faf2 	bl	80005b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fd6:	2b80      	cmp	r3, #128	; 0x80
 8001fd8:	d10e      	bne.n	8001ff8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fe4:	2b80      	cmp	r3, #128	; 0x80
 8001fe6:	d107      	bne.n	8001ff8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ff0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 febe 	bl	8002d74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	691b      	ldr	r3, [r3, #16]
 8001ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002002:	2b40      	cmp	r3, #64	; 0x40
 8002004:	d10e      	bne.n	8002024 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002010:	2b40      	cmp	r3, #64	; 0x40
 8002012:	d107      	bne.n	8002024 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800201c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f000 fa35 	bl	800248e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	f003 0320 	and.w	r3, r3, #32
 800202e:	2b20      	cmp	r3, #32
 8002030:	d10e      	bne.n	8002050 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	f003 0320 	and.w	r3, r3, #32
 800203c:	2b20      	cmp	r3, #32
 800203e:	d107      	bne.n	8002050 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f06f 0220 	mvn.w	r2, #32
 8002048:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 fe89 	bl	8002d62 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002050:	bf00      	nop
 8002052:	3708      	adds	r7, #8
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800206a:	2b01      	cmp	r3, #1
 800206c:	d101      	bne.n	8002072 <HAL_TIM_IC_ConfigChannel+0x1a>
 800206e:	2302      	movs	r3, #2
 8002070:	e082      	b.n	8002178 <HAL_TIM_IC_ConfigChannel+0x120>
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2201      	movs	r2, #1
 8002076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d11b      	bne.n	80020b8 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6818      	ldr	r0, [r3, #0]
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	6819      	ldr	r1, [r3, #0]
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	685a      	ldr	r2, [r3, #4]
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	f000 fbf0 	bl	8002874 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	699a      	ldr	r2, [r3, #24]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f022 020c 	bic.w	r2, r2, #12
 80020a2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	6999      	ldr	r1, [r3, #24]
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	689a      	ldr	r2, [r3, #8]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	430a      	orrs	r2, r1
 80020b4:	619a      	str	r2, [r3, #24]
 80020b6:	e05a      	b.n	800216e <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2b04      	cmp	r3, #4
 80020bc:	d11c      	bne.n	80020f8 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	6818      	ldr	r0, [r3, #0]
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	6819      	ldr	r1, [r3, #0]
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	685a      	ldr	r2, [r3, #4]
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	f000 fc59 	bl	8002984 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	699a      	ldr	r2, [r3, #24]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80020e0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	6999      	ldr	r1, [r3, #24]
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	021a      	lsls	r2, r3, #8
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	430a      	orrs	r2, r1
 80020f4:	619a      	str	r2, [r3, #24]
 80020f6:	e03a      	b.n	800216e <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2b08      	cmp	r3, #8
 80020fc:	d11b      	bne.n	8002136 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	6818      	ldr	r0, [r3, #0]
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	6819      	ldr	r1, [r3, #0]
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	685a      	ldr	r2, [r3, #4]
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	f000 fca4 	bl	8002a5a <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	69da      	ldr	r2, [r3, #28]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f022 020c 	bic.w	r2, r2, #12
 8002120:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	69d9      	ldr	r1, [r3, #28]
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	689a      	ldr	r2, [r3, #8]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	430a      	orrs	r2, r1
 8002132:	61da      	str	r2, [r3, #28]
 8002134:	e01b      	b.n	800216e <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	6818      	ldr	r0, [r3, #0]
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	6819      	ldr	r1, [r3, #0]
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	685a      	ldr	r2, [r3, #4]
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	f000 fcc3 	bl	8002ad0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	69da      	ldr	r2, [r3, #28]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002158:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	69d9      	ldr	r1, [r3, #28]
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	021a      	lsls	r2, r3, #8
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	430a      	orrs	r2, r1
 800216c:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002176:	2300      	movs	r3, #0
}
 8002178:	4618      	mov	r0, r3
 800217a:	3710      	adds	r7, #16
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}

08002180 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002192:	2b01      	cmp	r3, #1
 8002194:	d101      	bne.n	800219a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002196:	2302      	movs	r3, #2
 8002198:	e0ac      	b.n	80022f4 <HAL_TIM_PWM_ConfigChannel+0x174>
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2201      	movs	r2, #1
 800219e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2b0c      	cmp	r3, #12
 80021a6:	f200 809f 	bhi.w	80022e8 <HAL_TIM_PWM_ConfigChannel+0x168>
 80021aa:	a201      	add	r2, pc, #4	; (adr r2, 80021b0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80021ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021b0:	080021e5 	.word	0x080021e5
 80021b4:	080022e9 	.word	0x080022e9
 80021b8:	080022e9 	.word	0x080022e9
 80021bc:	080022e9 	.word	0x080022e9
 80021c0:	08002225 	.word	0x08002225
 80021c4:	080022e9 	.word	0x080022e9
 80021c8:	080022e9 	.word	0x080022e9
 80021cc:	080022e9 	.word	0x080022e9
 80021d0:	08002267 	.word	0x08002267
 80021d4:	080022e9 	.word	0x080022e9
 80021d8:	080022e9 	.word	0x080022e9
 80021dc:	080022e9 	.word	0x080022e9
 80021e0:	080022a7 	.word	0x080022a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	68b9      	ldr	r1, [r7, #8]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f000 f9ba 	bl	8002564 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	699a      	ldr	r2, [r3, #24]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f042 0208 	orr.w	r2, r2, #8
 80021fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	699a      	ldr	r2, [r3, #24]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f022 0204 	bic.w	r2, r2, #4
 800220e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	6999      	ldr	r1, [r3, #24]
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	691a      	ldr	r2, [r3, #16]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	430a      	orrs	r2, r1
 8002220:	619a      	str	r2, [r3, #24]
      break;
 8002222:	e062      	b.n	80022ea <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	68b9      	ldr	r1, [r7, #8]
 800222a:	4618      	mov	r0, r3
 800222c:	f000 fa00 	bl	8002630 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	699a      	ldr	r2, [r3, #24]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800223e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	699a      	ldr	r2, [r3, #24]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800224e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	6999      	ldr	r1, [r3, #24]
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	021a      	lsls	r2, r3, #8
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	430a      	orrs	r2, r1
 8002262:	619a      	str	r2, [r3, #24]
      break;
 8002264:	e041      	b.n	80022ea <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	68b9      	ldr	r1, [r7, #8]
 800226c:	4618      	mov	r0, r3
 800226e:	f000 fa49 	bl	8002704 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	69da      	ldr	r2, [r3, #28]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f042 0208 	orr.w	r2, r2, #8
 8002280:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	69da      	ldr	r2, [r3, #28]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f022 0204 	bic.w	r2, r2, #4
 8002290:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	69d9      	ldr	r1, [r3, #28]
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	691a      	ldr	r2, [r3, #16]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	430a      	orrs	r2, r1
 80022a2:	61da      	str	r2, [r3, #28]
      break;
 80022a4:	e021      	b.n	80022ea <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	68b9      	ldr	r1, [r7, #8]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f000 fa93 	bl	80027d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	69da      	ldr	r2, [r3, #28]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	69da      	ldr	r2, [r3, #28]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	69d9      	ldr	r1, [r3, #28]
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	691b      	ldr	r3, [r3, #16]
 80022dc:	021a      	lsls	r2, r3, #8
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	430a      	orrs	r2, r1
 80022e4:	61da      	str	r2, [r3, #28]
      break;
 80022e6:	e000      	b.n	80022ea <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80022e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80022f2:	2300      	movs	r3, #0
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3710      	adds	r7, #16
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800230c:	2b01      	cmp	r3, #1
 800230e:	d101      	bne.n	8002314 <HAL_TIM_ConfigClockSource+0x18>
 8002310:	2302      	movs	r3, #2
 8002312:	e0a6      	b.n	8002462 <HAL_TIM_ConfigClockSource+0x166>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2202      	movs	r2, #2
 8002320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002332:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800233a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	68fa      	ldr	r2, [r7, #12]
 8002342:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2b40      	cmp	r3, #64	; 0x40
 800234a:	d067      	beq.n	800241c <HAL_TIM_ConfigClockSource+0x120>
 800234c:	2b40      	cmp	r3, #64	; 0x40
 800234e:	d80b      	bhi.n	8002368 <HAL_TIM_ConfigClockSource+0x6c>
 8002350:	2b10      	cmp	r3, #16
 8002352:	d073      	beq.n	800243c <HAL_TIM_ConfigClockSource+0x140>
 8002354:	2b10      	cmp	r3, #16
 8002356:	d802      	bhi.n	800235e <HAL_TIM_ConfigClockSource+0x62>
 8002358:	2b00      	cmp	r3, #0
 800235a:	d06f      	beq.n	800243c <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800235c:	e078      	b.n	8002450 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800235e:	2b20      	cmp	r3, #32
 8002360:	d06c      	beq.n	800243c <HAL_TIM_ConfigClockSource+0x140>
 8002362:	2b30      	cmp	r3, #48	; 0x30
 8002364:	d06a      	beq.n	800243c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002366:	e073      	b.n	8002450 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002368:	2b70      	cmp	r3, #112	; 0x70
 800236a:	d00d      	beq.n	8002388 <HAL_TIM_ConfigClockSource+0x8c>
 800236c:	2b70      	cmp	r3, #112	; 0x70
 800236e:	d804      	bhi.n	800237a <HAL_TIM_ConfigClockSource+0x7e>
 8002370:	2b50      	cmp	r3, #80	; 0x50
 8002372:	d033      	beq.n	80023dc <HAL_TIM_ConfigClockSource+0xe0>
 8002374:	2b60      	cmp	r3, #96	; 0x60
 8002376:	d041      	beq.n	80023fc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002378:	e06a      	b.n	8002450 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800237a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800237e:	d066      	beq.n	800244e <HAL_TIM_ConfigClockSource+0x152>
 8002380:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002384:	d017      	beq.n	80023b6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002386:	e063      	b.n	8002450 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6818      	ldr	r0, [r3, #0]
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	6899      	ldr	r1, [r3, #8]
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685a      	ldr	r2, [r3, #4]
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	f000 fbf0 	bl	8002b7c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80023aa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	68fa      	ldr	r2, [r7, #12]
 80023b2:	609a      	str	r2, [r3, #8]
      break;
 80023b4:	e04c      	b.n	8002450 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6818      	ldr	r0, [r3, #0]
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	6899      	ldr	r1, [r3, #8]
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685a      	ldr	r2, [r3, #4]
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	f000 fbd9 	bl	8002b7c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	689a      	ldr	r2, [r3, #8]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023d8:	609a      	str	r2, [r3, #8]
      break;
 80023da:	e039      	b.n	8002450 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6818      	ldr	r0, [r3, #0]
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	6859      	ldr	r1, [r3, #4]
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	461a      	mov	r2, r3
 80023ea:	f000 fa9d 	bl	8002928 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2150      	movs	r1, #80	; 0x50
 80023f4:	4618      	mov	r0, r3
 80023f6:	f000 fba7 	bl	8002b48 <TIM_ITRx_SetConfig>
      break;
 80023fa:	e029      	b.n	8002450 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6818      	ldr	r0, [r3, #0]
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	6859      	ldr	r1, [r3, #4]
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	461a      	mov	r2, r3
 800240a:	f000 faf7 	bl	80029fc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2160      	movs	r1, #96	; 0x60
 8002414:	4618      	mov	r0, r3
 8002416:	f000 fb97 	bl	8002b48 <TIM_ITRx_SetConfig>
      break;
 800241a:	e019      	b.n	8002450 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6818      	ldr	r0, [r3, #0]
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	6859      	ldr	r1, [r3, #4]
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	461a      	mov	r2, r3
 800242a:	f000 fa7d 	bl	8002928 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2140      	movs	r1, #64	; 0x40
 8002434:	4618      	mov	r0, r3
 8002436:	f000 fb87 	bl	8002b48 <TIM_ITRx_SetConfig>
      break;
 800243a:	e009      	b.n	8002450 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4619      	mov	r1, r3
 8002446:	4610      	mov	r0, r2
 8002448:	f000 fb7e 	bl	8002b48 <TIM_ITRx_SetConfig>
        break;
 800244c:	e000      	b.n	8002450 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800244e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3710      	adds	r7, #16
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800246a:	b480      	push	{r7}
 800246c:	b083      	sub	sp, #12
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002472:	bf00      	nop
 8002474:	370c      	adds	r7, #12
 8002476:	46bd      	mov	sp, r7
 8002478:	bc80      	pop	{r7}
 800247a:	4770      	bx	lr

0800247c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002484:	bf00      	nop
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	bc80      	pop	{r7}
 800248c:	4770      	bx	lr

0800248e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800248e:	b480      	push	{r7}
 8002490:	b083      	sub	sp, #12
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002496:	bf00      	nop
 8002498:	370c      	adds	r7, #12
 800249a:	46bd      	mov	sp, r7
 800249c:	bc80      	pop	{r7}
 800249e:	4770      	bx	lr

080024a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b085      	sub	sp, #20
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	4a29      	ldr	r2, [pc, #164]	; (8002558 <TIM_Base_SetConfig+0xb8>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d00b      	beq.n	80024d0 <TIM_Base_SetConfig+0x30>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024be:	d007      	beq.n	80024d0 <TIM_Base_SetConfig+0x30>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	4a26      	ldr	r2, [pc, #152]	; (800255c <TIM_Base_SetConfig+0xbc>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d003      	beq.n	80024d0 <TIM_Base_SetConfig+0x30>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	4a25      	ldr	r2, [pc, #148]	; (8002560 <TIM_Base_SetConfig+0xc0>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d108      	bne.n	80024e2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	68fa      	ldr	r2, [r7, #12]
 80024de:	4313      	orrs	r3, r2
 80024e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a1c      	ldr	r2, [pc, #112]	; (8002558 <TIM_Base_SetConfig+0xb8>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d00b      	beq.n	8002502 <TIM_Base_SetConfig+0x62>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024f0:	d007      	beq.n	8002502 <TIM_Base_SetConfig+0x62>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a19      	ldr	r2, [pc, #100]	; (800255c <TIM_Base_SetConfig+0xbc>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d003      	beq.n	8002502 <TIM_Base_SetConfig+0x62>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a18      	ldr	r2, [pc, #96]	; (8002560 <TIM_Base_SetConfig+0xc0>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d108      	bne.n	8002514 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002508:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	68fa      	ldr	r2, [r7, #12]
 8002510:	4313      	orrs	r3, r2
 8002512:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	695b      	ldr	r3, [r3, #20]
 800251e:	4313      	orrs	r3, r2
 8002520:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	68fa      	ldr	r2, [r7, #12]
 8002526:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	689a      	ldr	r2, [r3, #8]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	4a07      	ldr	r2, [pc, #28]	; (8002558 <TIM_Base_SetConfig+0xb8>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d103      	bne.n	8002548 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	691a      	ldr	r2, [r3, #16]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	615a      	str	r2, [r3, #20]
}
 800254e:	bf00      	nop
 8002550:	3714      	adds	r7, #20
 8002552:	46bd      	mov	sp, r7
 8002554:	bc80      	pop	{r7}
 8002556:	4770      	bx	lr
 8002558:	40012c00 	.word	0x40012c00
 800255c:	40000400 	.word	0x40000400
 8002560:	40000800 	.word	0x40000800

08002564 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002564:	b480      	push	{r7}
 8002566:	b087      	sub	sp, #28
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a1b      	ldr	r3, [r3, #32]
 8002572:	f023 0201 	bic.w	r2, r3, #1
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a1b      	ldr	r3, [r3, #32]
 800257e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	699b      	ldr	r3, [r3, #24]
 800258a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002592:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f023 0303 	bic.w	r3, r3, #3
 800259a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	68fa      	ldr	r2, [r7, #12]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	f023 0302 	bic.w	r3, r3, #2
 80025ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	697a      	ldr	r2, [r7, #20]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	4a1c      	ldr	r2, [pc, #112]	; (800262c <TIM_OC1_SetConfig+0xc8>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d10c      	bne.n	80025da <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	f023 0308 	bic.w	r3, r3, #8
 80025c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	697a      	ldr	r2, [r7, #20]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	f023 0304 	bic.w	r3, r3, #4
 80025d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a13      	ldr	r2, [pc, #76]	; (800262c <TIM_OC1_SetConfig+0xc8>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d111      	bne.n	8002606 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80025f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	695b      	ldr	r3, [r3, #20]
 80025f6:	693a      	ldr	r2, [r7, #16]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	693a      	ldr	r2, [r7, #16]
 8002602:	4313      	orrs	r3, r2
 8002604:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	693a      	ldr	r2, [r7, #16]
 800260a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	68fa      	ldr	r2, [r7, #12]
 8002610:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685a      	ldr	r2, [r3, #4]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	697a      	ldr	r2, [r7, #20]
 800261e:	621a      	str	r2, [r3, #32]
}
 8002620:	bf00      	nop
 8002622:	371c      	adds	r7, #28
 8002624:	46bd      	mov	sp, r7
 8002626:	bc80      	pop	{r7}
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	40012c00 	.word	0x40012c00

08002630 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002630:	b480      	push	{r7}
 8002632:	b087      	sub	sp, #28
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a1b      	ldr	r3, [r3, #32]
 800263e:	f023 0210 	bic.w	r2, r3, #16
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a1b      	ldr	r3, [r3, #32]
 800264a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	699b      	ldr	r3, [r3, #24]
 8002656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800265e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002666:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	021b      	lsls	r3, r3, #8
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	4313      	orrs	r3, r2
 8002672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	f023 0320 	bic.w	r3, r3, #32
 800267a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	011b      	lsls	r3, r3, #4
 8002682:	697a      	ldr	r2, [r7, #20]
 8002684:	4313      	orrs	r3, r2
 8002686:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4a1d      	ldr	r2, [pc, #116]	; (8002700 <TIM_OC2_SetConfig+0xd0>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d10d      	bne.n	80026ac <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002696:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	011b      	lsls	r3, r3, #4
 800269e:	697a      	ldr	r2, [r7, #20]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	4a14      	ldr	r2, [pc, #80]	; (8002700 <TIM_OC2_SetConfig+0xd0>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d113      	bne.n	80026dc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80026ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80026c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	695b      	ldr	r3, [r3, #20]
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	693a      	ldr	r2, [r7, #16]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	693a      	ldr	r2, [r7, #16]
 80026d8:	4313      	orrs	r3, r2
 80026da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	68fa      	ldr	r2, [r7, #12]
 80026e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685a      	ldr	r2, [r3, #4]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	697a      	ldr	r2, [r7, #20]
 80026f4:	621a      	str	r2, [r3, #32]
}
 80026f6:	bf00      	nop
 80026f8:	371c      	adds	r7, #28
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bc80      	pop	{r7}
 80026fe:	4770      	bx	lr
 8002700:	40012c00 	.word	0x40012c00

08002704 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002704:	b480      	push	{r7}
 8002706:	b087      	sub	sp, #28
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a1b      	ldr	r3, [r3, #32]
 8002712:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a1b      	ldr	r3, [r3, #32]
 800271e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	69db      	ldr	r3, [r3, #28]
 800272a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002732:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f023 0303 	bic.w	r3, r3, #3
 800273a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	68fa      	ldr	r2, [r7, #12]
 8002742:	4313      	orrs	r3, r2
 8002744:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800274c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	021b      	lsls	r3, r3, #8
 8002754:	697a      	ldr	r2, [r7, #20]
 8002756:	4313      	orrs	r3, r2
 8002758:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a1d      	ldr	r2, [pc, #116]	; (80027d4 <TIM_OC3_SetConfig+0xd0>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d10d      	bne.n	800277e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002768:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	021b      	lsls	r3, r3, #8
 8002770:	697a      	ldr	r2, [r7, #20]
 8002772:	4313      	orrs	r3, r2
 8002774:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800277c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a14      	ldr	r2, [pc, #80]	; (80027d4 <TIM_OC3_SetConfig+0xd0>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d113      	bne.n	80027ae <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800278c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002794:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	695b      	ldr	r3, [r3, #20]
 800279a:	011b      	lsls	r3, r3, #4
 800279c:	693a      	ldr	r2, [r7, #16]
 800279e:	4313      	orrs	r3, r2
 80027a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	011b      	lsls	r3, r3, #4
 80027a8:	693a      	ldr	r2, [r7, #16]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	68fa      	ldr	r2, [r7, #12]
 80027b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	685a      	ldr	r2, [r3, #4]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	697a      	ldr	r2, [r7, #20]
 80027c6:	621a      	str	r2, [r3, #32]
}
 80027c8:	bf00      	nop
 80027ca:	371c      	adds	r7, #28
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bc80      	pop	{r7}
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	40012c00 	.word	0x40012c00

080027d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80027d8:	b480      	push	{r7}
 80027da:	b087      	sub	sp, #28
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a1b      	ldr	r3, [r3, #32]
 80027e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a1b      	ldr	r3, [r3, #32]
 80027f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	69db      	ldr	r3, [r3, #28]
 80027fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002806:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800280e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	021b      	lsls	r3, r3, #8
 8002816:	68fa      	ldr	r2, [r7, #12]
 8002818:	4313      	orrs	r3, r2
 800281a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002822:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	031b      	lsls	r3, r3, #12
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	4313      	orrs	r3, r2
 800282e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4a0f      	ldr	r2, [pc, #60]	; (8002870 <TIM_OC4_SetConfig+0x98>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d109      	bne.n	800284c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800283e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	695b      	ldr	r3, [r3, #20]
 8002844:	019b      	lsls	r3, r3, #6
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	4313      	orrs	r3, r2
 800284a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	697a      	ldr	r2, [r7, #20]
 8002850:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	68fa      	ldr	r2, [r7, #12]
 8002856:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685a      	ldr	r2, [r3, #4]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	693a      	ldr	r2, [r7, #16]
 8002864:	621a      	str	r2, [r3, #32]
}
 8002866:	bf00      	nop
 8002868:	371c      	adds	r7, #28
 800286a:	46bd      	mov	sp, r7
 800286c:	bc80      	pop	{r7}
 800286e:	4770      	bx	lr
 8002870:	40012c00 	.word	0x40012c00

08002874 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002874:	b480      	push	{r7}
 8002876:	b087      	sub	sp, #28
 8002878:	af00      	add	r7, sp, #0
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	60b9      	str	r1, [r7, #8]
 800287e:	607a      	str	r2, [r7, #4]
 8002880:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6a1b      	ldr	r3, [r3, #32]
 8002886:	f023 0201 	bic.w	r2, r3, #1
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	699b      	ldr	r3, [r3, #24]
 8002892:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6a1b      	ldr	r3, [r3, #32]
 8002898:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	4a1f      	ldr	r2, [pc, #124]	; (800291c <TIM_TI1_SetConfig+0xa8>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d00b      	beq.n	80028ba <TIM_TI1_SetConfig+0x46>
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028a8:	d007      	beq.n	80028ba <TIM_TI1_SetConfig+0x46>
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	4a1c      	ldr	r2, [pc, #112]	; (8002920 <TIM_TI1_SetConfig+0xac>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d003      	beq.n	80028ba <TIM_TI1_SetConfig+0x46>
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	4a1b      	ldr	r2, [pc, #108]	; (8002924 <TIM_TI1_SetConfig+0xb0>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d101      	bne.n	80028be <TIM_TI1_SetConfig+0x4a>
 80028ba:	2301      	movs	r3, #1
 80028bc:	e000      	b.n	80028c0 <TIM_TI1_SetConfig+0x4c>
 80028be:	2300      	movs	r3, #0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d008      	beq.n	80028d6 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	f023 0303 	bic.w	r3, r3, #3
 80028ca:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80028cc:	697a      	ldr	r2, [r7, #20]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	617b      	str	r3, [r7, #20]
 80028d4:	e003      	b.n	80028de <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	f043 0301 	orr.w	r3, r3, #1
 80028dc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	011b      	lsls	r3, r3, #4
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	697a      	ldr	r2, [r7, #20]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	f023 030a 	bic.w	r3, r3, #10
 80028f8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	f003 030a 	and.w	r3, r3, #10
 8002900:	693a      	ldr	r2, [r7, #16]
 8002902:	4313      	orrs	r3, r2
 8002904:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	697a      	ldr	r2, [r7, #20]
 800290a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	693a      	ldr	r2, [r7, #16]
 8002910:	621a      	str	r2, [r3, #32]
}
 8002912:	bf00      	nop
 8002914:	371c      	adds	r7, #28
 8002916:	46bd      	mov	sp, r7
 8002918:	bc80      	pop	{r7}
 800291a:	4770      	bx	lr
 800291c:	40012c00 	.word	0x40012c00
 8002920:	40000400 	.word	0x40000400
 8002924:	40000800 	.word	0x40000800

08002928 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002928:	b480      	push	{r7}
 800292a:	b087      	sub	sp, #28
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6a1b      	ldr	r3, [r3, #32]
 8002938:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6a1b      	ldr	r3, [r3, #32]
 800293e:	f023 0201 	bic.w	r2, r3, #1
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002952:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	011b      	lsls	r3, r3, #4
 8002958:	693a      	ldr	r2, [r7, #16]
 800295a:	4313      	orrs	r3, r2
 800295c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	f023 030a 	bic.w	r3, r3, #10
 8002964:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002966:	697a      	ldr	r2, [r7, #20]
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	4313      	orrs	r3, r2
 800296c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	697a      	ldr	r2, [r7, #20]
 8002978:	621a      	str	r2, [r3, #32]
}
 800297a:	bf00      	nop
 800297c:	371c      	adds	r7, #28
 800297e:	46bd      	mov	sp, r7
 8002980:	bc80      	pop	{r7}
 8002982:	4770      	bx	lr

08002984 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002984:	b480      	push	{r7}
 8002986:	b087      	sub	sp, #28
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	607a      	str	r2, [r7, #4]
 8002990:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6a1b      	ldr	r3, [r3, #32]
 8002996:	f023 0210 	bic.w	r2, r3, #16
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6a1b      	ldr	r3, [r3, #32]
 80029a8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	021b      	lsls	r3, r3, #8
 80029b6:	697a      	ldr	r2, [r7, #20]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80029c2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	031b      	lsls	r3, r3, #12
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	697a      	ldr	r2, [r7, #20]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80029d6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	011b      	lsls	r3, r3, #4
 80029dc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80029e0:	693a      	ldr	r2, [r7, #16]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	697a      	ldr	r2, [r7, #20]
 80029ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	693a      	ldr	r2, [r7, #16]
 80029f0:	621a      	str	r2, [r3, #32]
}
 80029f2:	bf00      	nop
 80029f4:	371c      	adds	r7, #28
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bc80      	pop	{r7}
 80029fa:	4770      	bx	lr

080029fc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b087      	sub	sp, #28
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6a1b      	ldr	r3, [r3, #32]
 8002a0c:	f023 0210 	bic.w	r2, r3, #16
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	699b      	ldr	r3, [r3, #24]
 8002a18:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6a1b      	ldr	r3, [r3, #32]
 8002a1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a26:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	031b      	lsls	r3, r3, #12
 8002a2c:	697a      	ldr	r2, [r7, #20]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a38:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	011b      	lsls	r3, r3, #4
 8002a3e:	693a      	ldr	r2, [r7, #16]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	697a      	ldr	r2, [r7, #20]
 8002a48:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	693a      	ldr	r2, [r7, #16]
 8002a4e:	621a      	str	r2, [r3, #32]
}
 8002a50:	bf00      	nop
 8002a52:	371c      	adds	r7, #28
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bc80      	pop	{r7}
 8002a58:	4770      	bx	lr

08002a5a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	b087      	sub	sp, #28
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	60f8      	str	r0, [r7, #12]
 8002a62:	60b9      	str	r1, [r7, #8]
 8002a64:	607a      	str	r2, [r7, #4]
 8002a66:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6a1b      	ldr	r3, [r3, #32]
 8002a6c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	69db      	ldr	r3, [r3, #28]
 8002a78:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6a1b      	ldr	r3, [r3, #32]
 8002a7e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	f023 0303 	bic.w	r3, r3, #3
 8002a86:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8002a88:	697a      	ldr	r2, [r7, #20]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a96:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	011b      	lsls	r3, r3, #4
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	697a      	ldr	r2, [r7, #20]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002aaa:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	021b      	lsls	r3, r3, #8
 8002ab0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ab4:	693a      	ldr	r2, [r7, #16]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	697a      	ldr	r2, [r7, #20]
 8002abe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	693a      	ldr	r2, [r7, #16]
 8002ac4:	621a      	str	r2, [r3, #32]
}
 8002ac6:	bf00      	nop
 8002ac8:	371c      	adds	r7, #28
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bc80      	pop	{r7}
 8002ace:	4770      	bx	lr

08002ad0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b087      	sub	sp, #28
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]
 8002adc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6a1b      	ldr	r3, [r3, #32]
 8002ae2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	69db      	ldr	r3, [r3, #28]
 8002aee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6a1b      	ldr	r3, [r3, #32]
 8002af4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002afc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	021b      	lsls	r3, r3, #8
 8002b02:	697a      	ldr	r2, [r7, #20]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b0e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	031b      	lsls	r3, r3, #12
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	697a      	ldr	r2, [r7, #20]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b22:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	031b      	lsls	r3, r3, #12
 8002b28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b2c:	693a      	ldr	r2, [r7, #16]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	697a      	ldr	r2, [r7, #20]
 8002b36:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	693a      	ldr	r2, [r7, #16]
 8002b3c:	621a      	str	r2, [r3, #32]
}
 8002b3e:	bf00      	nop
 8002b40:	371c      	adds	r7, #28
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bc80      	pop	{r7}
 8002b46:	4770      	bx	lr

08002b48 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b085      	sub	sp, #20
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b5e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b60:	683a      	ldr	r2, [r7, #0]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	f043 0307 	orr.w	r3, r3, #7
 8002b6a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	68fa      	ldr	r2, [r7, #12]
 8002b70:	609a      	str	r2, [r3, #8]
}
 8002b72:	bf00      	nop
 8002b74:	3714      	adds	r7, #20
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bc80      	pop	{r7}
 8002b7a:	4770      	bx	lr

08002b7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b087      	sub	sp, #28
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]
 8002b88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	021a      	lsls	r2, r3, #8
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	431a      	orrs	r2, r3
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	697a      	ldr	r2, [r7, #20]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	697a      	ldr	r2, [r7, #20]
 8002bae:	609a      	str	r2, [r3, #8]
}
 8002bb0:	bf00      	nop
 8002bb2:	371c      	adds	r7, #28
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bc80      	pop	{r7}
 8002bb8:	4770      	bx	lr

08002bba <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002bba:	b480      	push	{r7}
 8002bbc:	b087      	sub	sp, #28
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	60f8      	str	r0, [r7, #12]
 8002bc2:	60b9      	str	r1, [r7, #8]
 8002bc4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	f003 031f 	and.w	r3, r3, #31
 8002bcc:	2201      	movs	r2, #1
 8002bce:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6a1a      	ldr	r2, [r3, #32]
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	43db      	mvns	r3, r3
 8002bdc:	401a      	ands	r2, r3
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6a1a      	ldr	r2, [r3, #32]
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	f003 031f 	and.w	r3, r3, #31
 8002bec:	6879      	ldr	r1, [r7, #4]
 8002bee:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf2:	431a      	orrs	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	621a      	str	r2, [r3, #32]
}
 8002bf8:	bf00      	nop
 8002bfa:	371c      	adds	r7, #28
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bc80      	pop	{r7}
 8002c00:	4770      	bx	lr
	...

08002c04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b085      	sub	sp, #20
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d101      	bne.n	8002c1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c18:	2302      	movs	r3, #2
 8002c1a:	e046      	b.n	8002caa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2202      	movs	r2, #2
 8002c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68fa      	ldr	r2, [r7, #12]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	68fa      	ldr	r2, [r7, #12]
 8002c54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a16      	ldr	r2, [pc, #88]	; (8002cb4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d00e      	beq.n	8002c7e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c68:	d009      	beq.n	8002c7e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a12      	ldr	r2, [pc, #72]	; (8002cb8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d004      	beq.n	8002c7e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a10      	ldr	r2, [pc, #64]	; (8002cbc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d10c      	bne.n	8002c98 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	68ba      	ldr	r2, [r7, #8]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	68ba      	ldr	r2, [r7, #8]
 8002c96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3714      	adds	r7, #20
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bc80      	pop	{r7}
 8002cb2:	4770      	bx	lr
 8002cb4:	40012c00 	.word	0x40012c00
 8002cb8:	40000400 	.word	0x40000400
 8002cbc:	40000800 	.word	0x40000800

08002cc0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b085      	sub	sp, #20
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d101      	bne.n	8002cdc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002cd8:	2302      	movs	r3, #2
 8002cda:	e03d      	b.n	8002d58 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	695b      	ldr	r3, [r3, #20]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	69db      	ldr	r3, [r3, #28]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	68fa      	ldr	r2, [r7, #12]
 8002d4c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d56:	2300      	movs	r3, #0
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3714      	adds	r7, #20
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bc80      	pop	{r7}
 8002d60:	4770      	bx	lr

08002d62 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d62:	b480      	push	{r7}
 8002d64:	b083      	sub	sp, #12
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d6a:	bf00      	nop
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bc80      	pop	{r7}
 8002d72:	4770      	bx	lr

08002d74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d7c:	bf00      	nop
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bc80      	pop	{r7}
 8002d84:	4770      	bx	lr
	...

08002d88 <__libc_init_array>:
 8002d88:	b570      	push	{r4, r5, r6, lr}
 8002d8a:	2500      	movs	r5, #0
 8002d8c:	4e0c      	ldr	r6, [pc, #48]	; (8002dc0 <__libc_init_array+0x38>)
 8002d8e:	4c0d      	ldr	r4, [pc, #52]	; (8002dc4 <__libc_init_array+0x3c>)
 8002d90:	1ba4      	subs	r4, r4, r6
 8002d92:	10a4      	asrs	r4, r4, #2
 8002d94:	42a5      	cmp	r5, r4
 8002d96:	d109      	bne.n	8002dac <__libc_init_array+0x24>
 8002d98:	f000 f822 	bl	8002de0 <_init>
 8002d9c:	2500      	movs	r5, #0
 8002d9e:	4e0a      	ldr	r6, [pc, #40]	; (8002dc8 <__libc_init_array+0x40>)
 8002da0:	4c0a      	ldr	r4, [pc, #40]	; (8002dcc <__libc_init_array+0x44>)
 8002da2:	1ba4      	subs	r4, r4, r6
 8002da4:	10a4      	asrs	r4, r4, #2
 8002da6:	42a5      	cmp	r5, r4
 8002da8:	d105      	bne.n	8002db6 <__libc_init_array+0x2e>
 8002daa:	bd70      	pop	{r4, r5, r6, pc}
 8002dac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002db0:	4798      	blx	r3
 8002db2:	3501      	adds	r5, #1
 8002db4:	e7ee      	b.n	8002d94 <__libc_init_array+0xc>
 8002db6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002dba:	4798      	blx	r3
 8002dbc:	3501      	adds	r5, #1
 8002dbe:	e7f2      	b.n	8002da6 <__libc_init_array+0x1e>
 8002dc0:	08002e1c 	.word	0x08002e1c
 8002dc4:	08002e1c 	.word	0x08002e1c
 8002dc8:	08002e1c 	.word	0x08002e1c
 8002dcc:	08002e20 	.word	0x08002e20

08002dd0 <memset>:
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	4402      	add	r2, r0
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d100      	bne.n	8002dda <memset+0xa>
 8002dd8:	4770      	bx	lr
 8002dda:	f803 1b01 	strb.w	r1, [r3], #1
 8002dde:	e7f9      	b.n	8002dd4 <memset+0x4>

08002de0 <_init>:
 8002de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002de2:	bf00      	nop
 8002de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002de6:	bc08      	pop	{r3}
 8002de8:	469e      	mov	lr, r3
 8002dea:	4770      	bx	lr

08002dec <_fini>:
 8002dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dee:	bf00      	nop
 8002df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002df2:	bc08      	pop	{r3}
 8002df4:	469e      	mov	lr, r3
 8002df6:	4770      	bx	lr
